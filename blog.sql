-- MySQL dump 10.13  Distrib 5.7.20, for Win64 (x86_64)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	5.7.20

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article_categories`
--

DROP TABLE IF EXISTS `article_categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article_categories` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор категории',
  `parent` int(11) unsigned NOT NULL DEFAULT '0' COMMENT 'Идентификатор родительской категории',
  `name` varchar(255) NOT NULL COMMENT 'Наименование категории',
  `keywords` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега keywords',
  `description` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега description',
  `sortorder` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Порядок сортировки',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=19 DEFAULT CHARSET=utf8 COMMENT='Категории статей';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article_categories`
--

LOCK TABLES `article_categories` WRITE;
/*!40000 ALTER TABLE `article_categories` DISABLE KEYS */;
INSERT INTO `article_categories` VALUES (1,0,'Web-разработка','','',1),(2,0,'1С:Предприятие','','',2),(3,0,'ОС Linux','','',3),(14,0,'Разное','','',5),(15,0,'Регулярные выражения','','',4);
/*!40000 ALTER TABLE `article_categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `article_items`
--

DROP TABLE IF EXISTS `article_items`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article_items` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор статьи',
  `category` int(11) unsigned NOT NULL COMMENT 'Идентификатор родительской категории',
  `name` varchar(255) NOT NULL COMMENT 'Заголовок статьи',
  `source` varchar(255) NOT NULL DEFAULT '' COMMENT 'Источник статьи',
  `keywords` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега keywords',
  `description` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега description',
  `excerpt` varchar(1000) NOT NULL COMMENT 'Анонс статьи',
  `body` mediumtext NOT NULL COMMENT 'Текст статьи в формате html',
  `added` datetime NOT NULL COMMENT 'Дата публикации',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=25 DEFAULT CHARSET=utf8 COMMENT='Периодические публикации';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article_items`
--

LOCK TABLES `article_items` WRITE;
/*!40000 ALTER TABLE `article_items` DISABLE KEYS */;
INSERT INTO `article_items` VALUES (4,1,'Работа с PDO','http://webonrails.ru/post/1438/','PHP Data Objects (PDO) — расширение для PHP, предоставляющее разработчику универсальный интерфейс для доступа к различным базам данных','PHP класс PDO базы данных интерфейс MySQL PostgreSQL SQLite подготовленные выражения prepared statements исключение Data Objects','В этой статье разговор пойдет о PHP Data Objects (PDO) — расширение для PHP, предоставляющее разработчику универсальный интерфейс для доступа к различным базам данных.','<p>\r\nВ этой статье разговор пойдет о PHP Data Objects (PDO) — расширение для PHP, предоставляющее разработчику универсальный интерфейс для доступа к различным базам данных.\r\n</p>\r\n<p>\r\nВ чем преимущество PDO? Этот вопрос можно раскрыть тремя пунктами:\r\n</p>\r\n<ul>\r\n  <li>Универсальный интерфейс для работы с различными базами данных. Разработчик может легко перевести свое веб-приложение на другую СУБД, поменяв при этом всего пару строк кода.\r\n  <li>Высокая скорость работы.\r\n  <li>Подготовленные выражения, о которых мы поговорим чуть позже.\r\n</ul>\r\n</p>\r\n<p>\r\nНа данный момент расширение PDO может поддерживать СУБД для которой существует PDO-драйвер:\r\n</p>\r\n<ul>\r\n  <li>PDO_CUBRID (CUBRID)</li>\r\n  <li>PDO_DBLIB (FreeTDS, Microsoft SQL Server, Sybase)</li>\r\n  <li>PDO_FIREBIRD (Firebird, Interbase 6)</li>\r\n  <li>PDO_IBM (IBM DB2)</li>\r\n  <li>PDO_INFORMIX (IBM Informix Dynamic Server)</li>\r\n  <li>PDO_MYSQL (MySQL 3.x/4.x/5.x)</li>\r\n  <li>PDO_OCI (Oracle Call Interface)</li>\r\n  <li>PDO_ODBC (ODBC v3 (IBM DB2, unixODBC and win32 ODBC))</li>\r\n  <li>PDO_PGSQL (PostgreSQL)</li>\r\n  <li>PDO_SQLITE (SQLite 3 and SQLite 2)</li>\r\n  <li>PDO_SQLSRV (Microsoft SQL Serve )</li>\r\n  <li>PDO_4D (4D)</li>\r\n</ul>\r\n\r\n<h2>Подключение к базе данных</h2>\r\n\r\n<p>\r\nВ зависимости от выбранной СУБД, способ подключения может незначительно отличаться. Подключение к популярным СУБД:\r\n</p>\r\n\r\n[php]// MуSQL\r\n$DBH = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass); \r\n\r\n// PostgreSQL\r\n$DBH = new PDO(\"pgsql:host=$host;dbname=$dbname\", $user, $pass);\r\n\r\n//MS SQL\r\n$DBH = new PDO(\"mssql:host=$host;dbname=$dbname\", $user, $pass); \r\n\r\n// SQLite\r\n$DBH = new PDO(\"sqlite:my/database/path/database.db\");[/php]\r\n\r\n<h2>Обработка ошибок и исключения</h2>\r\n\r\n<p>\r\nОбязательно заключайте подключение к базе данных в блок try/catch:\r\n</p>\r\n\r\n[php]try {\r\n    $DBH = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass); \r\n} \r\ncatch(PDOException $e) { \r\n    echo \"Нет соединения с базой данных\"; \r\n}[/php]\r\n\r\n<p>\r\nИначе, в случае ошибки, в браузер будет выкинут Fatal error, в котором будут раскрыты все подробности вашего соединения, с логином и паролем.\r\n</p>\r\n<p>\r\nPDO умеет выбрасывать исключения при ошибках, поэтому все операции с базой, по хорошему, должны находиться в блоке try/catch.\r\n</p>\r\n<p>\r\nPDO имеет три режима обработки исключения:\r\n</p>\r\n<ul>\r\n  <li><strong>PDO::ERRMODE_SILENT</strong> — режим по умолчанию, ошибки генерируются по такому же принципу, как в расширениях mysql или mysqli. После возникновения ошибки скрипт продолжит работу.\r\n  <li><strong>PDO::ERRMODE_WARNING</strong> — режим вызовет стандартное сообщение E_WARNING и позволит скрипту продолжить работу.\r\n  <li><strong>PDO::ERRMODE_EXCEPTION</strong> — режим выбрасывает исключение, что позволяет обрабатывать ошибки и скрывать важную информацию от посторонних глаз.\r\n</ul>\r\n<p>\r\nЧтобы установить необходимый уровень контроля ошибок необходимо вызвать метод $this->setAttribute после подключения к базе данных.\r\n</p>\r\n\r\n[php]try {\r\n    $DBH = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass); \r\n    $DBH->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n} \r\ncatch(PDOException $e) { \r\n    echo \"Нет соединения с базой данных\"; \r\n}[/php]\r\n\r\n<h2>Подготовленные выражения или Prepared Statements</h2>\r\n\r\n<p>\r\nПодготовленные выражения — это заранее скомпилированное SQL-выражение, которое может быть многократно выполнено путем отправки серверу лишь различных наборов данных. Дополнительным преимуществом является невозможность провести SQL-инъекцию.\r\n</p>\r\n<p>\r\nЗа подготовленные выражения отвечает метод $DBH->prepare. Им и рекомендуется всегда пользоваться.\r\n</p>\r\n<p>\r\nСразу хочу отметить, что выполнить запрос в PDO можно тремя методами:\r\n</p>\r\n<ul>\r\n  <li><strong>$DBH->exec</strong> — используется для запросов, которые не возвращают никаких данных. Метод возвращает количество затронутых им записей, или FALSE в случае ошибки.</li>\r\n</ul>\r\n\r\n[php]$count_row = $DBH->exec(\"DELETE FROM users\");[/php]\r\n\r\n<ul>\r\n  <li><strong>$DBH->query</strong> – используется выполнения не защищенных запросов, и возвращает результат или FALSE в случаи ошибки. Например, им можно выполнять простые запросы.</li>\r\n</ul>\r\n\r\n[php]$DBH->query(\"SET NAMES \'cp1251\'\");\r\n$DBH->query(\"SELECT * FROM users\");\r\n$DBH->query(\"DELETE FROM users\");[/php]\r\n\r\n<ul>\r\n  <li><strong>$DBH->prepare + $STH->execute</strong> — используется для подготовки выражений и выполнения запроса.</li>\r\n</ul>\r\n\r\n[php]// безымянные placeholders\r\n$STH = $DBH->prepare(\"INSERT INTO users (name, phone, city) values (?, ?, ?)\");[/php] \r\n\r\n[php]// именные placeholders\r\n$STH = $DBH->prepare(\"INSERT INTO users (name, phone, city) values (:name, :phone, :city)\");[/php]\r\n\r\n<p>\r\nПосле подготовки, запрос выполняется методом $STH->execute($data).\r\n</p>\r\n\r\n[php]// безымянные placeholders\r\n\r\n$data = array();\r\n$data[] = \'Alersander\';\r\n$data[] = \'+7 000 123 45 67\';\r\n$data[] = \'St. Petersburg\';\r\n\r\n$STH = $DBH->prepare(\"INSERT INTO users (name, phone, city) values (?, ?, ?)\");\r\n$STH->execute($data);[/php]\r\n\r\n[php]// именные placeholders\r\n\r\n$data = array();\r\n$data[\'name\'] = \'Alersander\';\r\n$data[\'phone\'] = \'+7 000 123 45 67\';\r\n$data[\'city\'] = \'St. Petersburg\';\r\n\r\n$STH = $DBH->prepare(\"INSERT INTO users (name, phone, city) values (:name, :phone, :city)\");\r\n$STH->execute($data);[/php]\r\n\r\n<h2>Выборка данных</h2>\r\n\r\n<p>\r\nДля выборки с произвольными параметрами тоже будем использовать метод $DBH->prepare. Данные выборки можно получить с помощью методов:\r\n</p>\r\n<ul>\r\n  <li><strong>$STH->fetch</strong> — выбирает следующую строку и возвращает в необходимом виде.</li>\r\n  <li><strong>$STH->fetchAll</strong> — возвращает массив всех выбранных строк.</li>\r\n  <li><strong>$STH->fetchObject</strong> — выбирает следующую строку и возвращает ее как объект.</li>\r\n</ul>\r\n<p>\r\nЯ буду рассматривать только первый метод, т.к. он универсальный и предоставляет разработчику, всё, что ему необходимо.\r\n</p>\r\n<p>\r\nМетоду $STH->fetch можно указать, в каком виде нам нужно предоставить результат:\r\n</p>\r\n<ul>\r\n  <li><strong>PDO::FETCH_BOTH</strong> (по умолчанию) — возвращает числовой и ассоциативный массив;</li>\r\n  <li><strong>PDO::FETCH_ASSOC</strong> — возвращает массив ассоциативный с названиями столбцов;</li>\r\n  <li><strong>PDO::FETCH_NUM</strong> — возвращает массив числовыми ключами в виде порядковых номеров столбцов;</li>\r\n  <li><strong>PDO::FETCH_OBJ</strong> — возвращает анонимный объект со свойствами, соответствующими именам столбцов;</li>\r\n  <li><strong>PDO::FETCH_BOUND</strong> — присваивает значения столбцов соответствующим переменным, заданным с помощью метода $STH->bindColumn();</li>\r\n  <li><strong>PDO::FETCH_CLASS</strong> — присваивает значения столбцов соответствующим свойствам указанного класса. Если для какого-то столбца свойства нет, оно будет создано;</li>\r\n  <li><strong>PDO::FETCH_INTO</strong> — обновляет существующий экземпляр указанного класса;</li>\r\n  <li><strong>PDO::FETCH_LAZY</strong> — объединяет в себе PDO::FETCH_BOTH и PDO::FETCH_OBJ.</li>\r\n</ul>\r\n\r\n[php]$STH = $DBH->prepare(\"SELECT name, phone, city FROM users\");\r\n$STH->execute();\r\n\r\nwhile($res = $STH->fetch(PDO::FETCH_ASSOC)) {\r\n    echo $res[\'name\'];\r\n}\r\n\r\n$STH = $DBH->prepare(\"SELECT name, phone, city FROM users\");\r\n$STH->execute();\r\n\r\nwhile($res = $STH->fetch(PDO::FETCH_OBJ)) {\r\n    echo $res->name;\r\n}[/php]\r\n\r\n<h2>Закрытие соединения и освобождение буфера запроса</h2>\r\n\r\n<p>\r\nВ PDO нет специальных методов для этих целей. Закрыть соединение с базой данных можно путем переопределения переменных:\r\n</p>\r\n\r\n[php]$DBH = null;\r\n$STH = null;[/php]\r\n\r\n<h2>Полезные методы</h2>\r\n\r\n<ul>\r\n  <li><strong>$DBH->lastInsertId()</strong> — возвращает id последней вставленной записи.</li>\r\n  <li><strong>$DBH->query(string)</strong> — экранирует специальные символы в строковых данных таким образом, что их становится безопасно использовать в запросах.</li>\r\n  <li><strong>$STH->rowCount()</strong> — возвращает количество затронутых записей последним запросом.</li>\r\n</ul>\r\n\r\n<h2>Обработка ошибок PDO</h2>\r\n\r\n<p>\r\nЛично мне не нравится, что если я не заключаю все запросы в блок try/catch, то PDO выкидывает Fatal error со всеми интимными подробностями моего запроса. В промышленном приложении заключать каждый запрос в блок try/catch, это идиотизм! \r\n</p>\r\n<p>\r\nПоэтому мы поступим следующим образом — немного расширим классы PDO и PDOStatement:\r\n</p>\r\n\r\n[php]class DB extends PDO\r\n{\r\n    public $error = false; // выводить сообщения об ошибках на экран? (true/false)\r\n    \r\n    public function __construct($dsn, $username=\'\', $password=\'\', $driver_options=array()) {\r\n        try {\r\n            parent::__construct($dsn, $username, $password, $driver_options);\r\n                \r\n            $this->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n            $this->setAttribute(PDO::ATTR_STATEMENT_CLASS, array(\'DBStatement\', array($this)));\r\n            \r\n            $this->query(\"SET NAMES \'cp1251\'\");\r\n        } catch(PDOException $e) { \r\n            echo \"Произошла ошибка в работе с базой данных...\";\r\n            exit();\r\n        }\r\n    }\r\n    \r\n    public function prepare($sql, $driver_options=array()) {\r\n        try {\r\n            return parent::prepare($sql, $driver_options);\r\n        } catch(PDOException $e) { \r\n            $this->error($e->getMessage());\r\n        }\r\n    }\r\n    \r\n    public function query($sql) {\r\n        try {\r\n            return parent::query($sql);\r\n        } catch(PDOException $e) { \r\n            $this->error($e->getMessage());\r\n        }\r\n    }\r\n    \r\n    public function exec($sql) {\r\n        try {\r\n            return parent::exec($sql);\r\n        } catch(PDOException $e) { \r\n            $this->error($e->getMessage());\r\n        }\r\n    }\r\n    \r\n    public function error($msg) {\r\n        if($this->error) {\r\n            echo $msg;\r\n        } else {\r\n            echo \"Произошла ошибка в работе с базой данных...\";\r\n        }\r\n        exit();\r\n    }\r\n}[/php]\r\n\r\n[php]class DBStatement extends PDOStatement \r\n{\r\n    protected $DBH;\r\n    \r\n    protected function __construct($DBH) {\r\n        $this->DBH = $DBH;\r\n    }\r\n    \r\n    public function execute($data=array()) {\r\n        try {\r\n            return parent::execute($data);\r\n        } catch(PDOException $e) {\r\n            $this->DBH->error($e->getMessage());\r\n        }\r\n    }\r\n}[/php]\r\n\r\n<p>\r\nКак видите, я реализую свои два класса DB и DBStatement, наследуя классы PDO и PDOStatement. Классы реализуют все необходимые мне для работы над ошибками методы, которые обрабатываются блоком try/catch.\r\n</p>\r\n\r\n[php]$DBH = new DB(\"mysql:host=$host;dbname=$dbname\", $user, $pass);\r\n$DBH->error = true; // Для отладки выводим сообщения об ошибках на экран.\r\n\r\n$STH = $DBH->prepare(\"SELEC * FROM users\");\r\n$STH->execute($data);[/php]\r\n\r\n<p>\r\nКак видите, я совершил опечатку в операторе и могу получить всю необходимую информацию об этой ошибке.\r\n</p>\r\n\r\n[code]SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error in your SQL syntax; \r\ncheck the manual that corresponds to your MySQL server version for the right syntax to use near \r\n\'SELEC * FROM users\' at line 1[/code]\r\n\r\n<h2>Расширение функционала</h2>\r\n\r\n<p>\r\nТакже бывает полезно расширить функционал PDO. Например, часто требуется получить количество записей в таблице.\r\n</p>\r\n<p>\r\nСтандартными методами это можно делать следующим образом:\r\n</p>\r\n\r\n[php]$data = array();\r\n$data[\'user_id\'] = 1;\r\n\r\n$STH = $DBH->prepare(\"SELECT COUNT(*) as count FROM users WHERE user_id=:user_id\");\r\n$STH->execute($data);\r\n        \r\necho $STH->fetch(PDO::FETCH_OBJ)->count;[/php]\r\n\r\n<p>\r\nНе слишком удобно. Поэтому реализуем в нашем классе методом count:\r\n</p>\r\n\r\n[php]class DB extends PDO\r\n{\r\n    // ..................\r\n\r\n    public function count($sql, $data)\r\n    {\r\n        $res = $this->prepare($sql);\r\n        $res->execute($data);\r\n        \r\n        return $res->fetch(PDO::FETCH_OBJ);\r\n    }\r\n\r\n    // ..................\r\n}[/php]\r\n\r\n<p>\r\nПолучаем количество записей:\r\n</p>\r\n\r\n[php]$DBH = new DB(\"mysql:host=$host;dbname=$dbname\", $user, $pass);\r\necho $DBH->count(\"SELECT COUNT(*) as count FROM users WHERE user_id=:user_id\", array(\'user_id\'=>\'1\'))->count;[/php]\r\n\r\n<p>\r\nСвои методы это конечно хорошо, но мне бы ещё хотелось писать все одной строкой. К сожалению, стандартными возможностями я не могу этого сделать:\r\n</p>\r\n\r\n[php]$res = $DBH->prepare(\"SELECT * FROM users WHERE id_user=:id_user\")\r\n           ->execute(array(\'id_user\'=>\'1\'))\r\n           ->fetch(PDO::FETCH_ASSOC);\r\necho $res[\'name\'];\r\n\r\n// или так\r\necho $DBH->prepare(\"SELECT *FROM users WHERE id_user=:id_user\")\r\n         ->execute(array(\'id_user\'=>\'1\'))\r\n         ->fetch(PDO::FETCH_OB)\r\n         ->name;[/php]\r\n\r\n<p>\r\nМетод execute возвращает бесполезное логическое значение об успехе операции, а не объект DBStatement.\r\n</p>\r\n<p>\r\nДопиливаем свой метод execute:\r\n</p>\r\n\r\n[php]public function execute($data=array())\r\n{\r\n    try {\r\n        parent::execute($data);\r\n        return $this; \r\n    } \r\n    catch(PDOException $e) {\r\n        $this->DBH->error($e->getMessage());\r\n    }\r\n}[/php]\r\n\r\n<p>\r\nПроверяем результат:\r\n</p>\r\n\r\n[php]echo $DBH->prepare(\"SELECT COUNT(*) as count FROM users WHERE city=:city\")\r\n         ->execute(array(\'city\'=>\'St. Petersburg\'))\r\n         ->fetch(PDO::FETCH_OBJ)\r\n         ->count;[/php]','2013-04-10 08:59:23'),(5,1,'Введение в LESS','','','','CSS — простой и доступный инструмент. Однако, он имеет свои ограничения, особенно когда встает вопрос о сопровождении готового кода. Когда нужно модифицировать тысячи строк со стилями, разделенных по нескольким файлам, задача становится проблемой. Для преодоления проблемы созданы препроцессоры CSS, которые позволяют комбинировать стили динамически.','<p>\r\nCSS — простой и доступный инструмент. Однако, он имеет свои ограничения, особенно когда встает вопрос о сопровождении готового кода. Когда нужно модифицировать тысячи строк со стилями, разделенных по нескольким файлам, задача становится проблемой. Для преодоления проблемы созданы препроцессоры CSS, которые позволяют комбинировать стили динамически. Существует несколько вариантов (например, LESS и SASS), сегодня мы рассмотрим LESS.\r\n</p>\r\n\r\n<h2>Использование LESS</h2>\r\n\r\n<p>\r\nИспользовать LESS очень просто. Нужно просто добавить две строки в тег head вашего документа HTML. Первая строка содержит название вашего файла LESS, а вторая строка — подключение библиотеки less.js, которую можно скачать с <a href=\"http://www.lesscss.org/\">официального сайта</a>.\r\n</p>\r\n[html]<link rel=\"stylesheet/less\" type=\"text/css\" href=\"style.less\">\r\n<script src=\"less.js\" type=\"text/javascript\"></script>[/html]\r\n<p>\r\nТеперь LESS файл будет работать также как и обычный CSS.\r\n</p>\r\n<p>\r\nЭтот метод работает только в современных браузерах и подходит для использования на локальном сервере. Для рабочего сайта необходима предварительная компиляция на веб-сервере или различные инструменты от сторонних производителей.\r\n</p>\r\n \r\n<h2>Синтаксис LESS</h2>\r\n\r\n<p>\r\nВ отличие от обычного CSS, LESS больше похож на язык программирования. Он динамический, поэтому логичного ожидать использования в нем переменных, операций и области видимости.\r\n</p>\r\n\r\n<h3>Переменные</h3>\r\n\r\n<p>\r\nПри работе с CSS вы вероятно часто сталкивались с ситуацией, когда повторяющееся значение устанавливалось в нескольких блоках по всей таблице стилей.\r\n</p>\r\n\r\n[css].class1 {\r\n    background-color: #2d5e8b;\r\n}\r\n.class2 {\r\n    background-color: #fff;\r\n    color: #2d5e8b;\r\n}\r\n.class3 {\r\n    border: 1px solid #2d5e8b;\r\n}[/css]\r\n\r\n<p>\r\nВсе прекрасно, пока не придется просеивать 1000 одинаковых участков кода по всей таблице стилей, чтобы поменять значение. При использовании препроцессора LESS такая проблема легко решается с помощью переменных. Переменные позволяют хранить значения, которые можно многократно использовать в таблице стилей.\r\n</p>\r\n\r\n[less]\r\n@color-base: #2d5e8b;\r\n\r\n.class1 {\r\n    background-color: @color-base;\r\n}\r\n.class2 {\r\n    background-color: #fff;\r\n    color: @color-base;\r\n}\r\n.class3 {\r\n    border: 1px solid @color-base;\r\n}\r\n[/less]\r\n\r\n<p>\r\nВ выше приведенном примере в переменной <span style=\"color: blue;\">@color-base</span> сохраняется значение <span style=\"color: blue;\">#2d5e8b</span>. И когда потребуется изменить цвет, то нужно будет поменять значение только в переменной.\r\n</p>\r\n<p>\r\nВ переменной можно использовать и другие значения:\r\n</p>\r\n\r\n[less]\r\n@font-family: Georgia;\r\n@dot-border: dotted;\r\n@transition: linear;\r\n@opacity: 0.5;\r\n[/less]\r\n\r\n<h3>Вложенные правила (nesting)</h3>\r\n\r\n<p>\r\nПри работе с обычным CSS кодом, достаточно часто встречается следующая структура кода:\r\n</p>\r\n\r\n[css]\r\nnav {\r\n    height: 40px;\r\n    width: 100%;\r\n    background: #455868;\r\n    border-bottom: 2px solid #283744;\r\n}\r\nnav li {\r\n    width: 600px;\r\n    height: 40px;\r\n}\r\nnav li a {\r\n    color: #fff;\r\n    line-height: 40px;\r\n    text-shadow: 1px 1px 0px #283744;\r\n}\r\n[/css]\r\n\r\n<p>\r\nВ обычном CSS коде мы выбираем наследников, указывая родителя в каждом наборе правил. В LESS можно улучшить выше приведенный набор правил с помощью вложения наследников в родительский элемент:\r\n</p>\r\n\r\n[less]\r\nnav {\r\n    height: 40px;\r\n    width: 100%;\r\n    background: #455868;\r\n    border-bottom: 2px solid #283744;\r\n    li {\r\n        width: 600px;\r\n        height: 40px;\r\n        a {\r\n            color: #fff;\r\n            line-height: 40px;\r\n            text-shadow: 1px 1px 0px #283744;\r\n        }\r\n    }\r\n}\r\n[/less]\r\n\r\n<p>\r\nТакже можно использовать псевдо-классы, например <span style=\"color: blue;\">:hover</span>, с помощью символа амперсенда <span style=\"color: blue;\">&amp;</span>. Допустим, мы хотим добавить <span style=\"color: blue;\">:hover</span> к тегу ссылки:\r\n</p>\r\n\r\n[less]\r\na {\r\n    color: #fff;\r\n    line-height: 40px;\r\n    text-shadow: 1px 1px 0px #283744;\r\n    &:hover {\r\n        background-color: #000;\r\n        color: #fff;\r\n    }\r\n}\r\n[/less]\r\n\r\n<h3>Примеси (mixins)</h3>\r\n\r\n<p>\r\nВ LESS можно использовать примеси для хранения набора правил и применения их в других наборах. Например:\r\n</p>\r\n\r\n[less]\r\n.gradient {\r\n    background: #eaeaea;\r\n    background: linear-gradient(top, #eaeaea, #cccccc);\r\n}\r\n[/less]\r\n\r\n<p>\r\nВ выше приведенном примере мы устанавливаем цвет градиента в классе <span style=\"color: blue;\">.gradient</span>. Затем, когда нужно добавить градиент, нужно просто вставить <span style=\"color: blue;\">.gradient</span> следующим образом:\r\n</p>\r\n\r\n[less]\r\n.box {\r\n    .gradient;\r\n    border: 1px solid #555;\r\n    border-radius: 3px;\r\n}\r\n[/less]\r\n\r\n<p>\r\nКласс <span style=\"color: blue;\">.box</span> наследует все объявления из <span style=\"color: blue;\">.gradient</span>. Поэтому выше приведенное выражение LESS эквивалентно следующему обычному коду CSS:\r\n</p>\r\n\r\n[css]\r\n.box {\r\n    background: #eaeaea;\r\n    background: linear-gradient(top, #eaeaea, #cccccc);\r\n    border: 1px solid #555;\r\n    border-radius: 3px;\r\n}\r\n[/css]\r\n\r\n<h3>Примеси с параметрами</h3>\r\n\r\n<p>\r\nПримеси с параметрами почти такие же, как и обычные, но сродни функциям они могут принимать параметры для использования внутри примеси:\r\n</p>\r\n\r\n[less]\r\n.border-radius(@radius) {\r\n    -webkit-border-radius: @radius;\r\n    -moz-border-radius: @radius;\r\n    border-radius: @radius;\r\n}\r\n\r\n.sidebar {\r\n    .border-radius(4px);\r\n}\r\n[/less]\r\n\r\n<p>\r\nРезультат выглядит следующим образом:\r\n</p>\r\n\r\n[css]\r\n.sidebar {\r\n    -webkit-border-radius: 4px;\r\n    -moz-border-radius: 4px;\r\n    border-radius: 4px;\r\n}\r\n[/css]\r\n\r\n<p>\r\nМы также можем выставить значения по умолчанию для параметров:\r\n</p>\r\n\r\n[less]\r\n.border-radius(@radius: 6px) {\r\n    -webkit-border-radius: @radius;\r\n    -moz-border-radius: @radius;\r\n    border-radius: @radius;\r\n}\r\n.sidebar1 {\r\n    .border-radius;\r\n}\r\n.sidebar2 {\r\n    .border-radius(12px);\r\n}\r\n[/less]\r\n\r\n<p>\r\nЧто в результате дает:\r\n</p>\r\n\r\n\r\n[css]\r\n.sidebar1 {\r\n  -webkit-border-radius: 6px;\r\n  -moz-border-radius: 6px;\r\n  border-radius: 6px;\r\n}\r\n.sidebar2 {\r\n  -webkit-border-radius: 12px;\r\n  -moz-border-radius: 12px;\r\n  border-radius: 12px;\r\n}\r\n[/css]\r\n\r\n<p>\r\nПри работе с CSS3 можно использовать библиотеку <a href=\"http://lesselements.com/\">LESS ELements</a>, чтобы облегчить свою работу. LESS Elements является коллекцией общих примешиваний CSS3, которые часто используются в стилях, например, <span style=\"color: blue;\">border-radius</span>, <span style=\"color: blue;\">gradients</span>, <span style=\"color: blue;\">drop-shadow</span> и так далее.\r\n</p>\r\n<p>\r\nЧтобы использовать LESS нужно просто добавить правило <span style=\"color: blue;\">@import</span> файл LESS. Нужно только загрузить библиотеку и поместить ее в рабочую директорию.\r\n</p>\r\n\r\n[css]\r\n@import \"elements.less\";\r\n[/css]\r\n\r\n<p>\r\nТеперь можно использовать все классы из <span style=\"color: blue;\">elements.less</span>. Например, чтобы добавить скругление углов рамки с радиусом <span style=\"color: blue;\">3px</span> к элементу <span style=\"color: blue;\">div</span>, нужно написать:\r\n</p>\r\n\r\n[less]\r\ndiv {\r\n    .rounded(3px);\r\n}\r\n[/less]\r\n\r\n<h3>Операции</h3>\r\n\r\n<p>\r\nТакже можно использовать операции в LESS. Доступны сложение, вычитание, умножение и деление.\r\n</p>\r\n<p>\r\nДопустим, что <span style=\"color: blue;\">элемент B</span> в два раза выше <span style=\"color: blue;\">элемента A</span>:\r\n</p>\r\n\r\n[less]\r\n@height: 100px\r\n\r\n.element-A {\r\n    height: @height;   \r\n}\r\n.element-B {\r\n    height: @height * 2;\r\n}\r\n[/less]\r\n\r\n<p>\r\nСначала мы определяем переменную <span style=\"color: blue;\">@height</span> и назначаем ее для указания высоты <span style=\"color: blue;\">элемента А</span>. В <span style=\"color: blue;\">элементе В</span> мы просто умножаем значение переменной на <span style=\"color: blue;\">2</span>. Теперь, когда мы изменяем значение переменной <span style=\"color: blue;\">@height</span>, <span style=\"color: blue;\">элемент В</span> всегда будет в два раза выше.\r\n</p>\r\n\r\n<h3>Операции с цветом</h3>\r\n\r\n<p>\r\nОперации, которые мы продемонстрировали выше, могут быть использованы для управления цветом. Цвета можно создавать и управлять ими посредством математики:\r\n</p>\r\n\r\n[less]\r\n@color: #888888 - #333333;\r\n\r\nh2 {\r\n  color: @color;\r\n}\r\n[/less]\r\n\r\n<p>\r\nИ скомпилированный код выглядит следующим образом:\r\n</p>\r\n\r\n[css]\r\nh2 {\r\n  color: #555555;\r\n}\r\n[/css]\r\n\r\n<p>\r\nЭто еще не все, что LESS может делать с цветами. Все становится намного интереснее, когда речь заходит о встроенных функциях для работы с цветом:\r\n</p>\r\n\r\n[less]\r\nlighten(@color, 10%);     // возвращает цвет, который на 10% светлее, чем @color\r\ndarken(@color, 10%);      // возвращает цвет, который на 10% темнее, чем @color\r\n\r\nsaturate(@color, 10%);    // возвращает цвет, который на 10% более насыщенный, чем @color\r\ndesaturate(@color, 10%);  // возвращает цвет, который на 10% менее насыщенный, чем @color\r\n\r\nfadein(@color, 10%);      // возвращает цвет, который на 10% менее прозрачен, чем @color\r\nfadeout(@color, 10%);     // возвращает цвет, который на 10% более прозрачен, чем @color\r\nfade(@color, 50%);        // возвращает @color с 50%-ной прозрачностью\r\n\r\nspin(@color, 10);         // возвращает цвет с оттенком в 10 раз большим, чем @color\r\nspin(@color, -10);        // возвращает цвет с оттенком в 10 раз меньшим, чем @color\r\n\r\nmix(@color1, @color2);    // возвращает микс цветов @color1 и @color2\r\n[/less]\r\n\r\n<h3>Математические функции</h3>\r\n\r\n<p>\r\nС помощью этих функций вы можете использовать числа в своем коде. Среди этих функций можно выделить <span style=\"color: blue;\">round()</span>, <span style=\"color: blue;\">ceil()</span>, <span style=\"color: blue;\">floor()</span> и <span style=\"color: blue;\">percentage()</span>. Передавая числа в эти функции, вы сможете получить округленные числа, числа, округленные по большему и по меньшему значению, а также числа в процентном выражении.\r\n</p>\r\n \r\n<h3>Область видимости (scope)</h3>\r\n\r\n<p>\r\nLESS использует концепцию области видимости. Сначала используются переменные из локального контекста, а если их нет, то происходит поиск в более широкой области видимости.\r\n</p>\r\n\r\n[less]\r\nheader {\r\n    @color: black;\r\n    background-color: @color;\r\n    nav {\r\n        @color: blue;\r\n        background-color: @color;\r\n        a {\r\n            color: @color;\r\n        }\r\n    }  \r\n}\r\n[/less]\r\n\r\n<p>\r\nВ приведенном примере <span style=\"color: blue;\">header</span> имеет переменную для цвета со значением  <span style=\"color: blue;\">black</span>, но фон элемента <span style=\"color: blue;\">nav</span> будет иметь цвет <span style=\"color: blue;\">blue</span>, так как переменная <span style=\"color: blue;\">@color</span> находится в локальном контексте.\r\n</p>','2016-04-24 11:09:20'),(6,14,'Стандартные потоки вывода (stdout) Windows','https://www.itroad.ru/standartnye-potoki-vyvoda-stdout-windows-ili-kak-perenapravit-vyvod-konsoli-cmd-v-fajl','','','С помощью переназначения устройств ввода/вывода одна программа может направить свой вывод на вход другой или перехватить вывод другой программы, используя его в качестве своих входных данных. Таким образом, имеется возможность передавать информацию от процесса к процессу при минимальных программных издержках.','<p>\r\nС помощью переназначения устройств ввода/вывода одна программа может направить свой вывод на вход другой или перехватить вывод другой программы, используя его в качестве своих входных данных. Таким образом, имеется возможность передавать информацию от процесса к процессу при минимальных программных издержках.\r\n</p>\r\n<p>\r\nЕсть 3 файловых дескриптора: <code>stdin</code> — стандартный ввод, <code>stdout</code> — стандартный вывод и <code>stderr</code> — стандартный поток ошибок.  В скриптах 1 означает <code>stdout</code>, а 2 — <code>stderr</code>.\r\n</p>\r\n<p>\r\nПрактически это означает, что для программ, которые используют стандартные входные и выходные устройства, операционная система позволяет:\r\n</p>\r\n<ul>\r\n  <li>перенаправлять <code>stdout</code> в файл\r\n  <li>перенаправлять <code>stderr</code> в файл\r\n  <li>перенаправлять <code>stdout</code> в <code>stderr</code>\r\n  <li>перенаправлять <code>stderr</code> в <code>stdout</code>\r\n  <li>перенаправлять <code>stderr</code> и <code>stdout</code> в файл\r\n  <li>перенаправлять <code>stderr</code> и <code>stdout</code> в <code>stdout</code>\r\n  <li>перенаправлять <code>stderr</code> и <code>stdout</code> в <code>stderr</code>\r\n  <li>перенаправление <code>stderr</code> и <code>stdout</code> по конвейеру\r\n</ul>\r\n<p>\r\nВсе вышесказанное является привычной обыденностью для любого пользователя любой nix системы, но в среде Windows, данные возможности применяются крайне редко, хотя на самом деле они там есть и всё практически идентично.\r\n</p>\r\n</p>\r\nА теперь примеры:\r\n</p>\r\n<p>\r\n1. Перенаправление стандартного потока программы в файл с заменой содержимого файла\r\n</p>\r\n[code]ping ya.ru -t > log.txt[/code]\r\n[code]ping ya.ru -t 1> log.txt[/code]\r\n<p>\r\nпри этом на экран ничего кроме ошибок не выводится, а все записывается в лог. Если остановить пинг, и запустить заново, предыдущий лог полностью затирается новым.\r\n</p>\r\n<p>\r\n2. Перенаправление стандартного потока программы в файл с до записью содержимого лога\r\n</p>\r\n[code]ping ya.ru -t >> log.txt[/code]\r\n<p>\r\nТоже самое, но при прерывание пинга и начале нового, старое содержимое лога не затрется, а новое дописывается в конец\r\n</p>\r\n[code]ping ya.ru -t 1>> log.txt[/code]\r\n<p>\r\n3. Перенаправление потока ошибок программы в фаил с заменой содержимого\r\n</p>\r\n[code]ping ya.ru -t 2> log.txt[/code]\r\n<p>\r\nпри этом, стандартный поток программы пойдет на экран, а ошибки будут записаны в лог, с заменой содержимого.\r\n</p>\r\n<p>\r\n4. То же самое, но с до записью содержимого лога.\r\n</p>\r\n[code]ping ya.ru -t 2>> log.txt[/code]\r\n<p>\r\n5. Следующая конструкция позволяет перенаправить информацию между потоками (между стандартным потоком и потоком ошибок, или наоборот).\r\n</p>\r\n[code]ping ya.ru > log.txt 2>&1[/code]\r\n<p>\r\nили с до записью лога\r\n</p>\r\n[code]ping ya.ru >> log.txt 2>&1[/code]\r\n<p>\r\nВ данном примере стандартный поток ошибок пересылается в стандартный поток (конструкция <code>2&gt;&amp;1</code>) а потом стандартный поток (уже с завернутым в него потоком ошибок) посылается в лог.\r\n</p>\r\n<p>\r\n6. В этом примере все наоборот, стандартный поток, пересылается в поток ошибок и уже поток ошибок перенаправляется в лог:\r\n</p>\r\n[code]ping ya.ru > log.txt 1>&2[/code]\r\n<p>\r\nили с до записью лога\r\n</p>\r\n[code]ping ya.ru >> log.txt 1>&2[/code]\r\n<p>\r\n7. По аналогии с Linux системами в Windows можно перенаправить весь или часть вывода программы в виртуальное устройство, а проще говоря слить в мусор.\r\n</p>\r\n<p>\r\nТаким устройством является nul, и делать перенаправление в него можно используя все выше представленные комбинации. Например\r\n</p>\r\n[code]ping ya.ru > nul[/code]\r\n<p>\r\nВ Linux есть еще одна конструкция перенаправления, а именно <code>&amp;&gt;/var/log/log.txt</code>, она перенаправляет ВСЕ без исключения потоки программы в указанное место, по сути являясь более коротким и более грамотным аналогом конструкции <code>&gt;log.txt 1&gt;&amp;2</code>. Но к сожалению <strong>в Windows это не работает</strong>.\r\n</p>\r\n<p>\r\nА теперь давайте немного разберемся в прикладных различиях между работой данных методов. В нормальных приложениях все разбито на потоки, но у большинства виндовых утилит это не так, пинг например, пишет все в стандартный поток (на экран), поэтому для него конструкция вида <code>2&gt;</code> не имеет смысла. Но есть еще не виндовые утилиты, для примера возьмем <code>curl</code> (мой любимый).\r\n</p>\r\n<p>\r\nОн разделяет 3 вида вывода, вывод полезной информации, вывод служебной информации и вывод ошибок. Если перенаправить вывод так: <code>&gt;</code> или <code>&gt;&gt;</code> или <code>1&gt;</code> или <code>1&gt;&gt;</code> то по завершению запроса отобразится служебная информация о запросе, а вся полезная информация уйдет в лог (это именно то, что уходит по конвейеру <code>|</code>).\r\n</p>\r\n<p>\r\n<img src=\"/files/article/6/1.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nА теперь сделаем заведомо ошибочный запрос, изменив протокол <code>http</code> на <code>http3</code> не меняя вывода в лог. В итоге мы получим ошибку на экране.\r\n</p>\r\n<p>\r\n<img src=\"/files/article/6/2.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nИзменим вывод в лог на один из этих: <code>2&gt;</code> или <code>2&gt;&gt;</code> ошибка ранее выводившаяся на экран, попала в лог, и на экране ничего не будет (служебной информации нет, так как запрос произведен не был).\r\n</p>\r\n<p>\r\nВернемся к первому скриншоту на котором мы видим вывод служебной информации, по сути, не будь у курла ключа <code>-s</code> который подавляет вывод служебной информации, нам пришлось бы пользоваться конструкциями из пятого и шестого примеров.\r\n</p>\r\n<p>\r\nИ вывод был бы таким:\r\n</p>\r\n<p>\r\n<img src=\"/files/article/6/3.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nТо есть, полная тишина, вся информация, как то полезный вывод, ошибки программы, служебная информация, все ушло в лог.\r\n</p>\r\n<p>\r\nНа данном скриншоте, конструкцией <code>2&gt;&amp;1</code> мы завернули поток ошибок в стандартный поток, а конструкцией <code>&gt; 5555.txt</code> стандартный поток перенаправили в лог. Если вместо <code>&gt; 5555.txt</code> использовать <code>2&gt; 5555.txt</code>, то есть перенаправить в лог стандартный поток ошибок, мы увидим весь вывод программы (и ошибки, и служебную информацию и полезный вывод) на экране. Конструкция <code>2&gt;&amp;1</code> имеет больший приоритет, а по ней уже все завернуто в стандартный поток.\r\n</p>\r\n<p>\r\nДелать пример с заворотом стандартного потока в поток ошибок (<code>1&gt;&amp;2</code>) я не буду, ибо там все точно так же.\r\n</p>\r\n<p>\r\nНадеюсь логика понятна…\r\n</p>\r\nТак же с помощью символа <code>&lt;</code> можно прочитать входные данные для заданной команды не с клавиатуры, а из определенного (заранее подготовленного) файла. Для примера возьмем реальный и вполне полезный случай. Например, у нас есть файл log.txt и нам надо посчитать сколько в нем строк. Сделать это можно с помощью такой конструкции\r\n</p>\r\n[code]find /c /v \"\" log.txt[/code]\r\n<p>\r\nно вывод будет не совсем приемлемым.\r\n</p>\r\n<p>\r\n<p>\r\n<img src=\"/files/article/6/4.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nА вот если сделать так:\r\n</p>\r\n[code]find /c /v \"\" < log.txt[/code]\r\n<p>\r\nто все будет именно так как надо.\r\n</p>\r\n<p>\r\n<img src=\"/files/article/6/5.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nЭто происходит потому что в первом случае, файл обрабатывается как файл, а во втором, как поток (аналог линуксового конвейера <code>cat log.txt |</code>) в общем, <code>&lt;</code> это виндовый аналог <code>cat</code> со всеми вытекающими.\r\n</p>','2018-02-07 09:22:45'),(7,1,'Введение в Git','','','','Git имеет три основных состояния, в которых могут находиться ваши файлы: зафиксированном (committed), изменённом (modified) и подготовленном (staged). «Зафиксированный» значит, что файл уже сохранён в вашей локальной базе. К изменённым относятся файлы, которые поменялись, но ещё не были зафиксированы.','<h2>Три состояния</h2>\r\n<p>\r\nGit имеет три основных состояния, в которых могут находиться ваши файлы: зафиксированном (committed), изменённом (modified) и подготовленном (staged). «Зафиксированный» значит, что файл уже сохранён в вашей локальной базе. К изменённым относятся файлы, которые поменялись, но ещё не были зафиксированы. Подготовленные файлы — это изменённые файлы, отмеченные для включения в следующий коммит.\r\n</p>\r\n<p>\r\nМы подошли к трём основным секциям проекта Git: Git-директория (Git directory), рабочая директория (working directory) и область подготовленных файлов (staging area).\r\n</p>\r\n<p>\r\nGit-директория — это то место, где Git хранит метаданные и базу объектов вашего проекта. Это самая важная часть Git, и это та часть, которая копируется при клонировании репозитория с другого компьютера.\r\n</p>\r\n<p>\r\nРабочая директория является снимком версии проекта. Файлы распаковываются из сжатой базы данных в Git-директории и располагаются на диске, для того чтобы их можно было изменять и использовать.\r\n</p>\r\n<p>\r\nОбласть подготовленных файлов — это файл, располагающийся в вашей Git-директории, в нём содержится информация о том, какие изменения попадут в следующий коммит. Эту область ещё называют «индекс».\r\n</p>\r\n<p>\r\nБазовый подход в работе с Git выглядит так:\r\n</p>\r\n<ul>\r\n  <li>Вы изменяете файлы в вашей рабочей директории.</li>\r\n  <li>Вы добавляете файлы в индекс, добавляя тем самым их снимки в область подготовленных файлов.</li>\r\n  <li>Когда вы делаете коммит, используются файлы из индекса как есть, и этот снимок сохраняется в вашу Git директорию.</li>\r\n</ul>\r\n<p>\r\nЕсли определённая версия файла есть в Git-директории, эта версия закоммичена. Если файл изменён и добавлен в индекс, значит, он будет добавлен в следующий коммит. И если файл был изменён с момента последнего распаковывания из репозитория, но не был добавлен в индекс, он считается изменённым.\r\n</p>\r\n\r\n<h2>Первоначальная настройка Git</h2>\r\n<p>\r\nТеперь, когда Git установлен в вашей системе, самое время настроить среду для работы с Git’ом под себя. Это нужно сделать только один раз — при обновлении версии Git’а настройки сохранятся. Но, при необходимости, вы можете поменять их в любой момент, выполнив те же команды снова.\r\n</p>\r\n<p>\r\nВ состав Git’а входит утилита <code>git config</code>, которая позволяет просматривать и настраивать параметры, контролирующие все аспекты работы Git’а, а также его внешний вид. Эти параметры могут быть сохранены в трёх местах:\r\n</p>\r\n<ul>\r\n  <li>Файл <code>/etc/gitconfig</code> содержит значения, общие для всех пользователей системы и для всех их репозиториев. Если при запуске <code>git config</code> указать параметр <code>--system</code>, то параметры будут читаться и сохраняться именно в этот файл.</li>\r\n  <li>Файл <code>~/.gitconfig</code> или <code>~/.config/git/config</code> хранит настройки конкретного пользователя. Этот файл используется при указании параметра <code>--global</code>.</li>\r\n  <li>Файл config в каталоге Git’а (т.е. <code>.git/config</code>) в том репозитории, который вы используете в данный момент, хранит настройки конкретного репозитория.</li>\r\n</ul>\r\n<p>\r\nНастройки на каждом следующем уровне подменяют настройки из предыдущих уровней, то есть значения в <code>.git/config</code> перекрывают соответствующие значения в <code>/etc/gitconfig</code>.\r\n</p>\r\n<p>\r\nВ системах семейства Windows Git ищет файл <code>.gitconfig</code> в каталоге <code>$HOME</code> (<code>C:\\Users\\$USER</code> для большинства пользователей).\r\n</p>\r\n\r\n<h3>Имя пользователя</h3>\r\n<p>\r\nПервое, что вам следует сделать после установки Git’а, — указать ваше имя и адрес электронной почты. Это важно, потому что каждый коммит в Git’е содержит эту информацию, и она включена в коммиты, передаваемые вами, и не может быть далее изменена:\r\n</p>\r\n[cli]\r\n$ git config --global user.name \"John Doe\"\r\n$ git config --global user.email johndoe@example.com\r\n[/cli]\r\n<p>\r\nОпять же, если указана опция <code>--global</code>, то эти настройки достаточно сделать только один раз, поскольку в этом случае Git будет использовать эти данные для всего, что вы делаете в этой системе. Если для каких-то отдельных проектов вы хотите указать другое имя или электронную почту, можно выполнить эту же команду без параметра <code>--global</code> в каталоге с нужным проектом.\r\n</p>\r\n\r\n<h3>Проверка настроек</h3>\r\n<p>\r\nЕсли вы хотите проверить используемую конфигурацию, можете использовать команду <code>git config --list</code>, чтобы показать все настройки, которые Git найдёт:\r\n</p>\r\n[cli]\r\n$ git config --list\r\nuser.name=John Doe\r\nuser.email=johndoe@example.com\r\ncolor.status=auto\r\ncolor.branch=auto\r\ncolor.interactive=auto\r\ncolor.diff=auto\r\n...\r\n[/cli]\r\n<p>\r\nНекоторые ключи (названия) настроек могут появиться несколько раз, потому что Git читает один и тот же ключ из разных файлов (например, из <code>/etc/gitconfig</code> и <code>~/.gitconfig</code>). В этом случае Git использует последнее значение для каждого ключа.\r\n</p>\r\n<p>\r\nТакже вы можете проверить значение конкретного ключа, выполнив <code>git config &lt;key&gt;</code>:\r\n</p>\r\n[cli]\r\n$ git config user.name\r\nJohn Doe\r\n[/cli]\r\n\r\n<h3>Как получить помощь?</h3>\r\n<p>\r\nЕсли вам нужна помощь при использовании Git, есть три способа открыть страницу руководства по любой команде Git:\r\n</p>\r\n[cli]\r\n$ git help <глагол>\r\n$ git <глагол> --help\r\n$ man git-<глагол>\r\n[/cli]\r\n<p>\r\nНапример, так можно открыть руководство по команде <code>config</code>\r\n</p>\r\n[cli]\r\n$ git help config\r\n[/cli]\r\n\r\n<h2>Создание Git-репозитория</h2>\r\n<p>\r\nДля создания Git-репозитория вы можете использовать два основных подхода. Во-первых, cоздание репозитория в существующей директории. Во-вторых, клонирование существующего репозитория с другого сервера.\r\n</p>\r\n\r\n<h3>Создание репозитория в существующей директории</h3>\r\n<p>\r\nЕсли вы собираетесь начать использовать Git для существующего проекта, то вам необходимо перейти в директорию проекта и в командной строке ввести\r\n</p>\r\n[cli]\r\n$ git init\r\n[/cli]\r\n<p>\r\nЭта команда создаёт в текущей директории новую поддиректорию с именем .git, содержащую все необходимые файлы репозитория — основу Git-репозитория. На этом этапе ваш проект ещё не находится под версионным контролем.\r\n</p>\r\n<p>\r\nЕсли вы хотите добавить под версионный контроль существующие файлы (в отличие от пустого каталога), вам стоит добавить их в индекс и осуществить первый коммит изменений. Добиться этого вы сможете запустив команду <code>git add</code>, а затем выполнив <code>git commit</code>:\r\n</p>\r\n[cli]\r\n$ git add --all\r\n$ git commit -m \'initial project version\'\r\n[/cli]\r\n\r\n<h3>Клонирование существующего репозитория</h3>\r\n<p>\r\nДля получения копии существующего Git-репозитория, например, проекта, в который вы хотите внести свой вклад, необходимо использовать команду <code>git clone</code>.\r\n<p>\r\n[cli]\r\n$ git clone https://github.com/libgit2/libgit2\r\n[/cli]\r\n<p>\r\nЭта команда создаёт директорию <code>libgit2</code>, инициализирует в ней поддиректорию <code>.git</code>, скачивает все данные для этого репозитория и создаёт рабочую копию последней версии.\r\n</p>\r\n<p>\r\nДля того, чтобы клонировать репозиторий в директорию с именем, отличающимся от <code>libgit2</code>, необходимо указать желаемое имя, как параметр командной строки:\r\n</p>\r\n[cli]\r\n$ git clone https://github.com/libgit2/libgit2 mylibgit\r\n[/cli]\r\n<p>\r\nЭта команда делает всё то же самое, что и предыдущая, только результирующий каталог будет назван <code>mylibgit</code>.\r\n</p>\r\n\r\n<h2>Запись изменений в репозиторий</h2>\r\n<p>\r\nКаждый файл в вашем рабочем каталоге может находиться в одном из двух состояний: под версионным контролем (отслеживаемые) и нет (неотслеживаемые).\r\n</p>\r\n<p>\r\nОтслеживаемые файлы — это те файлы, которые были в последнем слепке состояния проекта; они могут быть неизменёнными, изменёнными или подготовленными к коммиту (staged).\r\n</p>\r\n<p>\r\nНеотслеживаемые файлы — это всё остальное, любые файлы в вашем рабочем каталоге, которые не входили в ваш последний слепок состояния и не подготовлены к коммиту.\r\n</p>\r\n<p>\r\nКак только вы отредактируете файлы, Git будет рассматривать их как изменённые, т.к. вы изменили их с момента последнего коммита. Вы индексируете (stage) эти изменения и затем фиксируете все индексированные изменения (commit).\r\n</p>\r\n\r\n<h3>Определение состояния файлов</h3>\r\n<p>\r\nОсновной инструмент, используемый для определения, какие файлы в каком состоянии находятся — это команда <code>git status</code>. Если вы выполните эту команду сразу после клонирования, вы увидите что-то вроде этого:\r\n</p>\r\n[cli]\r\n$ git status\r\nOn branch master\r\nnothing to commit, working directory clean\r\n[/cli]\r\n<p>\r\nЭто означает, что у вас чистый рабочий каталог, другими словами – в нем нет отслеживаемых измененных файлов. Git также не обнаружил неотслеживаемых файлов, в противном случае они бы были перечислены здесь. Наконец, команда сообщает вам на какой ветке вы находитесь и сообщает вам, что она не расходится с веткой на сервере.\r\n</p>\r\n<p>\r\nПредположим, вы добавили в свой проект новый файл, простой файл <code>README</code>. Eсли этого файла раньше не было, и вы выполните <code>git status</code>, вы увидите свой неотслеживаемый файл вот так:\r\n</p>\r\n[cli]\r\n$ echo \'My Project\' > README\r\n$ git status\r\nOn branch master\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n\r\n    README\r\n\r\nnothing added to commit but untracked files present (use \"git add\" to track)\r\n[/cli]\r\n<p>\r\nПонять, что новый файл README неотслеживаемый можно по тому, что он находится в секции «Untracked files» в выводе команды <code>status</code>. Статус «Untracked files», по сути, означает, что Git видит файл, отсутствующий в предыдущем снимке состояния (commit); Git не станет добавлять его в ваши коммиты, пока вы его явно об этом не попросите.\r\n</p>\r\n\r\n<h3>Отслеживание новых файлов</h3>\r\n<p>\r\nДля того чтобы начать отслеживать (добавить под версионный контроль) новый файл, используется команда <code>git add</code>. Чтобы начать отслеживание файла <code>README</code>, вы можете выполнить следующее:\r\n</p>\r\n[cli]\r\n$ git add README\r\n[/cli]\r\n<p>\r\nЕсли вы снова выполните команду <code>status</code>, то увидите, что файл README теперь отслеживаемый и индексированный:\r\n</p>\r\n[cli]\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    new file:   README\r\n[/cli]\r\n<p>\r\nВы можете видеть, что файл проиндексирован по тому, что он находится в секции «Changes to be committed». Если вы выполните коммит в этот момент, то версия файла, существовавшая на момент выполнения вами команды <code>git add</code>, будет добавлена в историю снимков состояния.\r\n</p>\r\n<p>\r\nКоманда <code>git add</code> принимает параметром путь к файлу или каталогу; если это каталог, команда рекурсивно добавляет (индексирует) все файлы в данном каталоге.\r\n</p>\r\n\r\n<h3>Индексация изменённых файлов</h3>\r\n<p>\r\nДавайте модифицируем файл, уже находящийся под версионным контролем. Если вы измените отслеживаемый файл <code>CONTRIBUTING.md</code> и после этого снова выполните команду <code>git status</code>, то результат будет примерно следующим:\r\n</p>\r\n[cli]\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    new file:   README\r\n\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n<p>\r\nФайл <code>CONTRIBUTING.md</code> находится в секции «Changes not staged for commit» — это означает, что отслеживаемый файл был изменён в рабочем каталоге, но пока не проиндексирован. Выполним <code>git add</code>, чтобы проиндексировать <code>CONTRIBUTING.md</code>, а затем снова выполним <code>git status</code>:\r\n</p>\r\n[cli]\r\n$ git add CONTRIBUTING.md\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    new file:   README\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n<p>\r\nТеперь оба файла проиндексированы и войдут в следующий коммит. В этот момент вы, предположим, вспомнили одно небольшое изменение, которое вы хотите сделать в <code>CONTRIBUTING.md</code> до коммита. Вы открываете файл, вносите и сохраняете необходимые изменения и вроде бы готовы к коммиту. Но давайте-ка ещё раз выполним <code>git status</code>:\r\n</p>\r\n[cli]\r\n$ vim CONTRIBUTING.md\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    new file:   README\r\n    modified:   CONTRIBUTING.md\r\n\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n<p>\r\nЧто за чёрт? Теперь <code>CONTRIBUTING.md</code> отображается как проиндексированный и непроиндексированный одновременно. Как такое возможно? Такая ситуация наглядно демонстрирует, что Git индексирует файл в точности в том состоянии, в котором он находился, когда вы выполнили команду <code>git add</code>.\r\n</p>\r\n<p>\r\nЕсли вы выполните коммит сейчас, то файл <code>CONTRIBUTING.md</code> попадёт в коммит в том состоянии, в котором он находился, когда вы последний раз выполняли команду <code>git add</code>, а не в том, в котором он находится в вашем рабочем каталоге в момент выполнения <code>git commit</code>. Если вы изменили файл после выполнения <code>git add</code>, вам придётся снова выполнить <code>git add</code>, чтобы проиндексировать последнюю версию файла:\r\n</p>\r\n[cli]\r\n$ git add CONTRIBUTING.md\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    new file:   README\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n\r\n<h3>Сокращенный вывод статуса</h3>\r\n<p>\r\nВывод команды <code>git status</code> довольно всеобъемлющий и многолословный. Git также имеет флаг вывода сокращенного статуса, так что вы можете увидеть изменения в более компактном виде. Если вы выполните <code>git status -s</code> или <code>git status --short</code> вы получите гораздо более упрощенный вывод.\r\n</p>\r\n[cli]\r\n$ git status -s\r\n_M README\r\nMM Rakefile\r\nA_ lib/git.rb\r\nM_ lib/simplegit.rb\r\n?? LICENSE.txt\r\n[/cli]\r\n<p>\r\nНовые, неотслеживаемые файлы помечены <code>??</code> слева от них, файлы добавленные в отслеживаемые помечены <code>A</code>, отредактированные файлы помечены <code>M</code> и так далее. В выводе содержится два столбца (с именем файла — три). В первом указывается статус файла, а во втором модифицирован ли он после этого.\r\n</p>\r\n<ul>\r\n  <li><code><span style=\"background: #eeeeee;\">&nbsp;</span>M README</code> – файл модифицирован, но не проиндексирован</li>\r\n  <li><code>MM Rakefile</code> – файл модифицирован, проиндексирован и еще раз модифицирован</li>\r\n  <li><code>A<span style=\"background: #eeeeee;\">&nbsp;</span> lib/git.rb</code> – новый файл в проекте</li>\r\n  <li><code>M<span style=\"background: #eeeeee;\">&nbsp;</span> lib/simplegit.rb</code> – модифицирован, проиндексирован</li>\r\n  <li><code>?? LICENSE.txt</code> – новый неотслеживаемый файл</li>\r\n</ul>\r\n\r\n<h3>Игнорирование файлов</h3>\r\n<p>\r\nЗачастую, у вас имеется группа файлов, которые вы не только не хотите автоматически добавлять в репозиторий, но и видеть в списках неотслеживаемых. К таким файлам обычно относятся автоматически генерируемые файлы (различные логи, результаты сборки программ и т.п.). В таком случае, вы можете создать файл <code>.gitignore</code>. с перечислением шаблонов соответствующих таким файлам. Вот пример файла <code>.gitignore</code>:\r\n</p>\r\n[cli]\r\n$ cat .gitignore\r\n*.[oa]\r\n*~\r\n[/cli]\r\n<p>\r\nПервая строка предписывает Git игнорировать любые файлы заканчивающиеся на «.o» или «.a» — объектные и архивные файлы, которые могут появиться во время сборки кода. Вторая строка предписывает игнорировать все файлы заканчивающиеся на тильду (~), которая используется во многих текстовых редакторах, например Emacs, для обозначения временных файлов.\r\n</p>\r\n<p>\r\nК шаблонам в файле <code>.gitignore</code> применяются следующие правила:\r\n</p>\r\n<ul>\r\n   <li>Пустые строки, а также строки, начинающиеся с #, игнорируются.</li>\r\n   <li>Можно использовать стандартные glob шаблоны.</li>\r\n   <li>Можно начать шаблон символом слэша (/) чтобы избежать рекурсии.</li>\r\n   <li>Можно заканчивать шаблон символом слэша (/) для указания каталога.</li>\r\n   <li>Можно инвертировать шаблон, использовав восклицательный знак (!) в качестве первого символа.</li>\r\n</ul>\r\n<p>\r\nGlob-шаблоны представляют собой упрощённые регулярные выражения, используемые командными интерпретаторами. Символ (*) соответствует 0 или более символам; последовательность [abc] — любому символу из указанных в скобках (в данном примере a, b или c); знак вопроса (?) соответствует одному символу; и квадратные скобки, в которые заключены символы, разделённые дефисом ([0-9]), соответствуют любому символу из интервала (в данном случае от 0 до 9). Вы также можете использовать две звёздочки, чтобы указать на вложенные директории: a/**/z соответствует a/z, a/b/z, a/b/c/z, и так далее.\r\n</p>\r\n<p>\r\nВот ещё один пример файла .gitignore:\r\n</p>\r\n[cli]\r\n# игнорировать файлы, которые заканчиваются на «.a»\r\n*.a\r\n# но не игнорировать файл lib.a\r\n!lib.a\r\n# игнорировать файл TODO в корневой категории, но не игнорировать subdir/TODO\r\n/TODO\r\n# игнорировать все файлы в директории build/\r\nbuild/\r\n# игнорировать doc/notes.txt, но не игнорировать doc/server/arch.txt\r\ndoc/*.txt\r\n# игнорировать все файлы .txt в директории doc/ и глубже\r\ndoc/**/*.txt\r\n[/cli]\r\n\r\n<h3>Коммит изменений</h3>\r\n<p>\r\nТеперь, когда ваш индекс находится в таком состоянии, как вам и хотелось, вы можете зафиксировать свои изменения. Запомните, всё, что до сих пор не проиндексировано — любые файлы, созданные или изменённые вами, и для которых вы не выполнили <code>git add</code> после момента редактирования — не войдут в этот коммит. Простейший способ зафиксировать изменения — это набрать <code>git commit</code>:\r\n</p>\r\n[cli]\r\n$ git commit\r\n[/cli]\r\n<p>\r\nЭта команда откроет выбранный вами текстовый редактор (устанавливается системной переменной <code>$EDITOR</code> — обычно это vim или emacs, хотя вы можете установить ваш любимый с помощью команды <code>git config --global core.editor</code>).\r\n</p>\r\n<p>\r\nВ редакторе будет отображён следующий текст (это пример окна Vim’а):\r\n</p>\r\n[code]\r\n# Please enter the commit message for your changes. Lines starting\r\n# with \'#\' will be ignored, and an empty message aborts the commit.\r\n# On branch master\r\n# Changes to be committed:\r\n#   new file:   README\r\n#   modified:   CONTRIBUTING.md\r\n#\r\n~\r\n~\r\n~\r\n\".git/COMMIT_EDITMSG\" 9L, 283C\r\n[/code]\r\n<p>\r\nВы можете видеть, что комментарий по умолчанию для коммита содержит закомментированный результат работы команды <code>git status</code> и ещё одну пустую строку сверху. Вы можете удалить эти комментарии и набрать своё сообщение или же оставить их для напоминания о том, что вы фиксируете.\r\n</p>\r\n<p>\r\nЕсть и другой способ — вы можете набрать свой комментарий к коммиту в командной строке вместе с командой <code>commit</code> указав его после параметра -m, как в следующем примере:\r\n</p>\r\n[cli]\r\n$ git commit -m \"Story 182: Fix benchmarks for speed\"\r\n[master 463dc4f] Story 182: Fix benchmarks for speed\r\n 2 files changed, 2 insertions(+)\r\n create mode 100644 README\r\n[/cli]\r\n<p>\r\nКоммит вывел вам немного информации о себе: на какую ветку вы выполнили коммит (master), какая контрольная сумма SHA-1 у этого коммита (463dc4f), сколько файлов было изменено, а также статистику по добавленным/удалённым строкам в этом коммите.\r\n</p>\r\n\r\n<h3>Индексация в момент коммита</h3>\r\n<p>\r\nЕсли у вас есть желание пропустить этап индексирования, Git предоставляет простой способ. Добавление параметра -a в команду <code>git commit</code> заставляет Git автоматически индексировать каждый уже отслеживаемый на момент коммита файл, позволяя вам обойтись без <code>git add</code>:\r\n</p>\r\n[cli]\r\n$ git status\r\nOn branch master\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n    modified:   CONTRIBUTING.md\r\n\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\r\n[/cli]\r\n[cli]\r\n$ git commit -a -m \'added new benchmarks\'\r\n[master 83e38c7] added new benchmarks\r\n 1 file changed, 5 insertions(+), 0 deletions(-)\r\n[/cli]\r\n<p>\r\nОбратите внимание на то, что в данном случае перед коммитом вам не нужно выполнять <code>git add</code> для файла <code>CONTRIBUTING.md</code>.\r\n</p>\r\n\r\n<h3>Удаление файлов</h3>\r\n<p>\r\nДля того чтобы удалить файл из Git, вам необходимо удалить его из отслеживаемых файлов (точнее, удалить его из вашего индекса) а затем выполнить коммит. Это позволяет сделать команда <code>git rm</code>, которая также удаляет файл из вашего рабочего каталога, так что вы в следующий раз не увидите его как «неотслеживаемый».\r\n</p>\r\n<p>\r\nЕсли вы просто удалите файл из своего рабочего каталога, он будет показан в секции «Changes not staged for commit» (измененные, но не проиндексированные) вывода команды <code>git status</code>:\r\n</p>\r\n[cli]\r\n$ rm PROJECTS.md\r\n$ git status\r\nOn branch master\r\nYour branch is up-to-date with \'origin/master\'.\r\nChanges not staged for commit:\r\n  (use \"git add/rm <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n        deleted:    PROJECTS.md\r\n\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\r\n[/cli]\r\n<p>\r\nЗатем, если вы выполните команду git rm, удаление файла попадёт в индекс:\r\n</p>\r\n[cli]\r\n$ git rm PROJECTS.md\r\nrm \'PROJECTS.md\'\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    deleted:    PROJECTS.md\r\n[/cli]\r\n<p>\r\nПосле следующего коммита файл исчезнет и больше не будет отслеживаться.\r\n</p>\r\n<p>\r\nДругая полезная штука, которую вы можете захотеть сделать — это удалить файл из индекса, оставив его при этом в рабочем каталоге. Другими словами, вы можете захотеть оставить файл на жёстком диске, и убрать его из-под бдительного ока Git. Это особенно полезно, если вы забыли добавить что-то в файл <code>.gitignore</code> и по ошибке проиндексировали, например, большой файл с логами. Чтобы сделать это, используйте опцию <code>--staged</code> (или <code>--cached</code>):\r\n</p>\r\n[cli]\r\n$ git rm --staged README\r\n[/cli]\r\n<p>\r\nВ команду git rm можно передавать файлы, каталоги или glob-шаблоны. Это означает, что вы можете вытворять что-то вроде:\r\n</p>\r\n[cli]\r\n$ git rm log/\\*.log\r\n[/cli]\r\n<p>\r\nОбратите внимание на обратный слэш (\\) перед *. Он необходим из-за того, что Git использует свой собственный обработчик имён файлов вдобавок к обработчику вашего командного интерпретатора. Эта команда удаляет все файлы имеющие расширение .log находящиеся в директории log/. Или же вы можете сделать вот так:\r\n</p>\r\n[cli]\r\n$ git rm \\*~\r\n[/cli]\r\n<p>\r\nЭта команда удаляет все файлы, чьи имена заканчиваются на <code>~</code>.\r\n</p>\r\n\r\n<h3>Переименование файлов</h3>\r\n<p>\r\nЕсли вам хочется переименовать файл в Git, вы можете сделать что-то вроде:\r\n</p>\r\n[cli]\r\n$ git mv README.md README\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    renamed:    README.md -> README\r\n[/cli]\r\n<p>\r\nЭто эквивалентно выполнению следующих команд:\r\n</p>\r\n[cli]\r\n$ mv README.md README\r\n$ git rm README.md\r\n$ git add README\r\n[/cli]\r\n\r\n<h2>Операции отмены</h2>\r\n<p>\r\nОтмена может потребоваться, если вы сделали коммит слишком рано, например, забыв добавить какие-то файлы или комментарий к коммиту. Если вы хотите переделать коммит, можно запустить <code>commit</code> с параметром <code>--amend</code> (дополнить):\r\n</p>\r\n[cli]\r\n$ git commit --amend\r\n[/cli]\r\n<p>\r\nЭта команда использует для дополнения коммита ваш индекс (staged). Если вы ничего не меняли с момента последнего коммита (например, команда запущена сразу после предыдущего коммита), то снимок состояния останется в точности таким же, а изменится лишь комментарий к коммиту.\r\n</p>\r\n<p>\r\nЗапустится тот же редактор комментария к коммиту, но уже с комментарием к предыдущему коммиту. Комментарий можно отредактировать точно так же, как обычно, просто он заменит собой предыдущий.\r\n</p>\r\n<p>\r\nНапример, если вы фиксируете изменения, и понимаете, что забыли проиндексировать изменения в файле, который хотели включить в коммит, можно сделать примерно так:\r\n</p>\r\n[cli]\r\n$ git commit -m \'initial commit\'\r\n$ git add forgotten_file\r\n$ git commit --amend\r\n[/cli]\r\n<p>\r\nВ итоге получится единый коммит — второй коммит заменит результаты первого.\r\n</p>\r\n\r\n<h3>Удаление файла из индекса</h3>\r\n<p>\r\nCкажем, вы изменили два файла, и хотите закоммитить их двумя раздельными изменениями, но случайно набрали <code>git add .</code>, и добавили оба в индекс (staging area). Как отменить добавление одного из них? Команда <code>git status</code> напомнит вам:\r\n</p>\r\n[cli]\r\n$ git add .\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    renamed:    README.md -> README\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n<p>\r\nПрямо под текстом «Changes to be committed» говорится: <code>git reset HEAD <file>...</code> для отмены добавления в индекс. Давайте последуем этому совету, и отменим индексирование файла <code>CONTRIBUTING.md</code>:\r\n</p>\r\n[cli]\r\n$ git reset HEAD CONTRIBUTING.md\r\nUnstaged changes after reset:\r\nM    CONTRIBUTING.md\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    renamed:    README.md -> README\r\n\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n<p>\r\nФайл <code>CONTRIBUTING.md</code> изменен, но снова не добавлен в индекс.\r\n</p>\r\n\r\n<h3>Отмена изменения измененного файла</h3>\r\n<p>\r\nЧто делать, если вы поняли, что не хотите сохранять свои изменения файла <code>CONTRIBUTING.md</code>? Как можно просто «разызменить» его — вернуть к тому виду, который был в последнем коммите? Нам повезло, что <code>git status</code> рассказывает и это тоже. В последнем примере вывод <code>git status</code> был таким:\r\n</p>\r\n[cli]\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n<p>\r\nЗдесь довольно ясно указано, как отбросить сделанные изменения. Давайте так и сделаем:\r\n</p>\r\n[cli]\r\n$ git checkout -- CONTRIBUTING.md\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    renamed:    README.md -> README\r\n[/cli]\r\n<p>\r\nКак видите, откат изменений выполнен.\r\n</p>\r\n<h2>Работа с удалёнными репозиториями</h2>\r\n<p>\r\nУдалённые репозитории представляют собой версии проекта, сохранённые в интернете или ещё где-то в сети. У вас может быть несколько удалённых репозиториев, каждый из которых может быть доступен для чтения или для чтения-записи. \r\n</p>\r\n<h3>Просмотр удалённых репозиториев</h3>\r\n<p>\r\nДля того, чтобы просмотреть список настроенных удалённых репозиториев, вы можете запустить команду <code>git remote</code>. Она выведет названия доступных удалённых репозиториев. Если вы клонировали репозиторий, то увидите как минимум «origin» — имя по умолчанию для исходного репозиториясразу после клонирования:\r\n</p>\r\n[cli]\r\n$ git clone https://github.com/schacon/ticgit\r\nCloning into \'ticgit\'...\r\n.....\r\n$ cd ticgit\r\n$ git remote\r\norigin\r\n[/cli]\r\n<p>\r\nВы можете также указать ключ <code>-v</code>, чтобы просмотреть адреса для чтения и записи, привязанные к репозиторию:\r\n</p>\r\n[cli]\r\n$ git remote -v\r\norigin	https://github.com/schacon/ticgit (fetch)\r\norigin	https://github.com/schacon/ticgit (push)\r\n[/cli]\r\n<p>\r\nЕсли у вас больше одного удалённого репозитория, команда выведет их все. Например, для репозитория с несколькими настроенными удалёнными репозиториями в случае совместной работы нескольких пользователей, вывод команды может выглядеть примерно так:\r\n</p>\r\n[cli]\r\n$ cd grit\r\n$ git remote -v\r\nbakkdoor  https://github.com/bakkdoor/grit (fetch)\r\nbakkdoor  https://github.com/bakkdoor/grit (push)\r\ncho45     https://github.com/cho45/grit (fetch)\r\ncho45     https://github.com/cho45/grit (push)\r\ndefunkt   https://github.com/defunkt/grit (fetch)\r\ndefunkt   https://github.com/defunkt/grit (push)\r\nkoke      git://github.com/koke/grit.git (fetch)\r\nkoke      git://github.com/koke/grit.git (push)\r\norigin    git@github.com:mojombo/grit.git (fetch)\r\norigin    git@github.com:mojombo/grit.git (push)\r\n[/cli]\r\n\r\n<h3>Добавление удалённых репозиториев</h3>\r\n<p>\r\nДля того, чтобы добавить удалённый репозиторий и присвоить ему имя (<code>shortname</code>), просто выполните команду <code>git remote add [shortname] [url]</code>:\r\n</p>\r\n[cli]\r\n$ git remote\r\norigin\r\n$ git remote add pb https://github.com/paulboone/ticgit\r\n$ git remote -v\r\norigin  https://github.com/schacon/ticgit (fetch)\r\norigin  https://github.com/schacon/ticgit (push)\r\npb  https://github.com/paulboone/ticgit (fetch)\r\npb  https://github.com/paulboone/ticgit (push)\r\n[/cli]\r\n<p>\r\nТеперь вместо указания полного пути вы можете использовать pb. Например, если вы хотите получить изменения, которые есть у Пола, но нету у вас, вы можете выполнить команду <code>git fetch pb</code>:\r\n</p>\r\n[cli]\r\n$ git fetch pb\r\nremote: Counting objects: 43, done.\r\nremote: Compressing objects: 100% (36/36), done.\r\nremote: Total 43 (delta 10), reused 31 (delta 5)\r\nUnpacking objects: 100% (43/43), done.\r\nFrom https://github.com/paulboone/ticgit\r\n * [new branch]      master     -> pb/master\r\n * [new branch]      ticgit     -> pb/ticgit\r\n[/cli]\r\n<p>\r\nВетка <code>master</code> из репозитория Пола сейчас доступна вам под именем <code>pb/master</code>.\r\n</p>\r\n\r\n<h3>Получение изменений из удалённого репозитория</h3>\r\n<p>\r\nДля получения данных из удалённых проектов, следует выполнить:\r\n<p>\r\n[cli]\r\n$ git fetch [remote-name]\r\n[/cli]\r\n<p>\r\nДанная команда связывается с указанным удалённым проектом и забирает все те данные проекта, которых у вас ещё нет. После того как вы выполнили команду, у вас должны появиться ссылки на все ветки из этого удалённого проекта. Теперь эти ветки в любой момент могут быть просмотрены или слиты.\r\n</p>\r\n<p>\r\nКогда вы клонируете репозиторий, команда <code>clone</code> автоматически добавляет этот удалённый репозиторий под именем «origin». Таким образом, <code>git fetch origin</code> извлекает все наработки, отправленные (<code>push</code>) на этот сервер после того, как вы склонировали его (или получили изменения с помощью <code>fetch</code>).\r\n</p>\r\n<p>\r\nВажно отметить, что команда <code>git fetch</code> забирает данные в ваш локальный репозиторий, но не сливает их с какими-либо вашими наработками и не модифицирует то, над чем вы работаете в данный момент. Вам необходимо вручную слить эти данные с вашими, когда вы будете готовы.\r\n</p>\r\n<p>\r\nЕсли у вас есть ветка, настроенная на отслеживание удалённой ветки, то вы можете использовать команду <code>git pull</code> чтобы автоматически получить изменения из удалённой ветви и слить их со своей текущей ветвью. К тому же по умолчанию команда <code>git clone</code> автоматически настраивает вашу локальную ветку <code>master</code> на отслеживание удалённой ветки <code>master</code> на сервере, с которого вы клонировали (подразумевается, что на удалённом сервере есть ветка <code>master</code>).\r\n</p>\r\n<p>\r\nВыполнение <code>git pull</code>, как правило, извлекает (<code>fetch</code>) данные с сервера, с которого вы изначально склонировали, и автоматически пытается слить (<code>merge</code>) их с кодом, над которым вы в данный момент работаете.\r\n</p>\r\n\r\n<h3>Отправка изменений в удаленный репозиторий</h3>\r\n<p>\r\nКогда вы хотите поделиться своими наработками, вам необходимо отправить (<code>push</code>) их в главный репозиторий. Команда для этого действия простая: <code>git push [remote-name] [branch-name]</code>. Чтобы отправить вашу ветку <code>master</code> на сервер <code>origin</code> (повторимся, что клонирование, как правило, настраивает оба этих имени автоматически), вы можете выполнить следующую команду для отправки наработок на сервер:\r\n</p>\r\n[cli]\r\n$ git push origin master\r\n[/cli]\r\n<p>\r\nЭта команда срабатывает только в случае, если вы клонировали с сервера, на котором у вас есть права на запись, и если никто другой с тех пор не выполнял команду <code>push</code>. Если вы и кто-то ещё одновременно клонируете, затем он выполняет команду <code>push</code>, а затем команду <code>push</code> выполняете вы, то ваш <code>push</code> точно будет отклонён. Вам придётся сначала вытянуть (<code>pull</code>) их изменения и объединить с вашими. Только после этого вам будет позволено выполнить <code>push</code>.\r\n</p>\r\n\r\n<h3>Просмотр удаленного репозитория</h3>\r\n<p>\r\nЕсли хотите получить побольше информации об одном из удалённых репозиториев, вы можете использовать команду <code>git remote show [remote-name]</code>. Выполнив эту команду с некоторым именем, например, origin, вы получите результат, аналогичный следующему:\r\n</p>\r\n[cli]\r\n$ git remote show origin\r\n* remote origin\r\n  Fetch URL: https://github.com/schacon/ticgit\r\n  Push  URL: https://github.com/schacon/ticgit\r\n  HEAD branch: master\r\n  Remote branches:\r\n    master                               tracked\r\n    dev-branch                           tracked\r\n  Local branch configured for \'git pull\':\r\n    master merges with remote master\r\n  Local ref configured for \'git push\':\r\n    master pushes to master (up to date)\r\n[/cli]\r\n<p>\r\nОна выдаёт URL удалённого репозитория, а также информацию об отслеживаемых ветках. Эта команда любезно сообщает вам, что если вы, находясь на ветке <code>master</code>, выполните <code>git pull</code>, ветка <code>master</code> с удалённого сервера будет автоматически влита в вашу сразу после получения всех необходимых данных. Она также выдаёт список всех полученных ею ссылок.\r\n</p>\r\n\r\n<h3>Удаление и переименование удалённых репозиториев</h3>\r\n<p>\r\nДля переименования ссылок можно вылолнить <code>git remote rename</code>, это изменит сокращённое имя, используемое для удалённого репозитория. Например, если вы хотите переименовать <code>pb</code> в <code>paul</code>, вы можете это сделать так:\r\n</p>\r\n[cli]\r\n$ git remote rename pb paul\r\n$ git remote\r\norigin\r\npaul\r\n[/cli]\r\n<p>\r\nСтоит упомянуть, что это также меняет для вас имена удалённых веток. То, к чему вы обращались как <code>pb/master</code>, теперь стало <code>paul/master</code>.\r\n</p>\r\n<p>\r\nЕсли по какой-то причине вы хотите удалить ссылку, вы можете использовать <code>git remote rm</code>:\r\n</p>\r\n[cli]\r\n$ git remote rm paul\r\n$ git remote\r\norigin\r\n[/cli]','2018-02-16 18:05:20'),(8,2,'Программная работа с регистрами сведений','','','','Регистры сведений в 1С — это прикладные объекты конфигурации для хранения данных в структурированном виде (в разрезе измерений). Например, в регистре сведений можно хранить курсы валют в разрезе валют, цены номенклатуры в разрезе номенклатур, ФИО физических лиц в разрезе физических лиц и т.д.','<p>\r\nРегистры сведений в 1С — это прикладные объекты конфигурации для хранения данных в структурированном виде (в разрезе измерений). Например, в регистре сведений можно хранить курсы валют в разрезе валют, цены номенклатуры в разрезе номенклатур, ФИО физических лиц в разрезе физических лиц и т.д.\r\n</p>\r\n<p>\r\nПри проектировании разработчик указывает необходимость хранения данных в разрезе времени и минимальную периодичность, с которой записи будут храниться в регистре:\r\n</p>\r\n<p>\r\n<img src=\"/files/article/8/1.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nРегистры сведений, для которых указана периодичность, называются периодическими.\r\n</p>\r\n<p>\r\nИзменение данных в регистре может осуществляться как вручную, так и при помощи документов. Режим записи в регистр определяет разработчик на этапе проектирования:\r\n</p>\r\n<p>\r\n<img src=\"/files/article/8/2.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nФизически регистр сведений представляет собой таблицу, в которой хранятся следующие данные:\r\n</p>\r\n<ul>\r\n  <li>измерения — описывают разрезы, в которых хранится информация;</li>\r\n  <li>период — поле, используемое для разворота данных по времени. Поле добавляется автоматически при указании свойства «Периодичность», отличного от «Непериодический»;</li>\r\n  <li>регистратор — поле, используемое для хранения документа, с которым связана запись. Поле добавляется автоматически при указании свойства «Режим записи» в значение «Подчинение регистратору»;</li>\r\n  <li>ресурсы — непосредственно хранят информацию для комбинации измерений;</li>\r\n  <li>реквизиты — дополнительная произвольная информация, относящаяся к конкретной записи регистра.</li>\r\n</ul>\r\n<p>\r\nДля всех регистров сведений обеспечивается контроль уникальности записей, т.е. в регистре не может быть двух одинаковых записей. Одинаковыми считаются записи, у которых совпадают значения измерений, период (если регистр периодический) и регистратор (если регистр подчинен регистратору).\r\n</p>\r\n\r\n<h2>Добавление записей</h2>\r\n<p>\r\nПрограммно добавить записи в регистр сведений можно при помощи:\r\n</p>\r\n<ul>\r\n  <li>объекта <code>НаборЗаписей</code>;</li>\r\n  <li>объекта <code>МенеджерЗаписи</code>.</li>\r\n</ul>\r\n<p>\r\nОбъект <code>МенеджерЗаписи</code> можно использовать только для работы с независимыми регистрами. Причем можно обрабатывать только одну запись. Объект предназначен в основном для интерактивной работы, но программно с ним также можно работать. На системном уровне <code>МенеджерЗаписи</code> использует объект <code>НаборЗаписей</code>.\r\n</p>\r\n<p>\r\nОбщая схема добавления записей в регистр сведений при помощи объекта НаборЗаписей выглядит так:\r\n</p>\r\n<ul>\r\n  <li>создание объекта <code>НаборЗаписей</code>;</li>\r\n  <li>наложение отборов на измерения, период (если регистр периодический) и регистратора (если регистр подчинен регистратору);</li>\r\n  <li>добавление и заполнение значений полей записей;</li>\r\n  <li>запись набора записей.</li>\r\n</ul>\r\n[язык]\r\n// Добавление записи в независимый непериодический регистр сведений\r\nНаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей(); // Этап 1\r\nНаборЗаписей.Отбор.ИмяПодсистемы.Установить(ИмяПодсистемы); // Этап 2\r\n// Этап 3\r\nНоваяЗапись = НаборЗаписей.Добавить();\r\nНоваяЗапись.ИмяПодсистемы = ИмяПодсистемы;\r\nНоваяЗапись.Версия = НомерВерсии;\r\nНаборЗаписей.Записать(); // Этап 4\r\n[/язык]\r\n[язык]\r\n// Добавление записи в независимый периодический регистр сведений\r\nНаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей(); // Этап 1\r\n// Этап 2\r\nНаборЗаписей.Отбор.Валюта.Установить(Доллар);\r\nНаборЗаписей.Отбор.Период.Установить(НачалоДня(ТекущаяДата()));\r\n// Этап3\r\nНоваяЗапись = НаборЗаписей.Добавить();\r\nНоваяЗапись.Период = ТекущаяДата();\r\nНоваяЗапись.Валюта = Доллар;\r\nНоваяЗапись.Курс = 57.92;\r\nНоваяЗапись.Кратность = 1;\r\nНаборЗаписей.Записать(); // Этап 4\r\n[/язык]\r\n<p>\r\nОбщая схема добавления записей в регистр сведений при помощи объекта <code>МенеджерЗаписи</code> выглядит так:\r\n</p>\r\n<ul>\r\n  <li>создание объекта <code>МенеджерЗаписи</code>;</li>\r\n  <li>заполнение значений полей записи;</li>\r\n  <li>запись записи.</li>\r\n</ul>\r\n[язык]\r\n// Добавление записи в независимый непериодический регистр сведений\r\nЗапись = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи(); // Этап 1\r\n// Этап 2\r\nЗапись.ИмяПодсистемы = ИмяПодсистемы;\r\nЗапись.Версия = НомерВерсии;\r\nЗапись.Записать(); // Этап 3\r\n[/язык]\r\n[язык]\r\n// Добавление записи в независимый периодический регистр сведений\r\nЗапись = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи(); // Этап 1\r\n// Этап 2\r\nЗапись.Период = ТекущаяДата();\r\nЗапись.Валюта = Доллар;\r\nЗапись.Курс = 57.92;\r\nЗапись.Кратность = 1;\r\nЗапись.Записать(); // Этап 3\r\n[/язык]\r\n\r\n<h2>Изменение записей</h2>\r\n<p>\r\nИзменять существующие записи регистров сведений возможно при помощи объектов <code>НаборЗаписей</code> и <code>МенеджерЗаписи</code>. Ограничения объекта <code>МенеджерЗаписи</code> были описаны выше.\r\n<p>\r\n<p>\r\nОбщая схема редактирования записей регистров сведений:\r\n</p>\r\n<ul>\r\n  <li>создание объекта <code>НаборЗаписей</code> или <code>МенеджерЗаписи</code>;</li>\r\n  <li>наложение отборов;</li>\r\n  <li>чтение записей базы данных, соответствующих наложенным отборам;</li>\r\n  <li>редактирование прочитанных записей;</li>\r\n  <li>запись отредактированных записей.</li>\r\n</ul>\r\n[язык]\r\n// Редактирование записей с использованием объекта НаборЗаписей\r\nНаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей(); // Этап 1\r\n// Этап 2\r\nНаборЗаписей.Отбор.Период.Установить(ДатаКурса);\r\nНаборЗаписей.Отбор.Валюта.Установить(Доллар);\r\nНаборЗаписей.Прочитать(); // Этап 3\r\nДля Каждого Запись Из НаборЗаписей Цикл \r\n     Запись.Курс = 57.84; // Этап 4\r\nКонецЦикла;\r\nНаборЗаписей.Записать(); // Этап 5\r\n[/язык]\r\n[язык]\r\n// Редактирование записей с использованием объекта МенеджерЗаписи\r\nЗапись = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи(); // Этап 1\r\n// Этап 2\r\nЗапись.Период = ДатаКурса;\r\nЗапись.Валюта = Доллар;\r\nЗапись.Прочитать(); // Этап 3\r\nЕсли Запись.Выбран() Тогда // Проверка, что запись существует\r\n    Запись.Курс = 57.92; // Этап 4\r\n    Запись.Записать(); // Этап 5\r\nКонецЕсли;\r\n[/язык]\r\n\r\n<h2>Чтение записей</h2>\r\n<p>\r\nЧтение информации из базы данных рекомендуется выполнять при помощи запросов. Данный способ обеспечивает гибкое применение отборов и группировок, а также возможность выбора записей из нескольких таблиц.\r\n</p>\r\n[язык]\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n    \"ВЫБРАТЬ\r\n    |  КурсыВалют.Период,\r\n    |  КурсыВалют.Валюта,\r\n    |  КурсыВалют.Курс\r\n    |ИЗ\r\n    |  РегистрСведений.КурсыВалют КАК КурсыВалют\";\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\nПока Выборка.Следующий() Цикл\r\n    // обход результата выполнения запроса\r\nКонецЦикла;\r\n[/язык]\r\n<p>\r\nДля периодических регистров сведений есть возможность получить наиболее поздние записи, период которых меньше указанной даты — срез последних, и наиболее ранние записи, период которых больше указанной даты — срез первых. Для получения среза первых и среза последних запросом необходимо использовать одноименные виртуальные таблицы, в параметрах которых сразу можно задать дату среза и отборы. Отборы, если они необходимы, рекомендуется накладывать именно в параметрах виртуальных таблиц, т.к. это позволяет ускорить выполнение запроса.\r\n</p>\r\n[язык]\r\n// Получение записи, у которой валюта равна значению из переменной «ВыбраннаяВалюта»\r\n// и период МЕНЬШЕ или равен значению из переменной «ВыбраннаяДата»\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст = \r\n    \"ВЫБРАТЬ\r\n    |  КурсыВалютСрезПоследних.Период,\r\n    |  КурсыВалютСрезПоследних.Валюта,\r\n    |  КурсыВалютСрезПоследних.Курс\r\n    |ИЗ\r\n    |  РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних\";\r\n\r\nЗапрос.УстановитьПараметр(\"Валюта\", ВыбраннаяВалюта);\r\nЗапрос.УстановитьПараметр(\"Период\", ВыбраннаяДата);\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\nПока Выборка.Следующий() Цикл\r\n    // обход результата выполнения запроса\r\nКонецЦикла;\r\n[/язык]\r\n[язык]\r\n// Получение записи, у которой валюта равна значению из переменной «ВыбраннаяВалюта»\r\n// и период БОЛЬШЕ или равен значению из переменной «ВыбраннаяДата»\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст = \r\n    \"ВЫБРАТЬ\r\n    |  КурсыВалютСрезПервых.Период,\r\n    |  КурсыВалютСрезПервых.Валюта,\r\n    |  КурсыВалютСрезПервых.Курс\r\n    |ИЗ\r\n    |  РегистрСведений.КурсыВалют.СрезПервых(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПервых\";\r\n\r\nЗапрос.УстановитьПараметр(\"Валюта\", ВыбраннаяВалюта);\r\nЗапрос.УстановитьПараметр(\"Период\", ВыбраннаяДата);\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\nПока Выборка.Следующий() Цикл\r\n    // обход результата выполнения запроса\r\nКонецЦикла;\r\n[/язык]\r\n<p>\r\nКроме чтения запросом возможно использование методов объектной модели.\r\n</p>\r\n<p>\r\nДля непериодических регистров сведений:\r\n</p>\r\n<ul>\r\n  <li><code>Выбрать(Отбор, Порядок)</code> — выбирает записи с указанным отбором;</li>\r\n  <li><code>ВыбратьПоРегистратору(Регистратор)</code> — выбирает все записи указанного регистратора;</li>\r\n  <li><code>Получить(Отбор)</code> — получает ресурсы записи с отбором по всем измерениям.</li>\r\n</ul>\r\n<p>\r\nДля периодических регистров сведений:\r\n</p>\r\n<ul>\r\n  <li><code>Выбрать(НачалоИнтервала, КонецИнтервала, Отбор, Порядок)</code> — выбирает записи с указанным отбором, у которых период находится между <code>НачалоИнтервала</code> и <code>КонецИнтервала</code>;</li>\r\n  <li><code>ВыбратьПоРегистратору(Регистратор)</code> — выбирает все записи указанного регистратора;</li>\r\n  <li><code>Получить(Период, Отбор)</code> — получает ресурсы записи с отбором по всем измерениям и периоду;</li>\r\n  <li><code>ПолучитьПервое(НачалоПериода, Отбор)</code> — получает ресурсы наиболее ранней записи, соответствующей указанным периоду и отбору;</li>\r\n  <li><code>ПолучитьПоследнее(КонецПериода, Отбор)</code> — получает ресурсы наиболее поздней записи, соответствующей указанным периоду и отбору;</li>\r\n  <li><code>СрезПервых(НачалоПериода, Отбор)</code> — получает таблицу наиболее ранних записей, соответствующую указанным периоду и отбору;</li>\r\n  <li><code>СрезПоследних(КонецПериода, Отбор)</code> — получает таблицу наиболее поздних записей, соответствующую указанным периоду и отбору.</li>\r\n</ul>\r\n\r\n<h2>Удаление записей</h2>\r\n<p>\r\nДля удаления записи (записей) в независимом регистре сведений необходимо:\r\n</p>\r\n  <li>создать набор записей;</li>\r\n  <li>наложить требуемые отборы на измерения и период (если регистр периодический);</li>\r\n  <li>записать набор записей без предварительного чтения.</li>\r\n</ul>\r\n[язык]\r\nНаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();\r\n\r\nНаборЗаписей.Отбор.Валюта.Установить(Доллар);\r\nНаборЗаписей.Отбор.Период.Установить(НачалоДня(ТекущаяДата()));\r\n\r\nНаборЗаписей.Записать();\r\n[/язык]\r\n<p>\r\nДля удаления записей в подчиненном регистре сведений необходимо:\r\n</p>\r\n<ul>\r\n  <li>создать набор записей;</li>\r\n  <li>наложить отбор на регистратора;</li>\r\n  <li>записать набор записей без предварительного чтения.</li>\r\n</ul>\r\n[язык]\r\nНаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();\r\nНаборЗаписей.Отбор.Регистратор.Установить(СсылкаНаДокументРегистратор);\r\nНаборЗаписей.Записать();\r\n[/язык]\r\n\r\n<h2>Очистка регистра сведений</h2>\r\n<p>\r\nДля удаления всех записей в независимом регистре сведений достаточно записать набор записей этого регистра без установки отборов:\r\n</p>\r\n[язык]\r\nНаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей(); \r\nНаборЗаписей.Записать();\r\n[/язык]\r\n<p>\r\nЗапись в регистр сведений, подчиненный регистратору, возможна только при установке отбора по регистратору, поэтому для очистки таких регистров необходимо:\r\n</p>\r\n<ul>\r\n  <li>получить перечень ссылок всех регистраторов регистра сведений;</li>\r\n  <li>последовательно записать пустой набор записей с отбором по регистраторам из первого пункта.</li>\r\n</ul>\r\n[язык]\r\nЗапрос = Новый Запрос(\r\n    \"ВЫБРАТЬ\r\n    | ЦеныНоменклатуры.Регистратор\r\n    |ИЗ\r\n    | РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры\"\r\n);\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nНаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();\r\nПока Выборка.Следующий() Цикл \r\n     НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);\r\n     НаборЗаписей.Записать();\r\nКонецЦикла;\r\n[/язык]','2018-02-28 16:40:47'),(11,1,'Python, библиотека Requests: быстрый старт','','','','Готовы начать? Эта статья дает достаточное представление о том, как начать работу с Requests. Давайте начнем с нескольких простых примеров. Создание запроса с помощью Requests — это очень просто. Начните с импорта модуля Requests.','<p>\r\nГотовы начать? Эта статья дает достаточное представление о том, как начать работу с <code>Requests</code>. Давайте начнем с нескольких простых примеров.\r\n</p>\r\n\r\n<h2>Создание запроса</h2>\r\n<p>\r\nСоздание запроса с помощью <code>Requests</code> — это очень просто. Начните с импорта модуля:\r\n</p>\r\n[idle]\r\n>>> import requests\r\n[/idle]\r\n<p>\r\nТеперь попробуем получить веб-страницу. Например, давайте получим публичный тайм-лайн GitHub.\r\n</p>\r\n[idle]\r\n>>> r = requests.get(\'https://api.github.com/events\')\r\n[/idle]\r\n<p>\r\nТеперь у нас есть объект <code>Response</code> с именем <code>r</code>. Мы можем получить всю необходимую информацию из этого объекта.\r\n</p>\r\n<p>\r\nПростой API Requests означает, что все формы HTTP запросов являются очевидными. Например, вот как вы можете сделать HTTP <code>POST</code> запрос:\r\n</p>\r\n[idle]\r\n>>> r = requests.post(\"http://httpbin.org/post\")\r\n[/idle]\r\n<p>\r\nКруто? А как насчет других типов HTTP запроса: <code>PUT</code>, <code>DELETE</code>, <code>HEAD</code> и <code>OPTIONS</code>? Их выполнить так же просто:\r\n</p>\r\n[idle]\r\n>>> r = requests.put(\"http://httpbin.org/put\")\r\n>>> r = requests.delete(\"http://httpbin.org/delete\")\r\n>>> r = requests.head(\"http://httpbin.org/get\")\r\n>>> r = requests.options(\"http://httpbin.org/get\")\r\n[/idle]\r\n<p>\r\nЭто уже хорошо. Даже здорово. Но это далеко не все из того, что может делать <code>Requests</code>.\r\n</p>\r\n\r\n<h2>Передача параметров в URL</h2>\r\n<p>\r\nЧасто вы хотите послать какие-то данные в строке запроса URL. Если вы строите URL вручную, то эти данные будут представлены в нем в виде пар ключ-значение после знака вопроса. Например, <code>httpbin.org/get?key=val</code>. Requests позволяет передать эти аргументы в качестве словаря, используя аргумент <code>params</code>. В качестве примера, если вы хотите передать <code>key1=value1</code> и <code>key2=value2</code> ресурсу <code>httpbin.org/get</code>, вы должны использовать следующий код:\r\n</p>\r\n[idle]\r\n>>> payload = {\'key1\': \'value1\', \'key2\': \'value2\'}\r\n>>> r = requests.get(\"http://httpbin.org/get\", params=payload)\r\n[/idle]\r\n<p>\r\nВы можете видеть, что URL был закодирован правильно:\r\n</p>\r\n[idle]\r\n>>> print(r.url)\r\nhttp://httpbin.org/get?key2=value2&key1=value1\r\n[/idle]\r\n<p>\r\nЗаметим, что любой ключ словаря, значение которого <code>None</code>, не будет добавлен к строке запроса URL.\r\n</p>\r\n\r\n<h2>Содержимое ответа</h2>\r\n<p>\r\nМы можем читать содержимое ответа сервера. Рассмотрим тайм-лайн GitHub снова:\r\n</p>\r\n[idle]\r\n>>> import requests\r\n>>> r = requests.get(\'https://api.github.com/events\') \r\n>>> r.text \r\nu\'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...\r\n[/idle]\r\n<p>\r\n<code>Requests</code> будет автоматически декодировать содержимое ответа сервера. Большинство Unicode кодировок без проблем декодируются.\r\n</p>\r\n<p>\r\nКогда вы делаете запрос, <code>Requests</code> делает предположение о кодировке, основанное на заголовках HTTP. Кодировка текста, угаданная <code>Requests</code>, используется при обращение к <code>r.text</code>. Вы можете узнать, какую кодировку использует <code>Requests</code>, и изменить её воспользовавшись свойством <code>r.encoding</code>:\r\n</p>\r\n[idle]\r\n>>> r.encoding\r\n\'utf-8\' \r\n>>> r.encoding = \'ISO-8859-1\' \r\n[/idle]\r\n<p>\r\nЕсли вы измените кодировку, Requests будет использовать новое значение <code>r.encoding</code> всякий раз, когда вы будете использовать <code>r.text</code>. Вы можете сделать это в любой ситуации, где нужна более специализированная логика работы с кодировкой содержимого ответа. Например, в HTML и XML есть возможность задавать кодировку прямо в теле документа. В подобных ситуациях вы должны использовать <code>r.content</code>, чтобы найти кодировку, а затем установить <code>r.encoding</code>. Это позволит вам использовать <code>r.text</code> с правильной кодировкой.\r\n</p>\r\n<p>\r\nRequests может также использовать пользовательские кодировки в случае, если вы в них нуждаетесь. Если вы создали свою собственную кодировку и зарегистрировали её в модуле <code>codecs</code>, вы можете просто использовать название кодека в качестве значения <code>r.encoding</code>, и <code>Requests</code> будет работать с этой кодировкой для вас.\r\n</p>\r\n\r\n<h2>Бинарное содержимое ответа</h2>\r\n<p>\r\nВы также можете получить доступ к телу ответа в виде байтов для нетекстовых запросов:\r\n</p>\r\n[idle]\r\n>>> r.content \r\nb\'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...\r\n[/idle]\r\n<p>\r\nПередача со сжатием gzip и deflate автоматически декодируется.\r\n</p>\r\n<p>\r\nНапример, чтобы создать изображение из бинарных данных, возвращаемых в ответ на запрос, вы можете использовать следующий код:\r\n</p>\r\n[idle]\r\n>>> from PIL import Image \r\n>>> from StringIO import StringIO \r\n>>> i = Image.open(StringIO(r.content))\r\n[/idle]\r\n\r\n<h2>JSON содержимое ответа</h2>\r\n<p>\r\nС библиотекой <code>Requests</code> также поставляется встроенный JSON декодер на случай, если вы имеете дело с данными в формате JSON:\r\n</p>\r\n[idle]\r\n>>> import requests \r\n>>> r = requests.get(\'https://api.github.com/events\') \r\n>>> r.json() \r\n[{u\'repository\': {u\'open_issues\': 0, u\'url\': \'https://github.com/...\r\n[/idle]\r\n<p>\r\nВ случае, если декодирование JSON не удается, r.json выбрасывает исключение. Например, если приходит ответ с кодом статуса <code>401</code> (неавторизованный), попытка обращения к <code>r.json</code> выбрасывает исключение <code>ValueError: No JSON object could be decoded</code>.\r\n</p>\r\n\r\n<h2>Необработанное содержимое ответа</h2>\r\n<p>\r\nВ редких случаях, когда вы хотите получить доступ к сырому ответу сервера на уровне сокета, вы можете обратиться к <code>r.raw</code>. Если вы хотите сделать это, убедитесь, что вы установили <code>stream=True</code> в вашем первом запросе. После этого вы уже можете проделать следующее:\r\n</p>\r\n[idle]\r\n>>> r = requests.get(\'https://api.github.com/events\', stream=True) \r\n>>> r.raw \r\n<requests.packages.urllib3.response.HTTPResponse object at 0x101194810> \r\n>>> r.raw.read(10) \r\n\'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03\'\r\n[/idle]\r\n<p>\r\nТеперь вы можете использовать подобный код как шаблон, чтобы сохранить получаемый поток в файл:\r\n</p>\r\n[idle]\r\n>>> with open(filename, \'wb\') as fd:\r\n>>>     for chunk in r.iter_content(chunk_size):\r\n>>>         fd.write(chunk)\r\n[/idle]\r\n<p>\r\nИспользование <code>Response.iter_content</code> будет обрабатывать многое из того, с чем бы вам пришлось иметь дело при использовании <code>Response.raw</code> напрямую. Описанное выше является предпочтительным и рекомендуемым способом извлечения содержимого при потоковой загрузке.\r\n</p>\r\n\r\n<h2>Пользовательские HTTP заголовки</h2>\r\n<p>\r\nЕсли вы хотите добавить HTTP-заголовки в запрос, просто передайте соответствующий словарь в параметре <code>headers</code>. Например, мы не указали заголовок <code>content-type</code> в предыдущем примере. Давайте сделаем это сейчас:\r\n</p>\r\n[idle]\r\n>>> import json\r\n>>> url = \'https://api.github.com/some/endpoint\'\r\n>>> payload = {\'some\': \'data\'} \r\n>>> headers = {\'content-type\': \'application/json\'}\r\n>>> r = requests.post(url, data=json.dumps(payload), headers=headers)\r\n[/idle]\r\n\r\n<h2>Более сложные POST запросы</h2>\r\n<p>\r\nЗачастую вы хотите послать некоторые <code>form-encoded</code> данные также как это делается в HTML форме. Чтобы сделать это, просто передайте соответствующий словарь в аргументе <code>data</code>. Ваш словарь данных в таком случае будет автоматически закодирован как HTML форма, когда будет сделан запрос:\r\n</p>\r\n[idle]\r\n>>> payload = {\'key1\': \'value1\', \'key2\': \'value2\'}\r\n>>> r = requests.post(\"http://httpbin.org/post\", data=payload)\r\n>>> print(r.text)\r\n{ ... \"form\": { \"key2\": \"value2\", \"key1\": \"value1\" }, ... }\r\n[/idle]\r\n<p>\r\nНо есть много случаев, когда вы можете захотеть отправить данные, которые не закодированы методом <code>form-encoded</code>. Если вы передадите в запрос строку вместо словаря, то данные будут отправлены в неизменном виде. Например, API v3 GitHub принимает JSON-закодированные <code>POST/PATCH</code> данные:\r\n</p>\r\n[idle]\r\n>>> import json url = \'https://api.github.com/some/endpoint\'\r\n>>> payload = {\'some\': \'data\'}\r\n>>> r = requests.post(url, data=json.dumps(payload))\r\n[/idle]\r\n\r\n<h2>Как послать Multipart-Encoded файл</h2>\r\n<p>\r\nRequests позволяет легко послать на сервер Multipart-Encoded файлы:\r\n</p>\r\n[idle]\r\n>>> url = \'http://httpbin.org/post\' \r\n>>> files = {\'file\': open(\'report.xls\', \'rb\')}\r\n>>> r = requests.post(url, files=files) \r\n>>> r.text \r\n{ ... \"files\": { \"file\": \"<censored...binary...data>\" }, ... }\r\n[/idle]\r\n<p>\r\nВы можете установить имя файла, content-type и заголовки в явном виде:\r\n</p>\r\n[idle]\r\n>>> url = \'http://httpbin.org/post\' \r\n>>> files = {\'file\': (\'report.xls\', open(\'report.xls\', \'rb\'), \'application/vnd.ms-excel\', {\'Expires\': \'0\'})}\r\n>>> r = requests.post(url, files=files)\r\n>>> r.text\r\n{ ... \"files\": { \"file\": \"<censored...binary...data>\" }, ... }\r\n[/idle]\r\n<p>\r\nПри желании, вы можете отправить строки, которые будут приняты в виде файлов:\r\n</p>\r\n[idle]\r\n>>> url = \'http://httpbin.org/post\'\r\n>>> files = {\'file\': (\'report.csv\', \'some,data,to,send\\nanother,row,to,send\\n\')}\r\n>>> r = requests.post(url, files=files)\r\n>>> r.text\r\n{ ... \"files\": { \"file\": \"some,data,to,send\\nanother,row,to,send\\n\" }, ... }\r\n[/idle]\r\n<p>\r\nВ случае, если вы отправляете очень большой файл как <code>multipart/form-data</code>, вы можете захотеть отправить запрос потоком. По умолчанию <code>requests</code> не поддерживает этого, но есть отдельный пакет, который это делает — <code>requests-toolbelt</code>.\r\n</p>\r\n<p>\r\nДля отправки нескольких файлов в одном запросе, обратитесь к дополнительной документации.\r\n</p>\r\n\r\n<h2>Коды состояния ответа</h2>\r\n<p>\r\nМы можем проверить код состояния ответа:\r\n</p>\r\n[idle]\r\n>>> r = requests.get(\'http://httpbin.org/get\')\r\n>>> r.status_code\r\n200\r\n[/idle]\r\n<p>\r\nДля удобства <code>Requests</code> также поставляется со встроенным объектом подстановок кодов состояния:\r\n</p>\r\n[idle]\r\n>>> r.status_code == requests.codes.ok\r\nTrue\r\n[/idle]\r\n<p>\r\nЕсли мы сделали плохой запрос (ошибка <code>4XX</code> клиента или ошибка <code>5XX</code> ответа сервера), то мы можем возбудить исключение с помощью <code>Response.raise_for_status()</code>:\r\n</p>\r\n[idle]\r\n>>> bad_r = requests.get(\'http://httpbin.org/status/404\') \r\n>>> bad_r.status_code \r\n404\r\n>>> bad_r.raise_for_status() \r\nTraceback (most recent call last):\r\n  File \"requests/models.py\", line 832, in raise_for_status\r\n    raise http_error\r\nrequests.exceptions.HTTPError: 404 Client Error\r\nTraceback (most recent call last):\r\n  File \"requests/models.py\", line 832, in raise_for_status\r\n    raise http_error\r\nrequests.exceptions.HTTPError: 404 Client Error\r\n[/idle]\r\n<p>\r\nНо если status_code для <code>r</code> оказался <code>200</code>, то когда мы вызываем <code>raise_for_status()</code> мы получаем:\r\n</p>\r\n[idle]\r\n>>> r.raise_for_status()\r\nNone\r\n[/idle]\r\n<p>\r\nЭто значит, что все в порядке.\r\n</p>\r\n\r\n<h2>Заголовки ответов</h2>\r\n<p>\r\nМы можем просматривать заголовки ответа сервера, используя словарь Python:\r\n</p>\r\n[idle]\r\n>>> r.headers { \'content-encoding\': \'gzip\', \'transfer-encoding\': \'chunked\', \'connection\': \'close\', \'server\': \'nginx/1.0.4\', \'x-runtime\': \'148ms\', \'etag\': \'\"e1ca502697e5c9317743dc078f67693f\"\', \'content-type\': \'application/json\' }\r\n[/idle]\r\n<p>\r\nОднако это словарь особого рода: он сделан специально для HTTP заголовков. Согласно RFC 7230, имена заголовков HTTP нечувствительны к регистру.\r\n</p>\r\n<p>\r\nТаким образом, мы можем получить доступ к заголовкам с любым написанием:\r\n</p>\r\n[idle]\r\n>>> r.headers[\'[red]Content-Type[/red]\'] \r\n\'application/json\'\r\n>>> r.headers.get(\'[red]content-type[/red]\')\r\n\'application/json\'\r\n[/idle]\r\n\r\n<h2>Cookies</h2>\r\n<p>\r\nЕсли ответ содержит cookie, вы можете быстро получить к ним доступ:\r\n</p>\r\n[idle]\r\n>>> url = \'http://example.com/some/cookie/setting/url\'\r\n>>> r = requests.get(url)\r\n>>> r.cookies[\'example_cookie_name\']\r\n\'example_cookie_value\'\r\n[/idle]\r\n<p>\r\nДля отправки собственных cookie на сервер, вы можете использовать параметр <code>cookies</code>:\r\n</p>\r\n[idle]\r\n>>> url = \'http://httpbin.org/cookies\'\r\n>>> cookies = dict(cookies_are=\'working\')\r\n>>> r = requests.get(url, cookies=cookies)\r\n>>> r.text\r\n\'{\"cookies\": {\"cookies_are\": \"working\"}}\'\r\n[/idle]\r\n\r\n<h2>Редиректы и история</h2>\r\n<p>\r\nПо умолчанию <code>Requests</code> будет выполнять редиректы для всех HTTP методов, кроме <code>HEAD</code>. Мы можем использовать свойство <code>history</code> объекта <code>Response</code>, чтобы отслеживать редиректы. Список <code>Response.history</code> содержит объекты <code>Response</code>, которые были созданы во время выполнения запроса. Список сортируется от более ранних к более поздним ответам.\r\n</p>\r\n<p>\r\nНапример, GitHub перенаправляет все HTTP запросы на HTTPS:\r\n</p>\r\n[idle]\r\n>>> r = requests.get(\'http://github.com\') \r\n>>> r.url \'https://github.com/\' \r\n>>> r.status_code \r\n200 \r\n>>> r.history \r\n[<Response [301]>]\r\n[/idle]\r\n<p>\r\nЕсли вы используете <code>GET</code>, <code>OPTIONS</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code> или <code>DELETE</code>, вы можете отключить обработку редиректов с помощью параметра <code>allow_redirects</code>:\r\n</p>\r\n[idle]\r\n>>> r = requests.get(\'http://github.com\', allow_redirects=False) \r\n>>> r.status_code \r\n301 \r\n>>> r.history \r\n[]\r\n[/idle]\r\n<p>\r\nЕсли вы используете <code>HEAD</code>, вы можете включить обработку редиректов:\r\n</p>\r\n[idle]\r\n>>> r = requests.head(\'http://github.com\', allow_redirects=True) \r\n>>> r.url \'https://github.com/\' \r\n>>> r.history \r\n[<Response [301]>]\r\n[/idle]\r\n\r\n<h2>Тайм-ауты</h2>\r\n<P>\r\nВы можете сказать Requests прекратить ожидание ответа после определенного количества секунд с помощью параметра <code>timeout</code>:\r\n</p>\r\n[idle]\r\n>>> requests.get(\'http://github.com\', timeout=0.001) \r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nrequests.exceptions.Timeout: HTTPConnectionPool(host=\'github.com\', port=80): Request timed out. (timeout=0.001)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nrequests.exceptions.Timeout: HTTPConnectionPool(host=\'github.com\', port=80): Request timed out. (timeout=0.001)\r\n[/idle]\r\n<p>\r\nПримечание: <code>timeout</code> это не ограничение по времени полной загрузки ответа. Исключение возникает, если сервер не дал ответ за <code>timeout</code> секунд (точнее, если ни одного байта не было получено от основного сокета за <code>timeout</code> секунд).\r\n</p>\r\n\r\n<h2>Ошибки и исключения</h2>\r\n<ul>\r\n  <li>В случае неполадок в сети (например, отказа DNS, отказался соединения и т.д.), <code>Requests</code> возбудит исключение <code>ConnectionError</code>.</li>\r\n  <li>В более редком случае неверного HTTP ответа, <code>Requests</code> возбудит исключение <code>HTTPError</code>.</li>\r\n  <li>Если превышено время ожидания ответа, возбуждается исключение <code>Timeout</code>.</li>\r\n  <li>Если запрос превышает заданное значение максимального количества редиректов, то возбуждается исключение <code>TooManyRedirects</code>.</li>\r\n</ul>\r\n<p>\r\nВсе исключения, которые возбуждает непосредственно <code>Requests</code>, унаследованы от <code>requests.exceptions.RequestException</code>.\r\n</p>','2018-03-04 13:54:17'),(9,2,'Примеры кода работы со справочниками','','','','Как создать элемент (группу) справочника? Как найти элемент справочника? Как удалить элемент справочника? Как перебрать элементы справочника? Как открыть форму списка (элемента) справочника?','<ul>\r\n  <li><a href=\"#a1\">Как создать элемент (группу) справочника?</a></li>\r\n  <li><a href=\"#a2\">Как найти элемент справочника?</a></li>\r\n  <li><a href=\"#a3\">Как удалить элемент справочника?</a></li>\r\n  <li><a href=\"#a4\">Как перебрать элементы справочника?</a></li>\r\n  <li><a href=\"#a5\">Как выбрать все элементы из определенной группы?</a></li>\r\n  <li><a href=\"#a6\">Как перебрать элементы подчиненного справочника с помощью запроса?</a></li>\r\n  <li><a href=\"#a7\">Как перебрать элементы подчиненного справочника с помощью выборки справочника?</a></li>\r\n  <li><a href=\"#a8\">Как открыть форму списка (элемента) справочника?</a></li>\r\n  <li><a href=\"#a9\">Как добавить запись в табличную часть элемента справочника?</a></li>\r\n  <li><a href=\"#a10\">Как удалить строки из табличной части справочника?</a></li>\r\n  <li><a href=\"#a11\">Как перебрать строки табличной части справочника?</a></li>\r\n  <li><a href=\"#a12\">Как создать элемент в нужной группе?</a></li>\r\n  <li><a href=\"#a13\">Как узнать, есть ли у текущего элемента подчиненные?</a></li>\r\n  <li><a href=\"#a14\">Как узнать количество подчиненных элементов у выбранного элемента справочника?</a></li>\r\n  <li><a href=\"#a15\">Как узнать количество подчиненных элементов у выбранного элемента справочника, если подчиненных справочников нексолько?</a></li>\r\n  <li><a href=\"#a16\">Как получить всех родителей выбранного элемента справочника?</a></li>\r\n  <li><a href=\"#a17\">Как получить запросом «полный» код элементов справочника, если тип кода — Строка?</a></li>\r\n  <li><a href=\"#a18\">Как получить все элементы справочника, содержащие в наименовании определенную подстроку, со всей иерархией, в которую они входят?</a></li>\r\n  <li><a href=\"#a19\">Как найти все элементы справочника, в которых не заполнен строковый реквизит?</a></li>\r\n  <li><a href=\"#a20\">Как перенести все элементы справочника «Контрагенты» из одной группы в другую?</a></li>\r\n  <li><a href=\"#a21\">Как организовать программный выбор элемента справочника?</a></li>\r\n  <li><a href=\"#a22\">Как сохранить фотографию сотрудника в справочнике «Сотрудники»?</a></li>\r\n</ul>\r\n\r\n<p><a name=\"a1\"></a>Как создать элемент (группу) справочника?</p>\r\n[язык]\r\nНовыйЭлемент = Справочники.ДокументыУдостоверяющиеЛичность.СоздатьЭлемент();\r\nНовыйЭлемент.Наименование = \"военный билет\"; \r\n// Установить другие реквизиты.  \r\n// .....\r\nНовыйЭлемент.Записать(); \r\n\r\nНовыйЭлемент = Справочники.Банки.СоздатьЭлемент(); \r\n// Получить ссылку на группу, в которой будет находиться новый элемент\r\nРодитель = Справочники.Банки.НайтиПоКоду(\"000000001\"); \r\nНовыйЭлемент.Наименование = \"АКБ\"; \r\nНовыйЭлемент.Код = \"000000011\"; \r\nНовыйЭлемент.Родитель = Родитель; \r\n// Установить другие реквизиты \r\n// .....\r\nНовыйЭлемент.Записать(); \r\n\r\nНоваяГруппа = Справочники.Номенклатура.СоздатьГруппу(); \r\n// Получить ссылку на группу, в которой должна находиться создаваемая группа\r\nРодитель = Справочники.Номенклатура.НайтиПоНаименованию(\"Обувь\", Истина); \r\nНоваяГруппа.Наименование = \"Модельная обувь\"; \r\nНоваяГруппа.Родитель = Родитель; \r\n// Установить другие реквизиты  \r\n// .....\r\nНоваяГруппа.Записать(); \r\n\r\n// Создать новый элемент в корне справочника\r\nНовыйЭлемент = Справочники.Подразделения.СоздатьЭлемент(); \r\nНовыйЭлемент.Наименование = \"IT отдел\";  \r\nНовыйЭлемент.Записать(); \r\n\r\n// Получить ссылку на родителя для добавляемых элементов\r\nРодитель = НовыйЭлемент.Ссылка; \r\n// Создать дочерний элемент. \r\nНовыйЭлемент = Справочники.Подразделения.СоздатьЭлемент(); \r\nНовыйЭлемент.Наименование = \"Группа разработки\"; \r\nНовыйЭлемент.Родитель = Родитель;  \r\nНовыйЭлемент.Записать();\r\n[/язык]\r\n\r\n<p><a name=\"a2\"></a>Как найти элемент справочника?</p>\r\n[язык]\r\n// Поиск по коду\r\nРезультатПоиска = Справочники.Номенклатура.НайтиПоКоду(\"00030\"); \r\nЕсли РезультатПоиска.Пустая() Тогда \r\n    // Выполнить действия, предусмотренные в случае, когда элемент не найден.  \r\nКонецЕсли; \r\n\r\n// Поиск по наименованию\r\nРезультатПоиска = Справочники.Номенклатура.НайтиПоНаименованию(\"Кроссовки\"); \r\n\r\n// Поиск по реквизиту\r\nРезультатПоиска = Справочники.Номенклатура.НайтиПоРеквизиту(\"Артикул\", \"К-120002\");\r\n[/язык]\r\n\r\n<p><a name=\"a3\"></a>Как удалить элемент справочника?</p>\r\n[язык]\r\n// Найти ссылки на удаляемый элемент. \r\nМассивСсылок = Новый Массив; \r\nМассивСсылок.Добавить(СсылкаНаУдаляемыйЭлемент); \r\nНайденныеСсылки = НайтиПоСсылкам(МассивСсылок); \r\n\r\nЕсли НайденныеСсылки.Количество() > 0 Тогда \r\n    Сообщить(\"Нельзя удалять элемент, на него имеются ссылки\"); \r\nИначе \r\n    УдаляемыйЭлемент = СсылкаНаУдаляемыйЭлемент.ПолучитьОбъект(); \r\n    УдаляемыйЭлемент.Удалить(); \r\nКонецЕсли; \r\n\r\nУдаляемыйЭлемент.УстановитьПометкуУдаления(Истина);\r\n[/язык]\r\n\r\n<p><a name=\"a4\"></a>Как перебрать элементы справочника?</p>\r\n[язык]\r\nВыборка = Справочники.Номенклатура.ВыбратьИерархически(); \r\nПока Выборка.Следующий() Цикл \r\n    Наименование = Выборка.Наименование; \r\n    // Обращение к другим данным справочника\r\n    // .....\r\nКонецЦикла; \r\n\r\nЗапрос = Новый Запрос(\r\n    \"ВЫБРАТЬ \r\n    |    Ссылка, \r\n    |    Наименование \r\n    |ИЗ \r\n    |    Справочник.Номенклатура \r\n    |АВТОУПОРЯДОЧИВАНИЕ\"\r\n); \r\nРезультат = Запрос.Выполнить().Выбрать(); \r\nПока Результат.Следующий() Цикл \r\n    Наименование = Результат.Наименование;  \r\nКонецЦикла;\r\n[/язык]\r\n\r\n<p><a name=\"a5\"></a>Как выбрать все элементы из определенной группы?</p>\r\n[язык]\r\nВыборка = Справочники.Номенклатура.Выбрать(ПолеВводаРодитель); \r\nПока Выборка.Следующий() Цикл \r\n    Наименование = Выборка.Наименование;\r\nКонецЦикла; \r\n\r\nЗапрос = Новый Запрос(\r\n    \"ВЫБРАТЬ \r\n    |    Ссылка, \r\n    |    Наименование \r\n    |ИЗ \r\n    |    Справочник.Номенклатура \r\n    |ГДЕ \r\n    |    Родитель = &Родитель \r\n    |АВТОУПОРЯДОЧИВАНИЕ\"\r\n); \r\nЗапрос.УстановитьПараметр(\"Родитель\", ПолеВводаРодитель); \r\nРезультат = Запрос.Выполнить().Выбрать(); \r\nПока Результат.Следующий() Цикл \r\n    Наименование = Результат.Наименование;  \r\nКонецЦикла; \r\n\r\nВыборка=Справочники.Номенклатура.ВыбратьИерархически(ПолеВводаРодитель); \r\nПока Выборка.Следующий() Цикл \r\n    Наименование = Выборка.Наименование;  \r\nКонецЦикла; \r\n\r\nЗапрос = Новый Запрос(\r\n    \"ВЫБРАТЬ \r\n    |    Ссылка, \r\n    |    Наименование \r\n    |ИЗ \r\n    |    Справочник.Номенклатура \r\n    |ГДЕ \r\n    |    Родитель В ИЕРАРХИИ(&Родитель) \r\n    |АВТОУПОРЯДОЧИВАНИЕ\"\r\n); \r\nЗапрос.УстановитьПараметр(\"Родитель\", ПолеВводаРодитель); \r\nРезультат = Запрос.Выполнить().Выбрать(); \r\nПока Результат.Следующий() Цикл \r\n    Наименование = Результат.Наименование;  \r\nКонецЦикла;\r\n[/язык]\r\n\r\n<p><a name=\"a6\"></a>Как перебрать элементы подчиненного справочника с помощью запроса?</p>\r\n[язык]\r\nПроцедура ПереборПодчиненыхЭлементов(Контрагент) \r\n    Запрос = Новый Запрос(); \r\n    Запрос.Текст =\r\n    \"ВЫБРАТЬ \r\n    |    КонтактныеЛица.Ссылка \r\n    |ИЗ \r\n    |    Справочник.КонтактныеЛица КАК КонтактныеЛица \r\n    |ГДЕ \r\n    |    КонтактныеЛица.Владелец = &Владелец\"; \r\n    Запрос.УстановитьПараметр(\"Владелец\", Контрагент); \r\n    Результат = Запрос.Выполнить(); \r\n    Выборка = Результат.Выбрать(); \r\n    Пока Выборка.Следующий() Цикл \r\n        ОчереднойПодчиненый = Выборка.Ссылка; \r\n    КонецЦикла; \r\nКонецПроцедуры\r\n[/язык]\r\n\r\n<p><a name=\"a7\"></a>Как перебрать элементы подчиненного справочника с помощью выборки справочника?</p>\r\n[язык]\r\nПроцедура ПереборПодчиненыхЭлементов(Контрагент) \r\n    // Получить выборку по указанному контрагенту\r\n    Выборка = Справочники.КонтактныеЛица.Выбрать( , Контрагент); \r\n    Пока Выборка.Следующий() Цикл \r\n        ОчереднойПодчиненый = Выборка.Ссылка; \r\n    КонецЦикла; \r\nКонецПроцедуры\r\n[/язык]\r\n\r\n<p><a name=\"a8\"></a>Как открыть форму списка (элемента) справочника?</p>\r\n[язык]\r\nФорма = Справочники.Номенклатура.ПолучитьФормуСписка(); \r\nФорма.Открыть();\r\n\r\nЭлемент = Справочники.Номенклатура.НайтиПоКоду(\"00070\"); \r\nФорма = Элемент.ПолучитьФорму(); \r\nФорма.Открыть();\r\n[/язык]\r\n\r\n<p><a name=\"a9\"></a>Как добавить запись в табличную часть элемента справочника?</p>\r\n[язык]\r\nЭлементОбъект = СсылкаКонтрагент.ПолучитьОбъект(); \r\nНоваяСтрока = ЭлементОбъект.ВидыДеятельности.Добавить(); \r\n// Заполнить реквизиты\r\nНоваяСтрока.ВидДеятельности = ПолеВводаВидДеятельности; \r\n// .....\r\nЭлементОбъект.Записать();\r\n[/язык]\r\n\r\n<p><a name=\"a10\"></a>Как удалить строки из табличной части справочника?</p>\r\n[язык]\r\nЭлементСправочника = Справочники.Контрагенты.НайтиПоКоду(\"Ю0006\"); \r\nОбъектСправочника = ЭлементСправочника.ПолучитьОбъект(); \r\nОбъектСправочника.ВидыДеятельности.Очистить(); \r\nОбъектСправочника.Записать(); \r\n\r\nОбъектСправочника = ВыбранныйЭлемент.ПолучитьОбъект(); \r\n\r\n// Создать структуру для отбора удаляемых строк\r\nСтруктураОтбора = Новый Структура(\"ВидДеятельности\", ВыбранныйВидДеятельности); \r\n\r\n// Получить массив удаляемых строк\r\nПодходящиеСтроки = ОбъектСправочника.ВидыДеятельности.НайтиСтроки(СтруктураОтбора); \r\n\r\n// Удалить строки\r\nДля Каждого ОчереднаяСтрока Из ПодходящиеСтроки Цикл \r\n    ОбъектСправочника.ВидыДеятельности.Удалить(ОчереднаяСтрока); \r\nКонецЦикла; \r\n\r\nОбъектСправочника.Записать();\r\n[/язык]\r\n\r\n<p><a name=\"a11\"></a>Как перебрать строки табличной части справочника?</p>\r\n[язык]\r\nЭлементСправочника = Справочники.Контрагенты.НайтиПоКоду(\"Ю0006\"); \r\nДля Каждого ТекущаяСтрока Из ЭлементСправочника.ВидыДеятельности Цикл \r\n    Сообщить(ТекущаяСтрока.ВидДеятельности); \r\nКонецЦикла;\r\n[/язык]\r\n\r\n<p><a name=\"a12\"></a>Как создать элемент в нужной группе?</p>\r\n[язык]\r\nКодГруппы = \"330100\"; \r\nПоискПоПолномуКоду = Ложь; // значение по умолчанию \r\nГруппа = Справочники.Номенклатура.НайтиПоКоду(КодГруппы, ПоискПоПолномуКоду); \r\n\r\nЕсли Группа.Пустая() Тогда \r\n    Группа = Справочники.Номенклатура.СоздатьГруппу(); \r\n    Группа.Код = КодГруппы; \r\n    Группа.Наименование = \"Загруженные\"; \r\n    Группа.Записать(); \r\nИначеЕсли НЕ Группа.ЭтоГруппа Тогда \r\n    Сообщить(\"Найден элемент справочника с указанным кодом!\"); \r\n    // Предусмотреть прерывание алгоритма...\r\nКонецЕсли; \r\n\r\nСпр = Справочники.Номенклатура.СоздатьЭлемент(); \r\nСпр.Наименование = \"Программно созданный\"; \r\n// Реквизиты заполняются в соответствии с задачей\r\n// .....\r\nСпр.Родитель = Группа.Ссылка; \r\nСпр.Записать(); \r\n\r\nГруппа = Справочники.Номенклатура.Загруженные; \r\n\r\nКодЭлемента = \"330100\"; \r\nПоискПоПолномуКоду = Ложь; // Значение по умолчанию \r\nРодитель = Справочники.Номенклатура.НайтиПоКоду(КодЭлемента, ПоискПоПолномуКоду); \r\n\r\nЕсли Родитель.Пустая() Тогда \r\nРодитель = Справочники.Номенклатура.СоздатьЭлемент(); \r\n\r\nРодитель.Код = КодЭлемента; \r\nРодитель.Наименование = \"Загруженные\"; \r\n\r\nРодитель.Записать(); \r\nКонецЕсли; \r\n\r\nСпр = Справочники.Номенклатура.СоздатьЭлемент(); \r\nСпр.Наименование = \"Программно созданный\"; \r\n// Реквизиты заполняются в соответствии с задачей\r\n// .....\r\nСпр.Родитель = Родитель.Ссылка; \r\nСпр.Записать();\r\n[/язык]\r\n\r\n<p><a name=\"a13\"></a>Как узнать, есть ли у текущего элемента подчиненные?</p>\r\n[язык]\r\nВыборка = Справочники.Номенклатура.Выбрать( , Владелец); \r\nЕсли Выборка.Следующий() = Истина Тогда \r\n    // Есть подчиненные элементы.\r\nКонецЕсли;\r\n\r\nЗапрос = Новый Запрос(); \r\nЗапрос.Текст =\r\n    \"ВЫБРАТЬ ПЕРВЫЕ 1 \r\n    |    ЕдиницыИзмерения.Ссылка \r\n    |ИЗ \r\n    |    Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения \r\n    |ГДЕ \r\n    |    ЕдиницыИзмерения.Владелец = &Владелец\"; \r\nЗапрос.УстановитьПараметр(\"Владелец\", Владелец); \r\nЕсли НЕ Запрос.Выполнить().Пустой() Тогда \r\n    // Есть подчиненные элементы!\r\nКонецЕсли;\r\n[/язык]\r\n\r\n<p><a name=\"a14\"></a>Как узнать количество подчиненных элементов у выбранного элемента справочника?</p>\r\n[язык]\r\nВыборка = Справочники.ЕдиницыИзмерения.Выбрать( , Владелец); \r\nКоличествоЭлементов = 0; \r\nПока Выборка.Следующий() Цикл \r\n    КоличествоЭлементов = КоличествоЭлементов + 1; \r\nКонецЦикла; \r\n\r\nЗапрос = Новый Запрос(); \r\nЗапрос.Текст =\r\n    \"ВЫБРАТЬ \r\n    |    КОЛИЧЕСТВО(*) КАК КоличествоЗаписей \r\n    |ИЗ \r\n    |    Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения \r\n    |ГДЕ \r\n    |    ЕдиницыИзмерения.Владелец = &Владелец\"; \r\nЗапрос.УстановитьПараметр(\"Владелец\", Владелец); \r\nВыборка = Запрос.Выполнить().Выбрать(); \r\n\r\nЕсли Выборка.Следующий() Тогда \r\n    КоличествоЗаписей = Выборка.КоличествоЗаписей; \r\nКонецЕсли;\r\n[/язык]\r\n\r\n<p><a name=\"a15\"></a>Как узнать количество подчиненных элементов у выбранного элемента справочника, если подчиненных справочников несколько?</p>\r\n[запрос]\r\nВЫБРАТЬ\r\n    СУММА(КоличествоПодчиненных) КАК КоличествоПодчиненныхЭлементов \r\nИЗ \r\n    (ВЫБРАТЬ \r\n        КОЛИЧЕСТВО(*) КАК КоличествоПодчиненных \r\n    ИЗ \r\n        Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения \r\n    ГДЕ\r\n        ЕдиницыИзмерения.Владелец = &Владелец \r\n\r\n    ОБЪЕДИНИТЬ ВСЕ \r\n\r\n    ВЫБРАТЬ \r\n        КОЛИЧЕСТВО(*) \r\n    ИЗ \r\n        Справочник.СерииНоменклатуры КАК СерииНоменклатуры \r\n    ГДЕ\r\n        СерииНоменклатуры.Владелец = &Владелец\r\n    ) КАК ВложенныйЗапрос\r\n[/запрос]\r\n\r\n<p><a name=\"a16\"></a>Как получить всех родителей выбранного элемента справочника?</p>\r\n[язык]\r\nМассивРодителей = Новый Массив; \r\nРодитель = СсылкаНаЭлемент.Родитель; \r\n\r\nПока НЕ Родитель.Пустая() Цикл\r\n    МассивРодителей.Добавить(Родитель);\r\n    Родитель = Родитель.Родитель; \r\nКонецЦикла; \r\n\r\nДля Каждого ТекущийРодитель Из МассивРодителей Цикл\r\n    // Работа с текущим родителем\r\nКонецЦикла;\r\n[/язык]\r\n[запрос]\r\nВЫБРАТЬ \r\n    Номенклатура.Ссылка КАК Ссылка \r\nИЗ \r\n    Справочник.Номенклатура КАК Номенклатура \r\nГДЕ \r\n    Номенклатура.Ссылка = &Ссылка \r\nИТОГИ ПО \r\n    Ссылка ТОЛЬКО ИЕРАРХИЯ \r\n[/запрос]\r\n[язык]\r\nТекущийЭлементНоменклатуры = ЭлементНоменклатура; \r\n\r\nЗапрос = Новый Запрос(\r\n    \"ВЫБРАТЬ \r\n    |    Номенклатура.Родитель, \r\n    |    Номенклатура.Родитель.Родитель, \r\n    |    Номенклатура.Родитель.Родитель.Родитель, \r\n    |    Номенклатура.Родитель.Родитель.Родитель.Родитель, \r\n    |    Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель \r\n    |ИЗ \r\n    |    Справочник.Номенклатура КАК Номенклатура \r\n    |ГДЕ \r\n    |    Номенклатура.Ссылка = &ТекущийЭлементНоменклатуры\"; \r\n\r\nПока Истина Цикл \r\n    Запрос.УстановитьПараметр(\"ТекущийЭлементНоменклатуры\", ТекущийЭлементНоменклатуры); \r\n    Результат = Запрос.Выполнить(); \r\n    Если Результат.Пустой() Тогда \r\n        Прервать; \r\n    КонецЕсли; \r\n    Выборка = Результат.Выбрать(); \r\n    Выборка.Следующий(); \r\n\r\n    Для НомерКолонки = 0 По Результат.Колонки.Количество() - 1 Цикл \r\n        ТекущийЭлементНоменклатуры = Выборка[НомерКолонки]; \r\n        Если ТекущийЭлементНоменклатуры = Справочники.Номенклатура.ПустаяСсылка() Тогда \r\n            Прервать; \r\n        Иначе \r\n            Сообщить(ТекущийЭлементНоменклатуры); \r\n        КонецЕсли; \r\n    КонецЦикла; \r\n\r\n    Если ТекущийЭлементНоменклатуры = Справочники.Номенклатура.ПустаяСсылка() Тогда \r\n        Прервать;\r\n    КонецЕсли; \r\nКонецЦикла;\r\n[/язык]\r\n\r\n<p><a name=\"a17\"></a>Как получить запросом «полный» код элементов справочника, если тип кода — Строка?</p>\r\n[запрос]\r\nВЫБРАТЬ \r\n    Контрагенты.Ссылка, \r\n    ВЫБОР \r\n        КОГДА (Контрагенты.Родитель.Код ЕСТЬ NULL ) ТОГДА Контрагенты.Код \r\n        КОГДА (Контрагенты.Родитель.Родитель.Код ЕСТЬ NULL ) ТОГДА \r\n            Контрагенты.Родитель.Код + \"/\" + Контрагенты.Код \r\n        ИНАЧЕ Контрагенты.Родитель.Родитель.Код + \"/\" + Контрагенты.Родитель.Код + \r\n            \"/\" + Контрагенты.Код \r\n    КОНЕЦ КАК ПолныйКод \r\nИЗ \r\n    Справочник.Контрагенты КАК Контрагенты\r\n[/запрос]\r\n\r\n<p><a name=\"a18\"></a>Как получить все элементы справочника, содержащие в наименовании определенную подстроку, со всей иерархией, в которую они входят?</p>\r\n[язык]\r\nЗапрос = Новый Запрос(\r\n    \"ВЫБРАТЬ \r\n    |    Контрагенты.Ссылка КАК Ссылка \r\n    |ИЗ \r\n    |    Справочник.Контрагенты КАК Контрагенты \r\n    |ГДЕ \r\n    |    (Контрагенты.Наименование ПОДОБНО &ЧастьНаименования) И (НЕ Контрагенты.ЭтоГруппа) \r\n    |ИТОГИ ПО \r\n    |    Ссылка ТОЛЬКО ИЕРАРХИЯ\"\r\n); \r\nЗапрос.УстановитьПараметр(\"ЧастьНаименования\", \"%\" + ПолеВводаПодстрока + \"%\");\r\n[/язык]\r\n\r\n<p><a name=\"a19\"></a>Как найти все элементы справочника, в которых не заполнен строковый реквизит?</p>\r\n[запрос]\r\nВЫБРАТЬ \r\n    ФизическиеЛица.Ссылка \r\nИЗ \r\n    Справочник.ФизическиеЛица КАК ФизическиеЛица \r\nГДЕ \r\n    (ФизическиеЛица.ИНН = \"\") \r\n\r\nВЫБРАТЬ \r\n    ФизическиеЛица.Ссылка \r\nИЗ \r\n    Справочник.ФизическиеЛица КАК ФизическиеЛица \r\nГДЕ \r\n    (ФизическиеЛица.СтраховойНомерПФР = \"\") ИЛИ (ФизическиеЛица.СтраховойНомерПФР = \" - -\")\r\n[/запрос]\r\n\r\n<p><a name=\"a20\"></a>Как перенести все элементы справочника «Контрагенты» из одной группы в другую?</p>\r\n[язык]\r\nЗапрос = Новый Запрос; \r\nЗапрос.Текст =\r\n    \"ВЫБРАТЬ \r\n    |    Контрагенты.Ссылка \r\n    |ИЗ \r\n    |    Справочник.Контрагенты КАК Контрагенты \r\n    |ГДЕ \r\n    |    Контрагенты.Родитель = &СтарыйРодитель\"; \r\nЗапрос.УстановитьПараметр(\"СтарыйРодитель\", СтарыйРодитель); \r\nРезультат = Запрос.Выполнить(); \r\n\r\nВыборка = Результат.Выбрать(); \r\nПока Выборка.Следующий() Цикл \r\n    Контрагент = Выборка.Ссылка.ПолучитьОбъект(); \r\n    Контрагент.Родитель = НовыйРодитель; \r\n    Контрагент.Записать(); \r\nКонецЦикла;\r\n[/язык]\r\n\r\n<p><a name=\"a21\"></a>Как организовать программный выбор элемента справочника?</p>\r\n[язык]\r\n// Получить форму выбора справочника как подчиненную форме документа \r\nФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора( , ЭтаФорма); \r\n\r\n// Открыть полученную форму \r\nФормаВыбора.Открыть(); \r\n\r\nПроцедура ОбработкаВыбора(ЗначениеВыбора, Источник) \r\n    ПолученноеЗначение = ЗначениеВыбора; \r\n    // Дальнейшая обработка значения...\r\nКонецПроцедуры \r\n\r\nФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора( , ЭтаФорма); \r\nВыбрано = ФормаВыбора.ОткрытьМодально(); \r\n\r\nПроцедура ПолеВводаНачалоВыбора(Элемент, СтандартнаяОбработка) \r\n    // Запретить стандартную обработку. \r\n    СтандартнаяОбработка = Ложь; \r\n    // Получить форму выбора справочника как подчиненную полю ввода\r\n    ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора( , Элемент); \r\n    // Открыть полученную форму \r\n    ФормаВыбора.Открыть(); \r\nКонецПроцедуры \r\n\r\nПроцедура ПолеВводаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) \r\n    // Отключить стандартную обработку (при необходимости)\r\n    СтандартнаяОбработка = Ложь; \r\n    ПолученноеЗначение = ВыбранноеЗначение; \r\n    // Дальнейшая обработка значения...\r\nКонецПроцедуры\r\n[/язык]\r\n\r\n<p><a name=\"a22\"></a>Как сохранить фотографию сотрудника в справочнике «Сотрудники»?</p>\r\n[язык]\r\nПроцедура ЗагрузитьФотографию(Элемент)\r\n    Режим = РежимДиалогаВыбораФайла.Открытие;\r\n    ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);\r\n    ДиалогОткрытияФайла.ПолноеИмяФайла = \"\";\r\n    Фильтр = \"Текст (*,*)|*.*\";\r\n    ДиалогОткрытияФайла.Фильтр = Фильтр;\r\n    ДиалогОткрытияФайла.МножественныйВыбор = Ложь;\r\n    ДиалогОткрытияФайла.Заголовок = \"Выберите картинку\";\r\n    Если ДиалогОткрытияФайла.Выбрать() Тогда \r\n        ВыбраннаяКартинка = Новый Картинка(ДиалогОткрытияФайла.ПолноеИмяФайла);\r\n        ЭлементХранилища = Новый ХранилищеЗначения(ВыбраннаяКартинка);\r\n        Фотография = ЭлементХранилища;\r\n    КонецЕсли;\r\nКонецПроцедуры\r\n\r\nВыбФайл = Новый ДвоичныеДанные(ДиалогОткрытияФайла.ПолноеИмяФайла);\r\nэлХранилища = Новый ХранилищеЗначения(ВыбФайл);\r\nФотография = элХранилища;\r\n[/язык]','2018-03-01 14:50:35'),(10,2,'Программная работа со справочниками','','','','Справочники в 1С — это объекты конфигурации, предназначенные для хранения данных, имеющих одинаковую структуру и носящие списочный характер. Например, в справочниках может храниться: перечень номенклатуры, контрагентов, сотрудников, банковских счетов и т.д.','<ul>\r\n  <li><a href=\"#a1\">Создание элемента справочника</a></li>\r\n  <li><a href=\"#a2\">Поиск элементов справочника</a></li>\r\n  <li><a href=\"#a3\">Удаление элементов справочника</a></li>\r\n  <li><a href=\"#a4\">Обход элементов справочника</a></li>\r\n  <li><a href=\"#a5\">Выбор элементов справочника запросом</a></li>\r\n  <li><a href=\"#a6\">Открытие форм справочника</a></li>\r\n</ul>\r\n<p>\r\nСправочники в 1С — это объекты конфигурации, предназначенные для хранения данных, имеющих одинаковую структуру и носящие списочный характер. Например, в справочниках может храниться: перечень номенклатуры, контрагентов, сотрудников, банковских счетов и т.д. В статье рассматриваются базовые принципы работы с этим объектом метаданных.\r\n</p>\r\n\r\n<h2><a name=\"a1\"></a>Создание элемента справочника</h2>\r\n<p>\r\nСоздание новых элементов и групп справочника производится с помощью программного объекта <code>СправочникМенеджер.ИмяСправочника</code>. Данный объект доступен только на сервере. Создание нового элемента или группы справочника состоит из следующих этапов:\r\n<p>\r\n<ul>\r\n  <li>Создание элемента или группы;\r\n  <li>Заполнение владельца (если справочник подчиненный);\r\n  <li>Заполнение родителя (если справочник иерархический);\r\n  <li>Заполнение наименования и реквизитов (если не задана автоматическая нумерация, то и кода);\r\n  <li>Заполнение табличных частей;\r\n  <li>Запись элемента.\r\n</ul>\r\n<p>Создание новой группы:</p>\r\n[язык]\r\nНоваяГруппа = Справочники.Контрагенты.СоздатьГруппу(); // Создание группы\r\nНоваяГруппа.Наименование = \"Покупатели\"; // Заполнение наименования\r\nНоваяГруппа.Записать(); // Запись группы\r\n[/язык]\r\n<p>Создание нового элемента:</p>\r\n[язык]\r\nНовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент(); // Создание элемента\r\nНовыйЭлемент.Родитель = Справочники.Контрагенты.НайтиПоНаименованию(\"Покупатели\"); // Заполнение родителя\r\nНовыйЭлемент.Наименование = \"Ромашка ООО\"; // Заполнение наименования\r\nНовыйЭлемент.ИНН = \"123456789\"; // Заполнение реквизита\r\n\r\n// Добавление новой строки табличной части\r\nНоваяСтрока = НовыйЭлемент.КонтактнаяИнформация.Добавить();\r\nНоваяСтрока.Тип = \"Адрес\";\r\nНоваяСтрока.Представление = \"Москва\";\r\n\r\nНовыйЭлемент.Записать(); // Запись элемента\r\n[/язык]\r\n\r\n<h2><a name=\"a2\"></a>Поиск элементов справочника</h2>\r\n<p>\r\nДля поиска элементов справочников в языке программирования 1С предусмотрено несколько методов:\r\n</p>\r\n<ul>\r\n  <li><code>НайтиПоКоду(Код, ПоискПоПолномуКоду, Родитель, Владелец)</code></li>\r\n  <li><code>НайтиПоНаименованию(Наименование, ТочноеСоответствие, Родитель, Владелец)</code></li>\r\n  <li><code>НайтиПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита, Родитель, Владелец)</code></li>\r\n</ul>\r\n<p>\r\nВо всех методах если поиск успешный, то будет возвращена ссылка на найденный элемент.\r\n</p>\r\n[язык]\r\n// Поиск контрагента с кодом «123»\r\nНайденныйКонтрагент = Справочники.Контрагенты.НайтиПоКоду(\"123\");\r\n// Поиск подчиненного найденному контрагенту договора с номером «1»\r\nНайденныйДоговор = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(\"1\", , , НайденныйКонтрагент);\r\n// Поиск элемента с наименованием «Покупатели»\r\nНайденныйКонтрагент = Справочники.Контрагенты.НайтиПоНаименованию(\"Покупатели\");\r\n// Поиск элемента с наименованием «Ромашка ООО» в группе «Покупатели»\r\nНайденныйКонтрагент1 = Справочники.Контрагенты.НайтиПоНаименованию(\"Ромашка ООО\", , НайденныйКонтрагент);\r\n// Поиск контрагента с ИНН «123456789»\r\nНайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту(\"ИНН\", \"123456789\");\r\n[/язык]\r\n\r\n<h2><a name=\"a3\"></a>Удаление элементов справочника</h2>\r\n<p>\r\nЭлементы справочника могут быть помечены на удаление и удалены из базы непосредственно.\r\n</p>\r\n<p>\r\n<strong>Непосредственное удаление</strong> – операция необратимая, в то время как пометку на удаление можно отменить. <strong>Пометка на удаление</strong> хранится в предопределенном реквизите <code>ПометкаУдаления</code>. В пользовательском режиме помеченные на удаление элементы и группы справочника помечаются красным крестиком.\r\n</p>\r\n<p>\r\nПометку на удаление можно установить/снять двумя разными способами:\r\n</p>\r\n[язык]\r\n// Способ 1. Использование метода УстановитьПометкуУдаления()\r\nНайденныйКонтрагент = Справочники.Контрагенты.НайтиПоКоду(\"123\");\r\nКонтрагентОбъект = НайденныйКонтрагент.ПолучитьОбъект();\r\nКонтрагентОбъект.УстановитьПометкуУдаления(Истина);\r\n\r\n// Способ 2. Изменение свойства ПометкаУдаления\r\nНайденныйКонтрагент = Справочники.Контрагенты.НайтиПоКоду(\"123\");\r\nКонтрагентОбъект = НайденныйКонтрагент.ПолучитьОбъект();\r\nКонтрагентОбъект.ПометкаУдаления = Истина;\r\nКонтрагентОбъект.Записать();\r\n[/язык]\r\n<p>Пример непосредственного удаления элемента справочника:</p>\r\n[язык]\r\nНайденныйКонтрагент = Справочники.Контрагенты.НайтиПоКоду(\"123\");\r\nКонтрагентОбъект = НайденныйКонтрагент.ПолучитьОбъект();\r\nКонтрагентОбъект.Удалить();\r\n[/язык]\r\n\r\n<h2><a name=\"a4\"></a>Обход элементов справочника</h2>\r\n<p>\r\nДля обхода элементов справочника в языке программирования 1С предусмотрено два метода:\r\n</p>\r\n<ul>\r\n  <li><code>Выбрать(Родитель, Владелец, Отбор, Порядок)</code></li>\r\n  <li><code>ВыбратьИерархически(Родитель, Владелец, Отбор, Порядок)</code></li>\r\n</ul>\r\n<p>\r\nМетоды отличаются порядком следования отобранных элементов: при иерархической выборке для каждого элемента сначала выбираются элементы, для которых он является родителем, а затем уже выбираются элементы следующего уровня.\r\n</p>\r\n<p>\r\nРассмотрим примеры обхода элементов справочника:\r\n</p>\r\n[язык]\r\n// Обход всех элементов справочника Контрагенты\r\nВыборка = Справочники.Контрагенты.Выбрать(); // Получение выборки всех элементов справочника\r\nПока Выборка.Следующий() Цикл\r\n    //действия с очередным элементом\r\n    Сообщить(Выборка.Наименование);\r\nКонецЦикла;\r\n\r\n// Обход контрагентов из группы «Покупатели»\r\nГруппаПокупатели = Справочники.Контрагенты.НайтиПоНаименованию(\"Покупатели\");\r\nВыборка = Справочники.Контрагенты.Выбрать(ГруппаПокупатели);\r\nПока Выборка.Следующий() Цикл\r\n    Сообщить(Выборка.Наименование);\r\nКонецЦикла;\r\n\r\n// Обход договоров контрагента «Ромашка ООО»\r\nНайденныйКонтрагент = Справочники.Контрагенты.НайтиПоНаименованию(\"Ромашка ООО\");\r\nВыборка = Справочники.ДоговорыКонтрагентов.Выбрать(, НайденныйКонтрагент);\r\nПока Выборка.Следующий() Цикл\r\n    Сообщить(Выборка.Наименование);\r\nКонецЦикла;\r\n\r\n// Обход контрагентов с пустым ИНН\r\n// Реквизит ИНН должен быть проиндексирован!\r\nОтбор = Новый Структура(\"ИНН\", \"\"); // Структура может содержать только один элемент\r\nВыборка = Справочники.Контрагенты.Выбрать(, , Отбор);\r\nПока Выборка.Следующий() Цикл\r\n    Сообщить(Выборка.Наименование);\r\nКонецЦикла;\r\n[/язык]\r\n\r\n<h2><a name=\"a5\"></a>Выбор элементов справочника запросом</h2>\r\n<p>\r\nПоиск данных в базе 1С предпочтительнее выполнять при помощи запросов. Запрос позволяет описать практически любые условия для отбора, в отличие от методов <code>Выбрать()</code> и <code>ВыбратьИерархически()</code>, на которые накладываются существенные ограничения. К тому же, в большинстве случаев работа с использованием запросов быстрее, чем работа с использованием программного кода.\r\n</p>\r\n<p>\r\nПростой пример поиска и вывода товаров со стоимостью больше 1000:\r\n</p>\r\n[язык]\r\nЗапрос = Новый Запрос();\r\nЗапрос.Текст = \r\n    \"ВЫБРАТЬ\r\n    | Товары.Наименование\r\n    |ИЗ\r\n    | Справочник.Товары КАК Товары\r\n    |ГДЕ\r\n    | Товары.Стоимость > 1000\";\r\nВыборка = Запрос.Выполнить().Выбрать();\r\nПока Выборка.Следующий() Цикл\r\n    Сообщить(Выборка.Наименование);\r\nКонецЦикла;\r\n[/язык]\r\n\r\n<h2><a name=\"a6\"></a>Открытие форм справочника</h2>\r\n<p>\r\nДля открытия любых форм справочников рекомендуется использовать метод\r\n</p>\r\n[язык]\r\nОткрытьФорму(\r\n    ИмяФормы,\r\n    Параметры,\r\n    Владелец,\r\n    Уникальность,\r\n    Окно,\r\n    НавигационнаяСсылка,\r\n    ОписаниеОповещенияОЗакрытии,\r\n    РежимОткрытияОкна\r\n)\r\n[/язык]\r\n<p>\r\nДля открытия формы элемента или группы справочника также возможно использовать более простой метод\r\n</p>\r\n[язык]\r\nПоказатьЗначение(ОписаниеОповещенияОЗавершении, Значение)\r\n[/язык]\r\n<p>\r\nКроме методов <code>ОткрытьФорму()</code> и <code>ПоказатьЗначение()</code> есть и другие (<code>ОткрытьФормуМодально</code>, <code>ОткрытьЗначение</code>, <code>ПолучитьФорму</code>), но их использование не рекомендуется, т.к. часть этих методов использует режим модального открытия, часть противоречит свежим рекомендациям фирмы 1С.\r\n</p>\r\n<p>\r\nПриведем примеры программного открытия форм справочника:\r\n</p>\r\n[язык]\r\n// Открыть форму списка\r\nОткрытьФорму(\"Справочник.Контрагенты.ФормаСписка\");\r\n\r\n// Открыть форму элемента\r\n// Контрагент – реквизит формы, заполняемый пользователем интерактивно\r\nПоказатьЗначение(, Контрагент);\r\n\r\n// Еще один способ открытия формы элемента\r\nПараметрыОткрытия = Новый Структура(\"Ключ\", Контрагент);\r\nОткрытьФорму(\"Справочник.Контрагенты.Форма.ФормаЭлемента\", ПараметрыОткрытия);\r\n\r\n// Открыть форму группы\r\n// ГруппаКонтрагентов – реквизит формы, заполняемый пользователем интерактивно\r\nПоказатьЗначение(, ГруппаКонтрагентов);\r\n\r\n// Еще один способ открытия формы группы\r\nПараметрыОткрытия = Новый Структура(\"Ключ\", ГруппаКонтрагентов);\r\nОткрытьФорму(\"Справочник.Контрагенты.Форма.ФормаГруппы\", ПараметрыОткрытия);\r\n[/язык]\r\n<p>\r\n<strong>Внимание!</strong> Следует понимать, что интерактивная работа (в том числе открытие форм) в 1С возможна только на стороне клиента. В то же время поиск и изменение данных возможны только на стороне сервера.\r\n</p>','2018-03-02 19:12:55'),(13,2,'Использование характеристик в СКД','','','','В конструкторе запросов, когда он вызывается из формы настройки источника данных, для схемы компоновки данных. Есть закладка «Характеристики», использование которой не вполне ясно описано в документации. В этой статье я постараюсь объяснить, как и для чего используются характеристики в СКД.','<p>\r\nВ конструкторе запросов, когда он вызывается из формы настройки источника данных, для схемы компоновки данных. Есть закладка «Характеристики», использование которой не вполне ясно описано в документации. В этой статье я постараюсь объяснить, как и для чего используются характеристики в СКД.\r\n</p>\r\n<p>\r\n<img src=\"/files/article/13/1.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nВ типовых конфигурациях активно используется механизм свойств и значений свойств доступный практически для любых объектов. Примитивно, на справочниках, этот механизм реализовывался еще в конфигурациях 7.7. Сейчас этот механизм реализован с использованием плана видов характеристик и регистра сведений, но идея осталась прежней.\r\n</p>\r\n<p>\r\nКогда я впервые столкнулся с необходимостью использования этого механизма, в схеме СКД, я очень долго мучился, организовывал вложенные запросы, присоединял к основной выборке и ломал голову над тем, как учесть возможность появления новых видов свойств, которых нет на момент разработки отчета. Весь механизм свойств, будучи простым и логичным с точки зрения пользователя, не поддавался никакой нормальной обработке, пока я не разобрался с закладкой «Характеристики».\r\n</p>\r\n<p>\r\nТаблица на закладке очень капризная, либо вы введете всю строку корректно, либо откажетесь от ввода строки совсем, оставить «на потом» не до конца заполненную строку система не даст.\r\n</p>\r\n<p>\r\nИтак, перейдем к конкретике. Первая колонка: <code>Тип</code> — здесь выбираем тип объекта, к которому привяжутся характеристики, например <code>СправочникСсылка.Номенклатура</code>. Это означает, что теперь для всех объектов указанного типа можно будет получить значения свойств.\r\n</p>\r\n<p>\r\nДалее в следующей колонке <code>Источник видов</code> мы должны задать параметры источника видов свойств. Возможны варианты <code>таблица</code> и <code>запрос</code>, зачем нужен вариант <code>запрос</code> расскажу позже, сейчас выберем пункт <code>таблица</code>.\r\n</p>\r\n<p>\r\nВ колонке <code>Виды характеристик</code> мы должны выбрать таблицу информационной базы, в которой хранятся нужные виды характеристик, в нашем примере это будет <code>ПланВидовХарактеристик.СвойстваОбъектов</code>.\r\n</p>\r\n<p>\r\nДалее, значения доступные нам для выбора в колонках <code>Поле ключа</code>, <code>Поле имени</code> и <code>Поле типа значения</code>, непосредственно зависят от полей выбранной нами таблицы. В <code>Поле ключа</code> мы выбираем <code>Ссылка</code>, в <code>Поле имени</code> — <code>Представление</code> (именно его пользователь увидит в качестве имени реквизита), а в <code>Поле типа</code> соответственно <code>ТипЗначения</code>.\r\n</p>\r\n<p>\r\nТеперь перейдем к источнику значений. Источником значений у нас будет регистр сведений <code>ЗначенияСвойствОбъектов</code>, поэтому мы выбираем в колонке <code>Источник значений</code> — <code>таблица</code>, а в колонке <code>Значения характеристик</code> — <code>РегистрСведений.ЗначенияСвойствОбъектов</code>. В колонках <code>Объект</code>, <code>Свойство</code>, <code>Значение</code>, выбираем соответствующие поля регистра <code>Объект</code>, <code>Свойство</code>, <code>Значение</code>.\r\n<p>\r\n<p>\r\n<img src=\"/files/article/13/2.jpg\" alt=\"\" />\r\n</p>\r\n</p>\r\nКазалось бы, на этом все. Заходим в настройки схемы, добавляем группировку по товарам, и добавляем подчиненную ей группировку, допустим по брендам, есть у нас такое свойство. Разворачиваем список реквизитов группировки <code>Номенклатура</code> и … не видим там никаких свойств:\r\n<p>\r\n<p>\r\n<img src=\"/files/article/13/3.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nДело в том, что мы находимся в конфигураторе, откуда нет доступа к данным. Как же сделать нужную настройку? Удобнее всего для этого использовать консоль компоновки данных, ту что на диске ИТС, или ту что входит в подсистему «Инструменты разработчика». Но можно и просто открыть настройку отчета в режиме предприятия.\r\n</p>\r\n<p>\r\nИтак, откроем ту же настройку, но в режиме предприятия:\r\n</p>\r\n<p>\r\n<img src=\"/files/article/13/4.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nКак видите, у нас добавились новые <code>Реквизиты</code>, при этом свойство <code>Бренд</code> внешне не отличается от обычных реквизитов справочника. А свойство <code>Вид товара</code> взято в квадратные скобки, это связано с тем, что представление свойства содержит пробел.\r\n</p>\r\n<p>\r\nОднако, у нас появилось и свойство <code>Вид договора</code> которое привязано к справочнику <code>Договора</code> и никакого отношения не имеет к <code>Номенклатуре</code>. Если не использовать в настройке <code>Вид договор</code> то все будет работать корректно, если же его выбрать, то в результате оно окажется не заполненным, потому что ни у одного элемента номенклатуры это свойство действительно не заполнено. Но как же отфильтровать лишние свойства, чтобы они не путались под ногами?\r\n</p>\r\n<p>\r\nДля этого нам нужно изменить настройку источника видов, в конструкторе запроса, на закладке «Характеристики». Помните, я в начале статьи обещал рассказать, для чего нужен тип источника видов <code>запрос</code>? Сейчас как раз такой случай. Меняем тип источника видов на <code>запрос</code>. В колонке <code>виды характеристик</code> нажимаем кнопочку <code>[…]</code> и открывается новое окно конструктора запросов.\r\n</p>\r\n<p>\r\nВводим туда такой запрос:\r\n</p>\r\n[запрос]\r\nВЫБРАТЬ\r\n  СвойстваОбъектов.Ссылка,\r\n  СвойстваОбъектов.Наименование + \" (свойство)\" КАК Наименование,\r\n  СвойстваОбъектов.ТипЗначения\r\nИЗ\r\n  ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов\r\nГДЕ\r\n  СвойстваОбъектов.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура)\r\n  И (НЕ СвойстваОбъектов.ПометкаУдаления)\r\n  И (НЕ СвойстваОбъектов.Категория)\r\n[/запрос]\r\n<p>\r\nВ колонках <code>Поле ключа</code>, <code>Поле имени</code> и <code>Поле типа значения</code>, выберем соответствующие поля выборки: <code>Ссылка</code>, <code>Наименование</code> и <code>ТипЗначения</code>. Получится так:\r\n</p>\r\n<p>\r\n<img src=\"/files/article/13/5.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nТеперь, когда мы перейдем к настройке отчета, в списке реквизитов <code>Номенклатуры</code> картинка изменится:\r\n</p>\r\n<p>\r\n<img src=\"/files/article/13/6.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nВот теперь у товара только те свойства, которые ему назначены, более того, они теперь заметно отличаются от обычных реквизитов, благодаря приписке (свойство), которую мы добавили к наименованию свойства в запросе.\r\n</p>\r\n<p>\r\nНа этом собственно и все, но многих может смутить невозможность настройки в конфигураторе. На самом деле ничего страшного нет. Достаточно сохранить настройку (или всю схему) в файл, а в конфигураторе восстановить.\r\n</p>\r\n<p>\r\nНепонятные ему реквизиты конфигуратор отобразит красными крестами, как недоступные:\r\n</p>\r\n<p>\r\n<img src=\"/files/article/13/7.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nНо это уже не страшно, потому что отчет с такими настройками можно сохранить в конфигурации и он будет корректно работать при открытии пользователем.\r\n</p>','2018-03-08 15:36:58'),(14,2,'Особенность использования механизма характеристик в СКД','','','','Пример будем приводить на конфигурации «Управление производственным предприятием» версии 1.3. В информационной базе для всех элементов справочника «Организации» добавлены свойства «Основной склад», «Связанный контрагент» и «Страна размещения».','<h2>Что у нас есть?</h2>\r\n<p>\r\nПример будем приводить на конфигурации «Управление производственным предприятием» версии 1.3. В информационной базе для всех элементов справочника «Организации» добавлены свойства «Основной склад», «Связанный контрагент» и «Страна размещения». Нам нужно создать отчет в системе компоновки данных (СКД), в котором мы сможем накладывать отбор по дополнительным характеристиками организаций.\r\n</p>\r\n<p>\r\n<img src=\"/files/article/14/1.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nПри этом мы будем использовать стандартный функционал СКД для работы с характеристиками объектов. Также рассмотрим особенность разработки подобных отчетов, а именно — отсутствие возможности использовать дополнительные характеристики в конструкторе схемы компоновки данных в режиме «Конфигуратор». Последнее не позволяет использовать поля характеристик в настройке выводимых полей в отчете, отборах, группировка в структуре отчета и так далее.\r\n</p>\r\n<h2>Создаем отчет и настраиваем характеристики</h2>\r\n<p>\r\nСоздадим простой отчет. В нем будет один набор данных со следующим запросом:\r\n</p>\r\n[запрос]\r\nВЫБРАТЬ\r\n  Организации.Ссылка КАК Организация,\r\n  Организации.ИНН,\r\n  Организации.КПП\r\nИЗ\r\n  Справочник.Организации КАК Организации\r\n[/запрос]\r\n<p>\r\nСтруктура отчета будет иметь вывод только по детальным записям со всеми полями, выбираемыми в запросе. В конструкторе настройка структуры отчета будет выглядит следующим образом:\r\n</p>\r\n<p>\r\n<img src=\"/files/article/14/2.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nНа скриншоте ниже представлен вывод отчета с текущими настройками.\r\n</p>\r\n<p>\r\n<img src=\"/files/article/14/3.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nОтлично. Теперь перейдем к настройке характеристик, но перед этим напомню в общих чертах работу механизма характеристик в большинстве типовых конфигураций, в том числе и УПП. Для этого используются несколько объектов конфигурации.\r\n</p>\r\n<ul>\r\n  <li>План видов характеристик <code>СвойстваОбъектов</code>\r\n  <li>Регистр сведений <code>ЗначенияСвойствОбъектов</code>\r\n</ul>\r\n<p>\r\nГрафически связь между объектом информационной базы и его характеристиками можно изобразить по такой схеме:\r\n</p>\r\n<p>\r\n<img src=\"/files/article/14/4.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nОпишем схему подробнее. В регистре сведений <code>ЗначенияСвойствОбъектов</code> в измерении <code>Объект</code> содержится ссылка на элемент информационной базы, для которого сохраняется свойство. В нашем примере это ссылка на элемент справочника <code>Организации</code>. Все возможные свойства объекта определяются в плане видов характеристик (ПВХ) <code>СвойстваОбъектов</code>. Значение характеристики, сохраняемое в регистре сведений, зависиот от доступных типов данных для элемента плана видов характеристик, записанного в измерение <code>Свойство</code>. Это описание должно дать лишь общее представление о механизме доп.свойств. На практике он сложнее.\r\n</p>\r\n<p>\r\nТеперь перейдем к настройке характеристик в схеме компоновки данных. Для этого запустим конструктор запроса и перейдем на вкладку «Характеристики». Здесь нужно добавить поле связи объекта информационной базы с таблицами свойств и значений свойств. Ранее мы рассматривали схему связи между объектами конфигурации для хранения доп.свойств/характеристик. В соответствии с этой информацией настройка будет следюущей:\r\n</p>\r\n<p>\r\n<img src=\"/files/article/14/5.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nПосле этого запрос набора данных дополнится инструкциями получения характеристик объектов. \r\n</p>\r\n[запрос]\r\nВЫБРАТЬ\r\n  Организации.Ссылка КАК Организация,\r\n  Организации.ИНН,\r\n  Организации.КПП\r\nИЗ\r\n  Справочник.Организации КАК Организации\r\n// Доп. инструкции для получения характеристик\r\n{ХАРАКТЕРИСТИКИ\r\n  ТИП(Справочник.Организации)\r\n  ВИДЫХАРАКТЕРИСТИК ПланВидовХарактеристик.СвойстваОбъектов\r\n  ПОЛЕКЛЮЧА Ссылка\r\n  ПОЛЕИМЕНИ Наименование\r\n  ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения\r\n  ЗНАЧЕНИЯХАРАКТЕРИСТИК РегистрСведений.ЗначенияСвойствОбъектов\r\n  ПОЛЕОБЪЕКТА Объект\r\n  ПОЛЕВИДА Свойство\r\n  ПОЛЕЗНАЧЕНИЯ Значение}\r\n[/запрос]\r\n<p>\r\nНа этом все. Функционал отчета теперь позволяет выбрать поля дополнительных характеристик в отчете (поля вывода, отборы и т.д.). Но есть одно НО. Использовать эти поля в настройках отчета мы можем только в режиме 1С:Предприятия. В конфигураторе мы не можем увидеть поля характеристик, что логично, ведь характеристики вводятся пользователем и хранятся в информационной базе. \r\n<p>\r\n<p>\r\nНо если есть необходимость, мы можем добавить поля характеристик, например, в отбор перед его открытием. Рассмотрим небольшой пример.\r\n</p>\r\n<h2>Программная работа с характеристиками</h2>\r\n<p>\r\nПри открытии формы отчета выполним следующим программный код:\r\n</p>\r\n[язык]\r\nТекущиеНастройки = КомпоновщикНастроек.Настройки;\r\nКоллекцияОтборов = ТекущиеНастройки.Отбор.Элементы;\r\n\r\n// Добавляем отбор по доп. реквизиту номенклатуры \"Основной склад\" \r\nНовЭл = КоллекцияОтборов.Добавить(Тип(\"ЭлементОтбораКомпоновкиДанных\"));\r\nНовЭл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;\r\nНовЭл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(\"Организация.[Основной склад]\");\r\nНовЭл.Использование = Ложь;\r\n\r\n// Добавляем отбор по доп. реквизиту номенклатуры \"Страна размещения\"\r\nНовЭл = КоллекцияОтборов.Добавить(Тип(\"ЭлементОтбораКомпоновкиДанных\"));\r\nНовЭл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;\r\nНовЭл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(\"Организация.[Страна размещения]\");\r\nНовЭл.Использование = Ложь;\r\n\r\n// Добавляем отбор по доп. реквизиту номенклатуры \"Связанный контрагент\"\r\nНовЭл = КоллекцияОтборов.Добавить(Тип(\"ЭлементОтбораКомпоновкиДанных\"));\r\nНовЭл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;\r\nНовЭл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(\"Организация.[Связанный контрагент]\");\r\nНовЭл.Использование = Ложь;\r\n[/язык]\r\n<p>\r\nТогда если мы посмотрим в отбор отчета в режиме 1С:Предприятие, то увидим следующиую картину:\r\n</p>\r\n<p>\r\n<img src=\"/files/article/14/6.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nТаким образом, мы программно добавили отбор по дополнительным характеристикам справочника </code>Организации</code>, не смотря на то, что в конструкторе СКД эти поля не были доступны. Обратите внимание на синтаксис определения поля компоновки данных.\r\n</p>\r\n[язык]\r\nНовый ПолеКомпоновкиДанных(\"Организация.[Связанный контрагент]\")\r\n[/язык]\r\n<p>\r\nа именно на текст <code>[Связанный контрагент]</code>. Если мы напишем вот так:\r\n</p>\r\n[язык]\r\nНовый ПолеКомпоновкиДанных(\"Организация.СвязанныйКонтрагент\"),\r\n[/язык]\r\n<p>\r\nто при запуске отчета СКД неправильно определит поля компоновки. В настройках поля отбора будут выделены как некорректные:\r\n</p>\r\n<p>\r\n<img src=\"/files/article/14/7.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nДля дополнительных свойст и реквизитов, которые не доступны в конструкторе СКД, при программном обращении необходимо использовать следующий синтаксис:\r\n</p>\r\n[язык]\r\nНовый ПолеКомпоновкиДанных(\".[]\")\r\n[/язык]\r\n<p>\r\nТаким образом, мы можем устанавливать настройки отчета, даже если поля недоступны в конструкторе СКД.\r\n</p>\r\n<h2>Вывод</h2>\r\n<P>\r\nИспользование настройки характеристик в СКД позволяет значительно упростить разработку сложных отчетов. Несмотря на некоторые недостатки в работе, такие как отсутствие возможности настройки отбора по доп. свойствам в конструкторе и т.д., механизм характеристик можно считать значительным шагом в упрощении разработки отчетов в системе 1С:Предприятие.\r\n</p>\r\n<p>\r\nВ статье мы рассмотрели далеко не все возможности характеристик в СКД. За рамками статьи остались такие возможности как: произвольное определение источников данных, как для свойств, так и для значений характеристик, а также отбор по владельцу для всех доступных характеристик в информационной базе и многое другое. Тема большая, есть куда расширять круг своих знания.\r\n</p>','2018-03-08 16:08:44'),(15,15,'Урок 1. Знакомство с регулярными выражениями','','','','Регулярные выражения — инструментальные средства, и подобно всем инструментальным средствам, регулярные выражения предназначены для решения очень конкретных проблем. Чтобы узнать, что такое регулярные выражения и что они делают, лучше всего познакомиться с проблемами, которые решаются с их помощью.','<p>В этом уроке вы узнаете, что такое регулярные выражения и что они могут делать.</p>\r\n\r\n<h2>Назначение регулярных выражений</h2>\r\n\r\n<p>\r\nРегулярные выражения (regular expressions), или сокращенно regex — инструментальные средства, и подобно всем инструментальным средствам, регулярные выражения предназначены для решения очень конкретных проблем. Чтобы узнать, что такое регулярные выражения и что они делают, лучше всего познакомиться с проблемами, которые решаются с их помощью.\r\n</p>\r\n<p>\r\nРассмотрим следующие сценарии.\r\n</p>\r\n<ul>\r\n  <li>Вы ищете файл, содержащий текст <strong>car</strong> (независимо от регистра), но не хотите указать местонахождение текста <strong>car</strong> — в середине, в начале или в конце слова (например, <em>s<strong>car</strong></em>, <em><strong>car</strong>ry</em> и <em>in<strong>car</strong>cerate</em>).</li>\r\n  <li>Вы динамически генерируете Web-страницу (используя сервер приложений) и должны отобразить текст, найденный в базе данных. Текст может содержать URL, и вы хотите, чтобы на сгенерированной странице URL можно было активизировать щелчком (так что вместо того, чтобы генерировать только текст, вы хотите сгенерировать правильный HTML-тег <code>&lt;a href=\"...\"&gt;...&lt;/a&gt;</code>.</li>\r\n  <li>Вы создаете Web-страницу, содержащую форму. Форма запрашивает у пользователя разную информацию, включая и адрес электронной почты. Вы должны проверить, что указанные адреса имеют правильный формат (т.е. что они являются синтаксически правильными (допустимыми)).</li>\r\n  <li>Вы редактируете исходный текст и должны заменить все вхождения слова size на iSize, но замену хотите выполнять только для слова size и не хотите заменять вхождения size там, где они выступают как часть другого слова.</li>\r\n  <li>Вы отображаете список всех файлов в файловой системе компьютера и хотите отфильтровать этот список так, чтобы определить местонахождение только тех файлов, которые содержат текст Application.</li>\r\n  <li>Вы импортируете данные в приложение. Данные разграничены знаками табуляции, и ваше приложение поддерживает файлы формата CSV (одна строка данных в строке текста, значения разделены запятыми, каждое значение можно заключить в кавычки).</li>\r\n  <li>Вы должны найти в файле определенный текст, но только в определенном местоположении (например, в начале строки или в конце предложения).</li>\r\n</ul>\r\n<p>\r\nВсе эти сценарии представляют собой обычные программистские задачи. И все они могут быть решены почти на любом языке, в котором есть условные выражения и операции над строками. Но насколько сложно решить эти задачи? Вам понадобится в цикле перебирать слова или символы по одному, выполнять все типы условных операторов, отслеживать массу флажков, чтобы убедиться, что вы нашли то, что искали, или чтобы быть уверенными, что вы не нашли искомый текст, проверять всевозможные пробельные и специальные символы, и по ходу дела решить еще много подобных задач. И вы должны были бы сделать это все вручную.\r\n</p>\r\n<p>\r\nНо вы можете использовать регулярные выражения. Каждая из предыдущих задач может быть решена с помощью подходящих инструкций, записанных в кратких строках, содержащих текст и специальные инструкции-команды, которые могут выглядеть следующим образом:\r\n</p>\r\n[code]\r\n\\b[Сс][Aa][Rr]\\b\r\n[/code]\r\n\r\n<div class=\"note\">\r\nНе волнуйтесь, если не понимаете смысл предыдущей строки, — все это будет вскоре объясняться.\r\n</div>\r\n\r\n<h2>Как используются регулярные выражения</h2>\r\n\r\n<p>\r\nПросмотрите сценарии еще раз и обратите внимание, что все они относятся к одному из двух типов: либо отыскивается местонахождение информации (поиск текста), либо информация найдена и редактируется (выполняются замены). Фактически это и есть то, для чего используются регулярные выражения: поиск и замена. Каждое регулярное выражение либо ищет текст (выполняет операцию поиска) или ищет и заменяет текст (выполняет операцию замены).\r\n</p>\r\n\r\n<h2>Поиск с помощью регулярных выражений</h2>\r\n\r\n<p>\r\nРегулярные выражения используются для поиска тек¬ста, причем разыскиваемый текст может иметь разный вид, как при поиске саг в описанном ранее сценарии. Для начинающих отмечу, что задача может состоять в том, чтобы найти <code>car</code> или <code>CAR</code> или <code>CaR</code>; это совсем простая часть (многие средства поиска способны выполнять поиск независимо от регистра). Более сложная часть состоит в том, чтобы гарантировать, что найденное вхождение <code>car</code> не входит в <code>scar</code>, <code>carry</code> или <code>incarcerate</code>. Некоторые более сложные редакторы имеют опции <code>Match Only Whole Word</code> (Найти только слово целиком), но во многих эта опция отсутствует, и вы не можете делать такие замены в редактируемом документе. Решает проблему поиска использование регулярного выражения, а не просто текста <code>car</code>.\r\n</p>\r\n\r\n<div class=\"note\">\r\nХотите знать, как решается эта задача? Вы фактически уже видели ее решение. Это пример инструкции, приведенный выше:  <code>\\b[Cc][Aa][Rr]\\b</code>.\r\n</div>\r\n\r\n<p>\r\nСтоит заметить, что проверка на равенство (т.е. решение задачи  вроде: <em>соответствует  ли  указанный  пользователем адрес электронной почты данному регулярному выражению?</em>) и есть операция поиска. Выполняется операция поиска во всей введенной пользователем строке (а не операция поиска подстроки).\r\n</p>\r\n\r\n<h2>Замены с помощью регулярных выражений</h2>\r\n\r\n<p>\r\nПоиск с помощью регулярных выражений — очень мощное и очень полезное средство, причем совсем не трудно научиться применять его. Поэтому во многих уроках приводятся примеры выполнения операций поиска. Однако реальная польза регулярных выражений состоит именно в операциях замены, типа тех, что встречались в более раннем сценарии, в котором текстовый URL заменялся настоящим URL, активизирующимся щелчком мыши. Для начинающих отмечу, что для этого требуется определить местонахождение URL в тексте (возможно, для этого нужно выполнить поиск строк, которые начинаются с <code>http://</code> или <code>https://</code> и заканчиваются точкой, запятой или пробельным символом). Затем потребуется заменить найденный URL с двумя вхождениями найденной строки встроенным HTML-кодом так, чтобы \r\n</p>\r\n[code]\r\nhttp://www.forta.com/\r\n[/code]\r\n<p>заменить на</p>\r\n[code]\r\n<a href=\"http://www.forta.com/\">http://www.forta.com/</a>\r\n[/code]\r\n\r\n<p>\r\nОпция <code>Search and Replace</code> (Найти и заменить) в большинстве приложений не может выполнять операции замены такого типа, но решение этой задачи — невероятно простое регулярное выражение.\r\n</p>\r\n\r\n<h2>Так что же такое регулярное выражение?</h2>\r\n\r\n<p>\r\nТеперь, когда вы знаете, для чего используются регулярные выражения, дадим их определение. Попросту говоря, регулярные выражения — это строки, которые используются для поиска и обработки текста. Регулярные выражения записываются на языке регулярных выражений, т.е. на специализированном языке, разработанном и предназначенном для решения задач: поиска и замены текста. Подобно любому языку, язык регулярных выражений имеет специальный синтаксис и команды, которые вам предстоит освоить, и именно их вы будете изучать по данной книге.\r\n</p>\r\n<p>\r\nЯзык регулярных выражений — не полноценный язык программирования. Это обычно даже не программа или утилита, которую можно установить и использовать. Чаще всего регулярные выражения представляют собой миния-зыки, которые встроены в другие языки или программы. Хорошая новость состоит в том, что практически любой современный приличный язык или инструмент поддерживает регулярные выражения. Плохая новость в том, что сам по себе язык регулярных выражений не собирается искать что-нибудь подобно другим применяемым вами языкам или инструментам. Язык регулярных выражений — язык в себе, а совсем не интуитивно понятный язык для выполнения каких-либо очевидных операций.\r\n</p>\r\n\r\n<div class=\"note\">\r\nРегулярные выражения возникли в научной работе по математике в 1950-х годах. Спустя годы принципы и идеи, заложенные в этой работе, пробились в мир Unix в язык Perl и в утилиты типа <code>grep</code>. Много лет регулярные выражения (в предварительно подготовленных сценариях) использовались исключительно в семействе Unix, однако теперь регулярные выражения поддерживаются в самых разных формах почти на каждой вычислительной платформе.\r\n</div>\r\n<p>\r\nПриведем примеры правильных (допустимых) регулярных выражений (их смысл вы вскоре поймете):\r\n</p>\r\n<ul>\r\n  <li><code>Ben</code></li>\r\n  <li><code>.</code></li>\r\n  <li><code>www\\.forta\\.com</code></li>\r\n  <li><code>[a-zA-Z0-9_.]*</code></li>\r\n  <li><code>\\r\\n\\r\\n</code></li>\r\n  <li><code>\\d{3,3}-\\d{3,3}-\\d{4,4}</code></li>\r\n</ul>\r\n<p>\r\nВажно уяснить, что синтаксис — самая простая часть в освоении регулярных выражений. Что действительно трудно, так это научиться применять этот синтаксис и разбивать задачи на подзадачи, решения которых находятся с помощью регулярных выражений. Этому нельзя научиться, просто читая книгу; подобно любому языку, вы овладеете языком регулярных выражений, выполняя разнообразные упражнения, а мастерство придет с практикой.\r\n</p>\r\n\r\n<h2>Использование регулярных выражений</h2>\r\n\r\n<p>\r\nКак уже отмечалось, для регулярных выражений нет никакой особой программы; это не приложение, которое вы выполняете, и не программное обеспечение, которое вы можете купить или загрузить. Совсем наоборот, язык регулярных выражений реализован в большом количестве программных изделий, языков, утилит и сред разработки.\r\n</p>\r\n<p>\r\nТо, как используются регулярные выражения и какие функциональные возможности регулярных выражений экспортируются, зависит от используемого вами приложения. Иногда в приложениях для применения регулярных выражений используются меню и диалоговые окна, а в некоторых языках программирования имеются функции или классы объектов, которые экспортируют функциональные возможности регулярных выражений.\r\n</p>\r\n<p>\r\nКроме того, не все реализации регулярных выражений одинаковы. Часто есть очень тонкие (а иногда и не очень тонкие) различия в синтаксисе и возможностях регулярных выражений.\r\n</p>\r\n<p>\r\nЧтобы вам было легче освоить материал, вы можете загрузить приложение Regular Expression Tester (испытатель регулярных выражений) с Web-страницы этой книги (<a href=\"http://www.forta.com/books/0672325667/\">http://www.forta.com/books/0672325667/</a>). Данное приложение имеет версии для использования в популярных серверах приложений и языках, а также прямо в JavaScript.\r\n</p>\r\n\r\n<h2>Перед началом</h2>\r\n\r\n<p>\r\nПрежде чем приступить к применению регулярных выражений, примите во внимание следующее.\r\n</p>\r\n<ul>\r\n  <li>При использовании регулярных выражений почти всегда есть несколько решений любой задачи. Некоторые решения более просты, некоторые более быстрые, некоторые более удобны для переноса, а некоторые более удобны для обобщения.  Редко есть один единственно правильный способ записи регулярного выражения (подразумевается, конечно, что при всех формах записи поставленная задача решается правильно).</li>\r\n  <li>Как уже указывалось, существуют различия в реализации регулярных выражений. Насколько возможно, примеры и информация в уроках этой книги применимы ко всем главным реализациям,  причем различия и несовместимости отмечаются особо.</li>\r\n  <li>Как и для любого языка, ключ к освоению регулярных выражений — практика, практика и еще раз практика.</li>\r\n</ul>\r\n\r\n<h2>Резюме</h2>\r\n\r\n<p>\r\nРегулярные выражения — одно из самых мощных инструментальных средств обработки текстов. Язык регулярных выражений применяется для записи регулярных выражений (фактически, записанную строку и называют регулярным выражением), причем регулярные выражения используются для выполнения операций замены и поиска.\r\n</p>','2018-03-20 15:58:14'),(16,15,'Урок 2. Поиск отдельных символов','','','','Ben — регулярное выражение. Поскольку это просто текст, он ничем не напоминает регулярное выражение, но он им таки является! Регулярные выражения могут содержать простой текст (и могут даже состоять только из простого текста). По общему признанию, это полностью вырожденная обработка регулярных выражений, но это самый простой пример для начала.','<p>\r\nВ этом уроке вы научитесь выполнять простые операции поиска одного или нескольких символов.\r\n</p>\r\n\r\n<h2>Поиск заданного текста</h2>\r\n\r\n<p>\r\n<code>Ben</code> — регулярное выражение. Поскольку это просто текст, он ничем не напоминает регулярное выражение, но он им таки является! Регулярные выражения могут содержать простой текст (и могут даже состоять только из простого текста). По общему признанию, это полностью вырожденная обработка регулярных выражений, но это самый простой пример для начала.\r\n</p>\r\n<p>\r\nТак, здесь идет:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nHello, my name is Ben. Please visit \r\nmy website at http://www.forta.com/.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\nBen\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nHello, my name is [border]Ben[/border]. Please visit \r\nmy website at http://www.forta.com/.\r\n[/code]\r\n\r\n<p>\r\nИспользуемое здесь регулярное выражение — буквальный текст, и оно находит вхождения <code>Ben</code> в первоначальный текст.\r\n</p>\r\n<p> \r\nДавайте рассмотрим  другой пример,  используя тот же текст для поиска, но другое регулярное выражение:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nHello, my name is Ben. Please visit \r\nmy website at http://www.forta.coin/.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\nmy\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nHello, [border]my[/border] name is Ben. Please visit \r\n[border]my[/border] website at http://www.forta.com/.\r\n[/code]\r\n\r\n<p>\r\n<code>my</code> — также статический текст, но заметьте, что были найдены два вхождения <code>my</code>.\r\n</p>\r\n\r\n<h2>Сколько вхождений?</h2>\r\n\r\n<p>\r\nПо умолчанию большинство механизмов обработки регулярных выражений возвращает только первое вхождение. В предыдущем примере обычно было бы найдено только первое вхождение <code>my</code>, но не второе.\r\n</p>\r\n<p>\r\nИтак, почему было найдено два вхождения? В большинстве реализаций регулярных выражений предусмотрен механизм получения списка всех вхождений (обычно возвращаемых в массиве или в некотором другом специальном формате). В JavaScript, например, используя дополнительный флажок <code>g</code> (глобальный), можно получить массив, содержащий все вхождения.\r\n</p>\r\n\r\n<h2>Указание зависимости от регистра</h2>\r\n\r\n<p>\r\nРегулярные выражения чувствительны к регистру, так что <code>Ben</code> не будет соответствовать <code>ben</code>. Однако большинство реализаций регулярных выражений позволяет находить вхождения независимо от регистра. В JavaScript, например, можно указать дополнительный флажок <code>i</code>, чтобы при операциях поиска не учитывался регистр.\r\n</p>\r\n\r\n<h2>Поиск любого символа</h2>\r\n\r\n<p>\r\nПока с помощью регулярных выражений мы находили статический (т.е. заранее заданный) текст. Теперь мы будем пытаться найти неизвестные символы.\r\n</p>\r\n<p>\r\nЧтобы идентифицировать то, что разыскивается, в регулярных выражениях используются специальные символы или наборы символов. Символ <code>.</code> (точка) соответствует любому символу.\r\n</p>\r\n\r\n<div class=\"note\">\r\nВ операции поиска файлов в DOS эквивалентом регулярного выражения <code>.</code> является <code>?</code>. В SQL эквивалентом регулярного выражения <code>.</code> является <code>_</code> (символ подчеркивания).\r\n</div>\r\n\r\n<p>\r\nПоэтому операция поиска <code>c.t</code> найдет <code>cat</code> и <code>cot</code> (и другие бессмысленные слова). \r\n</p>\r\n<p>\r\nВот пример:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nsales1.xls \r\norders3.xls \r\nsales2.xls \r\nsales3.xls \r\napac1.xls \r\neurope2.xls \r\nna1.xls\r\nna2.xls \r\nsa1.xls\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\nsales.\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n[border]sales1[/border].xls \r\norders3.xls\r\n[border]sales2[/border].xls\r\n[border]sales3[/border].xls\r\napac1.xls \r\neurope2.xls \r\nna1.xls \r\nna2.xls \r\nsa1.xls\r\n[/code]\r\n\r\n<p>\r\nЗдесь используется регулярное выражение <code>sales.</code> для того, чтобы найти все имена файлов, начинающихся с <code>sales</code>, за которым следует еще один символ. Три из этих девяти файлов соответствуют шаблону.\r\n</p>\r\n\r\n<div class=\"note\">\r\nЧасто термины шаблон, образец, модель обозначают регулярное выражение.\r\n</div>\r\n\r\n<div class=\"note\">\r\nЗаметьте, что регулярные выражения сопоставляют шаблоны строкам. Эти шаблоны не всегда будут совпадать со всей строкой, а только с теми символами, которые соответствуют шаблону, — даже если они являются только частью строки. В приведенном примере регулярное выражение не соответствовало имени файла; а соответствовало только части имени файла. Это различие важно помнить при передаче на обработку результатов, найденных с помощью регулярного выражения, некоторому другому коду или приложению.\r\n</div>\r\n<p>\r\nСимвол <code>.</code> соответствует любому символу — символу алфавита, цифре и даже самой <code>.</code>:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nsales.xls\r\nsales1.xls \r\norders3.xls \r\nsales2.xls \r\nsales3.xls \r\napac1.xls \r\neurope2.xls \r\nna1.xls\r\nna2.xls \r\nsa1.xls\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\nsales.\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n[border]sales.[/border]xls\r\n[border]sales1[/border].xls \r\norders3.xls\r\n[border]sales2[/border].xls\r\n[border]sales3[/border].xls\r\napac1.xls \r\neurope2.xls \r\nna1.xls \r\nna2.xls \r\nsa1.xls\r\n[/code]\r\n\r\n<p> \r\nЭтот пример содержит один дополнительный файл, <code>sales.xls</code>. Файл был найден с помощью шаблона <code>sales.</code>, поскольку <code>.</code> находит любой символ.\r\n</p>\r\n<p>\r\nВ шаблоне можно использовать несколько символов <code>.</code> либо вместе (один за другим: <code>..</code> будет соответствовать любым двум символам друг рядом с другом), либо в различных местах шаблона.\r\n</p>\r\n<p>\r\nРассмотрим другой пример, в котором используется тот же самый текст. На сей раз вы должны найти все файлы для Северной Америки (<code>na</code>) и Южной Америки (<code>sa</code>) независимо от того, какая цифра следует после этих сокращений:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nsales1.xls \r\norders3.xls \r\nsales2.xls \r\nsales3.xls \r\napac1.xls \r\neurope2.xls \r\nna1.xls\r\nna2.xls \r\nsa1.xls\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n.a.\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n[border]sal[/border]esl.xls \r\norders3.xls \r\n[border]sal[/border]es2.xls \r\n[border]sal[/border]es3.xls \r\na[border]pac[/border]1.xls \r\neurope2.xls \r\n[border]na1[/border].xls\r\n[border]na2[/border].xls \r\n[border]sa1[/border].xls\r\n[/code]\r\n\r\n<p>\r\nРегулярное выражение <code>.а.</code> действительно находит <code>na1</code>, <code>na2</code> и <code>sa1</code>, но оно также нашло четыре других вхождения, которые не нужны. Почему? Потому что шаблон соответствует любым трем символам, средний из которых <code>а</code>. \r\n</p>\r\n<p>\r\nНеобходим шаблон, соответствующий <code>.а.</code>, за которым следует точка. Вот еще одна попытка:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nsalesl.xls \r\norders3.xls \r\nsales2.xls \r\nsales3.xls \r\napac1.xls \r\neurope2.xls \r\nnal.xls\r\nna2.xls \r\nsal.xls\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n.a..\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n[border]sale[/border]sl.xls \r\norders3.xls\r\n[border]sale[/border]s2.xls\r\n[border]sale[/border]s3.xls\r\na[border]pac1[/border].xls \r\neurope2.xls \r\n[border]nal.[/border]xls \r\n[border]na2.[/border]xls \r\n[border]sa1.[/border]xls\r\n[/code]\r\n\r\n<p>\r\nШаблон <code>.a..</code> работает нисколько не лучше, чем <code>.а.</code>; добавленная после <code>а.</code> точка соответствует любому следующему символу. Как же тогда найти точку, если специальный символ \"точка\" соответствует любому символу?\r\n</p>\r\n\r\n<h2>Поиск специальных символов</h2>\r\n\r\n<p>\r\nТочка <code>.</code> имеет специальное значение в регулярных выражениях. Если в шаблоне нужна точка <code>.</code>, должен быть способ указать в регулярном выражении, что имеется в виду фактический символ <code>.</code>, а не символ со специальным значением в регулярном выражении. Чтобы сделать это, предварите точку символом <code>\\</code> (наклонная черта влево). Наклонная черта влево <code>\\</code> — метасимвол (причудливый термин, обозначающий символ со специальным значением, в отличие от обычного символа). Поэтому точка <code>.</code> соответствует любому символу, а наклонная черта влево с точкой <code>\\.</code> соответствует только самому символу точка <code>.</code>.\r\n</p>\r\n<p>\r\nДавайте снова попробуем выполнить предыдущий пример, на сей раз предваряя точку <code>.</code> наклонной чертой <code>\\.</code>:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nsalesl.xls \r\norders3.xls \r\nsales2.xls \r\nsales3.xls \r\napac1.xls \r\neurope2.xls \r\nnal.xls\r\nna2.xls \r\nsal.xls\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n.a.\\.xls\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nsalesl.xls \r\norders3.xls\r\nsales2.xls\r\nsales3.xls\r\napac1.xls \r\neurope2.xls \r\n[border]nal.xls[/border]\r\n[border]na2.xls[/border]\r\n[border]sa1.xls[/border]\r\n[/code]\r\n\r\n<p>\r\nС помощью шаблона <code>.а.\\.xls</code> мы достигли цели. Первый символ <code>.</code> соответствует <code>n</code> (в первых двух вхождениях) или <code>s</code> (в третьем). Второй символ <code>.</code> соответствует <code>1</code> (в первом и третьем вхождениях) или <code>2</code> (во втором). Цепочка <code>\\.</code> соответствует точке <code>.</code>, отделяющей имя файла от расширения, ну a <code>xls</code> соответствует самому себе. (Фактически, соответствие работало бы и без <code>xls</code>; добавление в конец <code>xls</code> предотвратило нахождение имени файла вроде <code>sa3.doc</code>.)\r\n</p>\r\n<p>\r\nВ регулярных выражениях <code>\\</code> всегда используется для того, чтобы отметить начало блока из одного или нескольких символов, которые имеют специальное значение. В предыдущем примере мы использовали <code>\\.</code>, а в следующих главах вы увидите еще много примеров использования <code>\\</code>.\r\n</p>\r\n<p>\r\nО том, как применять специальные символы, вы узнаете из урока 4, \"Использование метасимволов\".\r\n</p>\r\n\r\n<div class=\"note\">\r\nЕсли нужно найти наклонную черту влево <code>\\</code> (т.е. выполнить поиск <code>\\</code>), используйте <code>\\\\</code> (две наклонных черты влево).\r\n</div>\r\n\r\n<div class=\"note\">\r\nКак правило, точке соответствует любой символ. Но это не всегда так: в большинстве реализаций регулярных выражений точке <code>.</code> соответствует любой символ, кроме символа новой строки.\r\n</div>\r\n\r\n<h2>Резюме</h2>\r\n\r\n<p>\r\nРегулярные выражения, называемые также шаблонами, являются строками, составленными из символов. Эти символы могут быть литералами (фактический текст) или символами (специальные символы со специальными значениями), и в этом уроке вы узнали, как найти один с используя либо текст-литерал, либо метасимвол. Точка <code>.</code> ответствует любому символу. Наклонная черта влево <code>\\</code> пользуется для защиты символов и в качестве начального символа в последовательности специальных символов.\r\n</p>','2018-03-20 16:17:34'),(17,15,'Урок 3. Соответствие набору символов','','','','В этом уроке вы научитесь работать с наборами символов. В отличие от точки, которая соответствует любому отдельному символу (это вы узнали в предыдущем уроке), наборы дают возможность установить соответствие с определенными символами и символьными диапазонами.','<p>\r\nВ этом уроке вы научитесь работать с наборами символов. В отличие от точки <code>.</code>, которая соответствует любому отдельному символу (это вы узнали в предыдущем уроке), наборы дают возможность установить соответствие с определенными символами и символьными диапазонами.\r\n</p>\r\n\r\n<h2>Соответствие одному из нескольких символов</h2>\r\n\r\n<p>\r\nКак вы узнали из предыдущего урока, точке <code>.</code> соответствует один символ (как и любому литеральному символу). В заключительном примере урока 2, \"Поиск отдельных символов\", шаблон <code>.a</code> использовался для нахождения и <code>na</code>, и <code>sa</code>, причем точке <code>.</code> соответствовал и символ <code>n</code>, и символ <code>s</code>. Но что, если бы там был еще и файл <code>ca1.xls</code> с коммерческими данными по Канаде, а вам нужно найти только <code>na</code> и <code>sa</code>? Точке <code>.</code> соответствовал бы также и символ <code>c</code>, и потому имя этого файла также было бы найдено.\r\n</p>\r\n<p>\r\nЧтобы найти только <code>n</code> или <code>s</code>, а не любой символ, нужно установить соответствие только с одним из этих двух символов. В регулярных выражениях набор символов определяется с помощью метасимволов <code>[</code> и <code>]</code>. Символы <code>[</code> и <code>]</code> определяют набор символов, состоящий из всех символов между ними. Любой член набора может соответствовать символу, с которым он совпадает. Вот пересмотренная версия заключительного примера предыдущего урока:\r\n</p>\r\n\r\n[code]\r\nsales1.xls \r\norders3.xls \r\nsales2.xls \r\nsales3.xls \r\napac1.xls \r\neurope2.xls \r\nna1.xls \r\nna2.xls \r\nsa1.xls \r\nca1.xls\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n[ns]a.\\.xls\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nsales1.xls \r\norders3.xls \r\nsales2.xls \r\nsales3.xls \r\napac1.xls \r\neurope2.xls \r\n[border]na1.xls[/border]\r\n[border]na2.xls[/border]\r\n[border]sa1.xls[/border]\r\nca1.xls\r\n[/code]\r\n\r\n<p>\r\nИспользуемое здесь регулярное выражение начинается с <code>[ns]</code>; это соответствует либо <code>n</code>, либо <code>s</code> (но не <code>c</code> или любому другому символу). Символы <code>[</code> и <code>]</code> не соответствуют никаким символам — они определяют набор. Литерал <code>a</code> соответствует <code>a</code>, точке <code>.</code> соответствует любой символ, наклонной черте с точкой <code>\\.</code> соответствует <code>.</code>, а литералу <code>xls</code> соответствует <code>xls</code>. Если использовать этот шаблон, будут найдены только три нужных имени файла.\r\n</p>\r\n\r\n<div class=\"note\">\r\nНа самом деле шаблон <code>[ns]a.\\.xls</code> также не совсем правильный для данной задачи. Если бы существовал файл <code>usa1.xls</code>, этот шаблон нашел бы и его. При решении этой проблемы нужно учитывать еще и позиции символов, что будет сделано в уроке 6, \"Соответствие позиций\".\r\n</div>\r\n\r\n<div class=\"note\">\r\nОтсюда следует, что проверка регулярных выражений может оказаться делом довольно сложным. Подтвердить, что шаблон найдет то, что вам нужно, довольно просто. Гораздо сложнее убедиться, что вы не найдете то, что вы не хотите.\r\n</div>\r\n\r\n<p>\r\nНаборы символов часто используются для выполнения операций поиска (или определения некоторых частей), не зависящих от регистра. Например:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nThe phrase \"regular  expression\" is often  \r\nabbreviated as RegEx or regex.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n[Rr]eg[Ee]x\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nThe phrase \"regular  expression\" is often  \r\nabbreviated as [border]RegEx[/border] or [border]regex[/border].\r\n[/code]\r\n\r\n<p>\r\nИспользуемый здесь шаблон содержит два набора символов: <code>[Rr]</code>, которому соответствуют символы <code>R</code> и <code>r</code>, и <code>[Ee]</code>, которому соответствуют символы <code>E</code> и <code>e</code>. Именно поэтому мы нашли как <code>RegEx</code>, так и <code>regex</code>. Однако цепочка <code>REGEX</code> не была бы найдена.\r\n</p>\r\n\r\n<div class=\"note\">\r\nЕсли при сопоставлении с шаблоном регистр не учитывается, эта методика не нужна. Такой тип шаблона используется только при выполнении поиска с учетом регистра, если определенные части ищутся без учета регистра.\r\n</div>\r\n\r\n<h2>Использование диапазона набора символов</h2>\r\n\r\n<p>\r\nОбратимся к примеру со списком файлов. С последним использованным шаблоном, <code>[ns]a.\\.xls</code>, связана еще одна проблема. Что было бы, если бы существовал файл <code>sam.xls</code>? Он тоже был бы найден, потому что точке <code>.</code> соответствуют все символы, а не только цифры.\r\n</p>\r\n<p>\r\nНаборы символов могут решить эту проблему следующим образом:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nsales1.xls \r\norders3.xls \r\nsales2.xls \r\nsales1.xls \r\napac1.xls \r\neurope2.xls \r\nsam.xls \r\nna1.xls \r\nna2.xls \r\nsa1.xls \r\nca1.xls\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n[ns]a[0123456789]\\.xls\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nsales1.xls \r\norders3.xls \r\nsales2.xls \r\nsales1.xls \r\napac1.xls \r\neurope2.xls \r\nsam.xls \r\n[border]na1.xls[/border]\r\n[border]na2.xls[/border]\r\n[border]sa1.xls[/border]\r\nca1.xls\r\n[/code]\r\n\r\n<p>\r\nВ этом примере шаблон был изменен так, чтобы первый символ был либо <code>n</code>, либо <code>s</code>, второй символ — только <code>а</code>, третьим символом могла быть любая цифра (указанная как <code>[0123456789]</code>). Обратите внимание, что файл <code>sam.xls</code> не был бы найден, потому что <code>m</code> не соответствует списку допустимых символов (10 цифр).\r\n</p>\r\n<p>\r\nПри работе с регулярными выражениями часто приходится определять диапазоны символов (от <code>0</code> до <code>9</code>, от <code>А</code> до <code>Z</code>, и т.д.). Чтобы упростить работу с символьными диапазонами, в регулярных выражениях для определения диапазонов используется специальный метасимвол: <code>-</code> (дефис).\r\n</p>\r\n<p>\r\nВот тот же самый пример, но на сей раз используется диапазон:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nsales1.xls \r\norders3.xls \r\nsales2.xls \r\nsales1.xls \r\napac1.xls \r\neurope2.xls \r\nsam.xls \r\nna1.xls \r\nna2.xls \r\nsa1.xls \r\nca1.xls\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n[ns]a[0-9]\\.xls\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nsales1.xls \r\norders3.xls \r\nsales2.xls \r\nsales1.xls \r\napac1.xls \r\neurope2.xls \r\nsam.xls \r\n[border]na1.xls[/border]\r\n[border]na2.xls[/border]\r\n[border]sa1.xls[/border]\r\nca1.xls\r\n[/code]\r\n\r\n<p>\r\nШаблон <code>[0-9]</code> функционально эквивалентен <code>[0123456789]</code>, так что результат идентичен результату предыдущего примера.\r\n</p>\r\n<p>\r\nДиапазоны могут состоять не только из цифр. Вот примеры правильных (допустимых) диапазонов:\r\n</p>\r\n\r\n<ul>\r\n    <li>\r\n    <code>A-Z</code> соответствует всем символам верхнего регистра от <code>А</code> до <code>Z</code>.\r\n    </li>\r\n    <li>\r\n    <code>a-z</code> соответствует всем символам нижнего регистра от <code>а</code> до <code>z</code>.\r\n    </li>\r\n    <li>\r\n    <code>A-F</code> соответствует только символам верхнего регистра от <code>А</code> до <code>F</code>.\r\n    </li>\r\n    <li>\r\n    <code>A-z</code>  соответствует  всем  символам,  ASCII-коды  которых находятся в диапазоне от ASCII-кода <code>А</code> до ASCII-кода <code>z</code>. (Вероятно,  вы никогда не должны использовать  этот шаблон,   потому что  он включает также символы вроде <code>[</code> и <code>^</code>, которые в таблице ASCII расположены между <code>Z</code> и <code>а</code>).\r\n    </li>\r\n</ul>\r\n\r\n<p>\r\nЛюбые два символа ASCII могут быть определены как начало и конец диапазона. Однако обычно диапазоны составляются из некоторых (или всех) цифр и некоторых (или всех) алфавитных символов.\r\n</p>\r\n\r\n<div class=\"note\">\r\nПри использовании диапазонов следите, чтобы конец диапазона не был меньше, чем начало диапазона (диапазон типа <code>[3-1]</code> не допустим). Такая ошибка часто делает неработоспособным весь шаблон.\r\n</div>\r\n\r\n<div class=\"note\">\r\nДефис (<code>-</code>) рассматривается как специальный метасимвол только когда он используется между <code>[</code> и <code>]</code>. Вне набора <code>-</code> является литералом и будет соответствовать только <code>-</code>. Поэтому вне набора дефису <code>-</code> не обязан предшествовать никакой специальный знак.\r\n</div>\r\n\r\n<p>\r\nНесколько диапазонов можно объединить в один набор. Например, следующий шаблон соответствует любому алфавитно-цифровому символу на верхнем или нижнем регистре, но не соответствует ничему, что не является ни цифрой, ни алфавитным символом:\r\n</p>\r\n\r\n[code]\r\n[A-Za-z0-9]\r\n[/code]\r\n\r\n<p>\r\nЭтот шаблон — сокращение для\r\n</p>\r\n\r\n[code]\r\n[ABCDEFGHIJKLMNOPQRSTUVWXYZabcde\r\nfghijklmnopqrstuvwxyz0123456789]\r\n[/code]\r\n\r\n<p>\r\nКак видите, диапазоны намного сокращают запись регулярных выражений.\r\n</p>\r\n<p>\r\nНиже приведен еще один пример, на сей раз находятся RGB-значения (цвета, указанные в шестнадцатеричнои нотации, представляющей количество красного, зеленого и синего в создаваемом цвете). В Web-страницах RGB-значения определяются как <code>#000000</code> (черный), <code>#FFFFFF</code> (белый), <code>#FF0000</code> (красный), и т.д. RGB-значения могут быть определены на верхнем или нижнем регистре, так что значение <code>#FF00ff</code> (сиреневый) также является допустимым. Вот пример:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\n<BODY BGCOLOR=\"#336633\" TEXT=\"#FFFFFF\" \r\n      MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\"\r\n      TOPMARGIN=\"0\" LEFTMARGIN=\"0\">\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n#[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n<BODY BGCOLOR=\"[border]#336633[/border]\" TEXT=\"[border]#FFFFFF[/border]\" \r\n      MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\"\r\n      TOPMARGIN=\"0\" LEFTMARGIN=\"0\">\r\n[/code]\r\n\r\n<p>\r\nИспользуемый здесь шаблон содержит символ <code>#</code> как буквальный текст, а затем набор символов <code>[0-9A-Fa-f]</code>, повторенный шесть раз. Это соответствует символу <code>#</code>, за которым следует шесть символов, каждый из которых должен быть цифрой или буквой от <code>А</code> до <code>F</code> (на верхнем или нижнем регистре).\r\n</p>\r\n\r\n<h2>Соответствие с чем угодно, кроме...</h2>\r\n\r\n<p>\r\nНаборы символов обычно используются для того, чтобы определить список символов, любой из которых может соответствовать одному символу. Но иногда проще указать список символов, ни с одним из которых не должен совпадать данный символ. Другими словами, нужно указать соответствие с чем угодно, кроме того, что указано в списке шаблона.\r\n</p>\r\n<p>\r\nВместо того чтобы перечислять каждый символ, можно, используя метасимвол <code>^</code>, инвертировать наборы символов. Вот пример:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nsales1.xls \r\norders3.xls \r\nsales2.xls \r\nsales1.xls \r\napac1.xls \r\neurope2.xls \r\nsam.xls \r\nna1.xls \r\nna2.xls \r\nsa1.xls \r\nca1.xls\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n[ns]a[^0-9]\\.xls\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nsales1.xls \r\norders3.xls \r\nsales2.xls \r\nsales1.xls \r\napac1.xls \r\neurope2.xls \r\n[border]sam.xls[/border]\r\nna1.xls\r\nna2.xls \r\nsa1.xls\r\nca1.xls\r\n[/code]\r\n\r\n<p>\r\nИспользуемый в этом примере шаблон — полная противоположность ранее использованного шаблона. Диапазон <code>[0-9]</code> соответствует всем цифрам (и только цифрам). Выражение <code>[^0-9]</code> соответствует чему угодно, кроме цифр указанного диапазона. Также <code>[ns]а[^0-9]\\.xls</code> соответствует <code>sam.xls</code>, но не <code>na1.xls</code>, <code>na2.xls</code> или <code>sa1.xls</code>.\r\n</p>\r\n\r\n<div class=\"note\">\r\nМетасимвол <code>^</code> отрицает все символы или диапазоны  в наборе, а не только символ или диапазон, которому он предшествует.\r\n</div>\r\n \r\n<h3>Резюме</h3>\r\n\r\n<p>\r\nМетасимволы <code>[</code> и <code>]</code> используются для того, чтобы определить наборы символов, любой из которых может соответствовать данному (операция <code>ИЛИ</code> в отличие от <code>И</code>). Наборы символов могут быть перечислены явно или определены как диапазоны с помощью метасимвола <code>-</code>. Используя <code>^</code>, наборы символов можно инвертировать, инвертированному шаблону соответствует что угодно, кроме указанных в нем символов.\r\n</p>','2018-03-28 09:26:30'),(18,15,'Урок 4. Использование метасимволов','','','','Метасимволы были введены в уроке 2, «Поиск отдельных символов». В этом уроке вы узнаете о дополнительных метасимволах, используемых для указания соответствия с определенными символами или типами символов. Перед глубоким погружением в мир метасимволов важно понять назначение символа \\.','<p>\r\nМетасимволы были введены в уроке 2, «Поиск отдельных символов». В этом уроке вы узнаете о дополнительных метасимволах, используемых для указания соответствия с определенными символами или типами символов.\r\n</p>\r\n\r\n<h2>Символ \\: новые встречи со старым знакомым</h2>\r\n<p>\r\nПеред глубоким погружением в мир метасимволов важно понять назначение символа <code>\\</code>.\r\n</p>\r\n<p>\r\nМетасимволы — символы, которые имеют специальное значение в регулярных выражениях. Точка . является метасимволом, который соответствует любому отдельному символу (как объяснялось в уроке 2, «Поиск отдельных символов»). Точно так же левая скобка (<code>[</code>) — метасимвол, который отмечает начало набора (см. урок 3, «Соответствие набору символов»).\r\n</p>\r\n<p>\r\nПоскольку метасимволы имеют специальное значение в регулярных выражениях, эти символы не могут использоваться для нахождения соответствующих им литералов. Например, вы не можете использовать <code>[</code>, чтобы найти <code>[</code>; точно так же вы не найдете точку <code>.</code> с помощью точки <code>.</code>. Рассмотрим следующий пример. Регулярное выражение используется, чтобы в программе на JavaScript попытаться найти выражение с массивом, содержащее <code>[</code> и <code>]</code>:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nvar myArray = new Array();\r\n...\r\nif (myArray[0] == 0) {\r\n...\r\n}\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\nmyArray[0]\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nvar myArray = new Array();\r\n...\r\nif (myArray[0] == 0) {\r\n...\r\n}\r\n[/code]\r\n\r\n<p>\r\nВ этом примере блок текста — фрагмент кода на JavaScript. Регулярное выражение — то, что вы, вероятно, использовали бы в текстовом редакторе. Подразумевается, что оно должно было бы соответствовать буквальному тексту <code>myArray[0]</code>, но это не так. Почему не так? В регулярном выражении метасимволы <code>[</code> и <code>]</code> используются для того, чтобы определить набор символов (но не сами символы <code>[</code> и <code>]</code>), Поэтому шаблону <code>myArray[0]</code> соответствует текст <code>myArray</code>, за которым следует один из членов набора, а <code>0</code> — единственный член. Так что <code>myArray[0]</code> соответствует только <code>myArray0</code>.\r\n</p>\r\n<p>\r\nКак объяснялось в уроке 2, «Поиск отдельных символов», метасимволы можно защитить наклонной чертой влево. Поэтому <code>\\.</code> соответствует <code>.</code>, а <code>\\[</code> соответствует <code>[</code>. Каждый метасимвол можно защитить предшествующей ему наклонной чертой влево; защищенный символ соответствует самому себе, а не специальному значению метасимвола. Чтобы на самом деле найти <code>[</code> и <code>]</code>, эти символы нужно защитить. Далее снова рассмотрим тот же самый пример, на сей раз с защищенными метасимволами:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nvar myArray = new Array();\r\n...\r\nif (myArray[0] == 0) {\r\n...\r\n}\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\nmyArray\\[0\\]\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nvar myArray = new Array();\r\n...\r\nif ([border]myArray[0][/border] == 0) {\r\n...\r\n}\r\n[/code]\r\n\r\n<p>\r\nПоиск работал правильно.  <code>\\[</code> соответствует <code>[</code>, a <code>\\]</code> соответствует <code>]</code>; так что <code>myArray\\[0\\]</code> соответствует <code>myArray[0]</code>.\r\n</p>\r\n<p>\r\nЧестно говоря, использовать в этом примере регулярное выражение было не особенно необходимо — проще было обойтись поиском буквального текста. Но вообразите, что нужно было бы найти не только <code>myArray[0]</code>, но и <code>myArray[1]</code>, <code>myArray[2]</code> и т.д. Тогда был бы смысл использовать именно регулярное выражение. Нужно было бы защитить <code>[</code> и <code>]</code> и определить символы, которые могли бы встретиться между квадратными скобками. Если бы нужно было найти элементы массива с индексами от <code>0</code> до <code>9</code>, можно было бы использовать следующее регулярное выражение:\r\n</p>\r\n\r\n[code]\r\nmyArray\\[[0-9]\\]\r\n[/code]\r\n\r\n<div class=\"note\">\r\nЛюбой метасимвол, а не только упомянутые здесь,  можно защитить предшествующей ему наклонной  чертой влево.\r\n</div>\r\n\r\n<div class=\"note\">\r\nМетасимволы, которые являются частью пары (например, <code>[</code> или <code>]</code>), нужно защитить, если они не используются как метасимволы, в противном случае синтаксический анализатор регулярных выражений может сгенерировать сообщение об ошибке.\r\n</div>\r\n\r\n<p>\r\nНаклонная черта влево <code>\\</code> используется для защиты метасимволов. Это означает, что сама по себе наклонная черта влево <code>\\</code> рассматривается как метасимвол; она используется для защиты других символов. Как отмечено в уроке 2, «Поиск отдельных символов», чтобы закодировать наклонную черту <code>\\</code>, нужно саму ее защитить, т.е. указать ее как <code>\\\\</code>.\r\n</p>\r\n<p>\r\nРассмотрим следующий простой пример. Текст — путь к файлу, в котором используются наклонные черты влево (так  принято в  DOS и Windows).  Теперь  вообразите,  что этот путь нужно использовать в системе Linux или Unix, и потому вы должны определить местонахождение всех наклонных черт влево для того, чтобы заменить их на наклонные черты вправо:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\n\\home\\ben\\sales\\\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n\\\\\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n[border]\\[/border]home[border]\\[/border]ben[border]\\[/border]sales[border]\\[/border]\r\n[/code]\r\n\r\n<p>\r\nВыражение <code>\\\\</code> соответствует <code>\\</code>, и потому найдены четыре совпадения. Если бы вы определили <code>\\</code> как регулярное выражение, вполне вероятно, что было бы сгенерировано сообщение об ошибке. (Скорее всего, это произошло бы потому, что синтаксический анализатор регулярных выражений законно предположил бы, что выражение не закончено; ведь, в конце концов, в регулярном выражении после <code>\\</code> всегда следует другой символ.)\r\n</p>\r\n\r\n<h2>Поиск пробельных символов</h2>\r\n\r\n<p>\r\nВообще говоря, метасимволы относятся к двум категориям: те, которые используются для поиска текста (они соответствуют искомому тексту; к этому типу относится, например, точка <code>.</code>), и те, которые используются как часть синтаксиса регулярного выражения (к этому типу относятся, например, <code>[</code> и <code>]</code>). Метасимволов обоих типов много, и проще всего начать с метасимволов, соответствующих пробельным символам.\r\n</p>\r\n<p>\r\nКогда вы с помощью регулярного выражения выполняете поиск, часто необходимо найти совпадение с непечатаемыми пробельными символами, входящими в текст. Например, иногда нужно найти все символы табуляции, или все концы строк. Поскольку непосредственно ввести такой символ в регулярное выражение было бы весьма непросто, имеются специальные метасимволы, перечисленные в таблице 4.1.\r\n</p>\r\n\r\n<p>\r\n<strong>Таблица 4.1.</strong> Метасимволы, обозначающие пробельные символы\r\n</p>\r\n\r\n<table class=\"data-table\">\r\n<tr>\r\n  <th>Метасимвол</th>\r\n  <th>Описание метасимвола</th>\r\n</tr>\r\n<tr>\r\n  <td><code>[\\b]</code></td>\r\n  <td>Возврат на один символ (Backspace)</td>\r\n</tr>\r\n<tr>\r\n  <td><code>\\f</code></td>\r\n  <td>Перевод страницы (Form feed)</td>\r\n</tr>\r\n<tr>\r\n  <td><code>\\n</code></td>\r\n  <td>Перевод строки (Line feed)</td>\r\n</tr>	\r\n<tr>\r\n  <td><code>\\r</code></td>\r\n  <td>Перевод каретки (Carriage return, CR)</td>\r\n</tr>	\r\n<tr>\r\n  <td><code>\\t</code></td>\r\n  <td>Табуляция (Tab)</td>\r\n</tr>	\r\n<tr>\r\n  <td><code>\\v</code></td>\r\n  <td>Вертикальная табуляция (Vertical tab)</td>\r\n</tr>\r\n</table>\r\n\r\n<p>	\r\nСледующий блок текста содержит ряд записей в формате с разделителями-запятыми (часто этот формат называется CSV). Перед обработкой записей из данных нужно удалить все пустые строки. Вот пример:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\n\"101\",\"Ben\",\"Forta\" \r\n\"102\",\"Jim\",\"James\"\r\n\r\n\"103\",\"Roberta\",\"Robertson\"\r\n\"104\",\"Bob\",\"Bobson\"\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n\\r\\n\\r\\n\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n\"101\",\"Ben\",\"Forta\" \r\n\"102\",\"Jim\",\"James\"[border] [/border]\r\n[border] [/border]\r\n\"103\",\"Roberta\",\"Robertson\"\r\n\"104\",\"Bob\",\"Bobson\"\r\n[/code]\r\n\r\n<p>\r\nВыражение <code>\\r\\n</code> соответствует комбинации перевода строки с переводом каретки, используемой (в Windows) как маркер конца строки. Поэтому <code>\\r\\n\\r\\n</code> соответствует двум маркерам конца строки, т.е. пустой строке между двумя записями.\r\n</p>\r\n\r\n<div class=\"note\">\r\nВ Windows в качестве маркера конца строки используется <code>\\r\\n</code>, однако в системе Unix (и Linux) применяется только символ перевода строки. В этих системах нужно будет использовать только <code>\\n</code> (без <code>\\r</code>). Идеальное регулярное выражение, вероятно, должно учитывать оба случая и потому должно содержать необязательный символ <code>\\r</code> и требуемый <code>\\n</code>. Поэтому в следующем уроке этот пример придется рассмотреть повторно.\r\n</div>\r\n\r\n<p>\r\nЧаще всего используются метасимволы <code>\\r</code> и <code>\\n</code>, а также <code>\\t</code> (табуляция). Другие пробельные символы обычно применяются редко.\r\n</p>\r\n\r\n<div class=\"note\">\r\nВы только что познакомились с двумя разновидностями метасимволов. Точка <code>.</code> и открывающая квадратная скобка <code>[</code> — метасимволы, если они не защищены. Символы <code>f</code> и <code>n</code>, например, являются метасимволами только тогда, когда они защищены. Если они не защищены, то они — буквальные символы, которые соответствуют только самим себе.\r\n</div>\r\n\r\n<h2>Поиск символов определенных типов</h2>\r\n\r\n<p>\r\nК настоящему времени вы знаете, как найти конкретный символ или любой символ (используя точку <code>.</code>), один символ из набора (используя для определения набора <code>[</code> и <code>]</code>), и как отрицать соответствие (используя <code>^</code>). Наборы символов (соответствие одному символу из набора) — самая употребительная форма соответствия, и вместо обычно используемых наборов могут использоваться специальные метасимволы. Говорят, что эти метасимволы соответствуют классам символов. Теоретически метасимволы для обозначения классов не являются необходимыми (ведь всегда можно перечислить символы нужного класса или использовать диапазоны), но на практике они невероятно полезны.\r\n</p>\r\n\r\n<div class=\"note\">\r\nПеречисленные ниже классы являются основными, поддерживаемыми почти во всех реализациях регулярных выражений.\r\n</div>\r\n\r\n<h3>Поиск цифр (и нецифровых символов)</h3>\r\n\r\n<p>\r\nКак вы уже знаете из урока 3, «Соответствие набору символов», <code>[0-9]</code> — сокращение для <code>[0123456789]</code>; оно используется для поиска любой цифры. Чтобы найти что-нибудь отличное от цифры, этот набор может быть инвертирован: <code>[^0-9]</code>. В табл. 4.2 перечислены сокращения для класса цифр и класса нецифровых символов.\r\n</p>\r\n\r\n<p><strong>Таблица 4.2.</strong> Метасимволы цифр</p>\r\n\r\n<table class=\"data-table\">\r\n<tr>\r\n  <th>Метасимвол</th>\r\n  <th>Описание метасимвола</th>\r\n</tr>\r\n<tr>\r\n  <td><code>\\d</code></td>\r\n  <td>Любая цифра (digit) (то же самое, что и <code>[0-9]</code>)</td>\r\n</tr>\r\n<tr>\r\n  <td><code>\\D</code></td>\r\n  <td>Любой нецифровой символ (то же самое, что и <code>[^0-9]</code>)</td>\r\n</tr>\r\n</table>\r\n\r\n<p>\r\nЧтобы продемонстрировать использование этих метасим волов, давайте повторно рассмотрим предыдущий пример:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nvar myArray = new Array();\r\n...\r\nif (myArray[0] == 0) {\r\n...\r\n}\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\nmyArray\\[\\d\\]\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nvar myArray = new Array();\r\n...\r\nif ([border]myArray[0][/border] == 0) {\r\n...\r\n}\r\n[/code]\r\n\r\n<p>\r\nВыражение <code>\\[</code> соответствует  <code>[</code>, <code>\\d</code> соответствует любой от дельной цифре, а <code>\\]</code>  соответствует <code>]</code>, так что <code>myArray\\[\\d\\]</code> соответствует <code>myArray[0]</code>. <code>myArray\\[\\d\\]</code> — сокращение для <code>myArray\\[\\[0-9]\\]</code>, которое в свою очередь является сокращением для <code>myArray\\[\\[0123456789]\\]</code>. Это регулярное выражение также найдет <code>myArray[1]</code>, <code>myArray[2]</code>, и т.д. (но не найдет <code>myArray[10]</code>).\r\n</p>\r\n\r\n<div class=\"note\">\r\nПочти всегда есть несколько способов определения любого регулярного выражения. Выбирайте тот синтаксис, который вам наиболее удобен.\r\n</div>\r\n\r\n<div class=\"note\">\r\nСинтаксис регулярных выражений чувствителен к регистру. Метасимвол <code>\\d</code> соответствует цифрам, a <code>\\D</code> — полная противоположность <code>\\d</code>. To же самое истинно для метасимволов других классов.<br/> \r\nЭто справедливо даже при выполнении поиска без учета регистра: когда текст ищется без учета регистра, все равно учитывается регистр специальных символов (например <code>\\d</code>).\r\n</div>\r\n\r\n<h3>Поиск алфавитно-цифровых символов (и символов, не относящихся к алфавитно-цифровым)</h4>\r\n\r\n<p>\r\nЕсть еще один часто используемый набор — все алфавитно-цифровые символы, т.е. символы от <code>А</code> до <code>z</code> (<code>А</code> на верхнем регистре и <code>z</code> на нижнем регистре), цифры, символ подчеркивания (часто используемый в именах файлов и папок, именах переменных в приложениях, именах объектов баз данных и в других случаях). В табл. 4.3 перечислены сокращения для класса алфавитно-цифровых символов и символов, не относящихся к алфавитно-цифровым.\r\n</p>\r\n<p>\r\nСледующий пример — выборка из базы данных, содержащей записи с американскими почтовыми индексами и канадскими почтовыми кодами:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\n11213 \r\nА1С2ЕЗ \r\n48075 \r\n48237\r\nM1B4F2\r\n90046\r\nН1Н2Н2\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n\\w\\d\\w\\d\\w\\d\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n11213 \r\n[border]А1С2Е3[/border] \r\n48075 \r\n48237\r\n[border]M1B4F2[/border]\r\n90046\r\n[border]Н1Н2Н2[/border]\r\n[/code]\r\n\r\n<p>\r\nЧтобы отыскать только канадские почтовые коды, шаблон содержит комбинацию метасимволов <code>\\w</code> и <code>\\d</code>.\r\n</p>\r\n\r\n<p><strong>Таблица 4.3.</strong> Метасимволы для алфавитно-цифровых символов</p>\r\n\r\n<table class=\"data-table\">\r\n<tr>\r\n  <th>Метасимвол</th>\r\n  <th>Описание метасимвола</th>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>\\w</code></td>\r\n  <td>Любой алфавитно-цифровой символ на верхнем или нижнем регистре и символ подчеркивания (то же самое, что и <code>[a-zA-Z0-9_]</code>)</td>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>\\W</code></td>\r\n  <td>Любой символ, отличный от символа подчеркивания и не относящийся к алфавитно-цифровым (то же самое, что и <code>[^a-zA-Z0-9_]</code>)</td>\r\n</tr>\r\n</table>\r\n\r\n<p>	\r\nВ этом примере шаблон работал правильно. Но является ли он правильным? Подумайте об этом. Почему не были найдены американские почтовые индексы? Только ли потому, что они составлены исключительно из цифр, или есть еще некоторая другая причина?\r\n</p>\r\n<p>\r\nЯ не собираюсь давать вам ответ на этот вопрос, потому что, — ну, в общем, шаблон работал правильно. Ключ к решению этого вопроса состоит в том, что правильно работающее регулярное выражение редко можно однозначно считать правильным или неправильным. Чаще всего степень строгости сопоставления с шаблоном должна соответствовать сложности шаблона.\r\n</p>\r\n\r\n<h3>Поиск пробельных символов и символов, не относящихся к ним</h3>\r\n\r\n<p>\r\nНаконец, рассмотрим класс пробельных символов. Вы уже знаете метасимволы для определенных пробельных символов. В табл. 4.4 перечислены сокращения для класса всех пробельных символов.\r\n</p>\r\n\r\n<p><strong>Таблица 4.4.</strong> Метасимволы для класса всех пробельных символов</p>\r\n\r\n<table class=\"data-table\">\r\n<tr>\r\n  <th>Метасимвол</th>\r\n  <th>Описание метасимвола</th>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>\\s</code></td>\r\n  <td>Любой пробельный символ (то же самое, что и <code>[\\f\\n\\r\\t\\v]</code>)</td>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>\\S</code></td>\r\n  <td>Любой непробельный символ (то же самое, что и <code>[^\\f\\n\\r\\t\\v]</code>)</td>\r\n</tr>\r\n</table>\r\n \r\n<div class=\"note\">	\r\nОбратите внимание, что метасимвол возврата на один символ, <code>[\\b]</code>, не включен в <code>\\s</code> и не исключается применением <code>\\S</code>.\r\n</div>\r\n\r\n<h3>Указание шестнадцатеричных и восьмеричных значений</h3>\r\n\r\n<p>\r\nХотя определять символ его восьмеричным или шестнадцатеричным значением не рекомендуется, стоит отметить, что это в принципе возможно.\r\n</p>\r\n\r\n<h4>Указание шестнадцатеричных значений</h4>\r\n<p>\r\nЧтобы указать шестнадцатеричное (т.е. по основанию <code>16</code>) значение, перед ним нужно написать <code>\\х</code>. Поэтому <code>\\х0А</code> (символ с ASCII-кодом <code>10</code>, символ перевода строки) функционально эквивалентен <code>\\n</code>.\r\n</p>\r\n\r\n<h4>Указание восьмеричных значений</h4>\r\n<p>\r\nЧтобы указать восьмеричное (т.е. по основанию <code>8</code>) двух- или трехзначное значение, перед ним нужно написать <code>\\0</code>. Поэтому <code>\\011</code> (символ с ASCII-кодом <code>9</code>, символ табуляции) функционально эквивалентен <code>\\t</code>.\r\n</p>\r\n\r\n<div class=\"note\">\r\nВо многих реализациях регулярных выражений допускается также спецификация управляющих символов с помощью <code>\\c</code>. Например, <code>\\cZ</code> соответствует <code>Ctrl-Z</code>. На практике этот синтаксис используется очень редко.\r\n</div>\r\n\r\n<h2>Использование символьных классов POSIX</h2>\r\n\r\n<p>\r\nУрок по метасимволам и сокращениям для различных наборов символов не был бы полным без упоминания о символьных классах POSIX (табл. 4.5). Они — еще одна форма сокращения, которое поддерживается многими (но не всеми) реализациями регулярных выражений.\r\n</p>\r\n\r\n<div class=\"note\">\r\nJavaScript не поддерживает символьные классы POSIX в регулярных выражениях.\r\n</div>\r\n\r\n<p><strong>Таблица 4.5.</strong> Символьные классы POSIX</p>\r\n\r\n<table class=\"data-table\">\r\n<tr>\r\n  <th>Класс</th>\r\n  <th>Описание класса</th>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>[:alnum:]</code></td>\r\n  <td>Любой символ или цифра (то же самое, что и <code>[a-zA-Z0-9]</code>)</td>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>[:alpha:]</code></td>\r\n  <td>Любой символ (то же самое, что и <code>[a-zA-Z]</code>)</td>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>[:blank:]</code></td>\r\n  <td>Пробел или табуляция (то же самое, что и <code>[\\t&nbsp;]</code>)</td>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>[:cntrl:]</code></td>\r\n  <td>Управляющие символы ASCII (ASCII-коды от <code>0</code> до <code>31</code> и <code>127</code>)</td>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>[:digit:]</code></td>\r\n  <td>Любая цифра (то же самое, что и <code>[0-9]</code>)</td>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>[:graph:]</code></td>\r\n  <td>То же самое, что и <code>[:print:]</code>, но пробел исключен</td>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>[:lower:]</code></td>\r\n  <td>Любой символ нижнего регистра (то же самое, что и <code>[a-z]</code>)</td>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>[:print:]</code></td>\r\n  <td>Любой печатаемый символ</td>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>[:punct:]</code></td>\r\n  <td>Любой символ, который не входит ни в <code>[:alnum:]</code>, ни в <code>[:cntrl:]</code></td>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>[:space:]</code></td>\r\n  <td>Любой пробельный символ, включая пробел (то же самое, что и <code>[\\f\\n\\r\\t\\v&nbsp;]</code>)</td>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>[:upper:]</code></td>\r\n  <td>Любая прописная буква (то же самое, что и <code>[А-Z]</code>)</td>\r\n</tr>\r\n<tr valign=\"top\">\r\n  <td><code>[:xdigit:]</code></td>\r\n  <td>Любая шестнадцатеричная цифра (то же самое, что и  <code>[a-fA-F0-9]</code>)</td>\r\n</tr>\r\n</table>\r\n\r\n<p>\r\nСинтаксис POSIX весьма отличается от синтаксиса ранее изученных метасимволов. Чтобы продемонстрировать использование классов POSIX, повторно рассмотрим пример из предыдущего урока. В примере используем регулярное выражение, чтобы найти RGB-значения в блоке HTML-кода:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\n<BODY BGCOLOR=\"#336633\" TEXT=\"#FFFFFF\" \r\n      MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\"\r\n      TOPMARGIN=\"0\" LEFTMARGIN=\"0\">\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n#[[:xdigit:]][[:xdigit:]][[:xdigit:]][[:xdigit:]][[:xdigit:]][[:xdigit:]]\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n<BODY BGCOLOR=\"[border]#336633[/border]\" TEXT=\"[border]#FFFFFF[/border]\" \r\n      MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\"\r\n      TOPMARGIN=\"0\" LEFTMARGIN=\"0\">\r\n[/code]\r\n\r\n<p>\r\nВ шаблоне, использованном в предыдущем уроке, набор символов <code>[0-9A-Fa-f]</code> повторялся шесть раз.  Здесь каждый набор <code>[0-9A-Fa-f]</code> был заменен на <code>[[:xdigit:]]</code>. Результат тот же самый.\r\n</p>\r\n\r\n<div class=\"note\">\r\nОбратите внимание, что регулярное выражение, используемое в этом примере, начинается с <code>[[</code> и заканчивается <code>]]</code> (два набора скобок). Это важно и обязательно при использовании классов POSIX. Классы POSIX заключаются в «скобки» <code>[:</code> и <code>:]</code>; мы использовали выражение POSIX <code>[:xdigit:]</code> (а не <code>:xdigit:</code>). Внешние скобки <code>[</code> и <code>]</code> определяют набор; а внутренние скобки <code>[</code> и <code>]</code> сами являются частью имени класса POSIX.\r\n</div>\r\n\r\n<div class=\"note\">\r\nВсе 12 классов POSIX, перечисленные здесь, поддерживаются в любой реализации, которая поддерживает POSIX. Однако могут быть тонкие отклонения от предыдущих описаний.\r\n</div>\r\n\r\n<h2>Резюме</h2>\r\n\r\n<p>\r\nОпираясь на основные сведения о соответствии символов и наборов, приведенные в уроках 2, «Поиск отдельных символов», и 3, «Соответствие набору символов», в этом уроке мы ввели метасимволы, которые соответствуют определенным символам (таким как табуляция или перевод строки), наборам либо классам символов (таким как цифры или алфавитно-цифровые символы). Эти обозначения метасимволов и классов POSIX могут использоваться для упрощения шаблонов, построенных по правилам языка регулярных выражений.\r\n</p>','2018-03-29 12:08:12'),(19,15,'Урок 5. Повторение совпадений','','','','В предыдущих уроках вы узнали, как найти совпадение с конкретными символами, используя разнообразные мета символы и специальные наборы-классы. В этом уроке вы научитесь находить совпадения с несколькими повторениями шаблона, представляющего собой символ и набор символов.','<p>\r\nВ предыдущих уроках вы узнали, как найти совпадение с конкретными символами, используя разнообразные мета символы и специальные наборы-классы. В этом уроке вы научитесь находить совпадения с несколькими повторе ниями шаблона, представляющего собой символ и набор символов.\r\n</p>\r\n\r\n<h2>Сколько совпадений?</h2>\r\n\r\n<p>\r\nВы изучили все основные способы сопоставления с шаблоном (т.е. с регулярным выражением), но во всех примерах чувствовалось одно очень серьезное ограничение. Изученными средствами было бы очень сложно записать регулярное выражение, соответствующее адресу электронной почты. Вот основной формат адреса электронной почты:\r\n</p>\r\n\r\n[code]\r\ntext@text.text\r\n[/code]\r\n\r\n<p>\r\nИспользуя метасимволы, изученные в предыдущем уроке, можно создать следующее регулярное выражение:\r\n</p>\r\n\r\n[code]\r\n\\w@\\w\\.\\w\r\n[/code]\r\n\r\n<p>\r\nМетасимвол <code>\\w</code> соответствует всем алфавитно-цифровым символам (плюс символ подчеркивания, который является допустимым в адресе электронной почты). В отличие от точки <code>.</code> символ <code>@</code> защищать не нужно.\r\n</p>\r\n<p>\r\nЭто — совершенно правильное регулярное выражение, хотя и довольно бесполезное. Оно соответствует адресу электронной почты вроде <code>a@b.c</code> (который, хотя и является синтаксически правильным, очевидно, не может быть правильным (допустимым) адресом на практике). Проблема в том, что <code>\\w</code> соответствует одному отдельному символу, а вы не можете заранее знать, сколько символов предшествует <code>@</code>. Приведенные   ниже адреса электронной почты являются правильными (допустимыми), но они все имеют разное число символов перед <code>@</code>:\r\n</p>\r\n\r\n[code]\r\nb@forta.com \r\nben@forta.com \r\nbforta@forta.com\r\n[/code]\r\n\r\n<p>\r\nНужен способ установить соответствие с несколькими символами, и это делается с помощью одного из нескольких специальных метасимволов.\r\n</p>\r\n\r\n<h3>Соответствие с одним или несколькими символами</h3>\r\n\r\n<p>\r\nЧтобы установить соответствие символа (или набора) шаблона с одним или несколькими символами, просто добавьте в конец шаблона символ <code>+</code>. Символ <code>+</code> устанавливает соответствие с одним или несколькими символами (по крайней мере с одним символом; с нулем символов он соответствие не устанавливает). Принимая во внимание, что <code>a</code> соответствует <code>a</code>, выражение <code>a+</code> соответствует одному или нескольким вхождениям </code>a</code>. Точно так же, учитывая, что диапазон <code>[0-9]</code> соответствует любой цифре, <code>[0-9]+</code> соответствует последовательности, состоящей из одной или нескольких цифр.\r\n</p>\r\n\r\n<div class=\"note\">\r\nКогда <code>+</code> означает повторение набора, <code>+</code> должен быть помещен вне набора. Поэтому выражение <code>[0-9]+</code> является правильным и ему может соответствовать непустая последовательность цифр, тогда как выражение <code>[0-9+]</code>, хотя и является синтаксически правильным, имеет совсем другое назначение. На самом деле <code>[0-9+]</code> — правильное (допустимое) регулярное выражение, но ему не будет соответствовать последовательность длиной более одной цифры. Это выражение определяет набор от <code>0</code> до <code>9</code> и символ <code>+</code>; поэтому ему будут соответствовать любая единственная цифра или знак \"плюс\". Хотя это выражение синтаксически правильно, означает оно совсем не то, что <code>[0-9]+</code>.\r\n</div>\r\n \r\n<p>\r\nДавайте повторно рассмотрим пример с адресами электронной почты, на сей раз используя <code>+</code>, чтобы установить соответствие с одним или несколькими символами:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nSend personal email to ben@forta.com. For questions about \r\na book use support@forta.com. Feel free to send unsolicited \r\nemail to spam@forta.com (wouldn\'t it be nice if it were \r\nthat simple, huh?).\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n\\w+@\\w+\\.\\w+\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nSend personal email to [border]ben@forta.com[/border]. For questions about \r\na book use [border]support@forta.com[/border]. Feel free to send unsolicited \r\nemail to [border]spam@forta.com[/border] (wouldn\'t it be nice if it were \r\nthat simple, huh?).\r\n[/code]\r\n\r\n<p>\r\nШаблон в точности соответствует всем трем адресам. Регулярное выражение с помощью <code>\\w+</code> сначала находит один или несколько алфавитно-цифровых символов. Затем устанавливается соответствие с <code>@</code>, после чего снова используется <code>\\w+</code>, чтобы установить соответствие с одним или несколькими символами, следующими за <code>@</code>. Затем устанавливается соответствие с точкой <code>.</code> (используется защищенная точка <code>\\.</code>) и еще один шаблон <code>\\w+</code>, чтобы установить соответствие с концом адреса.\r\n</p>\r\n\r\n<div class=\"note\">\r\n<code>+</code> — метасимвол. Чтобы найти <code>+</code>, его надо защитить, т.е. задать как <code>\\+</code>.\r\n</div>\r\n\r\n<p>\r\nПлюс <code>+</code> может также использоваться для того, чтобы установить соответствие с одним или несколькими наборами символов. Чтобы продемонстрировать это, в следующем примере применяется то же самое регулярное выражение, но текст немного отличается:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nSend personal email to ben@forta.com or ben.forta@forta.com.   \r\nFor questions about a book use support@forta.com.  If your \r\nmessage is urgent try ben@urgent.forta.com. Feel free to   \r\nsend unsolicited email to spam@forta.com (wouldn\'t it be nice  \r\nif it were that simple, huh?).\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n\\w+@\\w+\\.\\w+\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nSend personal email to [border]ben@forta.com[/border] or ben.[border]forta@forta.com[/border].   \r\nFor questions about a book use [border]support@forta.com[/border].  If your \r\nmessage is urgent try [border]ben@urgent.forta[/border].com. Feel free to   \r\nsend unsolicited email to [border]spam@forta.com[/border] (wouldn\'t it be nice  \r\nif it were that simple, huh?).\r\n[/code]\r\n\r\n<p>\r\nРегулярное выражение соответствовало пяти адресам, но два из них охвачены не полностью. Почему так получилось? Потому что в <code>\\w+@\\w+\\.\\w+</code> ничего не предусмотрено для символов <code>.</code> перед <code>@</code>, и потому это выражение допускает только одну точку <code>.</code>, отделяющую две строки после <code>@</code>. Хотя <code>ben.forta@forta.com</code> — совершенно законный адрес электронной почты, регулярное выражение найдет только <code>forta</code> (вместо <code>ben.forta</code>), потому что <code>\\w</code> соответствует алфавитно-цифровым символам, но не точке <code>.</code> в середине строки текста.\r\n</p>\r\n<p>\r\nЗдесь нужно установить соответствие с <code>\\w</code> или точкой <code>.</code>, т.е. с набором <code>[\\w\\.]</code>. Ниже приведен тот же пример с пересмотренным шаблоном:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nSend personal email to ben@forta.com or ben.forta@forta.com.   \r\nFor questions about a book use support@forta.com.  If your \r\nmessage is urgent try ben@urgent.forta.com. Feel free to   \r\nsend unsolicited email to spam@forta.com (wouldn\'t it be nice  \r\nif it were that simple, huh?).\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n[\\w.]+@[\\w.]+\\.\\w+\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nSend personal email to [border]ben@forta.com[/border] or [border]ben.forta@forta.com[/border].   \r\nFor questions about a book use [border]support@forta.com[/border].  If your \r\nmessage is urgent try [border]ben@urgent.forta.com[/border]. Feel free to   \r\nsend unsolicited email to [border]spam@forta.com[/border] (wouldn\'t it be nice  \r\nif it were that simple, huh?).\r\n[/code]\r\n\r\n<p>\r\nЭтим, казалось бы, мы достигли цели. Выражение <code>[\\w.]+</code> соответствует одному или нескольким вхождениям любого алфавитно-цифрового символа, символа подчеркивания и точки <code>.</code>, и потому вхождение <code>ben.forta</code> будет найдено. Выражение <code>[\\w.]+</code> также используется для строки после <code>@</code>, так что будут установлены соответствия с именами (названиями) более глубоких доменов (или с именем (названием) главного компьютера).\r\n</p>\r\n<p>\r\nОбратите внимание, что для заключительного соответствия использовалось выражение <code>\\w+</code>, а не <code>[\\w.]+</code>. Попытайтесь объяснить, почему? Используйте <code>[\\w.]</code> в качестве заключительного шаблона и выясните, что случится со вторым, третьим и четвертым совпадением.\r\n</p>\r\n\r\n<div class=\"note\">\r\nОбратите внимание, что точка <code>.</code> в наборе не защищена, и все равно она каким-то образом соответствует <code>.</code> (она была обработана как буквальный символ, а не как метасимвол). Вообще, метасимволы типа <code>.</code> и <code>+</code> рассматриваются как буквальный текст, когда используются в наборах, и поэтому защищать их не нужно. Однако если защитить их, это не причинит вреда. Выражение <code>[\\w.]</code> функционально эквивалентно <code>[\\w\\.]</code>.\r\n</div>\r\n\r\n<h3>Поиск нуля или большего количества символов</h3>\r\n\r\n<p>\r\nПлюс <code>+</code> соответствует вхождению одного или нескольких символов. С отсутствующими символами (т.е. с нулевым количеством символов) соответствие установлено не будет, потому что должен быть по крайней мере один символ. Иными словами, в случае использования метасимвола <code>+</code> для установления соответствия необходимо не менее одного символа. Но что же делать, если нужно установить соответствие с необязательными символами, т.е. с такими символами, которые могут отсутствовать вообще (иными словами, с символами, количество которых может равняться нулю)?\r\n</p>\r\n<p>\r\nЧтобы сделать это, используйте метасимвол <code>*</code>. Метасимвол <code>*</code> используется в точности так, как <code>+</code>; он записывается сразу после символа или набора и будет соответствовать нулю или большему количеству вхождений символа или шаблона. Поэтому шаблон <code style=\"background-color:#EEEEEE\">В.* Forta</code> соответствует <code style=\"background-color:#EEEEEE\">B Forta</code>, <code style=\"background-color:#EEEEEE\">B. Forta</code>, <code style=\"background-color:#EEEEEE\">Ben Forta</code> и, конечно же, и другим комбинациям.\r\n</p>\r\n<p>\r\nЧтобы продемонстрировать использование <code>+</code>, рассмотрим измененную версию примера с адресами электронной почты:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nHello .ben@forta.com is my email address.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n[\\w.]+@[\\w.]+\\.\\w+\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nHello [border].ben@forta.com[/border] is my email address.\r\n[/code]\r\n\r\n<p>\r\nВспомните, что <code>[\\w.]+</code> соответствует одному или нескольким вхождениям алфавитно-цифровых символов и точки <code>.</code>, и потому вхождение <code>.ben</code> было найдено. Однако в предыдущем тексте, очевидно, есть опечатка (лишняя точка в середине текста), но сейчас это к делу не относится. Гораздо большая проблема состоит в том, что хотя точка <code>.</code> является допустимым символом в адресе электронной почты, с нее не может начинаться адрес электронной почты, т.е. она не является допустимым символом в начале адреса электронной почты.\r\n</p>\r\n<p>\r\nДругими словами, необходимо установить соответствие с алфавитно-цифровым текстом, который может содержать необязательные дополнительные символы. Вот пример:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nHello .ben@forta.com is my email address.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n\\w+[\\w.]*@[\\w.]+\\.\\w+\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nHello .[border]ben@forta.com[/border] is my email address.\r\n[/code]\r\n\r\n<p>\r\nЭтот шаблон выглядит довольно сложным (но фактически он таким не является). Давайте рассмотрим его вместе. Выражение <code>\\w+</code> соответствует любому алфавитно-цифровому символу, но не точке <code>.</code> (иными словами, он соответствует всем допустимым символам, с которых может начинаться адрес электронной почты). После начальных допустимых символов действительно может следовать точка <code>.</code> и дополнительные символы, хотя фактически они могут и не присутствовать. Выражение <code>[\\w.]*</code> соответствует нулю или большему количеству вхождений точки <code>.</code> или алфавитно-цифровых символов, а именно это нам и было необходимо.\r\n</p>\r\n\r\n<div class=\"note\">\r\nПомните о том, что метасимвол <code>*</code> всегда относится к некоторому шаблону и делает этот шаблон необязательным. В отличие от <code>+</code>, который требует не менее одного соответствия, <code>*</code> соответствует любому количеству совпадений, если они встретятся, но не требует ни одного совпадения в обязательном порядке.\r\n</div>\r\n\r\n<div class=\"note\">\r\n<code>*</code> является метасимволом. Чтобы установить соответствие со звездочкой <code>*</code> как с обычным символом, ее нужно защитить, т.е. задать как <code>\\*</code>.\r\n</div>\r\n\r\n<h3>Соответствие с нулем вхождений или с вхождением одного символа</h3>\r\n\r\n<p>\r\nЕсть еще один очень полезный метасимвол — <code>?</code> (знак вопроса). Подобно <code>+</code>, знак вопроса <code>?</code> отмечает необязательный текст (так что ему будет соответствовать и нулевое количество вхождений шаблона). Но в отличие от знака <code>+</code> знак вопроса <code>?</code> соответствует только отсутствию вхождений или одному вхождению символа (или набора), но не более чем одному вхождению. Поэтому знак <code>?</code> очень полезен тогда, когда нужно установить соответствие с одним конкретным необязательным символом в блоке текста.\r\n</p>\r\n<p>\r\nРассмотрим следующий пример:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nThe URL is http://www.forta.com/, to connect  \r\nsecurely use https://www.forta.com/ instead.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\nhttp://[\\w./]+\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nThe URL is [border]http://www.forta.com/[/border], to connect  \r\nsecurely use https://www.forta.com/ instead.\r\n[/code]\r\n\r\n<p>\r\nЧтобы найти URL, используется шаблон <code>http://</code> (который является буквальным текстом и поэтому соответствует только себе); за ним следует шаблон <code>[\\w./]+</code>, соответствующий одному или нескольким вхождениям набора, в котором допускаются алфавитно-цифровые символы, точка <code>.</code> и косая черта <code>/</code>. Этот шаблон может найти только первый URL (тот, который начинается с <code>http://</code>), но не второй, который начинается с <code>https://</code>. Причем <code>s*</code> (нуль или больше вхождений <code>s</code>) не является правильным шаблоном, потому что ему соответствовало бы и <code>httpsssss://</code> (что явно не допустимо).\r\n</p>\r\n<p>\r\nРешение? Используйте <code>s?</code> как показано в следующем примере:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nThe URL is http://www.forta.com/, to connect  \r\nsecurely use https://www.forta.com/ instead.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\nhttps?://[\\w./]+\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nThe URL is [border]http://www.forta.com/[/border], to connect  \r\nsecurely use [border]https://www.forta.com/[/border] instead.\r\n[/code]\r\n\r\n<p>\r\nШаблон здесь начинается с <code>https?://</code>. Метасимвол <code>?</code> указывает, что с предшествующим ему в шаблоне символом (<code>s</code>) должно быть установлено соответствие, если в тексте этого символа нет или если есть одно вхождение этого символа в текст. Другими словами, <code>https?://</code> соответствует и <code>http://</code>, и <code>https://</code> (но ничему иному).\r\n</p>\r\n<p>\r\nКстати, использование метасимвола <code>?</code> решает также проблему, рассмотренную в предыдущем уроке. Вспомните пример, в котором использовался шаблон <code>\\r\\n</code>, чтобы установить соответствие с концом строки, и я упоминал, что в Unix и Linux нужно использовать <code>\\n</code> (без <code>\\r</code>) и что идеальное решение состояло бы в том, чтобы установить соответствие с необязательным <code>\\r</code>, за которым следует <code>\\n</code>. Рассмотрим этот пример снова, но на сей раз немного изменим регулярное выражение:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\n\"101\",\"Ben\",\"Forta\" \r\n\"102\",\"Jim\",\"James\"\r\n\r\n\"103\",\"Roberta\",\"Robertson\"\r\n\"104\",\"Bob\",\"Bobson\"\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n[\\r]?\\n[\\r]?\\n\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n\"101\",\"Ben\",\"Forta\" \r\n\"102\",\"Jim\",\"James\"[border] [/border]\r\n[border] [/border]\r\n\"103\",\"Roberta\",\"Robertson\"\r\n\"104\",\"Bob\",\"Bobson\"\r\n[/code]\r\n \r\n<p>\r\nВыражение <code>[\\r]?\\n</code> соответствует одному необязательному вхождению <code>\\r</code>, за которым обязательно следует <code>\\n</code>.\r\n</p>\r\n\r\n<div class=\"note\">\r\nОбратите внимание, что здесь использовано регулярное выражение <code>[\\r]?</code>, а не <code>\\r?</code>. Выражение <code>[\\r]</code> определяет набор, содержащий единственный метасимвол, т.е. одноэлементный набор, поэтому <code>[\\r]?</code> фактически функционально идентично <code>\\r?</code>. Квадратные скобки <code>[&nbsp;]</code> обычно используются, чтобы определить набор символов, но некоторые разработчики любят заключать в них даже единственный символ, чтобы предотвратить всякую двусмысленность (выделив шаблон, к которому применяется следующий метасимвол). Если вы используете и <code>[&nbsp;]</code>, и <code>?</code>, удостоверьтесь, что <code>?</code> поместили вне набора. В соответствии с этими правилами правильно писать <code>http[s]?://</code>, a не <code>http[s?]://</code>.\r\n</div>\r\n\r\n<div class=\"note\">\r\nЗнак вопроса <code>?</code> является метасимволом. Чтобы найти <code>?</code>, нужно защитить его, т.е. задать как <code>\\?</code>.\r\n</div>\r\n\r\n<h2>Использование интервалов</h2>\r\n\r\n<p>\r\nМетасимволы <code>+</code>, <code>*</code> и <code>?</code> помогают решить много проблем с регулярными выражениями, но иногда этих знаков недостаточно. Учтите следующее:\r\n</p>\r\n\r\n<ul>\r\n<li><code>+</code> и <code>*</code> соответствуют  неограниченному числу символов. Они не дают возможности установить максимальное число  символов, которым может соответствовать предшествующий им шаблон;</li>\r\n<li>минимальное количество вхождений, указываемое с помощью <code>+</code>, <code>*</code> и <code>?</code>, равно нулю или единице. Эти метасимволы   не позволяют установить минимальное количество совпадений явно;</li>\r\n<li>нет способа определить точно количество желаемых совпадений.</li>\r\n</ul>\r\n \r\n<p>\r\nЧтобы решить эти проблемы и обеспечивать большую свободу управления повторением совпадений, в регулярных выражениях допускается использование интервалов. Интервалы определяются между символами <code>{</code> и <code>}</code>.\r\n</p>\r\n\r\n<div class=\"note\">\r\nФигурные скобки <code>{</code> и <code>}</code> — метасимволы и поэтому их нужно защитить с помощью <code>\\</code>, если необходимо использовать их как буквальный текст. Впрочем, стоит отметить, что многие реализации регулярных выражений способны правильно обработать <code>{</code> и <code>}</code>, даже если они не защищены (поскольку способны определить, когда эти символы используются буквально, а когда они метасимволы). Однако лучше всего не полагаться на это, а защищать эти символы, когда они используются как литералы.\r\n</div>\r\n\r\n<h3>Указание точного количества совпадений</h3>\r\n\r\n<p>\r\nЧтобы определить точное количество совпадений, число совпадений указывают между фигурными скобками <code>{</code> и <code>}</code>. Поэтому <code>{3}</code> означает поиск соответствий с тремя экземплярами предыдущего символа или набора. Если есть только 2 вхождения шаблона, соответствие установлено не будет.\r\n</p>\r\n<p>\r\nЧтобы продемонстрировать это, давайте повторно рассмотрим пример с RGB-значениями (использованный в уроках 3, «Соответствие набору символов», и 4, «Использование метасимволов»). Как вы помните, RGB-значения определяются как три набора шестнадцатеричных чисел (причем каждый набор состоит из 2 символов). Первый шаблон для поиска RGB-значения имел следующий вид:\r\n</p>\r\n\r\n[code]\r\n#[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]\r\n[/code]\r\n\r\n<p>\r\nВ уроке 4, «Использование метасимволов», мы имели дело с классом POSIX и шаблон выглядел так:\r\n</p>\r\n\r\n[code]\r\n#[[:xdigit:]][[:xdigit:]][[:xdigit:]][[:xdigit:] ][[ixdigit:]][[:xdigit:]]\r\n[/code]\r\n\r\n</p>\r\nПроблема с обоими шаблонами состоит в том, что приходится повторять один и тот же набор символов (или класс) шесть раз. Теперь в том же самом примере используем интервал для установления соответствия:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\n<BODY BGCOLOR=\"#336633\" TEXT=\"#FFFFFF\" \r\n      MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\"\r\n      TOPMARGIN=\"0\" LEFTMARGIN=\"0\">\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n#[[:xdigit:]]{6}\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n<BODY BGCOLOR=\"[border]#336633[/border]\" TEXT=\"[border]#FFFFFF[/border]\" \r\n      MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\"\r\n      TOPMARGIN=\"0\" LEFTMARGIN=\"0\">\r\n[/code]\r\n\r\n<p>\r\n<code>[:xdigit:]</code> соответствует шестнадцатеричному символу, а <code>{6}</code> повторяет класс POSIX шесть раз. Повторение работает точно так же в выражении\r\n</p>\r\n\r\n[code]\r\n#[0-9A-Fa-f]{6}\r\n[/code]\r\n\r\n<h3>Установление соответствия в случае интервала-диапазона</h3>\r\n\r\n<p>\r\nЧтобы определить диапазон количества вхождений (от минимального до максимального значения количества вхождений шаблона), могут использоваться также интервалы. Диапазоны определяются, например, так: <code>{2,4}</code>. (Этот диапазон задает <code>2</code> в качестве минимального значения для количества вхождений шаблона и <code>4</code> — в качестве максимального значения для количества вхождений шаблона). Пример применения диапазона — регулярное выражение, используемое для проверки правильности формата дат:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\n4/8/03 \r\n10-6-2004 \r\n2/2/2 \r\n01-01-01\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n\\d{l,2}[-\\/]\\d{l,2}[-\\/]\\d{2,4}\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n[border]4/8/03[/border] \r\n[border]10-6-2004[/border] \r\n2/2/2 \r\n[border]01-01-01[/border]\r\n[/code]\r\n\r\n<p>\r\nПеречисленные здесь даты — значения, которые пользователи могут вводить в качестве значений полей в формах; эти значения должны представлять собой правильно отформатированные даты. Шаблону <code>\\d{l,2}</code> соответствует одна или две цифры (такая проверка используется для дня и месяца); <code>\\d{2,4}</code> соответствует году; <code>[-\\/]</code> соответствует <code>-</code> или <code>/</code> в качестве разделителя даты. Использованный шаблон нашел три даты, но не нашел <code>2/2/2</code> (потому что для года последовательность цифр слишком короткая).\r\n</p>\r\n\r\n<div class=\"note\">\r\nВ использованном здесь регулярном выражении наклонная черта <code>/</code> защищена и потому записана как <code>\\/</code>. Во многих реализациях регулярных выражений защита не нужна, но некоторые синтаксические анализаторы регулярных выражений действительно требуют этого. Поэтому рекомендуется всегда защищать наклонную черту <code>/</code>.\r\n</div>\r\n\r\n<p>\r\nОбратите внимание, что предыдущий шаблон не проверяет правильность дат (недопустимые даты типа <code>54/67/9999</code> выдержали бы испытание)&nbsp;— он только проверяет правильность формата (шаг, обычно предпринимаемый непосредственно перед проверкой правильности дат).\r\n</p>\r\n\r\n<div class=\"note\">\r\nИнтервалы могут начинаться с <code>0</code>. Интервал <code>{0,3}</code> соответствует нулю, одному, двум или трем вхождениям шаблона. Как отмечалось ранее, знак вопроса <code>?</code> находит нуль совпадений или одно совпадение для шаблона, который предшествует этому знаку. Поэтому знак вопроса <code>?</code> функционально эквивалентен интервалу <code>{0,1}</code>.\r\n</div>\r\n\r\n<h3>Соответствие в случае интервала типа «не менее»</h3>\r\n\r\n<p>\r\nИнтервалы используются также для того, чтобы определить минимальное количество совпадений с шаблоном, не указывая при этом максимального. Синтаксис для этого типа интервала подобен синтаксису для диапазона, но в нем опущен максимум. Например, <code>{3,}</code> означает совпадение не менее чем с <code>3</code> вхождениями. Иными словами, здесь требуется <code>3</code> или больше совпадений.\r\n</p>\r\n<p>\r\nСледующий пример охватывает большую часть того, что было изучено в этом уроке. Здесь регулярное выражение используется для того, чтобы определить местонахождение всех заказов, оцененных в <code>100</code> или больше долларов (<code>$</code>):\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\n1001: $496.80\r\n1002: $1290.69\r\n1003: $26.43\r\n1004: $613.42\r\n1005: $7.61\r\n1006: $414.90\r\n1007: $25.00\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n\\d+: \\$\\d{3,}\\.\\d{2}\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n[border]1001: $496.80[/border]\r\n[border]1002: $1290.69[/border]\r\n1003: $26.43\r\n[border]1004: $613.42[/border]\r\n1005:	$7.61\r\n[border]1006: $414.90[/border]\r\n1007: $25.00\r\n[/code]\r\n\r\n<p>\r\nПредыдущий текст — сообщение, где указаны номера заказов, за которыми следует стоимость соответствующего заказа. Регулярное выражение сначала использует шаблон <code>\\d+:</code>, чтобы найти порядковый номер заказа (если этот шаблон опустить, то, когда будет найдена стоимость, соответствие будет установлено только с ней, а не со всей строкой, включающей также и порядковый номер заказа). Чтобы установить соответствие со стоимостью, используется шаблон <code>\\$\\d{3,}\\.\\d{2}</code>. Выражение <code>\\$</code> соответствует <code>$</code>, <code>\\d{3,}</code> соответствует числам, содержащим не менее трех цифр (и таким образом стоимости не менее <code>100$</code>), <code>\\.</code> соответствует <code>.</code>, и, наконец, <code>\\d{2}</code> соответствует тем двум цифрам, которые следуют после десятичной точки. Весь шаблон правильно устанавливает соответствие с четырьмя из семи заказов.\r\n</p>\r\n\r\n<div class=\"note\">\r\nБудьте внимательны при использовании этой формы интервала. Если опустить запятую <code>,</code>, то поиск будет происходить иначе: будет попытка установить соответствие с тем количеством вхождений шаблона, которое указано в фигурных скобках.\r\n</div>\r\n\r\n<div class=\"note\">\r\nЗнак <code>+</code> функционально эквивалентен <code>{1,}</code>.\r\n</div>\r\n\r\n<h2>Предотвращение лишних соответствий</h2>\r\n\r\n<p>\r\nМетасимвол <code>?</code> ограничивает количество совпадений — их может быть нуль или только одно. То же самое относится и к совпадениям, задаваемым интервалами, если в них указаны точные количества совпадений или диапазоны. Однако другие формы повторения шаблона, описанные в этом уроке, могут соответствовать неограниченному количеству совпадений — иногда их слишком много.\r\n</p>\r\n<p>\r\nВсе примеры к настоящему моменту были тщательно отобраны так, чтобы не столкнуться со слишком большим количеством соответствий. Но теперь пришло время рассмотреть следующий пример. Выбранный для примера текст является частью Web-страницы и содержит текст со встроенными HTML-тегами <code>&lt;B&gt;</code>. Регулярное выражение должно найти любой текст внутри тегов <code>&lt;B&gt;</code> (это может потребоваться при замене форматирования). Вот пример:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nThis offer is not available to customers living in <B>AK</B> and <B>HI</B>.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n<[Bb]>.*</[Bb]>\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nThis offer is not available to customers living in [border]<B>AK</B> and <B>HI</B>[/border].\r\n[/code]\r\n\r\n<p>\r\nВыражение <code>&lt;[Bb]&gt;</code> соответствует открывающему тегу <code>&lt;B&gt;</code> (на верхнем или нижнем регистре), а <code></[Bb]></code> соответствует закрывающему тегу <code>&lt;/B&gt;</code> (также на верхнем или нижнем регистре). Однако вместо двух совпадений было найдено только одно, причем <code>.*</code> соответствовало всему, что было расположено после первого <code>&lt;B&gt;</code> до последнего тега <code>&lt;/B&gt;</code>, так что фактически был найден текст <code>AK&lt;/B&gt; and &lt;B&gt;HI</code>. Найденный текст содержит текст, который нужно было найти, но помимо него он включает также и другие вхождения тегов.\r\n</p>\r\n<p>\r\nПричина этого состоит в том, что метасимволы типа <code>*</code> и <code>+</code> являются <em>жадными</em>; т.е. они ищут самое длинное возможное соответствие, а не наименьшее. Из-за этого кажется, что соответствие начинается не с начала, а с конца текста и продолжается назад (т.е. в направлении к началу), пока не будет найдено следующее соответствие. Это делается преднамеренно — кванторы по природе своей жадны.\r\n</p>\r\n<p>\r\nНо что, если вам не нужно жадное соответствие? Решение состоит в том, чтобы использовать ленивые версии этих кванторов (они называются ленивыми, потому что устанавливают соответствие с наименьшим (а не наибольшим) возможным количеством символов). Ленивые кванторы определяются путем добавления в конец <code>?</code> к используемому квантору, причем для каждого из жадных кванторов имеется ленивый эквивалент (табл. 5.1).\r\n</p>\r\n\r\n<p><strong>Таблица 5.1.</strong> Жадные и ленивые кванторы</p>\r\n\r\n<table class=\"data-table\">\r\n<tr>\r\n  <th>Жадный</th>\r\n  <th>Ленивый</th>\r\n</tr>\r\n<tr>\r\n  <td><code>*</code></td>\r\n  <td><code>*?</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>+</code></td>\r\n  <td><code>+?</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>?</code></td>\r\n  <td><code>??</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>{n}</code></td>\r\n  <td><code>{n}?</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>{n,}</code></td>\r\n  <td><code>{n,}?</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>{n,m}</code></td>\r\n  <td><code>{n,m}?</code></td>\r\n</tr>\r\n</table>\r\n\r\n<p>	\r\nКвантор <code>*?</code> —  ленивая  версия  <code>*</code>, так что давайте повторно рассмотрим наш пример, на сей раз используя <code>*?</code>:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nThis offer is not available to customers living in <B>AK</B> and <B>HI</B>.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n<[Bb]>.*?</[Bb]>\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nThis offer is not available to customers living in [border]<B>AK</B>[/border] and [border]<B>HI</B>[/border].\r\n[/code]\r\n\r\n<p>\r\nИспользуя ленивый квантор <code>*?</code>, мы добились правильного результата. Первый раз с ним было сопоставлено только вхождение <code>&lt;B&gt;AK&lt;/B&gt;</code>, и совершенно независимо от него было найдено вхождение <code>&lt;B&gt;HI&lt;/B&gt;</code>.\r\n</p>\r\n\r\n<div class=\"note\">\r\nВ большинстве примеров в этой книге для простоты используются жадные кванторы. Однако не стесняйтесь применять ленивые кванторы, если именно они вам необходимы.\r\n</div>\r\n\r\n<h2>Резюме</h2>\r\n\r\n<p>\r\nРеальная мощь шаблонов из регулярных выражений становится очевидной именно при использовании повторения совпадений. В этом уроке введены кванторы <code>+</code> (соответствует одному или большему количеству совпадений), <code>*</code> (нуль или больше совпадений), <code>?</code> (нуль или одно совпадение). Эти кванторы можно рассматривать как способы найти повторяющиеся совпадения. Для более тонкого управления могут использоваться интервалы, так как они позволяют определить точное количество повторений или же минимальное и максимальное их количество. Жадные кванторы могут найти слишком много соответствий; чтобы избежать этого, используйте ленивые кванторы.\r\n</p>','2018-03-29 12:32:02'),(20,15,'Урок 6. Соответствие позиций','','','','Теперь вы знаете, как установить соответствие между всеми типами символов во всевозможных типах комбинаций и повторений в любом положении в тексте. Однако иногда необходимо установить соответствие в определенных местоположениях в пределах блока текста, для чего требуется установить соответствие позиций.','<p>\r\nТеперь вы знаете, как установить соответствие между всеми типами символов во всевозможных типах комбинаций и повторений в любом положении в тексте. Однако иногда необходимо установить соответствие в определенных местоположениях в пределах блока текста, для чего требуется установить соответствие позиций, — именно это объясняется в данном уроке.\r\n</p>\r\n\r\n<h2>Использование границ</h2>\r\n\r\n<p>\r\nСоответствие позиций позволяет указать, где в строке текста должно произойти совпадение. Чтобы понять потребность в соответствии позиций, рассмотрим следующий пример:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nThe cat scattered his food all over the room.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\ncat\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nThe [border]cat[/border] s[border]cat[/border]tered his food all over the room.\r\n[/code]\r\n\r\n<p>\r\nШаблон <code>cat</code> соответствует всем вхождениям <code>cat</code>, даже вхождению <code>cat</code> в слово <code>scattered</code>. На самом деле иногда как раз это и нужно, но более чем вероятно, что требуется совсем другое. Если вы хотите в результате поиска заменить все вхождения слова <code>cat</code> на слово <code>dog</code>, то при таком поиске все закончилось бы следующей ерундой:\r\n</p>\r\n\r\n[code]\r\nThe dog sdogtered his food all over the room.\r\n[/code]\r\n\r\n<p>\r\nЭто заставляет нас учитывать границы и использовать специальные метасимволы для определения позиции (или границы) перед шаблоном и после него.\r\n</p>\r\n\r\n<h2>Границы слова</h2>\r\n\r\n<p>\r\nСимвол <code>\\b</code> указывает границу слова. Таким образом, <code>\\b</code> соответствует началу или концу слова.\r\n</p>\r\n<p>\r\nЧтобы продемонстрировать использование <code>\\b</code>, рассмотрим предыдущий пример снова, на сей раз с указанием границ:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nThe cat scattered his food all over the room.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n\\bcat\\b\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nThe [border]cat[/border] scattered his food all over the room.\r\n[/code]\r\n\r\n<p>\r\nПеред словом <code>cat</code> и после него есть пробел, и слово вместе с пробелами соответствует шаблону <code>\\bcat\\b</code> (пробел — один из символов, которые обычно отделяют слова). Вхождение слова <code>cat</code> в scattered, однако, не соответствует этому шаблону, потому что этому слову в <code>scattered</code> предшествует символ <code>s</code>, а после него идет символ <code>t</code> (ни один из которых не соответствует <code>\\b</code>).\r\n</p>\r\n\r\n<div class=\"note\">\r\n<p>\r\nТак чему же именно соответствует <code>\\b</code>? Механизмы регулярных выражений не понимают английский или любой другой язык, и потому они не могут определить границы слова. Символ <code>\\b</code> просто соответствует позиции между символом, который является обычно частью слова (слова состоят из алфавитно-цифровых символов и символа подчеркивания, т.е. представляют собой текст, который состоит из символов, соответствующих <code>\\w</code>) и чем-нибудь, что не может быть частью слова (текст, который состоит из символов, соответствующих <code>\\W</code>).\r\n</p>\r\n</div>\r\n\r\n<p>\r\nВажно помнить, что для того, чтобы найти слово целиком, <code>\\b</code> должен использоваться и перед, и после текста, с которым будет установлено соответствие. Рассмотрим следующий пример:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nThe captain wore his cap and cape proudly as he sat \r\nlistening to the recap of how his crew saved the men  \r\nfrom a capsized vessel.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n\\bcap\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nThe [border]cap[/border]tain wore his [border]cap[/border] and [border]cap[/border]e proudly as he sat \r\nlistening to the recap of how his crew saved the men  \r\nfrom a [border]cap[/border]sized vessel.\r\n[/code]\r\n\r\n<p>\r\nШаблон <code>\\bcap</code> соответствует любому слову, которое начинается с <code>cap</code>, и потому были найдены четыре слова, причем три из них не являются словом <code>cap</code>.\r\n</p>\r\n<p>\r\nДалее приведен тот же самый пример, но только <code>\\b</code> стоит в конце слова:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nThe  captain wore his cap and cape proudly as he sat \r\nlistening to the recap of how his crew saved the men  \r\nfrom a capsized vessel.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\ncap\\b\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nThe  captain wore his [border]cap[/border] and cape proudly as he sat \r\nlistening to the re[border]cap[/border] of how his crew saved the men  \r\nfrom a capsized vessel.\r\n[/code]\r\n\r\n<p>\r\nВыражение <code>сар\\b</code> соответствует любому слову, которое заканчивается на <code>cap</code>, и потому были найдены два совпадения, включая и то слово, которое не является словом <code>cap</code>.\r\n</p>\r\n<p>\r\nНо если нужно найти только слово <code>cap</code>, правильным шаблоном является только <code>\\bcap\\b</code>.\r\n</p>\r\n\r\n<div class=\"note\">\r\n<p>\r\nНа самом деле символ <code>\\b</code> не соответствует какому-либо символу; он соответствует позиции. Поэтому длина строки, которая находится шаблоном <code>\\bcat\\b</code>, равна трем (<code>с</code>, <code>а</code> и <code>t</code>), а не пяти символам.\r\n</p>\r\n</div>\r\n\r\n<p>\r\nЧтобы указать нечто, не соответствующее границе слова, используйте <code>\\B</code>. В следующем примере метасимволы <code>\\B</code> помогают определить местонахождение дефисов с лишними пробелами вокруг них:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nPlease enter the nine-digit id as it appears on your \r\ncolor - coded pass-key.\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n\\B-\\B\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nPlease enter the nine-digit id as it appears on your \r\ncolor [border]-[/border] coded pass-key.\r\n[/code]\r\n\r\n<p>\r\n<code>\\B-\\B</code> соответствует дефису, который окружен символами границы слова. Дефисы в <code>nine-digit</code> и <code>pass-key</code> не соответствуют шаблону, но дефис в <code>color&nbsp;-&nbsp;coded</code> будет найден.\r\n</p>\r\n<p>\r\nКак указывалось в уроке 4, «Использование метасимволов», метасимволы на верхнем регистре обычно отрицают функциональные возможности их эквивалентов на нижнем регистре.\r\n</p>\r\n\r\n<div class=\"note\">\r\n<p>\r\nВ некоторых реализациях регулярных выражений поддерживается два дополнительных метасимвола. Метасимвол <code>\\b</code> соответствует началу или концу слова, дополнительный метасимвол <code>\\&lt; </code>соответствует только началу слова, а дополнительный метасимвол <code>\\&gt;</code> соответствует только концу слова. Хотя использование этих символов обеспечивает дополнительное управление, поддержка их очень ограничена.\r\n</p>\r\n</div>\r\n\r\n<h2>Определение границ строк</h2>\r\n\r\n<p>\r\nГраницы слов позволяют указать местонахождение совпадений относительно позиции в слове (начало слова, конец слова, полностью слово и т.д.). Границы строк выполняют подобную функцию, но используются для нахождения соответствий с шаблонами в начале или конце всей строки. Метасимволы для границ строк — крыша <code>^</code> (начало строки) и доллар <code>$</code> (конец строки).\r\n</p>\r\n\r\n<div class=\"note\">\r\n<p>\r\nВ уроке 3, «Соответствие набору символов», вы узнали, что крыша <code>^</code> используется для того, чтобы отрицать набор. Как же она может использоваться также и для указания начала строки?\r\n</p>\r\n<p>\r\nМетасимвол <code>^</code> имеет несколько значений. Этот метасимвол отрицает набор, только если находится в наборе (т.е. заключен в квадратные скобки <code>[</code> и <code>]</code>) и является первым символом после открывающей <code>[</code>. Вне набора и в начале шаблона <code>^</code> соответствует началу строки.\r\n</p>\r\n</div>\r\n\r\n<p>\r\nЧтобы продемонстрировать использование границ строк, рассмотрим следующий пример. Правильные (допустимые) XML-документы начинаются с <code>&lt;?xml&gt;</code> и, вероятно, имеют дополнительные атрибуты (например, номер версии, как в <code>&lt;?xml&nbsp;version=\"1.0\"&nbsp;?&gt;</code>). Ниже мы просто проверяем, является ли текст XML-документом:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<wsdl:definitions targetNamespace=\"http://tips.cf\" \r\nxmlns:impl=\"http://tips.cf\" xmlns:intf=\"http://tips.cf\" \r\nxmlns:apachesoap=\"http://xml.apache.org/xml-soap\" … >\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n<\\?xml.*\\?>\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n[border]<?xml version=\"1.0\" encoding=\"UTF-8\" ?>[/border]\r\n<wsdl:definitions targetNamespace=\"http://tips.cf\" \r\nxmlns:impl=\"http://tips.cf\" xmlns:intf=\"http://tips.cf\" \r\nxmlns:apachesoap=\"http://xml.apache.org/xml-soap\" … >\r\n[/code]\r\n\r\n<p>\r\nШаблон, казалось, сработал. <code>&lt;\\?xml</code> соответствует <code>&lt;?xml</code>, <code>.*</code> соответствует любому другому тексту (нуль или больше экземпляров <code>.</code>), а <code>\\?&gt;</code> соответствует <code>?&gt;</code> в конце тега.\r\n</p>\r\n<p>\r\nНо это очень грубая проверка. Рассмотрим следующий пример: тот же шаблон используется для того, чтобы найти текст,  которому предшествует лишний текст перед открытием XML.\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\nThis is bad, real bad!\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<wsdl:definitions  targetNamespace=\"http://tips.cf\" \r\nxmlns:impl=\"http://tips.cf\" xmlns:intf=\"http://tips.cf\" \r\nxmlns:apachesoap=\"http://xml.apache.org/xml-soap\" … >\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n<\\?xml.*\\?>\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\nThis is bad, real bad!\r\n[border]<?xml version=\"1.0\" encoding=\"UTF-8\" ?>[/border]\r\n<wsdl:definitions  targetNamespace=\"http://tips.cf\" \r\nxmlns:impl=\"http://tips.cf\" xmlns:intf=\"http://tips.cf\" \r\nxmlns:apachesoap=\"http://xml.apache.org/xml-soap\" … >\r\n[/code]\r\n\r\n<p>\r\nШаблон <code>&lt;\\?xml.*\\?&gt;</code> соответствует второй строке текста. И хотя тег, открывающий XML, действительно может быть помещен во второй строке текста, этот пример определенно недопустим (и обработка такого текста как XML-документа может вызвать всевозможные проблемы).\r\n</p>\r\n<p>\r\nНеобходимо проверить, что открывающий XML-тег на самом деле является первым текстом в строке, и именно это должен сделать метасимвол <code>^</code>:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<wsdl:definitions  targetNamespace=\"http://tips.cf\" \r\nxmlns:impl=\"http://tips.cf\" xmlns:intf=\"http://tips.cf\" \r\nxmlns:apachesoap=\"http://xml.apache.org/xml-soap\" … >\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n^\\s<\\?xml.*\\?>\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n[border]<?xml version=\"1.0\" encoding=\"UTF-8\" ?>[/border] \r\n<wsdl:definitions  targetNamespace=\"http://tips.cf\" \r\nxmlns:impl=\"http://tips.cf\" xmlns:intf=\"http://tips.cf\" \r\nxmlns:apachesoap=\"http://xml.apache.org/xml-soap\" … >\r\n[/code]\r\n\r\n<p>\r\nПервый символ <code>^</code> соответствует началу строки, поэтому <code>^\\s*</code> соответствует началу строки, после которого следует нуль или большее количество пробельных символов (таким образом обрабатываются допустимые пробелы, позиции табуляции и концы строк перед открытием XML-документа). Следовательно, весь шаблон <code>^\\s&lt;\\?xml.*\\?&gt;</code> соответствует открывающему XML-тегу с любыми атрибутами, причем он правильно обрабатывает таклсе и пробельные символы.\r\n</p>\r\n\r\n<div class=\"note\">\r\n<p>\r\nШаблон <code>^\\s*&lt;\\?xml.*\\?&gt;</code> сработал правильно, но только потому, что XML-документ, приведенный в этом примере, не завершен. Если бы использовался весь XML-документ, вы бы увидели пример работы жадного квантора. Это, вероятно, был бы самый убедительный пример того, когда нужно использовать <code>.*?</code> вместо просто <code>.*</code>.\r\n</p>\r\n</div>\r\n\r\n<p>\r\nЗнак <code>$</code> используется во многом аналогичным способом. Этот знак помогает проверить, что после закрывающего тега <code>&lt;/html&gt;</code> на Web-странице ничего нет:\r\n</p>\r\n\r\n[code]\r\n</[Hh][Tt][Mm][Ll]>\\s*$\r\n[/code]\r\n\r\n<p>\r\nНаборы используются для каждого из символов <code>H</code>, <code>T</code>, <code>M</code> и <code>L</code> (чтобы обработать любую комбинацию символов верхнего и нижнего регистров), a <code>\\s*$</code> соответствуют любому пробельному символу, за которым следует конец строки.\r\n</p>\r\n\r\n<div class=\"note\">\r\n<p>\r\nШаблон <code>^.*$</code> — синтаксически правильное регулярное выражение, которое почти всегда будет находить соответствие, и потому оно совершенно бесполезно. Попробуйте догадаться, чему соответствует данное выражение и когда оно не будет находить соответствие.\r\n</p>\r\n</div>\r\n\r\n<h3>Использование многострочного режима</h3>\r\n\r\n<p>\r\nОбычно <code>^</code> соответствует началу строки, а <code>$</code> — концу строки. Однако есть исключение, а точнее, способ изменить такое поведение этих символов.\r\n</p>\r\n<p>\r\nВо многих реализациях регулярных выражений имеются специальные метасимволы, которые изменяют поведение других метасимволов; один из них — <code>(?m)</code>. Этот метасимвол допускает использование многострочного режима. Многострочный режим вынуждает механизм регулярных выражений обрабатывать конец строки как разделитель строк, и в этом режиме <code>^</code> соответствует началу строки или началу после конца строки (т.е. началу новой строки), а <code>$</code> соответствует концу строки или концу после конца строки.\r\n</p>\r\n<p>\r\nМетасимвол <code>(?m)</code> (если он, конечно, применяется) должен быть помещен в самое начало шаблона, как показано в следующем примере, в котором регулярное выражение помогает определить местонахождение всех комментариев в блоке кода, написанном на JavaScript:\r\n</p>\r\n\r\n<p>Текст</p>\r\n[code]\r\n<SCRIPT>\r\nfunction doSpellCheck(fora, field) {\r\n  // Make sure not empty\r\n  if (field.value == \'\') { \r\n    return false;\r\n  }\r\n  // Init\r\n  var windowName=\'spellWindow\';\r\n  var spellCheckURL=\'spell.cfm?formname=comment&fieldname=\'+field.name;\r\n  ..........\r\n  // Done \r\n  return false; \r\n}\r\n</SCRIPT>\r\n[/code]\r\n\r\n<p>Регулярное выражение</p>\r\n[code]\r\n[grn](?m)[/grn]^\\s*//.*$\r\n[/code]\r\n\r\n<p>Результат</p>\r\n[code]\r\n<SCRIPT>\r\nfunction doSpellCheck(fora, field) {\r\n[border]  // Make sure not empty[/border]\r\n  if (field.value == \'\') { \r\n    return false;\r\n  }\r\n[border]  // Init[/border]\r\n  var windowName=\'spellWindow\';\r\n  var spellCheckURL=\'spell.cfm?formname=comment&fieldname=\'+field.name;\r\n  ..........\r\n[border]  // Done[/border]\r\n  return false; \r\n}\r\n</SCRIPT>\r\n[/code]\r\n\r\n<p>\r\nВыражение <code>^\\s*//.*$</code> соответствует началу строки, за которым следует любой пробельный символ, за ним в свою очередь следует <code>//</code> (начало комментария в JavaScript), за которым размещается любой текст, после чего следует конец строки. Однако использованный нами шаблон соответствовал бы только первому комментарию (и то только если бы это был единственный текст на странице). Модификатор <code>(?m)</code> в <code>(?m)^\\s*//.*$</code> заставляет шаблон обрабатывать концы строк как разделители строк, и потому были найдены все комментарии.\r\n</p>\r\n\r\n<div class=\"note\">\r\n<p>Выражение <code>(?m)</code> не поддерживается многими реализациями регулярных выражений.</p>\r\n</div>\r\n\r\n<div class=\"note\">\r\n<p>\r\nВ некоторых реализациях регулярных выражений также поддерживается метасимвол <code>\\A</code>, соответствующий началу строки, и метасимвол <code>\\Z</code>, соответствующий концу строки. Если эти метасимволы поддерживаются, то ведут себя они очень похоже на <code>^</code> и <code>$</code>, но в отличие от <code>^</code> и <code>$</code>, они не модифицируются метасимволом <code>(?m)</code> и поэтому не будут работать в многострочном режиме.\r\n</p>\r\n</div>\r\n\r\n<h2>Резюме</h2>\r\n\r\n<p>\r\nРегулярные выражения могут соответствовать любым блокам текста или тексту в определенной позиции в строке. Символ <code>\\b</code> соответствует границе слова (а <code>\\B</code> — его противоположность — все делает полностью наоборот). Метасимволы <code>^</code> и <code>$</code> отмечают границы строк (начало строки и конец строки, соответственно), хотя когда используется модификатор <code>(?m)</code>, <code>^</code> и <code>$</code> будут также соответствовать строкам, которые начинаются или заканчиваются в конце строки (т.е. там, где стоит символ разрыва строки).\r\n</p>','2018-04-12 11:01:38'),(21,2,'План обмена','','','','Механизмы обмена данными «1С:Предприятия» позволяют организовывать обмен информацией, хранимой в базе данных, с другими программными системами. При помощи планов обмена мы получаем информацию о том, какие элементы данных были изменены и в какой узел обмена их необходимо передать.','<h2>Общие сведения об обмене данными</h2>\r\n<p>\r\nМеханизмы обмена данными «1С:Предприятия» позволяют организовывать обмен информацией, хранимой в базе данных, с другими программными системами. К механизмам обмена данными могут быть отнесены:\r\n</p>\r\n<ul>\r\n  <li>Планы обмена,</li>\r\n  <li>XML-сериализация,</li>\r\n  <li>Средства чтения и записи документов XML.</li>\r\n</ul>\r\n<p>\r\nПри помощи планов обмена мы получаем информацию о том, какие элементы данных были изменены и в какой узел обмена их необходимо передать. Это возможно благодаря тому, что планы обмена содержат механизм регистрации изменений. Информация об измененных данных переносится с помощью сообщений, инфраструктура которых также поддерживается планами обмена.\r\n</p>\r\n<h2>Что такое план обмена</h2>\r\n<p>\r\nДля того чтобы существовала возможность обмена какими-либо данными с кем-либо, необходимо некоторым образом идентифицировать тех, с кем мы будем обмениваться, и для каждого из них описать перечень обмена. Обе эти задачи позволяет решать объект конфигурации «План обмена». Подобно тому, как элементами данных справочника являются элементы справочника, элементами данных плана обмена являются узлы плана обмена.\r\n</p>\r\n<p>\r\nКаждый узел идентифицирует участника обмена по данному плану обмена. Кроме этого, в каждом плане обмена всегда существует один предопределенный узел, идентифицирующий данную информационную базу.\r\n</p>\r\n<p>\r\nВ обмене данными могут участвовать:\r\n</p>\r\n<ul>\r\n  <li>объекты базы данных: элементы справочников, документы и т. д.,</li>\r\n  <li>необъектные данные: наборы записей регистров, последовательностей, константы,</li>\r\n  <li>специальный объект встроенного языка – <code>УдалениеОбъекта</code>.</li>\r\n</ul>\r\n<p>\r\nДля упрощения изложения в дальнейшем будем называть эти элементы информационных структур объектами обмена. Разработчик имеет возможность определить состав каждого плана обмена, указав объекты конфигурации, данные которых должны участвовать в обмене по данному плану. При описании состава данных плана обмена разработчик имеет возможность указать для каждого типа объектов признак <code>Авторегистрация</code>. Этот признак определяет, каким образом план обмена будет отслеживать изменения данных.\r\n</p>\r\n<p>\r\nВозможность отслеживать изменения данных реализована в плане обмена за счет использования <em>механизма регистрации изменений</em>. Работа этого механизма базируется на том, что каждый из объектов обмена имеет свойство <code>ОбменДанными</code>, с помощью которого можно указать, для каких узлов необходимо производить регистрацию изменений этого объекта. Любые изменения объекта обмена сводятся в конечном итоге к записи или удалению объекта обмена.\r\n</p>\r\n<p>\r\nТак вот, признак <code>Авторегистрация</code>, устанавливаемый при указании состава данных плана обмена, позволяет указать, что параметры обмена данными будут формироваться каждый раз самим механизмом регистрации изменений на основании информации, содержащейся в плане обмена. После автоматического заполнения параметров обмена разработчик имеет возможность внести изменения в сформированные таким образом параметры. Кроме этого, существует возможность отключить авторегистрацию изменений, и тогда параметры обмена данными нужно будет формировать полностью средствами встроенного языка.\r\n</p>\r\n<p>\r\nИтак, при записи и удалении объектов обмена план обмена формирует <em>записи регистрации изменений</em>. Записи регистрации изменений хранятся в таблицах регистрации изменений, причем для каждого объекта обмена ведется своя таблица. При изменении объекта обмена в таблице регистрации изменений создается столько записей, сколько узлов-получателей указано в параметрах обмена данными у объекта обмена. Каждая запись при этом будет хранить ссылку на свой узел-получатель.\r\n</p>\r\n<p>\r\nКроме ссылки на узел обмена, для которого регистрируются изменения, каждая запись таблицы регистрации изменений хранит также номер сообщения, в котором изменение было передано в первый раз в этот узел. До тех пор, пока сообщение не будет передано в первый раз, это поле хранит <code>NULL</code>.\r\n</p>\r\n<p>\r\nПоскольку сообщения передаются в рамках плана обмена от одного узла к другому, каждое сообщение точно ассоциировано с планом обмена, имеет уникальный номер и одного отправителя и получателя. За нумерацию сообщений отвечает инфраструктура сообщений. Благодаря этому записи регистрации изменений и имеют возможность хранить номера сообщений, в которых эти изменения были переданы первый раз.\r\n</p>\r\n<p>\r\nИнфраструктура сообщений позволяет также получать подтверждения от узла-получателя о приеме сообщений. Такое подтверждение содержится в каждом сообщении, приходящем от узла-получателя в виде номера последнего принятого сообщения. Впоследствии, проанализировав номер последнего принятого сообщения и номера сообщений, содержащиеся в записях регистрации изменений, разработчик может удалить записи регистрации изменений, прием которых подтвержден получателем.\r\n</p>\r\n\r\n<h2>Добавление плана обмена</h2>\r\n<p>\r\nРаскроем ветвь «Общие» дерева объектов конфигурации и добавим новый объект конфигурации <code>План обмена</code> с именем <code>Филиалы</code>, представление объекта – <code>Филиал</code>. На закладке «Данные» создадим реквизит плана обмена <code>Главный</code>, имеющий тип <code>Булево</code>.\r\n</p>\r\n<p>\r\n<img src=\"/files/article/21/1.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nЭтот реквизит понадобится нам для того, чтобы разрешать коллизии при обмене данными. Под коллизией понимается ситуация, когда один и тот же объект обмена данными был изменен одновременно в двух узлах. В этом случае мы будем анализировать значение реквизита <code>Главный</code> и принимать изменения только в том случае, если они сделаны в главном узле. В случае коллизии изменения, произведенные не в главном узле, мы будем отвергать.\r\n</p>\r\n<p>\r\nТеперь определим состав объектов, участвующих в обмене. Для этого на закладке «Основные» нажмем кнопку «Состав».\r\n</p>\r\n<p>\r\n<img src=\"/files/article/21/2.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nСоздадим основную форму узла и добавим обработчик события формы <code>ПриСозданииНаСервере</code>. Этот обработчик понадобится нам для того, чтобы запретить установку реквизита <code>Главный</code> для предопределенного узла, соответствующего данной информационной базе.\r\n</p>\r\n[язык]\r\n&НаСервере\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n	Если Объект.Ссылка = ПланыОбмена.Филиалы.ЭтотУзел() Тогда\r\n		Элементы.Главный.Доступность = Ложь;\r\n	КонецЕсли;\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nЗатем создадим основную форму списка плана обмена, чтобы описать в ней некоторые действия по регистрации нового узла обмена.\r\n</p>\r\n<p>\r\nСуть этих действий будет заключаться в том, что при регистрации нового узла обмена мы должны будем сформировать для него все необходимые записи регистрации изменений для всех объектов конфигурации, входящих в данный план обмена. Это будет своего рода начальная синхронизация узла обмена всеми данными обмена.\r\n</p>\r\n<p>\r\nДля этого на закладке «Команды» создадим команду <code>ЗарегистрироватьИзменения</code>.\r\n</p>\r\n[язык]\r\n&НаСервереБезКонтекста\r\nПроцедура ЗарегистрироватьИзмененияНаСервере(Узел)\r\n	// Регистрация изменений всех данных для узла\r\n	ПланыОбмена.ЗарегистрироватьИзменения(Узел);\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура ЗарегистрироватьИзменения(Команда)\r\n	ЗарегистрироватьИзмененияНаСервере(Элементы.Список.ТекущаяСтрока);\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nКнопка «Зарегистрировать изменения» должна быть доступна только в случае, если текущий узел не является предопределенным для данной информационной базы, иначе регистрация изменений невозможна. Чтобы обеспечить такое поведение кнопки, создадим в модуле формы списка функцию, выполняющуюся на сервере без контекста и возвращающую истину, если переданный в функцию узел является предопределенным.\r\n</p>\r\n[язык]\r\n&НаСервереБезКонтекста\r\nФункция ПредопределенныйУзел(Узел)\r\n	Возврат Узел = ПланыОбмена.Филиалы.ЭтотУзел();\r\nКонецФункции\r\n[/язык]\r\n<p>\r\nЗатем в окне элементов формы выделим элемент <code>Список</code>, вызовем его палитру свойств и создадим обработчик события <code>ПриАктивизацииСтроки</code>.\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура СписокПриАктивизацииСтроки(Элемент)\r\n	Если ПредопределенныйУзел(Элемент.ТекущаяСтрока) Тогда\r\n		Элементы.ФормаЗарегистрироватьИзменения.Доступность = Ложь;\r\n	Иначе\r\n		Элементы.ФормаЗарегистрироватьИзменения.Доступность = Истина;\r\n	КонецЕсли;\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\n\r\n<h2>Процедуры обмена данными</h2>\r\n<p>\r\nДля инициализации обмена данными мы используем обработку. Добавим новый объект конфигурации <code>Обработка</code> с именем <code>ОбменДанными</code>. На закладке Формы создадим основную форму обработки. В окне редактора форм на закладке «Команды» создадим команду формы <code>ВыполнитьОбмен</code>.\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ВыполнитьОбмен(Команда)\r\n	ВыполнитьОбменНаСервере();\r\nКонецПроцедуры\r\n\r\n&НаСервереБезКонтекста\r\nПроцедура ВыполнитьОбменНаСервере()\r\n	ВыборкаУзлов = ПланыОбмена.Филиалы.Выбрать();\r\n	Пока ВыборкаУзлов.Следующий() Цикл\r\n		// Произвести обмен со всеми узлами, кроме этого\r\n		Если ВыборкаУзлов.Ссылка = ПланыОбмена.Филиалы.ЭтотУзел() Тогда\r\n			Продолжить;\r\n		КонецЕсли;\r\n		УзелОбъект = ВыборкаУзлов.Ссылка.ПолучитьОбъект();\r\n		// Получить сообщение\r\n		УзелОбъект.ПрочитатьСообщениеСИзменениями();\r\n		// Сформировать сообщение\r\n		УзелОбъект.ЗаписатьСообщениеСИзменениями();		\r\n	КонецЦикла;\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nАлгоритм работы этой процедуры заключается в следующем: в цикле мы перебираем узлы, которые содержатся в плане обмена <code>Филиалы</code>, и для всех узлов, кроме себя самого, производим сначала чтение сообщений, поступивших из других узлов обмена. Затем мы формируем для них сообщения, предназначенные для передачи и содержащие измененные данные для этого узла.\r\n</p>\r\n<h2>Процедуры записи и чтения данных</h2>\r\n<p>\r\nСами процедуры записи и чтения данных обмена мы разместим в модуле объекта <code>План обмена Филиалы</code>.\r\n</p>\r\n[язык]\r\nПроцедура ЗаписатьСообщенияСИзменениями() Экспорт\r\n	\r\n	// ЭтотОбъект — это объект очередного узла, полученный в цикле\r\n	// процедуры ВыполнитьОбменНаСервере() модуля формы обработки\r\n	// ОбменДанными. А Ссылка — это ссылка на ЭтотОбъект. Например,\r\n	// в ПланеОбмена есть два узла, кроме текущего: ПервыйФилиал\r\n	// и ВторойФилиал. Мы в данный момент работаем с узлом\r\n	// ПервыйФилиал. Из этой информационной базы нам надо получить\r\n	// все зарегистрированные изменения объектов обмена для узла\r\n	// ПервыйФилиал и записать их в XML-файл.\r\n\r\n	Сообщение = Новый СообщениеПользователю();\r\n	Сообщение.Текст = \"----- Выгрузка в узел \" + Строка(ЭтотОбъект) + \" -----\";\r\n	Сообщение.Сообщить();\r\n	\r\n	// Сформировать имя временного файла\r\n	Каталог = КаталогВременныхФайлов();\r\n	ИмяФайла = Каталог + ?(Прав(Каталог, 1) = \"\\\",\"\", \"\\\") + \"Message-\" +\r\n	    СокрЛП(ПланыОбмена.Филиалы.ЭтотУзел().Код) + \"-\" + СокрЛП(Ссылка.Код) +\r\n		\".xml\";\r\n		\r\n	// Создать объект записи XML\r\n	// *** ЗаписьXML-документов\r\n	ЗаписьXML = Новый ЗаписьXML();\r\n	ЗаписьXML.ОткрытьФайл(ИмяФайла);\r\n	ЗаписьXML.ЗаписатьОбъявлениеXML();\r\n\r\n	// *** Инфраструктура сообщений\r\n	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();\r\n	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Ссылка);\r\n	Сообщение = Новый СообщениеПользователю();\r\n	Сообщение.Текст = \" Номер сообщения: \" + ЗаписьСообщения.НомерСообщения;\r\n	Сообщение.Сообщить();\r\n	\r\n	// Получить выборку измененных данных\r\n	// *** Механизм регистрации изменений\r\n	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(\r\n		ЗаписьСообщения.Получатель,\r\n		ЗаписьСообщения.НомерСообщения\r\n	);\r\n	\r\n	// ВыбратьИзменения(<Узел>, <НомерСообщения>, <ФильтрВыборки>)\r\n	// \r\n	// Формирует выборку «измененные данные» для передачи их в тот или\r\n	// иной узел плана обмена. При этом в процессе выборки изменений,\r\n	// в записи регистрации изменений проставляется номер сообщения\r\n	// обмена данными, в котором должны передаваться изменения. Номер\r\n	// сообщения в записи регистрации проставляется для того, чтобы\r\n	// при подтверждении приема сообщения, в котором передавались\r\n	// изменения, соответствующие записи регистрации изменений были\r\n	// удалены и в дальнейшем изменения больше не передавались.\r\n	\r\n	Пока ВыборкаИзменений.Следующий() Цикл\r\n		// Записать данные в сообщение *** XML-сериализация\r\n		ЗаписатьXML(ЗаписьXML, ВыборкаИзменений.Получить());\r\n	КонецЦикла;\r\n\r\n	ЗаписьСообщения.ЗакончитьЗапись();\r\n	ЗаписьXML.Закрыть();\r\n\r\n	Сообщение = Новый СообщениеПользователю();\r\n	Сообщение.Текст = \"----- Конец выгрузки -----\";\r\n	Сообщение.Сообщить()\r\n	    \r\nКонецПроцедуры\r\n[/язык]\r\n\r\n[язык]\r\nПроцедура ПрочитатьСообщениеСИзменениями() Экспорт\r\n\r\n	Каталог = КаталогВременныхФайлов();\r\n\r\n	// Сформировать имя файла\r\n	ИмяФайла = Каталог + ?(Прав(Каталог, 1) = \"\\\", \"\", \"\\\") +\r\n		\"Message-\" + СокрЛП(Ссылка.Код) + \"-\" +\r\n		СокрЛП(ПланыОбмена.Филиалы.ЭтотУзел().Код) + \".xml\";\r\n	Файл = Новый Файл(ИмяФайла);\r\n	Если Не Файл.Существует() Тогда\r\n		Возврат;\r\n	КонецЕсли;\r\n	\r\n	// *** Чтение документов XML	\r\n	// Попытаться открыть файл\r\n	ЧтениеXML = Новый ЧтениеXML();\r\n	Попытка \r\n		ЧтениеXML.ОткрытьФайл(ИмяФайла);\r\n	Исключение \r\n		Сообщение = Новый СообщениеПользователю();\r\n		Сообщение.Текст = \"Невозможно открыть файл обмена данными.\";\r\n		Сообщение.Сообщить();\r\n        Возврат;\r\n	КонецПопытки;\r\n\r\n	Сообщение = Новый СообщениеПользователю();\r\n	Сообщение.Текст = \"----- Загрузка из \" + Строка(ЭтотОбъект) + \" -----\";\r\n	Сообщение.Сообщить();\r\n	Сообщение = Новый СообщениеПользователю();\r\n	Сообщение.Текст = \" – Считывается файл \" + ИмяФайла;\r\n	Сообщение.Сообщить();\r\n	\r\n	// Загрузить из найденного файла\r\n	// *** Инфраструктура сообщений\r\n	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();\r\n\r\n	// Читать заголовок сообщения обмена данными – файла XML\r\n	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);\r\n	\r\n	// Сообщение предназначено не для этого узла\r\n	Если ЧтениеСообщения.Отправитель <> Ссылка Тогда\r\n		ВызватьИсключение \"Неверный узел\";\r\n	КонецЕсли;\r\n	\r\n	// Допустим, ПланОбмена Филиалы включает три узла:\r\n	// 1. ЦентральныйОфис, код 001\r\n	// 2. ПервыйФилиал, код 002\r\n	// 3. ВторойФилиал, код 003\r\n	// Имена XML-файлов обмена будут такими\r\n	// 1. Message-001-002.xml, ЦентральныйОфис->ПервыйФилиал\r\n	// 2. Message-001-003.xml, ЦентральныйОфис->ВторойФилиал\r\n	// 3. Message-002-001.xml, ПервыйФилиал->ЦентральныйОфис\r\n	// 4. Message-002-003.xml, ПервыйФилиал->ВторойФилиал\r\n	// 5. Message-003-001.xml, ВторойФилиал->ЦентральныйОфис\r\n	// 6. Message-003-002.xml, ВторойФилиал->ПервыйФилиал\r\n	// И пусть мы сейчас работаем в информационной базе\r\n	// ЦентральногоОфиса. А в каталоге врменнных файлов у\r\n	// нас шесть файлов. Мы должны прочитать только файлы\r\n	// Message-002-001.xml и Message-003-001.xml, каждый на\r\n	// очередной итерации цикла в процедуре модуля формы\r\n	// обработки ОбменДанными. И сейчас читаем Message-002-001.xml,\r\n	// отправитель ПервыйФилиал. Если\r\n	// ЧтениеСообщения.Отправитель <> СсылкаНаПервыйФилиал\r\n	// мы должны такое сообщение игнорировать. Потому как\r\n	// непонятно, почему в имени файла правильный отправитель,\r\n	// а в самом XML Отправитель неправильный.\r\n	\r\n 	// Удаляем регистрацию изменений для узла отправителя сообщения.\r\n	// *** Служба регистрации изменений\r\n	ПланыОбмена.УдалитьРегистрациюИзменений(\r\n		ЧтениеСообщения.Отправитель,\r\n		ЧтениеСообщения.НомерПринятого\r\n	);\r\n	\r\n 	// Читаем данные из сообщения *** XML-сериализация\r\n	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл\r\n		// Читаем очередное значение \r\n		Данные = ПрочитатьXML(ЧтениеXML);\r\n		\r\n		// Не переносим изменение, полученное в главный из неглавного,\r\n		// если есть регистрация изменения\r\n		//\r\n		// Мы сейчас работает с конкретной информационной базой, в этой\r\n		// базе зарегистрированы какие-то изменения каких-то объектов\r\n		// обмена для каких-то узлов. Здесь мы проверяем, зарегистрированы\r\n		// ли изменения для узла-отправителя объектов обмена, которые\r\n		// получены при чтении очередной порции данных. Если это так, и\r\n		// и отправитель не главный узел, мы отвергаем эти изменения.\r\n		// Это логично — чем изменения одного не главного узла лучше\r\n		// изменений другого не главного узла (т.е. изменения в нашей\r\n		// базе)? И тем более отвергаем изменения, если наш узел — главный.\r\n		Если\r\n			ПланыОбмена.ИзменениеЗарегистрировано(\r\n				ЧтениеСообщения.Отправитель,\r\n				Данные\r\n			)\r\n			И Не ЧтениеСообщения.Отправитель.Главный\r\n		Тогда\r\n			Сообщение = Новый СообщениеПользователю();\r\n			Сообщение.Текст = \" – Изменения отклонены\";\r\n			Сообщение.Сообщить();\r\n            Продолжить;\r\n		КонецЕсли;\r\n		\r\n		// Записать полученные данные\r\n		Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;\r\n		Данные.ОбменДанными.Загрузка = Истина;\r\n		Данные.Записать();\r\n\r\n	КонецЦикла;\r\n\r\n	ЧтениеСообщения.ЗакончитьЧтение();\r\n	ЧтениеXML.Закрыть();\r\n	УдалитьФайлы(ИмяФайла);\r\n\r\n	Сообщение = Новый СообщениеПользователю();\r\n	Сообщение.Текст = \"----- Конец загрузки -----\";\r\n	Сообщение.Сообщить();\r\n\r\nКонецПроцедуры\r\n[/язык]','2018-04-25 16:22:24'),(22,2,'Функциональные опции','','','','Функциональные опции позволяют разработчику выделить некоторую часть функциональности прикладного решения, которую можно оперативно включать или выключать на этапе внедрения и/или в процессе работы системы.','<p>\r\nФункциональные опции позволяют разработчику выделить некоторую часть функциональности прикладного решения, которую можно оперативно включать или выключать на этапе внедрения и/или в процессе работы системы.\r\n</p>\r\n\r\n<h2>Опции «Бухгалтерский учет» и «Расчет зарплаты»</h2>\r\n<p>\r\nПредположим, нам нужно отключить в конфигурации визможность ведения бухгалтерского учета и расчета заработной платы. Для отключения соответствующей функциональности мы создадим функциональные опции «Бухгалтерский учет» и «Расчет зарплаты», установим их для соответствующих объектов конфигурации и отключим их в режиме 1С:Предприятие.\r\n</p>\r\n<p>\r\nПоскольку значения функциональных опций обязательно должны где-то храниться, добавим сначала константы <code>БухгалтерскийУчет</code> и <code>РасчетЗарплаты</code> с типом <code>Булево</code>, в которых будут храниться значения функциональных опций.\r\n</p>\r\n<p>\r\n<img src=\"/files/article/22/1.jpg\" alt=\"Создание констант Бухгалтерский учет и Расчет зарплаты\" />\r\n</p>\r\n<p>\r\nЕсли значение константы <code>Истина</code>, значит, функциональная опция включена. Если значение <code>Ложь</code>, функциональная опция выключена.\r\n</p>\r\n<p>\r\nЗатем раскроем ветвь «Общие», выделим ветвь «Функциональные опции» и создадим функциональные опции «Бухгалтерский учет» и «Расчет зарплаты», указав в свойстве «Хранение» соответствующие\r\nконстанты.\r\n</p>\r\n<p>\r\n<img src=\"/files/article/22/2.jpg\" alt=\"Создание функциональных опций Бухгалтерский учет и Расчет зарплаты\" />\r\n</p>\r\n<p>\r\nТеперь нам нужно привязать объекты конфигурации к функциональным опциям. На закладке «Состав» отметим нужные объекты для функциональной опции «Бухгалтерский учет». Аналогично, на закладке «Состав» отметим нужные объекты для функциональной опции «Расчет зарплаты».\r\n</p>\r\n<p>\r\n<img src=\"/files/article/22/3.jpg\" alt=\"Состав объектов функциональной опции Бухгалтерский учет\" />\r\n</p>\r\n<p>\r\nТеперь, если мы откроем окно редактирования объекта конфигурации, входящего в состав функциональной опции «Бухгалтерский учет», то эта опция будет включена на закладке Функциональные опции окна редактирования этого объекта.\r\n<p>\r\n<img src=\"/files/article/22/4.jpg\" alt=\"Значение функциональных опций для объекта конфигурации\" />\r\n</p>\r\n<p>\r\nТаким образом, отображение объектов конфигурации в интерфейсе приложения зависит от того, включена связанная с ними функциональная опция или нет.\r\n</p>\r\n<p>\r\nДля остальных объектов конфигурации на закладке «Функциональные опции» ничего не отмечено. Если функциональная опция для объекта выключена, это значит, что данный объект не зависит от значения функциональной опции и отображается всегда.\r\n</p>\r\n<p>\r\n<img src=\"/files/article/22/5.jpg\" alt=\"Значение функциональных опций для объекта конфигурации\" />\r\n</p>\r\n<div class=\"note\">\r\n<p>\r\nЕсли включить в состав функциональной опции какую-либо подсистему, то мы вообще не увидим соответствующего раздела в «1С:Предприятии», пока данная функциональная опция отключена.\r\n</p>\r\n</div>\r\n<p>\r\nПосле этого раскроем ветвь «Общие формы» и откроем общую форму констант с именем <code>ОбщиеНастройки</code>. Нам нужно добавить в нее новые константы, чтобы затем в пользовательском режиме открывать форму констант и изменять значение функциональных опций.\r\n</p>\r\n<p>\r\nНа закладке «Реквизиты» этой формы раскроем основной реквизит <code>НаборКонстант</code> и перетащим константы <code>БухгалтерскийУчет</code> и <code>РасчетЗарплаты</code> в окно элементов формы.\r\n</p>\r\n<p>\r\n<img src=\"/files/article/22/6.jpg\" alt=\"Редактирование общей формы констант\" />\r\n</p>\r\n\r\n<h2>Опция «Учет клиентов»</h2>\r\n<p>\r\nРассмотрим еще один пример. «Поименный» учет клиентов при оказании услуг востребован далеко не всегда. Зачастую важен лишь сам факт оказания услуги, при этом «личность» клиента не имеет значения. Поэтому предусмотрим в нашей конфигурации возможность отключить ведение списка клиентов и избавимся от необходимости указывать клиента каждый раз при оказании услуги.\r\n</p>\r\n<p>\r\nТакже доработаем существующие функциональные опции, включив в них и подсистемы «Бухгалтерия» и «РасчетЗарплаты». Раз бухгалтерия не нужна, значит ее нет нигде.\r\n</p>\r\n<p>\r\nОткроем состав функциональной опции «Бухгалтерский учет» и добавим в него подсистему «Бухгалтерия». Аналогичным образом добавим в состав функциональной опции «РасчетЗарплаты» подсистему «РасчетЗарплаты».\r\n</p>\r\n<p>\r\n<img src=\"/files/article/22/7.jpg\" alt=\"Состав функциональной опций РасчетЗарплаты\" />\r\n</p>\r\n<p>\r\nТеперь займемся созданием новой функциональной опции. Для хранения этой опции добавим константу с именем <code>УчетКлиентов</code> с типом <code>Булево</code>. Добавим функциональную опцию «УчетКлиентов» и укажем, что ее значение будет храниться в константе <code>УчетКлиентов</code>. На закладке «Состав» укажем, какие объекты будут входить в эту функциональную опцию.\r\n</p>\r\n<ul>\r\n  <li>Прежде всего — справочник «Клиенты».</li>\r\n  <li>Затем — реквизит <code>Клиент</code> документа «ОказаниеУслуги».</li>\r\n  <li>И в заключение — измерение <code>Клиент</code> регистра накопления «Продажи».</li>\r\n</ul>\r\n<p>\r\n<img src=\"/files/article/22/8.jpg\" alt=\"Состав функциональной опции УчетКлиентов\" />\r\n</p>\r\n<p>\r\nТеперь доработаем общую форму «ОбщиеНастройки», с помощью которой мы устанавливаем значения функциональных опций. Прежде всего перенесем в состав элементов формы нашу новую константу <code>УчетКлиентов</code>. После этого обеспечим автоматическую перерисовку интерфейса прикладного решения после установки новых значений функциональных опций.\r\nДля этого добавим обработчик события формы <code>ПослеЗаписи</code>.\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ПослеЗаписи(ПараметрыЗаписи)\r\n    ОбновитьИнтерфейс();\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\n<code>ОбновитьИнтерфейс()</code> — это метод глобального контекста, который обновляет командный интерфейс, начальную страницу и открытые формы с учетом текущих значений функциональных опций и их параметров.\r\n</p>','2018-04-30 17:55:23'),(24,2,'Как работает механизм регистрации изменений','','','','Механизм регистрации изменений используется для обмена данными. При выполнении обмена из базы-источника в базу-приемник передаются не все данные, а только те, для которых были зарегистрированы изменения. В 1С регистрация изменений доступна для следующих объектов: константа, справочник, документ…','<p>\r\nМеханизм регистрации изменений используется для обмена данными. При выполнении обмена из базы-источника в базу-приемник передаются не все данные, а только те, для которых были зарегистрированы изменения. В 1С:Предприятие регистрация изменений доступна для следующих объектов:\r\n</p>\r\n<ul>\r\n  <li>константа;</li>\r\n  <li>справочник;</li>\r\n  <li>документ;</li>\r\n  <li>план счетов;</li>\r\n  <li>план видов характеристик;</li>\r\n  <li>план видов расчета;</li>\r\n  <li>бизнес процесс;</li>\r\n  <li>задача.</li>\r\n</ul>\r\n<p>\r\nА так же для наборов записей:\r\n</p>\r\n<ul>\r\n  <li>регистра сведений;</li>\r\n  <li>регистра бухгалтерии;</li>\r\n  <li>регистра накопления;</li>\r\n  <li>регистра расчета;</li>\r\n  <li>перерасчета.</li>\r\n</ul>\r\n\r\n<h2>Где хранится информация о зарегистрированных изменениях</h2>\r\n<p>\r\nКаждое изменение регистрируется в специальных служебных таблицах, в названии которых в конце есть слово «Изменения», например, таблица изменений для справочника контрагентов будет называться <code>Контрагенты.Изменения</code>.\r\n</p>\r\n<p>\r\nСтруктура таблицы изменений подобна для всех объектов:\r\n</p>\r\n<ul>\r\n  <li>ключ элемента данных, для которого регистрируются изменения;</li>\r\n  <li>ссылка на узел, для которого регистрируется изменение;</li>\r\n  <li>номер сообщения, в котором было передано изменение.</li>\r\n</ul>\r\n<p>\r\nЗапись в таблице изменений проходит следующим образом:\r\n</p>\r\n<ol>\r\n  <li>При регистрации изменения объекта создаются записи для всех узлов обмена, в которых этот объект должен быть зарегистрирован. При этом в графе <code>НомерСообщения</code> устанавливается значение <code>NULL</code>.</li>\r\n  <li>При отправке данных в другую информационную базу в графе <code>НомерСообщения</code> устанавливается порядковый номер переданного сообщения.</li>\r\n  <li>При получении данных из другой информационной базы передается номер последнего принятого сообщения. При этом из таблиц изменений удаляются строки, в которых номер сообщения меньше или равен принятому в другой базе. Таким образом удаляется регистрация изменений, которые уже были переданы и прием которых подтвержден.</li>\r\n</ol>\r\n\r\n<h2>Как сделать запрос к таблице изменений</h2>\r\n<p>\r\nТаблицы изменений по умолчанию не видны в конструкторе запросов. Но их можно вывести с помощью кнопки «Отображать таблицы изменений».\r\n</p>\r\n<p>\r\n<img src=\"/files/article/24/1.jpg\" alt=\"\" />\r\n<p>\r\nПример запроса к таблице изменений:\r\n</p>\r\n[запрос]\r\nВЫБРАТЬ\r\n    КонтрагентыИзменения.Узел,\r\n    КонтрагентыИзменения.НомерСообщения,\r\n    КонтрагентыИзменения.Ссылка\r\nИЗ\r\n    Справочник.Контрагенты.Изменения КАК КонтрагентыИзменения\r\n[/запрос]\r\n\r\n<h2>Как зарегистрировать изменение объекта</h2>\r\n<p>\r\nДля ручной регистрации изменений объектов существует обработка <a href=\"https://its.1c.ru/db/metod8dev/content/5013/hdoc\">Регистрация изменений для обмена</a>.\r\n</p>\r\n<p>\r\nИзменения данных могут регистрироваться в автоматическом режиме. Для этого необходимо при включении объекта метаданных в состав плана обмена разрешить автоматическую регистрацию: установить для свойства <code>Авторегистрация</code> значение <code>Разрешить</code>.\r\n</p>\r\n<p>\r\nДля того чтобы зарегистрироваться изменения вручную, у менеджера планов обмена существует функция <code>ЗарегистрироватьИзменения()</code>. Функция имеет два параметра: <code>Узел</code> и <code>Данные</code>.\r\n</p>\r\n\r\n<h3>Как зарегистрировать все изменения для узла</h3>\r\n<p>\r\nДля того, чтобы зарегистрировать все изменения для конкретного узла, нужно в первом параметре передать ссылку на узел, а во втором — значение <code>Неопределено</code>.\r\n</p>\r\n[язык]\r\nПланыОбмена.ЗарегистрироватьИзменения(Узел, Неопределено);\r\n[/язык]\r\n\r\n<h3>Как зарегистрировать все изменения объектов определенного типа</h3>\r\n<p>\r\nДля того, чтобы зарегистрировать изменения объектов определенного типа, нужно в первом параметре передать ссылку на узел, а во втором — объект описания метаданных.\r\n</p>\r\n[язык]\r\nПланыОбмена.ЗарегистрироватьИзменения(Узел, Метаданные.Справочники.Номенклатура);\r\n[/язык]\r\n\r\n<h3>Как зарегистрировать все изменения конкретных объектов</h3>\r\n<p>\r\nДля того, чтобы зарегистрировать изменение конкретного объекта, нужно в первом параметре передать ссылку на узел, а во втором — ссылку на объект.\r\n</p>\r\n[язык]\r\nПланыОбмена.ЗарегистрироватьИзменения(Узел, СправочникСсылка);\r\n[/язык]\r\n<p>\r\nДля регистрации изменений наборов записей регистров, подчиненных регистратору, необходимо вызвать метод <code>ЗарегистрироватьИзменения()</code> менеджера планов обмена, передав ему в качестве параметра <code>Данные</code> набор записей с установленным отбором, в котором в элемент отбора <code>Регистратор</code> установлено значение регистратора данного набора записей. При этом чтение данных набора записей перед его регистрацией не обязательно.\r\n</p>\r\n<p>\r\nДля регистрации изменений наборов записей независимого регистра необходимо вызвать метод <code>ЗарегистрироватьИзменения()</code> менеджера планов обмена, передав ему в качестве параметра Данные набор записей. Состав элементов отбора при этом, должен строго соответствовать основному отбору регистра.\r\n</p>\r\n[язык]\r\nНабор = РегистрыСведений.КомплектующиеНоменклатуры.СоздатьНаборЗаписей();\r\n\r\nНабор.Отбор.Номенклатура.Значение = Номенклатура;\r\nНабор.Отбор.Номенклатура.Использование = Истина;\r\nНабор.Отбор.ХарактеристикаНоменклатуры.Значение = ХарактеристикаНоменклатуры;\r\nНабор.Отбор.ХарактеристикаНоменклатуры.Использование = Истина;\r\n\r\nПланыОбмена.ЗарегистрироватьИзменения(Узел, Набор);\r\n[/язык]\r\n\r\n<h2>Как удалить регистрацию изменений</h2>\r\n<p>\r\nДля того чтобы удалить информацию о зарегистрированных изменениях у менеджера планов обмена существует функция <code>УдалитьРегистрациюИзменений()</code>. Функция имеет два параметра: <code>Узел</code> и </code>НомерСообщения</code>.\r\n</p>\r\n\r\n<h3>Как удалить регистрацию изменений полностью</h3>\r\n<p>\r\nЕсли необходимо удалить всю информацию о зарегистрированных изменениях для конкретного узла, то второй параметр следует оставить пустым:\r\n</p>\r\n[язык]\r\nПланыОбмена.УдалитьРегистрациюИзменений(Узел);\r\n[/язык]\r\n\r\n<h3>Как удалить регистрацию изменений с номером сообщения не больше заданного</h3>\r\n<p>\r\nЕсли необходимо удалить информацию о зарегистрированных изменениях и при этом известен номер последнего полученного второй базой сообщения, то нужно передать этот номер сообщения в качестве второго параметра:\r\n</p>\r\n[язык]\r\nПланыОбмена.УдалитьРегистрациюИзменений(Узел, НомерСообщения);\r\n[/язык]\r\n<p>\r\nНапример, если номер сообщения равен 2, то из таблиц изменений будут удалены все записи с номерами 1 и 2.\r\n</p>','2018-05-28 14:57:00');
/*!40000 ALTER TABLE `article_items` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_categories`
--

DROP TABLE IF EXISTS `blog_categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_categories` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор категории',
  `parent` int(11) unsigned NOT NULL DEFAULT '0' COMMENT 'Идентификатор родительской категории',
  `name` varchar(255) NOT NULL COMMENT 'Наименование категории',
  `keywords` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега keywords',
  `description` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега description',
  `sortorder` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Порядок сортировки',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=18 DEFAULT CHARSET=utf8 COMMENT='Категории блога';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_categories`
--

LOCK TABLES `blog_categories` WRITE;
/*!40000 ALTER TABLE `blog_categories` DISABLE KEYS */;
INSERT INTO `blog_categories` VALUES (1,0,'Web-разработка','','',1),(2,0,'1С:Предприятие','','',2),(3,0,'ОС Linux','','',3),(4,1,'HTML и CSS','','',1),(5,1,'JavaScript и jQuery','','',2),(6,1,'PHP и MySQL','','',3),(7,2,'Программирование','','',1),(8,2,'Язык запросов','','',2),(9,3,'Команды','','',1),(10,3,'Сценарии','','',2),(11,1,'Разное','','',6),(12,2,'Разное','','',3),(13,3,'Разное','','',3),(14,1,'Python и Flask','','',5),(17,1,'Битрикс и другие','','',4);
/*!40000 ALTER TABLE `blog_categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_post_tag`
--

DROP TABLE IF EXISTS `blog_post_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_post_tag` (
  `post_id` int(11) unsigned NOT NULL COMMENT 'Идентификатор поста',
  `tag_id` int(11) unsigned NOT NULL COMMENT 'Идентификатор тега',
  PRIMARY KEY (`post_id`,`tag_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Связь пост-тег';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_post_tag`
--

LOCK TABLES `blog_post_tag` WRITE;
/*!40000 ALTER TABLE `blog_post_tag` DISABLE KEYS */;
INSERT INTO `blog_post_tag` VALUES (3,7),(3,9),(3,14),(3,170),(3,171),(4,8),(4,9),(4,87),(5,7),(5,9),(5,86),(7,7),(7,9),(7,55),(9,7),(9,9),(10,5),(10,9),(13,7),(13,9),(13,47),(13,56),(13,58),(13,138),(14,7),(14,9),(14,88),(14,89),(15,7),(15,9),(15,88),(17,6),(17,9),(17,58),(17,138),(17,200),(18,3),(18,7),(18,9),(18,35),(18,47),(18,56),(18,57),(18,58),(19,9),(19,95),(19,96),(20,9),(20,95),(20,96),(21,9),(21,95),(21,96),(22,9),(22,95),(22,96),(24,7),(24,8),(24,9),(24,35),(24,47),(25,7),(25,8),(25,9),(25,35),(26,7),(26,9),(26,35),(26,47),(27,7),(27,8),(27,9),(30,3),(30,4),(30,5),(30,6),(30,9),(31,1),(31,2),(31,15),(31,29),(31,35),(31,37),(31,40),(32,20),(32,40),(32,52),(32,139),(32,183),(33,20),(33,39),(33,139),(33,183),(34,1),(34,2),(34,28),(34,31),(34,48),(35,1),(35,2),(35,15),(35,29),(36,1),(36,2),(36,28),(36,31),(36,48),(37,20),(37,38),(37,183),(38,1),(38,2),(38,15),(38,29),(39,1),(39,2),(39,15),(39,29),(40,10),(40,50),(40,62),(40,63),(41,20),(41,31),(41,36),(41,48),(42,10),(42,32),(42,33),(42,34),(43,1),(43,2),(43,15),(43,29),(43,31),(43,48),(44,20),(44,35),(44,36),(44,37),(44,144),(44,196),(45,9),(45,20),(45,35),(46,9),(46,20),(46,35),(46,36),(46,37),(46,144),(46,196),(47,9),(47,20),(47,36),(47,41),(48,1),(48,2),(48,15),(48,29),(49,9),(49,14),(49,42),(49,43),(49,44),(50,1),(50,2),(50,15),(50,29),(50,131),(51,10),(52,9),(52,20),(52,69),(53,9),(53,20),(53,36),(55,1),(55,2),(55,15),(55,29),(56,10),(56,34),(56,46),(56,60),(56,73),(57,1),(57,2),(57,15),(57,29),(58,9),(58,20),(58,36),(59,10),(59,34),(59,46),(59,104),(59,119),(59,120),(60,9),(60,20),(60,36),(61,9),(61,20),(61,36),(61,47),(62,9),(62,20),(62,36),(62,99),(63,1),(63,2),(63,15),(63,29),(64,1),(64,2),(64,15),(64,29),(64,35),(64,48),(65,9),(65,20),(65,36),(66,1),(66,2),(66,15),(66,29),(67,1),(67,15),(67,29),(68,1),(68,2),(68,15),(68,16),(68,29),(68,65),(68,82),(69,1),(69,29),(69,49),(69,160),(69,163),(70,1),(70,29),(70,49),(71,9),(71,20),(71,36),(71,55),(72,10),(72,50),(72,154),(72,155),(72,156),(72,157),(72,158),(72,159),(72,255),(73,10),(73,34),(73,67),(73,109),(73,110),(74,10),(74,50),(74,53),(74,66),(74,108),(75,1),(75,2),(75,15),(75,16),(75,17),(75,18),(75,29),(75,98),(75,130),(76,1),(76,2),(76,15),(76,16),(76,17),(76,29),(76,80),(76,81),(77,7),(77,9),(77,54),(78,9),(78,20),(78,36),(78,64),(79,1),(79,2),(79,15),(79,29),(79,79),(79,84),(80,1),(80,15),(80,29),(80,46),(80,65),(80,76),(81,1),(81,15),(81,29),(81,65),(81,76),(81,79),(81,80),(81,83),(81,152),(83,9),(83,20),(83,68),(84,10),(84,28),(84,70),(84,71),(84,140),(85,9),(85,20),(85,72),(86,1),(86,15),(86,16),(86,17),(86,18),(86,29),(86,98),(87,10),(87,34),(87,40),(87,46),(87,73),(87,104),(88,9),(88,20),(88,36),(88,74),(88,75),(89,1),(89,2),(89,15),(89,29),(89,65),(89,77),(90,2),(90,15),(90,29),(90,46),(90,65),(90,78),(91,1),(91,2),(91,15),(91,29),(91,35),(91,85),(92,7),(92,9),(92,90),(92,91),(92,92),(92,93),(92,94),(92,179),(93,1),(93,31),(93,48),(93,97),(94,9),(94,20),(94,36),(94,98),(94,99),(95,10),(95,34),(95,100),(95,101),(96,2),(96,15),(96,29),(96,102),(96,103),(97,10),(97,34),(97,60),(97,104),(97,105),(97,145),(98,10),(98,34),(98,40),(98,50),(98,61),(98,104),(98,105),(99,9),(99,20),(99,36),(99,106),(100,1),(100,15),(100,29),(100,46),(100,65),(101,1),(101,2),(101,15),(101,29),(101,35),(101,85),(101,107),(102,10),(102,34),(102,40),(102,46),(102,104),(102,119),(103,1),(103,15),(103,16),(103,29),(103,98),(103,111),(104,10),(104,104),(104,112),(104,114),(104,134),(105,10),(105,116),(105,139),(105,183),(106,10),(106,117),(106,118),(106,183),(107,10),(107,46),(107,101),(107,104),(107,121),(107,122),(108,10),(108,34),(108,40),(108,46),(108,50),(108,61),(108,123),(109,10),(109,34),(109,124),(109,125),(109,126),(109,127),(109,183),(110,1),(110,15),(110,29),(110,128),(110,129),(111,10),(111,50),(111,112),(111,132),(111,133),(112,10),(112,34),(112,112),(112,132),(112,133),(112,134),(113,1),(113,15),(113,29),(113,135),(113,139),(113,152),(113,153),(113,183),(114,10),(114,34),(114,116),(114,126),(114,127),(114,136),(114,146),(115,10),(115,34),(115,67),(115,119),(115,136),(115,146),(116,10),(116,112),(116,119),(116,122),(116,132),(116,133),(116,134),(117,10),(117,50),(117,104),(117,112),(117,121),(117,132),(117,133),(117,134),(118,8),(118,9),(118,87),(118,140),(119,7),(119,8),(119,9),(119,95),(119,141),(119,168),(119,170),(120,10),(120,46),(120,114),(120,134),(120,142),(120,143),(120,144),(120,255),(121,10),(121,34),(121,105),(121,145),(121,146),(122,10),(122,34),(122,40),(122,104),(122,120),(122,147),(123,3),(123,4),(123,5),(123,7),(123,9),(123,95),(123,141),(123,148),(123,214),(124,7),(124,9),(124,95),(124,141),(124,151),(125,7),(125,9),(125,54),(125,149),(126,1),(126,2),(126,29),(126,65),(126,135),(126,153),(127,1),(127,15),(127,29),(127,65),(127,160),(128,3),(128,4),(128,7),(128,9),(128,95),(128,141),(128,214),(129,7),(129,9),(129,95),(129,141),(129,162),(130,9),(130,95),(130,141),(130,161),(130,191),(130,192),(131,7),(131,9),(131,163),(132,1),(132,15),(132,29),(132,43),(132,122),(133,9),(133,10),(133,88),(133,141),(133,218),(133,219),(134,10),(134,34),(134,146),(134,164),(134,165),(134,166),(134,167),(135,7),(135,9),(135,14),(135,91),(135,92),(135,94),(135,168),(135,170),(135,179),(136,7),(136,9),(136,95),(136,141),(136,169),(137,9),(137,14),(137,92),(137,170),(138,7),(138,9),(138,95),(138,141),(138,151),(138,172),(138,173),(138,214),(139,1),(139,2),(139,15),(139,29),(139,35),(139,37),(139,60),(139,140),(139,174),(139,176),(139,177),(139,178),(140,10),(140,12),(140,32),(140,34),(140,40),(140,61),(141,1),(141,35),(141,37),(141,140),(141,174),(141,176),(141,177),(141,178),(142,7),(142,9),(142,15),(142,90),(142,91),(142,92),(142,93),(142,94),(142,179),(143,7),(143,9),(143,95),(143,141),(143,148),(143,173),(143,180),(143,195),(143,220),(143,223),(143,225),(145,9),(145,95),(145,141),(145,214),(146,10),(146,34),(146,139),(146,167),(146,181),(146,182),(146,183),(147,9),(147,95),(147,141),(147,148),(147,151),(147,161),(147,173),(147,184),(147,185),(147,186),(147,195),(148,9),(148,95),(148,141),(148,148),(148,173),(148,184),(148,185),(149,10),(149,12),(149,61),(149,182),(150,9),(150,95),(150,141),(150,161),(150,188),(150,189),(150,190),(150,191),(150,192),(151,9),(151,95),(151,141),(151,148),(151,173),(151,193),(151,194),(151,195),(151,224),(151,261),(152,9),(152,95),(152,141),(152,148),(152,173),(152,194),(152,195),(153,1),(153,2),(153,35),(153,37),(153,144),(153,196),(153,197),(153,198),(153,199),(154,9),(154,95),(154,141),(154,148),(154,151),(154,173),(154,184),(154,195),(154,208),(156,1),(156,2),(156,35),(156,37),(156,140),(156,201),(157,1),(157,35),(157,37),(157,60),(157,140),(157,202),(158,9),(158,95),(158,141),(158,161),(158,173),(158,180),(158,192),(158,195),(158,220),(158,225),(159,9),(159,85),(159,95),(159,138),(159,141),(159,148),(159,173),(159,195),(160,9),(160,95),(160,141),(161,9),(161,40),(161,95),(161,141),(161,161),(161,191),(161,203),(162,3),(162,5),(162,9),(162,204),(162,214),(163,9),(163,85),(163,95),(163,141),(163,148),(163,173),(163,205),(164,2),(164,14),(164,206),(165,9),(165,95),(165,138),(165,141),(165,148),(165,173),(166,9),(166,95),(166,139),(166,141),(166,161),(166,191),(166,207),(166,208),(167,9),(167,95),(167,138),(167,141),(167,148),(167,173),(167,209),(167,210),(168,9),(168,95),(168,138),(168,141),(168,148),(168,173),(168,209),(168,210),(169,9),(169,95),(169,138),(169,141),(169,148),(169,173),(169,209),(169,210),(169,214),(170,95),(170,141),(170,161),(170,173),(170,191),(170,211),(170,212),(171,2),(171,9),(171,15),(171,42),(171,44),(172,9),(172,95),(172,141),(172,148),(172,173),(172,215),(172,216),(172,217),(173,9),(173,35),(173,37),(173,95),(173,140),(173,141),(173,189),(173,190),(173,221),(174,9),(174,95),(174,140),(174,141),(174,259),(175,9),(175,95),(175,141),(175,161),(175,173),(175,180),(175,192),(175,220),(175,222),(175,225),(176,9),(176,95),(176,141),(176,173),(176,227),(177,5),(177,6),(177,7),(177,9),(177,20),(177,72),(178,1),(178,15),(178,29),(178,43),(178,122),(178,226),(179,9),(179,36),(179,95),(179,141),(179,173),(179,227),(179,237),(180,9),(180,95),(180,141),(180,148),(180,173),(180,214),(180,227),(180,229),(180,230),(181,9),(181,31),(181,48),(181,92),(181,95),(181,141),(181,186),(181,188),(181,239),(182,5),(182,6),(182,9),(182,58),(182,138),(182,200),(182,232),(182,233),(183,9),(183,95),(183,140),(183,141),(183,227),(183,234),(183,235),(183,237),(183,259),(184,9),(184,95),(184,141),(184,227),(184,236),(184,237),(184,259),(185,9),(185,95),(185,141),(185,148),(185,173),(185,191),(185,194),(185,195),(185,216),(185,217),(186,9),(186,95),(186,141),(186,148),(186,173),(186,191),(186,194),(186,195),(186,216),(186,217),(187,9),(187,95),(187,141),(188,9),(188,48),(188,95),(188,141),(188,161),(188,188),(188,191),(188,192),(189,9),(189,31),(189,48),(189,92),(189,186),(189,188),(189,238),(189,239),(190,9),(190,65),(190,95),(190,141),(190,187),(190,240),(190,241),(191,1),(191,9),(191,14),(191,15),(191,47),(191,56),(191,58),(191,59),(191,138),(191,239),(191,242),(191,243),(192,5),(192,9),(192,72),(192,242),(192,244),(192,245),(193,9),(193,95),(193,141),(193,148),(193,161),(193,173),(193,191),(193,192),(194,9),(194,95),(194,141),(194,148),(194,161),(194,173),(194,191),(194,192),(195,9),(195,95),(195,141),(195,148),(195,161),(195,173),(195,191),(195,192),(196,9),(196,95),(196,141),(196,148),(196,161),(196,173),(196,191),(196,192),(197,7),(197,9),(197,54),(197,72),(197,129),(197,141),(197,246),(197,247),(198,1),(198,9),(198,14),(198,15),(198,47),(198,58),(198,138),(198,242),(198,243),(198,250),(198,251),(199,9),(199,47),(199,122),(199,249),(199,250),(200,5),(200,7),(200,9),(200,47),(200,168),(200,242),(200,244),(200,245),(200,250),(201,5),(201,9),(201,244),(201,255),(201,256),(202,5),(202,7),(202,9),(202,57),(202,252),(203,9),(203,95),(203,141),(203,182),(203,189),(203,190),(203,214),(203,225),(203,253),(204,9),(204,95),(204,141),(204,161),(204,192),(204,193),(204,254),(205,9),(205,95),(205,141),(205,161),(205,191),(205,254),(206,5),(206,9),(206,255),(206,256),(207,9),(207,36),(207,95),(207,141),(207,170),(207,255),(208,9),(208,36),(208,95),(208,141),(208,161),(208,173),(209,9),(209,36),(209,95),(209,141),(210,9),(210,87),(210,95),(210,141),(210,161),(210,187),(210,241),(210,257),(211,87),(211,95),(211,141),(211,187),(211,241),(212,9),(212,87),(212,95),(212,140),(212,141),(212,241),(212,257),(212,259),(213,9),(213,35),(213,37),(213,95),(213,141),(213,144),(213,149),(213,196),(213,241),(214,9),(214,95),(214,141),(214,149),(214,224),(214,241),(214,260),(215,9),(215,95),(215,141),(215,224),(216,4),(216,9),(216,65),(216,129),(216,254),(217,9),(217,95),(217,141),(217,161),(217,191),(217,192),(218,9),(218,87),(218,95),(218,141),(218,161),(219,9),(219,95),(219,141),(219,173),(219,193),(219,224),(219,261),(220,7),(220,8),(220,9),(220,87),(220,187),(220,262);
/*!40000 ALTER TABLE `blog_post_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_posts`
--

DROP TABLE IF EXISTS `blog_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_posts` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор поста',
  `category` int(11) unsigned NOT NULL COMMENT 'Идентификатор категории, внешний ключ',
  `name` varchar(255) NOT NULL COMMENT 'Заголовок поста блога',
  `keywords` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега keywords',
  `description` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега description',
  `search` varchar(1000) NOT NULL DEFAULT '' COMMENT 'Для поиска по постам блога',
  `excerpt` varchar(1000) NOT NULL COMMENT 'Анонс поста блога',
  `body` text NOT NULL COMMENT 'Текст поста блога в формате html',
  `added` datetime NOT NULL COMMENT 'Дата публикации',
  `visible` tinyint(1) NOT NULL DEFAULT '1' COMMENT 'Доступность для просмотра',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=221 DEFAULT CHARSET=utf8 COMMENT='Посты (записи) блога';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_posts`
--

LOCK TABLES `blog_posts` WRITE;
/*!40000 ALTER TABLE `blog_posts` DISABLE KEYS */;
INSERT INTO `blog_posts` VALUES (25,6,'Как узнать сколько раз скачали файл?','PHP MySQL скачивание файлов счетчик количество скачиваний','PHP-скрипт для подсчета количества скачиваний файла','MySQL, PHP, Web-разработка, Файл','Допустим, у вас на сайте есть раздел Downloads, где посетитель может скачать скрипты, музыку, фотографии и т.п. Но как узнать, какие файлы пользуются успехом, а какие лежат мертвым грузом (и их можно безболезненно удалить, чтобы не занимали место)? Выход — счетчик скачиваний.','<p>\r\nДопустим, у вас на сайте есть раздел Downloads, где посетитель может скачать скрипты, музыку, фотографии и т.п. Но как узнать, какие файлы пользуются успехом, а какие лежат мертвым грузом (и их можно безболезненно удалить, чтобы не занимали место)? Выход — счетчик скачиваний. Обычно этот счетчик устанавливается рядом со ссылкой на скачиваемый документ:\r\n<p>\r\n[html]<a href=\"/downloads/download.php?id=178\">NotePadPP.zip</a>, скачали 57 раз(а)[/html]\r\n<p>\r\nПусть информация о файлах для скачивания у нас хранится в таблице базы данных, которая имеет следующую структуру:\r\n</p>\r\n[mysql]CREATE TABLE `files` (\r\n  `id` INT(10) PRIMARY KEY,\r\n  `title` VARCHAR(255) NOT NULL DEFAULT \'\',\r\n  `description` TEXT NOT NULL DEFAULT \'\',\r\n  `filename` VARCHAR(64) NOT NULL DEFAULT \'\',\r\n  `mimetype` VARCHAR(8) NOT NULL DEFAULT \'\'\r\n) ENGINE=INNODB DEFAULT CHARSET=cp1251;[/mysql]\r\n<p>\r\nЗдесь\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">id</span> — уникальный ID файла</li>\r\n  <li><span style=\"color: blue;\">title</span> — название файла, например, «Текстовой редактор NotePad++»</li>\r\n  <li><span style=\"color: blue;\">description</span> — описание файла, например, «Бесплатный редактор текстовых файлов с поддержкой синтаксиса большого количества языков программирования, ориентирован для работы в операционной системе MS Windows»</li>\r\n  <li><span style=\"color: blue;\">filename</span> — имя файла для скачивания, например, NotePadPP.zip</li>\r\n  <li><span style=\"color: blue;\">mimetype</span> — MIME-тип файла</li>\r\n</ul>\r\n<p>\r\nФайлы для скачивания расположены в директории <span style=\"color: blue;\">DOCUMENT_ROOT/downloads/files/</span>. Эта директория защищена с помощью <span style=\"color: blue;\">.htaccess</span>, чтобы посетитель не мог скачать файл напрямую, минуя наш счетчик:\r\n</p>\r\n[code]Order Allow,Deny\r\nDeny from All[/code]\r\n<p>\r\nФайл <span style=\"color: blue;\">DOCUMENT_ROOT/downloads/index.php</span> выводит список всех файлов, доступных для скачивания, а файл <span style=\"color: blue;\">DOCUMENT_ROOT/downloads/download.php</span> отдает файлы на скачивание и подсчитывает количество скачиваний.\r\n</p>\r\n<p>\r\nФайл <span style=\"color: blue;\">DOCUMENT_ROOT/downloads/index.php</span>\r\n</p>\r\n[php]\r\n<?php\r\n$query = \"SELECT `id`, `title`, `description`, `mimetype` FROM `files` WHERE 1 ORDER BY `title`\";\r\n$res = mysql_query( $query );\r\necho \'<table border=\"1\">\'.\"\\n\";\r\necho \'<tr><th>№</th><th>Наименование</th><th>Описание</th><th>Тип</th><th>Скачать</th></tr>\'.\"\\n\";\r\n$i = 1;\r\nwhile ($file = mysql_fetch_array($res)) {\r\n  echo \'<tr>\';\r\n  echo \'<td>\'.$i.\'</td>\';\r\n  echo \'<td>\'.$file[\'title\'].\'</td>\';\r\n  echo \'<td>\'.$file[\'description\'].\'</td>\';\r\n  echo \'<td>\'.$file[\'mimetype\'].\'</td>\';\r\n  echo \'<td><a href=\"/downloads/download.php?id=\'.$row[\'id\'].\'\" target=\"_blank\">Скачать</a></td>\';\r\n  echo \'</tr>\'.\"\\n\";\r\n  $i++;\r\n}\r\necho \'</table>\'.\"\\n\";\r\n[/php]\r\n<p>\r\nФайл <span style=\"color: blue;\">DOCUMENT_ROOT/downloads/download.php</span>\r\n</p>\r\n[php]\r\n<?php\r\nif ( !isset( $_GET[\'id\'] ) ) {\r\n  // если не передан ID файла\r\n  header (\"HTTP/1.0 404 Not Found\");\r\n  die();\r\n}\r\n$id = (int)$_GET[\'id\'];\r\nif ( $id < 1 ) {\r\n  header (\"HTTP/1.0 404 Not Found\");\r\n  die();\r\n}\r\n// имя файла для скачивания\r\n$query = \"SELECT `filename`, `mimetype` FROM `files` WHERE `id`=\".$id;\r\n$res = mysql_query( $query );\r\nif( mysql_num_rows( $res ) == 0 ) {\r\n  header ( \'HTTP/1.1 404 Not Found\' );\r\n  die();\r\n}\r\nlist( $filename, $mimetype ) = mysql_fetch_row( $res );\r\n// если файла нет\r\nif( !file_exists( \'./files/\'.$filename ) ) {\r\n  header ( \'HTTP/1.1 404 Not Found\' );\r\n  die();\r\n}\r\n// сообщаем размер файла\r\nheader( \'Content-Length: \'.filesize(\'./files/\'.$filename) );\r\n// дата модификации файла для кеширования\r\nheader( \'Last-Modified: \'.date(\"D, d M Y H:i:s T\", filemtime(\'./files/\'.$filename)) );\r\n// сообщаем тип данных\r\nswitch( $mimetype ) {\r\n  case \'pdf\' : $ctype = \'application/pdf\'; break;\r\n  case \'zip\' : $ctype = \'application/zip\'; break;\r\n  case \'doc\' : $ctype = \'application/msword\'; break;\r\n  case \'xls\' : $ctype = \'application/vnd.ms-excel\'; break;\r\n  case \'gif\' : $ctype = \'image/gif\'; break;\r\n  case \'png\' : $ctype = \'image/png\'; break;\r\n  case \'jpeg\':\r\n  case \'jpg\' : $ctype = \'image/jpg\'; break;\r\n  case \'mp3\' : $ctype = \'audio/mpeg\'; break;\r\n  case \'wav\' : $ctype = \'audio/x-wav\'; break;\r\n  case \'mpeg\':\r\n  case \'mpg\' :\r\n  case \'mpe\' : $ctype = \'video/mpeg\'; break;\r\n  case \'mov\' : $ctype = \'video/quicktime\'; break;\r\n  case \'avi\' : $ctype = \'video/x-msvideo\'; break;\r\n  default    : $ctype = \'application/octet-stream\';\r\n}\r\nheader( \'Content-Type: \'.$ctype );\r\n// файл будет получен с именем $filename\r\nheader(\'Content-Disposition: attachment; filename=\"\'.$filename.\'\"\');\r\n// начинаем передачу содержимого файла\r\nreadfile( \'./files/\'.$filename );\r\n\r\n// увеличиваем счетчик количества закачек\r\nmysql_query( \"UPDATE `files` SET `count`=`count`+1 WHERE `id`=\".$id );\r\n[/php]','2008-06-26 07:40:37',1),(93,13,'Язык обработки шаблонов awk','','','Linux, RegExp, awk, Шаблон','Awk — скриптовый язык построчного разбора и обработки входного потока (например, текстового файла) по заданным шаблонам (регулярным выражениям). Часто используется в сценариях командной строки. С помощью языка awk можно объявлять переменные, использовать арифметические и строковые операторы…','<p>\r\nAwk — скриптовый язык построчного разбора и обработки входного потока (например, текстового файла) по заданным шаблонам (регулярным выражениям). Часто используется в сценариях командной строки. С помощью языка awk можно выполнять следующие действия:\r\n</p>\r\n<ul>\r\n  <li>Объявлять переменные для хранения данных.</li>\r\n  <li>Использовать арифметические и строковые операторы для работы с данными.</li>\r\n  <li>Использовать управляющие операторы и циклы, что позволяет реализовать сложные алгоритмы.</li>\r\n  <li>Создавать форматированные отчёты.</li>\r\n</ul>\r\n<p>\r\nВызов awk выглядит так:\r\n</p>\r\n[code]\r\nawk [grn][опции][/grn] [red][программа][/red] [grn][файл][/grn]\r\n[/code]\r\n<p>\r\nAwk рассматривает входной поток как набор записей. Каждая запись делится на поля. По умолчанию разделителем записей является символ новой строки (то есть записи — это строки), разделителем полей — символ пробела или табуляции. Символы-разделители можно явно определить в программе.\r\n</p>\r\n<p>\r\nОпции:\r\n</p>\r\n<ul>\r\n  <li><code>-F fs</code> — позволяет указать символ-разделитель для полей в записи.</li>\r\n  <li><code>-f file</code> — указывает имя файла, из которого нужно прочесть awk-скрипт.</li>\r\n  <li><code>-v var=value</code> — позволяет объявить переменную и задать её значение по умолчанию.</li>\r\n  <li><code>-mf N</code> — задаёт максимальное число полей для обработки в файле данных.</li>\r\n  <li><code>-mr N</code> — задаёт максимальный размер записи в файле данных.</li>\r\n</ul>\r\n\r\n<h2>Чтение awk-скриптов из командной строки</h2>\r\n<p>\r\nСкрипты awk, которые можно писать прямо в командной строке, оформляются в виде текстов команд, заключённых в фигурные скобки. Кроме того, текст скрипта нужно заключить в одинарные кавычки:\r\n</p>\r\n[cli]\r\n$ awk \'{print \"Welcome to awk\"}\'\r\nПервая запись\r\nWelcome to awk\r\nВторая запись\r\nWelcome to awk\r\n[/cli]\r\n<p>\r\nПри вызове не указан файл с данными, поэтому awk ожидает поступления данных из <code>STDIN</code>. Чтобы завершить работу awk, нужно передать ему символ конца файла, воспользовавшись сочетанием клавиш <code>CTRL+D</code>.\r\n</p>\r\n\r\n<h2>Позиционные переменные, хранящие данные полей</h2>\r\n<p>\r\nОдна из основных функций awk заключается в возможности манипулировать данными в текстовых файлах. Делается это путём автоматического назначения переменной каждому элементу в строке. По умолчанию awk назначает следующие переменные каждому полю данных, обнаруженному им в записи:\r\n</p>\r\n<ul>\r\n  <li><code>$0</code> — представляет всю строку текста (запись)</li>\r\n  <li><code>$1</code> — первое поле в записи (строке)</li>\r\n  <li><code>$2</code> — второе поле в записи (строке)</li>\r\n  <li>и так далее</li>\r\n</ul>\r\n<p>\r\nК переменной <code>$n</code> можно обратиться не только с помощью номера 0, 1, 2. Но и использовать переменную или выражение:\r\n</p>\r\n[awk]\r\nvar = 1\r\n# выводим значения переменных $1 и $2\r\nprint $var, $(var + 1)\r\n[/awk]\r\n<p>\r\nПоля выделяются из текста с использованием символа-разделителя. По умолчанию — это пробел или символ табуляции.\r\n</p>\r\n[cli]\r\n$ cat data.txt\r\nЭто первая строка\r\nЭто вторая строка\r\nЭто третья строка\r\n$ awk \'{print $2}\' data.txt\r\nпервая\r\nвторая\r\nтретья\r\n[/cli]\r\n<p>\r\nЕсли в качестве разделителя полей используется что-то, отличающееся от пробела или табуляции:\r\n</p>\r\n[cli]\r\n$ cat /etc/passwd\r\nroot:x:0:0:root:/root:/bin/bash\r\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\r\n..........\r\n$ awk -F: \'{print $1}\' /etc/passwd\r\nroot\r\ndaemon\r\nbin\r\n..........\r\n[/cli]\r\n\r\n<h2>Использование нескольких команд</h2>\r\n<p>\r\nAwk позволяет обрабатывать данные с использованием многострочных скриптов. Чтобы передать awk многострочную команду, нужно разделить её части точкой с запятой:\r\n</p>\r\n[cli]\r\n$ echo \"My name is Tom\" | awk \'{$4=\"Adam\"; print $0}\'\r\nMy name is Adam\r\n[/cli]\r\n<p>\r\nПервая команда записывает новое значение в переменную <code>$4</code>, а вторая выводит на экран всю строку.\r\n</p>\r\n\r\n<h2>Чтение скрипта awk из файла</h2>\r\n<p>\r\nAwk позволяет хранить скрипты в файлах и ссылаться на них, используя ключ <code>-f</code>. Подготовим файл <code>user-home.awk</code>, в который запишем следующее:\r\n</p>\r\n[awk]\r\n{ print \"Пользователь\" $1 \"домашняя директория\" $6 }\r\n[/awk]\r\n<p>\r\nВызовем awk, указав этот файл в качестве источника команд:\r\n</p>\r\n[cli]\r\n$ awk -F: -f user-home.awk /etc/passwd\r\nПользователь[grn]root[/grn]домашняя директория[grn]/root[/grn]\r\nПользователь[grn]daemon[/grn]домашняя директория[grn]/usr/sbin[/grn]\r\nПользователь[grn]bin[/grn]домашняя директория[grn]/bin[/grn]\r\n..........\r\n[/cli]\r\n<div class=\"note\">\r\nТе, кто привык программировать в bash, возможно ожидали, что команда <code>print</code> вставит пробел между строками. Однако, когда в программе строки оказываются рядом друг с другом, awk сцепляет их без добавления между ними пробела. Пробел между строками означает конкатенацию.\r\n</div>\r\n<p>\r\nВ файле скрипта может содержаться множество команд, при этом каждую из них достаточно записывать с новой строки, ставить после каждой точку с запятой не требуется:\r\n</p>\r\n[awk]\r\n{\r\nuser = \"Пользователь \"\r\nhome = \", домашняя директория \"\r\nprint user $1 home $6\r\n}\r\n[/awk]\r\n[cli]\r\n$ awk -F: -f user-home.awk /etc/passwd\r\nПользователь root, домашняя директория /root\r\nПользователь daemon, домашняя директория /usr/sbin\r\nПользователь bin, домашняя директория /bin\r\n..........\r\n[/cli]\r\n\r\n<h2>Выполнение команд до начала обработки данных</h2>\r\n<p>\r\nИногда нужно выполнить какие-то действия до того, как скрипт начнёт обработку записей из входного потока. Для этого можно воспользоваться ключевым словом <code>BEGIN</code>. Команды, которые следуют за <code>BEGIN</code>, будут исполнены до начала обработки данных.\r\n</p>\r\n[cli]\r\n$ awk \'BEGIN {print \"Это исходные данные:\"} {print $0}\' data.txt\r\nЭто исходные данные:\r\nЭто первая строка\r\nЭто вторая строка\r\nЭто третья строка\r\n[/cli]\r\n\r\n<h2>Выполнение команд после окончания обработки данных</h2>\r\n<p>\r\nКлючевое слово <code>END</code> позволяет задавать команды, которые надо выполнить после окончания обработки данных:\r\n</p>\r\n[cli]\r\n$ awk \'BEGIN {print \"Это исходные данные:\"} {print $0} END {print \"Конец исходных данных.\"}\' data.txt\r\nЭто исходные данные:\r\nЭто первая строка\r\nЭто вторая строка\r\nЭто третья строка\r\nКонец исходных данных.\r\n[/cli]\r\n<p>\r\nНапишем скрипт следующего содержания и сохраним его в файле <code>begin-end.awk</code>:\r\n</p>\r\n[awk]\r\nBEGIN {\r\n    print \"Пользователи и домашние директории\"\r\n    print \"-----------------------------------\"\r\n    print \"Пользователь \\t Домашняя директория\"\r\n    print \"------------ \\t -------------------\"\r\n    FS = \":\"\r\n}\r\n{\r\n    # пробел между аргументами print означает конкатенацию\r\n    print $1 \" \\t \" $6\r\n}\r\nEND {\r\n    print \"-----------------------------------\"\r\n}\r\n[/awk]\r\n<p>\r\nТут, в блоке <code>BEGIN</code>, создаётся заголовок табличного отчёта. В этом же разделе мы указываем символ-разделитель. После окончания обработки файла, благодаря блоку <code>END</code>, создается подвал отчета. Запустим скрипт:\r\n</p>\r\n[cli]\r\n$ awk -f begin-end.awk /etc/passwd\r\nПользователи и домашние директории\r\n-----------------------------------\r\nПользователь    Домашняя директория\r\n------------    -------------------\r\nroot            /root\r\ndaemon          /usr/sbin\r\nbin             /bin\r\n..........\r\n-----------------------------------\r\n[/cli]\r\n\r\n<h2>Основные встроенные переменные</h2>\r\n<p>\r\nКроме позиционных переменных <code>$1</code>, <code>$2</code>, <code>$3</code>, которые позволяют извлекать значения полей, есть еще множество других. Вот некоторые из наиболее часто используемых:\r\n</p>\r\n<ul>\r\n  <li><code>FIELDWIDTHS</code> — разделённый пробелами список чисел, определяющий точную ширину каждого поля данных с учётом разделителей полей.</li>\r\n  <li><code>FS</code> — переменная, позволяющая задавать символ-разделитель полей.</li>\r\n  <li><code>RS</code> — переменная, позволяющая задавать символ-разделитель записей.</li>\r\n  <li><code>OFS</code> — разделитель полей на выводе awk-скрипта.</li>\r\n  <li><code>ORS</code> — разделитель записей на выводе awk-скрипта.</li>\r\n</ul>\r\n<p>\r\nПо умолчанию переменная <code>OFS</code> настроена на использование пробела. Её можно установить так, как нужно для целей вывода данных:\r\n</p>\r\n[cli]\r\n$ awk \'BEGIN {FS=\":\"; OFS=\"-\"} {print $1,$6,$7}\' /etc/passwd\r\nroot-/root-/bin/bash\r\ndaemon-/usr/sbin-/usr/sbin/nologin\r\nbin-/bin-/usr/sbin/nologin\r\n..........\r\n[/cli]\r\n<p>\r\nВ некоторых случаях, вместо использования разделителя полей, данные в пределах записей расположены в колонках постоянной ширины. В подобных случаях необходимо задать переменную <code>FIELDWIDTHS</code> таким образом, чтобы её содержимое соответствовало особенностям представления данных.\r\n</p>\r\n<p>\r\nПри установленной переменной <code>FIELDWIDTHS</code> awk будет игнорировать переменную <code>FS</code> и находить поля данных в соответствии со сведениями об их ширине, заданными в <code>FIELDWIDTHS</code>.\r\n</p>\r\n[cli]\r\n$ cat data.txt\r\n234567890\r\n987654321\r\n736194258\r\n$ awk \'BEGIN {FIELDWIDTHS=\"3 2 4\"} {print $1,$2,$3}\' data.txt\r\n234 56 7890\r\n987 65 4321\r\n736 19 4258\r\n[/cli]\r\n<p>\r\nПеременные <code>RS</code> и <code>ORS</code> задают порядок обработки записей. По умолчанию <code>RS</code> и <code>ORS</code> установлены на символ перевода строки. Это означает, что awk воспринимает каждую новую строку текста как новую запись и выводит каждую запись с новой строки.\r\n</p>\r\n<p>\r\nИногда случается так, что поля в потоке данных распределены по нескольким строкам:\r\n</p>\r\n[cli]\r\n$ cat users.txt\r\nИван Иванов\r\nivanov@mail.ru\r\n(926) 765-43-21\r\n\r\nПетр Петров\r\npetrov@mail.ru\r\n(926) 123-45-67\r\n$ awk \'BEGIN {FS=\"\\n\"; RS=\"\"; OFS=\" : \"} {print $1,$3}\' users.txt\r\nИван Иванов : (926) 765-43-21\r\nПетр Петров : (926) 123-45-67 \r\n[/cli]\r\n<p>\r\nЗдесь в переменную <code>FS</code> мы записываем символ перевода строки. Это укажет awk на то, что каждая строка в потоке данных является отдельным полем. Кроме того, в переменную <code>RS</code> мы записываем пустую строку. Потому что в файле <code>users.txt</code> блоки данных о разных людях разделены пустой строкой. В результате awk будет считать пустые строки разделителями записей.\r\n</p>\r\n\r\n<h2>Дополнительные встроенные переменные</h2>\r\n<p>\r\nПомимо встроенных переменных, о которых мы уже говорили, существуют и другие:\r\n</p>\r\n<ul>\r\n  <li><code>ARGC</code> — количество аргументов командной строки.</li>\r\n  <li><code>ARGV</code> — массив с аргументами командной строки.</li>\r\n  <li><code>ARGIND</code> — индекс текущего обрабатываемого файла в массиве <code>ARGV</code>.</li>\r\n  <li><code>ENVIRON</code> — ассоциативный массив с переменными окружения и их значениями.</li>\r\n  <li><code>ERRNO</code> — код системной ошибки, которая может возникнуть при чтении или закрытии входных файлов.</li>\r\n  <li><code>FILENAME</code> — имя входного файла с данными.</li>\r\n  <li><code>IGNORECASE</code> — если эта переменная установлена в ненулевое значение, при обработке игнорируется регистр символов.</li>\r\n  <li><code>FNR</code> — номер текущей записи в файле данных.</li>\r\n  <li><code>NF</code> — общее число полей данных в текущей записи.</li>\r\n  <li><code>NR</code> — общее число обработанных записей.</li>\r\n</ul>\r\n<p>\r\nПеременные <code>ARGC</code> и <code>ARGV</code> позволяют работать с аргументами командной строки. При этом скрипт, переданный awk, не попадает в массив аргументов <code>ARGV</code>:\r\n</p>\r\n[cli]\r\n$ awk \'BEGIN {print ARGC,ARGV[0],ARGV[1]}\' data.txt\r\n2 awk data.txt\r\n[/cli]\r\n<p>\r\nПеременная <code>ENVIRON</code> представляет собой ассоциативный массив с переменными среды:\r\n</p>\r\n[cli]\r\n$ awk \'BEGIN {print ENVIRON[\"HOME\"]}\' data.txt\r\n/home/evgeniy\r\n[/cli]\r\n<p>\r\nПеременные среды можно использовать и без обращения к <code>ENVIRON</code>:\r\n</p>\r\n[cli]\r\n$ awk -v home=$HOME \'BEGIN {print \"Моя домашняя директория \" home}\'\r\n[/cli]\r\n<p>\r\nПеременная <code>NF</code> позволяет обращаться к последнему полю данных в записи, не зная его точной позиции:\r\n</p>\r\n[cli]\r\n$ awk \'BEGIN {FS=\":\"; OFS=\":\"} {print $1,$NF}\' /etc/passwd\r\nroot:/bin/bash\r\ndaemon:/usr/sbin/nologin\r\nbin:/usr/sbin/nologin\r\n..........\r\n[/cli]\r\n<p>\r\nЭта переменная содержит числовой индекс последнего поля данных в записи. Обратиться к данному полю можно, поместив перед <code>NF</code> знак <code>$</code>.\r\n</p>\r\n<p>\r\nПеременные <code>FNR</code> и <code>NR</code>, хотя и могут показаться похожими, на самом деле различаются. Так, переменная <code>FNR</code> хранит число записей, обработанных в текущем файле. Переменная <code>NR</code> хранит общее число обработанных записей:\r\n</p>\r\n[cli]\r\n$ cat data.txt\r\nЭто первая строка\r\nЭто вторая строка\r\nЭто третья строка\r\n$ awk \'{print $1,\"FNR=\"FNR,\"NR=\"NR}\' data.txt data.txt\r\nЭто первая строка FNR=1 NR=1\r\nЭто вторая строка FNR=2 NR=2\r\nЭто третья строка FNR=3 NR=3\r\nЭто первая строка FNR=1 NR=4\r\nЭто вторая строка FNR=2 NR=5\r\nЭто третья строка FNR=3 NR=6\r\n[/cli]\r\n\r\n<h2>Пользовательские переменные</h2>\r\n<p>\r\nКак и любые другие языки программирования, awk позволяет программисту объявлять переменные. Имена переменных могут включать в себя буквы, цифры, символы подчёркивания. Однако, они не могут начинаться с цифры:\r\n</p>\r\n[awk]\r\nBEGIN {\r\n    test = \"This is a test\"\r\n    print test\r\n}\r\n[/awk]\r\n<p>\r\nКаждая переменная или поле могут потенциально быть строкой или числом. Awk рассматривает переменную как строковую, пока не возникает необходимость выполнить операции сложения или конкатенации. Если к числу прибавляется строка, то строка автоматически преобразуется в число. Если к строке «прицепляется» число, то число преобразуется в строку.\r\n</p> \r\n\r\n<h2>Условный оператор if</h2>\r\n<p>\r\nОднострочный вариант оператора:\r\n</p>\r\n[cli]\r\n$ cat data.txt\r\n10\r\n40\r\n20\r\n30\r\n50\r\n$ awk \'{if ($1 > 20) print $1}\' data.txt\r\n40\r\n30\r\n50\r\n[/cli]\r\n<p>\r\nЕсли нужно выполнить в блоке <code>if</code> несколько операторов, их нужно заключить в фигурные скобки:\r\n</p>\r\n[cli]\r\n$ awk \'{if ($1 > 20) {x = $1 * 2; print x}}\' data.txt\r\n80\r\n60\r\n100\r\n[/cli]\r\n<p>\r\nусловный оператор <code>if</code> может содержать блок <code>else</code>:\r\n</p>\r\n[awk]\r\n{\r\n    if ($1 > 20) {\r\n        x = $1 * 2\r\n    } else {\r\n        x = $1 / 2  \r\n    }\r\n    print x\r\n}\r\n\r\n[/awk]\r\n\r\n<h2>Цикл while</h2>\r\n<p>\r\nЦикл <code>while</code> позволяет перебирать наборы данных, проверяя условие, которое остановит цикл.\r\n</p>\r\n[awk]\r\n{\r\n    total = 0\r\n    current = 1\r\n    while (current < 4) {\r\n        # $current означает обращение к переменным $1, $2, $3\r\n        total = total + $current\r\n        current++\r\n    }\r\n    avg = total / 3\r\n    print \"Данные: \" $0 \", среднее арифметическое \" avg\r\n}\r\n[/awk]\r\n[cli]\r\n$ cat data.txt\r\n11 22 33\r\n44 55 66\r\n77 88 99\r\n$ awk -f average.awk data.txt\r\nДанные: 11 22 33, среднее арифметическое 22\r\nДанные: 44 55 66, среднее арифметическое 55\r\nДанные: 77 88 99, среднее арифметическое 88\r\n[/cli]\r\n<p>\r\nВ циклах <code>while</code> можно использовать команды <code>break</code> и <code>continue</code>. Первая позволяет досрочно завершить цикл и приступить к выполнению команд, расположенных после него. Вторая позволяет, не завершая до конца текущую итерацию, перейти к следующей.\r\n</p>\r\n\r\n<h2>Цикл for</h2>\r\n<p>\r\nРешим задачу расчёта среднего значения числовых полей с использованием цикла <code>for</code>:\r\n</p>\r\n[awk]\r\n{\r\n    total = 0\r\n    for (i = 1; i < 4; i++) {\r\n        # $i означает обращение к переменным $1, $2, $3\r\n        total = total + $i\r\n    }\r\n    avg = total / 3\r\n    print \"Данные: \" $0 \", среднее арифметическое \" avg\r\n}\r\n[/awk]\r\n\r\n<h2>Форматированный вывод данных</h2>\r\n<p>\r\nКоманда <code>printf</code> позволяет выводить форматированные данные. Она даёт возможность настраивать внешний вид выводимых данных благодаря использованию шаблонов, в которых могут содержаться текстовые данные и спецификаторы форматирования.\r\n</p>\r\n<p>\r\nСпецификатор форматирования — это специальный символ, который задаёт тип выводимых данных и то, как именно их нужно выводить. Awk использует спецификаторы форматирования как указатели мест вставки данных из переменных, передаваемых <code>printf</code>. Первый спецификатор соответствует первой переменной, второй спецификатор — второй, и так далее.\r\n</p>\r\n<ul>\r\n  <li><code>%c</code> — воспринимает переданное ему число как код ASCII-символа и выводит этот символ.</code>\r\n  <li><code>%d</code> — выводит десятичное целое число.</code>\r\n  <li><code>%i</code> — то же самое, что и <code>d</code>.</code>\r\n  <li><code>%e</code> — выводит число в экспоненциальной форме.</code>\r\n  <li><code>%f</code> — выводит число с плавающей запятой.</code>\r\n  <li><code>%g</code> — выводит число либо в экспоненциальной записи, либо в формате с плавающей запятой, в зависимости от того, как получается короче.</code>\r\n  <li><code>%o</code> — выводит восьмеричное представление числа.</code>\r\n  <li><code>%s</code> — выводит текстовую строку.</code>\r\n</ul>\r\n[awk]\r\n{\r\n    total = 0\r\n    current = 1\r\n    while (current < 4) {\r\n        # $current означает обращение к переменным $1, $2, $3\r\n        total = total + $current\r\n        current++\r\n    }\r\n    avg = total / 3\r\n    # обратите внимание на символ новой строки \\n\r\n    printf \"Данные: %i %i %i, среднее арифметическое %f\\n\", $1, $2, $3, avg\r\n}\r\n[/awk]\r\n[cli]\r\n$ cat data.txt\r\n11 22 33\r\n44 55 66\r\n77 88 99\r\n$ awk -f average.awk data.txt\r\nДанные: 11 22 33, среднее арифметическое 22.000000\r\nДанные: 44 55 66, среднее арифметическое 55.000000\r\nДанные: 77 88 99, среднее арифметическое 88.000000\r\n[/cli]\r\n\r\n<h2>Встроенные функции</h2>\r\n<p>\r\nПри работе с awk программисту доступны встроенные функции. В частности, это математические и строковые функции, функции для работы со временем.\r\n</p>\r\n<h3>Математические функции</h3>\r\n<ul>\r\n  <li><code>cos(x)</code> — косинус x (x выражено в радианах).</li>\r\n  <li><code>sin(x)</code> — синус x (x выражено в радианах).</li>\r\n  <li><code>exp(x)</code> — экспоненциальная функция.</li>\r\n  <li><code>int(x)</code> — возвращает целую часть аргумента.</li>\r\n  <li><code>log(x)</code> — натуральный логарифм.</li>\r\n  <li><code>rand()</code> — возвращает случайное число с плавающей запятой в диапазоне от 0 до 1.</li>\r\n  <li><code>sqrt(x)</code> — квадратный корень из x.</li>\r\n</ul>\r\n<h3>Строковые функции</h3>\r\n<ul>\r\n  <li><code>length([arg])</code> — возвращает длину <code>arg</code>; если <code>arg</code> не указан, то выдает длину текущей строки.\r\n  <li><code>match(string,pattern)</code> — возвращает позицию вхождения шаблона <code>pattern</code> в строку <code>string</code>; или <code>0</code>, если совпадение не найдено.</li>\r\n</ul>\r\n<div class=\"note\">\r\nЭта функция также устанавливает две встроенные переменные <code>RSTART</code> и <code>RLENGTH</code>. <code>RSTART</code> принимает значение начальной позиции, найденной в строке (это значение равно возвращаемому значению). <code>RLENGTH</code> принимает значение длины найденной строки. Если совпадение не найдено, то <code>RSTART</code> равно <code>0</code>, а <code>RLENGTH</code> равно <code>-1</code></em>.\r\n</div>\r\n<ul>\r\n  <li><code>index(string,needle)</code> — возвращает начальную позицию вхождения подстроки <code>needle</code> в строку <code>string</code>; если <code>needle</code> в <code>string</code> не содержится, возвращает <code>0</code>.\r\n  <li><code>split(string,array[,sep])</code> — помещает поля строки <code>string</code> в массив <code>array</code> и возвращает число заполненных элементов массива; если указан <code>sep</code>, то при анализе строки он понимается как разделитель.</li>\r\n  <li><code>sub(replace,pattern[,string])</code> — заменяет в строке <code>string</code> первое вхождение шаблона <code>pattern</code> на строку <code>replace</code>; в случае отсутствия аргумента <code>string</code>, применяется к текущей записи.</li>\r\n  <li><code>gsub(replace,pattern[,string])</code> — аналогична <code>sub()</code>, но заменяет все вхождения.</li>\r\n  <li><code>substr(string,start,length)</code> — возвращает подстроку строки <code>string</code>, начиная с позиции <code>start</code>, длиной <code>length</code> символов.</li>\r\n  <li><code>tolower()</code> — перевод в нижний регистр.</li>\r\n  <li><code>toupper()</code> — перевод в верхний регистр.</li>\r\n</ul>\r\n<p>\r\nВот как пользоваться этими функциями:\r\n</p>\r\n[cli]\r\n$ awk \'BEGIN {x=exp(5); print x}\'\r\n[/cli]\r\n\r\n<h2>Пользовательские функции</h2>\r\n<p>\r\nПри необходимости можно создавать собственные функции awk. Для возвращения значения из функции можно использовать оператор <code>return</code>.\r\n</p>\r\n[awk]\r\nfunction myprint() {\r\n    printf \"Пользователь %s, домашняя директория %s\\n\", $1, $6\r\n}\r\nBEGIN {\r\n    FS = \":\"\r\n}\r\n{\r\n    myprint()\r\n}\r\n[/awk]\r\n\r\n<h2>Шаблоны</h2>\r\n<p>\r\nВ общем случае программа awk имеет вид:\r\n</p>\r\n[awk]\r\nBEGIN {\r\n    действие\r\n}\r\n/шаблон/ {\r\n    действие\r\n}\r\n/шаблон/ {\r\n    действие\r\n}\r\n..........\r\nEND {\r\n    действие\r\n}\r\n[/awk]\r\n<p>\r\nКаждая запись поочерёдно сравнивается со всеми <code>шаблонами</code>, и каждый раз когда найдено соответствие, выполняется указанное <code>действие</code>. Если <code>шаблон</code> не указан, то <code>действие</code> выполняется для любой записи. Если не указано <code>действие</code>, то запись выводится. Специальные шаблоны <code>BEGIN</code> и <code>END</code> позволяют получить управление перед чтением первой входной строки и после прочтения последней входной строки, соответственно.\r\n</p>\r\n[cli]\r\n$ cat data.txt\r\nПетр Иванов;ivanov@mail.ru;(926) 765-43-21\r\nСергей Петров;petrov@mail.ru;(903) 123-45-67\r\nИван Сергеев;sergeev@mail.ru;(926) 765-43-00\r\nАндрей Николаев;nikolaev@mail.ru;(903) 345-67-89\r\nМаксим Семенов;semenov@mail.ru;(926) 876-54-32\r\n[/cli]\r\n[cli]\r\n$ awk \'BEGIN {FS=\";\"} /[red]Иван[/red]/ {print $0}\' data.txt # строки, совпадающие с шаблоном /Иван/\r\nПетр [red]Иван[/red]ов;ivanov@mail.ru;(926) 765-43-21\r\n[red]Иван[/red] Сергеев;sergeev@mail.ru;(926) 765-43-00\r\n[/cli]\r\n[cli]\r\n$ awk \'BEGIN {FS=\";\"} /Иван/ {print $0} /Семен/ {print $0}\' data.txt\r\nПетр [red]Иван[/red]ов;ivanov@mail.ru;(926) 765-43-21\r\n[red]Иван[/red] Сергеев;sergeev@mail.ru;(926) 765-43-00\r\nМаксим [red]Семен[/red]ов;semenov@mail.ru;(926) 876-54-32\r\n[/cli]\r\n[cli]\r\n$ awk \'BEGIN {FS=\";\"} /Иванов/,/Сергеев/ {print $1}\' data.txt # все строки между первым и вторым шаблоном\r\nПетр [red]Иванов[/red]\r\nСергей Петров\r\nИван [red]Сергеев[/red]\r\n[/cli]\r\n[cli]\r\n$ awk \'BEGIN {FS=\";\"} $3 ~ /903/ {print $1\" \"$3}\' data.txt # номер телефона содержит 903\r\nСергей Петров ([red]903[/red]) 123-45-67\r\nАндрей Николаев ([red]903[/red]) 345-67-89\r\n[/cli]\r\n[cli]\r\n$ awk \'BEGIN {FS=\";\"} $3 !~ /903/ {print $1\" \"$3}\' data.txt # номер телефона не содержит 903\r\nПетр Иванов (926) 765-43-21\r\nИван Сергеев (926) 765-43-00\r\nМаксим Семенов (926) 876-54-32\r\n[/cli]\r\n<p>\r\nВ предпоследнем примере <code>$3 ~ /903/</code> означает, что третье поле содержит строку <code>903</code>. В последнем примере <code>$3 !~ /903/</code> все наоборот — третье поле не должно содержать строку <code>903</code>.\r\n</p>\r\n<p>\r\nВ шаблонах можно использовать регулярные выражения:\r\n</p>\r\n[cli]\r\n$ awk \'BEGIN {FS=\";\"} $3 ~ /(67|00)$/ {print $1\" \"$3}\' data.txt # номер телефона заканчивается на 67 или 00\r\nСергей Петров (903) 123-45-[red]67[/red]\r\nИван Сергеев (926) 765-43-[red]00[/red]\r\n[/cli]\r\n\r\n<p>\r\nШаблоны в awk это не просто строка или регулярное выражение. Они могут быть произвольными комбинациями относительных выражений (больше, меньше, равно, не равно, …) и регулярных выражений с использованием <code>!</code>, <code>||</code>, <code>&&</code> и круглых скобок: \r\n</p>\r\n<ul>\r\n  <li><code>переменная ~ /шаблон/</code></li>\r\n  <li><code>переменная in массив</code></li> \r\n  <li><code>(переменная, переменная, …) in массив</code></li>\r\n  <li><code>(переменная ~ /шаблон/) || (выражение in массив)</code></li>\r\n  <li><code>(переменная >= 100) && (переменная <= 200)</code></li>\r\n</ul>\r\n[cli]\r\n$ awk \'BEGIN {FS=\";\"} $3 ~ /67$/ || $1 ~ /Максим/ {print $1\" \"$3}\' data.txt\r\nСергей Петров (903) 123-45-[red]67[/red]\r\n[red]Максим[/red] Семенов (926) 876-54-32\r\n[/cli]\r\n<p>\r\nВ случае использования относительных выражений <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code>, <code>&gt;=</code>, <code>&gt;</code> происходит сравнение чисел, если оба операнда — числа. В противном случае сравниваются строки.\r\n</p>','2018-04-28 17:42:03',1),(1,4,'Закладки: CSS и фоновое изображение','Закладки: CSS и фоновое изображение','Закладки: CSS и фоновое изображение','','Сегодня рассмотрим, как сделать закладки используя CSS и одно фоновое изображение для всех состояний закладки. Каждый элемент имеет закругленные уголки, а его ширина зависит от содержимого.','<p>\r\nСегодня рассмотрим, как сделать <a href=\"/files/blog/1/example/index.html\" target=\"_blank\">закладки</a> используя CSS и одно фоновое изображение для всех состояний закладки. Каждый элемент имеет закругленные уголки, а его ширина зависит от содержимого.\r\n</p>\r\n<p>\r\nКаждая закладка может иметь три состояния:\r\n</p>\r\n<ul>\r\n  <li>Обычная закладка</li>\r\n  <li>Активная закладка</li>\r\n  <li>Закладка при наведении указателя мыши</li>\r\n</ul>\r\n<p>\r\nКак уже было сказано ранее, нам понадобится всего лишь одно фоновое изображение:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/1/tab.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nЧтобы фон изменялся мы будем использовать позиционирование фона для каждого состояния:\r\n</p>\r\n<ul>\r\n  <li>Активное (background-position: xxx top)</li>\r\n  <li>Обычное (background-position: xxx 30px)</li>\r\n  <li>При наведении указателя (background-position: xxx 60px)</li>\r\n</ul>\r\n<p>\r\nТеперь перейдем к HTML и CSS.\r\n</p>\r\n<p style=\"font-weight: bold;\">HTML:</p>\r\n[html]<ul class=\"tab\">\r\n    <li><a href=\"index.html\"><span>Главная</span></a></li>\r\n    <li class=\"active\"><a href=\"news.html\"><span>Новости</span></a></li>\r\n    <li><a href=\"articles.html\"><span>Статьи</span></a></li>\r\n    <li><a href=\"blog.html\"><span>Блог</span></a></li>\r\n    <li><a href=\"forum.html\"><span>Форум</span></a></li>\r\n    <li><a href=\"contact.html\"><span>Контакты</span></a></li>\r\n</ul>[/html]\r\n<p>\r\nДля того чтобы сделать закладку активной нужно добавить класс active этому элементу списка.\r\n</p>\r\n<p style=\"font-weight: bold;\">CSS:</p>\r\n[css]ul, li {\r\n    border: 0;\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\nul {\r\n    border-bottom:solid 1px #DEDEDE;\r\n    height:29px;\r\n    padding-left:20px;\r\n}\r\nli {\r\n    float: left;\r\n    margin-right: 2px;\r\n    height: 30px;\r\n    overflow: hidden;\r\n}\r\n.tab a:link, .tab a:visited {\r\n    background:url(tab.png) right 60px;\r\n    color:#666;\r\n    display:block;\r\n    font-weight:bold;\r\n    line-height:30px;\r\n    text-decoration:none;\r\n}\r\n.tab a span {\r\n    background:url(tab.png) left 60px;\r\n    display:block;\r\n    margin-right:14px;\r\n    padding-left:14px;\r\n}\r\n.tab a:hover {\r\n    background:url(tab.png) right 30px;\r\n    display:block;\r\n}\r\n.tab a:hover span {\r\n    background:url(tab.png) left 30px;\r\n    display:block;\r\n}\r\n.active a:link, .active a:visited, .active a:visited, .active a:hover {\r\n    background:url(tab.png) right 0 no-repeat;\r\n}\r\n.active a span, .active a:hover span {\r\n    background:url(tab.png) left 0 no-repeat;\r\n}[/css]','2011-01-22 13:56:07',1),(31,9,'Команда ls','','','Bash, CLI, Linux, Директория, Каталог, Команда, Список, Файл','Выводит список файлов в указанном каталоге. Опции команды указывают как именно и в каком виде нужно выводить информацию на экран. Если запустить команду без указания директории, то она выдаст содержимое текущего каталога.','<p>\r\nВыводит список файлов в указанном каталоге. Синтаксис\r\n</p>\r\n[code]ls [grn][опции][/grn] [red][директория][/red][/code]\r\n<p>\r\nОпции команды указывают как именно и в каком виде нужно выводить информацию на экран. Если запустить команду без указания директории, то она выдаст содержимое текущего каталога. Основные опции:\r\n<ul>\r\n  <li><code>-a</code> — показывает все файлы в каталоге, включая скрытые файлы (<code>.filename</code>). Каталоги <code>..</code> и <code>.</code> вверху этого списка обозначают родительский и текущий каталог соответственно.</li>\r\n  <li><code>-l</code> — выводит информацию о содержимом, включая разрешения (режимы), владельца, группу, размер, дату создания, является ли этот файл ссылкой на что-то другое в системе, и если да, то куда указывает эта ссылка.</li>\r\n  <li><code>-R</code> — этот параметр также показывает содержимое всех каталогов, вложенных в текущий.</li>\r\n</ul>\r\n<p>\r\nОстальные ключи можно посмотреть в справке\r\n</p>\r\n[cli]\r\n$ ls --help\r\nИспользование: ls [КЛЮЧ]… [ФАЙЛ]…\r\nВыдаёт информацию о ФАЙЛАХ (по умолчанию о текущем каталоге).\r\nСортирует в алфавитном порядке, если не задан ни --sort, ни один из\r\nключей -cftuvSUX.\r\n\r\nАргументы, обязательные для длинных ключей, обязательны и для коротких.\r\n  -a, --all                  не скрывать файлы начинающиеся с .\r\n  -A, --almost-all           не выдавать подразумеваемые . и ..\r\n      --author               вместе с -l, печатать автора каждого файла\r\n  -b, --escape               печатать экранирующие последовательности\r\n                             в стиле С для не графических символов\r\n      --block-size=РАЗМЕР    использовать блоки указанного РАЗМЕРА; например,\r\n                             «---block-size=M» выводит размеры в единицах,\r\n                             равных 1048576 байтам; см. формат РАЗМЕРА далее.\r\n  -B, --ignore-backups       не выдавать файлы, оканчивающиеся на ~\r\n  -c                         с -lt: сортировать и показывать по ctime (времени\r\n                             последнего изменения файла);\r\n                             с -l: показывать ctime и сортировать по имени;\r\n                             иначе: сортировать по ctime, сначала самые новые\r\n  -C                         выдавать список в несколько колонок\r\n      --color[=КОГДА]        расцвечивать вывод;\r\n                             КОГДА может быть «always» (по умолчанию, если не\r\n                             указано), «auto» или «never». Подробней см. ниже\r\n  -d, --directory            выдавать имена каталогов, а не их содержимое\r\n  -D, --dired                генерировать вывод для режима Emacs dired\r\n  -f                         не сортировать, включает -aU, выключает -ls --color\r\n  -F, --classify             добавлять к имени файла индикатор (один из */=>@|)\r\n      --file-type            аналогично, но не добавлять «*»\r\n      --format=СЛОВО         across -x, commas -m, horizontal -x, long -l,\r\n                             single-column -1, verbose -l, vertical -C\r\n      --full-time            синоним -l --time-style=full-iso\r\n  -g                         как -l, но не выводить владельца\r\n      --group-directories-first\r\n                             группировать каталоги раньше файлов;\r\n                             может дополняться ключом --sort,\r\n                             но любое использование\r\n                             --sort=none (-U) выключает группировку\r\n  -G, --no-group             в длинном формате не печатать имена групп\r\n  -h, --human-readable       c -l и/или -s печатать размеры в удобном для\r\n                             человека виде (например, 1K 234M 2G)\r\n      --si                   то же, но использовать степень 1000, а не 1024\r\n  -H, --dereference-command-line\r\n                             следовать по символьным ссылкам в командной\r\n                             строке\r\n      --dereference-command-line-symlink-to-dir\r\n                             следовать по всем символьным ссылкам в командной\r\n                             строке, которые указывают на каталог\r\n      --hide=ШАБЛОН          не показывать записи, соответствующие ШАБЛОНУ\r\n                             оболочки (отменяется ключами -a или -A)\r\n      --indicator-style=СТИЛЬ добавлять к именам элементов индикатор с\r\n                             указанным СТИЛЕМ: none (по умолчанию),\r\n                             slash (-p), file-type (--file-type), classify (-F)\r\n  -i, --inode                показывать индекс каждого файла\r\n  -I, --ignore=ШАБЛОН        не показывать записи, соответствующие ШАБЛОНУ\r\n                             оболочки\r\n  -k, --kibibytes            по умолчанию использовать блоки по 1024 байта\r\n                             при показе использования диска\r\n  -l                         использовать широкий формат\r\n  -L, --dereference          показывая информацию для символьной ссылки,\r\n                             показывать информацию о файле, на который ссылка\r\n                             ссылается\r\n  -m                         выдавать список на всю ширину через запятую\r\n  -n, --numeric-uid-gid      как -l, но выдавать числовые UID и GID\r\n  -N, --literal              печатать имена как есть (не обрабатывать, \r\n                             например, управляющие символы)\r\n  -o                         как -l, но не выводить информацию о группе\r\n  -p,  --indicator-style=slash  добавлять индикатор / к каталогам\r\n  -q, --hide-control-chars   выводить ? вместо непечатных символов\r\n      --show-control-chars   показывать непечатные символы (по умолчанию,\r\n                             если программа не «ls» и вывод не на терминал).\r\n  -Q, --quote-name           заключать имя записей в кавычки\r\n      --quoting-style=ТИП    использовать ТИП заключения в кавычки:\r\n                             literal, locale, shell, shell-always,\r\n                             shell-escape, shell-escape-always, c, escape\r\n  -r, --reverse              обратный порядок сортировки\r\n  -R, --recursive            рекурсивно показывать каталоги\r\n  -s, --size                 печатать размер каждого файла в блоках\r\n  -S                         сортировать по размеру файла, большие сначала\r\n      --sort=СЛОВО           сортировать по СЛОВУ, а не по имени: \r\n                             none (без сортировки) -U, size (размер) -S,\r\n                             time (время) -t, version (версия) -v,\r\n                             extension (расширение) -X\r\n                             \r\n      --time=СЛОВО           с ключом -l, показывать вместо времени\r\n                             изменения время, заданное СЛОВОМ: \r\n                             atime, access, use (-u),\r\n                             ctime, status (-c);\r\n                             если --sort=time, использовать указанное\r\n                             время в качестве ключа сортировки\r\n      --time-style=СТИЛЬ     с -l, показывать время используя СТИЛЬ:\r\n                             full-iso, long-iso, iso, locale, +ФОРМАТ;\r\n                             ФОРМАТ интерпретируется как в «date»;\r\n                             если ФОРМАТ — это\r\n                             ФОРМАТ1<перевод-строки>ФОРМАТ2, то\r\n                             ФОРМАТ1 применяется к старым файлам,\r\n                             а ФОРМАТ2 к новым; если к СТИЛЮ добавлен\r\n                             префикс «posix-», то он действует только\r\n                             в локали, отличной от POSIX\r\n  -t                         сортировать по времени изменения,\r\n                             сначала самые новые\r\n  -T, --tabsize=РАЗМЕР       использовать табуляцию указанного РАЗМЕРА, а не 8\r\n  -u                         с -lt: сортировать и показывать время доступа;\r\n                             c -l: показывать время доступа и сортировать\r\n                             по имени; иначе сортировать по времени доступа,\r\n                             сначала самые новые\r\n  -U                         не сортировать; выводить в соответствии с\r\n                             физическим расположением в каталоге\r\n  -v                         сортировать по номерам (версии) в текстовом\r\n                             представлении\r\n  -w, --width=ЧИСЛО          устанавливает ширину вывода равной ЧИСЛО.\r\n                             0 означает отсутствие ограничения.\r\n  -x                         перечислять по строкам, а не по столбцам\r\n  -X                         сортировать по расширению в алфавитном порядке\r\n  -Z, --context              печатать любой контекст безопасности каждого\r\n                             файла\r\n  -1                         перечислять по одному файлу на строке.\r\n                             Символ «\\n» не учитывается, если указан -q или -b\r\n      --help     показать эту справку и выйти\r\n      --version  показать информацию о версии и выйти\r\n\r\nРАЗМЕР задаётся целым числом и необязательной единицей изменения\r\n(пример: 10K это 10*1024). Единицы изменения:\r\nK, M, G, T, P, E, Z, Y (степень 1024) или KB, MB, … (степень 1000).\r\n\r\nИспользование цветов для различения типов файла по умолчанию выключено и\r\nс помощью --color=never. С --color=auto, ls выдаёт цветовые коды только когда\r\nстандартный вывод подключён к терминалу. Переменная окружения LS_COLORS\r\nслужит для изменения значений. Для её установки используйте команду dircolors.\r\n\r\nКоды выхода:\r\n 0  всё отлично,\r\n 1  небольшие проблемы (например, недоступен подкаталог),\r\n 2  серьёзная проблема (например, недоступен аргумент командной строки).\r\n[/cli]','2018-02-05 17:40:14',1),(22,17,'Категории и статьи в Joomla','Joomla категория статья материал','Категории и статьи в Joomla. Добавление новых материалов.','CMS, Joomla, Web-разработка','Единицей контента считается материал (статья). Для организации иерархии сайта используются категории. По сути, иерархию материалов Joomla можно сравнить с файловой системой: каталог — это категория, файл — материал. В категориях, как и в каталогах, могут быть подкатегории. При этом вложенность категорий не ограничена.','<p>\r\nЕдиницей контента считается материал (статья). Для организации иерархии сайта используются категории. По сути, иерархию материалов Joomla можно сравнить с файловой системой: каталог — это категория, файл — материал. В категориях, как и в каталогах, могут быть подкатегории. При этом вложенность категорий не ограничена.\r\n</p>\r\n<p>\r\nКонтент, содержащийся в определенной категории, называется категоризованным. Кроме категоризованного контента, Joomla позволяет хранить некатегоризованный (или статический) контент, не принадлежащий какой-нибудь категории. Статический контент можно использовать для общих доументов сайта.\r\n</p>\r\n\r\n<h2>Добавление категории</h2>\r\n<p>\r\nНа главной странице панели управления щелкните по кнопке «Менеджер категорий», а потом — по кнопке «Создать».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/22/make-ctg.jpg\" class=\"zoom\" title=\"Добавление категории\"><img src=\"/files/blog/22/make-ctg-small.jpg\" alt=\"Добавление категории\" /></a>\r\n</p>\r\n<p>\r\nНазначение полей:\r\n</p>\r\n<ul>\r\n  <li><strong>Заголовок</strong>. Название категории (его увидят пользователи при просмотре содержимого категории).</li>\r\n  <li><strong>Алиас</strong>. Псевдоним категории для Joomla; должен содержать только латинские символы и не содержать пробелы. Псевдоним можно не указывать — Joomla создаст его автоматически.</li>\r\n  <li><strong>Родитель</strong>. Позволяет выбрать родительскую категорию. Однако родителя выбирать необязательно — в этом случае категория станет категорией первого уровня.</li>\r\n  <li><strong>Состояние</strong>. Определяет, будет ли категория опубликована на сайте после создания.</li>\r\n  <li><strong>Доступ</strong>. Позволяет установить права доступа к данной категории:\r\n    <ul>\r\n      <li><strong>Public</strong> (Все). Все пользователи смогут обратиться к этой категории.</li>\r\n      <li><strong>Registered</strong> (Зарегистрированные). Доступ разрешен только для зарегистрированных пользователей.</li>\r\n      <li><strong>Special</strong> (Специальный). Для доступа к этой категории потребуются специальные права доступа.</li>\r\n    </ul>\r\n  </li>\r\n  <li><strong>Права</strong>. Кнопка «Установить разрешения» перемещает нас вниз страницы, где можно гибко определить права доступа к материалам данной категории.</li>\r\n  <li><strong>Язык</strong>. Язык, к которому привязана категория.</li>\r\n  <li><strong>Описание категории</strong>. Позволяет ввести текст описания для категории и отформатировать его.</li>\r\n  <li><strong>Параметры публикации</strong>. В этой группе параметров можно выбрать автора категории.</li>\r\n  <li><strong>Основные параметры</strong>. Позволяет задать для категории изображение, выбрать стиль отображения ее материалов (Альтернативный макет) и ввести альтернативный текст для изображения. Альтернативный макета — можно выбрать вариант «Блог» или «Список». В первом случае мы получим список статей и подкатегорий с их описанием, а во втором — просто список заголовков статей/категорий.</li>\r\n  <li><strong>Метаданные</strong>. Данные для поисковых систем, позволяет добавить описание и ключевые слова для данной категории.</li>\r\n</ul>\r\n\r\n<h2>Добавление материала</h2>\r\n<p>\r\nПосле того, как необходимые категории и подкатегории созданы, можно приступать к созданию материалов. Если материал будет содержать картинки, которые еще не загружены на сайт, их нужно предварительно загрузить с помощью медиа-менеджера:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/22/media-mng.jpg\" class=\"zoom\" title=\"Медиа-менеджер\"><img src=\"/files/blog/22/media-mng-small.jpg\" alt=\"Медиа-менеджер\" /></a>\r\n</p>\r\n<p>\r\nДля создания нового материала используется кнопка «Создать материал» на главной странице панели управления.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/22/make-art.jpg\" class=\"zoom\" title=\"Добавление материала\"><img src=\"/files/blog/22/make-art-small.jpg\" alt=\"Добавление материала\" /></a>\r\n</p>\r\n<p>\r\nПри добавлении статьи требуется указать следующую информацию:\r\n</p>\r\n<ul>\r\n  <li><strong>Заголовок</strong>. Название материала (статьи).</li>\r\n  <li><strong>Алиас</strong>. Псевдоним материала (можно не указывать).</li>\r\n  <li><strong>Категория</strong>. Категория, в которую помещается данная статья.</li>\r\n  <li><strong>Состояние</strong>. Указание, должен ли материал быть опубликован.</li>\r\n  <li><strong>Доступ</strong>. Определение уровня доступа к материалу.</li>\r\n  <li><strong>Права</strong>. Права доступа к материалу.</li>\r\n  <li><strong>Избранное</strong>. Определение, будет ли материал опубликован на главной странице сайта.</li>\r\n  <li><strong>Язык</strong>. Язык, к которому привязана статья.</li>\r\n</ul>\r\n<p>\r\nПосле установки обязательных параметров можно приступить к добавлению текста статьи. Для добавления картинки используется кнопка «Изображение» в нижней части окна редактора. Кроме кнопки «Изображение», имеются еще кнопки «Материал» (вставляет ссылку на ранее добавленный материал), «Разрыв страницы» (вставляет переход на следующую страницу), «Подробнее» (вставляет разделитель «Подробнее», после щелчка на котором отображается остальная часть статьи), «Выключить редактор» (выключает визуальный редактор, позволяя редактировать HTML-код вручную).\r\n</p>\r\n<p>\r\nВ правой части окна добавления статьи можно установить дополнительные параметры:\r\n</p>\r\n<ul>\r\n  <li><strong>Автор</strong>. Выбрать автора статьи (если нужно).</li>\r\n  <li><strong>Псевдоним автора</strong>. Ввести псевдоним автора.</li>\r\n  <li><strong>Дата создания</strong>. Можно установить дату, отличную от текущей.</li>\r\n  <li><strong>Начало публикации</strong>. Если нужно опубликовать материал к определенной дате.</li>\r\n  <li><strong>Завершение публикации</strong>. После наступления этой даты статья будет скрыта (но не удалена).</li>\r\n</ul>\r\n<p>\r\nТакже можно отредактировать параметры отображения материала:\r\n</p>\r\n<ul>\r\n  <li><strong>Заголовок</strong>. Определяет, будет ли отображен заголовок статьи при ее просмотре.</li>\r\n  <li><strong>Заголовок как ссылка</strong>. Определяет, будет ли заголовок статьи отображен как ссылка.</li>\r\n  <li><strong>Вводный текст</strong>. Определяет, будет ли отображен вступительный текст статьи.</li>\r\n  <li><strong>Категория</strong>. Определяет, нужно ли отображать название категории при просмотре статьи.</li>\r\n  <li><strong>Категория как ссылка</strong>. Определяет, будет ли название категории отображено как ссылка.</li>\r\n  <li><strong>Заголовок родительской категории</strong>. Позволяет вывести название родительской категории.</li>\r\n  <li><strong>Заголовок родительской категории как ссылка</strong>. Определяет, будет ли название родительской категории отображено как ссылка.</li>\r\n  <li><strong>Автор</strong>. Определяет, будет ли отображаться имя автора.</li>\r\n  <li><strong>Автор как ссылка</strong>. Имя автора оформляется как ссылка, ведущая к контактной информации автора.</li>\r\n  <li><strong>Дата создания</strong>. Определяет, показывать или нет дату и время создания статьи.</li>\r\n  <li><strong>Дата изменения</strong>. Определяет, показывать или нет дату последнего изменения статьи.</li>\r\n  <li><strong>Дата публикации</strong>. Указывает, отображать или нет дату публикации статьи.</li>\r\n  <li><strong>Навигация</strong>. Определяет, показывать или нет полоску навигации (переход к соседним материалам).</li>\r\n  <li><strong>Показывать иконки</strong>. Задает, будут ли доступны иконки для печати, PDF-версии статьи, отправки по e-mail.</li>\r\n  <li><strong>Иконка печати</strong>. Определяет, будет ли предоставлена иконка для распечатки статьи.</li>\r\n  <li><strong>Иконка электронной почты</strong>. Определяет, будет ли предоставлена кнопка для отправки статьи по электронной почте.</li>\r\n  <li><strong>Рейтинг</strong>. Определяет, бутел ли отображен рейтинг статьи (смогут ли пользователи оценивать эту статью).</li>\r\n  <li><strong>Кол-во просмотров</strong>. Следует ли отображать счетчик количества просмотров статьи.</li>\r\n  <li><strong>Показывать ссылки неавторизованным</strong>. Если для этого параметра выбрать значение «Да», то просмотреть полный текст статьи смогут и неавторизованные пользователи, если же выбрать значение «Нет», пользователю придется зарегистрироваться на сайте, чтобы просмотреть полный текст статьи.</li>\r\n  <li><strong>Текст вместо Подробнее</strong>. введите текст, который будет отображаться вместо «Подробнее», например «Читать дальше».</li>\r\n  <li><strong>Альтернативный макет</strong>. Этот параметр позволяет выбрать альтернативный способ отображения статьи.</li>\r\n</ul>\r\n<p>\r\nВ большинстве случаев используется глобальная настройка параметров статей — проще один раз задать требуемые значения глобальных параметров, чем устанавливать параметры для каждой публикуемой статьи в отдельности.\r\n</p>\r\n<p>\r\nТакже можно изменить метаданные статьи, т.е. те данные, которые будут заключены в ее meta-теги.\r\n</p>','2013-06-17 11:51:07',1),(3,11,'Установка memcached под Windows 7','','','Memcached, PHP, Web-разработка, Windows, Установка','Memcached разработан для кэширования данных, генерация которых требует большого количества ресурсов. Такого рода данные могут содержать что угодно, начиная с результатов запроса к базе данных и заканчивая тяжеловесным куском шаблона.','<p>\r\nMemcached разработан для кэширования данных, генерация которых требует большого количества ресурсов. Такого рода данные могут содержать что угодно, начиная с результатов запроса к базе данных и заканчивая тяжеловесным куском шаблона.\r\n</p>\r\n<p>\r\nДля начала <a href=\"http://code.jellycan.com/memcached/\">скачиваем</a> сам сервер memecached. Распаковываем архив memcached-1.2.6-win32-bin.zip, кладем файл memcached.exe в директорию C:/Program Files/memcached/. Устанавливаем как сервис (cmd запускаем от имени администратора):\r\n</p>\r\n\r\n[code]cd C:/Program Files/memcached\r\nmemcached.exe -d install[/code]\r\n\r\n<p>\r\nКраткую справку по memcached можно получить с помощью ключа -help:\r\n</p>\r\n\r\n[code]memcached -help[/code]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[code]C:\\Program Files\\memcached>memcached.exe -help\r\nmemcached 1.2.6\r\n-p <num>      TCP port number to listen on (default: 11211)\r\n-U <num>      UDP port number to listen on (default: 0, off)\r\n-s <file>     unix socket path to listen on (disables network support)\r\n-a <mask>     access mask for unix socket, in octal (default 0700)\r\n-l <ip_addr>  interface to listen on, default is INDRR_ANY\r\n-d start          tell memcached to start\r\n-d restart        tell running memcached to do a graceful restart\r\n-d stop|shutdown  tell running memcached to shutdown\r\n-d install        install memcached service\r\n-d uninstall      uninstall memcached service\r\n-r            maximize core file limit\r\n-u <username> assume identity of <username> (only when run as root)\r\n-m <num>      max memory to use for items in megabytes, default is 64\r\n-M            return error on memory exhausted (rather than removing i\r\n-c <num>      max simultaneous connections, default is 1024\r\n-k            lock down all paged memory.  Note that there is a\r\n              limit on how much memory you may lock.  Trying to\r\n              allocate more than that would fail, so be sure you\r\n              set the limit correctly for the user you started\r\n              the daemon with (not for -u <username> user;\r\n              under sh this is done with \'ulimit -S -l NUM_KB\').\r\n-v            verbose (print errors/warnings while in event loop)\r\n-vv           very verbose (also print client commands/reponses)\r\n-h            print this help and exit\r\n-i            print memcached and libevent license\r\n-b            run a managed instanced (mnemonic: buckets)\r\n-P <file>     save PID in <file>, only used with -d option\r\n-f <factor>   chunk size growth factor, default 1.25\r\n-n <bytes>    minimum space allocated for key+value+flags, default 48[/code]\r\n\r\n<p>\r\nЕсли при установке появляется ошибка «отсутствует MSVCR71.dll», то можно прочесть <a href=\"http://www.addictivetips.com/windows-tips/fix-msvcp71-dll-and-msvcr71-dll-missing-error-in-windows-7/\">статью</a>, где описывается способ борьбы с ней. Если коротко — надо <a href=\"/files/blog/3/msvcp71-dll-and-msvcr71-dll.zip\">скачать</a> две dll бибилиотеки и скопировать их в папку C:/Windows/System32.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/3/memcached-1.jpg\" class=\"zoom\" title=\"Установка сервера memcached\"><img src=\"/files/blog/3/memcached-1-small.jpg\" alt=\"Установка сервера memcached\" /></a>\r\n</p>\r\n<p>\r\nЗапускаем сервер: Панель управления->Администрирование->Службы. Выбираем memcached Server, кликаем «Запустить службу». Также можно поставить тип запуска «Авто», чтобы сервер автоматически стартовал при загрузке системы.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/3/memcached-2.jpg\" class=\"zoom\" title=\"Запуск сервера memcached\"><img src=\"/files/blog/3/memcached-2-small.jpg\" alt=\"Запуск сервера memcached\" /></a>\r\n</p>\r\n<p>\r\nТеперь нам нужен клиент для работы с сервером. Здесь есть выбор: <a href=\"http://pecl.php.net/package/memcache\">memcache</a> и <a href=\"http://pecl.php.net/package/memcached\">memcached</a>. Под Windows мне удалось найти только расширение php_memcache.dll (для версии PHP 5.3), которое можно скачать <a href=\"http://downloads.php.net/pierre/\">здесь</a>. Распаковываем php_memcache-2.2.6-5.3-vc9-x86.zip, кладем файл php_memcache.dll в директорию с расширениями PHP. У меня это C:/Program Files/php/ext. В php.ini прописываем:\r\n</p>\r\n\r\n[code]extension = php_memcache.dll[/code]\r\n\r\n<p>\r\nТеперь остается создать скрипт с функцией phpinfo(). Запускаем этот скрипт и ищем на странице секцию Memcache. Если секция найдена, то memcache установлен и готов к работе:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/3/memcached-3.jpg\" class=\"zoom\" title=\"Memcache установлен и готов к работе\"><img src=\"/files/blog/3/memcached-3-small.jpg\" alt=\"Memcache установлен и готов к работе\" /></a>\r\n</p>\r\n<p>\r\nПроверяем:\r\n</p>\r\n\r\n[php]<?php\r\nheader( \'Content-Type: text/html; charset=windows-1251\' );\r\n\r\n// Создаём новый объект\r\n$memcache = new Memcache();\r\n// Соединяемся с нашим сервером Memcached\r\n$memcache->connect(\'localhost\', 11211) or die (\'Не могу подключиться\');\r\n\r\n$version = $memcache->getVersion();\r\necho \'Версия сервера: \'.$version;\r\n\r\n// Закрываем соединение с сервером Memcached\r\n$memcache->close();\r\n?>[/php]\r\n\r\n<p>\r\nПример использования:\r\n</p>\r\n\r\n[php]<?php\r\nheader( \'Content-Type: text/html; charset=windows-1251\' );\r\n\r\n// Создаём новый объект\r\n$memcache = new Memcache();\r\n// Соединяемся с нашим сервером\r\n$memcache->connect(\'localhost\', 11211) or die (\'Не могу подключиться\');\r\n\r\n// Пытаемся получить объект с ключом current_time\r\n$time = @$memcache->get(\'current_time\');\r\nif ( empty($time) ) {\r\n    // Если в кэше нет объекта с ключом current_time, создадим его\r\n    // Объект current_time будет храниться 5 секунд и не будет сжат\r\n    $time = date(\'H:i:s\');\r\n    $memcache->set(\'current_time\', $time, false, 5);\r\n}\r\necho \'Текущее время: \'.$time;\r\n\r\n// Закрываем соединение с сервером\r\n$memcache->close();\r\n?>[/php]\r\n\r\n<p>\r\nСкачать сервер memcached и расширение php_memcache.dll можно <a href=\"/files/blog/3/memcached.zip\">здесь</a>.\r\n</p>\r\n<h4>Дополнительная информация:</h4>\r\n<ul>\r\n  <li><a href=\"http://ru.wikipedia.org/wiki/Memcached\">Материал из Википедии: Memcached</a></li>\r\n  <li><a href=\"http://memcached.org/\">Официальный сайт Memcached</a></li>\r\n  <li><a href=\"http://highload.com.ua/index.php/2010/05/07/memcache-vs-memached-%D1%81%D1%80%D0%B0%D0%B2%D0%BD%D0%B8%D0%B2%D0%B0%D0%B5%D0%BC-%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D1%8B-%D0%B4%D0%BB%D1%8F-php/\">memcache vs memcached — сравниваем клиенты</a></li>\r\n  <li><a href=\"http://www.php.net/manual/ru/book.memcache.php\">Документация memcache</a></li>\r\n  <li><a href=\"http://www.php.net/manual/ru/book.memcached.php\">Документация memcached</a></li>\r\n</ul>','2013-04-08 08:23:15',1),(4,6,'Создание резервной копии БД','','','MySQL, Web-разработка, БазаДанных','Утилита командной строки mysqldump, предназначена для создания резервных копий, одной, нескольких выбранных, или всех имеющихся баз данных, на случай аварийной ситуации или для переноса баз на другой сервер. Резервная копия представляет из себя текстовый файл, содержащий SQL инструкции для создания необходимых таблиц и заполнения их информацией.','<p>\r\nУтилита командной строки mysqldump, предназначена для создания резервных копий, одной, нескольких выбранных, или всех имеющихся баз данных, на случай аварийной ситуации или для переноса баз на другой сервер. Резервная копия представляет из себя текстовый файл, содержащий SQL инструкции для создания необходимых таблиц и заполнения их информацией.\r\n</p>\r\n\r\n<h2>Создание резервной копии БД</h2>\r\n\r\n<p>\r\nКоманда для создания резервной копии базы данных с помощью программы mysqldump выглядит следующим образом:\r\n</p>\r\n\r\n[code]mysqldump -u[user] -p[password] --databases [dbname] > [file][/code]\r\n\r\n<ul>\r\n  <li><strong>-u</strong>[user] — имя пользователя.</li>\r\n  <li><strong>-p</strong>[password] — пароль пользователя, указывается без пробела перед ним.</li>\r\n  <li><strong>--databases</strong> [dbname] (короткий вариант <strong>-B</strong>) — название одной или нескольких баз данных для дампа. При создании резервной копии одной базы данных, опцию <strong>--databases</strong> писать не обязательно, здесь она для большей наглядности. То есть название базы данных можно прописать сразу за паролем пользователя.</li>\r\n  <li><strong>&gt;</strong> — перенаправление вывода команды mysqldump в файл дампа.</li>\r\n</ul>\r\n\r\n<p>\r\nСоздадим резервную копию одной базы данных:\r\n</p>\r\n\r\n[code]mysqldump -uroot -pqwerty -B mydb > mydb.sql[/code]\r\n\r\n<p>\r\nОбратите внимание на отсутствие пробела после опции <strong>-p</strong>, сразу указываем пароль. В данном случае будет создан файл резервной копии <strong>mydb.sql</strong>, содержащий структуру и данные. Если вам не нужны данные из этой базы, а достаточно просто сохранить структуру таблиц, можно воспользоваться следующим вариантом:\r\n</p>\r\n\r\n[code]mysqldump -uroot -pqwerty --no-data -B mydb > mydb-no-data.sql[/code]\r\n\r\n<p>\r\nКлюч <strong>--no-data</strong> (сокращенный вариант <strong>-d</strong>) указывает mysqldump не сохранять данные в дамп.\r\n</p>\r\n<p>\r\nТакже есть возможность создавать резервные копии только необходимых таблиц выбранной базы данных:\r\n</p>\r\n\r\n[code]mysqldump -uroot -pqwerty -B drupal --tables access users > drupal-access-users.sql[/code]\r\n\r\n<p>\r\nЭта команда создает резервную копию таблиц <strong>access</strong> и <strong>users</strong>, указанных вслед за опцией <strong>--tables</strong>, из базы данных <strong>drupal</strong> и сохраняет в файл <strong>drupal-access-users.sql</strong>.\r\n</p>\r\n<p>\r\nДля создания дампа только структуры таблиц <strong>access</strong> и <strong>users</strong>, без данных:\r\n</p>\r\n\r\n[code]mysqldump -uroot -pqwerty --no-data -B drupal --tables access users > drupal-access-users-no-data.sql[/code]\r\n\r\n<p>\r\nДля создания резервной копии нескольких баз данных, достаточно перечислить их названия после опции <strong>--databases</strong> (<strong>-B</strong>):\r\n</p>\r\n\r\n[code]mysqldump -uroot -pqwerty --no-data -B drupal joomla > drupal-joomla.sql[/code]\r\n\r\n<p>\r\nЧтобы создать резервную копию всех имеющихся баз данных, нужно использовать опцию <strong>--all-databases</strong> (сокращенный вариант <strong>-A</strong>):\r\n</p>\r\n\r\n[code]mysqldump -uroot -pqwerty -A > all-databases.sql[/code]\r\n\r\n<h2>Восстановление данных из резервной копии</h2>\r\n\r\n<p>\r\nДля восстановления базы данных или таблиц из сохраненного ранее дампа достаточно воспользоваться стандартной программой-клиентом mysql, перенаправив в нее файл резервной копии:\r\n</p>\r\n\r\n[code]mysql -uroot -pqwerty < all-databases.sql[/code]\r\n\r\n<p>\r\nПосле выполнения команды, будут восстановлены все базы данных из резервной копии, которую мы создали несколькими строками выше. Таким же способом происходит и восстановление отдельных баз данных или таблиц.\r\n</p>\r\n\r\n\r\n[code]mysql -uroot -pqwerty mydb < mydb.sql[/code]\r\n\r\n<p>\r\nВ приведенном примере мы восстанавливаем из резервной копии базу данных <strong>mydb</strong>. Обратите внимание — при восстановлении таблиц нужно указывать, в какую именно базу данных вы ее хотите поместить:\r\n</p>\r\n\r\n[code]mysql -uroot -pqwerty mydb < mytable.sql[/code]\r\n\r\n<p>\r\nЗдесь мы восстанавливаем из резервной копии отдельную таблицу <strong>mytable</strong>, помещая ее в базу <strong>mydb</strong>.\r\n</p>\r\n\r\n<h2>Параметры программы mysqldump</h2>\r\n<dl>\r\n  <dt><strong>--help, -?</strong></dt>\r\n  <dd>Вывод справки по опциям и используемым переменным.</dd>\r\n  <dt><strong>--add-drop-database</strong></dt>\r\n  <dd>Добавляет команду DROP DATABASE перед каждой командой CREATE DATABASE.</dd>\r\n  <dt><strong>--add-drop-table</strong></dt>\r\n  <dd>Добавляет команду DROP TABLE перед каждой командой CREATE TABLE.</dd>\r\n  <dt><strong>--add-locks</strong></dt>\r\n  <dd>Обрамляет дамп командами LOCK TABLES и UNLOCK TABLES для ускорения операций вставки.</dd>\r\n  <dt><strong>--all-databases, -A</strong></dt>\r\n  <dd>Создает полную резервную копию всех баз данных текущего сервера.</dd>\r\n  <dt><strong>--allow-keywords</strong></dt>\r\n  <dd>Разрешить имена столбцов, совпадающие с зарезервированными ключевыми словами. К имени такого столбца добавляется префикс таблицы.</dd>\r\n  <dt><strong>--character-sets-dir=<em>путь</em></strong></dt>\r\n  <dd>Директории с установленными наборами символов кодировок.</dd>\r\n  <dt><strong>--comments, -i</strong></dt>\r\n  <dd>Добавить в файл дампа, дополнительную информацию (например, версию программы, версию MySQL, имя хоста), отменяется опцией --skip-comments.</dd>\r\n  <dt><strong>--compact</strong></dt>\r\n  <dd>Создает более компактный дамп. Использование данного параметра автоматически включает опции --skip-add-drop-table, --skip-add-locks, --skip-comments, --skip-disable-keys и --skip-set-charset.</dd> \r\n  <dt><strong>--compatible=<em>имя</em></strong></dt>\r\n  <dd>Данная опция пытается повысить совместимость создаваемого дампа с базой данных другого типа или с более старой версией MySQL. Возможные значения: ansi, mysql323, mysql40, postgresql, oracle, mssql, db2, maxdb, no_key_options, no_table_options или no_field_options. Можно использовать несколько значений, разделенных запятыми.</dd>\r\n  <dt><strong>--complete-insert, -c</strong></dt>\r\n  <dd>Использовать полную форму оператора INSERT, включая имена столбцов.</dd>\r\n  <dt><strong>--compress, -C</strong></dt>\r\n  <dd>Использовать компрессию, при пересылке данных между клиентом и сервером, при условии, что они оба поддерживают компрессию.</dd>\r\n  <dt><strong>--create-options</strong></dt>\r\n  <dd>Включать все MySQL опции при использовании оператора CREATE TABLE.</dd>\r\n  <dt><strong>--databases, -B</strong></dt>\r\n  <dd>Делать дамп нескольких баз данных, перечисленных после данной опции. Без этого параметра mysqldump воспринимает в качестве имени базы данных первое значение, остальные интерпретируются как имена таблиц.</dd> \r\n  <dt><strong>--default-character-set=<em>кодировка</em></strong></dt>\r\n  <dd>Данная опция устанавливает кодировку по умолчанию. Если не определена, используется utf8, в ранних версиях latin1.</dd>\r\n  <dt><strong>--delayed-insert</strong></dt>\r\n  <dd>Вместо оператора INSERT использовать INSERT DELAYED.</dd>\r\n  <dt><strong>--delete-master-logs</strong></dt>\r\n  <dd>Удалять бинарный лог на основном сервере репликаций после создания дампа. При использовании этой опции, автоматически включается опция --master-data.</dd>\r\n  <dt><strong>--disable-keys, -K</strong></dt>\r\n  <dd>Оператор INSERT для каждой таблицы, обрамляется выражением /*!40000 ALTER TABLE tbl_name DISABLE KEYS */ и /*!40000 ALTER TABLE tbl_name ENABLE KEYS */. Данная опция ускоряет загрузку при восстановлении из дампа для таблиц типа MyISAM за счет того, что индексы создаются после вставки всех данных.</dd> \r\n  <dt><strong>--dump-date</strong></dt>\r\n  <dd>Если включена опция --comments, добавлять дату создания дампа.</dd>\r\n  <dt><strong>--extended-insert, -e</strong></dt>\r\n  <dd>Использовать многострочный синтаксис оператора INSERT. Уменьшает размер дампа и ускоряет последующую вставку данных.</dd>\r\n  <dt><strong>--flush-logs, -F</strong></dt>\r\n  <dd>Переоткрыть лог-файлы перед созданием резервной копии. Старый файл будет сохранен с суффиксом -old. При использовании с опцией --all-databases (сокращенный вариант -A), будут переоткрыты лог-файлы каждой базы данных, для которой делается дамп.</dd>\r\n  <dt><strong>--flush-privileges</strong></dt>\r\n  <dd>Выполнять команду FLUSH PRIVILEGES после создания дампа базы данных.</dd>\r\n  <dt><strong>--force, -f</strong></dt>\r\n  <dd>Продолжать создание резервной копии даже в случае возникновения ошибки.</dd>\r\n  <dt><strong>--host=<em>имя_хоста</em>, -h <em>имя_хоста</em></strong></dt>\r\n  <dd>Указывает хост MySQL сервера. По умолчанию резервная копия делается для хоста localhost.</dd>\r\n  <dt><strong>--hex-blob</strong></dt>\r\n  <dd>Представлять бинарные данные полей BINARY, VARBINARY, BLOB и BIT в шестнадцатиричном формате (hex).</dd>\r\n  <dt><strong>--ignore-table=<em>имя_базы</em>.<em>имя_таблицы</em></strong></dt>\r\n  <dd>Не скидывать в дамп таблицу «<em>имя_таблицы</em>» из базы «<em>имя_базы</em>». Опцию нужно использовать повторно, для каждой игнорируемой таблицы.</dd>\r\n  <dt><strong>--insert-ignore</strong></dt>\r\n  <dd>Дописывать в оператор INSERT опцию IGNORE.</dd>\r\n  <dt><strong>--lock-all-tables, -x</strong></dt>\r\n  <dd>Блокировка всех таблиц, во всех базах, на время создания резервной копии. Данная опция автоматически отключает --single-transaction и --lock-tables.</dd>\r\n  <dt><strong>--lock-tables, -l</strong></dt>\r\n  <dd>Блокировка таблиц базы данных, на время создания резервной копии. При дампе всех баз данных с этой опцией, таблицы каждой базы блокируются отдельно. Для транзакционных таблиц, типа InnoDB и BDB, предпочтительней использовать опцию --single-transaction.</dd>\r\n  <dt><strong>--log-error=<em>имя_файла</em></strong></dt>\r\n  <dd>Писать ошибки и предупреждения в файл «<em>имя_файла</em>».</dd>\r\n  <dt><strong>--no-autocommit</strong></dt>\r\n  <dd>Включает операторы INSERT для каждой таблицы, в операторы SET AUTOCOMMIT и COMMIT, для увеличения скорости выполнения большого количества запросов INSERT.</dd>\r\n  <dt><strong>--no-create-db, -n</strong></dt>\r\n  <dd>Данная опция подавляет вывод в дамп оператора CREATE DATABASE, при использовании опций --databases и --all-databases.</dd>\r\n  <dt><strong>--no-create-info, -t</strong></dt>\r\n  <dd>Не писать оператор CREATE TABLE, для пересоздания каждой таблицы из резервной копии.\r\n  <dt><strong>--no-data, -d</strong></dt>\r\n  <dd>Не скидывать в дамп содержимое таблиц. Оставляет только операторы CREATE TABLE для создания структуры.\r\n  <dt><strong>--opt</strong></dt>\r\n  <dd>Групповая опция. Синоним включения опций --add-drop-table, --add-locks, --create-options, --disable-keys, --extended-insert, --lock-tables, --quick, --set-charset. Ускоряет общий процесс создания резервной копии, включена по умолчанию. Отключается опцией --skip-opt.\r\n  <dt><strong>--order-by-primary</strong></dt>\r\n  <dd>Сортировать ряды таблиц по первичному ключу или по первому уникальному индексу, если индекс существует. Полезна в случае создания дампа таблиц MyISAM с последующей вставкой в таблицы типа InnoDB. \r\n  <dt><strong>--password[=password], -p[password]</strong></dt>\r\n  <dd>Пароль пользователя, для подключения к серверу. Не забывайте, что имя должно идти сразу за опцией, без разделяющего пробела. Если указана только сама опция, без пароля, пароль будет запрошен из командной строки.\r\n  <dt><strong>--port=<em>номер_порта</em>, -P <em>номер_порта</em></strong></dt>\r\n  <dd>Номер порта для подключения к серверу по протоколу TCP/IP.\r\n  <dt><strong>--protocol=[TCP|SOCKET|PIPE|MEMORY]</strong></dt>\r\n  <dd>Использовать для подключения к серверу MySQL указанный протокол.\r\n  <dt><strong>--quick, -q</strong></dt>\r\n  <dd>Данная опция вынуждает Mysqldump, восстанавливать строки, по одной за раз, вместо того чтобы скидывать весь объем строк в буфер памяти и выписывать их оттуда. Очень полезна при создании резервных копий больших таблиц.\r\n  <dt><strong>--quote-names, -Q</strong></dt>\r\n  <dd>Обрамлять имена баз данных, таблиц и колонок, кавычками. Включена по умолчанию.\r\n  <dt><strong>--replace</strong></dt>\r\n  <dd>Использовать оператор REPLACE вместо INSERT. Начиная с версии MySQL 5.1.3.\r\n  <dt><strong>--result-file=<em>имя_файла</em>, -r <em>имя_файла</em></strong></dt>\r\n  <dd>Вывод результатов в указанный файл. Имейте в виду, если файл с таким именем уже существует, он будет перезаписан и в случае возникновения ошибки, данные могут быть потеряны.\r\n  <dt><strong>--routines, -R</strong></dt>\r\n  <dd>Записывать в дамп хранимые процедуры и функции. Для использования данной опции, необходимы права SELECT на таблицу proc, системной базы данных mysql. Дамп будет содержать операторы CREATE PROCEDURE и CREATE FUNCTION. При использовании этой опции, эти операторы не будут содержать атрибутов времени создания и модификации хранимых процедур и функций и после восстановления дампа они будут равны времени восстановления. Если вам необходимо сохранить исходные атрибуты времени, вместо использования данной опции, сделайте отдельный дамп таблицы mysql.proc, под именем пользователя, который имеет на это достаточные права. Опция появилась с версии MySQL 5.1.2.\r\n  <dt><strong>--set-charset</strong></dt>\r\n  <dd>Добавляет в дамп оператор SET NAMES со значением кодировки по умолчанию. По умолчанию данная опция включена, чтобы подавить, используйте --skip-set-charset.\r\n  <dt><strong>--single-transaction</strong></dt>\r\n  <dd>Выполняет оператор BEGIN SQL, перед началом создания резервной копии. Опция используется только для транзакционных таблиц, типа InnoDB. Только этот тип таблиц может быть сохранен в дамп в актуальном состоянии, после выполнения BEGIN SQL, и без блокирования приложения. Например таблицы типа MyISAM или MEMORY, могут измениться в процессе создания резервной копии с использованием данной опции, в итоге, информация в дампе будет противоречивой, неактуальной. Опции --single-transaction и --lock-tables являются взаимоисключающими.\r\n  <dt><strong>--socket=<em>путь_к_файлу_сокета</em>, -S <em>путь_к_файлу_сокета</em></strong></dt>\r\n  <dd>Использовать файл unix-сокета для подключения к localhost.\r\n  <dt><strong>--tables</strong></dt>\r\n  <dd>Имена, идущие за этой опцией, считаются именами таблиц.\r\n  <dt><strong>--triggers</strong></dt>\r\n  <dd>Включать в резервную копию триггеры, для каждой таблицы. Отменить действие опции можно с помощью --skip-triggers.\r\n  <dt><strong>--user=<em>имя_пользователя</em>, -u <em>имя_пользователя</em></strong></dt>\r\n  <dd>Имя пользователя для подключения к MySQL серверу.\r\n  <dt><strong>--verbose, -v</strong></dt>\r\n  <dd>Вывод служебной информации о ходе выполнения программы.\r\n  <dt><strong>--where=\'<em>where_условие</em>\', -w \'<em>where_условие</em>\'</strong></dt>\r\n  <dd>Скидывать в дамп информацию, выбранную по условию WHERE.\r\n  <dt><strong>--xml, -X</strong></dt>\r\n  <dd>Создать дамп в формате XML.\r\n</dl>','2013-04-10 04:42:29',1),(5,6,'Создание PDF средствами PHP','','','PDF, PHP, Web-разработка','Класс FPDF является чистым PHP кодом и легко подключается к скриптам командой include() или require(). Скачать класс и ознакомиться с документацией (в том числе на русском языке) можно на сайте www.fpdf.org.','<p>\r\nКласс FPDF является чистым PHP кодом и легко подключается к скриптам командой include() или require(). Скачать класс и ознакомиться с документацией (в том числе на русском языке) можно на сайте <a href=\"http://www.fpdf.org/\">www.fpdf.org</a>.\r\n</p>\r\n<p>\r\nОсновная проблема при использовании класса — файлы кириллических шрифтов. Возьмем в папке C:/Windows/Fonts файлы шрифтов Arial, Times New Roman и Courier New: \r\n<p>\r\n<ul>\r\n  <li>arial.ttf, arialbd.ttf, ariali.ttf, arialbi.ttf</li>\r\n  <li>times.ttf, timesbd.ttf, timesi.ttf, timesbi.ttf</li>\r\n  <li>cour.ttf, courbd.ttf, couri.ttf, courbi.ttf</li>\r\n</ul>\r\n<p>\r\nВместе с классом FPDF поставляется скрипт makefont/makefont.php для генерация файла описания шрифта. Использовать его просто. Для этого создаем РНР файл (скажем, <strong>mf.php</strong>):\r\n</p>\r\n\r\n[php]<?php\r\nrequire(\'makefont/makefont.php\');\r\n\r\nMakeFont(\'arial.ttf\', \'cp1251\');\r\nMakeFont(\'arialbd.ttf\', \'cp1251\');\r\nMakeFont(\'ariali.ttf\', \'cp1251\');\r\nMakeFont(\'arialbi.ttf\', \'cp1251\');\r\n\r\nMakeFont(\'times.ttf\', \'cp1251\');\r\nMakeFont(\'timesbd.ttf\', \'cp1251\');\r\nMakeFont(\'timesi.ttf\', \'cp1251\');\r\nMakeFont(\'timesbi.ttf\', \'cp1251\');\r\n\r\nMakeFont(\'cour.ttf\', \'cp1251\');\r\nMakeFont(\'courbd.ttf\', \'cp1251\');\r\nMakeFont(\'couri.ttf\', \'cp1251\');\r\nMakeFont(\'courbi.ttf\', \'cp1251\');\r\n?>[/php]\r\n\r\n<p>\r\nЗапустив скрипт <strong>mf.php</strong> в браузере, получим файлы:\r\n</p>\r\n<ul>\r\n  <li>arial.php, arialbd.php, ariali.php, arialbi.php и arial.z, arialbd.z, ariali.z, arialbi.z</li>\r\n  <li>times.php, timesbd.php, timesi.php, timesbi.php и times.z, timesbd.z, timesi.z, timesbi.z</li>\r\n  <li>cour.php, courbd.php, couri.php, courbi.php и cour.z, courbd.z, couri.z, courbi.z</li>  \r\n</ul>\r\n<p>\r\nВсе эти файлы вместе с файлами шрифтов\r\n</p>\r\n<ul>\r\n  <li>arial.ttf, arialbd.ttf, ariali.ttf, arialbi.ttf</li>\r\n  <li>times.ttf, timesbd.ttf, timesi.ttf, timesbi.ttf</li>\r\n  <li>cour.ttf, courbd.ttf, couri.ttf, courbi.ttf</li>\r\n</ul>\r\n</p>\r\nнадо поместить в директорию font класса. Впрочем, можно самому указать директорию, которая будет хранить шрифты. Для этого нужно определить константу FPDF_FONTPATH:\r\n</p>\r\n\r\n[php]define(\'FPDF_FONTPATH\',\'font/\');[/php]\r\n\r\n<p>\r\nА теперь попробуем сформировать PDF-документ, используя класс FPDF. Для начала создадим файл <strong>makepdf.php</strong>, который будет осуществлять вывод PDF-документа прямо в браузер. В одной папке с этим файлом поместим файл класса fpdf.php и папку font с вложенными в нее файлами кириллических шрифтов.\r\n</p>\r\n\r\n[php]<?php\r\ndefine(\'FPDF_FONTPATH\', \'font/\');\r\nrequire \'fpdf.php\';\r\n// Создадаем экземпляр класса\r\n$pdf = new FPDF();\r\n$pdf->Open();\r\n\r\n//Подключаем кириллические шрифты\r\n$pdf->AddFont(\'ArialMT\', \'\', \'arial.php\');\r\n$pdf->AddFont(\'Arial-BoldMT\', \'\', \'arialbd.php\');\r\n$pdf->AddFont(\'Arial-ItalicMT\', \'\', \'ariali.php\');\r\n$pdf->AddFont(\'Arial-BoldItalicMT\', \'\', \'arialbi.php\');\r\n/*\r\n$pdf->AddFont(\'TimesNewRomanPSMT\', \'\', \'times.php\');\r\n$pdf->AddFont(\'TimesNewRomanPS-BoldMT\', \'\', \'timesbd.php\');\r\n$pdf->AddFont(\'TimesNewRomanPS-ItalicMT\', \'\', \'timesi.php\');\r\n$pdf->AddFont(\'TimesNewRomanPS-BoldItalicMT\', \'\', \'timesbi.php\');\r\n\r\n$pdf->AddFont(\'CourierNewPSMT\', \'\', \'cour.php\');\r\n$pdf->AddFont(\'CourierNewPS-BoldMT\', \'\', \'courbd.php\');\r\n$pdf->AddFont(\'CourierNewPS-ItalicMT\', \'\', \'couri.php\');\r\n$pdf->AddFont(\'CourierNewPS-BoldItalicMT\', \'\', \'courbi.php\');\r\n*/\r\n// Добавляем страницу в документ\r\n$pdf->AddPage();\r\n// Задаем режим отображения\r\n$pdf->SetDisplayMode(\'real\', \'default\');\r\n// Устанавливаем шрифт и его размер\r\n$pdf-> SetFont(\'ArialMT\', \'U\', 22);\r\n// Устанавливаем цвет текста заголовка (красный)\r\n$pdf->SetTextColor(255, 0, 0);\r\n// Устанавливаем цвет заливки (желтый)\r\n$pdf->SetFillColor(255, 255, 0);\r\n// Задаем абсциссу и ординату текущей позиции\r\n$pdf->SetXY(20, 20);\r\n// Устанавливаем цвет для рисования контура вокруг заголовка (красный)\r\n$pdf->SetDrawColor(255, 0, 0);\r\n// Выводим ячейку (прямоугольную область), которая будет заголовком:\r\n// 100 - ширина ячейки; 10 - высота ячейки;\r\n// $text - текст внутри ячейки; 1 - толщина рамки;\r\n// 1 - текущая позиция после вывода ячейки будет в начале следующей строки;\r\n// \'C\' - выравнивание по центру; 1 - заливка фона ячейки\r\n$text = \'Золотой теленок\';\r\n$pdf->Cell(150, 10, $text, 1, 1, \'C\', 1);\r\n// Вставляем изображение, которое будет ссылкой\r\n$pdf->Image(\'image.jpg\', 10, 40, 0, 0, \'JPG\', \'http://www.fpdf.org/\');\r\n// Устанавливаем шрифт для текста\r\n$pdf->SetFont(\'ArialMT\', \'\', 12);\r\n// Устанавливаем позицию начала текста\r\n$pdf->SetXY (10, 140);\r\n// Устанавливаем цвет текста\r\n$pdf->SetTextColor(10, 10, 10);\r\n$pdf->Write(5, \'Пешеходов  надо  любить.  Пешеходы  составляют  большую  часть  человечества.  Мало  того  —  лучшую  его  часть.  Пешеходы  создали  мир.  Это  они  построили  города,  возвели  многоэтажные  здания,  провели канализацию  и  водопровод, замостили улицы и осветили их электрическими лампами.\');\r\n// Устанавливаем шрифт для текста\r\n$pdf-> SetFont(\'Arial-ItalicMT\', \'\', 12);\r\n$pdf->Write(5, \' Это они распространили культуру по всему свету, изобрели книгопечатание, выдумали порох, перебросили мосты через реки, расшифровали египетские иероглифы, ввели в употребление безопасную бритву, уничтожили торговлю рабами и установили, что из бобов сои можно изготовить сто четырнадцать вкусных питательных блюд.\');\r\n// Разрыв строки\r\n$pdf->Ln();\r\n$pdf->Ln();\r\n// Устанавливаем шрифт для текста\r\n$pdf-> SetFont(\'Arial-BoldMT\', \'\', 12);\r\n// Устанавливаем цвет текста (синий)\r\n$pdf->SetTextColor(0, 0, 255);\r\n$pdf->MultiCell(0, 5, \'И когда все было готово, когда родная планета приняла сравнительно благоустроенный вид, появились автомобилисты.\', 1, \'R\', 1);\r\n// Разрыв строки\r\n$pdf->Ln();\r\n$pdf->Ln();\r\n// Устанавливаем шрифт для текста\r\n$pdf->SetFont(\'Arial-BoldItalicMT\', \'\', 12);\r\n// Устанавливаем цвет текста (зеленый)\r\n$pdf->SetTextColor(0, 200, 0);\r\n$pdf->MultiCell(0, 5, \'Надо заметить, что автомобиль тоже был изобретен пешеходами. Но автомобилисты об этом как-то сразу забыли. Кротких и умных пешеходов стали давить. Улицы, созданные пешеходами, перешли во власть автомобилистов. Мостовые стали вдвое шире, тротуары сузились до размера табачной бандероли. И пешеходы стали испуганно жаться к стенам домов.\', 0, \'J\', 0);\r\n// Выводим созданный документ в браузер\r\n$pdf->Output(\'example.pdf\', \'I\');\r\n?>[/php]\r\n\r\n<p>\r\nКонструктор FPDF принимает следующие параметры:\r\n</p>\r\n<ul>\r\n  <li>Ориентация страницы: P — книжная, L — альбомная; по умолчанию P</li>\r\n  <li>Единица измерения: pt — точка, mm — миллиметр, cm — санатиметр, in — дюйм; по умолчанию mm</li>\r\n  <li>Размер документа: A3, A4, A5, Letter, Legal или специальный формат, выраженный в виде массива из двух элементов: ширина и высота</li>\r\n</ul>\r\n<p>\r\nПосле создания экземпляра класса необходимо указать используемые шрифты. Так как кириллический Arial не является в классе FPDF шрифтом, установленным по умолчанию, сначала надо подключить его при помощи метода <strong>AddFont()</strong>.\r\n</p>\r\n\r\n[php]AddFont(string family [, string style [, string file]])[/php]\r\n\r\n<p>\r\nПервым аргументом мы указываем наименование шрифта. Его можно посмотреть в сгенерированном РНР файле (значение переменной $name). Второй аргумент — форматирование текста (B — Bold, I — Italic и смешанный BI или IB). Если аргумент пустой, то шрифт обычный. Третий аргумент — РНР файл описания. Теперь эти шрифты можно применять в данном документе.\r\n</p>\r\n<p>\r\nРазмер шрифта установим методом <strong>SetFont()</strong>. Этот метод можно вызывать несколько раз в одном скрипте, в то время как добавление AddFont() делается один раз для каждого шрифта. Формат записи SetFont() следующий:\r\n</p>\r\n\r\n[php]SetFont(string family [, string style [, float size]])[/php]\r\n\r\n<p>\r\nКак видите, у функции SetFont() три параметра: название шрифта, стиль (пустая строка — обычный шрифт, B — жирный, I — курсив, U — подчеркнутый ) и размер. Этот метод может быть вызван до создания первой страницы и заданный шрифт будет сохраняться от страницы к странице. Если нужно изменить только размер шрифта, проще будет вызвать метод <strong>SetFontSize()</strong>.\r\n</p>\r\n<p>\r\nИспользуя функцию <strong>SetTextColor()</strong>, устанавливаем цвет шрифта документа. Цвет может быть представлен в RGB или grey scale. В нашем примере мы используем RGB-значения.\r\n</p>\r\n<p>\r\nНеобходимо заметить, что документ сначала создается в буфере и лишь потом, при вызове метода Output(), выводится в браузер. Поэтому общая схема работы с документом следующая: создаем в буфере документ методом Open(), затем добавляем в этот документ страничку методом AddPage(), формируем содержимое документа различными методами типа Cell(), Write(), Image() и, наконец, выводим его из буфера в браузер.\r\n</p>\r\n<p>\r\nМетод <strong>Cell()</strong> выводит ячейку (прямоугольная область) с заданными границами, цветом фона и строкой. Верхний левый угол ячейки соответствует текущей позиции. Текст может быть выровнен. После вызова этого метода текущая позиция перемещается вправо или на следующую строку. Возможно задать ссылку на текст.\r\n</p>\r\n\r\n[php]Cell(float w [, float h [, string txt [, mixed border [, int ln [, string align [, int fill [, mixed link]]]]]]])[/php]\r\n\r\n<p>\r\nМетод <strong>Write()</strong> выводит текст от текущей позиции. При достижении правой границы (или встрече символа <strong>\\n</strong>) строка обрывается и текст продолжает выводиться с левого края. После выполнения текущая позиция остается в конце текста. В текст можно добавлять ссылки.\r\n</p>\r\n\r\n[php]Write(float h, string txt [, mixed link])[/php]\r\n\r\n<p>\r\nМетод <strong>Image()</strong> выводит изображение на страницу. Поддерживаемые форматы: JPEG и PNG. Должен быть задан верхний левый угол. Размеры могут быть заданы разными вариантами:\r\n</p>\r\n<ul>\r\n  <li>прямое задание ширины и высоты изображения (выраженные в единицах, заданных пользователем);</li>\r\n  <li>один размер задается, а другой будет вычислен автоматически с сохранением пропорций оригинала;</li>\r\n  <li>ни один размер не задается, в этом случае изображение будет выведено с разрешением 72 dpi.\r\n</ul>\r\n\r\n[php]Image(string file, float x, float y [, float w [, float h [, string type [, mixed link]]]])[/php]\r\n\r\n<p>\r\nМетод <strong>Ln()</strong> выполняет разрыв строки. Текущая абсцисса возвращается к левому краю страницы, а ордината увеличивается на величину, указанную в параметре.\r\n</p>\r\n\r\n[php]Ln([float h])[/php]\r\n\r\n<p>\r\nMeтод <strong>Output()</strong> выводит документ в строку, локальный файл или в браузер. Если нужно, то сначала будет вызван метод Close() для закрытия документа.\r\n</p>\r\n\r\n[php]string Output([string name [, string dest]])[/php]\r\n\r\n<p>\r\nРезультат работы скрипта можно посмотреть <a href=\"/files/blog/5/example.pdf\">здесь</a>, а скачать исходные коды <a href=\"/files/blog/5/fpdf.zip\">здесь</a>.\r\n</p>','2011-12-18 16:14:34',1),(6,5,'jQuery. Начало работы','','','','Для начала работы с библиотекой jQuery достаточно загрузить один файл — саму библиотеку — и связать его с html-документом, используя тег &lt;script&gt;. Впрочем, можно поступить еще проще — подключить последнюю версию библиотеки с официального сайта.','<p>\r\nДля начала работы с библиотекой jQuery достаточно загрузить один файл — саму библиотеку — и связать его с html-документом, используя тег &lt;script&gt;. Впрочем, можно поступить еще проще — подключить последнюю версию библиотеки с официального сайта:\r\n</p>\r\n\r\n[html]\r\n<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n[/html]\r\n\r\n<h2>Выбор элементов страницы по id</h2>\r\n\r\n<p>\r\nПри использовании библиотеки jQuery для доступа к ее возможностям применяется функция <span style=\"color: blue;\">jquery()</span>. Впрочем, существует и сокращенная форма записи — <span style=\"color: blue;\">$()</span>.\r\n</p>\r\n<p>\r\nЧтобы обратиться к элементу по его <code>id</code>, мы вызываем функцию <code>$(\'#someid\')</code>:\r\n</p>\r\n\r\n[html]\r\n<html>\r\n<head>\r\n<title>Выбор элемента по ID</title>\r\n<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n<script type=\"text/javascript\">\r\nfunction setBackgroundColor() {\r\n    $(\'#third\').toggleClass(\'cyan\');\r\n}\r\n</script>\r\n<style type=\"text/css\">\r\np.cyan {\r\n    background-color: cyan;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<h1>Выбор элемента по id</h1>\r\n<div>\r\n  <p>Первый параграф</p>\r\n  <p>Второй параграф</p>\r\n  <p id=\"third\">Третий параграф</p>\r\n  <p>Четвертый параграф</p>\r\n</div>\r\n<input type=\"button\" onclick=\"setBackgroundColor()\" value=\"Поменять фон\" />\r\n</body>\r\n</html>\r\n[/html]\r\n\r\n<p>\r\nВместо функции <span style=\"color: blue;\">toggleClass()</span> можно использовать функции <span style=\"color: blue;\">addClass()</span> и <span style=\"color: blue;\">removeClass()</span>:\r\n</p>\r\n\r\n[js]\r\nfunction setBackgroundColor() {\r\n    var third = $(\'#third\');\r\n    if ( ! third.hasClass(\'cyan\') )\r\n        third.addClass(\'cyan\');\r\n    else\r\n        third.removeClass(\'cyan\');\r\n}\r\n[/js]\r\n\r\n<h2>Выбор набора элементов</h2>\r\n\r\n<p>\r\nПередавая <em>селектор</em> функции <code>jquery()</code> — или в функцию <code>$()</code>, что, фактически, одно и то же, — мы выбираем набор элементов страницы.\r\n</p>\r\n<p>\r\nСелекторы позволяют указывать, с какими элементами страницы мы хотим работать. Давайте выберем все элементы <code>&lt;p&gt;</code> на странице, используя селектор <code>$(\'p\')</code>:\r\n</p>\r\n\r\n[html]\r\n<html>\r\n<head>\r\n<title>Выбор набора элементов</title>\r\n<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n<script type=\"text/javascript\">\r\nfunction count() {\r\n    alert(\'На странице \' + $(\'p\').size() + \' параграфов\');\r\n}\r\n</script>\r\n</head>\r\n<body>\r\n<h1>Выбор набора элементов</h1>\r\n<div>\r\n  <p>Первый параграф</p>\r\n  <p>Второй параграф</p>\r\n  <p>Третий параграф</p>\r\n  <p>Четвертый параграф</p>\r\n  <p>Пятый параграф</p>\r\n</div>\r\n<input type=\"button\" onclick=\"count()\" value=\"Количество параграфов\" />\r\n</body>\r\n</html>\r\n[/html]\r\n\r\n<p>\r\nС помощью функции <span style=\"color: blue;\">size()</span> мы определяем количество элементов <span style=\"color: blue;\">&lt;p&gt;</span> в возвращенном наборе и отображаем результат в диалоговом окне. Вместо функции <span style=\"color: blue;\">size()</span> можно использовать свойство <span style=\"color: blue;\">length</span>.\r\n</p>\r\n\r\n<h2>Выбор элементов по классу CSS</h2>\r\n\r\n<p>\r\nВыбирать элементы страницы можно по классу CSS. Например, если на странице существует несколько абзацев с классом <span style=\"color: blue;\">cyan</span>, мы можем их выбрать с помощью <span style=\"color: blue;\">$(\'p.cyan\')</span>:\r\n</p>\r\n\r\n[html]\r\n<html>\r\n<head>\r\n<title>Выбор элементов по классу CSS</title>\r\n<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n<script type=\"text/javascript\">\r\nfunction setBold() {\r\n    $(\'p.cyan\').toggleClass(\'bold\');\r\n}\r\n</script>\r\n<style type=\"text/css\">\r\np.cyan {\r\n    background-color: cyan;\r\n}\r\n.bold {\r\n    font-weight: bold;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<h1>Выбор элементов по классу CSS</h1>\r\n<div>\r\n  <p>Первый параграф</p>\r\n  <p class=\"cyan\">Второй параграф</p>\r\n  <p>Третий параграф</p>\r\n  <p class=\"cyan\">Четвертый параграф</p>\r\n  <p>Пятый параграф</p>\r\n</div>\r\n<input type=\"button\" onclick=\"setBold()\" value=\"Поменять шрифт\" />\r\n</body>\r\n</html>\r\n[/html]','2013-04-15 06:53:33',1),(7,6,'Работа с Excel средствами PHP','','','Excel, MS, PHP, Web-разработка','PHPExcel — библиотека для создания и чтения данных из файлов формата OpenXML (который используется в MS Excel 2007). С ее помощью можно считывать из файлов, записывать в файлы, форматировать содержимое, работать с формулами и т.д.','<p>\r\nPHPExcel — библиотека для создания и чтения данных из файлов формата OpenXML (который используется в MS Excel 2007). С ее помощью можно считывать из файлов, записывать в файлы, форматировать содержимое, работать с формулами и т.д. Для работы PHPExcel требуется версия PHP 5.2 или выше, с установленными библиотеками Zip, XML и GD2.\r\n</p>\r\n\r\n<h2>Установка PHPExcel</h2>\r\n\r\n<p>\r\nПервым делом библиотеку необходимо скачать. Для этого переходим на <a href=\"http://phpexcel.codeplex.com/\">официальный сайт</a> библиотеки и скачиваем архив PHPExcel-1.7.8.zip. После распаковки мы получим несколько файлов и папок:\r\n</p>\r\n<ul>\r\n  <li>Classes</li>\r\n  <li>Documentation</li>\r\n  <li>Tests</li>\r\n  <li>changelog.txt</li>\r\n  <li>install.txt</li>\r\n  <li>license.txt</li>\r\n</ul>\r\n<p>\r\nФайлы — это различные описания по предыдущим версиям, лицензионное соглашение и очень краткая инструкция по установке. Далее, в папке Classes, содержится непосредственно сама библиотека PHPExcel — эту папку необходимо скопировать в корень нашего скрипта.\r\n</p>\r\n<p>\r\nВ папке Documentation содержится документация по библиотеке на английском языке. В папке Tests — примеры по использованию библиотеки.\r\n</p>\r\n\r\n<h2>Создание Excel-файла</h2>\r\n\r\n<p>\r\nИтак, давайте создадим файл <strong>makeexcel.php</strong> и начинаем работать с ним. Для начала нам необходимо подключить главный файл библиотеки PHPExcel.php (который находится в папке Classes) и создать объект класса PHPExcel:\r\n</p>\r\n\r\n[php]require_once \'Classes/PHPExcel.php\';\r\n$pExcel = new PHPExcel();[/php]\r\n\r\n<h3>Настройки листа книги Excel</h3>\r\n\r\n<p>\r\nДокумент Excel состоит из книг, а каждая книга в свою очередь, состоит из листов. Далее лист состоит из набора ячеек, доступ к которым осуществляется по координатам. То есть у нас есть столбцы, которые имеют буквенные имена (А, В, С и т.д) и есть строки, которые пронумерованы. Значит, что бы получить доступ к первой ячейке нужно указать код А1. Точно также мы с помощью библиотеки будем получать доступ к каждой ячейке.\r\n</p>\r\n<p>\r\nИтак, первым делом необходимо выбрать активный лист, на который мы будем выводить данные и получить объект этого листа:\r\n</p>\r\n\r\n[php]$pExcel->setActiveSheetIndex(0);\r\n$aSheet = $pExcel->getActiveSheet();[/php]\r\n\r\n<p>\r\nС помощью метода <span style=\"color: blue;\">setActiveSheetIndex(0)</span> указываем индекс (номер) активного листа. Нумерация листов начинается с нуля. Далее с помощью метода <span style=\"color: blue;\">getActiveSheet()</span> получаем объект этого активного листа, то есть другими словами получаем доступ к нему для работы. И сохраняем этот объект в переменную <span style=\"color: blue;\">$aSheet</span>.\r\n</p>\r\n<p>\r\nЕсли Вы захотите указать активным какой то другой лист, то вначале его необходимо создать, при помощи метода:\r\n</p>\r\n\r\n[php]$pExcel->createSheet();[/php]\r\n\r\n<p>\r\nЗатем, по аналогии, указываем индекс и получаем объект активного листа.\r\n</p>\r\n\r\n[php]// Ориентация страницы и  размер листа\r\n$aSheet->getPageSetup()\r\n       ->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_PORTRAIT);\r\n$aSheet->getPageSetup()\r\n       ->SetPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);\r\n// Поля документа\r\n$aSheet->getPageMargins()->setTop(1);\r\n$aSheet->getPageMargins()->setRight(0.75);\r\n$aSheet->getPageMargins()->setLeft(0.75);\r\n$aSheet->getPageMargins()->setBottom(1);\r\n// Название листа\r\n$aSheet->setTitle(\'Прайс-лист\');\r\n// Шапка и футер (при печати)\r\n$aSheet->getHeaderFooter()\r\n       ->setOddHeader(\'&CТД ТИНКО: прайс-лист\');\r\n$aSheet->getHeaderFooter()\r\n       ->setOddFooter(\'&L&B\'.$aSheet->getTitle().\'&RСтраница &P из &N\');\r\n// Настройки шрифта\r\n$pExcel->getDefaultStyle()->getFont()->setName(\'Arial\');\r\n$pExcel->getDefaultStyle()->getFont()->setSize(8);[/php]\r\n\r\n<p>\r\nВначале задаем ориентацию листа при помощи метода <span style=\"color: blue;\">setOrientation()</span>, которому передаем константу класса <span style=\"color: blue;\">PHPExcel_Worksheet_PageSetup</span>:\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">ORIENTATION_PORTRAIT</span> — книжная</li>\r\n  <li><span style=\"color: blue;\">ORIENTATION_LANDSCAPE</span> — альбомная</li>\r\n</ul>\r\n<p>\r\nОбратите внимание, что перед методом <span style=\"color: blue;\">setOrientation()</span> необходимо вызвать метод <span style=\"color: blue;\">getPageSetup()</span>, который предоставляет доступ к настройкам страницы.\r\n</p>\r\n<p>\r\nДалее вызываем метод <span style=\"color: blue;\">SetPaperSize()</span>, который позволяет задать размер страницы для печати. Ему передаем параметром константу <span style=\"color: blue;\">PAPERSIZE_A4</span> класса <span style=\"color: blue;\">PHPExcel_Worksheet_PageSetup</span>. Что означает, что размер листа страницы будет установлен А4.\r\n</p>\r\n<p>\r\nДалее устанавливаем поля документа, то есть отступы от краев документа. Отступы задаются в специальных символьных единицах. Вначале, обратите внимание, вызываем у объекта <span style=\"color: blue;\">$aSheet</span> метод <span style=\"color: blue;\">getPageMargins()</span>, который вернет объект класса, отвечающего за настройки полей страницы. Затем вызываем методы <span style=\"color: blue;\">setTop()</span>, <span style=\"color: blue;\">setRight()</span>, <span style=\"color: blue;\">setLeft()</span> и <span style=\"color: blue;\">setBottom()</span>.\r\n<p>\r\n<p>\r\nДалее при помощи метода <span style=\"color: blue;\">setTitle(\'Прайс лист\')</span> задаем название нашего листа.\r\n</p>\r\n<p>\r\nЕсли нужно, можно при печати выводить шапку и подвал листа:\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">setOddHeader()</span>;</li>\r\n  <li><span style=\"color: blue;\">setOddFooter()</span>;</li>\r\n</ul>\r\n<p>\r\nОбратите внимание на передаваемые параметры:\r\n</p>\r\n<ul>\r\n  <li>для шапки передаем строку <span style=\"color: blue;\">\'&CТД ТИНКО: прайс-лист\'</span>; метка <span style=\"color: red;\">&C</span> означает, что текст нужно расположить по центру.</li>\r\n  <li>для подвала передаем строку <span style=\"color: blue;\">\'&amp;L&amp;B\'.$aSheet->getTitle().\'&amp;RСтраница &amp;P из &amp;N\'</span>; это означает, что нужно вывести слева и жирным шрифтом (<span style=\"color: red;\">&amp;L&amp;B</span>) название листа (метод <span style=\"color: blue;\">$aSheet->getTitle()</span>), затем справа (<span style=\"color: red;\">&amp;R</span>) вывести номер страницы (<span style=\"color: red;\">&amp;P</span>) из общего количества страниц (<span style=\"color: red;\">&amp;N</span>).</li>\r\n</ul>\r\n<p>\r\nЗатем указываем настройки шрифта по умолчанию:\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">setName(\'Arial\')</span> — задаем имя шрифта;</li>\r\n  <li><span style=\"color: blue;\">setSize(8)</span> — задаем размер шрифта.</li>\r\n</ul>\r\n\r\n<h3>Наполнение документа данными</h3>\r\n\r\n<p>\r\nДля начала давайте зададим ширину столбцов (в символьных единицах), которые нам понадобятся:\r\n</p>\r\n\r\n[php]$aSheet->getColumnDimension(\'A\')->setWidth(3);\r\n$aSheet->getColumnDimension(\'B\')->setWidth(7);\r\n$aSheet->getColumnDimension(\'C\')->setWidth(20);\r\n$aSheet->getColumnDimension(\'D\')->setWidth(40);\r\n$aSheet->getColumnDimension(\'E\')->setWidth(10);[/php]\r\n\r\n<p>\r\nТеперь заполним несколько ячеек текстом:\r\n<p>\r\n\r\n[php]$aSheet->mergeCells(\'A1:E1\');\r\n$aSheet->getRowDimension(\'1\')->setRowHeight(20);\r\n$aSheet->setCellValue(\'A1\',\'ТД ТИНКО\');\r\n$aSheet->mergeCells(\'A2:E2\');\r\n$aSheet->setCellValue(\'A2\',\'Поставка технических средств безопасности\');\r\n$aSheet->mergeCells(\'A4:C4\');\r\n$aSheet->setCellValue(\'A4\',\'Дата создания прайс-листа\');[/php]\r\n\r\n<p>\r\nЗдесь мы сначала объеденяем ячейки с А1 до E1 при помощи метода <span style=\"color: blue;\">mergeCells()</span>, далее задаем высоту строки: вначале получаем доступ к строке 1 при помощи метода <span style=\"color: blue;\">getRowDimension(\'1\')</span>, затем задаем высоту — <span style=\"color: blue;\">setRowHeight(20)</span>. Далее при помощи метода <span style=\"color: blue;\">setCellValue(\'A1\',\'ТД ТИНКО\')</span>, устанавливаем значение ячейки А1.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/7/phpexcel.jpg\" class=\"zoom\"><img src=\"/files/blog/7/phpexcel-small.jpg\" alt=\"Создание Excel средствами PHP\" /></a>\r\n</p>\r\n<p>\r\nДалее давайте в ячейку D4 запишем текущую дату:\r\n</p>\r\n\r\n[php]// Записываем данные в ячейку\r\n$date = date(\'d-m-Y\');\r\n$aSheet->setCellValue(\'D4\',$date);\r\n// Устанавливает формат данных в ячейке (дата вида дд-мм-гггг)\r\n$aSheet->getStyle(\'D4\')->getNumberFormat()\r\n->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_DATE_XLSX14);[/php]\r\n\r\n<div class=\"note\">\r\nС помощью констант, определенных в классе PHPExcel_Style_NumberFormat, можно задать формат ячейки: FORMAT_GENERAL (общий), FORMAT_TEXT (текст), FORMAT_NUMBER (число), FORMAT_NUMBER_00 (число с дробной частью), FORMAT_PERCENTAGE (процент), FORMAT_PERCENTAGE_00 (процент с дробной частью) и т.п.\r\n</div>\r\n\r\n<p>\r\nТеперь, используя метод <span style=\"color: blue;\">setCellValue()</span>, а также цикл while() наполним данными наш прайс-лист:\r\n</p>\r\n\r\n[php]mysql_connect(DB_HOST, DB_USER, DB_PASS);\r\nmysql_query(\'SET NAMES utf8\');\r\nmysql_select_db(DB_NAME);\r\n\r\n// Создаем шапку таблички данных\r\n$aSheet->setCellValue(\'A6\',\'№\');\r\n$aSheet->setCellValue(\'B6\',\'Код\');\r\n$aSheet->setCellValue(\'C6\',\'Наименование\');\r\n$aSheet->setCellValue(\'D6\',\'Описание\');\r\n$aSheet->setCellValue(\'E6\',\'Цена\');\r\n\r\n$query = \"SELECT `code`, `name`, `description`, `price` FROM `products` WHERE 1 LIMIT 10\";\r\n$res = mysql_query( $query );\r\n\r\n$i = 1;\r\nwhile( $prd = mysql_fetch_assoc($res) ) {\r\n    $aSheet->setCellValue(\'A\'.($i+6), $i);\r\n    $aSheet->setCellValue(\'B\'.($i+6), $prd[\'code\']);\r\n    $aSheet->setCellValue(\'C\'.($i+6), $prd[\'name\']);\r\n    $aSheet->setCellValue(\'D\'.($i+6), $prd[\'description\']);\r\n    $aSheet->setCellValue(\'E\'.($i+6), $prd[\'price\']);\r\n    $i++;\r\n}[/php]\r\n\r\n<h3>Стилизация данных</h3>\r\n\r\n<p>\r\nДавайте немного украсим наш прайс-лист, то есть каждой ячейке добавим стилей. Для этого необходимо создать массив со стилями и при помощи метода <span style=\"color: blue;\">applyFromArray()</span>, применить этот массив к ячейке (или ячейкам):\r\n</p>\r\n\r\n[php]// массив стилей\r\n$style_wrap = array(\r\n    // рамки\r\n    \'borders\'=>array(\r\n        // внешняя рамка\r\n        \'outline\' => array(\r\n            \'style\'=>PHPExcel_Style_Border::BORDER_THICK,\r\n            \'color\' => array(\r\n                \'rgb\'=>\'006464\'\r\n            )\r\n        ),\r\n        // внутренняя\r\n        \'allborders\'=>array(\r\n            \'style\'=>PHPExcel_Style_Border::BORDER_THIN,\r\n            \'color\' => array(\r\n                \'rgb\'=>\'CCCCCC\'\r\n            )\r\n        )\r\n    )\r\n);\r\n\r\n$aSheet->getStyle(\'A1:F\'.($i+5))->applyFromArray($style_wrap);[/php]\r\n\r\n<p>\r\nТеперь, по аналогии, применим стили к остальным ячейкам:\r\n</p>\r\n\r\n[php]// Стили для верхней надписи (первая строка)\r\n$style_header = array(\r\n    // Шрифт\r\n    \'font\'=>array(\r\n        \'bold\' => true,\r\n        \'name\' => \'Times New Roman\',\r\n        \'size\' => 15,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'006464\'\r\n        )\r\n    ),\r\n    // Выравнивание\r\n    \'alignment\' => array(\r\n        \'horizontal\' => PHPExcel_STYLE_ALIGNMENT::HORIZONTAL_CENTER,\r\n        \'vertical\' => PHPExcel_STYLE_ALIGNMENT::VERTICAL_CENTER,\r\n    ),\r\n    // Заполнение цветом\r\n    \'fill\' => array(\r\n        \'type\' => PHPExcel_STYLE_FILL::FILL_SOLID,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'99CCCC\'\r\n        )\r\n    ),\r\n    \'borders\'=>array(\r\n        \'bottom\'=>array(\r\n            \'style\'=>PHPExcel_Style_Border::BORDER_THIN,\r\n            \'color\' => array(\r\n                \'rgb\'=>\'006464\'\r\n            )\r\n        )\r\n    )\r\n);\r\n$aSheet->getStyle(\'A1:E1\')->applyFromArray($style_header);\r\n\r\n// Стили для слогана компании (вторая строка)\r\n$style_slogan = array(\r\n    // шрифт\r\n    \'font\'=>array(\r\n        \'bold\' => true,\r\n        \'italic\' => true,\r\n        \'name\' => \'Times New Roman\',\r\n        \'size\' => 12,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'006464\'\r\n        )\r\n    ),\r\n    // выравнивание\r\n    \'alignment\' => array(\r\n        \'horizontal\' => PHPExcel_STYLE_ALIGNMENT::HORIZONTAL_CENTER,\r\n        \'vertical\' => PHPExcel_STYLE_ALIGNMENT::VERTICAL_CENTER,\r\n    ),\r\n    // заполнение цветом\r\n    \'fill\' => array(\r\n        \'type\' => PHPExcel_STYLE_FILL::FILL_SOLID,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'99CCCC\'\r\n        )\r\n    ),\r\n    //рамки\r\n    \'borders\' => array(\r\n        \'bottom\' => array(\r\n            \'style\'=>PHPExcel_Style_Border::BORDER_THIN,\r\n            \'color\' => array(\r\n                \'rgb\'=>\'006464\'\r\n            )\r\n        )\r\n    )\r\n);\r\n$aSheet->getStyle(\'A2:E2\')->applyFromArray($style_slogan);\r\n\r\n// Стили для текта возле даты\r\n$style_tdate = array(\r\n    // выравнивание\r\n    \'alignment\' => array(\r\n        \'horizontal\' => PHPExcel_STYLE_ALIGNMENT::HORIZONTAL_RIGHT,\r\n    ),\r\n    // заполнение цветом\r\n    \'fill\' => array(\r\n        \'type\' => PHPExcel_STYLE_FILL::FILL_SOLID,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'EEEEEE\'\r\n        )\r\n    ),\r\n    // рамки\r\n    \'borders\' => array(\r\n        \'right\' => array(\r\n            \'style\'=>PHPExcel_Style_Border::BORDER_NONE\r\n        )\r\n    )\r\n);\r\n$aSheet->getStyle(\'A4:D4\')->applyFromArray($style_tdate);\r\n \r\n// Стили для даты\r\n$style_date = array(\r\n    // заполнение цветом\r\n    \'fill\' => array(\r\n        \'type\' => PHPExcel_STYLE_FILL::FILL_SOLID,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'EEEEEE\'\r\n        )\r\n    ),\r\n    // рамки\r\n    \'borders\' => array(\r\n        \'left\' => array(\r\n            \'style\'=>PHPExcel_Style_Border::BORDER_NONE\r\n        )\r\n    ),\r\n);\r\n$aSheet->getStyle(\'E4\')->applyFromArray($style_date);\r\n \r\n// Стили для шапки таблицы (шестая строка)\r\n$style_hprice = array(\r\n    // выравнивание\r\n    \'alignment\' => array(\r\n    \'horizontal\' => PHPExcel_STYLE_ALIGNMENT::HORIZONTAL_CENTER,\r\n    ),\r\n    // заполнение цветом\r\n    \'fill\' => array(\r\n        \'type\' => PHPExcel_STYLE_FILL::FILL_SOLID,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'CFCFCF\'\r\n        )\r\n    ),\r\n    // шрифт\r\n    \'font\'=>array(\r\n        \'bold\' => true,\r\n        /* \'italic\' => true, */\r\n        \'name\' => \'Times New Roman\',\r\n        \'size\' => 10\r\n    ),\r\n);\r\n$aSheet->getStyle(\'A6:E6\')->applyFromArray($style_hprice);\r\n\r\n// Cтили для данных в таблице прайс-листа\r\n$style_price = array(\r\n    \'alignment\' => array(\r\n    \'horizontal\' => PHPExcel_STYLE_ALIGNMENT::HORIZONTAL_LEFT,\r\n    )\r\n);\r\n$aSheet->getStyle(\'A7:E\'.($i+5))->applyFromArray($style_price);[/php]\r\n\r\n<h3>Сохранение документа</h3>\r\n\r\n<p>\r\nОсталось только сохранить наш документ:\r\n</p>\r\n\r\n[php]/*\r\n$objWriter = PHPExcel_IOFactory::createWriter($pExcel, \'Excel5\');\r\n$objWriter->save(\'simple.xls\');\r\n*/\r\n$objWriter = PHPExcel_IOFactory::createWriter($pExcel, \'Excel2007\');\r\n$objWriter->save(\'simple.xlsx\');[/php]\r\n\r\n<p>\r\nили так\r\n</p>\r\n\r\n[php]/*\r\n$objWriter = new PHPExcel_Writer_Excel5($pExcel);\r\n$objWriter->save(\'simple.xls\');\r\n*/\r\n$objWriter = new PHPExcel_Writer_Excel2007($pExcel);\r\n$objWriter->save(\'simple.xlsx\');[/php]\r\n\r\n<p>\r\nЕсли нужно вывести документ в браузер\r\n</p>\r\n\r\n[php]/*\r\nheader(\'Content-Type:application/vnd.ms-excel\');\r\nheader(\'Content-Disposition:attachment;filename=\"simple.xls\"\');\r\n$objWriter = new PHPExcel_Writer_Excel5($pExcel);\r\n*/\r\nheader(\'Content-Type:xlsx:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\');\r\nheader(\'Content-Disposition:attachment;filename=\"simple.xlsx\"\');\r\n$objWriter = new PHPExcel_Writer_Excel2007($pExcel);\r\n$objWriter->save(\'php://output\');[/php]\r\n\r\n<p>\r\nПервый заголовок указывает браузеру тип открываемого контента — это документ формата Excel. Второй — говорит браузеру, что документ необходимо отдать пользователю на скачивание под именем simple.xlsx.\r\n</p>\r\n\r\n<h3>Добавление формул</h3>\r\n\r\n<div class=\"note\">\r\n<p>\r\nФормула Excel — это математическое выражение, которое создается для вычисления результата и которое может зависеть от содержимого других ячеек. Формула в ячейке Excel может содержать данные, ссылки на другие ячейки, а также обозначение действий, которые необходимо выполнить.\r\n</p>\r\n<p>\r\nИспользование ссылок на ячейки позволяет пересчитывать результат по формулам, когда происходят изменения содержимого ячеек, включенных в формулы. Формулы Excel начинаются со знака =. Скобки (&nbsp;) могут использоваться для определения порядка математических операции.\r\n</p>\r\n<p>\r\nПримеры формул Excel: <span style=\"color: blue; border: 1px solid #ddd;\">=27+36</span>, <span style=\"color: blue; border: 1px solid #ddd;\">=А1+А2-АЗ</span>, <span style=\"color: blue; border: 1px solid #ddd;\">=SUM(А1:А5)</span>, <span style=\"color: blue; border: 1px solid #ddd;\">=MAX(АЗ:А5)</span>, <span style=\"color: blue; border: 1px solid #ddd;\">=(А1+А2)/АЗ</span>.\r\n</p>\r\n</div>\r\n\r\n<p>\r\nPHPExcel тоже поддерживает добавление формул в ячейки. Установить формулу можно так:\r\n</p>\r\n\r\n[php]// формула для вычисления суммы\r\n$formula = \'=SUM(D2:D4)\';\r\n$aSheet->setCellValue(\'D5\', $formula);[/php]\r\n\r\n<p>\r\n<img src=\"/files/blog/7/phpexcel-2.jpg\" alt=\"Добавление формул\" />\r\n</p>\r\n\r\n<h2>Чтение Excel-файла</h2>\r\n\r\n<p>\r\nСамый простой вариант — считать все таблицы (на всех листах) и записать данные в трехмерный массив:\r\n</p>\r\n\r\n[php]// Подключаем библиотеку\r\nrequire_once \'Classes/PHPExcel.php\';\r\n$pExcel = PHPExcel_IOFactory::load(\'simple.xlsx\');\r\n\r\n// Цикл по листам Excel-файла\r\nforeach ($pExcel->getWorksheetIterator() as $worksheet) {\r\n    // выгружаем данные из объекта в массив\r\n    $tables[] = $worksheet->toArray();\r\n}[/php]\r\n\r\n<p>\r\nТеперь можно вывести массив:\r\n</p>\r\n\r\n[php]// Цикл по листам Excel-файла\r\nforeach( $tables as $table ) {\r\n    echo \'<table border=\"1\">\';\r\n    // Цикл по строкам\r\n    foreach($table as $row) {\r\n        echo \'<tr>\';\r\n        // Цикл по колонкам\r\n        foreach( $row as $col ) {\r\n            echo \'<td>\'.$col.\'</td>\';\r\n        }\r\n        echo \'</tr>\';\r\n    }\r\n    echo \'</table>\';\r\n}[/php]\r\n\r\n<p>\r\nДля получения значения отдельной ячейки:\r\n</p>\r\n[php]// выбираем лист, с которым будем работать\r\n$pExcel->setActiveSheetIndex(0);\r\n$aSheet = $pExcel->getActiveSheet();\r\n// получаем доступ к ячейке по номеру строки \r\n// (нумерация с единицы) и столбца (нумерация с нуля) \r\n$cell = $aSheet->getCellByColumnAndRow($col, $row);\r\n// читаем значение ячейки\r\n$value = $cell->getValue()[/php]\r\n\r\n<p>\r\nили так:\r\n</p>\r\n\r\n[php]$value = $pExcel->getActiveSheet()->getCellValue(\'B2\')[/php]\r\n\r\n<p>\r\nЕще два примера:\r\n</p>\r\n\r\n[php]// Цикл по листам Excel-файла\r\nforeach( $pExcel->getWorksheetIterator() as $worksheet ) {\r\n    echo \'<h2>Лист «\'.$worksheet->getTitle().\'»</h2>\';\r\n    echo \'<table border=\"1\">\';\r\n    // Цикл по строкам\r\n    foreach( $worksheet->getRowIterator() as $row ) {\r\n        echo \'<tr>\';\r\n        // Цикл по колонкам\r\n        foreach( $row->getCellIterator() as $cell ) {\r\n            $value = $cell->getValue();\r\n            // $calcValue = $cell->getCalculatedValue()\r\n            // $dataType = PHPExcel_Cell_DataType::dataTypeForValue($value);\r\n            echo \'<td>\'.$value.\'</td>\';\r\n        }\r\n        echo \'</tr>\';\r\n    }\r\n    echo \'</table>\';\r\n}[/php]\r\n\r\n\r\n[php]// Цикл по листам Excel-файла\r\nforeach ($pExcel->getWorksheetIterator() as $worksheet) {\r\n    $worksheetTitle     = $worksheet->getTitle();\r\n    $highestRow         = $worksheet->getHighestRow(); // например, 10\r\n    $highestColumn      = $worksheet->getHighestColumn(); // например, \'E\'\r\n    $highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn);\r\n    $nrColumns = ord($highestColumn) - 64;\r\n    echo \'<h2>Лист «\'.$worksheetTitle.\'» \';\r\n    echo $nrColumns . \' колонок (A-\' . $highestColumn . \') \';\r\n    echo \' и \' . $highestRow . \' строк.</h2>\';\r\n    echo \'<table border=\"1\">\';\r\n    // Цикл по строкам\r\n    for ($row = 1; $row <= $highestRow; $row++) {\r\n        echo \'<tr>\';\r\n        // Цикл по колонкам\r\n        for ($col = 0; $col < $highestColumnIndex; $col++) {\r\n            $cell = $worksheet->getCellByColumnAndRow($col, $row);\r\n            echo \'<td>\'.$cell->getValue().\'</td>\';\r\n        }\r\n        echo \'</tr>\';\r\n    }\r\n    echo \'</table>\';\r\n}\r\n[/php]\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"/files/blog/7/PHPExcel-rus.doc\">Документация разработчика PHPExcel на русском</a></li>\r\n</ul>','2013-04-17 05:27:33',1),(8,5,'Доступ к элементам формы','','','','Как правило, доступ к элементу HTML осуществляется по его идентификатору с помощью метода document.getElementById(). Но для доступа к HTML-формам чаще всего используется свойство document.forms. Свойство document.forms представляет собой массив всех форм на текущей странице.','<p>\r\nКак правило, доступ к элементу HTML осуществляется по его идентификатору с помощью метода <span style=\"color: blue;\">document.getElementById()</span>. Но для доступа к HTML-формам чаще всего используется свойство <span style=\"color: blue;\">document.forms</span>. Свойство <span style=\"color: blue;\">document.forms</span> представляет собой массив всех форм на текущей странице. Поэтому если на странице находится лишь одна форма, то она доступна с помощью первого элемента массива <span style=\"color: blue;\">document.forms[0]</span>. С другой стороны, форме можно присвоить имя:\r\n</p>\r\n\r\n[html]<form name=\"myForm\">\r\n...\r\n</form>[/html]\r\n\r\n<p>\r\nТогда она доступна с помощью элемента массива <span style=\"color: blue;\">document.forms[\'myForm\']</span>.\r\n</p>\r\n<p>\r\nОбращение ко всем элементам формы также осуществляется по имени, которое служит в качестве индекса массива в свойстве <span style=\"color: blue;\">elements</span> формы. Допустим, например, что у первой формы на странице имеется элемент с атрибутом <span style=\"color: blue;\">name=\"element1\"</span>. Тогда доступ к этому элементу осуществляется с помощью следующего кода JavaScript:\r\n</p>\r\n\r\n[js]document.forms[0].elements[\'element1\'][/js]\r\n\r\n<p>\r\nИмеется и более краткая форма доступа к информации формы. Например, сокращенная форма доступа к элементу <span style=\"color: blue;\">element1</span> формы <span style=\"color: blue;\">myForm</span> выглядит так:\r\n</p>\r\n\r\n[js]document.myForm.element1[/js]\r\n\r\n<p>\r\nКаждый элемент формы поддерживает свойство <span style=\"color: blue;\">form</span>, указывающее на ту форму, в которой находится данный элемент. Поэтому выражение <span style=\"color: blue;\">this.form</span> часто используется в коде для упрощения доступа к форме на уровне элементов полей данной формы, не прибегая к массиву <span style=\"color: blue;\">document.forms</span>.\r\n</p>\r\n\r\n<h2>Доступ к текстовым полям</h2>\r\n\r\n<p>\r\nВ HTML поддерживаются три вида текстовых полей:\r\n</p>\r\n<ul>\r\n  <li>Однострочные текстовые поля: <span style=\"color: blue;\">&lt;input type=\"text\" /&gt;</span></li>\r\n  <li>Многострочные текстовые поля: <span style=\"color: blue;\">&lt;textarea&gt;...&lt;/textarea&gt;</span></li>\r\n  <li>Поля ввода паролей: <span style=\"color: blue;\">&lt;input type=\"password\" /&gt;</span></li>\r\n</ul>\r\n<p>\r\nНесмотря на то что эти поля действуют по-разному в браузере, доступ к ним в JavaScript осуществляется практически одинаково. Атрибут <span style=\"color: blue;\">value</span> каждого из этих полей содержит текст внутри поля. Его можно использовать как для чтения, так и для записи текста в поле.\r\n</p>\r\n<p>\r\nВ приведенном ниже фрагменте кода демонстрируется два следующих приема: доступ к свойству поля и применение выражения <span style=\"color: blue;\">this.form</span> для упрощенного доступа к форме данного поля.\r\n</p>\r\n\r\n[js]function showText(f) {\r\n  window.alert(f.elements[\'textfield\'].value);\r\n}[/js]\r\n\r\n[html]<form>\r\n  <input type=\"text\" name=\"textfield\" />\r\n  <input type=\"button\" value=\"Show text\" onclick=\"showText(this.form);\" />\r\n</form>[/html]\r\n\r\n<h2>Доступ к флажкам</h2>\r\n\r\n<p>\r\nФлажок в HTML-форме может находиться в двух состояниях: установленном и сброшенном. Поэтому обращение к флажку их кода JavaScript чаще всего осуществляется для определения его состояния.\r\n</p>\r\n<p>\r\nСвойство checked флажка возвращает логическое значение <span style=\"color: blue;\">true</span>, если флажок установлен, а в противном случае — логическое значение <span style=\"color: blue;\">false</span>.\r\n</p>\r\n\r\n[js]function showStatus(f) {\r\n  window.alert(\'The checkbox is \' +\r\n  (f.elements[\'chkbox\'].checked ? \'checked.\' : \'not checked.\'));\r\n}[/js]\r\n\r\n[html]<form>\r\n  <input type=\"checkbox\" name=\"chkbox\" />\r\n  <input type=\"button\" value=\"Show status\" onclick=\"showStatus(this.form);\" />\r\n</form>[/html]\r\n\r\n<h2>Доступ к радио-кнопкам</h2>\r\n\r\n<p>\r\nВ отличие от флажков, кнопки-переключатели в HTML-форме всегда организуются в группы. Это означает, что у нескольких кнопок-переключателей может быть один и тот же атрибут <span style=\"color: blue;\">name</span>, но разные его значения. Следовательно, доступ ко всей группе кнопок-переключателей как к массиву осуществляется следующим образом:\r\n</p>\r\n\r\n[js]document.forms[номер].elements[группа_кнопок][/js]\r\n\r\n<p>\r\nКаждый элемент данного массива представляет собой отдельную кнопку-переключатель и поддерживает свойство <span style=\"color: blue;\">checked</span>. Это свойство действует таким же образом, как и аналогичное свойство флажка, возвращая логическое значение <span style=\"color: blue;\">true</span>, если кнопка-переключатель выбрана, а в противном случае — логическое значение <span style=\"color: blue;\">false</span>.\r\n</p>\r\n<p>\r\nС помощью свойства value доступно также значение каждой кнопки-переключателя. В приведенном ниже фрагменте кода осуществляется циклическое обращение к каждой кнопке-переключателю и вывод ее состояния.\r\n</p>\r\n\r\n[js]function showStatus(f) {\r\n  var s= \'\';\r\n  for (var i=0; f.elements[\'radiobutton\'].length; i++) {\r\n    var bth = f.elements[\'radiobutton\'][i];\r\n    s += btn.value + \':\' + btn.checked + \"\\n\";\r\n  }\r\n  window.alert(s);\r\n}[/js]\r\n\r\n[html]<form>\r\n  <input type=\"radio\" name=\"radiobutton\" value=\"R\" />red\r\n  <input type=\"radio\" name=\"radiobutton\" value=\"G\" />green\r\n  <input type=\"radio\" name=\"radiobutton\" value=\"B\" />blue\r\n  <input type=\"button\" value=\"Show status\" onclick=\"showStatus(this.form);\" />\r\n</form>[/html]\r\n\r\n<h2>Доступ к спискам выбора</h2>\r\n\r\n<p>\r\nСписок выбора в HTML-форме состоит из двух элементов. Так, элемент <span style=\"color: blue;\">&lt;select&gt;</span> закладывает основание для такого списка и предоставляет его имя, хранящееся в атрибуте <span style=\"color: blue;\">name</span>. А отдельные элементы списка представлены элементами <span style=\"color: blue;\">&lt;option&gt;</span>, предоставляющими следующие данные: надпись элемента списка, отображаемую в окне браузера, а также значение, посылаемое серверу при предъявлении формы.\r\n</p>\r\n<p>\r\nВ JavaScript имеются два средства для доступа к данным из списка выбора:\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">selectedIndex</span>. Предоставляет начинающийся с нуля индекс элемента. выбранного в настоящий момент из списка. Значение <span style=\"color: blue;\">-1</span> этого свойства означает, что ни один из элементов не был выбран, что справедливо только для списков, состоящих из более чем одного элемента.</li>\r\n  <li><span style=\"color: blue;\">options</span>. Массив со всеми элементами выбора из списка. Каждый такой элемент поддерживает свойство <span style=\"color: blue;\">selected</span>. Если это свойство принимает логическое значение <span style=\"color: blue;\">true</span>, значит, данный элемент выбран из списка.</li>\r\n</ul>\r\n<p>\r\nКак правило, свойства <span style=\"color: blue;\">selectedIndex</span> оказывается достаточно для проверки. А свойство <span style=\"color: blue;\">options</span> очень удобно для доступа к выбранному из списка элементу. В этом случае атрибут <span style=\"color: blue;\">value</span> выбранного элемента списка предоставляет данные, отправляемые серверу, а свойство <span style=\"color: blue;\">text</span> возвращает надпись данного элемента, отображаемую в окне браузера.\r\n</p>\r\n<p>\r\nВ приведенном ниже листинге осуществляется доступ ко всем важным данным, связанным с выбранным элементом списка:\r\n</P>\r\n\r\n[js]function showStatus(f) {\r\n  var index = f.elements[\'selectionlist\'].selectedIndex;\r\n  if (index == -1) {\r\n    window.alert(\'No element selected\');\r\n  } else {\r\n    var element = f.elements[\'selectionlist\'].options[index];\r\n    window.alert(\'Element #\' + index + \r\n      \' (caption: \' + element.text + \r\n      \', value: \' + element.value + \r\n      \') selected\');\r\n  }\r\n}[/js]\r\n\r\n[html]<form>\r\n  <select name=\"selectionlist\" size=\"3\">\r\n    <option value=\"R\">red</option>\r\n    <option value=\"G\">green</option>\r\n    <option value=\"B\">blue</option>\r\n  </select>\r\n  <input type=\"button\" value=\"Show status\" onclick=\"showStatus(this.form);\" />\r\n</form>[/html]','2008-07-01 06:50:10',1),(9,6,'Построение диаграмм средствами GD','','','PHP, Web-разработка','Сегодня практически каждый интернет-ресурс строится на динамическом отображении представленной информации. Сегодня мы рассмотрим лишь одну из таких возможностей, а именно реализацию динамических диаграмм с использованием библиотеки GD.','<p>\r\nСегодня практически каждый интернет-ресурс строится на динамическом отображении представленной информации. Сегодня мы рассмотрим лишь одну из таких возможностей, а именно реализацию динамических диаграмм с использованием библиотеки GD.\r\n</p>\r\n\r\n<h2>Построение гистограммы</h2>\r\n\r\n<p>\r\nПусть значения столбцов задаются в процентах от 0 до 100 в массиве <span style=\"color: blue;\">$rows</span>:\r\n</p>\r\n\r\n[php]<?php\r\n// Значение столбцов от 0 до 100\r\n$rows = array(80, 75, 53, 32, 20);\r\n\r\n// Ширина изображения\r\n$width = 200;\r\n// Высота изображения\r\n$height = 200;\r\n// Ширина одного столбца\r\n$rowWidth = 30;\r\n// Ширина интервала между столбцами\r\n$rowInterval = 5;\r\n\r\n// Создаем пустое изображение\r\n$img = imagecreatetruecolor($width, $height);\r\n\r\n// Заливаем изображение белым цветом\r\n$white = imagecolorallocate($img, 255, 255, 255); \r\nimagefill($img, 0, 0, $white);\r\n\r\nfor($i = 0, $y1 = $height, $x1 = 0; $i < count($rows); $i++) {\r\n  // Формируем случайный цвет для каждого из столбца\r\n  $color = imagecolorallocate($img, rand(0, 255), rand(0, 255), rand(0, 255)); \r\n  // Нормирование высоты столбца\r\n  $y2 = $y1 - $rows[$i]*$height/100;\r\n  // Определение второй координаты столбца\r\n  $x2 = $x1 + $rowWidth;\r\n  // Отрисовываем столбец\r\n  imagefilledrectangle($img, $x1, $y1, $x2, $y2, $color);\r\n  // Между столбцами создаем интервал в $row_interval пикселей\r\n  $x1 = $x2 + $rowInterval;\r\n}\r\n\r\n// Выводим изображение в браузер, в формате GIF\r\nheader (\"Content-type: image/gif\"); \r\nimagegif($img);\r\n?>[/php]\r\n\r\n<p>\r\nРезультат работы скрипта:\r\n</p>\r\n\r\n<p>\r\n<img src=\"/files/blog/9/diag1.gif\" alt=\"Построение гистограммы\" />\r\n</p>\r\n\r\n<p>\r\nКак видите, скрипт использует значения элементов массива <code>$rows</code> как процентные величины для формирования в цикле <code>for</code> гистограммы. На каждой итерации цикла формируется случайный цвет, который используется для отрисовки очередного столбца гистограммы. Столбец формируется при помощи функции <code>imagefilledrectangle()</code>, которая рисует заполненный прямоугольник.\r\n</p>\r\n\r\n<h2>Построение круговой диаграммы</h2>\r\n\r\n<p>\r\nПусть доли секторов заданы массивом <code>$row</code> из предыдущего скрипта. При построении круговой диаграммы следует помнить, что в круге 360 градусов, и значения массива <code>$rows</code> следует нормировать таким образом, чтобы их сумма равнялась 360 градусам.\r\n</p>\r\n\r\n[php]\r\n<?php\r\n// Значения столбцов от 0 до 100\r\n$rows = array(80, 75, 53, 32, 20);\r\n// Нормируем значения массива $rows таким образом, \r\n// чтобы их сумма составляла 360 градусов\r\n$sum = array_sum($rows);\r\nfor($i = 0; $i < count($rows); $i++) {\r\n  $rows[$i] = intval( round($rows[$i]*360/$sum) );\r\n}\r\n\r\n// Создаем пустое изображение размером 201x201 пикселей\r\n$img =  imagecreatetruecolor(201, 201);\r\n// Определение белого цвет на изображении\r\n$white = imagecolorallocate($img, 255, 255, 255); \r\nimagefill($img, 0, 0, $white);\r\n\r\n// Переменные $cx и $cy определяют центр круговой диаграммы\r\n$cx = $cy = 100;\r\n// Переменные $w и $h определяют ширину и высоту диаграммы\r\n$w = $h = 200;\r\n\r\n$start = 0;\r\nforeach ($rows as $value) {\r\n  // Формируем случайный цвет для каждого сектора\r\n  $color = imagecolorallocate($img, rand(0, 255), rand(0, 255), rand(0, 255)); \r\n  // Определяем конечный угол сектора\r\n  $angle_sector = $start + $value;\r\n  // Отрисовываем сектор\r\n  imagefilledarc($img, $cx, $cy, $w, $h, $start, $angle_sector, $color, \"IMG_ARC_PIE || IMG_ARC_EDGED\");\r\n  // Увеличиваем значение начального угла сектора\r\n  $start += $value;\r\n}\r\n// Вывод изображения в окно браузера\r\nheader (\"Content-type: image/gif\"); \r\nimagegif($img);                      \r\n[/php]\r\n\r\n<p>\r\nРезультат работы скрипта:\r\n</p>\r\n\r\n<p>\r\n<img src=\"/files/blog/9/diag2.gif\" alt=\"Построение круговой диаграммы\" />\r\n</p>','2008-06-28 07:34:13',1),(10,5,'Динамическое формирование списка и таблицы','','','JavaScript, Web-разработка','При использовании AJAX часто возникает задача динамического формирования элементов HTML-страницы с использованием DOM — на основе данных, полученных от сервера. Сегодня мы рассмотрим примеры составления списка и таблицы.','<p>\r\nПри использовании AJAX часто возникает задача динамического формирования элементов HTML-страницы с использованием DOM — на основе данных, полученных от сервера. Сегодня мы рассмотрим примеры составления списка и таблицы.\r\n</p>\r\n\r\n<h2>Формирование списка из данных JavaScript</h2>\r\n\r\n<p>\r\nВ приведенном ниже коде функция createList() принимает в качестве аргумента массив и преобразует его в список:\r\n</p>\r\n\r\n[js]function createList(data) {\r\n  var list = document.createElement(\"ul\");\r\n  for (var i = 0; i < data.length; i++) {\r\n    var newItem = document.createElement(\"li\");\r\n    var newText = document.createTextNode(data[i]);\r\n    newItem.appendChild(newText);\r\n    list.appendChild(newItem);\r\n  }\r\n  return list;\r\n}\r\n\r\nwindow.onload = function() {\r\n  var list = createList([\"one\", \"two\", \"three\", \"four\", \"five\"]);\r\n  document.body.appendChild(list);\r\n}[/js]\r\n\r\n<h2>Формирование таблицы из данных JavaScript</h2>\r\n\r\n<p>\r\nСоставить целую таблицу немного сложнее. Для этого прежде всего придется воспользоваться элементом &lt;tbody&gt;, а возможно, &lt;tfoot&gt; либо обоими элементами вместе. В противном случае в окне браузера Internet Explorer ничего не появится.\r\n</p>\r\n<p>\r\nВспомогательная функция createTable() воспринимает многомерный массив, каждый элемент которого представляет собой отдельный список значений, отображаемых в таблице. Первый элемент массива содержит текст заголовка каждого столбца таблицы.\r\n</p>\r\n<p>\r\nКак видите, приведенный ниже код для составления таблицы получился длиннее, но, с другой стороны, сохраняется тот же подход: сначала создаются узлы, включая и текстовые, а затем они присоединяются друг к другу в нужном порядке:\r\n</p>\r\n\r\n[js]function createTable(data) {\r\n  var table = document.createElement(\"table\");\r\n  var thead = document.createElement(\"thead\");\r\n  var tr = document.createElement(\"tr\");\r\n  for (var i = 0; i < data[0].length; i++) {\r\n    var th = document.createElement(\"th\");\r\n    var newText = document.createTextNode(data[0][i]);\r\n    th.appendChild(newText);\r\n    tr.appendChild(th);\r\n  }\r\n  thead.appendChild(tr);\r\n  table.appendChild(thead);\r\n  \r\n  var tbody = document.createElement(\"tbody\");\r\n  for (var i = 1; i < data.length; i++) {\r\n    var tr = document.createElement(\"tr\");\r\n    for (var j=0; j < data[i].length; j++) {\r\n      var td = document.createElement(\"td\");\r\n      var newText = document.createTextNode(data[i][j]);\r\n      td.appendChild(newText);\r\n      tr.appendChild(td);\r\n    }\r\n    tbody.appendChild(tr);\r\n  }\r\n\r\n  table.appendChild(tbody);\r\n  return table;\r\n}\r\n\r\nwindow.onload = function() {\r\n  var table = createTable([\r\n    [\"1\", \"2\", \"3\", \"4\", \"5\"],\r\n    [\"one\", \"two\", \"three\", \"four\", \"five\"],\r\n    [\"un\", \"deux\", \"trois\", \"quatre\", \"cinq\"],\r\n    [\"один\", \"два\", \"три\", \"четыре\", \"пять\"]]);\r\n  document.body.appendChild(table);\r\n}[/js]','2008-06-10 09:13:41',1),(13,6,'Отправка данных из скрипта методом POST','','','CURL, HTTP, PHP, POST, Web-разработка, Форма','HTML форма позволяет пользователю сформировать POST-запрос, который затем отсылается браузером. Мы сформируем такой запрос скриптом. Пусть у нас есть простая форма, состоящая из двух полей и кнопки для отправки данных.','<p>\r\nHTML форма позволяет пользователю сформировать POST-запрос, который затем отсылается браузером. Мы сформируем такой запрос скриптом. Пусть у нас есть простая форма, состоящая из двух полей и кнопки для отправки данных:\r\n</p>\r\n\r\n[html]\r\n<form action=\"/handler/action.php\" method=\"post\"> \r\nИмя: <input name=\"name\" type=\"text\" /><br/>\r\nПароль: <input name=\"password\" type=\"password\" /><br/>\r\n<input name=\"submit\" type=\"submit\" value=\"Отправить\" />\r\n</form>\r\n[/html]\r\n\r\n<p>\r\nОбработчик формы <code>action.php</code> выводит в браузер текст, введенный в поля формы:\r\n</p>\r\n\r\n[php]\r\n<?php\r\necho \'Имя: \'.$_POST[\'name\'].\'<br/>\';\r\necho \'Пароль: \'.$_POST[\'password\'].\'<br/>\';\r\n[/php]\r\n\r\n<p>\r\nМетод POST, в отличие от метода GET, посылает данные не в строке запроса, а в области данных, после заголовков. Передача данных аналогична методу GET: группы <code>name=value</code> объединяются при помощи амперсанда (&amp;):\r\n</p>\r\n\r\n[code]name=Евгений&password=qwerty[/code]\r\n\r\n<p>\r\nКроме того, необходимо учитывать, что данные передаются в текстовом виде, поэтому все национальные символы следует подвергать кодированию при помощи функции <code>urlencode()</code>.\r\n</p>\r\n\r\n<h2>Отправка данных методом POST через сокеты</h2>\r\n\r\n[php]\r\n<?php\r\n$hostname = \'localhost\';\r\n$path = \'/handler/action.php\';\r\n$content = \'\';\r\n// Устанавливаем соединение с сервером $hostname\r\n$fp = fsockopen($hostname, 80, $errno, $errstr, 30); \r\n// Проверяем успешность установки соединения\r\nif (!$fp) die(\'<p>\'.$errstr.\' (\'.$errno.\')</p>\'); \r\n\r\n// Данные HTTP-запроса\r\n$data = \'name=\'.urlencode(\'Евгений\').\'&password=\'.urlencode(\'qwerty\');\r\n// Заголовок HTTP-запроса\r\n$headers = \'POST \'.$path.\" HTTP/1.1\\r\\n\"; \r\n$headers .= \'Host: \'.$hostname.\"\\r\\n\"; \r\n$headers .= \"Content-type: application/x-www-form-urlencoded\\r\\n\";\r\n$headers .= \'Content-Length: \'.strlen($data).\"\\r\\n\\r\\n\";\r\n// Отправляем HTTP-запрос серверу\r\nfwrite($fp, $headers.$data); \r\n// Получаем ответ\r\nwhile ( !feof($fp) ) $content .= fgets($fp, 1024);\r\n// Закрываем соединение\r\nfclose($fp);\r\n// Выводим ответ в браузер  \r\necho $content;\r\n[/php]\r\n\r\n<p>\r\nРезультат работы скрипта выглядит примерно так\r\n</p>\r\n\r\n[code]\r\nHTTP/1.1 200 OK\r\nDate: Sat, 28 Jun 2008 07:53:19 GMT\r\nServer: Apache/2.0.55 (Win32) PHP/5.2.1\r\nX-Powered-By: PHP/5.2.1\r\nContent-Length: 42\r\nContent-Type: text/html\r\n\r\nИмя - Евгений<br/>\r\nПароль - qwerty<br/>\r\n[/code]\r\n\r\n<h2>Отправка данных методом POST с использованием CURL</h2>\r\n\r\n<p>\r\nПомимо сокетов, обеспечивающих низкоуровневое обращение к серверу, PHP располагает специальным расширением CURL (Client URL Library).\r\n</p>\r\n\r\n[php]\r\n<?php\r\n// Задаем адрес удаленного сервера\r\n$curl = curl_init(\"http://localhost/handler/action.php\");\r\n// Передача данных осуществляется методом POST\r\ncurl_setopt($curl, CURLOPT_POST, 1);\r\n// Задаем POST-данные\r\n$data = \'name=Евгений&password=qwerty\';\r\ncurl_setopt($curl, CURLOPT_POSTFIELDS, $data);\r\n// Выполняем запрос и выводим ответ в браузер\r\ncurl_exec($curl);\r\n// Закрываем CURL соединение\r\ncurl_close($curl);\r\n[/php]\r\n\r\n<p>\r\nС помощью функции <code>curl_init()</code> задается адрес удаленного сервера и путь к файлу на нем. В отличие от функции <code>fsockopen()</code>, необходимо задавать адрес полностью, включая префикс <code>http://</code>, т.е. расширение CURL позволяет работать с несколькими видами протоколов (HTTP, HTTPS, FTP). Если соединение с указанным сервером происходит успешно, функция <code>curl_init()</code> возвращает дескриптор соединения, который используется во всех остальных функциях библиотеки.\r\n</p>\r\n<p>\r\nДля того, чтобы сообщить CURL о том, что данные будут передаваться методом POST, необходимо задать параметр <code>CURLOPT_POST</code>. POST-данные устанавливаются при помощи параметра <code>CURLOPT_POSTFIELDS</code>.\r\n</p>\r\n<p>\r\nПо умолчанию библиотека удаляет HTTP-заголовки, возвращаемые сервером. Однако CURL можно настроить на выдачу заголовков, если установить при помощи функции <code>curl_setopt()</code> ненулевое значение параметра <code>CURLOPT_HEADER</code>.\r\n</p>\r\n<p>\r\n<strong>P.S.</strong> Из-за ошибки библиотеки сокетов протокол HTTP 1.1 под Windows работает медленно. При работе скрипта использующего сокеты под управлением этой ОС, лучше использовать версию HTTP 1.0.\r\n</p>','2008-06-28 09:38:25',1),(14,6,'Работа с XML средствами PHP','PHP XML-документ DOM DOMDocument загрузка выгрузка узел node nodeName nodeValue getAttribute setAttribute childNodes appendChild createElement','','DOM, PHP, Web-разработка, XML','Давайте начнем с самого простого: загрузки и выгрузки XML-документа с использованием DOM. Основной класс, который мы будем использовать, это DOMDocument. Через него можно создавать новые документы, сохранять их, а также загружать существующие.','<p>\r\nДавайте начнем с самого простого: загрузки и выгрузки XML-документа с использованием DOM. Основной класс, который мы будем использовать, это <a href=\"http://www.php.net/manual/ru/class.domdocument.php\">DOMDocument</a>. Через него можно создавать новые документы, сохранять их, а также загружать существующие.\r\n</p>\r\n\r\n[php]<?php\r\n// Создаём XML-документ версии 1.0 с кодировкой utf-8\r\n$dom = new DOMDocument(\'1.0\', \'utf-8\'); \r\n// Текст XML-документа\r\n$strXML = \'<?xml version=\"1.0\" encoding=\"utf-8\"?><root><item>Первый</item><item>Второй</item></root>\';\r\n// Загружаем XML-документ из строки\r\n$dom->loadXML($strXML);\r\n/*\r\n// Загружаем XML-документ из файла \r\n$dom->load(\'doc.xml\');\r\n// Убираем лишние пробелы и отступы\r\n$dom->preserveWhiteSpace = false;\r\n*/\r\n// Сохраняем XML-документ как строку и выводим в браузер\r\n$xml = $dom->saveXML();\r\necho htmlspecialchars($xml);\r\n// Сохраняем XML-документ в файл\r\n$dom->save(\'doc.xml\');\r\n?>[/php]\r\n\r\n<h2>Как получить список дочерних узлов</h2>\r\n\r\n[php]<?php\r\n// Создаём XML-документ\r\n$dom = new DOMDocument(\'1.0\', \'utf-8\'); \r\n// Текст XML-документа\r\n$strXML = \'<?xml version=\"1.0\" encoding=\"utf-8\"?><root><item>Первый</item><item>Второй</item></root>\';\r\n// Загружаем XML-документ из строки\r\n$dom->loadXML($strXML);\r\n// Получаем корневой элемент <root>\r\n$root = $dom->documentElement;\r\n// Получаем список дочерних узлов <root>\r\n$childs = $root->childNodes;\r\nfor ($i = 0; $i < $childs->length; $i++) {\r\n    $child = $childs->item($i);\r\n    // Выводим информацию об узле\r\n    echo $child->nodeName . \' : \' . $child->nodeValue . \'<br/>\'; \r\n  }\r\n?>[/php]\r\n\r\n<p>\r\nСвойство <span style=\"color: blue;\">nodeName</span> содержит название элемента (в данном случае, <span style=\"color: blue;\">item</span>), а <span style=\"color: blue;\">nodeValue</span> содержимое элемента (в данном случае, «<span style=\"color: blue;\">Первый</span>» и «<span style=\"color: blue;\">Второй</span>»).\r\n</p>\r\n\r\n<h2>Работа с атрибутами узлов</h2>\r\n\r\n<p>\r\nДавайте посмотрим, как получить значение атрибута узла, устанавить новое значение, создать и удалить атрибут:\r\n</p>\r\n\r\n[php]<?php\r\n// Создаём XML-документ\r\n$dom = new DOMDocument(\'1.0\', \'utf-8\'); \r\n// Текст XML-документа\r\n$strXML = \'<?xml version=\"1.0\" encoding=\"utf-8\"?><root><item id=\"1\">Первый</item><item>Второй</item><item>Третий</item></root>\';\r\n// Загружаем XML-документ из строки\r\n$dom->loadXML($strXML);\r\n// Получаем корневой элемент <root>\r\n$root = $dom->documentElement;\r\n// Первый дочерний элемент <root>\r\n$first = $root->firstChild;\r\n// Следующий сестринский элемент\r\n$second = $first->nextSibling;\r\n// Последний дочерний элемент <root>\r\n$third = $root->lastChild;\r\n// Выводим информацию о первом дочернем элементе <root>\r\necho \'Элемент \' . $first->nodeName . \', значение «\' . $first->nodeValue . \'», атрибут id=\' . $first->getAttribute(\'id\');\r\n// Устанавливаем атрибут id для второго дочернего элемента <root>\r\n$second->setAttribute(\'id\', 2);\r\n// Устанавливаем атрибут id для третьего дочернего элемента <root>\r\n$attr = $dom->createAttribute(\'id\');\r\n$attr->value = 3;\r\n$third->appendChild($attr);\r\n// Удаляем атрибут id для третего дочернего элемента <root>\r\nif ( $third->hasAttribute(\'id\') ) $third->removeAttribute(\'id\');\r\n?>[/php]\r\n\r\n<h2>Создание XML-документа</h2>\r\n\r\n[php]<?php\r\n// Создаём XML-документ\r\n$dom = new DOMDocument(\'1.0\', \'utf-8\');\r\n// Создаём корневой элемент <users>\r\n$root = $dom->createElement(\'users\');\r\n$dom->appendChild($root);\r\n$users = array( \r\n    array(\'id\' => 1, \'name\' => \'Николай Петров\', \'email\' => \'petrov.n@mail.ru\'),\r\n    array(\'id\' => 2, \'name\' => \'Петр Иванов\', \'email\' => \'ivanov.p@mail.ru\'),\r\n    array(\'id\' => 3, \'name\' => \'Сергей Смирнов\', \'email\' => \'smirnov.s@mail.ru\') \r\n);\r\n\r\nforeach ( $users as $value ) {\r\n    // Создаём узел <user>\r\n    $user = $dom->createElement(\'user\');\r\n    // Добавляем дочерний элемент для <users>\r\n    $root->appendChild($user);\r\n    // Устанавливаем атрибут id для узла <user>\r\n    $user->setAttribute(\'id\', $value[\'id\']);\r\n    // Создаём узел <name> с текстом внутри\r\n    $name = $dom->createElement(\'name\', $value[\'name\']);\r\n    // Добавляем дочерний элемент для <user>\r\n    $user->appendChild($name);\r\n    // Создаём узел <email>\r\n    $email = $dom->createElement(\'email\');\r\n    // Создаем текстовой узел\r\n    $text = $dom->createTextNode($value[\'email\']);\r\n    // Создаем текстовой узел внутри конструкции <![CDATA[ ... ]]>\r\n    // $text = $dom->createCDATASection($value[\'email\']);\r\n    // Добавляем текстовой узел для <email>\r\n    $email->appendChild($text);\r\n    // Добавляем дочерний элемент для <user>\r\n    $user->appendChild($email);\r\n}\r\n// Сохраняем полученный XML-документ в файл\r\n$dom->save(\'users.xml\');\r\n?>[/php]\r\n\r\n<p>\r\nСодержимое файла users.xml:\r\n</p>\r\n\r\n[xml]<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<users>\r\n  <user id=\"1\">\r\n    <name>Николай Петров</name>\r\n    <email>petrov.n@mail.ru</email>\r\n  </user>\r\n  <user id=\"2\">\r\n    <name>Петр Иванов</name>\r\n    <email>ivanov.p@mail.ru</email>\r\n  </user>\r\n  <user id=\"3\">\r\n    <name>Сергей Смирнов</name>\r\n    <email>smirnov.s@mail.ru</email>\r\n  </user>\r\n</users>[/xml]\r\n\r\n<h2>Извлечение данных из xml-документа</h2>\r\n\r\n<p>\r\nДавайте теперь извлечем данные из документа users.xml обратно в массив:\r\n</p>\r\n\r\n[php]<?php\r\n// Создаём XML-документ\r\n$dom = new DOMDocument(\'1.0\', \'utf-8\');\r\n// Загружаем XML-документ из файла\r\n$dom->load(\'users.xml\');\r\n// Получаем корневой элемент\r\n$root = $dom->documentElement;\r\n// Получаем дочерние элементы корневого элемента\r\n$users = $root->childNodes;\r\n// Перебираем полученные элементы\r\nforeach ($users as $user) {\r\n    // Получаем значение атрибута id узла <user>	\r\n    $id = $user->getAttribute(\'id\');\r\n    // Получаем дочерние элементы узла <user>\r\n    $info = $user->childNodes;\r\n    // Получаем значение узла <name>\r\n    $name = $info->item(0)->nodeValue;\r\n    // Получаем значение узла <email>\r\n    $email = $info->item(1)->nodeValue;\r\n    // Записываем данные в массив\r\n    $array[] = array(\'id\' => $id, \'name\' => $name, \'email\' => $email);\r\n}\r\nprint_r($array);\r\n?>[/php]\r\n\r\n<p>\r\nРезультат работы скрипта:\r\n</p>\r\n\r\n[code]Array\r\n(\r\n    [0] => Array\r\n        (\r\n            [id] => 1\r\n            [name] => Николай Петров\r\n            [email] => petrov.n@mail.ru\r\n        )\r\n    [1] => Array\r\n        (\r\n            [id] => 2\r\n            [name] => Петр Иванов\r\n            [email] => ivanov.p@mail.ru\r\n        )\r\n    [2] => Array\r\n        (\r\n            [id] => 3\r\n            [name] => Сергей Смирнов\r\n            [email] => smirnov.s@mail.ru\r\n        )\r\n)[/code]','2013-04-24 04:35:33',1),(15,6,'SimpleXML. Начало работы','','','PHP, Web-разработка, XML','Расширение SimpleXML предоставляет очень простой и легкий в использовании набор инструментов для преобразования XML в объект, с которым можно затем работать через его свойства и с помощью итераторов. SimpleXML присутствует в PHP начиная с версии 5.','<p>\r\nРасширение SimpleXML предоставляет очень простой и легкий в использовании набор инструментов для преобразования XML в объект, с которым можно затем работать через его свойства и с помощью итераторов. SimpleXML присутствует в PHP начиная с версии 5.\r\n</p>\r\n<p>\r\nДля наглядности,  в качестве примера будем использовать XML, описывающий простой кулинарный рецепт, взятый с <a href=\"http://ru.wikipedia.org/wiki/XML\">википедии</a>.\r\n</p>\r\n\r\n[xml]<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<recipe name=\"хлеб\" preptime=\"5\" cooktime=\"180\">\r\n  <title>Простой хлеб</title>\r\n  <ingredient amount=\"3\" unit=\"стакан\">Мука</ingredient>\r\n  <ingredient amount=\"0.25\" unit=\"грамм\">Дрожжи</ingredient>\r\n  <ingredient amount=\"1.5\" unit=\"стакан\">Тёплая вода</ingredient>\r\n  <ingredient amount=\"1\" unit=\"чайная ложка\">Соль</ingredient>\r\n  <instructions>\r\n   <step>Смешать все ингредиенты и тщательно замесить.</step>\r\n   <step>Закрыть тканью и оставить на один час в тёплом помещении.</step>\r\n   <step>Замесить ещё раз, положить на противень и поставить в духовку.</step>\r\n  </instructions>\r\n</recipe>[/xml]\r\n\r\n<h2>Загрузка XML</h2>\r\n\r\n<p>\r\nПрежде чем начать обрабатывать данные, их нужно сначала загрузить. Для этого достаточно использовать функцию simplexml_load_file(). Она принимает имя файла, и возвращает объект типа SimpleXMLElement. И с этим объектом уже можно будет работать.\r\n</p>\r\n\r\n[php]$xml = simplexml_load_file(\'recipe.xml\');\r\nprint_r($xml);[/php]\r\n\r\n[code]SimpleXMLElement Object\r\n(\r\n  [@attributes] => Array\r\n      (\r\n          [name] => хлеб\r\n          [preptime] => 5\r\n          [cooktime] => 180\r\n      )\r\n  [title] => Простой хлеб\r\n  [ingredient] => Array\r\n      (\r\n          [0] => Мука\r\n          [1] => Дрожжи\r\n          [2] => Тёплая вода\r\n          [3] => Соль\r\n      )\r\n  [instructions] => SimpleXMLElement Object\r\n      (\r\n          [step] => Array\r\n              (\r\n                  [0] => Смешать все ингредиенты и тщательно замесить.\r\n                  [1] => Закрыть тканью и оставить на один час в тёплом помещении.\r\n                  [2] => Замесить ещё раз, положить на противень и поставить в духовку.\r\n              )\r\n      )\r\n)[/code]\r\n\r\n<p>\r\nКроме того, существует еще и функция simplexml_load_string(), которая берет XML не из файла, а из строки.\r\n</p>\r\n\r\n[php]$str = file_get_contents(\'recipe.xml\');\r\n$xml = simplexml_load_string($str);[/php]\r\n\r\n<h2>Получение данных</h2>\r\n\r\n<p>\r\nSimpleXML предоставляет очень удобный способ получения данных из XML. К примеру, для того чтобы получить какой-либо узел документа достаточно просто обратится к этому узлу по имени:\r\n</p>\r\n\r\n[php]// Выводит содержимое элемента <title>\r\necho $xml->title;[/php]\r\n\r\n<p>\r\nПоскольку ингредиентов у нас несколько, то $xml->ingredient будет массивом из четырех элементов. Перебрать все ингредиенты можно так:\r\n</p>\r\n\r\n[php]foreach ( $xml->ingredient as $ingredient ) {\r\n    echo $ingredient . \'<br/>\';\r\n}[/php]\r\n\r\n<p>\r\nДля того что бы получить, к примеру, третий ингредиент (теплая вода), достаточно обратиться к нему по индексу:  \r\n</p>\r\n\r\n[php]$xml->ingredient[2]; // элементы массивы нумеруются с нуля[/php]\r\n\r\n<p>\r\nШаги приготовления (step) являются дочерними для элемента instructions, чтобы получить их, нужно сначала получить instructions:\r\n</p>\r\n\r\n[php]echo $xml->instructions->step; // выводит текст первого шага[/php]\r\n\r\n<h2>Атрибуты</h2>\r\n\r\n<p>\r\nРаботать с атрибутами тоже очень легко. Они доступны как ассоциативный массив своего элемента. То есть, для того что бы получить название рецепта (атрибут name корневого узла recipe), достаточно написать:\r\n</p>\r\n\r\n[php]echo $xml[\'name\'];[/php]\r\n\r\n<p>\r\nИли, для получения количества первого ингредиента можно написать так:\r\n</p>\r\n\r\n[php]echo $xml->ingredient[\'amount\'];[/php]\r\n\r\n<p>\r\nСейчас мы рассмотрели только один способ получения данных: когда нам уже известны названия узлов и атрибутов. Но случается и так, когда структура XML файла заранее не известна, но нам нужно его обработать. SimpleXML предоставляет и такую возможность.\r\n</p>\r\n\r\n<h2>Получение дочерних узлов</h2>\r\n\r\n<p>\r\nМетод children() возвращает список дочерних элементов. В нашем случае $xml — корневая ветвь, и если написать:\r\n</p>\r\n\r\n[php]$nodes = $xml->children();\r\necho $nodes[0];[/php]\r\n\r\n<p>\r\nто получим содержимое элемента &lt;title&gt;, а если:\r\n</p>\r\n\r\n[php]$nodes = $xml->children();\r\necho $nodes[2];[/php]\r\n\r\n<p>\r\nто второй ингредиент.\r\n</p>\r\n<p>\r\nОбойти все дочерние ветви первого уровня легко можно при помощи цикла foreach:\r\n</p>\r\n\r\n[php]echo \'<ul>\';\r\nforeach ( $xml->children() as $node ) {\r\n    if ( count($node) == 0 ) echo \'<li>\' . $node . \'</li>\';\r\n}\r\necho \'</ul>\';[/php]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[html]<ul>\r\n  <li>Простой хлеб</li>\r\n  <li>Мука</li>\r\n  <li>Дрожжи</li>\r\n  <li>Тёплая вода</li>\r\n  <li>Соль</li>\r\n</ul>[/html]\r\n\r\n<p>\r\nФукция count() позволяет определить количество дочерних узлов.\r\n</p>\r\n<p>\r\nДля того, чтобы получить имя текущий ветви, используется метод getName():\r\n</p>\r\n\r\n[php]$nodes = $xml->children();\r\necho $nodes[0]->getName(); // выведет title[/php]\r\n\r\n<h2>Получение атрибутов</h2>\r\n\r\n<p>\r\nПолучить список атрибутов для текущего элемента поможет метод attributes(). По функционалу и механизму работы он аналогичен методу children(), за тем исключением, что здесь идет работа с атрибутами.\r\n</p>\r\n\r\n[php]$nodes = $xml->children();\r\n// все атрибуты узла <ingredient>Мука</ingredient>\r\nforeach ( $nodes[1]->attributes() as $name => $value ) {\r\n    echo \'атрибут \' . $name . \', значение \' . $value . \'<br/>\';\r\n}[/php]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[html]атрибут amount, значение 3<br/>\r\nатрибут unit, значение стакан<br/>[/html]\r\n\r\n<h2>Изменение значений узлов и атрибутов</h2>\r\n\r\n<p>\r\nОбъект SimpleXMLElement позволяет манипулировать всеми элементами:\r\n</p>\r\n\r\n[php]$xml = simplexml_load_file(\'recipe.xml\');\r\n$xml->title = \'Ржаной хлеб\';\r\n$xml->ingredient[0] = \'Ржаная мука\';\r\nprint_r($xml);\r\n$xml->ingredient[2][\'amount\'] = \'300\';\r\n$xml->ingredient[2][\'unit\'] = \'грамм\';\r\nprint_r($xml->ingredient[2]);[/php]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[code]SimpleXMLElement Object\r\n(\r\n  [@attributes] => Array\r\n      (\r\n          [name] => хлеб\r\n          [preptime] => 5\r\n          [cooktime] => 180\r\n      )\r\n  [title] => Ржаной хлеб\r\n  [ingredient] => Array\r\n      (\r\n          [0] => Ржаная мука\r\n          [1] => Дрожжи\r\n          [2] => Тёплая вода\r\n          [3] => Соль\r\n      )\r\n  [instructions] => SimpleXMLElement Object\r\n      (\r\n          [step] => Array\r\n              (\r\n                  [0] => Смешать все ингредиенты и тщательно замесить.\r\n                  [1] => Закрыть тканью и оставить на один час в тёплом помещении.\r\n                  [2] => Замесить ещё раз, положить на противень и поставить в духовку.\r\n              )\r\n      )\r\n)[/code]\r\n[code]SimpleXMLElement Object\r\n(\r\n    [@attributes] => Array\r\n        (\r\n            [amount] => 300\r\n            [unit] => грамм\r\n        )\r\n\r\n    [0] => Тёплая вода\r\n)[/code]\r\n\r\n<h2>Добавление элементов и атрибутов</h2>\r\n\r\n<p>\r\nЧтобы добавить дочерний элемент к текущему, достаточно использовать метод addChild(). Первым параметром идет имя нового элемента, вторым значение, которое задавать необязательно.\r\n</p>\r\n<p>\r\nДобавим еще один шаг к инструкциям:\r\n</p>\r\n\r\n[php]$node = $xml->instructions; // получаем ветвь инструкций\r\n$node->addChild(\'step\', \'Почитать газету\'); // добавляем элемент\r\nprint_r($node);[/php]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[code]SimpleXMLElement Object\r\n(\r\n    [step] => Array\r\n        (\r\n            [0] => Смешать все ингредиенты и тщательно замесить.\r\n            [1] => Закрыть тканью и оставить на один час в тёплом помещении.\r\n            [2] => Замесить ещё раз, положить на противень и поставить в духовку.\r\n            [3] => Почитать газету\r\n        )\r\n\r\n)[/code]\r\n\r\n<p>\r\nМетод addAttribute() позволяет добавить атрибут к текущему узлу. Первый параметр это имя атрибута, второй значение.\r\n</p>\r\n\r\n[php]$node = $xml->instructions; // получаем ветвь инструкций\r\n$step = $node->addChild(\'step\', \'Почитать газету\'); // добавляем элемент\r\n$step->addAttribute(\'newspaper\', \'Аргументы и факты\'); // добавляем артибут\r\nprint_r($step);[/php]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[code]SimpleXMLElement Object\r\n(\r\n    [@attributes] => Array\r\n        (\r\n            [newspaper] => Аргументы и факты\r\n        )\r\n\r\n    [0] => Почитать газету\r\n)[/code]\r\n\r\n<h2>Использование XPath</h2>\r\n\r\n<p>\r\nSimpleXML включает в себя встроенную поддержку XPath. Поиск всех элементов &lt;step&gt;:\r\n</p>\r\n\r\n[php]foreach ($xml->xpath(\'//step\') as $step) {\r\n    echo $step . \'<br/>\';\r\n}[/php]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[html]Смешать все ингредиенты и тщательно замесить.<br/>\r\nЗакрыть тканью и оставить на один час в тёплом помещении.<br/>\r\nЗамесить ещё раз, положить на противень и поставить в духовку.<br/>[/html]\r\n\r\n<h2>Взаимодействие с DOM</h2>\r\n\r\n<p>\r\nPHP может преобразовывать XML узлы из SimpleXML в формат DOM и наоборот. Этот пример показывает, как можно изменить DOM элемент в SimpleXML:\r\n</p>\r\n\r\n[php]$dom = new DOMDocument(\'1.0\', \'utf-8\');\r\n$dom->load(\'recipe.xml\');\r\n$xml = simplexml_import_dom($dom);[/php]\r\n\r\n<p style=\"font-weight: bold;\">\r\nДополнительная информация\r\n</p>\r\n<ul>\r\n  <li><a href=\"http://www.sitepoint.com/simplexml-and-namespaces/\">SimpleXML и пространство имен</a></li>\r\n  <li><a href=\"http://www.php.net/manual/ru/simplexml.examples-basic.php\">Базовое использование SimpleXML</a></li>\r\n</ul>','2013-04-24 13:41:14',1),(16,5,'Изучаем API Яндекс.Карт 2.0','','','','JavaScript API Яндекс.Карт представляет собой набор JavaScript-компонентов, предназначенных для создания интерактивных карт. Компоненты размещены на серверах Яндекса и доступны для использования сразу после их загрузки на страницу.','<p>\r\nJavaScript API Яндекс.Карт представляет собой набор JavaScript-компонентов, предназначенных для создания интерактивных карт. Компоненты размещены на серверах Яндекса и доступны для использования сразу после их загрузки на страницу.\r\n</p>\r\n\r\n<h2>Подключение API</h2>\r\n<a href=\"http://api.yandex.ru/maps/doc/jsapi/2.x/overview/concepts/about.xml\">Подключение API</a> производится с помощью загрузки внешнего JavaScript-файла:\r\n</p>\r\n\r\n[html]<script src=\"http://api-maps.yandex.ru/2.0-stable/?load=package.full&lang=ru-RU\" type=\"text/javascript\"></script>[/html]\r\n\r\n<p>\r\nМогут быть загружены как все компоненты API, так и отдельные пакеты, содержащие только необходимые компоненты. Это позволяет регулировать объем трафика, передаваемого клиентскому приложению.\r\n</p>\r\n\r\n<h2>Контейнер для карты</h2>\r\n\r\n<p>\r\nВ качестве контейнера может использоваться любой HTML-элемент блочного типа (например, элемент div с заданной шириной и высотой). Карта заполнит этот элемент полностью. Уникальный идентификатор (id) контейнера будет использоваться для получения указателя на контейнер карты.\r\n</p>\r\n\r\n[html]<div id=\"myMap\" style=\"width: 700px; height: 700px;\"></div>[/html]\r\n\r\n<h2>Создание карты</h2>\r\n\r\n<p>\r\n<a href=\"http://api.yandex.ru/maps/doc/jsapi/2.x/dg/concepts/map.xml\">Создавать карту</a> следует после того, как веб-страница загрузится целиком. Это значит, что контейнер для карты создан и к нему можно обращаться по id. Чтобы инициализировать карту после загрузки страницы, можно воспользоваться функцией ready().\r\n</p>\r\n\r\n[js]ymaps.ready(init);\r\n\r\nfunction init(){     \r\n    var myMap = new ymaps.Map (\'myMap\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 10\r\n    });\r\n}[/js]\r\n\r\n<script src=\"http://api-maps.yandex.ru/2.0-stable/?load=package.full&lang=ru-RU\" type=\"text/javascript\"></script>\r\n<script type=\"text/javascript\">\r\nymaps.ready(initMap1);\r\n\r\nfunction initMap1(){     \r\n    var myMap1 = new ymaps.Map (\'myMap1\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 10\r\n    });\r\n}\r\n</script>\r\n<div id=\"myMap1\" style=\"width: 700px; height: 700px;\"></div>\r\n\r\n<p>\r\nПри инициализации карты, указав дополнительный параметр type, мы можем задать тип нашей карты:\r\n</p>\r\n<ul>\r\n  <li>yandex#map — тип карты «схема» (по умолчанию);</li>\r\n  <li>yandex#satellite — тип карты «спутник»;</li>\r\n  <li>yandex#hybrid — тип карты «гибрид»;</li>\r\n  <li>yandex#publicMap — тип карты «народная карта»;</li>\r\n  <li>yandex#publicMapHybrid — тип карты «народный гибрид».</li>\r\n</ul>\r\n\r\n[js]ymaps.ready(init);\r\n\r\nfunction init(){     \r\n    var myMap = new ymaps.Map (\'myMap\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 10,\r\n        type: \'yandex#hybrid\'\r\n    });\r\n}[/js]\r\n\r\n<script type=\"text/javascript\">\r\nymaps.ready(initMap2);\r\n\r\nfunction initMap2(){     \r\n    var myMap2 = new ymaps.Map (\'myMap2\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 10,\r\n        type: \'yandex#hybrid\'\r\n    });\r\n}\r\n</script>\r\n<div id=\"myMap2\" style=\"width: 700px; height: 700px;\"></div>\r\n\r\n<h2>Добавление метки на карту</h2>\r\n\r\n<p>\r\nВ API метки реализуются с помощью класса Placemark. Перед тем как добавить метку на карту, создайте экземпляр этого класса. При создании метки вы можете задать текст её иконки, а также текст балуна, который откроется при щелчке кнопкой мыши на этой метке. \r\n</p>\r\n\r\n[js]ymaps.ready(init);\r\n\r\nfunction init(){     \r\n    var myMap = new ymaps.Map (\'myMap\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 3\r\n    });\r\n    var myPlacemark = new ymaps.Placemark([55.76, 37.64], { \r\n        iconContent: \'Москва\', \r\n        balloonContent: \'Столица России\' \r\n    }, {\r\n        preset: \'twirl#blueStretchyIcon\'\r\n    });\r\n}[/js]\r\n\r\n<p>\r\nПосле того как метка была создана, её можно добавить на карту. Добавление объектов на карту осуществляется через их добавление в глобальную коллекцию объектов карты myMap.geoObjects:\r\n</p>\r\n\r\n[js]myMap.geoObjects.add(myPlacemark);[/js]\r\n\r\n<script type=\"text/javascript\">\r\nymaps.ready(initMap3);\r\n\r\nfunction initMap3(){     \r\n    var myMap3 = new ymaps.Map (\'myMap3\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 3\r\n    });\r\n    var myPlacemark3 = new ymaps.Placemark([55.75, 37.61], { \r\n        iconContent: \'Москва\', \r\n        balloonContent: \'Столица России\' \r\n    }, {\r\n        preset: \'twirl#blueStretchyIcon\'\r\n    });\r\n    myMap3.geoObjects.add(myPlacemark3);\r\n}\r\n</script>\r\n<div id=\"myMap3\" style=\"width: 700px; height: 700px;\"></div>\r\n\r\n<p>\r\nЕще один пример добавления метки:\r\n</p>\r\n\r\n[js]var myPlacemark = new ymaps.Placemark([55.7, 37.6], {\r\n    // Свойства\r\n    iconContent: \'Щелкни по мне\',\r\n    balloonContentHeader: \'Заголовок\',\r\n    balloonContentBody: \'Содержимое <em>балуна</em>\',\r\n    balloonContentFooter: \'Подвал\'\r\n}, {\r\n    // Опции\r\n    preset: \'twirl#blueStretchyIcon\' // иконка растягивается под контент\r\n});[/js]\r\n\r\n\r\n<h2>Стандартные элементы управления</h2>\r\n\r\n<p>\r\nТеперь изменим код, чтобы на карте отображались <a href=\"http://api.yandex.ru/maps/doc/jsapi/2.x/dg/concepts/controls.xml#standard\">стандартные элементы управления</a>:\r\n</p>\r\n<ul>\r\n  <li>Панель инструментов со стандартным набором кнопок: перетягивание карты (drag), увеличение выделенной области, измерение расстояний.</li>\r\n  <li>Переключатель отображаемого типа карты.</li>\r\n  <li>Изменение коэффициента масштабирования.</li>\r\n</ul>\r\n\r\n[js]ymaps.ready(init);\r\n\r\nfunction init(){     \r\n    var myMap = new ymaps.Map (\'myMap\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 3,\r\n        type: \'yandex#satellite\'\r\n    });\r\n    myMap.controls\r\n        .add(\'mapTools\')       // стандартные кнопки\r\n        .add(\'typeSelector\')   // переключатель типа карты\r\n        .add(\'zoomControl\');   // изменение масштаба\r\n    var myPlacemark = new ymaps.Placemark([55.75, 37.61], { \r\n        iconContent: \'Москва\', \r\n        balloonContent: \'Столица России\' \r\n    }, {\r\n        preset: \'twirl#blueStretchyIcon\'\r\n    });\r\n    myMap.geoObjects.add(myPlacemark);\r\n}[/js]\r\n\r\n<script type=\"text/javascript\">\r\nymaps.ready(initMap4);\r\n\r\nfunction initMap4(){     \r\n    var myMap4 = new ymaps.Map (\'myMap4\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 3,\r\n        type: \'yandex#satellite\'\r\n    });\r\n    myMap4.controls\r\n        .add(\'mapTools\')       // стандартные кнопки\r\n        .add(\'typeSelector\')   // переключатель типа карты\r\n        .add(\'zoomControl\');   // изменение масштаба\r\n    var myPlacemark4 = new ymaps.Placemark([55.75, 37.61], { \r\n        iconContent: \'Москва\', \r\n        balloonContent: \'Столица России\' \r\n    }, {\r\n        preset: \'twirl#blueStretchyIcon\'\r\n    });\r\n    myMap4.geoObjects.add(myPlacemark4);\r\n}\r\n</script>\r\n<div id=\"myMap4\" style=\"width: 700px; height: 700px;\"></div>\r\n\r\n<p>\r\nМожно изменить стандартное расположение элементов управления:\r\n</p>\r\n\r\n[js]myMap.controls\r\n    .add(\'mapTools\', {left:5, bottom:35})    // стандартные кнопки\r\n    .add(\'typeSelector\', {left:5, top:5})    // переключатель типа карты\r\n    .add(\'zoomControl\', {right:5, top:15});  // изменение масштаба[/js]\r\n\r\n<p>\r\nДобавить линейку масштаба и обзорную карту:\r\n</p>\r\n\r\n[js]myMap.controls\r\n    .add(new ymaps.control.ScaleLine())  // линейка масштаба\r\n    .add(new ymaps.control.MiniMap({     // обзорная карта заданного типа\r\n        type: \'yandex#publicMap\'\r\n    }));[/js]\r\n\r\n<h2>Задание собственного шаблона оформления содержимого балуна</h2>\r\n\r\n<p>\r\nБалун — это всплывающее окно, в котором может быть показано любое HTML-содержимое. Одновременно на карте может быть показан только один балун.\r\n</p>\r\n\r\n[js]// Как только будет загружен API и готов DOM, выполняем инициализацию\r\nymaps.ready(initTinkoMap);\r\nfunction initTinkoMap() {\r\n    var tinkoMap = new ymaps.Map(\'tinkoMap\', { center: [55.750, 37.607], zoom: 11 });\r\n    // Масштабирование с помощью колесика мышки\r\n    tinkoMap.behaviors.enable(\'scrollZoom\');\r\n    // Добавляем стандартные элементы управления\r\n    tinkoMap.controls.add(\'zoomControl\').add(\'typeSelector\').add(\'mapTools\');\r\n\r\n    // Создаем метку центрального офиса\r\n    var centralOfficePlacemark = new ymaps.Placemark([55.752422, 37.77163], {\r\n        // Свойства\r\n        iconContent: \'Центральный\',\r\n        name: \'Центральный офис\',\r\n        address: \'3-й проезд Перова поля, дом 8\',\r\n        phone: \'тел: (495) 708-42-13, факc: (495) 708-42-14\',\r\n        photo: \'<img src=\"/images/office.jpg\" alt=\"Центральный офис\" />\',\r\n        print: \'<a href=\"/images/print.jpg\" alt=\"Центральный офис\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n    // Создаем метку офиса продаж Сокол\r\n    var sokolOfficePlacemark = new ymaps.Placemark([55.810463, 37.524699], {\r\n        // Свойства\r\n        iconContent: \'Сокол\',\r\n        name: \'Офис продаж Сокол\',\r\n        address: \'ул. Часовая, д. 24, стр. 2\',\r\n        phone: \'тел: (495) 708-42-13 доб. 401\',\r\n        photo: \'<img src=\"/images/office1.jpg\" alt=\"Офис продаж Сокол\" />\',\r\n        print: \'<a href=\"/images/print1.jpg\" alt=\"Офис продаж Сокол\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n    // Создаем метку офиса продаж Мещанский\r\n    var olimpOfficePlacemark = new ymaps.Placemark([55.781294, 37.629261], {\r\n        // Свойства\r\n        iconContent: \'Мещанский\',\r\n        name: \'Офис продаж Мещанский\',\r\n        address: \'ул. Щепкина, д. 47\',\r\n        phone: \'тел: (495) 708-42-13 доб. 402\',\r\n        photo: \'<img src=\"/images/office2.jpg\" alt=\"Офис продаж Мещанский\" />\',\r\n        print: \'<a href=\"/images/print2.jpg\" alt=\"Офис продаж Мещанский\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n    // Создаем метку офиса продаж Нагорный\r\n    var nagorOfficePlacemark = new ymaps.Placemark([55.678815, 37.603392], {\r\n        // Свойства\r\n        iconContent: \'Нагорный\',\r\n        name: \'Офис продаж Нагорный\',\r\n        address: \'ул. Нагорная, д. 20, корп. 1\',\r\n        phone: \'тел: (495) 708-42-13 доб. 403\',\r\n        photo: \'<img src=\"/images/office3.gif\" alt=\"Офис продаж Нагорный\" />\',\r\n        print: \'<a href=\"/images/print3.jpg\" alt=\"Офис продаж Нагорный\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n\r\n    // Создаем коллекцию, в которую будем добавлять метки\r\n    var tinkoCollection = new ymaps.GeoObjectCollection();\r\n\r\n    // Добавляем метки в коллекцию геообъектов\r\n    tinkoCollection\r\n        .add(centralOfficePlacemark)\r\n        .add(sokolOfficePlacemark)\r\n        .add(olimpOfficePlacemark)\r\n        .add(nagorOfficePlacemark);\r\n\r\n    // Создаем шаблон для отображения контента балуна\r\n    var tinkoBalloonLayout = ymaps.templateLayoutFactory.createClass(\r\n        \'<p><strong>$[properties.name]</strong></p>\' +\r\n        \'<p>$[properties.address]</p>\' +\r\n        \'<p>$[properties.phone]</p>\' +\r\n        \'<p>$[properties.photo]</p>\' +\r\n        \'<p>$[properties.print]</p>\'\r\n    );\r\n\r\n    // Помещаем созданный шаблон в хранилище шаблонов.\r\n    // Теперь наш шаблон доступен по ключу \'tinko#officeslayout\'\r\n    ymaps.layout.storage.add(\'tinko#officeslayout\', tinkoBalloonLayout);\r\n\r\n    // Задаем наш шаблон для балунов геобъектов коллекции\r\n    tinkoCollection.options.set({\r\n        balloonContentBodyLayout:\'tinko#officeslayout\',\r\n        // Максимальная ширина балуна в пикселах\r\n        balloonMaxWidth: 350\r\n    });\r\n\r\n    // Добавляем коллекцию геообъектов на карту\r\n    tinkoMap.geoObjects.add(tinkoCollection);\r\n}[/js]\r\n\r\n\r\n<script type=\"text/javascript\">\r\n// Как только будет загружен API и готов DOM, выполняем инициализацию\r\nymaps.ready(initTinkoMap);\r\nfunction initTinkoMap() {\r\n    var tinkoMap = new ymaps.Map(\'tinkoMap\', { center: [55.750, 37.607], zoom: 11 });\r\n    // Масштабирование с помощью колесика мышки\r\n    tinkoMap.behaviors.enable(\'scrollZoom\');\r\n    // Добавляем стандартные элементы управления\r\n    tinkoMap.controls.add(\'zoomControl\').add(\'typeSelector\').add(\'mapTools\');\r\n\r\n    // Создаем метку центрального офиса\r\n    var centralOfficePlacemark = new ymaps.Placemark([55.752422, 37.77163], {\r\n        // Свойства\r\n        iconContent: \'Центральный\',\r\n        name: \'Центральный офис\',\r\n        address: \'3-й проезд Перова поля, дом 8\',\r\n        phone: \'тел: (495) 708-42-13, факc: (495) 708-42-14\',\r\n        photo: \'<img src=\"/files/blog/16/office.jpg\" alt=\"Центральный офис\" />\',\r\n        print: \'<a href=\"/files/blog/16/print.jpg\" alt=\"Центральный офис\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n    // Создаем метку офиса продаж Сокол\r\n    var sokolOfficePlacemark = new ymaps.Placemark([55.810463, 37.524699], {\r\n        // Свойства\r\n        iconContent: \'Сокол\',\r\n        name: \'Офис продаж Сокол\',\r\n        address: \'ул. Часовая, д. 24, стр. 2\',\r\n        phone: \'тел: (495) 708-42-13 доб. 401\',\r\n        photo: \'<img src=\"/files/blog/16/office1.jpg\" alt=\"Офис продаж Сокол\" />\',\r\n        print: \'<a href=\"/files/blog/16/print1.jpg\" alt=\"Офис продаж Сокол\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n    // Создаем метку офиса продаж Мещанский\r\n    var olimpOfficePlacemark = new ymaps.Placemark([55.781294, 37.629261], {\r\n        // Свойства\r\n        iconContent: \'Мещанский\',\r\n        name: \'Офис продаж Мещанский\',\r\n        address: \'ул. Щепкина, д. 47\',\r\n        phone: \'тел: (495) 708-42-13 доб. 402\',\r\n        photo: \'<img src=\"/files/blog/16/office2.jpg\" alt=\"Офис продаж Мещанский\" />\',\r\n        print: \'<a href=\"/files/blog/16/print2.jpg\" alt=\"Офис продаж Мещанский\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n    // Создаем метку офиса продаж Нагорный\r\n    var nagorOfficePlacemark = new ymaps.Placemark([55.678815, 37.603392], {\r\n        // Свойства\r\n        iconContent: \'Нагорный\',\r\n        name: \'Офис продаж Нагорный\',\r\n        address: \'ул. Нагорная, д. 20, корп. 1\',\r\n        phone: \'тел: (495) 708-42-13 доб. 403\',\r\n        photo: \'<img src=\"/files/blog/16/office3.gif\" alt=\"Офис продаж Нагорный\" />\',\r\n        print: \'<a href=\"/files/blog/16/print3.jpg\" alt=\"Офис продаж Нагорный\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n\r\n    // Создаем коллекцию, в которую будем добавлять метки\r\n    var tinkoCollection = new ymaps.GeoObjectCollection();\r\n\r\n    // Добавляем метки в коллекцию геообъектов\r\n    tinkoCollection\r\n        .add(centralOfficePlacemark)\r\n        .add(sokolOfficePlacemark)\r\n        .add(olimpOfficePlacemark)\r\n        .add(nagorOfficePlacemark);\r\n\r\n    // Создаем шаблон для отображения контента балуна\r\n    var tinkoBalloonLayout = ymaps.templateLayoutFactory.createClass(\r\n        \'<p><strong>$[properties.name]</strong></p>\' +\r\n        \'<p>$[properties.address]</p>\' +\r\n        \'<p>$[properties.phone]</p>\' +\r\n        \'<p>$[properties.photo]</p>\' +\r\n        \'<p>$[properties.print]</p>\'\r\n    );\r\n\r\n    // Помещаем созданный шаблон в хранилище шаблонов.\r\n    // Теперь наш шаблон доступен по ключу \'tinko#officeslayout\'\r\n    ymaps.layout.storage.add(\'tinko#officeslayout\', tinkoBalloonLayout);\r\n\r\n    // Задаем наш шаблон для балунов геобъектов коллекции\r\n    tinkoCollection.options.set({\r\n        balloonContentBodyLayout:\'tinko#officeslayout\',\r\n        // Максимальная ширина балуна в пикселах\r\n        balloonMaxWidth: 350\r\n    });\r\n\r\n    // Добавляем коллекцию геообъектов на карту\r\n    tinkoMap.geoObjects.add(tinkoCollection);\r\n}\r\n</script>\r\n<div id=\"tinkoMap\" style=\"width: 700px; height: 700px;\"></div>\r\n\r\n<h2>Рисуем многоугольник</h2>\r\n\r\n[js]ymaps.ready(init);\r\nfunction init () {\r\n    var myMap = new ymaps.Map (\'myMap\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 10\r\n    });\r\n    // создаем многоугольник\r\n    var myPolygon = new ymaps.Polygon([[\r\n        // координаты вершин внешней границы многоугольника\r\n        [55.778607,37.553126],\r\n        [55.792923,37.647883],\r\n        [55.724391,37.709681],\r\n        [55.708887,37.583339]\r\n    ]]);\r\n    myMap.geoObjects.add(myPolygon);\r\n}[/js]\r\n\r\n<script type=\"text/javascript\">\r\nymaps.load([\'geometry\']);\r\nymaps.ready(initMap5);\r\n \r\nfunction initMap5() {\r\n    var myMap5 = new ymaps.Map (\'myMap5\', {\r\n        center: [55.76, 37.61],\r\n        zoom: 10\r\n    });\r\n    // создаем многоугольник\r\n    var myPolygon5 = new ymaps.Polygon([[\r\n        // координаты вершин внешней границы многоугольника\r\n        [55.778607,37.553126],\r\n        [55.792923,37.647883],\r\n        [55.724391,37.709681],\r\n        [55.708887,37.583339]\r\n    ]]);\r\n    myMap5.geoObjects.add(myPolygon5);\r\n}\r\n</script>\r\n<div id=\"myMap5\" style=\"width: 700px; height: 700px;\"></div>\r\n      \r\n<h3>Дополнительная информация:</h3>\r\n<ul>\r\n  <li><a href=\"http://api.yandex.ru/maps/doc/jsapi/2.x/examples/\">Примеры использования JavaScript API</a></li>\r\n  <li><a href=\"http://webmap-blog.ru/category/yandex-maps\">Занимательная Веб-картография</a></li>\r\n</ul>','2013-04-30 08:58:08',1),(140,7,'Вычисляемые колонки в списках','','','1С:Предприятие, Регистр, Список, Справочник, УправляемаяФорма, ЯзыкЗапросов','Необходимость вывода произвольных данных в колонках списка возникает, когда вместе с элементом списка нужно отобразить некоторую вычисляемую информацию. Рассмотрим эту ситуацию на примере отображения актуальной цены в списке справочника Номенклатура.','<p>\r\nНеобходимость вывода произвольных данных в колонках списка возникает, когда вместе с элементом списка нужно отобразить некоторую вычисляемую информацию. Рассмотрим эту ситуацию на примере отображения актуальной цены в списке справочника <code>Номенклатура</code>.\r\n</p>\r\n<p>\r\nЭти данные можно получить из таблицы регистра сведений <code>Цены.СрезПоследних</code>. Следовательно, поле <code>Цена</code> из этой таблицы нужно добавить в динамический список <code>Список</code>, который является основным реквизитом формы списка номенклатуры и служит источником данных для таблицы списка.\r\n</p>\r\n<p>\r\nОткроем в конфигураторе форму списка справочника <code>Номенклатура</code> и вызовем палитру свойств основного реквизита формы <code>Список</code>. До сих пор в свойствах динамического списка была указана «Основная таблица» — <code>Справочник.Номенклатура</code>, и список формировался путем запроса к этой таблице.\r\n</p>\r\n<p>\r\nТеперь нам нужна еще связанная информация из таблицы регистра сведений <code>Цены.СрезПоследних</code>. Поэтому установим флажок <code>ПроизвольныйЗапрос</code> и в строке «Настройка\r\nсписка» нажмем «Открыть».\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/140/1.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nОткроется окно настройки динамического списка. На закладке «Запрос» мы видим запрос, в котором выбираются все поля из таблицы <code>Справочник.Номенклатура</code>. Изменим его. Для этого нажмем кнопку «Конструктор запроса».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/140/2.jpg\" class=\"zoom\"><img src=\"/files/blog/140/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nДобавим в список таблиц <code>Цены.СрезПоследних</code> и выберем из нее поле <code>Цена</code>:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/140/3.jpg\" class=\"zoom\"><img src=\"/files/blog/140/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nНа закладке «Связи» отредактируем связь между таблицами, созданную по умолчанию. Установим флажок «Все» у таблицы <code>Справочник.Номенклатура</code> и снимем его у таблицы <code>Цены.СрезПоследних</code>. Тем самым мы задаем, что в списке номенклатуры будут отражены все позиции, даже те, по которым не установлены цены.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/140/4.jpg\" class=\"zoom\"><img src=\"/files/blog/140/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nСоздание запроса закончено, нажмем ОК. Теперь колонка <code>Цена</code>, содержащая актуальную цену, будет отображаться в списке номенклатуры, когда мы поместим ее в форму списка.\r\n</p>','2018-06-15 18:00:12',1),(18,6,'Загрузка файла на сервер без использования формы','PHP загрузка файла сокеты CURL POST PUT','Загрузка файла на сервер без использования формы. Библиотека CURL и сокеты','$_FILES, $_POST, CURL, HTML, HTTP, PHP, POST, PUT, Web-разработка, application/x-www-form-urlencoded, boundary, move_uploaded_file, multipart/form-data, socket, Файл, сокет','Для HTTP запроса типа POST существует два варианта передачи полей из HTML форм, а именно, используя алгоритм application/x-www-form-urlencoded и multipart/form-data. Алгоритм первого типа создавался давным-давно, когда в языке HTML еще не предусматривали возможность передачи файлов через HTML формы.','<p>\r\nДля HTTP запроса типа POST существует два варианта передачи полей из HTML форм, а именно, используя алгоритм <span style=\"color: blue;\">application/x-www-form-urlencoded</span> и <span style=\"color: blue;\">multipart/form-data</span>. Алгоритм первого типа создавался давным-давно, когда в языке HTML еще не предусматривали возможность передачи файлов через HTML формы.\r\n</p>\r\n<p>\r\nСо временем возникла необходимость через формы отсылать еще и файлы. Тогда консорциум W3C взялся за доработку формата POST запроса. К тому времени уже достаточно широко применялся формат <span style=\"color: blue;\">MIME</span> (Multipurpose Internet Mail Extensions — многоцелевые расширения протокола для формирования Mail сообщений), поэтому, чтобы не изобретать велосипед заново, решили использовать часть данного формата формирования сообщений для создания POST запросов в протоколе HTTP.\r\n</p>\r\n<p>\r\nГлавное отличие <span style=\"color: blue;\">multipart/form-data</span> от <span style=\"color: blue;\">application/x-www-form-urlencoded</span> в том, что тело запроса теперь можно поделить на разделы, которые разделяются границами. Каждый раздел может иметь свой собственный заголовок для описания данных, которые в нем хранятся, т.е. в одном запросе можно передавать данные различных типов (как в теле письма можно одновременно с текстом передавать файлы). Пример запроса:\r\n</p>\r\n[code]\r\nContent-Type: multipart/form-data; boundary=[red]ff4ed67396bc8e1d6dbf19d65b6c6348[/red]\r\nContent-Length: 417339\r\n \r\n[grn]--ff4ed67396bc8e1d6dbf19d65b6c6348[/grn]\r\nContent-Disposition: form-data; name=\"name\"\r\n \r\nЕвгений\r\n[grn]--ff4ed67396bc8e1d6dbf19d65b6c6348[/grn]\r\nContent-Disposition: form-data; name=\"message\"\r\n \r\nКакое-то сообщение от пользователя\r\n[grn]--ff4ed67396bc8e1d6dbf19d65b6c6348[/grn]\r\nContent-Disposition: form-data; name=\"upload\"; filename=\"image.jpg\"\r\nContent-Type: image/jpeg\r\nContent-Transfer-Encoding: binary\r\n\r\n[border]...содержимое файла image.jpg...[/border]\r\n[grn]--ff4ed67396bc8e1d6dbf19d65b6c6348--[/grn]\r\n[/code]\r\n<p>\r\nBoundary (граница) — это последовательность байтов, которая не должна встречаться внутри передаваемых данных. Content-Length — суммарный объём, включая дочерние заголовки. Само содержимое полей при этом оставляется «как есть».\r\n</p>\r\n\r\n<h2>CURL, multipart/form-data</h2>\r\n\r\n[php]\r\n$file = \'image.jpg\';\r\n$postdata = array( \'name\' => \'Евгений\',\r\n                   \'message\' => \'Какое-то сообщение от пользователя\',\r\n                   \'upload\' => \'@\'.$file );\r\n\r\n$ch = curl_init();\r\ncurl_setopt($ch, CURLOPT_URL, \'http://server.com/get.php\');\r\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\r\ncurl_setopt($ch, CURLOPT_POST, 1);\r\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $postdata);\r\ncurl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);\r\ncurl_exec($ch);\r\ncurl_close($ch);\r\n[/php]\r\n\r\n<p>\r\nФайл get.php на сервере http://server.com:\r\n</p>\r\n\r\n[php]\r\nprint_r($_POST);\r\nprint_r($_FILES);\r\nmove_uploaded_file($_FILES[\'upload\'][\'tmp_name\'], \'image.jpg\');\r\n[/php]\r\n\r\n<p>\r\nРезультат работы:\r\n</p>\r\n\r\n[code]\r\nArray\r\n(\r\n    [name] => Евгений\r\n    [message] => Какое-то сообщение от пользователя\r\n)\r\nArray\r\n(\r\n    [upload] => Array\r\n        (\r\n            [name] => image.jpg\r\n            [type] => application/octet-stream\r\n            [tmp_name] => C:\\Windows\\Temp\\php504D.tmp\r\n            [error] => 0\r\n            [size] => 416919\r\n        )\r\n)\r\n[/code]\r\n\r\n<div class=\"note\">\r\n<p>\r\nВажный момент: на форуме PHPCLUB.RU встретил упоминание, что может потребоваться указание полного пути файла — иначе CURL выдает ошибку.\r\n</p>\r\n[php]$file = \'C:/work/localhost/www/image.jpg\';[/php]\r\n</div>\r\n\r\n<h2>CURL, application/x-www-form-urlencoded</h2>\r\n\r\n[php]\r\n$file = \'image.jpg\';\r\n// данные POST-запроса\r\n$postdata = array( \'name\' => \'Евгений\',\r\n                   \'message\' => \'Какое-то сообщение от пользователя\',\r\n                   \'upload\' => file_get_contents($file) );\r\n\r\n$ch = curl_init();\r\ncurl_setopt($ch, CURLOPT_URL, \'http://server.com/get.php\');\r\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\r\ncurl_setopt($ch, CURLOPT_POST, 1);\r\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $postdata);\r\ncurl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);\r\ncurl_exec($ch);\r\ncurl_close($ch);\r\n[/php]\r\n\r\n<p>\r\nФайл get.php на сервере http://server.com:\r\n</p>\r\n\r\n[php]\r\nprint_r($_POST);\r\nfile_put_contents(\'image.jpg\', $_POST[\'upload\']);\r\n[/php]\r\n\r\n<p>\r\nРезультат работы:\r\n</p>\r\n\r\n[code]\r\nArray\r\n(\r\n    [name] => Евгений\r\n    [message] => Какое-то сообщение от пользователя\r\n    [upload] => ...содержимое файла image.jpg...\r\n)\r\n[/code]\r\n\r\n<h2>Сокеты, multipart/form-data</h2>\r\n\r\n[php]\r\n// устанавливаем соединение с сервером\r\n$fp = fsockopen(\'server.com\', 80, $errno, $errstr, 30);\r\nif (!$fp) die($errstr.\' (\'.$errno.\')\');\r\n\r\n$name = \'Евгений\';\r\n$message = \'Какое-то сообщение от пользователя\';\r\n$file = \'image.jpg\';\r\n// содержимое файла\r\n$content = file_get_contents($file);\r\n\r\n// разделитель\r\n$boundary = md5(uniqid(time()));\r\n\r\n$body = \'--\'.$boundary.\"\\r\\n\";\r\n$body = $body.\'Content-Disposition: form-data; name=\"name\"\'.\"\\r\\n\\r\\n\";\r\n$body = $body.$name.\"\\r\\n\";\r\n\r\n$body = $body.\'--\'.$boundary.\"\\r\\n\";\r\n$body = $body.\'Content-Disposition: form-data; name=\"message\"\'.\"\\r\\n\\r\\n\";\r\n$body = $body.$message.\"\\r\\n\";\r\n\r\n$body = $body.\'--\'.$boundary.\"\\r\\n\";\r\n$body = $body.\'Content-Disposition: form-data; name=\"upload\"; filename=\"image.jpg\"\'.\"\\r\\n\";\r\n$body = $body.\'Content-Type: image/jpeg\'.\"\\r\\n\";\r\n$body = $body.\'Content-Transfer-Encoding: binary\'.\"\\r\\n\\r\\n\";\r\n$body = $body.$content.\"\\r\\n\";\r\n\r\n$body = $body.\'--\'.$boundary.\'--\';\r\n\r\n// пишем в сокет метод, URI и протокол\r\nfwrite($fp, \'POST /get.php HTTP/1.1\'.\"\\r\\n\");\r\n// а также имя хоста\r\nfwrite($fp, \'Host: server.com\'.\"\\r\\n\");\r\n// отправляем заголовки\r\nfwrite($fp, \'Content-Type: multipart/form-data; boundary=\'.$boundary.\"\\r\\n\");\r\nfwrite($fp, \'Content-Length: \'.strlen($body).\"\\r\\n\\r\\n\");\r\n// теперь передаем данные\r\nfwrite($fp, $body);\r\n\r\n// получаем ответ\r\n$result = \'\';\r\nwhile ( !feof($fp) ) $result .= fgets($fp, 1024);\r\n// закрываем соединение\r\nfclose($fp);\r\n// выводим ответ в браузер\r\necho $result;\r\n[/php]\r\n\r\n<p>\r\nФайл get.php на сервере http://server.com:\r\n</p>\r\n\r\n[php]\r\nprint_r( $_POST );\r\nprint_r( $_FILES );\r\nmove_uploaded_file($_FILES[\'upload\'][\'tmp_name\'], \'image.jpg\')\r\n[/php]\r\n\r\n<p>Результат:</p>\r\n\r\n[code]\r\nHTTP/1.1 200 OK\r\nServer: Apache/2.0 (Win32) PHP/5.1\r\nX-Powered-By: PHP/5.1\r\nContent-Length: 310\r\n\r\nArray\r\n(\r\n    [name] => Евгений\r\n    [message] => Какое-то сообщение от пользователя\r\n)\r\nArray\r\n(\r\n    [upload] => Array\r\n        (\r\n            [name] => image.jpg\r\n            [type] => image/jpeg\r\n            [tmp_name] => C:\\Windows\\Temp\\phpA457.tmp\r\n            [error] => 0\r\n            [size] => 416919\r\n        )\r\n)\r\n[/code]\r\n\r\n<h2>Сокеты, application/x-www-form-urlencoded</h2>\r\n\r\n[php]\r\n// устанавливаем соединение с сервером\r\n$fp = fsockopen(\'server.com\', 80, $errno, $errstr, 30);\r\nif (!$fp) die($errstr.\' (\'.$errno.\')\');\r\n\r\n$file = \'image.jpg\';\r\n// содержимое файла\r\n$content = file_get_contents($file);\r\n// данные POST-запроса\r\n$data = \'name=\' . urlencode(\'Евгений\') . \'&message=\' . urlencode(\'Какое-то сообщение от пользователя\') . \'&upload=\'.urlencode($content);\r\n// заголовоки запроса\r\n$headers = \'POST /get.php HTTP/1.1\'.\"\\r\\n\";\r\n$headers .= \'Host: server.com\'.\"\\r\\n\";\r\n$headers .= \'Content-type: application/x-www-form-urlencoded\'.\"\\r\\n\";\r\n$headers .= \'Content-Length: \'.strlen($data).\"\\r\\n\\r\\n\";\r\n// отправляем запрос серверу\r\nfwrite($fp, $headers.$data);\r\n// получаем ответ\r\n$result = \'\';\r\nwhile ( !feof($fp) ) $result .= fgets($fp, 1024);\r\n// закрываем соединение\r\nfclose($fp);\r\n// выводим ответ в браузер\r\necho $result;\r\n[/php]\r\n\r\n<p>\r\nФайл get.php на сервере http://server.com:\r\n</p>\r\n\r\n[php]\r\nprint_r($_POST);\r\nfile_put_contents(\'image.jpg\', $_POST[\'upload\']);\r\n[/php]\r\n\r\n<p>\r\nРезультат работы:\r\n</p>\r\n\r\n[code]\r\nHTTP/1.1 200 OK\r\nServer: Apache/2.0 (Win32) PHP/5.1\r\nX-Powered-By: PHP/5.1\r\nTransfer-Encoding: chunked\r\n\r\nArray\r\n(\r\n    [name] => Евгений\r\n    [message] => Какое-то сообщение от пользователя\r\n    [upload] => ...содержимое файла image.jpg...\r\n)\r\n[/code]\r\n\r\n<h2>Метод PUT</h2>\r\n\r\n<p>\r\nОписанные выше способы работают для относительно небольших файлов (примерно до 2-х мегабайт, для получения более точного значения необходимо смотреть в настройках PHP максимальный объем принимаемых данных методом POST). Чтобы обойти это ограничение, будем передавать файл методом PUT:\r\n</p>\r\n\r\n[php]\r\n$url = \'http://server.com/get.php\';\r\n$file = \'image.jpg\';\r\n// Открываем передаваемый файл на чтение для дальнейшей его передачи\r\n$fp = fopen($file, \'r\');\r\n// Инициализируем сеанс CURL\r\n$ch = curl_init();\r\n// Указываем URL скрипта, который примет наш запрос. К имени скрипта\r\n// добавляем еще две переменные, передаваемые методом GET\r\ncurl_setopt($ch, CURLOPT_URL, $url . \'?name=\' . urlencode(\'Евгений\') . \'&message=\' . urlencode(\'Какое-то сообщение от пользователя\'));\r\n// Дескриптор файла, который собираемся передать\r\ncurl_setopt($ch, CURLOPT_INFILE, $fp);\r\n// Указываем размер отправляемого файла\r\ncurl_setopt($ch, CURLOPT_INFILESIZE, filesize($file));\r\n// Указываем, что файл передается методом PUT\r\ncurl_setopt($ch, CURLOPT_PUT, 1);\r\n// Указываем, что будет производиться закачка на удаленный сервер\r\ncurl_setopt($ch, CURLOPT_UPLOAD, 1);\r\n// Выполняем запрос CURL\r\ncurl_exec($ch);\r\n// Завершаем сеанс CURL\r\ncurl_close($ch);\r\n[/php]\r\n\r\n<p>\r\nФайл get.php на сервере http://server.com:\r\n</p>\r\n\r\n[php]\r\nprint_r($_GET);\r\nfile_put_contents (\'image.jpg\', file_get_contents(\'php://input\'));\r\n[/php]\r\n\r\n<p>\r\nРезультат работы:\r\n</p>\r\n\r\n[code]\r\nArray\r\n(\r\n    [name] => Евгений\r\n    [message] => Какое-то сообщение от пользователя\r\n)\r\n[/code]','2008-09-22 12:19:10',1),(19,17,'Расширения Joomla','Joomla расширения модули компоненты плагины','Расширения Joomla: модули, компоненты и плагины','CMS, Joomla, Web-разработка','Расширения позволяют существенно расширить функциональность вашего сайта, например, добавить форум, чат, средства для чтения RSS-лент и даже интернет-магазин. Огромное количество расширений вы сможете найти на сайте http://extensions.joomla.org. Практически все расширения на этом сайте бесплатные.','<p>\r\nРасширения позволяют существенно расширить функциональность вашего сайта, например, добавить форум, чат, средства для чтения RSS-лент и даже интернет-магазин. Огромное количество расширений вы сможете найти на сайте <a href=\"http://extensions.joomla.org/\">http://extensions.joomla.org</a>. Практически все расширения на этом сайте бесплатные. На других сайтах вы можете найти коммерческие Joomla-расширения. Устанавливать их или нет — решать вам, но практически всегда можно найти бесплатный аналог расширения.\r\n</p>\r\n<p>\r\nРасширения в Joomla бывают трех типов: модули, компоненты и плагины. Да, все это — расширения для Joomla. Такое разнообразие расширений иногда сбивает с толку начинающих пользователей, но зато благодаря этому четко разделяются функции каждого расширения. Например, модуль не может выполнять функции плагинов и наоборот. Если вы устанавливаете комплексный пакет расширений, например, чат, то он может состоять из расширений разных типов. Чаше всего пакеты расширений состоят из компонентов и модулей.\r\n</p>\r\n<h2>Модули</h2>\r\n<p>\r\nМодуль, можно сказать, самое минимальное расширение. Модуль, как правило, используется для отображения информации (например модуль «Кто на сайте») или минимального взаимодействия с пользователем (например модуль голосований). В Интернете вы можете найти модули, отображающие курсы валют, информацию о погоде и другие полезные модули.\r\n</p>\r\n<p>\r\nМодуль загружается в одну из определенных разработчиком шаблона позиций, например справа вверху. На одной странице может быть загружено несколько модулей.\r\n</p>\r\n<p>\r\nИнтерфейс администратора содержит немного параметров для модулей, если вообще разработчик предусмотрел изменение параметров модуля.\r\n</p>\r\n<h2>Компоненты</h2>\r\n<p>\r\nВ отличие от модулей, компонент загружается всегда в центральную часть страницы. Компонент может быть всего один на странице. Компоненты используются, как правило, для взаимодействия с пользователем. Например, компонент может отображать содержимое раздела, категории, статьи, вызывать редактор для редактирования статьи и т.д. В некоторых случаях (чат, форум) компоненты предоставляют полноценный интерфейс пользователя.\r\n</p>\r\n<p>\r\nНа панели управления обычно можно установить множество различных параметров для компонента. В большинстве случаев интерфейс настройки компонентов содержит несколько вкладок параметров, позволяющих настроить компонент.\r\n</p>\r\n<p>\r\nИногда модули и компоненты используются в паре. Например, для отображения голосований используется модуль, а для управления голосованиями — компонент.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/19/joomla-extensions.jpg\" class=\"zoom\" title=\"Joomla: модули и компоненты\"><img src=\"/files/blog/19/joomla-extensions-small.jpg\" alt=\"Joomla: модули и компоненты\" /></a>\r\n</p>\r\n<h2>Плагины</h2>\r\n<p>\r\nПлагины — это низкоуровневые расширения. Обычно плагины активируются определенным событием сервера (или пользовательским событием, событием редактора и т.д.). Плагин может перехватывать выходные данные Joomla и вносить в них изменения до отправки в браузер пользователя. Плагины обычно используются для организации различных визуальных редакторов для Joomla. В базе данных все статьи хранятся в формате HTML. Joomla выводит их из базы данных, плагин редактора перехватывает этот результат вывода и конвертирует в собственное визуальное представление. Вы редактируете текст статьи, используя это визуальное представление. Когда вы щелкаете на кнопке «Сохранить», визуальное представление статьи конвертируется в HTML-код и сохраняется в базе данных Joomla.\r\n</p>\r\n<h2>Менеджер расширений</h2>\r\n<p>\r\nМенеджер расширений используется для установки и удаления компонентов, модулей, плагинов, языков и шаблонов. Существует три способа установки расширения:\r\n</p>\r\n<ul>\r\n  <li><strong>Загрузить файл пакета</strong>. Необходимо загрузаить на свой компьютер архив, содержащий файлы расширения, зайти на страницу «Менеджер расширений», выбрать этот архив и щелкнуть по кнопке «Загрузить файл и установить».</li>\r\n  <li><strong>Установить из каталога</strong>. Самостоятельно распаковать загруженный архив, загрузить по FTP в какой-нибудь каталог на сервере, указать путь к этому каталогу и щелкнуть по кнопке «Установить».</li>\r\n  <li><strong>Установить из URL</strong>. Нужно только указать URL пакета расширения. Joomla сама скачает архив, распакует его и установит расширение.</li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/19/extensions-install.jpg\" class=\"zoom\" title=\"Joomla: менеджер расширений\"><img src=\"/files/blog/19/extensions-install-small.jpg\" alt=\"Joomla: менеджер расширений\" /></a>\r\n</p>','2013-05-07 13:36:10',1),(20,17,'Создание системного плагина Joomla','Joomla plugin плагин расширение системный','Создание системного плагина','CMS, Joomla, Web-разработка','Напишем простой плагин Joomla для обработки события onBeforeCompileHead. Это событие позволяет видеоизменить любой элемент внутри тега &lt;head&gt; HTML-документа перед его выводом в браузер. С помощью этого плагина можно добавить, изменить или удалить мета-теги, js-скрипты, css-стили и т.п.','<p>\r\nНапишем простой плагин Joomla для обработки события <span style=\"color: blue;\">onBeforeCompileHead</span>. Это событие позволяет видеоизменить любой элемент внутри тега <span style=\"color: blue;\">&lt;head&gt;</span> HTML-документа перед его выводом в браузер. С помощью этого плагина можно добавить, изменить или удалить мета-теги, js-скрипты, css-стили и т.п.\r\n</p>\r\n<p>\r\nСобытие <span style=\"color: blue;\">onBeforeCompileHead</span> инициируется в методе <span style=\"color: blue;\">fetchHead()</span> класса <span style=\"color: blue;\">JDocumentRendererHtml</span> (из файла <span style=\"color: blue;\">libraries/joomla/document/html/renderer/head.php</span>). Метод считывает данные для элемента <span style=\"color: blue;\">&lt;head&gt;</span> HTML-документа и выводит их в буфер в формате HTML для дальнейшей отправки браузеру. Код, инициирующий данное событие:\r\n</p>\r\n[php]public function fetchHead(&$document)\r\n{\r\n    // Trigger the onBeforeCompileHead event\r\n    // (skip for installation, since it causes an error)\r\n    $app = JFactory::getApplication();\r\n    $app->triggerEvent(\'onBeforeCompileHead\');\r\n    // ..........\r\n}[/php]\r\n<p>\r\nНаш системный плагин будет очень простым. Он добавит мета-тег <span style=\"color: blue;\">revised</span> (исправлено), исходя из значения параметра, введенного администратором сайта\r\n</p>\r\n[html]<meta name=\"revised\" content=\"Vasya Pupkin, 9 June 2013\" />[/html]\r\n<p>\r\nгде атрибут <span style=\"color: blue;\">content</span> как раз и содержит текст, введенный администратором.\r\n</p>\r\n<p>\r\nДля начала разберемся, каким образом в объекте типа <span style=\"color: blue;\">JDocumentHtml</span> хранятся данные HTML-заголовка. Класс <span style=\"color: blue;\">JDocumentHtml</span> имеет метод <span style=\"color: blue;\">getHeadData()</span>, позволяющий получить всю необходимую нам информацию. Добавим <span style=\"color: blue;\">print_r()</span> внутрь метода <span style=\"color: blue;\">fetchHead()</span>:\r\n</p>\r\n[php]public function fetchHead(&$document)\r\n{\r\n    print_r($document->getHeadData());\r\n    // Trigger the onBeforeCompileHead event\r\n    // (skip for installation, since it causes an error)\r\n    $app = JFactory::getApplication();\r\n    // ..........\r\n}[/php]\r\nРезультат:\r\n[code]Array\r\n(\r\n  [title] => Home\r\n  [description] => My description\r\n  [link] => \r\n  [metaTags] => Array\r\n    (\r\n      [http-equiv] => Array\r\n        (\r\n          [content-type] => text/html\r\n        )\r\n\r\n      [standard] => Array\r\n        (\r\n          [keywords] => My keywords\r\n          [rights] => My rights\r\n        )\r\n    )\r\n  [links] => Array\r\n    (\r\n      ..........\r\n    )\r\n  [styleSheets] => Array\r\n    (\r\n      ..........\r\n    )\r\n  [style] => Array\r\n    (\r\n      ..........\r\n    )\r\n\r\n  [scripts] => Array\r\n    (\r\n      ..........\r\n    )\r\n  [script] => Array\r\n    (\r\n      ..........\r\n    )\r\n  [custom] => Array\r\n    (\r\n      ..........\r\n    )\r\n)[/code]\r\n<p>\r\nСоздадим папку <span style=\"color: blue;\">plugins/system/mymeta</span> для нашего плагина и поместим в нее три файла:\r\n</p>\r\n<p><strong>index.html</strong></p>\r\n[html]<!DOCTYPE html><title></title>[/html]\r\n\r\n<p><strong>mymeta.php</strong></p>\r\n[php]<?php\r\n/**\r\n * @copyright    Copyright (C) 2013 Vasya Pupkin. All rights reserved.\r\n * @license      GNU General Public License version 2 or later; see LICENSE.txt\r\n */\r\n\r\n// no direct access\r\ndefined(\'_JEXEC\') or die;\r\n\r\n/**\r\n * Пример системного плагина\r\n */\r\nclass plgSystemMyMeta extends JPlugin\r\n{\r\n  function onBeforeCompileHead()\r\n  {\r\n    if ( $this->params->get(\'revised\') ) {\r\n      $document = JFactory::getDocument();\r\n      $headData = $document->getHeadData();\r\n      $headData[\'metaTags\'][\'standard\'][\'revised\'] = $this->params->get(\'revised\');\r\n      $document->setHeadData($headData);\r\n    }\r\n  }\r\n}[/php]\r\n\r\n<p><strong>mymeta.xml</strong></p>\r\n[xml]<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<install version=\"2.5\" type=\"plugin\" group=\"system\">\r\n  <name>My Meta Plugin</name>\r\n  <author>Vasya Pupkin</author>\r\n  <creationDate>June 2013</creationDate>\r\n  <copyright>Copyright (C) 2013 Vasya Pupkin. All rights reserved.</copyright>\r\n  <license>GNU General Public License version 2 or later; see LICENSE.txt</license>\r\n  <authorEmail>pupkin.v@mail.ru</authorEmail>\r\n  <authorUrl>www.pupkin.ru</authorUrl>\r\n  <version>2.5.0</version>\r\n  <description>My meta plugin</description>\r\n  <files>\r\n    <filename plugin=\"mymeta\">mymeta.php</filename>\r\n    <filename>index.html</filename>\r\n  </files>\r\n  <config>\r\n    <fields name=\"params\">\r\n      <fieldset name=\"basic\">\r\n        <field name=\"revised\" type=\"text\"\r\n          description=\"Meta revised text for content attribute\"\r\n          label=\"Revised content\"\r\n          default=\"\"\r\n          size=\"50\"\r\n        />\r\n      </fieldset>\r\n    </fields>\r\n  </config>\r\n</install>[/xml]\r\n<p>\r\nТеперь наш плагин готов к применению. Но он пока неизвестен в установке Joomla. Хотя все файлы находятся в нужных папках, для нового плагина отсутствует запись в таблице БД <span style=\"color: blue;\">#__extensions</span>.\r\n</p>\r\n<p>\r\nВоспользуемся средством «Discover (Обнаружение)». В административной части переходим Extensions=>Extensions Manager=>Discover (Расширения=>Менеджер расширений=>Поиск). Щелкаем по иконке «Найти».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/20/my-meta-discover.jpg\" class=\"zoom\" title=\"Обнаружение плагина средством Discover\"><img src=\"/files/blog/20/my-meta-discover-small.jpg\" alt=\"Обнаружение плагина средством Discover\" /></a>\r\n</p>\r\n<p>\r\nОтмечаем найденный плагин (флажок слева) и щелкаем по иконке «Install (Установить)». В итоге получим сообщение об успешной установке плагина.\r\n</p>\r\n<p>\r\nТеперь проверим наш плагин в действии. Идем Extensions=>Plugin Manager (Расширения=>Менеджер плагинов), фильтруем список всех плагинов по слову «meta», активирум наш плагин, щелкнув по иконке «Enabled (Включить)».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/20/my-meta-enabled.jpg\" class=\"zoom\" title=\"Активация плагина My Meta\"><img src=\"/files/blog/20/my-meta-enabled-small.jpg\" alt=\"Активация плагина My Meta\" /></a>\r\n</p>\r\n<p>\r\nДалее переходим к редактированию плагина, вводим любые данные в поле «Revised content»\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/20/my-meta-settings.jpg\" class=\"zoom\" title=\"Настройки плагина My Meta\"><img src=\"/files/blog/20/my-meta-settings-small.jpg\" alt=\"Настройки плагина My Meta\" /></a>\r\n</p>\r\n<p>\r\nТеперь переходим в общедоступную часть сайта, обновляем страницу, смотрим исходный код:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/20/my-meta-html.jpg\" class=\"zoom\" title=\"Результат работы плагина My Meta\"><img src=\"/files/blog/20/my-meta-html-small.jpg\" alt=\"Результат работы плагина My Meta\" /></a>\r\n</p>','2013-06-09 10:48:38',1),(21,17,'Создание плагина Joomla','Joomla плагин plugin JForm форма регистрация','Создание плагина Joomla','CMS, Joomla, Web-разработка','Давайте посмотрим, как создать плагин Joomla, изменяющий форму для регистрации нового пользователя. Плагин будет добавлять два дополнительных флажка: «Я согласен с условиями пользования» и «Мне уже исполнилось 18 лет». Оба флажка должны быть отмечены, чтобы пользователь смог зарегистрироваться.','<p>\r\nДавайте посмотрим, как создать плагин Joomla, изменяющий форму для регистрации нового пользователя. Плагин будет добавлять два дополнительных флажка:\r\n</p>\r\n<ul>\r\n  <li>Я согласен с условиями пользования</li>\r\n  <li>Мне уже исполнилось 18 лет</li>\r\n</ul>\r\n<p>\r\nОба флажка должны быть отмечены, чтобы пользователь смог зарегистрироваться. Кроме того, плагином можно будет управлять из административной части сайта: флажок «Мне уже исполнилось 18 лет» можно будет скрыть или показать.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/21/my-reg-form.jpg\" class=\"zoom\" title=\"Форма регистрации с флажками\"><img src=\"/files/blog/21/my-reg-form-small.jpg\" alt=\"Форма регистрации с флажками\" /></a>\r\n</p>\r\n<p>\r\nИспользуя класс <span style=\"color: blue;\">JForm</span> и событие <span style=\"color: blue;\">onContentPrepareForm</span> мы замещаем форму регистрации в плагине. Кроме того, используем класс <span style=\"color: blue;\">JForm</span> для проверки данных формы.\r\n</p>\r\n<p>\r\nСоздадим три файла и две папки:\r\n</p>\r\n<ul>\r\n  <li>файл index.html</li>\r\n  <li>файл myregistration.xml</li>\r\n  <li>файл myregistration.php</li>\r\n  <li>папка forms</li>\r\n  <li>папка language</li>\r\n</ul>\r\n<p style=\"font-weight: bold;\">\r\nindex.html\r\n</p>\r\n[html]<!DOCTYPE html><title></title>[/html]\r\n<p style=\"font-weight: bold;\">\r\nmyregistration.xml\r\n</p>\r\n[xml]<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<extension version=\"2.5\" type=\"plugin\" group=\"user\" method=\"upgrade\" >\r\n  <name>plg_user_myregistration</name>\r\n  <author>Vasya Pupkin</author>\r\n  <creationDate>June 2013</creationDate>\r\n  <copyright>(C) 2013 Vasya Pupkin. All rights reserved.</copyright>\r\n  <license>GNU General Public License version 2 or later; see LICENSE.txt</license>\r\n  <authorEmail>pupkin.v@mail.ru</authorEmail>\r\n  <authorUrl>www.pupkin.ru</authorUrl>\r\n  <version>2.5.0</version>\r\n  <description>PLG_USER_MYREGISTRATION_XML_DESCRIPTION</description>\r\n\r\n  <files>\r\n    <filename plugin=\"myregistration\">myregistration.php</filename>\r\n    <filename>index.html</filename>\r\n    <folder>forms</folder>\r\n    <folder>language</folder>\r\n  </files>\r\n\r\n  <config>\r\n    <fields name=\"params\">\r\n      <fieldset name=\"basic\" >\r\n        <field name=\"show_age_checkbox\" type=\"radio\" label=\"PLG_USER_MYREGISTRATION_SHOW_AGE\"\r\n          description=\"PLG_USER_MYREGISTRATION_SHOW_AGE_DESC\" default=\"0\">\r\n          <option value=\"0\">JHide</option>\r\n          <option value=\"1\">JShow</option>\r\n        </field>\r\n      </fieldset>\r\n    </fields>\r\n  </config>\r\n</extension>[/xml]\r\n<p style=\"font-weight: bold;\">\r\nmyregistration.php\r\n</p>\r\n[php]<?php\r\n/**\r\n * @copyright    Copyright (C) 2013 Vasya Pupkin. All rights reserved.\r\n * @license      GNU General Public License version 2 or later; see LICENSE.txt\r\n */\r\n\r\ndefined(\'JPATH_BASE\') or die;\r\n\r\nclass plgUserMyRegistration extends JPlugin\r\n{\r\n  public function onContentPrepareForm($form, $data)\r\n  {\r\n    // если это не регистрационная форма, проигнорировать ее\r\n    if ($form->getName() != \'com_users.registration\') {\r\n      return;\r\n    }\r\n\r\n    // загрузить файл языковой поддержки\r\n    $this->loadLanguage();\r\n    \r\n    // загрузить специальный xml-файл в форму регистрации пользователя\r\n    $form->loadFile(dirname(__FILE__).\'/forms/form.xml\');\r\n    if (!$this->params->def(\'show_age_checkbox\', \'1\')) {\r\n      $form->removeField(\'old_enough\');\r\n    }\r\n    // $form->setFieldAttribute(\'old_enough\', \'required\', \'false\');\r\n  }\r\n}[/php]\r\n<p>\r\nУ класса <span style=\"color: blue;\">plgUserMyRegistration</span> имеется единственный метод <span style=\"color: blue;\">onContentPrepareForm()</span>. Событие <span style=\"color: blue;\">onContentPrepareForm</span> инициируется в тот момент, когда объект типа <span style=\"color: blue;\">JForm</span> уже подготовлен. Методу передаются два аргумента: переменная <span style=\"color: blue;\">$form</span>, в которой хранится объект типа <span style=\"color: blue;\">JForm</span> и переменная <span style=\"color: blue;\">$data</span>, в которой хранится объект с данными для заполнения формы.\r\n</p>\r\n<p>\r\nЗатем проверяется, является ли обрабатываемая форма регистрационной. Если она таковой не является, происходит возврат из метода. Далее загружается файл языковой поддержки для перевода текста надписей в форме на избранный язык.\r\n</p>\r\n<p>\r\nВся работа по созданию двух новых полей выполняется в последней строке кода. С этой целью вызывается метод <span style=\"color: blue;\">loadFile()</span> из класса <span style=\"color: blue;\">JForm</span> с файлом <span style=\"color: blue;\">form.xml</span> в качестве аргумента. В итоге поля из файла <span style=\"color: blue;\">form.xml</span> добавляются в форму, которая уже содержит поля из стандартного XML-файла (<span style=\"color: blue;\">components/com_users/models/forms/registration.xml</span>).\r\n</p>\r\n<p>\r\nФайл <span style=\"color: blue;\">form.xml</span> расположен внутри папки <span style=\"color: blue;\">forms</span>.\r\n</p>\r\n<p style=\"font-weight: bold;\">\r\nforms/form.xml\r\n</p>\r\n[xml]<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<form>\r\n  <fieldset name=\"tos\"\r\n    label=\"PLG_USER_MYREGISTRATION_TERMS_OF_SERVICE\"\r\n  >\r\n    <field name=\"tos_agree\" type=\"checkbox\"\r\n      default=\"0\"\r\n      filter=\"bool\"\r\n      label=\"PLG_USER_MYREGISTRATION_AGREE\"\r\n      required=\"true\"\r\n      value=\"1\"\r\n    />\r\n    <field name=\"old_enough\" type=\"checkbox\"\r\n      default=\"0\"\r\n      filter=\"bool\"\r\n      label=\"PLG_USER_MYREGISTRATION_AGE\"\r\n      required=\"true\"\r\n      value=\"1\"\r\n    />\r\n  </fieldset>\r\n</form>[/xml]\r\n<p>\r\nУ элементов <span style=\"color: blue;\">&lt;field&gt;</span> есть атрибуты:\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">default</span>: устанавливаемое по умолчанию значение, если флажок сброшен;</li>\r\n  <li><span style=\"color: blue;\">filter</span>: фильтр, используемы для проверки данных, введенных в это поле;</li>\r\n  <li><span style=\"color: blue;\">label</span>: метка поля</li>\r\n  <li><span style=\"color: blue;\">required</span>: признак, указывающий классу <span style=\"color: blue;\">JForm</span> сделать это поле обязательным для заполнения;</li>\r\n  <li><span style=\"color: blue;\">value</span>: значение, задаваемое в форме при установке флажка.</li>\r\n</ul>\r\n<p>\r\nАтрибуты <span style=\"color: blue;\">label</span> и <span style=\"color: blue;\">value</span> являются стандартными для элементов формы. Атрибут <span style=\"color: blue;\">filter</span> вынуждает класс <span style=\"color: blue;\">JForm</span> отфильтровать поле ввода данных, используя одно из стандартных значений класса <span style=\"color: blue;\">JForm</span>. В нашем случае должны отфильтровываться толко логические значения <span style=\"color: blue;\">true</span> и <span style=\"color: blue;\">false</span>.\r\n</p>\r\n<p>\r\nАтрибут <span style=\"color: blue;\">default</span> определяет значение, передаваемое при условии, что данные не введены (в нашем случае не установлен флажок). В качестве значения по умолчанию указан ноль, который преобразуется в логическое значение <span style=\"color: blue;\">false</span>.\r\n</p>\r\n<p>\r\nАтрибут <span style=\"color: blue;\">required</span> указывает классу <span style=\"color: blue;\">JForm</span> на то, что поле должно быть заполнено обязательно (в нашем случае установлен флажок). Класс <span style=\"color: blue;\">JForm</span> не даст пользователю возможность зарегистрироваться, если он не установол флажок.\r\n</p>\r\n<p>\r\nПапка <span style=\"color: blue;\">language</span> будет содержать две подпапки: <span style=\"color: blue;\">en-GB</span> и <span style=\"color: blue;\">ru-RU</span>. Внутри папки <span style=\"color: blue;\">en-GB</span> два файла:\r\n</p>\r\n<ul>\r\n  <li>en-GB.plg_user_myregistration.ini</li>\r\n  <li>en-GB.plg_user_myregistration.sys.ini</li>\r\n</ul>\r\n<p>\r\nВнутри папки <span style=\"color: blue;\">ru-RU</span> два файла:\r\n</p>\r\n<ul>\r\n  <li>ru-RU.plg_user_myregistration.ini</li>\r\n  <li>ru-RU.plg_user_myregistration.sys.ini</li>\r\n</ul>\r\n<p style=\"font-weight: bold;\">\r\nlanguage/en-GB/en-GB.plg_user_myregistration.ini\r\n</p>\r\n[code]PLG_USER_MYREGISTRATION_TERMS_OF_SERVICE=\"Terms of Service Agreement\"\r\nPLG_USER_MYREGISTRATION_AGREE=\"I agree to the terms\"\r\nPLG_USER_MYREGISTRATION_AGE=\"I am at least 18 years old\"\r\nPLG_USER_MYREGISTRATION_SHOW_AGE=\"Show Age Checkbox\"\r\nPLG_USER_MYREGISTRATION_SHOW_AGE_DESC=\"Show or Hide the Show Age checkbox. If it is shown, it will be required.\"[/code]\r\n<p style=\"font-weight: bold;\">\r\nlanguage/en-GB/en-GB.plg_user_myregistration.sys.ini\r\n</p>\r\n[code]PLG_USER_MYREGISTRATION=\"User - My Registration\"\r\nPLG_USER_MYREGISTRATION_XML_DESCRIPTION=\"Checks that terms and age boxes have been checked\"[/code]\r\n\r\n<p style=\"font-weight: bold;\">\r\nlanguage/ru-RU/ru-RU.plg_user_myregistration.ini\r\n</p>\r\n[code]PLG_USER_MYREGISTRATION_TERMS_OF_SERVICE=\"Условия пользования сайтом\"\r\nPLG_USER_MYREGISTRATION_AGREE=\"Я согласен с условиями пользования\"\r\nPLG_USER_MYREGISTRATION_AGE=\"Мне уже исполнилось 18 лет\"\r\nPLG_USER_MYREGISTRATION_SHOW_AGE=\"Показывать флажок «Мне уже исполнилось 18 лет»\"\r\nPLG_USER_MYREGISTRATION_SHOW_AGE_DESC=\"Позволяет показывать или скрывать флажок «Мне уже исполнилось 18 лет». Если флажок виден, он обязателен для заполнения.\"[/code]\r\n<p style=\"font-weight: bold;\">\r\nlanguage/ru-RU/ru-RU.plg_user_myregistration.sys.ini\r\n</p>\r\n[code]PLG_USER_MYREGISTRATION=\"Пользователи - Моя регистрация\"\r\nPLG_USER_MYREGISTRATION_XML_DESCRIPTION=\"Проверяет, чтобы флажки «Я согласен с условиями пользования» и «Мне уже исполнилось 18 лет» были отмечены\"][/code]\r\n<p>\r\nТеперь нам оставлось только заархивировать все файлы и папки, <a href=\"/blog/psts/19/\">установить наш плагин</a> штатными средствами Joomla, активировать его и проверить результат. \r\n</p>\r\n<p>\r\n<a href=\"/files/blog/21/my-reg-admin.jpg\" class=\"zoom\" title=\"Настройка формы регистрации\"><img src=\"/files/blog/21/my-reg-admin-small.jpg\" alt=\"Настройка формы регистрации\" /></a>\r\n</p>','2013-06-10 13:17:25',1),(24,6,'Скачивание файлов по временным ссылкам','PHP MySQL скачивание файлов временный сылки','PHP-скрипт генерации временных ссылок для скачивания файлов','HTTP, MySQL, PHP, Web-разработка, Файл','Наверное каждому приходилось сталкиваться с временными ссылками при скачивании фильмов, музыки, программ и т.п. Зачем это делается? Да чтобы другие сайты не размещали ссылки на файлы, которые расположены на нашем сайте. Давайте посмотрим, как написать скрипт, который будет генерить временные ссылки.','<p>\r\nНаверное каждому приходилось сталкиваться с временными ссылками при скачивании фильмов, музыки, программ и т.п. Зачем это делается? Да чтобы другие сайты не размещали ссылки на файлы, которые расположены на нашем сайте. Давайте посмотрим, как написать скрипт, который будет генерить временные ссылки.\r\n</p>\r\n<p>\r\nДля хранения информации о файлах и временных ссылках будем использовать БД. Таблица <span style=\"color: blue;\">files</span> хранит информацию о файлах:\r\n</p>\r\n[mysql]CREATE TABLE `files` (\r\n  `id` INT(10) PRIMARY KEY,\r\n  `title` VARCHAR(255) NOT NULL DEFAULT \'\',\r\n  `description` TEXT NOT NULL DEFAULT \'\',\r\n  `filename` VARCHAR(64) NOT NULL DEFAULT \'\',\r\n  `mimetype` VARCHAR(8) NOT NULL DEFAULT \'\'\r\n) ENGINE=INNODB DEFAULT CHARSET=cp1251;[/mysql]\r\n<p>\r\nЗдесь\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">id</span> — уникальный ID файла</li>\r\n  <li><span style=\"color: blue;\">title</span> — название файла, например, «Текстовой редактор NotePad++»</li>\r\n  <li><span style=\"color: blue;\">description</span> — описание файла, например, «Бесплатный редактор текстовых файлов (замена стандартного Блокнота) с поддержкой синтаксиса большого количества языков программирования, ориентирован для работы в операционной системе MS Windows»</li>\r\n  <li><span style=\"color: blue;\">filename</span> — имя файла для скачивания, например, NotePadPP.zip</li>\r\n  <li><span style=\"color: blue;\">mimetype</span> — MIME-тип файла</li>\r\n</ul>\r\n<p>\r\nТаблица <span style=\"color: blue;\">downloads</span> хранит информацию о временных ссылках:\r\n</p>\r\n[mysql]CREATE TABLE `downloads` (\r\n  `file_id` INT(10) NOT NULL DEFAULT 0,\r\n  `uniq_id` VARCHAR(32) NOT NULL DEFAULT \'\',\r\n  `puttime` DATETIME NOT NULL DEFAULT \'0000-00-00 00:00:00\'\r\n) ENGINE=INNODB DEFAULT CHARSET=cp1251;[/mysql]\r\n<p>\r\nЗдесь\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">file_id</span> — уникальный ID файла</li>\r\n  <li><span style=\"color: blue;\">uniq_id</span> — временная ссылка</li>\r\n  <li><span style=\"color: blue;\">puttime</span> — время создания ссылки</li>\r\n</ul>\r\n<p>\r\nФайлы для скачивания расположены в директории <span style=\"color: blue;\">DOCUMENT_ROOT/download/files/</span>. Эта директория должна быть защищена с помощью <span style=\"color: blue;\">.htaccess</span>:\r\n</p>\r\n[code]Order Allow,Deny\r\nDeny from All[/code]\r\n<p>\r\nСкрипт, который будет выполнять всю работу — выводить список файлов, генерить временные ссылки, и отдавать файлы на скачивание — <span style=\"color: blue;\">DOCUMENT_ROOT/download/index.php</span>\r\n</p>\r\n[php]<?php\r\n// Соединяемся с сервером БД\r\nmysql_connect ( \'localhost\', \'root\', \'\' );\r\nmysql_query( \'SET NAMES cp1251\' );\r\nmysql_select_db ( \'downloads\' );\r\n\r\n// удаляем устаревшие записи в таблице БД downloads\r\n$query = \"DELETE FROM `downloads` WHERE `puttime` < (NOW() - INTERVAL 12 HOUR)\";\r\nmysql_query( $query );\r\n\r\n$actions = array( \'fileslist\', \'getlink\', \'download\' );\r\n\r\n$action = \'fileslist\';\r\nif( isset( $_GET[\'action\'] ) and in_array( $_GET[\'action\'], $actions ) ) $action = $_GET[\'action\'];\r\n\r\nswitch( $action ) {\r\n  case \'fileslist\':      // список файлов для скачивания\r\n    fileslist(); break;\r\n  case \'getlink\':        // создаем временную ссылку\r\n    getlink(); break;\r\n  case \'download\':       // отдаем файл на скачивание\r\n    download();  break;\r\n}\r\n\r\nfunction fileslist() {\r\n  echo \'<h3>Файлы для скачивания</h3>\'.\"\\n\";\r\n  $query = \"SELECT `id`, `title`, `description`, `mimetype` FROM `files` WHERE 1 ORDER BY `title`\";\r\n  $res = mysql_query( $query );\r\n\r\n  echo \'<table border=\"1\">\'.\"\\n\";\r\n  echo \'<tr><th>№</th><th>Наименование</th><th>Описание</th><th>Тип</th><th>Скачать</th></tr>\'.\"\\n\";\r\n  $i = 1;\r\n  while( $file = mysql_fetch_array( $res ) ) {\r\n    echo \'<tr>\';\r\n    echo \'<td>\'.$i.\'</td>\';\r\n    echo \'<td>\'.$file[\'title\'].\'</td>\';\r\n    echo \'<td>\'.$file[\'description\'].\'</td>\';\r\n    echo \'<td>\'.$file[\'mimetype\'].\'</td>\';\r\n    echo \'<td><a href=\"\'.$_SERVER[\'PHP_SELF\'].\'?action=getlink&id=\'.$file[\'id\'].\'\">Скачать</a></td>\';\r\n    echo \'</tr>\'.\"\\n\";\r\n    $i++;\r\n  }\r\n  echo \'</table>\'.\"\\n\";\r\n}\r\n\r\nfunction getlink() {\r\n  // если не передан уникальный ID файла - значит пользователь попал сюда по ошибке\r\n  if( !isset( $_GET[\'id\'] ) ) {\r\n    header( \'Location: \'.$_SERVER[\'PHP_SELF\'].\'?action=fileslist\' );\r\n    die();\r\n  }\r\n  $id = (int)$_GET[\'id\'];\r\n\r\n  // прежде чем генерить временную ссылку, проверяем, что есть такая запись в таблице БД\r\n  $query = \"SELECT 1 FROM `files` WHERE `id`=\".$id;\r\n  $res = mysql_query( $query );\r\n  if( mysql_num_rows( $res ) == 0 ) {\r\n    header ( \'HTTP/1.1 404 Not Found\' );\r\n    die(); \r\n  }\r\n \r\n  $uniq_id = md5( uniqid(rand(), 1) );\r\n  $query = \"INSERT INTO `downloads` (`file_id`, `uniq_id`, `puttime`)\r\n            VALUES (\".$id.\", \'\".$uniq_id.\"\', NOW())\";\r\n  mysql_query( $query );\r\n \r\n  $link = $_SERVER[\'PHP_SELF\'].\'?action=download&id=\'.$id.\'&code=\'.$uniq_id;\r\n  echo \'<p>Для загрузки файла перейдите по <a href=\"\'.$link.\'\">этой ссылке</a>. \';\r\n  echo \'Ссылка действительна в течение 12 часов.</p>\'.\"\\n\";\r\n}\r\n\r\nfunction download() {\r\n  // если не передан уникальный ID файла - значит пользователь попал сюда по ошибке\r\n  if( !isset( $_GET[\'id\'] ) ) {\r\n    header( \'Location: \'.$_SERVER[\'PHP_SELF\'].\'?action=fileslist\' );\r\n    die();\r\n  }\r\n  $id = (int)$_GET[\'id\'];\r\n \r\n  if( !isset( $_GET[\'code\'] ) )  {\r\n    header( \'Location: \'.$_SERVER[\'PHP_SELF\'].\'?action=fileslist\' );\r\n    die();\r\n  }\r\n \r\n  if( !preg_match( \'#[a-f0-9]{32}#\', $_GET[\'code\'] ) )  {\r\n    header ( \'HTTP/1.1 404 Not Found\' );\r\n    die();\r\n  }\r\n \r\n  $query = \"SELECT 1 FROM `downloads` WHERE `file_id`=\".$id.\"\r\n            AND `uniq_id`=\'\".$_GET[\'code\'].\"\' AND `puttime` > (NOW() - INTERVAL 12 HOUR)\";\r\n  $res = mysql_query( $query );\r\n  if( mysql_num_rows( $res ) == 0 ) {\r\n    header ( \'HTTP/1.1 404 Not Found\' );\r\n    die(); \r\n  }\r\n \r\n  $query = \"SELECT `filename`, `mimetype` FROM `files` WHERE `id`=\".$id;\r\n  $res = mysql_query( $query );\r\n  if( mysql_num_rows( $res ) == 0 ) {\r\n    header ( \'HTTP/1.1 404 Not Found\' );\r\n    die(); \r\n  }\r\n  list( $filename, $mimetype ) = mysql_fetch_row( $res );\r\n \r\n  // если файла нет\r\n  if( !file_exists( \'./files/\'.$filename ) ) {\r\n    header ( \'HTTP/1.1 404 Not Found\' );\r\n    die();\r\n  }\r\n \r\n  // получаем размер файла\r\n  $fsize = filesize( \'./files/\'.$filename );\r\n  // дата модификации файла для кеширования\r\n  $ftime = date( \'D, d M Y H:i:s T\', filemtime( \'./files/\'.$filename ) );\r\n  // смещение от начала файла\r\n  $range = 0;\r\n \r\n  // пробуем открыть\r\n  $handle = @fopen( \'./files/\'.$filename, \'rb\' );\r\n\r\n  // если не удалось\r\n  if( !$handle ){\r\n    header ( \'HTTP/1.1 404 Not Found\' );\r\n    die();\r\n  }\r\n \r\n  // если запрашивающий агент поддерживает докачку\r\n  if( $_SERVER[\'HTTP_RANGE\'] ) {\r\n    $range = $_SERVER[\'HTTP_RANGE\'];\r\n    $range = str_replace( \'bytes=\', \'\', $range );\r\n    $range = str_replace( \'-\', \'\', $range );\r\n    // смещаемся по файлу на нужное смещение\r\n    if ( $range ) fseek( $handle, $range );\r\n  }\r\n \r\n  // если есть смещение\r\n  if( $range ) {\r\n    header( \'HTTP/1.1 206 Partial Content\' );\r\n  } else {\r\n    header( \'HTTP/1.1 200 OK\' );\r\n  }\r\n \r\n  header( \'Content-Disposition: attachment; filename=\"\'.$filename.\'\"\' );\r\n  header( \'Last-Modified: \'.$ftime );\r\n  header( \'Content-Length: \'.($fsize-$range) );\r\n  header( \'Accept-Ranges: bytes\' );\r\n  header( \'Content-Range: bytes \'.$range.\'-\'.($fsize - 1).\'/\'.$fsize );\r\n\r\n  switch( $mimetype ) {\r\n    case \'pdf\' : $ctype = \'application/pdf\'; break;\r\n    case \'zip\' : $ctype = \'application/zip\'; break;\r\n    case \'doc\' : $ctype = \'application/msword\'; break;\r\n    case \'xls\' : $ctype = \'application/vnd.ms-excel\'; break;\r\n    case \'gif\' : $ctype = \'image/gif\'; break;\r\n    case \'png\' : $ctype = \'image/png\'; break;\r\n    case \'jpeg\':\r\n    case \'jpg\' : $ctype = \'image/jpg\'; break;\r\n    case \'mp3\' : $ctype = \'audio/mpeg\'; break;\r\n    case \'wav\' : $ctype = \'audio/x-wav\'; break;\r\n    case \'mpeg\':\r\n    case \'mpg\' :\r\n    case \'mpe\' : $ctype = \'video/mpeg\'; break;\r\n    case \'mov\' : $ctype = \'video/quicktime\'; break;\r\n    case \'avi\' : $ctype = \'video/x-msvideo\'; break;\r\n    default    : $ctype = \'application/octet-stream\';\r\n  }\r\n \r\n  header( \'Content-Type: \'.$ctype );\r\n  readfile( \'./files/\'.$filename );\r\n  fclose( $handle );\r\n}\r\n?>[/php]','2009-06-02 06:33:28',1),(26,6,'Как отдать пользователю файл скриптом','PHP скачивание файлов докачка','Как отдать пользователю файл скриптом','$_SERVER, 206, Accept-Ranges, Content, Content-Range, HTTP, HTTP_RANGE, PHP, Partial, Range, Web-разработка, bytes, Файл','Зачастую бывает необходимость в том, чтобы сайт умел отдавать файлы не просто на скачивание, а поддерживать возможность скачивания в несколько потоков и докачки файла в случае обрыва соединения. Для начала попробуем просто отдать файл браузеру.','<p>\r\nЗачастую бывает необходимость в том, чтобы сайт умел отдавать файлы не просто на скачивание, а поддерживать возможность скачивания в несколько потоков и докачки файла в случае обрыва соединения.\r\n</p>\r\n<p>\r\nДля начала попробуем просто отдать файл браузеру:\r\n</p>\r\n\r\n[php]<?php\r\nheader(\'Content-Type: application/octet-stream\');\r\nheader(\'Content-Disposition: attachment; filename=\"\'.basename($filename).\'\"\');\r\nreadfile($filename);\r\n?>[/php]\r\n\r\n<p>\r\nВ этом примере мы сформировали два заголовка для браузера, первый из которых сообщает ему о типе содержимого (в данном случае — поток каких-то байтов), а второй заставляет его выдать нам окно с именем файла для его сохранения на локальном диске.\r\n</p>\r\n<h2>С поддержкой докачки</h2>\r\n<p>\r\nЗаголовок <span style=\"color: blue;\">Accept-Ranges: bytes</span>, отправленный сервером, сообщает клиенту о том, что он может запрашивать данные с сервера фрагментами, указывая их смещение в байтах.\r\n</p>\r\n<p>\r\nЗная эту возможность, браузер может передать серверу смещение в байтах, с которого необходимо начать передачу файла. Для этого браузер посылает заголовок <span style=\"color: blue;\">Range</span>:\r\n</p>\r\n[code]Range: bytes=500-[/code]\r\n<p>\r\nгде <span style=\"color: blue;\">500</span> — смещение в байтах от начала файла.\r\n</p>\r\n<p>\r\nСервер в свою очередь устанавливает переменную окружения <span style=\"color: blue;\">HTTP_RANGE</span> и должен отправить заголовок\r\n</p>\r\n[code]HTTP/1.1 206 Partial Content[/code]\r\n<p>\r\nкоторый дает клиенту понять, что отдается часть контента. Далее сервер должен отдать клиенту ту часть контента, которую тот запрашивал с соответствующими заголовками:\r\n</p>\r\n[code]Content-Type: application/octet-stream\r\nContent-Disposition: attachment; filename=\"имя_файла\"\r\nLast-Modified: время_модификации_файла\r\nAccept-Ranges: bytes\r\nContent-Length: длина_отдаваемой_части\r\nContent-Range: bytes от-до/размер[/code]\r\n<p>\r\nПоясню последний заголовок на примере: имеем файл размером 10000 байт, отдаем все, кроме первых 500 байт. Тогда заголовок будет выглядеть так:\r\n</p>\r\n\r\n[code]Content-Range: bytes 500-9999/10000[/code]\r\n\r\n[php]<?php\r\n// если файла нет\r\nif (!file_exists($filename)) {\r\n  header (\'HTTP/1.0 404 Not Found\');\r\n  exit;\r\n}\r\n \r\n// получим размер файла\r\n$fsize = filesize($filename);\r\n// дата модификации файла для кеширования\r\n$ftime = date(\"D, d M Y H:i:s T\", filemtime($filename));\r\n// смещение от начала файла\r\n$range = 0;\r\n \r\n// пробуем открыть\r\n$handle = @fopen($filename, \"rb\");\r\n\r\n// если не удалось\r\nif (!$handle){\r\n  header (\'HTTP/1.0 403 Forbidden\');\r\n  exit;\r\n}\r\n \r\n// если запрашивающий агент поддерживает докачку\r\nif ( isset($_SERVER[\'HTTP_RANGE\']) ) {\r\n  $range = $_SERVER[\'HTTP_RANGE\'];\r\n  $range = str_replace(\'bytes=\', \'\', $range);\r\n  $range = str_replace(\'-\', \'\', $range);\r\n  // смещаемся по файлу на нужное смещение\r\n  if ($range) fseek($handle, $range);\r\n}\r\n \r\n// если есть смещение\r\nif ($range) {\r\n  header(\'HTTP/1.1 206 Partial Content\');\r\n} else {\r\n  header(\'HTTP/1.1 200 OK\');\r\n}\r\n \r\nheader(\'Content-Disposition: attachment; filename=\"\'.basename($filename).\'\"\');\r\nheader(\'Content-Type: application/octet-stream\');\r\nheader(\'Last-Modified: \'.$ftime);\r\nheader(\'Accept-Ranges: bytes\');\r\nheader(\'Content-Length: \'.($fsize - $range));\r\nheader(\'Content-Range: bytes \'.$range.\'-\'.($fsize - 1).\'/\'.$fsize);\r\n \r\nfpassthru($handle);\r\n \r\nfclose($handle);\r\n?>[/php]\r\n\r\n<h2>В несколько потоков</h2>\r\n<p>\r\nЕсли клиент скачивает в несколько потоков, он будет отправлять нам заголовки вида (для файла длиной 10000 байт):\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">Range: bytes=0-499</span> — первые 500 байт</li>\r\n  <li><span style=\"color: blue;\">Range: bytes=500-999</span> — вторые 500 байт</li>\r\n  <li><span style=\"color: blue;\">Range: bytes=-500</span> или <span style=\"color: blue;\">Range: bytes=9500-</span> — последние 500 байт</li>\r\n  <li><span style=\"color: blue;\">Range: bytes=500-</span> или <span style=\"color: blue;\">Range: bytes=-9500</span> — все, кроме первых 500 байт</li>\r\n  <li><span style=\"color: blue;\">Range: bytes=0-0</span> — только первый байт</li>\r\n</ul>\r\n<p>\r\nа мы должны отвечать так\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">Content-Range: bytes 0-499/10000</span> — отдаем первые 500 байт</li>\r\n  <li><span style=\"color: blue;\">Content-Range: bytes 500-999/10000</span> — отдаем вторые 500 байт</li>\r\n  <li><span style=\"color: blue;\">Content-Range: bytes 9500-9999/10000</span> — отдаем последние 500 байт</li>\r\n  <li><span style=\"color: blue;\">Content-Range: bytes 500-9999/10000</span> — отдаем все, кроме первых 500 байт</li>\r\n  <li><span style=\"color: blue;\">Content-Range: bytes 0-0/10000</span> — отдаем только первый байт</li>\r\n</ul>\r\n\r\n[php]<?php\r\n// если файла нет\r\nif (!file_exists($filename)) {\r\n  header (\'HTTP/1.0 404 Not Found\');\r\n  exit;\r\n}\r\n \r\n// получим размер файла\r\n$fsize = filesize($filename);\r\n// дата модификации файла для кеширования\r\n$ftime = date(\"D, d M Y H:i:s T\", filemtime($filename));\r\n \r\n// пробуем открыть\r\n$handle = @fopen($filename, \"rb\");\r\n\r\n// если не удалось\r\nif (!$handle){\r\n  header (\'HTTP/1.0 403 Forbidden\');\r\n  exit;\r\n}\r\n\r\n// если запрашивающий агент поддерживает докачку\r\nif ( isset($_SERVER[\'HTTP_RANGE\']) ) {\r\n  $range = $_SERVER[\'HTTP_RANGE\']; \r\n  $range = str_replace( \'bytes=\', \'\', $range );   \r\n  $range = explode( \'-\', $range );\r\n  if ( $range[0]==\'0\' && $range[1]==\'0\' ) { // если bytes=0-0\r\n    $start = $stop = 0;\r\n  } elseif ( !strlen( $range[0] ) ) { // если bytes=-500\r\n    $start = $fsize - (int)$range[1]; \r\n    $stop = $fsize - 1; \r\n  } else { // если bytes=500-999 или bytes=500-\r\n    $stop = (int)$range[1]; \r\n    if ( !$stop ) $stop = $fsize - 1; // bytes=500-\r\n    $start = (int)$range[0]; \r\n    if ( $start ) fseek( $fd, $start ); \r\n  } \r\n  $length = $stop - $start + 1; \r\n  header(\'HTTP/1.1 206 Partial Content\');\r\n  header(\'Content-Disposition: attachment; filename=\"\'.basename($filename).\'\"\');\r\n  header(\'Content-Type: application/octet-stream\');\r\n  header(\'Last-Modified: \'.$ftime);\r\n  header(\'Accept-Ranges: bytes\');\r\n  header(\'Content-Length: \' . $length); \r\n  header(\'Content-Range: bytes \'.$start.\'-\'.$stop.\'/\'.$fsize);\r\n  echo fread($handle, $length);\r\n} else { // запрашивающий агент не поддерживает докачку\r\n  header(\'HTTP/1.1 200 OK\' );\r\n  header(\'Content-Disposition: attachment; filename=\"\'.basename($filename).\'\"\');\r\n  header(\'Content-Type: application/octet-stream\');\r\n  header(\'Last-Modified: \'.$ftime);\r\n  header(\'Accept-Ranges: bytes\');\r\n  header(\'Content-Length: \'.$fsize); \r\n  fpassthru($handle);\r\n}\r\n\r\nfclose($handle);\r\n?>[/php]\r\n<p>\r\n<strong>P.S.</strong> Этот код неполон, поскольку не обрабатывает мультидиапазонные запросы, когда клиент требует от сервера сразу несколько фрагментов:\r\n</p>\r\n[code]Range: bytes=0-499,500-999,1000-1499[/code]','2008-07-01 08:28:23',1),(27,6,'Добавление и удаление строк таблицы БД','PHP MySQL добавление редактирование удаление  записи таблица БД','Добавление, редактирование и удаление строк таблицы базы данных','MySQL, PHP, Web-разработка','Большинство современных сайтов работают на какой-нибудь CMS. Вся информация, как правило, хранится в базе данных. Когда мы через админку добавляем, удаляем, редактируем новости или статьи — фактически, мы добавляем, удаляем, редактируем записи в таблице БД. Посмотрим, как мог бы выглядеть такой скрипт.','<p>\r\nБольшинство современных сайтов работают на какой-нибудь CMS. Вся информация, как правило, хранится в базе данных. Когда мы через админку добавляем, удаляем, редактируем новости или статьи — фактически, мы добавляем, удаляем, редактируем записи в таблице БД. Посмотрим, как мог бы выглядеть такой скрипт.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/27/edit-items.jpg\" alt=\"Форма для редактирования записей\" />\r\n</p>\r\n[php]<?php\r\n$actions = array(\'showlist\', \'addform\', \'add\', \'editform\', \'update\', \'delete\');\r\n$action = \'showlist\';\r\nif ( isset($_GET[\'action\']) and in_array($_GET[\'action\'], $actions) ) $action= $_GET[\'action\'];\r\n\r\nswitch ( $action ) \r\n{ \r\n  case \'showlist\':    // Список всех записей в таблице БД\r\n    show_list(); break; \r\n  case \'addform\':     // Форма для добавления новой записи \r\n    get_add_item_form(); break; \r\n  case \'add\':         // Добавить новую запись в таблицу БД\r\n    add_item(); break;\r\n  case \'editform\':    // Форма для редактирования записи \r\n    get_edit_item_form(); break; \r\n  case \'update\':      // Обновить запись в таблице БД\r\n    update_item(); break; \r\n  case \'delete\':      // Удалить запись в таблице БД\r\n    delete_item(); break;\r\n}\r\n\r\n// Функция выводит список всех записей в таблице БД\r\nfunction show_list() \r\n{ \r\n  $query = \"SELECT `id`, `title`, `description` FROM `items` WHERE 1\"; \r\n  $res = mysql_query( $query ); \r\n  echo \'<h2>Список</h2>\'; \r\n  echo \'<table border=\"1\" cellpadding=\"2\" cellspacing=\"0\">\'; \r\n  echo \'<tr><th>ID</th><th>Наименование</th><th>Описание</th><th>Ред.</th><th>Удл.</th></tr>\'; \r\n  while ( $item = mysql_fetch_array( $res ) ) \r\n  { \r\n    echo \'<tr>\'; \r\n    echo \'<td>\'.$item[\'id\'].\'</td>\'; \r\n    echo \'<td>\'.$item[\'title\'].\'</td>\'; \r\n    echo \'<td>\'.$item[\'description\'].\'</td>\'; \r\n    echo \'<td><a href=\"\'.$_SERVER[\'PHP_SELF\'].\'?action=editform&id=\'.$item[\'id\'].\'\">Ред.</a></td>\'; \r\n    echo \'<td><a href=\"\'.$_SERVER[\'PHP_SELF\'].\'?action=delete&id=\'.$item[\'id\'].\'\">Удл.</a></td>\'; \r\n    echo \'</tr>\'; \r\n  } \r\n  echo \'</table>\';\r\n  echo \'<p><a href=\"\'.$_SERVER[\'PHP_SELF\'].\'?action=addform\">Добавить</a></p>\';  \r\n} \r\n\r\n// Функция формирует форму для добавления записи в таблице БД \r\nfunction get_add_item_form() \r\n{ \r\n  echo \'<h2>Добавить</h2>\';  \r\n  echo \'<form name=\"addform\" action=\"\'.$_SERVER[\'PHP_SELF\'].\'?action=add\" method=\"post\">\'; \r\n  echo \'<table>\'; \r\n  echo \'<tr>\'; \r\n  echo \'<td>Наименование</td>\'; \r\n  echo \'<td><input type=\"text\" name=\"title\" value=\"\" /></td>\'; \r\n  echo \'</tr>\'; \r\n  echo \'<tr>\'; \r\n  echo \'<td>Описание</td>\'; \r\n  echo \'<td><textarea name=\"description\"></textarea></td>\'; \r\n  echo \'</tr>\'; \r\n  echo \'<tr>\'; \r\n  echo \'<td></td>\'; \r\n  echo \'<td><input type=\"submit\" value=\"Сохранить\"></td>\'; \r\n  echo \'</tr>\'; \r\n  echo \'</table>\'; \r\n  echo \'</form>\'; \r\n}\r\n\r\n// Функция добавляет новую запись в таблицу БД  \r\nfunction add_item() \r\n{ \r\n  $title = mysql_escape_string( $_POST[\'title\'] ); \r\n  $description = mysql_escape_string( $_POST[\'description\'] ); \r\n  $query = \"INSERT INTO items (title, description) VALUES (\'\".$title.\"\', \'\".$description.\"\');\"; \r\n  mysql_query ( $query ); \r\n  header( \'Location: \'.$_SERVER[\'PHP_SELF\'] );\r\n  die();\r\n}\r\n\r\n// Функция формирует форму для редактирования записи в таблице БД \r\nfunction get_edit_item_form() \r\n{ \r\n  echo \'<h2>Редактировать</h2>\'; \r\n  $query = \"SELECT `title`, `description` FROM items WHERE `id`=\".$_GET[\'id\']; \r\n  $res = mysql_query( $query ); \r\n  $item = mysql_fetch_array( $res ); \r\n  echo \'<form name=\"editform\" action=\"\'.$_SERVER[\'PHP_SELF\'].\'?action=update&id=\'.$_GET[\'id\'].\'\" method=\"POST\">\'; \r\n  echo \'<table>\'; \r\n  echo \'<tr>\'; \r\n  echo \'<td>Наименование</td>\'; \r\n  echo \'<td><input type=\"text\" name=\"title\" value=\"\'.htmlspecialchars($item[\'title\']).\'\"></td>\'; \r\n  echo \'</tr>\'; \r\n  echo \'<tr>\'; \r\n  echo \'<td>Описание</td>\'; \r\n  echo \'<td><textarea name=\"description\">\'.htmlspecialchars($item[\'description\']).\'</textarea></td>\'; \r\n  echo \'</tr>\'; \r\n  echo \'<tr>\'; \r\n  echo \'<td><input type=\"submit\" value=\"Сохранить\"></td>\'; \r\n  echo \'<td><button type=\"button\" onClick=\"history.back();\">Отменить</button></td>\'; \r\n  echo \'</tr>\'; \r\n  echo \'</table>\'; \r\n  echo \'</form>\'; \r\n} \r\n\r\n// Функция обновляет запись в таблице БД  \r\nfunction update_item() \r\n{ \r\n  $title = mysql_escape_string( $_POST[\'title\'] ); \r\n  $description = mysql_escape_string( $_POST[\'description\'] ); \r\n  $query = \"UPDATE `items` SET `title`=\'\".$title.\"\', `description`=\'\".$description.\"\' \r\n            WHERE `id`=\".$_GET[\'id\']; \r\n  mysql_query ( $query ); \r\n  header( \'Location: \'.$_SERVER[\'PHP_SELF\'] );\r\n  die();\r\n} \r\n\r\n// Функция удаляет запись в таблице БД \r\nfunction delete_item() \r\n{ \r\n  $query = \"DELETE FROM `items` WHERE `id`=\".$_GET[\'id\']; \r\n  mysql_query ( $query ); \r\n  header( \'Location: \'.$_SERVER[\'PHP_SELF\'] );\r\n  die();\r\n} \r\n?>[/php]\r\n<h2>Выбор и удаление нескольких записей</h2>\r\n<p>\r\nПри создании админки часто встает задача выбора или удаления сразу нескольких записей из базы данных. Для этого обычно создается HTML-форма с набором флажков:\r\n</p>\r\n[html]<input type=\"checkbox\" name=\"item[]\" value=\"15\" />\r\n<input type=\"checkbox\" name=\"item[]\" value=\"17\" />\r\n<input type=\"checkbox\" name=\"item[]\" value=\"22\" />\r\n<input type=\"checkbox\" name=\"item[]\" value=\"25\" />\r\n<input type=\"checkbox\" name=\"item[]\" value=\"32\" />[/html]\r\n<p>\r\nСкрипт, формирующий список элементов <span style=\"color: blue;\">checkbox</span> формы, и удаляющий выбранные записи может выглядеть так:\r\n</p>\r\n[php]<?php\r\necho \'<h2>Список</h2>\';\r\necho \'<form action=\"\'.$_SERVER[\'PHP_SELF\'].\'\" method=\"POST\">\';\r\n$query = \"SELECT `id`, `title` FROM `items` WHERE 1\"; \r\n$res = mysql_query( $query ); \r\necho \'<table border=\"1\">\';; \r\necho \'<tr><th>ID</th><th>Наименование</th><th>Удл.</th></tr>\'; \r\nwhile ( $item = mysql_fetch_array( $res ) ) \r\n{ \r\n  echo \'<tr>\'; \r\n  echo \'<td>\'.$item[\'id\'].\'</td>\'; \r\n  echo \'<td>\'.$item[\'title\'].\'</td>\'; \r\n  echo \'<td><input type=\"checkbox\" name=\"item[]\" value=\"\'.$item[\'id\'].\'\" /></td>\';  \r\n  echo \'</tr>\'; \r\n} \r\necho \'</table>\';\r\necho \'<input type=\"submit\" name=\"submitForm\" value=\"Удалить отмеченные\" />\';\r\necho \'</form>\';\r\n\r\nif ( isset ( $_POST[\'item\'] ) )\r\n{\r\n  $ids = implode( \',\', $_POST[\'item\'] );\r\n  $query = \'DELETE FROM `items` WHERE `id` IN (\'.$ids.\')\';\r\n  mysql_query( $query );\r\n  header( \'Location: \'.$_SERVER[\'PHP_SELF\'] );\r\n}\r\n?>[/php]\r\n<p>\r\n<img src=\"/files/blog/27/delete-items.jpg\" alt=\"Форма для удаления нескольких записей\" />\r\n</p>\r\n<p>\r\nМассив <span style=\"color: blue;\">$_POST[\'item\']</span> содержит <span style=\"color: blue;\">ID</span> всех отмеченных checkbox-ов (не отмеченные на сервер не передаются). Запрос к БД на удаление выглядит так:\r\n</p>\r\n[mysql]DELETE FROM `items` WHERE `id` IN (6,9,11,12);[/mysql]\r\n<p>\r\nЕсли стоит задача не удаления записей, а их выборки, то вместо оператора <span style=\"color: blue;\">DELETE</span> следует использовать оператор <span style=\"color: blue;\">SELECT</span>.\r\n</p>','2008-06-30 05:56:01',1),(29,4,'Верстка страниц. Две и три колонки','верстка html css две три колонки плавающие элементы','Верстка страниц. Две и три колонки. HTML и CSS.','','Свойство float принимает одно из трех значений: left, right или none. Это свойство, примененное к тегу div с содержимым, позволяет создать боковое меню. Здесь блок #left перемещен к левому краю. У него есть фиксированная ширина, однако у главного содержимого #content ее нет, что делает этот дизайн резиновым. Главный раздел страницы просто расширяется, заполняя окно браузера.','<h2>Две колонки</h2>\r\n<h3>Две колонки, резиновый</h3>\r\n<p>\r\nСвойство float принимает одно из трех значений: left, right или none. Это свойство, примененное к тегу &lt;div id=\"sidebar\"&gt; с содержимым, позволяет создать боковое меню:\r\n</p>\r\n[css]#sidebar {\r\n  float: left;\r\n  width: 200px;\r\n}\r\n#content {\r\n  margin-left: 200px;\r\n}[/css]\r\n<p>\r\nНа рисунке ниже показаны эти два css-свойства в действии:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/29/1.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nЗдесь блок #left перемещен к левому краю. У него есть фиксированная ширина, однако у главного содержимого #content ее нет, что делает этот дизайн резиновым. Главный раздел страницы просто расширяется, заполняя окно браузера.\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Шаблон, две колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"header\"></div>\r\n<div id=\"left\">Левая колонка</div>\r\n<div id=\"content\">Основной контент</div>\r\n<div id=\"footer\"></div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  background: #ddd;\r\n}\r\n#content {\r\n  margin-left: 250px;\r\n  overflow: hidden;\r\n  background: #eee;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<p>\r\n<a href=\"/files/blog/29/2.png\" class=\"zoom\"><img src=\"/files/blog/29/2-small.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nДавайте немного улучшим шаблон и добавим отступы:\r\n</p>\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  padding: 10px;\r\n  background: #ddd;\r\n}\r\n#content {\r\n  margin-left: 270px;\r\n  padding: 10px;\r\n  background: #eee;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<p>\r\n<a href=\"/files/blog/29/3.png\" class=\"zoom\"><img src=\"/files/blog/29/3-small.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЭлемент #left по высоте меньше элемента #content, но мы можем это исправить, добавив в разметку еще один элемент &lt;div id=\"bg-left\"&gt; и установив для него background-image шириной 270px, высотой 1px и цветом #ddd:\r\n</p>\r\n[html]<body>\r\n<div id=\"header\"></div>\r\n<div id=\"bg-left\">\r\n  <div id=\"left\">Левая колонка</div>\r\n  <div id=\"content\">Основной контент</div>\r\n</div>\r\n<div id=\"footer\"></div>\r\n</body>[/html]\r\n[css]#bg-left {\r\n  background: url(images/bg-left.png) left top repeat-y;\r\n}[/css]\r\n<p>\r\n<a href=\"/files/blog/29/4.png\" class=\"zoom\"><img src=\"/files/blog/29/4-small.png\" alt=\"\" /></a>\r\n</p>\r\n<h3>Две колонки, фиксированный</h3>\r\n<p>\r\nОграничим шаблон по ширине и зададим выравнивание по центру, для этого добавим еще один элемент &lt;div id=\"wrapper\"&gt;:\r\n</p>\r\n[html]<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"bg-left\">\r\n    <div id=\"left\">Левая колонка</div>\r\n    <div id=\"content\">Основной контент</div>\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n</div>\r\n</body>[/html]\r\n[css]#wrapper {\r\n  width: 1000px;\r\n  margin: 0 auto;\r\n}[/css]\r\n<p>\r\n<a href=\"/files/blog/29/5.png\" class=\"zoom\"><img src=\"/files/blog/29/5-small.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nСовместим достоинства фиксированной и резиновой верстки:\r\n</p>\r\n[css]#wrapper {\r\n  min-width: 1000px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}[/css]\r\n<p>\r\nАналогично создаем шаблон с двумя колонками, где блок #right перемещен к правому краю:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/29/6.png\" alt=\"\" />\r\n</p>\r\n<h2>Три колонки</h2>\r\n<h3>Три колонки, фиксированный</h3>\r\n<p>\r\nТеперь создадим шаблон с тремя колонками:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/29/7.png\" alt=\"\" />\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Шаблон, три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"bg-left\">\r\n  <div id=\"bg-right\">\r\n    <div id=\"left\">Левая колонка</div>\r\n    <div id=\"right\">Правая колонка</div>\r\n    <div id=\"content\">Основной контент</div>\r\n  </div>\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  width: 1000px;\r\n  margin: 0 auto;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  padding: 10px;\r\n  background: #ddd;\r\n}\r\n#bg-left {\r\n  background: url(images/bg-left.png) left top repeat-y;\r\n}\r\n#right {\r\n  float: right;\r\n  width: 200px;\r\n  padding: 10px;\r\n  background: #ccc;\r\n}\r\n#bg-right {\r\n  background: url(images/bg-right.png) right top repeat-y;\r\n}\r\n#content {\r\n  margin-left: 270px;\r\n  margin-right: 220px;\r\n  padding: 10px;\r\n  background: #eee;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<p>\r\n<a href=\"/files/blog/29/8.png\" class=\"zoom\"><img src=\"/files/blog/29/8-small.png\" alt=\"\" /></a>\r\n</p>\r\n<h3>Три колонки, фиксированный, контент сверху</h3>\r\n<p>\r\nС точки зрения SEO основной контент должен быть ближе к началу страницы, чем вспомогательный контент боковых колонок. Давайте посмотрим, как это можно сделать:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/29/9.png\" alt=\"\" />\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Шаблон, три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"bg-left\">\r\n  <div id=\"bg-right\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"wrap\">\r\n    <div id=\"content\">\r\n      <h1>Lorem ipsum</h1>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n    </div>\r\n    <div id=\"left\">\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </div>\r\n  </div>\r\n  <div id=\"right\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n  </div>\r\n  </div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  margin: 0 auto;\r\n  width: 1000px;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#wrap {\r\n  float: left;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  background: #ddd;\r\n}\r\n#content {\r\n  float: right;\r\n  width: 550px;\r\n  background: #eee;\r\n}\r\n#right {\r\n  float: right;\r\n  /*\r\n  вместо float: right;\r\n  можно использовать\r\n  margin-left: 800px;\r\n  */\r\n  width: 200px;\r\n  background: #ccc;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\nДобавим отступы и выравнивание колонок по высоте:\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Шаблон, три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"bg-left\">\r\n  <div id=\"bg-right\">\r\n  <div id=\"wrap\">\r\n    <div id=\"content\">\r\n      <h1>Lorem ipsum</h1>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n    </div>\r\n    <div id=\"left\">\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </div>\r\n  </div>\r\n  <div id=\"right\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n  </div>\r\n  </div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  margin: 0 auto;\r\n  width: 1000px;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#wrap {\r\n  float: left;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  padding: 10px;\r\n  background: #ddd;\r\n}\r\n#bg-left {\r\n  background: url(images/bg-left.png) left top repeat-y;\r\n}\r\n#content {\r\n  float: right;\r\n  width: 490px;\r\n  padding: 10px;\r\n  background: #eee;\r\n}\r\n#right {\r\n  float: right;\r\n  /*\r\n  вместо float: right;\r\n  можно использовать\r\n  margin-left: 780px;\r\n  */\r\n  width: 200px;\r\n  padding: 10px;\r\n  background: #ccc;\r\n}\r\n#bg-right {\r\n  background: url(images/bg-right.png) right top repeat-y;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<p>\r\n<h3>Три колонки, фиксированный, контент сверху</h3>\r\nЕще один способ разместить основной контент перед контентом боковых колонок — использовать отрицательный margin. В этом случае элементы #content, #left и #right можно разместить в любом порядке в html-коде и потом расположить их произвольно на экране. Использование отрицательного поля позволяет «втянуть» элемент, описываемый в коде позже, над элементом, предшествующим ему.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/29/10.png\" alt=\"\" />\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Шаблон, три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"content\">\r\n    <h1>Lorem ipsum</h1>\r\n    <p>\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </p>\r\n    <p>\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </p>\r\n  </div>\r\n  <div id=\"left\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n  </div>\r\n  <div id=\"right\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  margin: 0 auto;\r\n  width: 1000px;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#content {\r\n  width: 550px;\r\n  float: left;\r\n  margin-left: 250px;\r\n  background: #eee;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  margin-left: -800px;\r\n  background: #ddd;\r\n}\r\n#right {\r\n  float: right;\r\n  /*\r\n  вместо float: right;\r\n  можно использовать\r\n  margin-left: 800px;\r\n  */\r\n  width: 200px;\r\n  background: #ccc;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<p>\r\nКак видите, левое поле элемента &lt;div id=\"content\"&gt; должно быть равно ширине левого бокового меню. Если для левого бокового меню мы хотим добавить отступы 10px, то margin-left будет\r\n</p>\r\n[code]250px(значение width) + 10px(padding-left) + 10px(padding-right) = 270px[/code]\r\n<p>\r\nЕсли боковое меню имеет границы, их тоже надо учитывать.\r\n</p>\r\n<p>\r\nТеперь о том, как рассчитать величину отрицательного margin-left для элемента &lt;div id=\"left\"&gt;. Складываем ширину элемента #content, левые и правые поля и отступы, а также левую и правую границы. Если центральный столбец имеет ширину 550px, имеет границу 1px, отступ 10px, а также левое поле 270px для размещения левого бокового меню:\r\n</p>\r\n[code]550px + 1px + 1px + 10px + 10px + 270px = 842px[/code]\r\n<p>\r\nДавайте немного улучшим наш шаблон — добавим отступы и выравнивание колонок по высоте с помощью background-image:\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Шаблон, три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"bg-left-right\">\r\n    <div id=\"content\">\r\n      <h1>Lorem ipsum</h1>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n    </div>\r\n    <div id=\"left\">\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </div>\r\n    <div id=\"right\">\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </div>\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  margin: 0 auto;\r\n  width: 1000px;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#content {\r\n  width: 490px;\r\n  float: left;\r\n  margin-left: 270px;\r\n  padding: 10px;\r\n  background: #eee;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  margin-left: -780px;\r\n  padding: 10px;\r\n  background: #ddd;\r\n}\r\n#right {\r\n  float: right;\r\n  width: 200px;\r\n  padding: 10px;\r\n  background: #ccc;\r\n}\r\n#bg-left-right {\r\n  background: url(bg-left.png) left top repeat-y, url(bg-right.png) right top repeat-y;\r\n  overflow: hidden;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<h3>Три колонки, резиновый, контент сверху</h3>\r\n<p>\r\n<img src=\"/files/blog/29/11.png\" alt=\"\" />\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"wrap\">\r\n    <div id=\"content\">\r\n      <h1>Lorem ipsum</h1>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n    </div>\r\n  </div>\r\n  <div id=\"left\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n  </div>\r\n  <div id=\"right\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  min-width: 1000px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#wrap {\r\n  width: 100%;\r\n  float: left;\r\n}\r\n#content {\r\n  margin: 0 200px 0 250px;\r\n}\r\n#left {\r\n  width: 250px;\r\n  float: left;\r\n  margin-left: -100%;\r\n  background: #ddd;\r\n}\r\n#right {\r\n  width: 200px;\r\n  float: left;\r\n  margin-left: -200px;\r\n  background: #ccc;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<p>\r\nДобавим отступы и выравнивание колонок по высоте:\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"bg-left-right\">\r\n    <div id=\"wrap\">\r\n      <div id=\"content\">\r\n        <h1>Lorem ipsum</h1>\r\n        <p>\r\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n        </p>\r\n        <p>\r\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n        </p>\r\n      </div>\r\n    </div>\r\n    <div id=\"left\">\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </div>\r\n    <div id=\"right\">\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </div>\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  min-width: 1000px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#wrap {\r\n  width: 100%;\r\n  float: left;\r\n}\r\n#content {\r\n  margin: 0 220px 0 270px;\r\n  padding: 10px;\r\n}\r\n#left {\r\n  width: 250px;\r\n  float: left;\r\n  padding: 10px;\r\n  margin-left: -100%;\r\n  background: #ddd;\r\n}\r\n#right {\r\n  width: 200px;\r\n  float: left;\r\n  padding: 10px;\r\n  margin-left: -220px;\r\n  background: #ccc;\r\n}\r\n#bg-left-right {\r\n  background: url(bg-left.png) left top repeat-y, url(bg-right.png) right top repeat-y;\r\n  overflow: hidden;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]','2011-09-22 14:05:06',1),(30,5,'Lazy Load — отложенная загрузка изображений','jQuery плагин Lazy Load отложенная загрузка изображений','jQuery-плагин Lazy Load. Отложенная загрузка изображений. Увеличение скорости загрузки страниц.','CSS, HTML, JavaScript, Web-разработка, jQuery','Lazy Load — это jQuery плагин, который позволяет осуществить отложенную загрузку изображений, что актуально для страниц с большим количеством изображений. Изображения загружаются по мере пролистывания страницы пользователем. Использование Lazy Load позволяет увеличить скорость загрузки страницы и уменьшить нагрузку на сервер.','<p>\r\n<a href=\"http://www.appelsiini.net/projects/lazyload\">Lazy Load</a> — это jQuery плагин, который позволяет осуществить отложенную загрузку изображений, что актуально для страниц с большим количеством изображений. Изображения загружаются по мере пролистывания страницы пользователем. Использование Lazy Load позволяет увеличить скорость загрузки страницы и уменьшить нагрузку на сервер.\r\n</p>\r\n\r\n<h2>Как использовать?</h2>\r\n<p>\r\nПоскольку Lazy Load — плагин jQuery, сперва подключаем библиотеку jQuery, а потом сам плагин:\r\n</p>\r\n[html]\r\n<script src=\"jquery.js\" type=\"text/javascript\"></script>\r\n<script src=\"jquery.lazyload.js\" type=\"text/javascript\"></script>\r\n[/html]\r\n<p>\r\nДалее необходимо изменить HTML код. В качестве значения атрибута src изображения указываем заглушку — gif серого цвета размером 1px на 1px. В качестве значения атрибута <code>data-original</code> указываем URL настоящего изображения.\r\n<p>\r\n<p>\r\nТакже необходимо указать размеры изображения <code>width</code> и <code>height</code> как атрибуты тега <code>&lt;img&gt;</code>, или в стилях CSS. Иначе плагин может работать некорректно.\r\n</p>\r\n[html]\r\n<img class=\"lazy\" src=\"img/grey.gif\" data-original=\"img/example.jpg\" width=\"640\" height=\"480\">\r\n[/html]\r\n<p>\r\nИ после этого:\r\n</p>\r\n[js]\r\n$(\"img.lazy\").lazyload();\r\n[/js]\r\n<p>\r\nТеперь все изображения с классом <code>lazy</code> будут загружаться по мере пролистывания страницы.\r\n</p>\r\n\r\n<h2>Для бразеров без поддержки JavaScript</h2>\r\n<p>\r\nВ случае если у пользователя не поддерживается или отключен JavaScript, имеется возможность отобразить изображение поместив его в тег <code>&lt;noscript&gt;</code>.\r\n</p>\r\n[html]\r\n<img class=\"lazy\" src=\"img/grey.gif\" data-original=\"img/example.jpg\" width=\"640\" height=\"480\">\r\n<noscript><img src=\"img/example.jpg\" width=\"640\" height=\"480\"></noscript>\r\n[/html]\r\n<p>\r\nДля предотвращения одновременного отображения заглушки и изображения рекомендуется спрятать заглушку с помощью CSS.\r\n</p>\r\n[css]\r\n.lazy {\r\n    display: none;\r\n}\r\n[/css]\r\n<p>\r\nДля браузеров с поддержкой JavaScript необходимо отобразить заглушку во время загрузки страницы. Это можно сделать вместе с инициализацией плагина.\r\n</p>\r\n[js]\r\n$(\"img.lazy\").show().lazyload();\r\n[/js]\r\n<p>\r\nВсё это опционально и нужно лишь в случае если вы хотите поддерживать браузеры без JavaScript.\r\n</p>\r\n\r\n<h2>Порог срабатывания</h2>\r\n<p>\r\nПо умолчанию изображения загружаются в момент появления на экране. Если вы хотите чтобы они загружались раньше — установите параметр <code>threshold</code>. Для того, чтоб изображения загружались за 200 пикселей до того, как они отобразятся на экране, установите значение <code>threshold</code> равным 200.\r\n</p>\r\n[js]\r\n$(\"img.lazy\").lazyload({\r\n    threshold: 200\r\n});\r\n[/js]\r\n\r\n<h2>События</h2>\r\n<p>\r\nВы можете обработать любое jQuery-событие, например <code>click</code> или <code>mouseover</code>. По-умолчанию изображения загружаются во время отображения на экране. Ниже приведен пример позволяющий загружать изображение после клика по заглушке:\r\n</p>\r\n[js]\r\n$(\"img.lazy\").lazyload({ \r\n    event: \"click\"\r\n});\r\n[/js]\r\n\r\n<h2>Использование эффектов</h2>\r\n<p>\r\nПо-умолчанию плагин ждет полной загрузки изображения и тогда вызывает show() для его отображения. Вы можете использовать любой эффект (смотрите <a href=\"\">пример</a>). Пример использования <a href=\"\">fadeIn</a>-эффекта:\r\n</p>\r\n[js]\r\n$(\"img.lazy\").lazyload({ \r\n    effect: \"fadeIn\"\r\n});\r\n[/js]\r\n<h2>Изображения внутри контейнера</h2>\r\n<p>\r\nТак же вы можете использовать изображения внутри контейнера, например div с прокруткой. Смотрите <a href=\"\">пример</a> с горизонтальной и вертикальной прокруткой.\r\n</p>\r\n[css]\r\n#container {\r\n    height: 600px;\r\n    overflow: scroll;\r\n}\r\n[/css]\r\n[js]\r\n$(\"img.lazy\").lazyload({         \r\n    container: $(\"#container\")\r\n});\r\n[/js]\r\n\r\n<h2>Когда изображения не последовательны</h2>\r\n<p>\r\nПосле прокрутки страницы Lazy Load беспрерывно ищет незагруженные изображения. В этом цикле он проверяет, появилось ли изображение в видимой части окна браузера. По умолчанию цикл останавливается после того, как во время прокрутки в видимой части экрана появится первое изображение (которое ранее было за пределами видимости). Это базируется на предположении, что порядок изображений на странице такой же, как и в HTML коде. В некоторых случаях это может быть не так. Вы можете контролировать поведение загрузки задав параметр <code>failure_limit</code>.\r\n</p>\r\n[js]\r\n$(\"img.lazy\").lazyload({ \r\n    failure_limit: 10\r\n});\r\n[/js]\r\n<p>\r\nУстановка значения <code>failure_limit</code> в 10 означает, что плагин должен остановить поиск изображений для загрузки после того, как будет найдено 10 изображений в невидимой части окна.\r\n</p>\r\n\r\n<h2>Загрузка изображений через заданный промежуток времени</h2>\r\n<p>\r\nНижеприведенный код ожидает полной загрузки страницы (не только HTML, но и всех видимых изображений). Через 5 секунд после загрузки страницы, будут загружены изображения находящиеся в невидимой части окна браузера.\r\n</p>\r\n[js]$(function() {          \r\n    $(\"img:below-the-fold\").lazyload({\r\n        event: \"sporty\"\r\n    });\r\n});\r\n$(window).bind(\"load\", function() { \r\n    var timeout = setTimeout(function() , 5000);\r\n});[/js]\r\n\r\n<h2>Загрузка скрытых изображений</h2>\r\n<p>\r\nБывают случаи, когда у вас на странице есть скрытые изображения. Например во время динамического изменения видимости некоторых объектов. Для ускорения работы Lazy Load игнорирует скрытые изображения. Если вы хотите загружать скрытые изображения установите значение <code>skip_invisible</code> в <code>false</code>.\r\n</p>\r\n[js]\r\n$(\"img.lazy\").lazyload({ \r\n    skip_invisible: false\r\n});\r\n[/js]','2013-10-01 12:41:56',1),(32,14,'Списки в Python','','','Python, Коллекция, Кортеж, Список, ТипыДанных','Для группировки множества элементов в питоне используется список, который может быть записан как индексированная последовательность значений, разделенных запятыми, заключенная в квадратные скобки.','<p>\r\nДля группировки множества элементов в питоне используется список, который может быть записан как индексированная последовательность значений, разделенных запятыми, заключенная в квадратные скобки. Списки имеют произвольную вложенность, т.е. могут включать в себя любые вложенные списки.\r\n</p> \r\n\r\n<h2>Примеры</h2>\r\n\r\n<p>Создание списка, доступ к отдельным элементам по индексу</p>\r\n[idle]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam\r\n[\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam[0]\r\n\'cat\'\r\n>>> spam[1]\r\n\'bat\'\r\n>>> spam[-1]\r\n\'dog\'\r\n[/idle]\r\n<p>Элементы списков сами могут быть списками. Доступ к значениям в таких списках осуществляется с помощью нескольких индексов</p>\r\n[idle]\r\n>>> spam = [[\'cat\', \'bat\'], [10, 20, 30, 40, 50]]\r\n>>> spam[0]\r\n[\'cat\', \'bat\']\r\n>>> spam[0][1]\r\n\'bat\'\r\n>>> spam[1][4]\r\n50\r\n[/idle]\r\n<p>Получение части списка с помощью среза</p>\r\n[idle]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam[0:4]\r\n[\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam[1:3]\r\n[\'bat\', \'rat\']\r\n>>> spam[0:-1]\r\n[\'cat\', \'bat\', \'rat\']\r\n[/idle]\r\n<p>Допускается сокращенная запись среза с пропуском одного или двух индексов. Отсутствующий первый индекс равносилен использованию нуля. Отсутствующий второй индекс означает расширение до конца списка.</p>\r\n[idle]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam[0:2]\r\n[\'cat\', \'bat\']\r\n>>> spam[1:]\r\n[\'bat\', \'rat\', \'dog\']\r\n>>> spam[:]\r\n[\'cat\', \'bat\', \'rat\', \'dog\']\r\n[/idle]\r\n<p>Получение длины списка</p>\r\n[idle]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> len(spam)\r\n4\r\n[/idle]\r\n<p>Изменение значений по индексу</p>\r\n[idle]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam[1] = \'elephant\'\r\n>>> spam\r\n[\'cat\', \'elephant\', \'rat\', \'dog\']\r\n[/idle]\r\n<p>Конкатенация и репликация списков</p>\r\n[idle]\r\n>>> [1, 2, 3] + [\'a\', \'b\', \'c\']\r\n[1, 2, 3, \'a\', \'b\', \'c\']\r\n>>> [\'x\', \'y\', \'z\'] * 3\r\n[\'x\', \'y\', \'z\', \'x\', \'y\', \'z\', \'x\', \'y\', \'z\']\r\n[/idle]\r\n<p>Удаление значений из списка с помощью инструкции <code>del</code></p>\r\n[idle]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> del spam[2]\r\n>>> spam\r\n[\'cat\', \'rat\', \'dog\']\r\n[/idle]\r\n<p>Использование цикла для перебора всех элементов списка</p>\r\n[python]\r\nspam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\nfor i in range(len(spam)):\r\n    print(\'index = \' + str(i) + \', value = \' + spam[i])\r\n[/python]\r\n[code]\r\nindex = 0, value = cat\r\nindex = 1, value = bat\r\nindex = 2, value = rat\r\nindex = 3, value = dog\r\n[/code]\r\n<p>Определить, содержит ли список определенное значение можно с помощью операторов <code>in</code> и <code>not in</code></p>\r\n[idle]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> \'cat\' in spam\r\nTrue\r\n>>> \'elephant\' in spam\r\nFalse\r\n>>> \'elephant\' not in spam\r\nTrue\r\n[/idle]\r\n<p>Трюк с групповым присваиванием</p>\r\n[idle]\r\n>>> cat = [\'fat\', \'black\', \'loud\']\r\n>>> size, color, disposition = cat\r\n>>> size\r\n\'fat\'\r\n>>> color\r\n\'black\'\r\n[/idle]\r\n<p>Поиск значения в списке с помощью метода <code>index()</code></p>\r\n[idle]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam.index(\'bat\')\r\n1\r\n[/idle]\r\n<p>Добавление значений в список с помощью методов <code>append()</code> и <code>insert()</code></p>\r\n[idle]\r\n>>> spam = [\'cat\', \'bat\', \'rat\']\r\n>>> spam.append(\'elephant\')\r\n>>> spam\r\n[\'cat\', \'bat\', \'rat\', \'elephant\']\r\n[/idle]\r\n[idle]\r\n>>> spam = [\'cat\', \'bat\', \'rat\']\r\n>>> spam.insert(1, \'chicken\')\r\n>>> spam\r\n[\'cat\', \'chicken\', \'bat\', \'rat\']\r\n[/idle]\r\n<p>Удаление значений из списка с помощью метода <code>remove()</code>. Если в списке несколько одинаковых значений, будет удалено только первое.</p>\r\n[idle]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam.remove(\'bat\')\r\n>>> spam\r\n[\'cat\', \'rat\', \'dog\']\r\n[/idle]\r\n<p>Сортировка значений в списке с помощью метода <code>sort()</code></p>\r\n[idle]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam.sort()\r\n>>> spam\r\n[\'bat\', \'cat\', \'dog\', \'rat\']\r\n[/idle]\r\n<p><strong>Кортеж</strong> — список, значения которого не могут изменяться, добавляться и удаляться.</p>\r\n[idle]\r\n>>> spam = (\'cat\', \'bat\', \'rat\', \'dog\')\r\n>>> spam[1] = \'elephant\'\r\nTraceback (most recent call last):\r\n  File \"<pyshell#12>\", line 1, in <module>\r\n    spam[1] = \'elephant\'\r\nTypeError: \'tuple\' object does not support item assignment\r\n[/idle]\r\n<p>Преобразование типов с помощью функций <code>list()</code> и <code>tuple()</code>\r\n[idle]\r\n>>> tuple([\'cat\', \'bat\', \'rat\', \'dog\'])\r\n(\'cat\', \'bat\', \'rat\', \'dog\')\r\n>>> list((\'cat\', \'bat\', \'rat\', \'dog\'))\r\n[\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> list(\'hello\')\r\n[\'h\', \'e\', \'l\', \'l\', \'o\']\r\n[/idle]\r\n<p>Списки нельзя скопировать просто присвоив одну переменную другой, т.к. в этом случае копируется ссылка на объект. В итоге при изменении объекта через одну переменную, изменения отражаются на другой.</p>\r\n[idle]\r\n>>> spam = [0, 1, 2, 3, 4, 5]\r\n>>> cheese = spam\r\n>>> cheese[1] = \'hello\'\r\n>>> spam\r\n[0, \'hello\', 2, 3, 4, 5]\r\n>>> cheese\r\n[0, \'hello\', 2, 3, 4, 5]\r\n[/idle]\r\n<p>При передаче списка в качестве параметра функции, передача происходит по ссылке, а не по значению.</p>\r\n[python]\r\ndef eggs(param)\r\n    param.append(\'hello\')\r\n\r\nspam = [1, 2, 3]\r\neggs(spam)\r\nprint(spam)\r\n[/python]\r\n[code]\r\n[1, 2, 3, \'hello\']\r\n[/code]\r\n<p>Для копирования списка используется метод <code>copy()</code></p>\r\n[idle]\r\n>>> spam = [0, 1, 2, 3, 4, 5]\r\n>>> cheese = spam.copy()\r\n>>> cheese[1] = \'hello\'\r\n>>> cheese\r\n[0, \'hello\', 2, 3, 4, 5]\r\n>>> spam\r\n[0, 1, 2, 3, 4, 5]\r\n[/idle]\r\n<p>Если список, копию которого нужно создать, сам содержит списки, нужно использовать метод <code>deepcopy()</code> модуля <code>copy</code>.</p>\r\n[idle]\r\n>>> import copy\r\n>>> spam = [1, 2, 3, [1, 2, 3]]\r\n>>> deep = copy.deepcopy(spam)\r\n[/idle]\r\n<p>Генератор цикла объединяет цикл <code>for</code>, условие <code>if</code> и создание новых элементов в одну строку и автоматически присоединяет к списку все новые элементы</p>\r\n[idle]\r\n>>> square = [value**2 for value in range(1,11)]\r\n>>> square\r\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\n[/idle]\r\n[idle]\r\n>>> square = [value**2 for value in range(1,11) if value % 2 == 0]\r\n>>> square\r\n[4, 16, 36, 64, 100]\r\n[/idle]','2018-02-09 14:41:25',1),(33,14,'Словари в Python','','','Python, Коллекция, Словарь, ТипыДанных','Словарь — это ассоциативный массив или хеш. Это неупорядоченное множество пар ключ-значение с требованием уникальности ключей. Пара фигурных скобок {} создает пустой словарь.','<p>\r\nСловарь — это ассоциативный массив или хеш. Это неупорядоченное множество пар ключ-значение с требованием уникальности ключей. Пара фигурных скобок <code>{}</code> создает пустой словарь. В отличие от списка, доступ к элементам словаря производится по ключу, а не по индексу, ключ может быть любого типа.\r\n</p>\r\n<h2>Примеры</h2>\r\n<p>Создание словаря</p>\r\n[idle]\r\n>>> cat = {\'name\': \'Tom\', \'species\': \'cat\', \'age\': 3}\r\n[/idle]\r\n[idle]\r\n>>> spam = {}\r\n>>> spam[2] = \'second\'\r\n>>> spam[3] = \'third\'\r\n>>> spam[1] = \'first\'\r\n>>> spam\r\n{2: \'second\', 3: \'third\', 1: \'first\'}\r\n[/idle]\r\n<p>Доступ к значениям по ключу</p>\r\n[idle]\r\n>>> cat = {\'name\': \'Tom\', \'spesies\': \'cat\', \'age\': 3}\r\n>>> cat[\'name\']\r\n\'Tom\'\r\n[/idle]\r\n<p>Методы <code>keys()</code>, <code>values()</code> и <code>items()</code></p>\r\n[idle]\r\n>>> spam = {\'color\': \'red\', \'age\': 42}\r\n>>> spam.keys()\r\ndict_keys([\'color\', \'age\'])\r\n>>> spam.values()\r\ndict_values([\'red\', 42])\r\n>>> spam.items()\r\ndict_items([(\'color\', \'red\'), (\'age\', 42)])\r\n[/idle]\r\n<p>Возвращаемые этими методами коллекции не являются истинными списками, однако эти типы данных (<code>dict_keys</code>, <code>dict_values</code>, <code>dict_items</code>) можно использовать в цикле <code>for</code>.</p>\r\n[python]\r\nspam = {\'color\': \'red\', \'age\': 42}\r\n# ключи\r\nfor key in spam.keys():\r\n    print(key)\r\n# значения\r\nfor value in spam.value():\r\n    print(value)\r\n# ключи и значения\r\nfor key, value in spam.items():\r\n    print(\'key=\', key, \', value=\', value, sep = \'\')\r\n[/python]\r\n<p>Проверка существования ключа или значения в с помощью операторов <code>in</code> и <code>not in</code>.</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\' : \'Иванов\', \'petrov@mail.ru\' : \'Петров\'}\r\n>>> \'ivanov@mail.ru\' in users\r\nTrue\r\n>>> \'ivanov@mail.ru\' in users.keys()\r\nTrue\r\n>>> \'Иванов\' in users.values()\r\nTrue\r\n>>> \'Петров\' not in users.values()\r\nFalse\r\n[/idle]\r\n<p>\r\nМетод <code>get(key [,default])</code> возврвщает значение по ключу. Если ключ отсутствует в словаре, метод возвращает значение по умолчанию <code>default</code>.\r\n</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\' : \'Иванов\', \'petrov@mail.ru\' : \'Петров\'}\r\n>>> users.get(\'sidorov@mail.ru\', \'Нет такого пользователя\')\r\n\'Нет такого пользователя\'\r\n[/idle]\r\n<p>\r\nМетод <code>setdefault(key [,default])</code> возвращает значение ключа, но если его нет — создает ключ с значением <code>default</code>.\r\n</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\' : \'Иванов\', \'petrov@mail.ru\' : \'Петров\'}\r\n>>> user = users.setdefault(\'sidorov@mail.ru\', \'Сидоров\')\r\n>>> user\r\n\'Сидоров\'\r\n>>> users\r\n{\'ivanov@mail.ru\': \'Иванов\', \'petrov@mail.ru\': \'Петров\', \'sidorov@mail.ru\': \'Сидоров\'}\r\n[/idle]\r\n<p>Метод <code>pop(key [,default])</code> удаляет ключ и возвращает значение; если ключа нет, возвращает <code>default</code>.</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\' : \'Иванов\', \'petrov@mail.ru\' : \'Петров\'}\r\n>>> users.pop(\'ivanov@mail.ru\')\r\n\'Иванов\'\r\n>>> users\r\n{\'petrov@mail.ru\': \'Петров\'}\r\n>>> users.pop(\'sidorov@mail.ru\', \'Сидоров\')\r\n\'Сидоров\'\r\n[/idle]\r\n<p>\r\nМетод <code>popitem()</code> удаляет и возвращает кортеж (ключ, значение).\r\n</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\': \'Иванов\', \'petrov@mail.ru\': \'Петров\', \'sidorov@mail.ru\': \'Сидоров\'}\r\n>>> for i in range(len(users)):\r\n...     user = users.popitem()\r\n...     print(user)\r\n\r\n(\'sidorov@mail.ru\', \'Сидоров\')\r\n(\'petrov@mail.ru\', \'Петров\')\r\n(\'ivanov@mail.ru\', \'Иванов\')\r\n>>> users\r\n{}\r\n[/idle]\r\n<p>Оператор <code>del</code> удаляет пару по ключу.</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\': \'Иванов\', \'petrov@mail.ru\': \'Петров\'}\r\n>>> del users[\'ivanov@mail.ru\']\r\n>>> users\r\n{\'petrov@mail.ru\': \'Петров\'}\r\n[/idle]\r\n<p>\r\nМетод <code>copy()</code> возвращает поверхностную копию словаря.\r\n</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\': \'Иванов\', \'petrov@mail.ru\': \'Петров\'}\r\n>>> spam = users.copy()\r\n>>> spam\r\n{\'ivanov@mail.ru\': \'Иванов\', \'petrov@mail.ru\': \'Петров\'}\r\n[/idle]\r\n[idle]\r\n>>> spam = {1:[1,1], 2:[2,2]}\r\n>>> copy = spam.copy()\r\n>>> spam[1][0] = 3\r\n>>> spam\r\n{1: [3, 1], 2: [2, 2]}\r\n>>> copy\r\n{1: [3, 1], 2: [2, 2]}\r\n[/idle]\r\n<p>\r\nДля создания глубокой копии, нужно использовать метод <code>deepcopy()</code> модуля <code>copy</code>.\r\n</p>\r\n<ul>\r\n  <li>Поверхностная копия создает новый составной объект (словарь или список), и затем вставляет в него ссылки на объекты, находящиеся в оригинале.</li>\r\n  <li>Глубокая копия создает новый составной объект (словарь или список), и затем рекурсивно вставляет в него копии объектов, находящихся в оригинале.</li>\r\n</ul>','2018-02-10 15:58:44',1),(34,13,'Строковый редактор ed','','','Linux, RegExp, Команда, Редактор, Шаблон','При запуске редактора ed, выделяется специальная область внутренней памяти машины. Эта область называется буфером. При редактировании файла, его содержимое копируется в этот буфер и работа идет именно с ним.','<p>\r\nПри запуске редактора ed, выделяется специальная область внутренней памяти машины. Эта область называется буфером. При редактировании файла, его содержимое копируется в этот буфер и работа идет именно с ним. Замена оригинала производится только при сохранении изменений.\r\n</p>\r\n<p>Запуск редактора</p>\r\n[code]\r\ned\r\n[/code]\r\n<p>или</p>\r\n[code]\r\ned file\r\n[/code]\r\n<p>где <code>file</code> — это имя нового или уже существующего файла. Для завершения сеанса используется команда <code>q</code> (от quit)</p>\r\n[code]\r\nq\r\n[/code]\r\n<p>Если изменения не были записаны в файл, ed предупредит об этом</p>\r\n[code]\r\n?\r\n[/code]\r\n<p>Для подтверждения выхода без сохранения, введите команду <code>q</code> еще раз. Для сохранения результатов и выхода, нужно ввести две команды:</p>\r\n[code]\r\nw\r\nq\r\n[/code]\r\n<p>\r\nПри вызове ed без аргумента <code>file</code>, создается новый буфер. Для добавления текста в буфер используется команда <code>a</code> (от append или add). После ее\r\nвыполнения редактор переходит в режим ввода текста. Для выхода из режима ввода текста введите на пустой строке символ точки «.».\r\n</p>\r\n[code]\r\na\r\nПервая строка текста\r\nВторая строка текста\r\nТретья строка текста\r\nЧетвертая строка текста\r\nПятая строка текста\r\n.\r\n[/code]\r\n<p>Чтобы посмотреть содержимое буфера, введите команду</p>\r\n[code]\r\n1,$p\r\nПервая строка текста\r\nВторая строка текста\r\nТретья строка текста\r\nЧетвертая строка текста\r\nПятая строка текста\r\n[/code]\r\n<p>\r\n<code>1,$</code> задают диапазон строк, которые надо напечатать (<code>p</code> от print): <code>1</code> — первая строка, <code>$</code> — последняя строка. Чтобы вывести строки со <code>2</code> по <code>4</code>:\r\n</p>\r\n[code]\r\n2,4p\r\nВторая строка текста\r\nТретья строка текста\r\nЧетвертая строка текста\r\n[/code]\r\n<p>Для просмотра одной строки: первой, третьей и последней:</p>\r\n[code]\r\n1p\r\nПервая строка текста\r\n3p\r\nТретья строка текста\r\n$p\r\nПятая строка текста\r\n[/code]\r\n<p>Для просмотра текущей строки</p>\r\n[code]\r\n.p\r\nЧетвертая строка текста\r\n[/code]\r\n<p>Чтобы узнать, какая строка текущая</p>\r\n[code]\r\n.=\r\n4\r\n[/code]\r\n<p>\r\nДля записи содержимого буфера в файл используется команда <code>w</code> (от write). Выполнение этой команды приводит к копированию содержимого буфера в указанный файл, старое\r\nсодержимое файла при этом удаляется.\r\n</p>\r\n[code]\r\nw example.txt\r\n[/code]\r\n<p>В ответ ed сообщит количество записанных в файл символов (байт).</p>\r\n<p>\r\nДля считывания содержимого файла в буфер используется команда <code>e</code> (от edit):\r\n</p>\r\n[code]\r\ne some-file.txt\r\n[/code]\r\n<p>\r\nПри этом в буфер загружен весь файл <code>some-file.txt</code> и на экране появится количество его символов. Если в буфере до этого уже была какая-либо информация, она уничтожается.\r\n</p>\r\n<p>\r\nЕсли вы использовали команду <code>e</code> для считывания файла в буфер, то в команде <code>w</code> необязательно указывать имя файла. Редактор ed помнит имя файла, которое последним\r\nиспользовалось в команде <code>e</code> и команда <code>w</code> по умолчанию будет делать запись в этот файл. Таким образом, сеанс работы с редактором может быть таким:\r\n</p>\r\n[code]\r\ned\r\ne some-file.txt\r\n[процесс редактирования]\r\nw\r\nq\r\n[/code]\r\n<p>\r\nЧтобы узнать имя файла, в который будет записан буфер (при указании команды <code>w</code> без параметра), можно использовать команду <code>f</code> (от file):\r\n</p>\r\n[code]\r\nf\r\nsome-file.txt\r\n[/code]\r\n<p>\r\nС помощью команды <code>f</code> можно также менять имя файла для записи содержимого буфера. Например, в результате выполнения команд:\r\n</p>\r\n[code]\r\ned some-file.txt\r\nf other-file.txt\r\n[/code]\r\n<p>в буфер будет загружен файл <code>some-file.txt</code> и затем команда <code>f</code> изменяет имя файла для команды <code>w</code>.</p>\r\n<p>\r\nБывают ситуации, когда нужно считать в буфер файл, не стирая имеющейся до этого в нем информации. Для этой цели подходит команда <code>r</code> (от read). К примеру, по команде:\r\n</p>\r\n[code]\r\nr some-file.txt\r\n[/code]\r\n<p>\r\nфайл <code>some-file.txt</code> считывается и добавляется в конец имеющейся в буфере информации.\r\n</p>\r\n<p>\r\nДля удаления строк предназначена команда <code>d</code> (от delete). Ее действие подобно действию команды <code>p</code> за исключением того, что <code>d</code> удаляет строки вместо их вывода. Удалить вторую строку\r\n</p>\r\n[code]\r\n2d\r\n[/code]\r\n<p>\r\nУдалить строки, начиная с четвертой и по последнюю:\r\n</p>\r\n[code]\r\n4,$d\r\n[/code]\r\n<p>\r\nКоманда перемещения <code>m</code> (move) позволяет переместить группу строк из одного места в буфере в другое. Например, поместить первые три строки в конец буфера:\r\n</p>\r\n[code]\r\n1,3m$\r\n[/code]\r\n<p>\r\nДля поиска строки, содержащую какой-то текст, используйте команду\r\n</p>\r\n[code]\r\n/шаблон/\r\n[/code]\r\n<p>Можно использовать в шаблоне регулярные выражения.</p>\r\n<ul>\r\n  <li><code>.</code> — любой одиночный символ</li>\r\n  <li><code>^</code> — начало строки</li>\r\n  <li><code>$</code> — конец строки</li>\r\n  <li><code>*</code> — 0 и более вхождений шаблона слева</li>\r\n  <li><code>[…]</code> — один из символов в скобках</li>\r\n  <li><code>[^…]</code> — любой символ, кроме тех, что в скобках</li>\r\n  <li><code>\\(…\\)</code> — группирует выражение и возвращает найденный текст</li>\r\n  <li><code>\\{n,m\\}</code> — от n до m вхождений шаблона слева</li>\r\n</ul>\r\n<p>\r\nДля замены отдельных слов или букв в строке или группе строк используется команда <code>s</code>. Например, заменить во второй строке символы «вторая» на символы «третья»\r\n</p>\r\n[code]\r\n2s/вторая/третья/\r\n[/code]\r\n<p>Еще пример замены</p>\r\n[code]\r\n1,$s/ашипка/ошибка/\r\n[/code]\r\n<p>чтобы исправить первое вхождение последовательности «ашипка» на «ошибка» в каждой строке буфера. Чтобы выполнить замену всех имеющихся вхождений, добавьте символ <code>g</code> (от global):</p>\r\n[code]\r\n1,$s/ашипка/ошибка/g\r\n[/code]\r\n<hr/>\r\n<p><a href=\"/files/blog/34/ed.pdf\" target=\"_blank\">Полное описание редактора ed [pdf]</a></p>','2018-02-11 14:29:56',1),(35,9,'Команда cut','','','Bash, CLI, Linux, Команда','Команда cut предназначена для извлечения (буквально «вырезания») различных полей данных из файла. Если не указано ни одного файла или задано имя «-», используется стандартный ввод. Результат всегда поступает на стандартный вывод.','<p>\r\nКоманда cut предназначена для извлечения (буквально «вырезания») различных полей данных из файла. Если не указано ни одного файла или задано имя «-», используется стандартный ввод. Результат всегда поступает на стандартный вывод. Самый простой вариант команды выглядит так:\r\n</p>\r\n[code]\r\ncut -c[red]символы[/red] файл\r\n[/code]\r\n<p>\r\nгде <code>символы</code> — количество символов (по месторасположению), которые требуется извлечь из каждой строки, которую содержит указанный <code>файл</code>.\r\n</p>\r\n<p>\r\nЭтот набор символов может состоять из одного числа, например <code>-c5</code> для извлечения пятого символа из каждой строки. Это может быть список чисел, разделенных запятыми, например <code>-c1,7,12</code> для извлечения символов 1, 7 и 12. Или, это может быть диапазон числел, указываемых через дефис, например <code>-c20-50</code> для извлечения символов от 20 до 50 включительно. Чтобы извлечь символы до конца строки, второе число в диапазоне можно не указывать.\r\n</p>\r\n<p>\r\nРассмотрим пример\r\n</p>\r\n[cli]\r\n$ cat example.txt\r\n123456789\r\nABCDEFGHI\r\nabcdefghi\r\n$ cut -c2-5 example.txt\r\n2345\r\nBCDE\r\nbcde\r\n$ cut -c3,5,8 example.txt\r\n358\r\nCEH\r\nceh\r\n$cut -c6- example.txt\r\n6789\r\nFGHI\r\nfghi\r\n[/cli]\r\n<h3>Параметры -d и -f</h3>\r\n<p>\r\nРассмотрим в качестве примера содержимое <code>/etc/passswd</code>\r\n</p>\r\n[cli]\r\n$ head /etc/passwd\r\nroot:x:0:0:root:/root:/bin/bash\r\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\r\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\r\nsync:x:4:65534:sync:/bin:/bin/sync\r\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\r\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\r\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\r\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\r\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\r\n[/cli]\r\n<p>\r\nЕсли данные разделяются конкретным символом, извлечь их можно, используя параметры <code>-d</code> и <code>-f</code>:\r\n</p>\r\n[code]cut -d[red]символ[/red] -f[red]поле[/red] файл[/code]\r\n<p>\r\nПолучаем имена пользователей из файла <code>/etc/passwd</code>:\r\n</p>\r\n[cli]\r\n$ cut -d: -f1 /etc/passwd\r\nroot\r\ndaemon\r\nbin\r\nsys\r\nsync\r\n..........\r\n[/cli]\r\n<p>\r\n<p>\r\nИмена пользователей и домашние директории\r\n</p>\r\n[cli]\r\n$ cut -d: -f1,6 /etc/passwd\r\nroot:/root\r\ndaemon:/usr/sbin\r\nbin:/bin\r\nsys:/dev\r\nsync:/bin\r\n..........\r\n[/cli]\r\n<p>\r\nЕсли ключ <code>-d</code> не указан, по умолчанию используется символ табуляции.\r\n</p>','2018-02-20 15:10:08',1),(36,13,'Потоковый редактор sed','','','Linux, RegExp, Команда, Редактор, Шаблон','Редактор sed получает входной поток построчно, редактирует каждую строку согласно правилам, и затем выводит результат в выходной поток. Набор команд sed сделан по образцу строкового редактора ed.','<p>\r\nРедактор sed получает входной поток построчно, редактирует каждую строку согласно правилам, и затем выводит результат в выходной поток. Набор команд sed сделан по образцу строкового редактора ed.\r\n<p>\r\n<p>\r\nСледующий пример демонстрирует типичное использование sed:\r\n</p>\r\n[code]\r\nsed [red]\'s/шаблон/замена/g\'[/red] [grn]inputFile[/grn] > [grn]outputFile[/grn]\r\n[/code]\r\n<p>\r\nРедактор ищет в файле <code>inputFile</code> строки, содержащие <code>шаблон</code> и заменяет в них найденные совпадения на <code>замена</code>. Вывод перенаправляется в файл <code>outputFile</code>. Буква «s» — это сокращение слова «substitute», то есть — перед нами команда замены. По умолчанию, заменяется только первое вхождение <code>шаблона</code> в каждой строке. Флаг <code>g</code> предписывает заменить все вхождения.\r\n</p>\r\n<p>\r\nВ некоторых случаях с помощью sed надо обработать лишь какую-то часть текста — некую конкретную строку или группу строк. Для достижения такой цели можно воспользоваться двумя подходами:\r\n</p>\r\n<ul>\r\n  <li>Задать ограничение на номера обрабатываемых строк.</li>\r\n  <li>Указать фильтр, соответствующие которому строки нужно обработать.</li>\r\n</ul>\r\n<p>\r\nУказание номера одной строки, которую нужно обработать:\r\n</p>\r\n[code]\r\nsed [red]\'2s/шаблон/замена/g\'[/red] [grn]inputFile[/grn]\r\n[/code]\r\n<p>\r\nУказание диапазона строк, которые нужно обработать:\r\n</p>\r\n[code]\r\nsed [red]\'2,4s/шаблон/замена/g\'[/red] [grn]inputFile[/grn]\r\n[/code]\r\n<p>\r\nОбработать только строки, соответствующие фильтру:\r\n</p>\r\n[code]\r\nsed [red]\'/фильтр/s/шаблон/замена/g\'[/red] [grn]inputFile[/grn]\r\n[/code]\r\n<h2>Удаление строк</h2>\r\nРедактор sed умеет не только заменять одну последовательность символов в строках на другую. Используя команду <code>d</code> (от delete), можно удалять строки из текстового потока. Например, удалим третью строку:\r\n[code]\r\nsed [red]\'3d\'[/red] [grn]inputFile[/grn]\r\n[/code]\r\n<p>\r\nУдалить строки, начиная с заданной — и до конца файла:\r\n</p>\r\n[code]\r\nsed [red]\'3,$d\'[/red] [grn]inputFile[/grn]\r\n[/code]\r\n<p>\r\nСтроки можно удалять и по шаблону:\r\n</p>\r\n[code]\r\nsed [red]\'/шаблон/d\'[/red] [grn]inputFile[/grn]\r\n[/code]\r\n<p>\r\nПри вызове команды <code>d</code> можно указывать пару шаблонов — будут удалены строки, в которых встретится шаблон, и те строки, которые находятся между ними:\r\n</p>\r\n[code]\r\nsed [red]\'/первый/,/третий/d\'[/red] [grn]inputFile[/grn]\r\n[/code]\r\n\r\n<h2>Вставка строк</h2>\r\n<p>\r\nС помощью <code>sed</code> можно вставлять данные в текстовый поток, используя команды <code>i</code> (от insert) и <code>a</code> (от append):\r\n</p>\r\n<ul>\r\n  <li>команда <code>i</code> добавляет новую строку перед заданной</li>\r\n  <li>команда <code>a</code> добавляет новую строку после заданной</li>\r\n</ul>\r\n<p>\r\nВызовем команды <code>i</code> и <code>a</code>, указав номер строки, перед/после которой надо вставить новую строку:\r\n</p>\r\n[code]\r\nsed [red]\'3i\\Это новая строка\'[/red] [grn]inputFile[/grn]\r\n[/code]\r\n[code]\r\nsed [red]\'5a\\Это новая строка\'[/red] [grn]inputFile[/grn]\r\n[/code]\r\n\r\n<h2>Замена строк</h2>\r\n<p>\r\nКоманда <code>c</code> (от change) позволяет изменить содержимое целой строки текста в потоке данных. При её вызове нужно указать номер строки, вместо которой в поток надо добавить новые данные:\r\n<p>\r\n[code]\r\nsed [red]\'3c\\Это измененная строка\'[/red] [grn]inputFile[/grn]\r\n[/code]\r\n<p>\r\nЕсли воспользоваться при вызове команды шаблоном в виде обычного текста или регулярного выражения, заменены будут все соответствующие шаблону строки:\r\n</p>\r\n[code]\r\nsed [red]\'/шаблон/c Новая строка вместо старых\'[/red] [grn]inputFile[/grn]\r\n[/code]\r\n\r\n<h2>Замена символов</h2>\r\n<p>\r\nКоманда <code>y</code> работает с отдельными символами, заменяя их в соответствии с переданными ей при вызове данными:\r\n</p>\r\n[code]\r\nsed [red]\'y/1234/5678/\'[/red] [grn]inputFile[/grn]\r\n[/code]\r\n\r\n<h2>Регулярные выражения</h2>\r\n<p>\r\nРедактор sed поддерживает два типа регулярных выражений: базовый (BRE — basic regular expressions) и расширенный (ERE — extended regular expressions). По умолчанию sed использует базовый тип регулярных выражений.\r\n</p>\r\n<p>В BRE распознаются следующие метасимволы:</p>\r\n[code]\r\n^ $ . [ ] *\r\n[/code]\r\n<p>\r\nВсе другие символы расцениваются как литералы. В ERE добавлены следующие метасимволы (и связанные с ними функции):\r\n</p>\r\n[code]\r\n( ) { } ? + |\r\n[/code]\r\n<p>\r\nТем не менее, символы «(», «)», «{» и «}» в BRE обрабатываются как метасимволы, если они экранированы обратным слешом; в то время как в ERE постановка перед любыми метасимволами обратного слеша приводит к тому, что они трактуются как литералы.\r\n</p>\r\n<p>\r\n<strong>Опция -r</strong> редактора sed позволяет использовать расширенные регулярные выражения.\r\n</p>\r\n\r\n<h2>Опции редактора sed</h2>\r\n<p>\r\n<strong>Опция -n</strong> подавляет вывод. Чтобы получить вывод нужно специальное указание, например, команда <code>p</code> (от print).\r\n</p>\r\n<p>\r\n<strong>Опция -e</strong> позволяет выполнить несколько команд, например:\r\n</p>\r\n[code]\r\nsed -e [red]\'s/шаблон1/замена1/\'[/red] -e [red]\'s/шаблон2/замена2/\'[/red] [grn]inputFile[/grn]\r\n[/code]\r\n<p>\r\n<strong>Опция -f</strong> позволяет выполнить большое количество команд, записанных в файл:\r\n</p>\r\n[code]\r\nsed -f [red]commandFile[/red] [grn]inputFile[/grn]\r\n[/code]\r\n[code]\r\n# этот скрипт изменит все строчные гласные буквы на заглавные\r\ns/a/A/g\r\ns/e/E/g\r\ns/i/I/g\r\ns/o/O/g\r\ns/u/U/g\r\n[/code]\r\n\r\n<h2>Несколько примеров использования</h2>\r\n<p>\r\nЗамена без использования модификатора <code>g</code>:\r\n</p>\r\n[cli]\r\n$ echo \'кот этот, был самый обычный кот\' | sed \'s/кот/котенок/\'\r\nкотенок этот, был самый обычный кот\r\n[/cli]\r\n<p>\r\nА теперь с модификатором глобальной замены:\r\n</p>\r\n[cli]\r\n$ echo \'кот этот, был самый обычный кот\' | sed \'s/кот/котенок/g\'\r\nкотенок этот, был самый обычный котенок\r\n[/cli]\r\n<p>\r\nЗаключить все слова в скобки (<code>&amp;</code> или <code>\\0</code> означает найденное совпадение с шаблоном):\r\n</p>\r\n[cli]\r\n$ echo \'глупый пингвин робко прячет\' | sed \'s/[^ ]*/(&)/g\'\r\n(глупый) (пингвин) (робко) (прячет)\r\n[/cli]\r\n<p>\r\nПоменять слова местами:\r\n</p>\r\n[cli]\r\n$ echo \'глупый пингвин\' | sed \'s/\\([а-я]*\\) \\([а-я]*\\)/\\2 \\1/\'\r\nпингвин глупый\r\n[/cli]\r\n<p>\r\nЗаменяем второе слово в строке (число после последнего разделителя указывает, какое по счету совпадение подлежит замене):\r\n</p>\r\n[cli]\r\n$ echo очень глупый пингвин | sed \'s/[а-я]*/хороший/2\'\r\nочень хороший пингвин\r\n[/cli]\r\n<p>\r\nЗаменяем второе и все следующие слова:\r\n</p>\r\n[cli]\r\n$ echo очень глупый пингвин | sed \'s/[а-я]*/хороший/2g\'\r\nочень хороший хороший\r\n[/cli]\r\n<p>\r\nУдалить все слова, кроме первого:\r\n</p>\r\n[cli]\r\n$ echo \'очень глупый пингвин\' | sed \'s/[^ ]*//2g\'\r\nочень\r\n[/cli]\r\n<p>\r\nПоказать строки со 2 по 4:\r\n</p>\r\n[cli]\r\n$ cat unix.txt\r\nThe Unix operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe design of the Unix system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n$ sed -n \'2,4p\' unix.txt\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe design of the Unix system was to create an\r\n[/cli]\r\n<p>\r\nУдалить строки со 2 по 4:\r\n</p>\r\n[cli]\r\n$ sed \'2,4d\' unix.txt\r\nThe UNIX operating system was pioneered by Ken\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]\r\n<p>\r\nУдалить все строки, содержащие текст «Unix»:\r\n</p>\r\n[cli]\r\n$ sed \'/Unix/d\' unix.txt\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]\r\n<p>\r\nУдалить последние три символа из каждой строки:\r\n</p>\r\n[cli]\r\n$ sed \'s/...$//\' unix.txt\r\nThe Unix operating system was pioneered by \r\nThompson and Dennis Ritchie at Bell Laborator\r\nin the late 1960s. One of the primary goals\r\nthe design of the Unix system was to create\r\nenvironment that promoted efficient prog\r\ndevelopme\r\n[/cli]\r\n<p>\r\nДобавить три <code>*</code> в начало каждой строки:\r\n</p>\r\n[cli]\r\n$ sed \'s/^/***/\' unix.txt\r\n***The Unix operating system was pioneered by Ken\r\n***Thompson and Dennis Ritchie at Bell Laboratories\r\n***in the late 1960s. One of the primary goals in\r\n***the design of the Unix system was to create an\r\n***environment that promoted efficient program\r\n***development.\r\n[/cli]\r\n<p>\r\nУдалить строки, содержащие цифры:\r\n</p>\r\n[cli]\r\n$ sed \'/[0-9]/d\' unix.txt\r\nThe Unix operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nthe design of the Unix system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]\r\n<p>\r\nЗаменить первое вхождение «Unix» на «UNIX» во всех строках, содержащих «design»\r\n</p>\r\n[cli]\r\n$ sed \'/design/s/Unix/UNIX/\' unix.txt\r\nThe [grn]Unix[/grn] operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe [red]design[/red] of the [grn]UNIX[/grn] system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]','2018-02-12 16:26:17',1),(37,14,'Строки в Python','','','Python, Строка, ТипыДанных','Строки — упорядоченные последовательности символов, используемые для хранения и представления текстовой информации, поэтому с помощью строк можно работать со всем, что может быть представлено в текстовой форме.','<p>\r\nСтроки — упорядоченные последовательности символов, используемые для хранения и представления текстовой информации, поэтому с помощью строк можно работать со всем, что может быть представлено в текстовой форме.\r\n</p>\r\n<p>\r\nСуществует несколько литералов строк:\r\n</p>\r\n[idle]\r\n>>> spam = \"That is Alice\'s cat.\"\r\n>>> spam\r\n\"That is Alice\'s cat.\"\r\n>>> spam = \'That is Alice\\\'s cat.\'\r\n>>> spam\r\n\"That is Alice\'s cat.\"\r\n[/idle]\r\n<p>\r\nСтроки в апострофах и в кавычках — одно и то же. Причина наличия двух вариантов в том, чтобы позволить вставлять в литералы строк символы кавычек или апострофов, не используя экранирование.\r\n</p>\r\n<p>\r\nЭкранированные последовательности позволяют вставить символы, которые сложно ввести с клавиатуры.\r\n</p>\r\n<ul>\r\n  <li><code>\\n</code> — Перевод строки</li>\r\n  <li><code>\\a</code> — Звонок</li>\r\n  <li><code>\\f</code> — Перевод страницы</li>\r\n  <li><code>\\r</code> — Возврат каретки</li>\r\n  <li><code>\\t</code> — Горизонтальная табуляция</li>\r\n  <li><code>\\v</code> — Вертикальная табуляция</li>\r\n</ul>\r\n<p>\r\nЭкранированные символы <code>\\\'</code> и <code>\\\"</code> позволяют вставлять в строку соответственно апострофы и кавычку. Если перед открывающей кавычкой стоит символ «r» (в любом регистре), то механизм экранирования отключается:\r\n</p>\r\n[idle]\r\n>>> file = r\'C:\\file.txt\'\r\n>>> file\r\n\'C:\\\\file.txt\'\r\n[/idle]\r\n<p>\r\nСтроки в тройных апострофах или кавычках можно использовать для записи многострочных блоков текста. Внутри такой строки возможно присутствие кавычек и апострофов, главное, чтобы не было трех кавычек подряд.\r\n</p>\r\n[idle]\r\n>>> spam = \"\"\"\r\n... Lorem ipsum dolor sit amet, consectetur\r\n... adipiscing elit, sed do eiusmod tempor\r\n... incididunt ut labore et dolore magna aliqua.\r\n... \"\"\"\r\n>>> spam\r\n\'[red]\\n[/red]Lorem ipsum dolor sit amet, consectetur[red]\\n[/red]adipiscing elit, sed do eiusmod tempor[red]\\n[/red]incididunt ut labore et dolore magna aliqua.[red]\\n[/red]\'\r\n[/idle]\r\n<h2>Функции и методы строк</h2>\r\n<p>Конкатенация и репликация</p>\r\n[idle]\r\n>>> spam = \'Hello\' + \' \' + \'world!\'\r\n>>> spam\r\n\'Hello world!\'\r\n[/idle]\r\n[idle]\r\n>>> \'hello\' * 3\r\n\'hellohellohello\'\r\n[/idle]\r\n<p>Доступ по индексу и срезы</p>\r\n[idle]\r\n>>> spam = \'Hello world!\'\r\n>>> spam[0]\r\n\'H\'\r\n>>> spam[4]\r\n\'o\'\r\n>>> spam[-1]\r\n\'!\'\r\n>>> spam[0:5]\r\n\'Hello\'\r\n>>> spam[6:]\r\n\'world!\'\r\n>>> spam[:]\r\n\'Hello world!\'\r\n[/idle]\r\n<p>Использование операторов <code>in</code> и <code>not in</code></p>\r\n[idle]\r\n>>> \'Hello\' in \'Hello world!\'\r\nTrue\r\n>>> \'cat\' not in \'cats and dogs\'\r\nFalse\r\n[/idle]\r\n<p>Методы <code>upper()</code>, <code>lower()</code>, <code>isupper()</code>, <code>islower()</code></p>\r\n[idle]\r\n>>> spam = \'Hello world\'\r\n>>> spam.upper()\r\n\'HELLO WORLD\'\r\n>>> spam.lower()\r\n\'hello world\'\r\n>>> upper = spam.upper()\r\n>>> upper\r\n\'HELLO WORLD\'\r\n>>> upper.isupper()\r\nTrue\r\n>>> \'12345\'.islower()\r\nFalse\r\n[/idle]\r\n<p>Методы <code>isalpha()</code>, <code>isalnum()</code>, <code>isdecimal()</code>, <code>isspace()</code>, <code>istitle()</code></p>\r\n[idle]\r\n>>> \'abcde\'.isalpha()\r\nTrue\r\n>>> \'abc123\'.isalnum()\r\nTrue\r\n>>> \'12345\'.isdecimal()\r\nTrue\r\n>>> \' \'.isspace()\r\nTrue\r\n>>> \'\\t\\n\'.isspace()\r\nTrue\r\n>>> \'This Is Title Case\'.istitle()\r\nTrue\r\n[/idle]\r\n<p>\r\nМетоды <code>startswith()</code> и <code>endswith()</code> возвращают <code>True</code>, если строки, для которых они вызываются, соответственно начинаются или заканчиваются строкой, переданной методу.\r\n</p>\r\n[idle]\r\n>>> spam = \'Hello world!\'\r\n>>> spam.startswith(\'Hello\')\r\nTrue\r\n>>> spam.endswith(\'!\')\r\nTrue\r\n[/idle]\r\n<p>Методы <code>join()</code> и <code>split()</code></p>\r\n[idle]\r\n>>> \',\'.join([\'cat\', \'rat\', \'dog\'])\r\n\'cat,rat,dog\'\r\n>>> \'My name is Simon\'.split()\r\n[\'My\', \'name\', \'is\', \'Simon\']\r\n>>> \'cat,rat,dog\'.split(\',\')\r\n[\'cat\', \'rat\', \'dog\']\r\n[/idle]\r\n<p>Удаление пробелов с помощью методов <code>strip()</code>, <code>lstrip()</code>, <code>rstrip()</code></p>\r\n[idle]\r\n>>> spam = \' Hello world! \'\r\n>>> spam.strip()\r\n\'Hello world!\'\r\n>>> spam.lstrip()\r\n\'Hello world! \'\r\n>>> spam.rstrip()\r\n\' Hello world!\'\r\n[/idle]\r\n[idle]\r\n>>> spam = \'Hello world!\'\r\n>>> spam.strip(\'H!\')\r\n\'ello world\'\r\n[/idle]\r\n<p>Копирование строки в буфер обмена и вставка из буфера обмена</p>\r\n[idle]\r\n>>> import pyperclip\r\n>>> pyperclip.copy(\'Hello world!\')\r\n>>> pyperclip.paste()\r\n\'Hello world!\'\r\n[/idle]','2018-02-14 11:48:46',1),(38,9,'Команда wc','','','Bash, CLI, Linux, count, word, Команда','Команда wc (от word count — подсчёт слов) используется подсчета числа строк, слов и символов в указанном файле. Когда указано более одного файла, команда осуществляет подсчет в каждом файле и затем выдает общее число. Если файл не задан, данные читаются со стандартного ввода.','<p>\r\nКоманда wc (от word count — подсчёт слов) используется подсчета числа строк, слов и символов в указанном файле. Когда указано более одного файла, команда осуществляет подсчет в каждом файле и затем выдает общее число. Если входной файл не задан, или равен «-», то данные считываются со стандартного ввода.\r\n</p>\r\n[code]\r\nwc [grn][опции][/grn] [red][файл(ы)][/red]\r\n[/code]\r\n<p>\r\nОпции:\r\n</p>\r\n<ul>\r\n  <li><code>-l</code> — вывод количества новых строк;</li>\r\n  <li><code>-w</code> — вывод количества слов;</li>\r\n  <li><code>-m</code> — вывод общего количества символов;</li>\r\n  <li><code>-c</code> — вывод количества байт;</li>\r\n  <li><code>-L</code> — вывод длины самой длинной строки в заданном тексте.</li>\r\n</ul>\r\n<p>\r\nПо умолчанию используется набор <code>-lwc</code>.\r\n</p>\r\n[cli]\r\n$ cat unix.txt\r\nThe Unix operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe design of the Unix system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n$ cat lorem.txt\r\nLorem ipsum dolor sit amet, consectetur adipiscing\r\nelit, sed do eiusmod tempor incididunt ut labore et\r\ndolore magna aliqua. Ut enim ad minim veniam, quis\r\nnostrud exercitation ullamco laboris nisi ut aliquip\r\nex ea commodo consequat.\r\n[/cli]\r\n[cli]\r\n$ wc unix.txt\r\n  6 41 247 unix.txt\r\n[/cli]\r\n[cli]\r\n$ wc -l unix.txt\r\n6 unix.txt\r\n[/cli]\r\n[cli]\r\n$ wc unix.txt lorem.txt\r\n  6 41 247 unix.txt\r\n  5 36 232 lorem.txt\r\n 11 77 479 Итого\r\n[/cli]','2018-02-15 22:05:12',1),(39,9,'Команда tr','','','Bash, CLI, Linux, Команда','Команда служит для замены выбранных символов на другие символы или удаления их. В отличие от большинства других команд, не принимает имен файлов в качестве аргумента. Ввод команды осуществляется или со стандартного ввода, или с вывода других программ путем перенаправления.','<p>\r\nКоманда служит для замены выбранных символов на другие символы или удаления их. В отличие от большинства других команд, не принимает имен файлов в качестве аргумента. Ввод команды <code>tr</code> осуществляется или со стандартного ввода, или с вывода других программ путем перенаправления.\r\n</p>\r\n[code]\r\ntr [red][опция][/red] [grn]исходные_символы[/grn] [grn]целевые_символы[/grn]\r\n[/code]\r\n<p>\r\nЛюбой символ, который содержат <code>исходные символы</code> во входных данных, будет преобазован в соответствующий символ, включенный в <code>целевые символы</code>.\r\n</p>\r\n[cli]\r\n$ cat unix.txt\r\nThe Unix operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe design of the Unix system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]\r\n[cli]\r\n$ tr e x < unix.txt\r\nTh[red]x[/red] Unix op[red]x[/red]rating syst[red]x[/red]m was pion[red]x[/red][red]x[/red]r[red]x[/red]d by K[red]x[/red]n\r\nThompson and D[red]x[/red]nnis Ritchi[red]x[/red] at B[red]x[/red]ll Laboratori[red]x[/red]s\r\nin th[red]x[/red] lat[red]x[/red] 1960s. On[red]x[/red] of th[red]x[/red] primary goals in\r\nth[red]x[/red] d[red]x[/red]sign of th[red]x[/red] Unix syst[red]x[/red]m was to cr[red]x[/red]at[red]x[/red] an\r\n[red]x[/red]nvironm[red]x[/red]nt that promot[red]x[/red]d [red]x[/red]ffici[red]x[/red]nt program\r\nd[red]x[/red]v[red]x[/red]lopm[red]x[/red]nt.\r\n[/cli]\r\n[cli]\r\n$ tr [a-z] [A-Z] < unix.txt\r\nTHE UNIX OPERATING SYSTEM WAS PIONEERED BY KEN\r\nTHOMPSON AND DENNIS RITCHIE AT BELL LABORATORIES\r\nIN THE LATE 1960S. ONE OF THE PRIMARY GOALS IN\r\nTHE DESIGN OF THE UNIX SYSTEM WAS TO CREATE AN\r\nENVIRONMENT THAT PROMOTED EFFICIENT PROGRAM\r\nDEVELOPMENT.\r\n[/cli]\r\n<p>\r\nС помощью параметра <code>-d</code> можно удалить отдельные символы из потока ввода:\r\n</p>\r\n[cli]\r\n$ tr -d \' \' < unix.txt\r\nTheUnixoperatingsystemwaspioneeredbyKen\r\nThompsonandDennisRitchieatBellLaboratories\r\ninthelate1960s.Oneoftheprimarygoalsin\r\nthedesignoftheUnixsystemwastocreatean\r\nenvironmentthatpromotedefficientprogram\r\ndevelopment.\r\n[/cli]\r\n<p>Указав параметр <code>-s</code> можно заменить последовательность повторяющихся символов на единственный символ:\r\n</p>\r\n[cli]\r\n$cat spaces.txt\r\nThis   is   an   example   of   a\r\nfile   that   contains   a   lot\r\nof   blank   spaces.\r\n$ tr -s \' \' \' \' < spaces.txt\r\nThis is an example of a\r\nfile that contains a lot\r\nof blank spaces.\r\n[/cli]\r\n<p>\r\nКоманда <code>tr</code> также оперирует с управляющими символами и прочими элементами форматирования:\r\n</p>\r\n<ul>\r\n  <li><code>\\\\</code> — обратный слэш</li>\r\n  <li><code>\\f</code> — перевод страницы</li>\r\n  <li><code>\\n</code> — новая строка</li>\r\n  <li><code>\\r</code> — возврат каретки</li>\r\n  <li><code>\\t</code> — горизонтальная табуляция</li>\r\n  <li><code>\\v</code> — вертикальная табуляция</li>\r\n</ul>\r\n<p>\r\nНапример, заменить табуляцию на пробел:\r\n</p>\r\n[cli]\r\n$ tr \'\\t\' \' \' < example.txt\r\n[/cli]\r\n<p>\r\nМожно указать класс символов из набора предопределенных символов:\r\n</p>\r\n<ul>\r\n  <li><code>[:alnum:]</code> — Символы алфавита в любом регистре и цифры</li>\r\n  <li><code>[:alpha:]</code> — Символы алфавита в любом регистре</li>\r\n  <li><code>[:blank:]</code> — Пустое множество</li>\r\n  <li><code>[:cntrl:]</code> — Управляющие символы</li>\r\n  <li><code>[:digit:]</code> — Десятичные цифры</li>\r\n  <li><code>[:graph:]</code> — Все символы, которые могут быть напечатаны, кроме пробела</li>\r\n  <li><code>[:lower:]</code> — Алфавитные символы в нижнем регистре</li>\r\n  <li><code>[:print:]</code> — Все символы, которые могут быть напечатаны</li>\r\n  <li><code>[:punct:]</code> — Все символы пунктуации</li>\r\n  <li><code>[:space:]</code> — Пробел или табуляция</li>\r\n  <li><code>[:upper:]</code> — Алфавитные символы в верхнем регистре</li>\r\n  <li><code>[:xdigit:]</code> — Шестнадцатеричные цифры</li>\r\n</ul>\r\n<p>\r\nПеревести все символы нижнего регистра в верхний регистр:\r\n</p>\r\n[cli]\r\n$ tr \"[:lower:]\" \"[:upper:]\" < example.txt\r\n[/cli]','2018-02-16 09:43:47',1),(40,7,'Макет печатной формы документа','','','1С:Предприятие, Документ, Макет, Печать','Одно из предназначений макета, подчиненного объекту конфигурации и содержащего табличный документ, — создание печатной формы этого объекта. Создание печатной формы заключается в конструировании ее составных частей — именованных областей, из которых затем «собирается» готовая печатная форма.','<p>\r\nОткроем в конфигураторе окно редактирования объекта конфигурации Документ «ПриходнаяНакладная». Перейдем на закладку «Макеты», нажмем кнопку «Конструкторы» и запустим конструктор печати.\r\n</p>\r\n<p>\r\nВ открывшемся окне конструктора на первом шаге укажем, что будет создана новая команда «Печать» для формирования печатной формы документа:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/40/1.jpg\"\" alt=\"\" />\r\n</p>\r\n<p>\r\nНа втором шаге определим реквизиты документа, которые будет содержать шапка печатной формы:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/40/2.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nНа третьем шаге определим, что все реквизиты табличной части будут отображены в печатной форме:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/40/3.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nНа четвертом шаге конструктор предложит сформировать подвал печатной формы. Ничего не указываем (подвал использовать не будем) и переходим к следующему шагу.\r\n</p>\r\n<p>\r\nЗдесь ничего не меняем, тем самым согласимся с тем, что команда для вызова процедуры формирования печатной формы будет помещена в командную панель формы, в раздел «Важное».\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/40/4.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nНажмем OK. В конфигураторе откроется модуль команды «Печать», модуль менеджера документа «ПриходнаяНакладная» и макет этого документа.\r\n</p>\r\n<p>Модуль команды Печать</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)\r\n	ТабДок = Новый ТабличныйДокумент;\r\n	Печать(ТабДок, ПараметрКоманды);\r\n\r\n	ТабДок.ОтображатьСетку = Ложь;\r\n	ТабДок.Защита = Ложь;\r\n	ТабДок.ТолькоПросмотр = Ложь;\r\n	ТабДок.ОтображатьЗаголовки = Ложь;\r\n\r\n	ТабДок.Показать();\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура Печать(ТабДок, ПараметрКоманды)\r\n	Документы.ПриходнаяНакладная.Печать(ТабДок, ПараметрКоманды);\r\nКонецПроцедуры\r\n[/язык]\r\n<p>Модуль менеджера документа</p>\r\n[язык]\r\n\r\nПроцедура Печать(ТабДок, Ссылка) Экспорт\r\n	Макет = Документы.ПриходнаяНакладная.ПолучитьМакет(\"Печать\");\r\n	Запрос = Новый Запрос();\r\n	Запрос.Текст =\r\n	\"ВЫБРАТЬ\r\n	|	ПриходнаяНакладная.Дата,\r\n	|	ПриходнаяНакладная.Номер,\r\n	|	ПриходнаяНакладная.Склад,\r\n	|	ПриходнаяНакладная.Материалы.(\r\n	|		НомерСтроки,\r\n	|		Материал,\r\n	|		Количество,\r\n	|		Цена,\r\n	|		Сумма\r\n	|	)\r\n	|ИЗ\r\n	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная\r\n	|ГДЕ\r\n	|	ПриходнаяНакладная.Ссылка В (&Ссылка)\";\r\n	Запрос.Параметры.Вставить(\"Ссылка\", Ссылка);\r\n	Выборка = Запрос.Выполнить().Выбрать();\r\n\r\n	ОбластьЗаголовок = Макет.ПолучитьОбласть(\"Заголовок\");\r\n	Шапка = Макет.ПолучитьОбласть(\"Шапка\");\r\n	ОбластьМатериалыШапка = Макет.ПолучитьОбласть(\"МатериалыШапка\");\r\n	ОбластьМатериалы = Макет.ПолучитьОбласть(\"Материалы\");\r\n	ТабДок.Очистить();\r\n\r\n	ВставлятьРазделительСтраниц = Ложь;\r\n	Пока Выборка.Следующий() Цикл\r\n		Если ВставлятьРазделительСтраниц Тогда\r\n			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();\r\n		КонецЕсли;\r\n\r\n		ТабДок.Вывести(ОбластьЗаголовок);\r\n\r\n		Шапка.Параметры.Заполнить(Выборка);\r\n		ТабДок.Вывести(Шапка, Выборка.Уровень());\r\n\r\n		ТабДок.Вывести(ОбластьМатериалыШапка);\r\n		ВыборкаМатериалы = Выборка.Материалы.Выбрать();\r\n		Пока ВыборкаМатериалы.Следующий() Цикл\r\n			ОбластьМатериалы.Параметры.Заполнить(ВыборкаМатериалы);\r\n			ТабДок.Вывести(ОбластьМатериалы, ВыборкаМатериалы.Уровень());\r\n		КонецЦикла;\r\n		\r\n		ВставлятьРазделительСтраниц = Истина;\r\n	КонецЦикла;\r\nКонецПроцедуры\r\n[/язык]\r\n<p>Макет документа</p>\r\n<p>\r\n<img src=\"/files/blog/40/5.jpg\" alt=\"\" />\r\n</p>\r\n<h2>Редактирование макета</h2>\r\n<p> \r\nДобавим новую область для вывода итоговой суммы документа. Выделим мышью две пустые строки под табличной частью документа и выполним пункт главного меню Таблица&nbsp;> Имена&nbsp;> Назначить имя. Назовем область <code>Всего</code>, нажмем ОК.\r\n</p>\r\n<p>\r\nВ созданной области, в колонке <code>Цена</code>, напишем <code>ВСЕГО</code>, а в колонке <code>Сумма</code> напишем <code>ВсегоПоДокументу</code>:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/40/6.jpg\" class=\"zoom\"><img src=\"/files/blog/40/6.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВызвав палитру свойств для последней заполненной нами ячейки, в свойстве <code>Заполнение</code> укажем, что в этой ячейке будет находиться не текст, а параметр.\r\n</p>\r\n<p>\r\nОткроем модуль менеджера документа «ПриходнаяНакладная», найдем в нем процедуру <code>Печать</code> и отредактируем ее следующим образом\r\n[язык]\r\nПроцедура Печать(ТабДок, Ссылка) Экспорт\r\n	Макет = Документы.ПриходнаяНакладная.ПолучитьМакет(\"Печать\");\r\n	Запрос = Новый Запрос();\r\n	Запрос.Текст =\r\n	\"ВЫБРАТЬ\r\n	|	ПриходнаяНакладная.Дата,\r\n	|	ПриходнаяНакладная.Номер,\r\n	|	ПриходнаяНакладная.Склад,\r\n	|	ПриходнаяНакладная.Материалы.(\r\n	|		НомерСтроки,\r\n	|		Материал,\r\n	|		Количество,\r\n	|		Цена,\r\n	|		Сумма\r\n	|	)\r\n	|ИЗ\r\n	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная\r\n	|ГДЕ\r\n	|	ПриходнаяНакладная.Ссылка В (&Ссылка)\";\r\n	Запрос.Параметры.Вставить(\"Ссылка\", Ссылка);\r\n	Выборка = Запрос.Выполнить().Выбрать();\r\n\r\n	ОбластьЗаголовок = Макет.ПолучитьОбласть(\"Заголовок\");\r\n	Шапка = Макет.ПолучитьОбласть(\"Шапка\");\r\n	ОбластьМатериалыШапка = Макет.ПолучитьОбласть(\"МатериалыШапка\");\r\n	ОбластьМатериалы = Макет.ПолучитьОбласть(\"Материалы\");\r\n	// получаем область макета «Всего»\r\n	ОбластьВсего = Макет.ПолучитьОбласть(\"Всего\");\r\n	ТабДок.Очистить();\r\n\r\n	ВставлятьРазделительСтраниц = Ложь;\r\n	// цикл по документам (на случай печати списка)\r\n	Пока Выборка.Следующий() Цикл\r\n		Если ВставлятьРазделительСтраниц Тогда\r\n			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();\r\n		КонецЕсли;\r\n\r\n		ТабДок.Вывести(ОбластьЗаголовок);\r\n\r\n		Шапка.Параметры.Заполнить(Выборка);\r\n		ТабДок.Вывести(Шапка, Выборка.Уровень());\r\n\r\n		ТабДок.Вывести(ОбластьМатериалыШапка);\r\n		ВыборкаМатериалы = Выборка.Материалы.Выбрать();\r\n		// сумма табличной части документа\r\n		СуммаИтог = 0;\r\n		Пока ВыборкаМатериалы.Следующий() Цикл\r\n			ОбластьМатериалы.Параметры.Заполнить(ВыборкаМатериалы);\r\n			ТабДок.Вывести(ОбластьМатериалы, ВыборкаМатериалы.Уровень());\r\n			// увеличиваем сумму на каждой итерации\r\n			СуммаИтог = СуммаИтог + ВыборкаМатериалы.Сумма;\r\n		КонецЦикла;\r\n		\r\n		// устанавливаем значение параметра области\r\n		ОбластьВсего.Параметры.ВсегоПоДокументу = СуммаИтог;\r\n		// выводим область макета «Всего»\r\n		ТабДок.Вывести(ОбластьВсего);\r\n		ВставлятьРазделительСтраниц = Истина;\r\n	КонецЦикла;\r\nКонецПроцедуры\r\n[/язык]','2018-02-16 14:47:12',1),(41,14,'Регулярные выражения в Python','','','Python, RegExp, Модуль, Шаблон','Регулярные выражения — это специальные шаблоны для поиска и замены строк в тексте. Внутри этих шаблонов используются сокращенные обозначения групп символов. В Python для работы с регулярными выражениями есть модуль re.','<p>\r\nВ Python для работы с регулярными выражениями есть модуль <code>re</code>. Для использования его нужно импортировать. Рассмотрим простой пример поиска номера телефона:\r\n</p>\r\n[idle]\r\n>>> import re\r\n>>> match = re.search(\'\\d{3}-\\d{3}-\\d{4}\', \'Мой номер 495-456-9102\')\r\n>>> print(\'Найденный телефонный номер: \' + match.group())\r\nНайденный телефонный номер: 495-456-9102\r\n[/idle]\r\n<p>\r\nЕсли найдены совпадения, метод <code>re.search()</code> возвращает объект <code>Match</code>. Если совпадений нет — <code>None</code>.\r\n</p>\r\n<p>\r\nМетоды, которые предоставляет библиотека <code>re</code>:\r\n</p>\r\n<ul>\r\n  <li><code>re.match(pattern, string, [flags=0])</code></li>\r\n  <li><code>re.search(pattern, string, [flags=0])</code></li>\r\n  <li><code>re.findall(pattern, string, [flags=0])</code></li>\r\n  <li><code>re.split(pattern, string, [maxsplit=0], [flags=0])</code></li>\r\n  <li><code>re.sub(pattern, replace, string, [count=0], [flags=0])</code></li>\r\n  <li><code>re.compile(pattern, [flags=0])</code></li>\r\n</ul>\r\n<p>\r\nСписок метасимволов, которые поддерживает модуль <code>re</code>:\r\n</p>\r\n[code]\r\n. ^ $ * + ? { } [ ] | ( )\r\n[/code]\r\n<p>\r\nНазначение метасимволов\r\n</p>\r\n<ul>\r\n  <li><code>.</code> — Один любой символ, кроме новой строки <code>\\n</code></li>\r\n  <li><code>?</code> — 0 или 1 вхождение шаблона слева</li>\r\n  <li><code>+</code> — 1 и более вхождений шаблона слева</li>\r\n  <li><code>*</code> — 0 и более вхождений шаблона слева</li>\r\n  <li><code>\\w</code> — Любая цифра или буква (<code>\\W</code> — все, кроме буквы или цифры)</li>\r\n  <li><code>\\d</code> — Любая цифра от 0 до 9 (<code>\\D</code> — все, кроме цифры)</li>\r\n  <li><code>\\s</code> — Любой пробельный символ (<code>\\S</code> — любой непробельнй символ)</li>\r\n  <li><code>\\b</code> — Граница слова</li>\r\n  <li><code>[…]</code> — Один из символов в скобках (<code>[^…]</code> — любой символ, кроме тех, что в скобках)</li>\r\n  <li><code>\\</code> — Экранирование специальных символов (<code>\\.</code> означает точку или <code>\\+</code> — знак «плюс»)</li>\r\n  <li><code>^</code> и <code>$</code> — Начало и конец строки соответственно</li>\r\n  <li><code>{n,m}</code> — От <code>n</code> до <code>m</code> вхождений (<code>{n,}</code> — <code>n</code> и больше)</li>\r\n  <li><code>a|b</code> — Соответствует <code>a</code> или <code>b</code></li>\r\n  <li><code>(…)</code> — Группирует выражение и возвращает найденный текст</li>\r\n  <li><code>\\t,\\n</code> — Символ табуляции и новой строки соответственно</li>\r\n</ul>\r\n<p>\r\nСоздание групп с помощью круглых скобок:\r\n</p>\r\n[idle]\r\n>>> match = re.search(\'(\\d{3})-(\\d{3}-\\d{4})\', \'Мой номер 495-456-9102\')\r\n>>> match.group()\r\n\'495-456-9102\'\r\n>>> match.group(0)\r\n\'495-456-9102\'\r\n>>> print(\'Код города: \' + match.group(1))\r\nКод города: 495\r\n>>> print(\'Номер телефона: \' + match.group(2))\r\nНомер телефона: 456-9102\r\n[/idle]\r\n<p>Если нужно извлечь сразу все группы:</p>\r\n[idle]\r\n>>> match = re.search(\'(\\d{3})-(\\d{3}-\\d{4})\', \'Мой номер 495-456-9102\')\r\n>>> match.groups()\r\n(\'495\', \'456-9102\')\r\n>>> code, number = match.groups()\r\n>>> code\r\n\'495\'\r\n>>> number\r\n\'456-9102\'\r\n[/idle]\r\n<p>Метод <code>re.search()</code> находит только первое вхождение шаблона. Если нужно найти все вхождения, используйте метод <code>re.findall()</code>:</p>\r\n[idle]\r\n>>> matches = re.findall(\'\\d{3}-\\d{3}-\\d{4}\', \'Домашний 495-456-9102 или мобильный 926-123-4567\')\r\n>>> matches\r\n[\'495-456-9102\', \'926-123-4567\']\r\n[/idle]\r\n<p>Поиск всех групп для всех совпадений шаблона:</p>\r\n[idle]\r\n>>> matches = re.findall(\'(\\d{3})-(\\d{3}-\\d{4})\', \'Домашний 495-456-9102 или мобильный 926-123-4567\')\r\n>>> matches\r\n[(\'495\', \'456-9102\'), (\'926\', \'123-4567\')]\r\n>>> matches[0][0]\r\n\'495\'\r\n>>> matches[1][1]\r\n\'123-4567\'\r\n[/idle]\r\n<p>Метод <code>re.split()</code> разделяет строку по заданному шаблону:</p>\r\n[idle]\r\n>>> re.split(\'\\n\', \'First line.\\nSecond line.\\nThird line.\')\r\n[\'First line.\', \'Second line.\', \'Third line.\']\r\n[/idle]\r\n<p>\r\nМетод <code>re.sub()</code> ищет шаблон в строке и заменяет его на указанную подстроку. Если шаблон не найден, строка остается неизменной.\r\n</p>\r\n[idle]\r\n>>> re.sub(\'RoboCop\', \'Робот-полицейский\', \'RoboCop is part man, part machine, all cop.\')\r\n\'Робот-полицейский is part man, part machine, all cop.\'\r\n[/idle]\r\n<p>\r\nВ строке замены можно использовать обратные ссылки <code>\\1</code>, <code>\\2</code>, <code>\\3</code> и т.д.\r\n<p>\r\n[idle]\r\n>>> re.sub(\'(\\d{3})-(\\d{3}-\\d{4})\', \'код города \\\\1, номер телефона \\\\2\', \'Мой номер: 495-456-9102\')\r\n\'Мой номер: код города 495, номер телефона 456-9102\'\r\n[/idle]\r\nМетод <code>re.match()</code> ищет по заданному шаблону в начале строки.\r\n</p>\r\n[idle]\r\n>>> None == re.match(\'\\d{3}-\\d{3}-\\d{4}\', \'495-456-9102 Мой номер\')\r\nFalse\r\n>>> None == re.match(\'\\d{3}-\\d{3}-\\d{4}\', \'Мой номер 495-456-9102\')\r\nTrue\r\n[/idle]\r\n<p>\r\nМетод <code>re.compite()</code> позволяет собрать регулярное выражение в отдельный объект, который может быть использован для поиска. Это также избавляет от переписывания одного и того же выражения.\r\n</p>\r\n[python]\r\nregexp = re.compile(\'\\d{3}-\\d{3}-\\d{4}\')\r\nmatch = regexp.search(\'Мой номер 495-456-9102\')\r\nprint(\'Найденный телефонный номер: \' + match.group())\r\n[/python]\r\n[code]\r\nНайденный телефонный номер: 495-456-9102\r\n[/code]\r\n<p>Флаги компиляции регулярных выражений</p>\r\n<ul>\r\n  <li><code>re.A</code> или <code>re.ASCII</code></li>\r\n  <li><code>re.DEBUG</code></li>\r\n  <li><code>re.I</code> или <code>re.IGNORECASE</code></li>\r\n  <li><code>re.L</code> или <code>re.LOCALE</code></li>\r\n  <li><code>re.M</code> или <code>re.MULTILINE</code></li>\r\n  <li><code>re.S</code> или <code>re.DOTALL</code></li>\r\n  <li><code>re.X</code> или <code>re.VERBOSE</code></li>\r\n</ul>\r\n<p>Игнорирование регистра при поиске соответствий</p>\r\n[idle]\r\n>>> re.search(\'robocop\', \'RoboCop is part man, part machine, all cop.\', re.IGNORECASE).group()\r\n\'RoboCop\'\r\n[/idle]\r\n<p>\r\nКомбинации <code>.*</code> соответствует все, за исключением символа новой строки. С помощью <code>re.DOTALL</code> можно установить режим, при котором точке соответствует также символ новой строки.\r\n</p>\r\n[idle]\r\n>>> re.search(\'.*\', \'First line.\\nSecond line.\\nThird line.\').group()\r\n\'First line.\'\r\n>>> re.search(\'.*\', \'First line.\\nSecond line.\\nThird line.\', re.DOTALL).group()\r\n\'First line.\\nSecond line.\\nThird line.\'\r\n[/idle]\r\n<p>Если нужно использовать несколько флагов компиляции:</p>\r\n[idle]\r\n>>> regexp = re.compile(\'foo\', re.DOTALL | re.IGNORECASE)\r\n[/idle]\r\n<p>\r\nФлаг компиляции <code>re.VERBOSE</code> включает многословный режим, при котором пробелы и комментарии игнорируются.\r\n</p>\r\n[python]\r\n# регулярное выражение для номера телефона\r\nphoneRegex = re.compile(\'\'\'\r\n    (?:\\(?(\\d{3})\\)?)?             # код города\r\n    (?:\\s|-)?                      # разделитель\r\n    (\\d{3})                        # первые три цифры\r\n    (?:\\s|-)?                      # разделитель\r\n    (\\d{2})                        # еще две цифры\r\n    (?:\\s|-)?                      # разделитель\r\n    (\\d{2})                        # еще две цифры\r\n    (?:\\s*доб[.а-я]*\\s*(\\d{2,5}))? # добавочный\r\n    \'\'\', re.VERBOSE)\r\n\r\n# регулярное выражение для адреса эл.почты\r\nemailRegex = re.compile(\'\'\'\r\n    [a-z0-9._-]+     # имя пользователя\r\n    @                # @\r\n    [a-z0-9.-]+      # первая часть домена\r\n    \\.[a-z]{2,6}     # вторая часть домена\r\n    \'\'\', re.VERBOSE | re.IGNORECASE)\r\n[/python]','2018-02-17 10:07:09',1),(42,11,'Узелки на память','','','','Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.','<p>\r\nСвойство <code>Ведущее</code> для измерения регистра накопления имеет смысл лишь тогда, когда измерение — ссылка на объект конфигурации. В этом случае считается, что запись регистра сведений имеет смысл, только пока существует этот объект. При удалении объекта, записи по нему из регистра будут удалены автоматически.\r\n<p>\r\n<p>\r\nЕсли установлено свойство <code>Ведущее</code> для измерения регистра типа <code>СправочникСсылка.Номенклатура</code>, в форме элемента справочника <code>Номенклатура</code>,  в панели навигации появится ссылка. По ней возможен переход к записям регистра, которые содержат в измерении <code>Номенклатура</code> ссылку на этот элемент справочника.\r\n</p>\r\n<hr>\r\n<p>\r\nФункция в общем модуле <code>РаботаСоСправочниками</code> (Сервер, ВызовСервера) для получения данных из периодического регистра сведений <code>ЦеныНоменклатуры</code>.\r\n</p>\r\n[язык]\r\nФункция ПолучитьРозничнуюЦену(Дата, Номенклатура) Экспорт\r\n    // создать отбор по номенкатуре для получения данных из регистра\r\n    Отбор = Новый Структура(\"Номенклатура\", Номенклатура);\r\n    // получить значения периодического регистра сведений на указанную дату\r\n    ЗначенияРесурсов = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(\r\n        Дата,\r\n        Отбор\r\n    );\r\n    Возврат ЗначенияРесурсов.Цена;\r\nКонецФункции\r\n[/язык]\r\n<p>Вызов этой функции из модуля формы документа <code>РасходнаяНакладная</code>.</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ПереченьНоменклатурыНоменклатураПриИзменении(Элемент)\r\n    // получить текущую строку табличной части\r\n    СтрокаТабличнойЧасти = ЭтаФорма.Элементы.ПереченьНоменклатуры.ТекущиеДанные;\r\n    // установить цену на дату документа\r\n    СтрокаТабличнойЧасти.Цена = РаботаСоСправочниками.ПолучитьРозничнуюЦену(\r\n        Объект.Дата,\r\n        СтрокаТабличнойЧасти.Номенклатура\r\n    );\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура ДатаПриИзменении(Элемент)\r\n    // получить все строки табличной части\r\n    ПереченьНоменклатуры = Объект.ПереченьНоменклатуры;\r\n    Для Каждого СтрокаТабличнойЧасти Из ПереченьНоменклатуры Цикл\r\n        // установить цену на дату документа\r\n        СтрокаТабличнойЧасти.Цена = РаботаСоСправочниками.РозничнаяЦена(\r\n            Объект.Дата,\r\n            СтрокаТабличнойЧасти.Номенклатура\r\n        );\r\n    КонецЦикла;\r\nКонецПроцедуры\r\n[/язык]\r\n<hr>\r\n<p>\r\nСтандартное представление элемента справочника определяется свойством <code>ОсновноеПредставление</code>. По умолчанию это свойство установлено в значение <code>В виде наименования</code>.\r\n</p>\r\n<p>\r\nМеханизм формирования представления состоит из двух этапов: определения реквизитов, участвующих в формировании представления, и собственно формирование представления. Для этого используются обработчики событий <code>ОбработкаПолученияПолейПредставления</code> и <code>ОбработкаПолученияПредставления</code> менеджера объекта.\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)\r\n	СтандартнаяОбработка = Ложь;\r\n	Поля.Добавить(\"Наименование\");\r\n	Поля.Добавить(\"ВидНоменклатуры\");\r\nКонецПроцедуры\r\n\r\nПроцедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)\r\n	СтандартнаяОбработка = Ложь;\r\n	Если ЗначениеЗаполнено(Данные.ВидНоменклатуры) Тогда\r\n		Представление =\r\n			Данные.Наименование + \"(\" + Строка(Данные.ВидНоменклатуры) + \")\";\r\n	Иначе\r\n		Представление = Данные.Наименование;\r\n	КонецЕсли;\r\nКонецПроцедуры\r\n[/язык]\r\n<hr>\r\n<p>Представление списка справочника, модуль формы</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ПриОткрытии(Отказ)\r\n    ЭтаФорма.Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;\r\n    //ЭтаФорма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;\r\n    //ЭтаФорма.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;\r\n    ЭтаФорма.Элементы.Список.НачальноеОтображениеДерева =\r\n        НачальноеОтображениеДерева.РаскрыватьВсеУровни;\r\n    //ЭтаФорма.Элементы.Список.НачальноеОтображениеДерева =\r\n    //    НачальноеОтображениеДерева.НеРаскрывать;\r\n    //ЭтаФорма.Элементы.Список.НачальноеОтображениеДерева =\r\n    //    НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;\r\nКонецПроцедуры\r\n[/язык]\r\n<hr>\r\n<p>\r\nДвижения документа <code>ПриходнаяНакладная</code> по двум регистрам накопления <code>ОстаткиМатериалов</code> и <code>СтоимостьМатериалов</code>, модуль объекта.\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаПроведения(Отказ, Режим)\r\n    Движения.ОстаткиМатериалов.Записывать = Истина;\r\n    Движения.СтоимостьМатериалов.Записывать = Истина;\r\n    Для Каждого ТекСтрокаМатериалы Из Материалы Цикл\r\n        // регистр ОстаткиМатериалов Приход\r\n        Движение = Движения.ОстаткиМатериалов.Добавить();\r\n        Движение.ВидДвижения = ВидДвиженияНакопления.Приход;\r\n        Движение.Период = Дата;\r\n        Движение.Материал = ТекСтрокаМатериалы.Материал;\r\n        Движение.Склад = Склад;\r\n        Движение.Количество = ТекСтрокаМатериалы.Количество;     \r\n        // регистр СтоимостьМатериалов Приход\r\n        Движение = Движения.СтоимостьМатериалов.Добавить();\r\n        Движение.ВидДвижения = ВидДвиженияНакопления.Приход;\r\n        Движение.Период = Дата;\r\n        Движение.Материал = ТекСтрокаМатериалы.Материал;\r\n        Движение.Стоимость = ТекСтрокаМатериалы.Сумма;\r\n    КонецЦикла;\r\nКонецПроцедуры\r\n[/язык]\r\n<hr>\r\n<p>\r\nТекст запроса может содержать предопределенные данные конфигурации, такие как:\r\n</p>\r\n<ul>\r\n  <li>значения перечислений;</li> \r\n  <li>предопределенные данные: \r\n    <ul>\r\n      <li>справочников;</li>\r\n      <li>планов видов характеристик;</li>\r\n      <li>планов счетов;</li>\r\n      <li>планов видов расчетов;</li>\r\n    </ul>\r\n  </li>\r\n  <li>пустые ссылки;</li>\r\n</ul>\r\n<p>\r\nОбращение в запросах к предопределенным данным конфигурации и значениям системных перечислений осуществляется с помощью функции <code>ЗНАЧЕНИЕ()</code>.\r\n</p>\r\n[code]\r\nГДЕ Город = ЗНАЧЕНИЕ(Справочник.Города.Москва)\r\nГДЕ Город = ЗНАЧЕНИЕ(Справочник.Города.ПустаяСсылка)\r\nГДЕ ТипТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Услуга)\r\nГДЕ ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)\r\n[/code]\r\n<hr>','2018-02-17 13:30:15',0),(43,9,'Команда grep','','','Bash, CLI, Linux, RegExp, Команда, Шаблон','Команда находит в одном или нескольких файлах строки, совпадающие с указанным шаблоном. Если в команде указано несколько файлов, каждая найденная строка предваряется именем файла.','<p>\r\nКоманда находит в одном или нескольких файлах строки, совпадающие с указанным шаблоном. Если в команде указано несколько файлов, каждая найденная строка предваряется именем файла.\r\n</p>\r\n[code]\r\ngrep [grn][опции][/grn] [red]шаблон[/red] [grn]файл(ы)[/grn]\r\n[/code]\r\n<p>\r\nПоиск строки «Unix» в файле <code>unix.txt</code>:\r\n</p>\r\n[cli]\r\n$ cat unix.txt\r\nThe Unix operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe design of the Unix system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n$ grep \'Unix\' unix.txt\r\nThe [red]Unix[/red] operating system was pioneered by Ken\r\nthe design of the [red]Unix[/red] system was to create an\r\n[/cli]\r\n<p>Поиск строк, содержащих цифры:</p>\r\n[cli]\r\n$ grep \'[0-9]\' unix.txt\r\nin the late [red]1960[/red]s. One of the primary goals in\r\n[/cli]\r\n<p>Опция <code>-i</code> ведет поиск без учета регистра:</p>\r\n[cli]\r\n$ grep -i \'the\' unix.txt\r\n[red]The[/red] Unix operating system was pioneered by Ken\r\nin [red]the[/red] late 1960s. One of [red]the[/red] primary goals in\r\n[red]the[/red] design of [red]the[/red] Unix system was to create an\r\n[/cli]\r\n<p>Опция <code>-v</code> позволяет найти строки, которые не содержат указанный шаблон:</p>\r\n[cli]\r\n$ grep -v \'Unix\' unix.txt\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]\r\n<p>Опция <code>-n</code> выводит номера строк файла, в которых найдено совпадение с шаблоном:</p>\r\n[cli]\r\n$ grep -n \'Unix\' unix.txt\r\n[grn]1:[/grn]The [red]Unix[/red] operating system was pioneered by Ken\r\n[grn]4:[/grn]the design of the [red]Unix[/red] system was to create an\r\n[/cli]\r\n<p>Поиск совпадений во всех файлах директории:</p>\r\n[cli]\r\n$ grep \'шаблон\' example/*\r\n[/cli]\r\n<p>Опция <code>-l</code> позволяет получить только список файлов, в которых было найдено совпадение:</p>\r\n[cli]\r\n$ grep -l \'шаблон\' example/*\r\n[/cli]\r\n<p>Опция <code>-L</code> наоборот, позволяет получить список тех файлов, где совпадение не было найдено:</p>\r\n[cli]\r\n$ grep -L \'шаблон\' example/*\r\n[/cli]\r\n<p>\r\nОпция <code>-r</code> заставляет <code>grep</code> рекурсивно обследовать все дерево указанной директории, то есть все поддиректории вплоть до файлов:\r\n</p>\r\n[cli]\r\n$ grep -r \'шаблон\' /home\r\n[/cli]\r\n<p>\r\nКоманда <code>grep</code> поддерживает два типа регулярных выражений: базовый (BRE — basic regular expressions) и расширенный (ERE — extended regular expressions). По умолчанию <code>grep</code> использует базовый тип регулярных выражений.\r\n</p>\r\n<p>В BRE распознаются следующие метасимволы:</p>\r\n[code]\r\n^ $ . [ ] *\r\n[/code]\r\n<p>\r\nВсе другие символы расцениваются как литералы. В ERE добавлены следующие метасимволы (и связанные с ними функции):\r\n</p>\r\n[code]\r\n( ) { } ? + |\r\n[/code]\r\n<p>\r\nТем не менее, символы «(», «)», «{» и «}» в BRE обрабатываются как метасимволы, если они экранированы обратным слешом; в то время как в ERE постановка перед любыми метасимволами обратного слеша приводит к тому, что они трактуются как литералы.\r\n</p>\r\n<p>\r\nОпция <code>-E</code> команды <code>grep</code> позволяет использовать расширенные регулярные выражения.\r\n</p>','2018-02-17 15:56:57',1),(44,14,'Работа с файлами в Python, модуль os','','','Python, Директория, Копировать, Модуль, Удалить, Файл','Модуль позволяет работать с файлами и папками. Русские названия файлов и папок возвращаются и принимаются всеми функциями этого модуля в кодировке UTF-8, поэтому необходимо использовать функции для перекодирования строк — методы decode и encode.','<p>\r\nМодуль позволяет работать с файлами и папками. Русские названия файлов и папок возвращаются и принимаются всеми функциями этого модуля в кодировке UTF-8, поэтому необходимо использовать функции для перекодирования строк — методы decode и encode.\r\n</p>\r\n<p>\r\nСвойства и методы:\r\n</p>\r\n<ul>\r\n  <li><code>os.sep</code></li>\r\n  <li><code>os.name</code></li>\r\n  <li><code>os.environ</code></li>\r\n  <li><code>os.getenv()</code></li>\r\n  <li><code>os.putenv()</code></li>\r\n  <li><code>os.getcwd()</code></li>\r\n  <li><code>os.chdir()</code></li>\r\n  <li><code>os.mkdir()</code></li>\r\n  <li><code>os.makedirs()</code></li>\r\n  <li><code>os.rename()</code></li>\r\n  <li><code>os.renames()</code></li>\r\n  <li><code>os.rmdir()</code></li>\r\n  <li><code>os.removedirs()</code></li>\r\n  <li><code>os.remove()</code> или <code>os.unlink()</code></li>\r\n  <li><code>os.listdir()</code></li>\r\n  <li><code>os.walk()</code></li>\r\n  <li><code>os.system()</code></li>\r\n  <li><code>os.link()</code></li>\r\n  <li><code>os.symlink()</code></li>\r\n  <li><strong><code>os.path</code></strong></li>\r\n</ul>\r\n<p>\r\nДля использования любого из методов, нужно импортировать модуль <code>os</code>:\r\n</p>\r\n[idle]import os[/idle]\r\n<p>\r\nСвойство <code>os.name</code> содержит имя операционной системы, доступные варианты: \'posix\', \'nt\', \'mac\', \'os2\', \'ce\', \'java\'.\r\n</p>\r\n[idle]\r\n>>> os.name\r\n\'nt\'\r\n[/idle]\r\n<p>\r\nСвойство <code>os.environ</code> — словарь переменных окружения; изменяемый (можно добавлять и удалять переменные окружения).\r\n</p>\r\n[idle]\r\n>>> os.environ\r\nenviron({\'HOME\': \'C:\\\\Users\\\\Evgeniy\', \'HOMEDRIVE\': \'C:\', \'HOMEPATH\': \'\\\\Users\\\\Evgeniy\',\r\n\'OS\': \'Windows_NT\', \'PATH\': \'C:\\\\python\\\\Scripts\\\\;C:\\\\python\\\\;C:\\\\WINDOWS\\\\system32;C:\\\\WINDOWS\',\r\n\'SYSTEMDRIVE\': \'C:\', \'SYSTEMROOT\': \'C:\\\\WINDOWS\', \'TEMP\': \'C:\\\\Users\\\\Evgeniy\\\\AppData\\\\Local\\\\Temp\',\r\n\'TMP\': \'C:\\\\Users\\\\Evgeniy\\\\AppData\\\\Local\\\\Temp\', \'USERDOMAIN\': \'TKMCOMP\', \'USERDOMAIN_ROAMINGPROFILE\': \'TKMCOMP\',\r\n\'USERNAME\': \'Evgeniy\', \'USERPROFILE\': \'C:\\\\Users\\\\Evgeniy\', \'WINDIR\': \'C:\\\\WINDOWS\'})\r\n[/idle]\r\n<p>\r\nМетод <code>os.getenv()</code> возвращает значение переменной окружения, метод <code>os.putenv()</code> устанавливает значение переменной окружения.\r\n</p>\r\n[idle]\r\n>>> os.getenv(\'PATH\')\r\n\'C:\\\\python\\\\Scripts\\\\;C:\\\\python\\\\;C:\\\\WINDOWS\\\\system32;C:\\\\WINDOWS\'\r\n[/idle]\r\n<p>\r\nМетод <code>os.getcwd()</code> возвращает текущую рабочую директорию.\r\n<p>\r\n[idle]\r\n>>> os.getcwd()\r\n\'C:\\\\python\'\r\n[/idle]\r\n<p>\r\nМетод <code>os.chdir()</code> — смена текущей рабочей директории.\r\n</p>\r\n[idle]\r\n>>> os.chdir(\'C:\\\\Windows\\\\System32\')\r\n>>> os.getcwd()\r\n\'C:\\\\Windows\\\\System32\'\r\n[/idle]\r\n<p>\r\nМетод <code>os.mkdir()</code> создаёт директорию, выдает <code>OSError</code>, если директория существует.\r\n</p>\r\n[idle]\r\n>>> os.mkdir(\'C:\\\\some-dir\')\r\n[/idle]\r\n<p>\r\nМетод <code>os.makedirs()</code> создаёт директорию, создавая при этом промежуточные директории.\r\n</p>\r\n[idle]\r\n>>> os.makedirs(\'C:\\\\some-dir\\\\other-dir\')\r\n[/idle]\r\n<p>\r\nМетод <code>os.rename()</code> переименовывает файл или директорию. Метод <code>os.renames()</code> служит тем же целям, но позволяет создавать промежуточные директории.\r\n<p>\r\n[idle]\r\n>>> os.mkdir(\'C:\\\\some-dir\')\r\n>>> os.rename(\'C:\\\\some-dir\', \'C:\\\\other-dir\')\r\n[/idle]\r\n[idle]\r\n>>> os.chdir(\'C:\\\\example\')\r\n>>> os.listdir()\r\n[\'file.txt\']\r\n>>> os.renames(\'file.txt\', \'some-dir\\\\some-file.txt\')\r\n>>> os.listdir()\r\n[\'some-dir\']\r\n>>> os.chdir(\'some-dir\')\r\n>>> os.listdir()\r\n[\'some-file.txt\']\r\n[/idle]\r\n<p>\r\nМетод <code>os.rmdir()</code> удаляет пустую директорию. Метод <code>os.removedirs()</code> удаляет директорию, затем пытается удалить родительские директории, и удаляет их рекурсивно, пока они пусты.\r\n<p>\r\n[idle]\r\n>>> os.chdir(\'C:\\\\example\')\r\n>>> os.listdir()\r\n[\'file.txt\']\r\n>>> os.renames(\'C:\\\\some-dir\')\r\n[/idle]\r\n<p>\r\nМетод <code>os.remove()</code> удаляет файл.\r\n<p>\r\n[idle]\r\n>>> os.remove(\'C:\\\\some-dir\\\\some-file.txt\')\r\n[/idle]\r\n<p>\r\nМетод <code>os.listdir()</code> возвращает список файлов и директорий.\r\n</p>\r\n[idle]\r\n>>> os.listdir(\'C:\\\\wamp\\\\mysql\')\r\n[\'bin\', \'COPYING\', \'docs\', \'include\', \'lib\', \'my.ini\', \'README\', \'share\']\r\n[/idle]\r\n<p>\r\nМетод <code>os.walk()</code> возвращает объект-генератор. Из полученного объекта можно получить кортежи для каждого каталога в файловой иерархии. Каждый кортеж в коллекции содержит:\r\n</p>\r\n<ul>\r\n  <li>Абсолютный адрес очередного каталога (строка)</li>\r\n  <li>Имена подкаталогов текущего каталога (список)</li>\r\n  <li>Имена (без адреса) файлов данного каталога</li>\r\n</ul>\r\n[python]\r\ntree = os.walk(\'C:\\\\wamp\\\\php56\')\r\nfor item in tree:\r\n    print(item)\r\n[/python]\r\n[code]\r\n(\'C:\\\\wamp\\\\php56\', [\'dev\', \'ext\', \'extras\', \'lib\'], [\'deplister.exe\', \'glib-2.dll\', \'gmodule-2.dll\', ...])\r\n(\'C:\\\\wamp\\\\php56\\\\dev\', [], [\'php5ts.lib\'])\r\n(\'C:\\\\wamp\\\\php56\\\\ext\', [], [\'php_bz2.dll\', \'php_com_dotnet.dll\', \'php_curl.dll\', \'php_enchant.dll\', ...])\r\n(\'C:\\\\wamp\\\\php56\\\\extras\', [\'ssl\'], [])\r\n(\'C:\\\\wamp\\\\php56\\\\extras\\\\ssl\', [], [\'openssl.cnf\'])\r\n(\'C:\\\\wamp\\\\php56\\\\lib\', [\'enchant\'], [])\r\n(\'C:\\\\wamp\\\\php56\\\\lib\\\\enchant\', [], [\'libenchant_ispell.dll\', \'libenchant_myspell.dll\'])\r\n[/code]\r\n[python]\r\nfor current, subdirs, files in os.walk(\'C:\\\\wamp\\\\php56\'):\r\n    print(\'Текущая директория: \' + current)\r\n    # цикл по поддиректориям текущей директории\r\n    for subdir in subdirs:\r\n        print(\'  Дочерняя директория: \' + subdir)\r\n    # цикл по файлам текущей директории\r\n    for file in files:\r\n        print(\'  Файл в директории: \' + file)\r\n[/python]\r\n[code]\r\n[red]Текущая директория: C:\\wamp\\php56[/red]\r\n  [grn]Дочерняя директория: dev[/grn]\r\n  [grn]Дочерняя директория: ext[/grn]\r\n  [grn]Дочерняя директория: extras[/grn]\r\n  [grn]Дочерняя директория: lib[/grn]\r\n  Файл в директории: deplister.exe\r\n  Файл в директории: glib-2.dll\r\n  Файл в директории: gmodule-2.dll\r\n  .....\r\n[red]Текущая директория: C:\\wamp\\php56\\dev[/red]\r\n  Файл в директории: php5ts.lib\r\n[red]Текущая директория: C:\\wamp\\php56\\ext[/red]\r\n  Файл в директории: php_bz2.dll\r\n  Файл в директории: php_com_dotnet.dll\r\n  Файл в директории: php_curl.dll\r\n  .....\r\n[red]Текущая директория: C:\\wamp\\php56\\extras[/red]\r\n  [grn]Дочерняя директория: ssl[/grn]\r\n[red]Текущая директория: C:\\wamp\\php56\\extras\\ssl[/red]\r\n  Файл в директории: openssl.cnf\r\n[red]Текущая директория: C:\\wamp\\php56\\lib[/red]\r\n  [grn]Дочерняя директория: enchant[/grn]\r\n[red]Текущая директория: C:\\wamp\\php56\\lib\\enchant[/red]\r\n  Файл в директории: libenchant_ispell.dll\r\n  Файл в директории: libenchant_myspell.dll\r\n[/code]\r\n<p>\r\nМетод <code>os.system()</code> исполняет системную команду, возвращает код её завершения. Метод <code>os.link()</code> создает жесткую ссылку, <code>os.symlink()</code> создает символическую ссылку.\r\n</p>\r\n<h3>Модуль os.path</h3>\r\n<p>\r\nМодуль <code>os.path</code> встроен в модуль <code>os</code> и позволяет работать с путями к файлам и папкам. Основные свойства и методы:\r\n</p>\r\n<ul>\r\n  <li><code>os.path.sep</code> — разделитель имен директорий в пути</li>\r\n  <li><code>os.path.abspath()</code> — преобразует относительный путь в абсолютный</li>\r\n  <li><code>os.path.isabs()</code> — возвращает <code>True</code>, если путь абсолютный</li>\r\n  <li><code>os.path.relpath(path, start)</code>  — возвращает относительный путь от <code>start</code> к <code>path</code></li>\r\n  <li><code>os.path.basename()</code> — возвращает имя файла (или директории)</li>\r\n  <li><code>os.path.dirname()</code> — возвращает путь к файлу (или директории)</li>\r\n  <li><code>os.path.exists()</code> — возвращает <code>True</code>, если файл (или директория) существует</li>\r\n  <li><code>os.path.isdir()</code> — возвращает <code>True</code>, если это директория</li>\r\n  <li><code>os.path.isfile()</code> — возвращает <code>True</code>, если это файл</li>\r\n  <li><code>os.path.getsize()</code> — возвращает размер файла в байтах</li>\r\n  <li><code>os.path.join()</code>  — возвращает путь доступа, полученный конкатенацией аргументов</li>\r\n  <li><code>os.path.split()</code>  — возвращает кортеж <code>(os.path.dirname(), os.path.basename())</code></li>\r\n</ul>','2018-02-19 18:08:25',1),(45,14,'Чтение и запись файлов в Python','','','Python, Web-разработка, Файл','Перед тем как прочесть или записать что-либо в файл, его следует открыть с помощью функции open(). При вызове эта функция создает объект типа File, с которым в дальнейшем можно работать.','<p>\r\nПеред тем как прочесть или записать что-либо в файл, его следует открыть с помощью функции <code>open()</code>. При вызове эта функция создает объект типа <code>File</code>, с которым в дальнейшем можно работать.\r\n</p>\r\n[code]open(file, mode, buffering, encoding)[/code]\r\n<p>\r\nРежим доступа <code>mode</code> — строка, в которой указывается для чего открывается файл:\r\n</p>\r\n<ul>\r\n  <li><code>\'r\'</code> — открытие на чтение (является значением по умолчанию)</li>\r\n  <li><code>\'w\'</code> — открытие на запись, содержимое файла удаляется; если файла не существует, создается новый</li>\r\n  <li><code>\'x\'</code> — если файла не существует — открытие на запись, иначе исключение</li>\r\n  <li><code>\'a\'</code> — открытие на дозапись, информация добавляется в конец файла</li>\r\n  <li><code>\'b\'</code> — открытие в двоичном режиме</li>\r\n  <li><code>\'t\'</code> — открытие в текстовом режиме (является значением по умолчанию)</li>\r\n  <li><code>\'+\'</code> — открытие на чтение и запись</li>\r\n</ul>\r\n<p>\r\nРежимы могут быть объединены, то есть, к примеру, <code>\'rb\'</code> — чтение в двоичном режиме. По умолчанию режим равен <code>\'rt\'</code>.\r\n</p>\r\n<p>\r\nБуферизация <code>buffering</code> (целое число): <code>0</code> — файл открывается без буферизации, <code>1</code> — с построчной буферизацией, больше одного — буферизация выполняется с указанным размером, отрицательное число — разер буфера будет равен системному.\r\n</p>\r\n<p>\r\nИ последний аргумент <code>encoding</code> задает кодировку, нужен только в текстовом режиме чтения файла.\r\n</p>\r\n<p>\r\nКак только файл был открыт и появился файловый объект, можно получить следующую информацию:\r\n</p>\r\n<ul>\r\n  <li><code>file.closed</code> — возвращает <code>True</code> если файл был закрыт</li>\r\n  <li><code>file.mode</code> — возвращает режим доступа, с которым был открыт файл</li>\r\n  <li><code>file.name</code> — возвращает имя файла</li>\r\n  <li><code>file.softspace</code> — возвращает <code>False</code>, если при выводе содержимого файла следует отдельно добавлять пробел</li>\r\n</ul>\r\n[idle]\r\n>>> file = open(\'test.txt\')\r\n>>> file.closed\r\nFalse\r\n>>> file.mode\r\n\'r\'\r\n>>> file.name\r\n\'test.txt\'\r\n>>> file.close()\r\n[/idle]\r\n<p>\r\nМетод <code>read()</code> читает весь файл целиком, если был вызван без аргументов, и <code>n</code> символов, если был вызван с аргументом (целым числом <code>n</code>). Запись в файл осуществляется с помощью метода <code>write()</code>. После окончания работы с файлом его обязательно нужно закрыть с помощью метода <code>close()</code>.\r\n</p>\r\n[idle]\r\n>>> helloFile = open(\'C:\\\\example\\\\hello.txt\', \'w\')\r\n>>> helloFile.write(\'Hello, world!\\n\')\r\n14\r\n>>> helloFile.close()\r\n[/idle]\r\n[idle]\r\n>>> helloFile = open(\'C:\\\\example\\\\hello.txt\', \'r\')\r\n>>> helloFile.read()\r\n\'Hello, world!\\n\'\r\n>>> helloFile.close()\r\n[/idle]\r\n<p>Добавление информации в файл:</p>\r\n[idle]\r\n>>> helloFile = open(\'C:\\\\example\\\\hello.txt\', \'a\')\r\n>>> helloFile.write(\'It\\\'s nice to meet you.\\n\')\r\n23\r\n>>> helloFile.close()\r\n[/idle]\r\n<p>Чтение всех строк из файла:</p>\r\n[idle]\r\n>>> helloFile.readlines()\r\n[\'Hello, world!\\n\', \"It\'s nice to meet you.\\n\"]\r\n>>> helloFile.close()\r\n[/idle]\r\n<p>Построчное чтение из файла:</p>\r\n[idle]\r\n>>> helloFile = open(\'C:\\\\example\\\\hello.txt\', \'r\')\r\n>>> helloFile.readline()\r\n\'Hello, world!\\n\'\r\n>>> helloFile.readline()\r\n\"It\'s nice to meet you.\\n\"\r\n>>> helloFile.close()\r\n[/idle]\r\n<p>\r\nПри считывании символ новой строки <code>\\n</code> присутствует в конце каждой из строк. Его может не быть лишь в последней строке — это позволяет добиться однозначности: если метод возвращает пустую строку, значит достигнут конец файла; если строка содержит лишь символ <code>\\n</code> значит это просто очередная строка.\r\n</p>\r\n<p>Запись нескольких строк в файл (при использовании <code>with</code> закрывать файл не нужно):</p>\r\n[idle]\r\n>>> with open(\'test.txt\', \'w\') as file:\r\n...     file.writelines([\'First line\\n\', \'Second line\'])\r\n[/idle]\r\n[idle]\r\n>>> with open(\'test.txt\') as file:\r\n...     file.readlines()\r\n\r\n[\'First line\\n\', \'Second line\']\r\n[/idle]\r\n<p>\r\nМетод <code>tell()</code> возвращает позицию указателя, метод <code>seek(offset, [from])</code> позволяет перейти на нужную позицию. Аргумент <code>offset</code> указывает на сколько байт перейти; аргумент <code>from</code> означает позицию, с которой начинается движение. <code>0</code> — означает начало файла, <code>1</code> — нынешняя позиция, <code>2</code> — конец файла.\r\n</p>\r\n\r\n<h3>Сохранение данных с помощью модуля shelve</h3>\r\n[idle]\r\n>>> import shelve\r\n>>> shelfFile = shelve.open(\'data\')\r\n>>> users = [\'Иванов\', \'Петров\']\r\n>>> mails = [\'ivanov@mail.ru\', \'petrov@mail.ru\']\r\n>>> shelfFile[\'users\'] = users\r\n>>> shelfFile[\'mails\'] = mails\r\n>>> shelfFile.close()\r\n[/idle]\r\n[idle]\r\n>>> os.listdir()\r\n[\'data.bak\', \'data.dat\', \'data.dir\', \'hello.txt\']\r\n[/idle]\r\n[idle]\r\n>>> shelfFile = shelve.open(\'data\')\r\n>>> shelfFile[\'users\']\r\n[\'Иванов\', \'Петров\']\r\n>>> shelfFile[\'mails\']\r\n[\'ivanov@mail.ru\', \'petrov@mail.ru\']\r\n>>> shelfFile.close()\r\n[/idle]','2018-02-21 13:17:35',1),(46,14,'Работа с файлами в Python, модуль shutil','','','Python, Web-разработка, Директория, Копировать, Модуль, Удалить, Файл','Модуль shutil (shell utilities — утилиты командной строки) содержит методы, позволяющие копировать, перемещать, переименовывать и удалять файлы. Для этого нужно сперва импортировать модуль.','<p>\r\nМодуль <code>shutil</code> (shell utilities — утилиты командной строки) содержит методы, позволяющие копировать, перемещать, переименовывать и удалять файлы. Для этого нужно сперва импортировать модуль.\r\n</p>\r\n<p>Метод <code>copy()</code> предназначен для копирования файлов:</p>\r\n[idle]\r\n>>> import shutil, os\r\n>>> os.chdir(\'C:\\\\example\')\r\n>>> os.listdir()\r\n[\'image.jpg\']\r\n>>> shutil.copy(\'image.jpg\', \'copy.jpg\')\r\n\'copy.jpg\'\r\n>>> os.listdir()\r\n[\'copy.jpg\', \'image.jpg\']\r\n>>> os.mkdir(\'images\')\r\n>>> shutil.copy(\'copy.jpg\', \'images\')\r\n\'images\\\\copy.jpg\'\r\n[/idle]\r\n<p>Метод <code>copytree()</code> позволяет копировать директории:</p>\r\n[idle]\r\n>>> shutil.copytree(\'images\', \'new-dir\')\r\n\'new-dir\'\r\n>>> os.chdir(\'new-dir\')\r\n>>> os.listdir()\r\n[\'copy.jpg\']\r\n[/idle]\r\n<p>Метод <code>move()</code> позволяет переместить файл или директорию:</p>\r\n[idle]\r\n>>> os.listdir()\r\n[\'copy.jpg\', \'image.jpg\', \'images\', \'new-dir\']\r\n>>> shutil.move(\'copy.jpg\', \'images\\\\new-copy.jpg\') # перемещение файла\r\n\'images\\\\new-copy.jpg\'\r\n>>> shutil.move(\'images\', \'new-dir\') # перемещение директории\r\n\'new-dir\\\\images\'\r\n>>> shutil.move(\'image.jpg\', \'picture.jpg\') # переименование файла\r\n\'picture.jpg\'\r\n>>> shutil.move(\'new-dir\', \'old-dir\') # переименование директории\r\n\'old-dir\'\r\n[/idle]\r\n<p>\r\nМетод <code>rmtree()</code> удаляет директорию вместе со всеми поддиректриями и файлами.\r\n</p>\r\n[idle]\r\n>>> shutil.rmtree(\'old-dir\')\r\n[/idle]\r\n<h3>Безопасное удаление файлов и директорий</h3>\r\n<p>\r\nМодуль <code>send2trash</code> отправляет удаляемые директории и файлы в корзину. Так что при ошибочном удалении их можно восстановить.\r\n</p>\r\n[idle]\r\n>>> import send2trash\r\n>>> send2trash.send2trash(\'images\')\r\n[/idle]','2018-02-23 10:17:00',1),(47,14,'Работа с zip-архивами в Python, модуль zipfile','','','Python, Web-разработка, zip, Модуль','Модуль zipfile (входит в стандартный набор python) позволяет работать с zip-архивами. Чтобы записать или прочитать содержимое zip-файла, прежде всего необходимо создать объект ZipFile.','<p>\r\nМодуль <code>zipfile</code> (входит в стандартный набор python) позволяет работать с zip-архивами. Чтобы записать или прочитать содержимое zip-файла, прежде всего необходимо создать объект <code>ZipFile</code>. Объекты <code>ZipFile</code> похожи на объекты <code>File</code>, возвращаемые функцией <code>open()</code>.\r\n[code]\r\nZipFile([grn]filename[/grn] [red][,mode[,compression[,allowZip64]]][/red])\r\n[/code]\r\n<ul>\r\n  <li><code>filename</code> — имя файла zip архива.</li>\r\n  <li><code>mode</code>\r\n    <ul>\r\n      <li><code>\'r\'</code> — файл будет открыт для чтения (это режим по умолчанию);</li>\r\n      <li><code>\'w\'</code> — файл будет открыт для записи; если файл не существует, он будет создан; если файл существует, он будет перезаписан;</li>\r\n      <li><code>\'a\'</code> — существующий файл будет открыт в режиме добавления файлов в архив.</li>\r\n    </ul>\r\n  </li>\r\n  <li><code>compression</code> определяет метод сжатия, который должен использоваться при записи в архив. Он принимает одно из значений: <code>ZIP_STORED</code> или <code>ZIP_DEFLATED</code>. По умолчанию используется значение <code>ZIP_STORED</code>.</li>\r\n  <li><code>allowZip64</code> позволяет разрешить использование расширений ZIP64, которые дают возможность создавать архивы размером больше 2 гигабайт. По умолчанию равен <code>False</code>.</li>\r\n</ul>\r\n<p>Создание архива, запись файлов и директорий:</p>\r\n[idle]\r\n>>> import os, zipfile\r\n>>> os.chdir(\'C:\\\\example\')\r\n>>> os.listdir()\r\n[\'images\', \'readme.txt\']\r\n>>> zipFile = zipfile.ZipFile(\'archive.zip\', \'w\', zipfile.ZIP_DEFLATED)\r\n>>> zipFile.write(\'readme.txt\') [grn]# добавляем файл в архив[/grn]\r\n>>> zipFile.write(\'images\') [grn]# добавляем (пустую) директорию в архив[/grn]\r\n>>> zipFile.write(\'images\\\\1.jpg\')\r\n>>> zipFile.write(\'images\\\\2.jpg\')\r\n>>> zipFile.close()\r\n[/idle]\r\n<p>Получение информации о содержимом zip-архива:</p>\r\n[idle]\r\n>>> zipFile = zipfile.ZipFile(\'archive.zip\', \'r\')\r\n>>> zipFile.namelist() [grn]# получаем информацию о файлах и директориях[/grn]\r\n[\'readme.txt\', \'images/\', \'images/1.jpg\', \'images/2.jpg\']\r\n>>> zipInfo = zipFile.getinfo(\'readme.txt\') [grn]# получаем информацию об отдельном файле[/grn]\r\n>>> zipInfo.file_size\r\n13908\r\n>>> zipInfo.compress_size\r\n3828\r\n>>> zipFile.close()\r\n[/idle]\r\n<p>Извлечение файлов из архива:</p>\r\n[idle]\r\n>>> zipFile = zipfile.ZipFile(\'archive.zip\', \'r\')\r\n>>> zipFile.extract(\'readme.txt\') [grn]# извлекаем отдельный файл из корня архива[/grn]\r\n\'C:\\\\example\\\\readme.txt\'\r\n>>> zipFile.extract(\'images/1.jpg\') [grn]# извлекаем отдельный файл из директории images[/grn]\r\n\'C:\\\\example\\\\images\\\\1.jpg\'\r\n>>> zipFile.extractall() [grn]# извлекаем весь архив в текущую директорию[/grn]\r\n>>> zipFile.extractall(\'archive\') [grn]# извлекаем весь архив в директорию archive[/grn]\r\n>>> zipFile.close()\r\n[/idle]\r\n<p>\r\nФункция <code>zipfile.is_zipfile()</code> проверяет, является ли файл архивом или нет. Если да, то она вернет <code>True</code>, если нет — <code>False</code>.\r\n</p>\r\n[python]\r\n# Копирует директорию со всем ее содержимым в\r\n# zip-файл с инкрементным номером в имени файла\r\n\r\nimport zipfile, os\r\n\r\ndef backupToZip(source, backup):\r\n    \"\"\"Создание резервной копии всего содержимого директории source\"\"\"\r\n\r\n    # Проверить, что обе директории существуют\r\n    if not (os.path.isabs(source) and os.path.isdir(source)):\r\n        print(\'Директория %s не существует\' % (source))\r\n        return\r\n    if not (os.path.isabs(backup) and os.path.isdir(backup)):\r\n        print(\'Директория %s не существует\' % (backup))\r\n        return\r\n\r\n    # Определить, какое имя файла будет у zip-архива,\r\n    # исходя из имен уже существующих файлов\r\n    number = 1\r\n    while True:\r\n        name = os.path.basename(source) + \'-\' + str(number) + \'.zip\'\r\n        backupFile = os.path.join(backup, name)\r\n        if not os.path.isfile(backupFile):\r\n            break\r\n        number = number + 1\r\n\r\n    # Создание нового zip-файла\r\n    print(\'Создание нового zip-файла %s...\' % (backupFile))\r\n    zipFile = zipfile.ZipFile(backupFile, \'w\')\r\n\r\n    # Обход всего дерева директории и сжатие файлов в каждой папке\r\n    archDirName = \'\'\r\n    for dir, subdirs, files in os.walk(source):\r\n        print(\'Добавление файлов из директории %s...\' % (dir))\r\n        # Имя текущей директории в архиве\r\n        archDirName = \'/\'.join([archDirName, os.path.basename(dir)]).strip(\'/\')\r\n        # Добавить в архив текущую директорию\r\n        zipFile.write(dir, archDirName)\r\n\r\n        # Добавить в архив все файлы из текущей директории\r\n        for file in files:\r\n            # Имя текущего файла в архиве\r\n            archFileName = archDirName + \'/\' + file\r\n            zipFile.write(os.path.join(dir, file), archFileName)\r\n\r\n    zipFile.close()\r\n    print(\'Готово\')\r\n\r\nbackupToZip(\'C:\\\\project\', \'C:\\\\backup\')\r\n[/python]','2018-02-23 11:40:21',1),(48,9,'Команда sort','','','Bash, CLI, Linux, Команда, Сортировка','Команда sort сортирует содержимое файла в алфавитном или нумерологическом порядке. Если задать несколько файлов, то команда соединит их и, рассортировав, выдаст единым списком.','<p>\r\nКоманда <code>sort</code> сортирует содержимое файла в алфавитном или нумерологическом порядке. Если задать несколько файлов, то команда соединит их и, рассортировав, выдаст единым списком.\r\n</p>\r\n[code]\r\nsort [grn][опции][/grn] [red]файл(ы)[/red]\r\n[/code]\r\n<p>Рассмотрим несколько примеров.</p>\r\n[cli]\r\n$ cat linux.txt\r\nUbuntu\r\nRedhat\r\nCentos\r\nCentos\r\nDebian\r\nFedora\r\n[/cli]\r\n[cli]\r\n$ sort linux.txt\r\nCentos\r\nCentos\r\nDebian\r\nFedora\r\nRedhat\r\nUbuntu\r\n[/cli]\r\n<p>\r\nОпция <code>-u</code> предписывает команде <code>sort</code> исключить дубликаты строк.\r\n</p>\r\n[cli]\r\n$ sort -u linux.txt\r\nCentos\r\nDebian\r\nFedora\r\nRedhat\r\nUbuntu\r\n[/cli]\r\n<p>\r\nОпция <code>-r</code> позволяет изменить порядок сортировки на обратный.\r\n</p>\r\n[cli]\r\n$ sort -r linux.txt\r\nUbuntu\r\nRedhat\r\nFedora\r\nDebian\r\nCentos\r\nCentos\r\n[/cli]\r\n<p>\r\nОпция <code>-o</code> перенаправляет вывод команды в файл.\r\n</p>\r\n[cli]\r\n$ sort linux.txt -o sorted.txt\r\n$ cat sorted.txt\r\nCentos\r\nCentos\r\nDebian\r\nFedora\r\nRedhat\r\nUbuntu\r\n[/cli]\r\n<div class=\"note\">\r\n<p>Зачастую требуется отсортировать строки в файле, заменив в нем первоначальные данные отсортированными. Но если ввести команду:</p>\r\n[cli]$ sort filename > filename[/cli]\r\n<p>то содержимое файла <code>filename</code> будет очищено. А с помощью опции <code>-o</code> вполне допустимо указывать одно и то же имя входного и выходного файла.</p>\r\n</div>\r\n<p>\r\nОпция <code>-n</code> используется, когда нужно сортировать числа, а опция <code>-k</code> позволяет задавать столбец (колонку) сортировки.\r\n</p>\r\n[cli]\r\n$ cat phonebook.txt\r\nAlice   Chebba   973-555-2015 12\r\nBarbara Swingle  201-555-9257 -5\r\nLiz     Stachiw  212-555-2298 21\r\nSusan   Goldberg 201-555-7776 17\r\nSusan   Topple   212-555-4932 -3\r\nTony    Iannino  973-555-1295 11\r\n[/cli]\r\n<p>Сортировка по второй колонке (фамилия):</p>\r\n[cli]\r\n$ sort -k2 phonebook.txt\r\nAlice   Chebba   973-555-2015 12\r\nSusan   Goldberg 201-555-7776 17\r\nTony    Iannino  973-555-1295 11\r\nLiz     Stachiw  212-555-2298 21\r\nBarbara Swingle  201-555-9257 -5\r\nSusan   Topple   212-555-4932 -3\r\n[/cli]\r\n<p>Сортировка по последней колонке, по возрастанию чисел:</p>\r\n[cli]\r\n$ sort -k4n phonebook.txt\r\nBarbara Swingle  201-555-9257 -5\r\nSusan   Topple   212-555-4932 -3\r\nTony    Iannino  973-555-1295 11\r\nAlice   Chebba   973-555-2015 12\r\nSusan   Goldberg 201-555-7776 17\r\nLiz     Stachiw  212-555-2298 21\r\n[/cli]\r\n<p>\r\nПо умолчанию команда <code>sort</code> считает, что колонки разделяются символами пробела или табуляции. Опция <code>-t</code> позволяет задать другой разделитель.\r\n</p>\r\n[cli]\r\n$ sort /etc/passwd -k3 -t:\r\n[/cli]\r\n<p>\r\nОпция <code>-b</code> игнорирует пробелы в начале строк, и сортирует так, словно пробелов нет.\r\n</p>\r\n<p>\r\nПри обычной сортировке, заглавные буквы идут прежде строчных. Опция <code>-f</code> отменяет такое поведение.\r\n</p>','2018-02-22 18:38:46',1),(49,1,'Работа c GitHub по SSH под Windows 10','','','Git, GitHub, SSH, Web-разработка, Windows','Git умеет работать с четырьмя сетевыми протоколами для передачи данных: локальный, Secure Shell (SSH), Git и HTTP. Положительным аспектом использования протокола HTTP(S) является простота настройки.','<p>\r\nGit умеет работать с четырьмя сетевыми протоколами для передачи данных: локальный, Secure Shell (SSH), Git и HTTP. Положительным аспектом использования протокола HTTP(S) является простота настройки. Поэтому при работе с GitHub он используется чаще всего.\r\n</p>\r\n[cli]\r\n$ git remote -v\r\norigin  [red]https[/red]://github.com/username/project.git (fetch)\r\norigin  [red]https[/red]://github.com/username/project.git (push)\r\n[/cli]\r\n<p>\r\nКак настроить работу с репозиторием на GitHub.com по SSH под Windows 10? Для начала посмотрим, какие ssh-ключи уже есть в системе:\r\n</p>\r\n[cli]\r\n$ ls -al ~/.ssh\r\ndrwxr-xr-x 1 Evgeniy 197121    0 фев 25 10:26 ./\r\ndrwxr-xr-x 1 Evgeniy 197121    0 фев 25 10:25 ../\r\n[/cli]\r\n<p>\r\nКлючей еще нет, директория пуста. Сгенерируем ключи командой\r\n</p>\r\n[cli]\r\n$ ssh-keygen\r\nGenerating public/private rsa key pair.\r\nEnter file in which to save the key (/c/Users/Evgeniy/.ssh/id_rsa):[red][Жмем Enter][/red]\r\nEnter passphrase (empty for no passphrase):[red][Вводим пароль][/red]\r\nEnter same passphrase again:[red][Вводим пароль][/red]\r\nYour identification has been saved in id_rsa.\r\nYour public key has been saved in id_rsa.pub.\r\n[/cli]\r\n<p>\r\nСначала необходимо указать расположение файла для сохранения ключа. Просто жмем Enter, чтобы сохранить ключ в файле по умолчанию (<code>~/.ssh/id_rsa</code>). Затем надо дважды ввести пароль (который можно оставить пустым, чтобы не вводить каждый раз).\r\n</p>\r\n<p>\r\nТеперь добавим сгенерированный ключ в свой <a href=\"http://xgu.ru/wiki/ssh-agent\" target=\"_blank\">SSH-агент</a>. Включаем SSH-агент командой\r\n</p>\r\n[cli]\r\n$ eval $(ssh-agent -s)\r\nAgent pid 9600\r\n[/cli]\r\n<p>\r\nДобавляем в него ключ\r\n</p>\r\n[cli]\r\n$ ssh-add ~/.ssh/id_rsa\r\nEnter passphrase for /c/Users/Evgeniy/.ssh/id_rsa:[red][Вводим пароль][/red]\r\nIdentity added: /c/Users/Evgeniy/.ssh/id_rsa (/c/Users/Evgeniy/.ssh/id_rsa)\r\n[/cli]\r\n<p>\r\nТеперь надо добавить наш ключ в аккаунте GitHub. Авторизуемся и переходим на страницу <a href=\"\">https://github.com/settings/keys</a>, жмем кнопку «New SSH key» и вставляем содержимое файла <code>~/.ssh/id_rsa</code> в текстовое поле «Key».\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/49/github.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nТеперь можно использовать SSH вместо HTTPS. Смотрим, какой должна быть ссылка проекта на GitHub, предварительно выбрав «Use SSH» (вместо «Use HTTPS»):\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/49/project.jpg\" alt=\"\" />\r\n</p>\r\n</p>\r\nИ выполняем команду:\r\n</p>\r\n[cli]\r\n$ git remote set-url [grn]origin[/grn] [red]git@github.com:username/project.git[/red]\r\n[/cli]\r\n<p>\r\nПроверяем:\r\n</p>\r\n[cli]\r\n$ git remote -v\r\norigin  git@github.com:username/project.git (fetch)\r\norigin  git@github.com:username/project.git (push)\r\n[/cli]\r\n<p>\r\nЧтобы не вводить каждый раз пароль при работе с репозиторием на GitHub, нужно создать файл <code>C:/Users/UserName/.bashrc</code> и добавить туда следующее:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\neval $(ssh-agent -s)\r\nssh-add ~/.ssh/id_rsa\r\n[/bash]\r\n<p>\r\nТеперь запрос пароля будет происходить только один раз, при запуске (каждой новой) консоли.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/49/bashrc.jpg\" alt=\"\" />\r\n</p>\r\n<div class=\"note\">\r\nВсе команды выполняются в <code>git bash</code> (командная строка с стиле linux), которая устанавливается вместе с <a href=\"https://git-scm.com/\" target=\"_blank\">Git для Windows</a>.\r\n</div>','2018-02-20 12:00:21',1),(50,9,'Команда test','','','Bash, CLI, Linux, test, Команда','Предназначена для проверки типа файла и сравнения чисел и строк. Возвращает код возврата 0 (истина) или 1 (ложь) в зависимости от вычисления выражения. Выражения могут быть как унарными, так и бинарными.','<p>\r\nПредназначена для проверки типа файла и сравнения чисел и строк. Возвращает код возврата <code>0</code> (истина) или <code>1</code> (ложь) в зависимости от вычисления выражения. Выражения могут быть как унарными, так и бинарными.\r\n</p>\r\n[code]\r\ntest [grn]выражение[/grn]\r\n[/code]\r\n<p>\r\nДля сокращения кода сценария используют парный оператор <code>[</code> как синоним <code>test</code>. Парный оператор требует пробела между скобками потому, что <code>[</code> (скобка) является командой оболочки.\r\n</p>\r\n<h3>Проверка типа файла</h3>\r\n<ul>\r\n  <li><code>-d file</code> — истина, если <code>file</code> существует и является каталогом</li>\r\n  <li><code>-e file</code> — истина, если <code>file</code> существует</li>\r\n  <li><code>-f file</code> — истина, если <code>file</code> существует и является обычным файлом</li>\r\n  <li><code>-r file</code> — истина, если <code>file</code> существует и доступен для чтения</li>\r\n  <li><code>-s file</code> — истина, если <code>file</code> существует и имеет размер больше, чем ноль</li>\r\n  <li><code>-w file</code> — истина, если <code>file</code> существует и доступен для записи</li>\r\n  <li><code>-x file</code> — истина, если <code>file</code> существует и доступен для выполнения</li>\r\n  <li><code>-L file</code> — истина, если <code>file</code> существует и является символьной ссылкой</li>\r\n  <li><code>file1 -nt file2</code> — истина, если <code>file1</code> новее (дата модификации), чем <code>file2</code></li>\r\n  <li><code>file1 -ot file2</code> — истина, если <code>file1</code> старее, чем <code>file2</code></li>\r\n</ul>\r\n[bash]\r\n#!/bin/bash\r\nif [ -f \"$HOME/.bashrc\" ]; then\r\n    echo \"Файл существует!\"\r\nelse\r\n    echo \"Файл не существует!\"\r\nfi\r\n[/bash]\r\n<h3>Сравнение строк</h3>\r\n<ul>\r\n  <li><code>-z string</code> — истина, если длина <code>string</code> равна нулю</li>\r\n  <li><code>-n string</code> — истина, если длина <code>string</code> не ноль</li>\r\n  <li><code>string1 = string2</code> — истина, если строки равны</li>\r\n  <li><code>string1 != string2</code> — истина, если строки не равны</li>\r\n</ul>\r\n<h3>Сравнение целых чисел</h3>\r\n<ul>\r\n  <li><code>число1 -eq число2</code> — истина, если <code>число1</code> равно <code>число2</code></li>\r\n  <li><code>число1 -gt число2</code> — истина, если <code>число1</code> больше <code>число2</code></li>\r\n  <li><code>число1 -ge число2</code> — истина, если <code>число1</code> больше или равно <code>число2</code></li>\r\n  <li><code>число1 -lt число2</code> — истина, если <code>число1</code> меньше <code>число2</code></li>\r\n  <li><code>число1 -le число2</code> — истина, если <code>число1</code> меньше или равно <code>число2</code></li>\r\n  <li><code>число1 -ne число2</code> — истина, если <code>число1</code> не равно <code>число2</code></li>\r\n</ul>\r\n[bash]\r\n#!/bin/bash\r\nif [ 3 -lt 6 ]; then\r\n    echo \"Истина\"\r\nelse\r\n    echo \"Ложь\"\r\nfi\r\n[/bash]\r\n<h3>Операции AND и OR</h3>\r\n<ul>\r\n  <li><code>expr1 -a expr2</code> — истина, если оба выражения <code>expr1</code> и <code>expr2</code> истина (операция AND)</li>\r\n  <li><code>expr1 -o expr2</code> — истина, если хотя бы одно из выражений <code>expr1</code> или <code>expr2</code> истина (операция OR)</li>\r\n  <li><code>! expr</code> — истина, если выражение <code>expr</code> ложно</li>\r\n</ul>\r\n<p>\r\nВ условном выражении команды <code>test</code> можно использовать круглые скобки, чтобы изменить порядок вычисления, но их нужно экранировать:\r\n</p>\r\n[cli]\r\n$ [ \\( \"$count\" -ge 0 \\) -a \\( \"$count\" -lt 10 \\) ]\r\n[/cli]\r\n<p>\r\n«<code>[[…]]</code>» — расширенный вариант от «<code>[…]</code>», оболочка выполняет его как один элемент с кодом возврата. Внутри «<code>[[…]]</code>» разрешается выполнение операторов <code>&&</code>, <code>||</code> которые приводят к ошибке в обычных скобках «<code>[…]</code>».\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nif [[ -f \"$HOME/.bashrc\" && -f \"/usr/bin/nano\" ]]; then\r\n    echo \"Все в порядке, можно редактировать!\"\r\nelse\r\n    echo \"Ошибка!\"\r\nfi\r\n[/bash]','2018-02-25 15:13:45',1),(51,11,'Повышение скорости проведения','','','','Первое, чем мы займемся на этом занятии, – избавимся от «вредной» конструкции обращения через точку. Поступим следующим образом: все данные, связанные с номенклатурой, которая содержится в табличной части документа, мы будем получать с помощью запроса к базе данных.','<p>\r\nПроцедура <code>ОбработкаПроведения()</code> документа «ПриходнаяНакладная»:\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаПроведения(Отказ, Режим)\r\n	\r\n	ЭтотОбъект.Движения.ОстаткиМатериалов.Записывать = Истина;\r\n	ЭтотОбъект.Движения.СтоимостьМатериалов.Записывать = Истина;\r\n	ЭтотОбъект.Движения.Управленческий.Записывать = Истина;\r\n\r\n	Для Каждого ТекСтрокаМатериалы Из Материалы Цикл\r\n\r\n		// регистр ОстаткиМатериалов Приход\r\n		Движение = ЭтотОбъект.Движения.ОстаткиМатериалов.Добавить();\r\n		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;\r\n		Движение.Период = ЭтотОбъект.Дата;\r\n		Движение.Материал = ТекСтрокаМатериалы.Материал;\r\n		Движение.ВариантНоменклатуры = ТекСтрокаМатериалы.ВариантНоменклатуры;\r\n		Движение.Склад = ЭтотОбъект.Склад;\r\n		Движение.Количество = ТекСтрокаМатериалы.Количество;\r\n		\r\n		// регистр СтоимостьМатериалов Приход\r\n		Движение = ЭтотОбъект.Движения.СтоимостьМатериалов.Добавить();\r\n		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;\r\n		Движение.Период = ЭтотОбъект.Дата;\r\n		Движение.Материал = ТекСтрокаМатериалы.Материал;\r\n		Движение.Стоимость = ТекСтрокаМатериалы.Сумма;\r\n		\r\n		// регистр бухгалтерии Управленческий\r\n		Движение = ЭтотОбъект.Движения.Управленческий.Добавить();\r\n		Движение.СчетДт = ПланыСчетов.Основной.Товары;\r\n		Движение.СчетКт = ПланыСчетов.Основной.РасчетыСПоставщиками;\r\n		Движение.Период = ЭтотОбъект.Дата;\r\n		Движение.Сумма = ТекСтрокаМатериалы.Сумма;\r\n		Движение.КоличествоДт = ТекСтрокаМатериалы.Количество;\r\n		Движение.СубконтоДт.Материал = ТекСтрокаМатериалы.Материал;\r\n		Движение.СубконтоДт.Склад = ЭтотОбъект.Склад;\r\n	КонецЦикла;\r\n\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nПроцедура <code>ОбработкаПроведения()</code> документа «ОказаниеУслуги»:\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаПроведения(Отказ, Режим)\r\n	\r\n	ЭтотОбъект.Движения.ОстаткиМатериалов.Записывать = Истина;\r\n	ЭтотОбъект.Движения.СтоимостьМатериалов.Записывать = Истина;\r\n	ЭтотОбъект.Движения.Продажи.Записывать = Истина;\r\n	ЭтотОбъект.Движения.Управленческий.Записывать = Истина;\r\n	\r\n	// создаем временную таблицу, чтобы потом использовать ее в запросе\r\n	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();\r\n	ВспомогательныйЗапрос = Новый Запрос;\r\n	ВспомогательныйЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;\r\n	ВспомогательныйЗапрос.Текст = \r\n	\"ВЫБРАТЬ\r\n	|	ОказаниеУслугиПереченьНоменклатуры.Номенклатура,\r\n	|	ОказаниеУслугиПереченьНоменклатуры.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,\r\n	|	ОказаниеУслугиПереченьНоменклатуры.ВариантНоменклатуры КАК ВариантНоменклатуры,	\r\n	|	СУММА(ОказаниеУслугиПереченьНоменклатуры.Количество) КАК КоличествоИзДокумента,\r\n	|	СУММА(ОказаниеУслугиПереченьНоменклатуры.Сумма) КАК СуммаИзДокумента\r\n	|ПОМЕСТИТЬ НоменклатураДокумента\r\n	|ИЗ\r\n	|	Документ.ОказаниеУслуги.ПереченьНоменклатуры КАК ОказаниеУслугиПереченьНоменклатуры\r\n	|ГДЕ\r\n	|	ОказаниеУслугиПереченьНоменклатуры.Ссылка = &Ссылка\r\n	|\r\n	|СГРУППИРОВАТЬ ПО\r\n	|	ОказаниеУслугиПереченьНоменклатуры.Номенклатура,\r\n	|	ОказаниеУслугиПереченьНоменклатуры.Номенклатура.ВидНоменклатуры,\r\n	|   ОказаниеУслугиПереченьНоменклатуры.ВариантНоменклатуры\";\r\n	\r\n	ВспомогательныйЗапрос.УстановитьПараметр(\"Ссылка\", ЭтотОбъект.Ссылка);\r\n	ВспомогательныйЗапрос.Выполнить();\r\n	\r\n	Запрос = Новый Запрос();\r\n	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;\r\n	Запрос.Текст = \r\n	\"ВЫБРАТЬ\r\n	|	НоменклатураДокумента.Номенклатура,\r\n	|	НоменклатураДокумента.ВидНоменклатуры,\r\n	|	НоменклатураДокумента.ВариантНоменклатуры,\r\n	|	НоменклатураДокумента.КоличествоИзДокумента,\r\n	|	НоменклатураДокумента.СуммаИзДокумента,\r\n	|	ЕСТЬNULL(СтоимостьМатериаловОстатки.СтоимостьОстаток, 0) КАК Стоимость,\r\n	|	ЕСТЬNULL(ОстаткиМатериаловОстатки.КоличествоОстаток, 0) КАК Количество\r\n	|ИЗ\r\n	|	НоменклатураДокумента КАК НоменклатураДокумента\r\n	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьМатериалов.Остатки(\r\n	|				,\r\n	|				Материал В\r\n	|					(ВЫБРАТЬ\r\n	|						НоменклатураДокумента.Номенклатура\r\n	|					ИЗ\r\n	|						НоменклатураДокумента)) КАК СтоимостьМатериаловОстатки\r\n	|		ПО НоменклатураДокумента.Номенклатура = СтоимостьМатериаловОстатки.Материал\r\n	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиМатериалов.Остатки(\r\n	|				,\r\n	|				Материал В\r\n	|						(ВЫБРАТЬ\r\n	|							НоменклатураДокумента.Номенклатура\r\n	|						ИЗ\r\n	|							НоменклатураДокумента)\r\n	|					И Склад = &Склад) КАК ОстаткиМатериаловОстатки\r\n	|		ПО НоменклатураДокумента.Номенклатура = ОстаткиМатериаловОстатки.Материал\";\r\n	\r\n	// установим необходимость блокировки данных в регистрах\r\n	// СтоимостьМатериалов и ОстаткиМатериалов\r\n	ЭтотОбъект.Движения.СтоимостьМатериалов.БлокироватьДляИзменения = Истина;\r\n	ЭтотОбъект.Движения.ОстаткиМатериалов.БлокироватьДляИзменения = Истина;\r\n	\r\n	// записываем пустые наборы записей, чтобы читать\r\n	// остатки без учета данных в этом документе\r\n	ЭтотОбъект.Движения.СтоимостьМатериалов.Записать();\r\n	ЭтотОбъект.Движения.ОстаткиМатериалов.Записать();\r\n\r\n	Запрос.УстановитьПараметр(\"Склад\", ЭтотОбъект.Склад);\r\n	РезультатЗапроса = Запрос.Выполнить();\r\n	ТаблицаЗначений = РезультатЗапроса.Выгрузить();\r\n	Выборка = РезультатЗапроса.Выбрать();\r\n	\r\n	Пока Выборка.Следующий() Цикл\r\n		// рассчитываем среднюю стоимость\r\n		Если Выборка.Количество <> 0 Тогда\r\n			СтоимостьМатериала = Выборка.Стоимость / Выборка.Количество\r\n		Иначе\r\n			СтоимостьМатериала = 0;\r\n		КонецЕсли;\r\n\r\n		Если\r\n			Выборка.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Материал\r\n		Тогда\r\n			//\r\n			// регистр ОстаткиМатериалов Расход\r\n			//\r\n			Движение = ЭтотОбъект.Движения.ОстаткиМатериалов.Добавить();\r\n			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;\r\n			Движение.Период = ЭтотОбъект.Дата;\r\n			Движение.Материал = Выборка.Номенклатура;\r\n			Движение.ВариантНоменклатуры = Выборка.ВариантНоменклатуры;\r\n			Движение.Склад = ЭтотОбъект.Склад;\r\n			Движение.Количество = Выборка.КоличествоИзДокумента;\r\n			//\r\n			// регистр СтоимостьМатериалов Расход\r\n			//\r\n			Движение = ЭтотОбъект.Движения.СтоимостьМатериалов.Добавить();\r\n			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;\r\n			Движение.Период = ЭтотОбъект.Дата;\r\n			Движение.Материал = Выборка.Номенклатура;\r\n			// списание по средней стоимости\r\n			Движение.Стоимость = \r\n				СтоимостьМатериала * Выборка.КоличествоИзДокумента;\r\n			//\r\n			// регистр бухгалтерии Управленческий\r\n			//\r\n			// первая проводка: Дт62 - Кт90, розничная сумма\r\n			Движение = ЭтотОбъект.Движения.Управленческий.Добавить();\r\n			Движение.СчетДт = ПланыСчетов.Основной.ДебиторскаяЗадолженность;\r\n			Движение.СчетКт = ПланыСчетов.Основной.Капитал;\r\n			Движение.Период = ЭтотОбъект.Дата;\r\n			Движение.Сумма = Выборка.СуммаИзДокумента;\r\n			Движение.СубконтоДт.Клиент = ЭтотОбъект.Клиент;\r\n			// вторая проводка: Дт90 - Кт41, себестоимость\r\n			Движение = ЭтотОбъект.Движения.Управленческий.Добавить();\r\n			Движение.СчетДт = ПланыСчетов.Основной.Капитал;\r\n			Движение.СчетКт = ПланыСчетов.Основной.Товары;\r\n			Движение.Период = ЭтотОбъект.Дата;\r\n			Движение.Сумма = СтоимостьМатериала * Выборка.КоличествоИзДокумента;\r\n			Движение.КоличествоКт = Выборка.КоличествоИзДокумента;\r\n			Движение.СубконтоКт.Материал = Выборка.Номенклатура;\r\n			Движение.СубконтоКт.Склад = ЭтотОбъект.Склад;\r\n		КонецЕсли;\r\n			\r\n		// регистр Продажи\r\n		Движение = ЭтотОбъект.Движения.Продажи.Добавить();\r\n		Движение.Период = ЭтотОбъект.Дата;\r\n		Движение.Номенклатура = Выборка.Номенклатура;\r\n		Движение.Клиент = ЭтотОбъект.Клиент;\r\n		Движение.Мастер = ЭтотОбъект.Мастер;\r\n		Движение.Количество = Выборка.КоличествоИзДокумента;\r\n		// Выручка показывает, сколько всего было получено\r\n		// денег от клиента\r\n		Движение.Выручка = Выборка.СуммаИзДокумента;\r\n		// Стоимость показывает, сколько стоят материалы,\r\n		// потраченные на оказание услуги. Стоимость услуги\r\n		// будет нулевой, потому что мы ее берем из регистров\r\n		// СтоимостьМатериалов и ОстаткиМатериалов. Получается\r\n		// что разница между Выручкой и Стоимостью это прибыль\r\n		// предприятия (без учета прочих расходов).\r\n		Движение.Стоимость =\r\n			СтоимостьМатериала * Выборка.КоличествоИзДокумента;\r\n	КонецЦикла;\r\n		\r\n	ЭтотОбъект.Движения.Записать();\r\n	\r\n	Если Режим = РежимПроведенияДокумента.Оперативный Тогда\r\n		// проверяем отрицательные остатки\r\n		Запрос = Новый Запрос();\r\n		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;\r\n		Запрос.Текст = \r\n		\"ВЫБРАТЬ\r\n		|	ОстаткиМатериаловОстатки.Материал,\r\n		|	ОстаткиМатериаловОстатки.ВариантНоменклатуры,\r\n		|	ОстаткиМатериаловОстатки.КоличествоОстаток\r\n		|ИЗ\r\n		|	РегистрНакопления.ОстаткиМатериалов.Остатки(\r\n		|			,\r\n		|			(Материал, ВариантНоменклатуры) В\r\n		|					(ВЫБРАТЬ\r\n		|						НоменклатураДокумента.Номенклатура,\r\n		|						НоменклатураДокумента.ВариантНоменклатуры\r\n		|					ИЗ\r\n		|						НоменклатураДокумента)\r\n		|				И Склад = &Склад) КАК ОстаткиМатериаловОстатки\r\n		|ГДЕ\r\n		|	ОстаткиМатериаловОстатки.КоличествоОстаток < 0\";\r\n		Запрос.УстановитьПараметр(\"Склад\", ЭтотОбъект.Склад);\r\n		Выборка = Запрос.Выполнить().Выбрать();\r\n		Пока Выборка.Следующий() Цикл\r\n			Сообщение = Новый СообщениеПользователю();\r\n			Сообщение.Текст =\r\n				\"Не хватает \" + Строка(-Выборка.КоличествоОстаток) +\r\n				\" единиц материала: \" + Выборка.Материал +\r\n				\", склад: \" + Строка(ЭтотОбъект.Склад) +\r\n				\", вариант номенклатуры: \" + Выборка.ВариантНоменклатуры;\r\n			Сообщение.Сообщить();\r\n			Отказ = Истина;\r\n		КонецЦикла;\r\n	КонецЕсли;\r\n		\r\nКонецПроцедуры\r\n[/язык]','2018-02-26 15:12:23',0),(52,14,'Обработка исключений в Python','','','Python, Web-разработка, Исключение','При выполнении программы могут произойти два типа ошибок: синтаксические ошибки и ошибки выполнения. Синтаксические ошибки появляются в результате нарушения синтаксиса. Runtime error появляются в уже в процессе выполнения, их еще называют исключениями.','<p>\r\nПри выполнении программы могут произойти два типа ошибок: синтаксические ошибки (syntax error) и ошибки выполнения (runtime error). Синтаксические ошибки появляются в результате нарушения синтаксиса. Runtime error появляются в уже в процессе выполнения, их еще называют исключениями.\r\n</p>\r\n<p>Рассмотрим пример:\r\n</p>\r\n[python]\r\nstring = \"hello\"\r\nnumber = int(string)\r\nprint(number)\r\n[/python]\r\n<p>\r\nПри выполнении этого скрипта будет выброшено исключение <code>ValueError</code>, так как строку <code>\"hello\"</code> нельзя преобразовать в число.\r\n</p>\r\n<p>\r\nПри возникновении исключения работа программы прерывается, и чтобы избежать подобного поведения и обрабатывать исключения — есть конструкция <code>try…except</code>:\r\n</p>\r\n[code]\r\n[red]try:[/red]\r\n    инструкции\r\n[red]except[/red] [grn][ТипИсключения][/grn][red]:[/red]\r\n    инструкции\r\n[/code]\r\n<p>\r\nКод, в котором может возникнуть исключение, помещается после ключевого слова <code>try</code>. При возникновении исключения, работа кода в блоке <code>try</code> прерывается, и выполнение переходит в блок <code>except</code>.\r\n</p>\r\n<p>\r\nПосле ключевого слова <code>except</code> опционально можно указать, какое исключение будет обрабатываться (например, <code>ValueError</code> или <code>KeyError</code>).\r\n</p>\r\n<p>\r\nРассмотрим обработку исключения на примере преобразовании строки в число:\r\n[python]\r\ntry:\r\n    number = int(input(\"Введите число: \"))\r\n    print(\"Введенное число:\", number)\r\nexcept:\r\n    print(\"Преобразование прошло неудачно\")\r\nprint(\"Завершение программы\")\r\n[/python]\r\n[code]\r\nВведите число: hello\r\nПреобразование прошло неудачно\r\nЗавершение программы\r\n[/code]\r\n<p>\r\nКак видно из консольного вывода, при вводе строки вывод числа на консоль не происходит, а выполнение программы переходит к блоку <code>except</code>.\r\n</p>\r\n<p>\r\nВ примере выше обрабатывались сразу все исключения, которые могут возникнуть в коде. Однако мы можем конкретизировать тип обрабатываемого исключения, указав его после слова <code>except</code>:\r\n</p>\r\n[python]\r\ntry:\r\n    number = int(input(\"Введите число: \"))\r\n    print(\"Введенное число:\", number)\r\nexcept ValueError:\r\n    print(\"Преобразование прошло неудачно\")\r\nprint(\"Завершение программы\")\r\n[/python]\r\n<p>\r\nЕсли ситуация такова, что в программе могут быть сгенерированы различные типы исключений, то мы можем их обработать по отдельности, используя дополнительные выражения <code>except</code>:\r\n</p>\r\n[python]\r\ntry:\r\n    number1 = int(input(\"Введите первое число: \"))\r\n    number2 = int(input(\"Введите второе число: \"))\r\n    print(\"Результат деления:\", number1/number2)\r\nexcept ValueError:\r\n    print(\"Преобразование прошло неудачно\")\r\nexcept ZeroDivisionError:\r\n    print(\"Попытка деления числа на ноль\")\r\nexcept Exception:\r\n    print(\"Общее исключение\")\r\nprint(\"Завершение программы\")\r\n[/python]\r\n<p>\r\nЕсли возникнет исключение в результате преобразования строки в число, то оно будет обработано блоком <code>except ValueError</code>. Если же второе число будет равно нулю, то есть будет деление на ноль, тогда исключение будет обработано блоком <code>except ZeroDivisionError</code>.\r\n</p>\r\n<p>\r\nТип <code>Exception</code> представляет общее исключение, под которое попадают все исключительные ситуации. Поэтому в данном случае любое исключение, которое не представляет тип <code>ValueError</code> или <code>ZeroDivisionError</code>, будет обработано в блоке <code>except Exception</code>.\r\n</p>\r\n<p>\r\nПри обработке исключений также можно использовать необязательный блок <code>finally</code>. Отличительной особенностью этого блока является то, что он выполняется вне зависимости, было ли сгенерировано исключение:\r\n</p>\r\n[python]\r\ntry:\r\n    number = int(input(\"Введите число: \"))\r\n    print(\"Введенное число:\", number)\r\nexcept ValueError:\r\n    print(\"Не удалось преобразовать число\")\r\nfinally:\r\n    print(\"Блок try завершил выполнение\")\r\nprint(\"Завершение программы\")\r\n[/python]\r\n<p>\r\nКак правило, блок <code>finally</code> применяется для освобождения используемых ресурсов, например, для закрытия файлов.\r\n</p>\r\n<p>\r\nС помощью оператора <code>as</code> мы можем передать всю информацию об исключении в переменную, которую затем можно использовать в блоке <code>except</code>:\r\n</p>\r\n[python]\r\ntry:\r\n    number = int(input(\"Введите число: \"))\r\n    print(\"Введенное число:\", number)\r\nexcept ValueError as e:\r\n    print(\"Сведения об исключении: \" + str(e))\r\nprint(\"Завершение программы\")\r\n[/python]\r\n[code]\r\nВведите число: hello\r\nСведения об исключении: invalid literal for int() with base 10: \'hello\'\r\nЗавершение программы\r\n[/code]\r\n<p>\r\nИногда возникает необходимость вручную сгенерировать то или иное исключение. Для этого применяется оператор <code>raise</code>.\r\n</p>\r\n[python]\r\ntry:\r\n    number1 = int(input(\"Введите первое число: \"))\r\n    number2 = int(input(\"Введите второе число: \"))\r\n    if number2 == 0:\r\n        raise Exception(\"Второе число не должно быть равно нулю\")\r\n    print(\"Результат деления двух чисел:\", number1/number2)\r\nexcept ValueError:\r\n    print(\"Введены некорректные данные\")\r\nexcept Exception as e:\r\n    print(str(e))\r\nprint(\"Завершение программы\")\r\n[/python]\r\n<p>\r\nПри вызове исключения мы можем ему передать сообщение, которое затем можно вывести пользователю:\r\n</p>\r\n[code]\r\nВведите первое число: 1\r\nВведите второе число: 0\r\nВторое число не должно быть равно 0\r\nЗавершение программы\r\n[/code]\r\n<p>\r\nЕсли при обработке исключения надо пробросить его еще выше, то следует написать такой код:\r\n</p>\r\n[python]\r\ntry:\r\n    инструкции\r\nexcept:\r\n    raise\r\n[/python]\r\n<h4>Дополнительно:</h4>\r\n<ul>\r\n  <li><a href=\"https://pynsk.ru/blog/2016/01/29/lesson_exceptions/\">Python уроки: исключения (exceptions)</a></li>\r\n</ul>','2018-02-26 18:20:41',1),(53,14,'Logging — модуль для ведения логов в Python','','','Python, Web-разработка, Модуль','Многие программисты используют оператор print для исправления багов, но гораздо удобнее использовать логирование для этих целей. Использование лога также более легкий способ, если нет желания просматривать весь код, чтобы удалить все вызовы print().','<p>\r\nМногие программисты используют оператор <code>print</code> для исправления багов, но гораздо удобнее использовать логирование для этих целей. Использование лога также более легкий способ, если нет желания просматривать весь код, чтобы удалить все вызовы <code>print()</code>.\r\n</p>\r\n<p>\r\nСоздание лога при помощи модуля <code>logging</code> это очень просто:\r\n</p>\r\n[python]\r\nimport logging\r\nlogging.basicConfig(filename = \"sample.log\", level = logging.INFO)\r\nlogging.debug(\"This is debug message\")\r\nlogging.info(\"This is info message\")\r\nlogging.warning(\"This is warning message\")\r\nlogging.error(\"This is error message\")\r\nlogging.critical(\"This is critical message\")\r\n[/python]\r\n<p>\r\nСуществует пять уровней логирования (в порядке возрастания):\r\n<p>\r\n<ul>\r\n  <li><code>DEBUG</code></li>\r\n  <li><code>INFO</code></li>\r\n  <li><code>WARNING</code></li>\r\n  <li><code>ERROR</code></li>\r\n  <li><code>CRITICAL</code></li>\r\n</ul>\r\n<p>\r\nПо умолчанию, идет дозапись в файл лога. Если вы хотите, чтобы логгер перезаписывал файл, надо передать <code>basicConfig()</code> параметр <code>filemode=\"w\"</code>. Посмотрим, что у нас в файле <code>sample.log</code>:\r\n</p>\r\n[code]\r\nINFO:root:This is info message\r\nWARNING:root:This is warning message\r\nERROR:root:This is error message\r\nCRITICAL:root:This is critical message\r\n[/code]\r\n<p>\r\nСообщения <code>debug(</code>) нет в файле <code>sample.log</code>. Это связанно с тем, что установлен уровень <code>INFO</code>, так что логгер будет записывать только сообщения <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code> или <code>CRITICAL</code>. Часть <code>root</code> означает, что данное сообщение пришло либо от корневого логгера, либо от основного.\r\n</p>\r\n<p>\r\nВ конфиге логгера можно задать формат выводимого сообщения:\r\n</p>\r\n[code]\r\nlogging.basicConfig(format = \'%(filename)s[LINE:%(lineno)d]# %(levelname)-8s [%(asctime)s]  %(message)s\', level = logging.DEBUG)\r\n[/code]\r\n<p>\r\nТеперь вывод будет таким:\r\n</p>\r\n[code]\r\nexample.py[LINE:3]# DEBUG    [2018-02-28 10:24:59,757]  This is debug message\r\nexample.py[LINE:4]# INFO     [2018-02-28 10:24:59,757]  This is info message\r\nexample.py[LINE:5]# WARNING  [2018-02-28 10:24:59,776]  This is warning message\r\nexample.py[LINE:6]# ERROR    [2018-02-28 10:24:59,776]  This is error message\r\nexample.py[LINE:7]# CRITICAL [2018-02-28 10:24:59,776]  This is critical message\r\n[/code]\r\n<p>\r\nВызов метода <code>logging.disable(level)</code> отключает все следующий за ним инструкции логгирования уровня <code>level</code> и ниже. Таким образом, разместив его сразу за <code>import logging</code> можно быстро включить или выключить логгирование:\r\n</p>\r\n[python]\r\nimport logging\r\n# logging.disable(logging.CRITICAL)\r\n[/python]\r\n<p>\r\nПолучение обратной трассировки стека вызовов:\r\n</p>\r\n[python]\r\nimport traceback\r\n\r\ndef first():\r\n    second()\r\n\r\ndef second():\r\n    raise Exception(\'Это сообщение об ошибке\')\r\n\r\ntry:\r\n    first()\r\nexcept:\r\n    traceFile = open(\'trace.txt\', \'w\')\r\n    traceFile.write(traceback.format_exc())\r\n    traceFile.close()\r\n[/python]\r\n<p>Содержимое файла <code>trace.txt</code>:</p>\r\n[code]\r\nTraceback (most recent call last):\r\n  File \"D:\\python\\trace.py\", line 10, in <module>\r\n    first()\r\n  File \"D:\\python\\trace.py\", line 4, in first\r\n    second()\r\n  File \"D:\\python\\trace.py\", line 7, in second\r\n    raise Exception(\'Это сообщение об ошибке\')\r\nException: Это сообщение об ошибке\r\n[/code]\r\n\r\n<h2>Логгирование из нескольких модулей</h2>','2018-02-28 10:33:12',1),(55,13,'Выполнение нескольких команд в командной строке','','','Bash, CLI, Linux, Команда','В командной строке можно объединять сразу несколько команд в одну строку (в один запуск). Например, вам нужно выполнить сначала одну команду, за ней вторую и так далее. Но вы хотите сразу вбить в командной строке одну инструкцию, которая все сделает.','<p>\r\nВ командной строке можно объединять сразу несколько команд в одну строку (в один запуск). Например, вам нужно выполнить сначала одну команду, за ней вторую и так далее. Но вы хотите сразу вбить в командной строке одну инструкцию, которая все сделает. \r\n</p>\r\n\r\n<h3>Выполнение команд последовательно</h3>\r\n<p>\r\nНапример, мы хотим выполнить сначала одну команду. Затем, когда она отработает (вернет управление в командную строку), нам нужно запустить вторую команду. Для этого служит символ «<strong>;</strong>». Таким образом, если набрать в терминале:\r\n</p>\r\n[cli]\r\n$ command1[red];[/red] command2[red];[/red] command3\r\n[/cli]\r\n<p>\r\nто сначала запустится первая команда <code>command1</code>, а когда управление вернется в терминал, то запустится вторая и так далее.\r\n</p>\r\n\r\n<h3>Зависимое выполнение команд</h3>\r\n<p>\r\nСимволы <code>&amp;&amp;</code> и <code>||</code> означают не что иное, как логическое <code>И</code> и <code>ИЛИ</code>. Поэтому когда мы пишем:\r\n[cli]\r\n$ command1 [red]&&[/red] command2 [red]&&[/red] command3\r\n[/cli]\r\n<p>\r\nто это означает, что команда <code>command2</code> будет выполнена только в том случае, если команда <code>command1</code> была выполнена успешно (вернула нулевой код завершения). Каждая следующая команда выполняется только при успешном выполнении предыдущей.\r\n</p>\r\n<div class=\"note\">\r\nЕсли код завершения программы или команды 0 — это означает ИСТИНА, любое другое значение (как правило, это код ошибки) — ЛОЖЬ.\r\n</div>\r\n<p>\r\nЕсли мы пишем:\r\n</p>\r\n[cli]\r\n$ command1 [red]||[/red] command2 [red]||[/red] command3\r\n[/cli]\r\n<p>\r\nто команда <code>command2</code> будет выполнена только в том случает, если <code>command1</code> вернула ошибку (не нулевой код завершения). Каждая следующая команда запускается только если предыдущая вернула ошибку.\r\n</p>\r\n<p>\r\nТакое поведение объясняется очень просто: интерпретируя <code>И</code> нет смысла выполнять вторую команду, если первая вернула ошибку. А интерпретируя <code>ИЛИ</code> нет смысла выполнять вторую команду если первая выполнилась с успехом.\r\n</p>\r\n<p>Пример использования:</p>\r\n[cli]\r\n$ sort bigdata > /tmp/sorted [red]&&[/red] mv /tmp/sorted > bigdata\r\n[/cli]\r\n<p>Этот же результат будет получен в результате выполнения кода:</p>\r\n[bash]\r\nif sort bigdata > /tmp/sorted ; then\r\n    mv /tmp/sorted > bigdata\r\nfi\r\n[/bash]\r\n<p>\r\nОператоры <code>&amp;&amp;</code> и <code>||</code> можно объединять в одной командной строке:\r\n</p>\r\n[cli]\r\n$ who | grep \"^$name \" > /dev/null [red]&&[/red] echo \"$name logged on\" [red]||[/red] echo \"$name not logged on\"\r\n[/cli]\r\n<p>\r\nПервая команда <code>echo</code> выполняется при удачном выполнении команды <code>grep</code>, а вторая — при неудачном.\r\n</p>\r\n<p>\r\nЭти операторы часто используются в условиях <code>if</code>:\r\n</p>\r\n[bash]\r\nif command1 && command2 ; then\r\n    command3\r\nfi\r\n[/bash]\r\n<p>\r\nОбе команды должны возвратить нулевой код завершения (логическая операция <code>И</code>), чтобы выполнилась команда <code>command3</code>. Этот фрагмент кода можно записать и так:\r\n</p>\r\n[cli]\r\n$ command1 [red]&&[/red] command2 [red]&&[/red] command3\r\n[/cli]\r\n<p>Еще одни пример использования:</p>\r\n[bash]\r\nif command1 || command2 ; then\r\n    command3\r\nfi\r\n[/bash]\r\n<p>\r\nХотя бы одна команда должна возвратить нулевой код завершения (логическая операция <code>ИЛИ</code>), чтобы выполнилась команда <code>command3</code>. Этот фрагмент кода можно записать и так:\r\n</p>\r\n[cli]\r\n$ command1 [red]||[/red] command2 [red]&&[/red] command3\r\n[/cli]','2018-02-28 17:51:48',1),(56,7,'Связи параметров выбора','','','1С:Предприятие, Владелец, Отбор, Параметр, УправляемаяФорма','Подчиненные владельцу реквизиты — элементы справочников, которые должны выбираться пользователем в контексте элемента-владельца. В тестовом примере у нас будут справочники «Контрагенты», «Договора» и документ «ПриходнаяНакладная».','<p>\r\nПодчиненные владельцу реквизиты — элементы справочников, которые должны выбираться пользователем в контексте элемента-владельца. В тестовом примере у нас будут справочники «Контрагенты», «Договора» и документ «ПриходнаяНакладная» с реквизитами «Контрагент» и «Договор».\r\n</p>\r\n<p>\r\nCправочник «Договора» подчинен справочнику «Контрагенты»:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/56/1.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nДля документа «ПриходнаяНакладная» в свойствах реквизита «Договор» выставляем «Связи параметров выбора: Отбор.Владелец(Контрагент)»\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/56/2.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nДля этого по нажатию […] выбираем в списке «Связи параметров выбора» реквизит «Контрагент»:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/56/3.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nВ таблице Имя-Реквизит-Режим изменения должно стоять: Отбор.Владелец — Контрагент — Очищать\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/56/4.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nЕсли в поле «Имя» стоит что-то другое, нужный вариант можно выбрать из выпадающего списка:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/56/5.png\" alt=\"\" />\r\n</p>','2018-03-03 14:19:24',1),(57,10,'Конструкции ((…)) и [[…]]','','','Bash, CLI, Linux, Команда','Конструкция ((…)) позволяет работать с целыми числами, умеет работать с логическими операторами, ее часто используют в операторе if. Конструкция [[…]] позволяет использовать более естественный синтаксис для проверки файлов и сравнения строк.','<p>\r\nКонструкция <code>((…))</code> позволяет работать с целыми числами:\r\n</p>\r\n[cli]\r\n$ var=$(( 10 + 5 ))\r\n$ echo $var\r\n15\r\n$ (( var = var + 1 )) # внутри ((…)) переменные можно использовать без знака $ …\r\n$ echo $var\r\n16\r\n$ echo $(( $var * 2 )) # … но можно и со знаком $\r\n32\r\n[/cli]\r\n<p>\r\nУмеет работать с логическими операторами:\r\n</p>\r\n[cli]\r\n$ var=50\r\n$ result=$(( var >= 0 && var <= 100 )) # результат вычисления выражения\r\n$ echo $result\r\n1\r\n$ result=$(( var >= 0 && var <= 10 )) # результат вычисления выражения\r\n$ echo $result\r\n0\r\n[/cli]\r\n[cli]\r\n$ var=50\r\n$ (( var >= 0 && var <= 100 )) # код возврата\r\n$ echo $?\r\n0\r\n$ (( var >= 0 && var <= 10 )) # код возврата\r\n$ echo $?\r\n1\r\n[/cli]\r\n<p>\r\nЕе часто используют в операторе <code>if</code>:\r\n</p>\r\n[bash]\r\nif ((var == x * 3 + y * 2)) ; then\r\n  echo \"yes\"\r\nfi\r\n[/bash]\r\n<p>\r\nДля группировки элементов можно использовать круглые скобки:\r\n</p>\r\n[cli]\r\n$ echo $(( i = (i + 10) * j )) # внутри ((…)) можно использовать пробелы перед и после =\r\n[/cli]\r\n<p>\r\nТаким образом, конструкция <code>((…))</code> поддерживает:\r\n</p>\r\n<ul>\r\n  <li>операторы сравнения <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></li>\r\n  <li>математические операции <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>**</code>, <code>%</code></li>\r\n  <li>логические операторы <code>&amp;&amp;</code>, <code>||</code>, <code>!</code></li>\r\n  <li>круглые скобки <code>(…)</code></li>\r\n</ul>\r\n</p>\r\n<div class=\"note\">\r\n<p>\r\nКонструкция <code>((…))</code> оценивает арифметическое выражение и устанавливает статус выдачи равный 1, если выражение равно 0, или статус выдачи равный 0, если выражение имеет ненулевое значение:\r\n</p>\r\n[cli]\r\n$ (( 5 + 5 ))\r\n$ echo $?\r\n0\r\n$ (( 5 - 5 ))\r\n$ echo $?\r\n1\r\n[/cli]\r\n<p>\r\nАналогично, конструкция <code>[[…]]</code> оценивает выражение и устанавливает статус выдачи равный 1, если выражение ложно, или статус выдачи равный 0, если выражение истинно.\r\n</p>\r\n</div>\r\n<p>\r\nКак и в случае с <code>((…))</code>, конструкция <code>[[…]]</code> позволяет использовать более естественный синтаксис для проверки файлов и сравнения строк. Можно использовать <code>&amp;&amp;</code>, <code>||</code>, <code>&lt;</code> и <code>&gt;</code> и круглые скобки <code>(…)</code> для группировки элементов:\r\n</p>\r\n[cli]\r\n$ [[ [grn]([/grn] -d \"$HOME\" [grn])[/grn] [red]&&[/red] [grn]([/grn] -w \"$HOME\" [grn])[/grn] ]] && echo \"home is a writable directory\"\r\n[/cli]\r\n<p>\r\nОператоры <code>&lt;</code> и <code>&gt;</code> используются для сравнения строк, а не чисел. Для сравнения чисел надо использовать <code>((…))</code>, например <code>((foo &gt; 7))</code>.\r\n</p>\r\n<p>\r\nМожно сказать, что конструкция <code>[[…]]</code> является расширенной версией команды <code>test</code>: она умеет делать все то же самое + позволяет использовать <code>&amp;&amp;</code>, <code>||</code> и круглые скобки <code>(…)</code> без обратных слэшей.\r\n</p>\r\n<p>\r\nКроме того, конструкция <code>[[…]]</code> поддерживает регулярные выражения:\r\n[code][[ string =~ pattern ]][/code]\r\n<p>\r\nСтатус выхода устанавливается в 0, если регулярное выражение совпало со строкой, и 1, если нет. Значение подвыражения, заключённого в скобки, можно получить через переменную <code>BASH_REMATCH[@]</code>, например:\r\n</p>\r\n[bash]\r\nREGEXP=\'foo(bar)bl(.*)\'\r\nif [[ \"abcfoobarbletch\" =~ $REGEXP ]] ; then\r\n    echo \"Регулярное выражение совпало со строкой!\" \r\n    echo \"$BASH_REMATCH\"      # выводит: foobarbletch \r\n    echo \"${BASH_REMATCH[1]}\" # выводит: bar \r\n    echo \"${BASH_REMATCH[2]}\" # выводит: etch \r\nfi\r\n[/bash]','2018-03-03 18:12:54',1),(58,14,'Модуль Webbrowser','','','Python, Web-разработка, Модуль','Поставляется вместе с Python и предназначен для открытия браузера на определенной странице. Как обычно, сначала импортируем модуль, потом вызываем метод open(). Чтобы получше познакомиться c Webbrowser, напишем небольшой скрипт, который будет открывать Яндекс.Карты.','<p>\r\nПоставляется вместе с Python и предназначен для открытия браузера на определенной странице. Как обычно, сначала импортируем модуль, потом вызываем метод <code>open()</code>.\r\n</p>\r\n[idle]\r\n>>> import webbrowser\r\n>>> webbrowser.open(\'http://yandex.ru/\')\r\nTrue\r\n[/idle]\r\n<p>\r\nЧтобы получше познакомиться c Webbrowser, напишем небольшой скрипт. Он будет принимать почтовый адрес из командной строки или из буфера обмена и открывать Яндекс.Карты.\r\n<p>\r\n[python]\r\n# Открывает карту в браузере, извлекая адрес\r\n# из командной строки или буфера обмена\r\n\r\nimport webbrowser, sys, pyperclip\r\nfrom urllib import parse\r\n\r\nif len(sys.argv) > 1:\r\n    address = \' \'.join(sys.argv[1:])\r\nelse:\r\n    address = pyperclip.paste()\r\n\r\naddress = parse.urlencode({\'text\': address})\r\nwebbrowser.open(\'https://yandex.ru/maps/?\' + address)\r\n[/python]\r\n<p>\r\n<img src=\"/files/blog/58/1.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/58/2.jpg\" alt=\"\" />\r\n</p>','2018-03-04 12:27:23',1),(59,7,'Параметры формы','','','1С:Предприятие, ОткрытьФорму, Параметр, ПолучитьФорму, ПриСозданииНаСервере, УправляемаяФорма','Все параметры формы можно разделить на две группы: стандартные и заданные разработчиком. Большим плюсом стандартных параметров является отсутствие необходимости какой-либо обработки: задал параметр — получил результат.','<p>\r\nВсе параметры формы можно разделить на две группы: стандартные и заданные разработчиком. Большим плюсом стандартных параметров является отсутствие необходимости какой-либо обработки: задал параметр — получил результат. Список этих параметров, определяется типом объекта.\r\n</p>\r\n<p>\r\nНапример, параметр «ТекущееЗначение», позволяет позиционировать форму выбора справочника на определенном элементе. Большим плюсом является, что в самой форме не требуется писать обработчиков для предопределенных параметров, сокращает количество кода.\r\n</p>\r\n[язык]\r\nПараметры = Новый Структура(\"ТекущееЗначение\", ТекЭлемент);\r\nФормаВыбора = ПолучитьФорму(\"Справочник.Номенклатура.ФормаВыбора\", Параметры);\r\nФормаВыбора.Открыть();\r\n[/язык]\r\n[язык]\r\nПараметры = Новый Структура(\"ТекущееЗначение\", ТекЭлемент);\r\nОткрытьФорму(\"Справочник.Номенклатура.ФормаВыбора\", Параметры);\r\n[/язык]\r\n<p>\r\nТакже у разработчика есть возможность определять свои параметры на вкладке «Параметры» конструктора управляемой формы. Время жизни параметров ограничено обработчиком <code>ПриСозданииНаСервере()</code>, что логично т.к. параметры требуются только при создании формы. Но, если данный параметр определяет уникальность формы (установлен флаг «ключевой параметр» в свойствах параметра), он будет доступен и в других обработчиках.\r\n</p>\r\n<p>\r\nПередача параметров при открытии формы:\r\n</p>\r\n[язык]\r\nПараметры = Новый Структура(\"МойПараметр\", ТекЭлемент);\r\nФормаВыбора = ПолучитьФорму(\"Справочник.Номенклатура.ФормаВыбора\", Параметры);\r\nФормаВыбора.Открыть();\r\n[/язык]\r\n[язык]\r\nПараметры = Новый Структура(\"МойПараметр\", ТекЭлемент);\r\nОткрытьФорму(\"Справочник.Номенклатура.ФормаВыбора\", Параметры);\r\n[/язык]\r\n<p>\r\nОбработка передаваемого параметра в модуле открываемой формы:\r\n</p>\r\n[язык]\r\n&НаСервере\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n    Если Параметры.Свойство(\"МойПараметр\") Тогда\r\n        // обработка параметра\r\n    КонецЕсли;\r\nКонецПроцедуры\r\n[/язык]\r\n\r\n<h2>Стандартные параметры</h2>\r\n<h3>Стандартные параметры формы динамического списка</h3>\r\n<ul>\r\n  <li><code>ВыборГруппИЭлементов</code>. Тип: <code>ИспользованиеГруппИЭлементов</code>. По данному параметру устанавливается свойство <code>ВыборГруппИЭлементов</code> таблицы основного реквизита формы.</li>\r\n  <li><code>ДополнительныеПараметры</code>. Тип: <code>Структура</code>. Дополнительные параметры формы, открываемой при нажатии кнопки «Создать».</li>\r\n  <li><code>КлючПользовательскихНастроек</code>. Тип: <code>Произвольный</code>. Содержит ключ пользовательских настроек, которые нужно использовать для основного динамического списка формы. Если не установлен параметр <code>ПользовательскиеНастройки</code>, то будут загружены пользовательские настройки по указанному ключу.</li>\r\n  <li><code>МножественныйВыбор</code>. Тип: <code>Булево</code>. Устанавливает для основной таблицы свойства <code>МножественныйВыбор</code> и <code>РежимВыделения</code>.</li>\r\n  <li><code>Отбор</code>. Тип: <code>Структура</code>. Используется для установки отбора в динамическом списке. Ключ структуры — имя поля основной таблицы. Значение элемента структуры содержит значение отбора. Если значение является массивом, фиксированным массивом или списком значений с не одним элементом, то отбор будет применяться с видом сравнения <code>ВСписке</code>.</li>\r\n  <li><code>ПользовательскиеНастройки</code>. Тип: <code>ПользовательскиеНастройкиКомпоновкиДанных</code>. Пользовательские настройки, которые будут использоваться в основном динамическом списке формы.</li>\r\n  <li><code>РазрешитьВыборКорня</code>. Тип: <code>Булево</code>. Определяет возможность выбора корня в форме с динамическим списком, отображаемом в виде дерева.</li>\r\n  <li><code>РежимВыбора</code>. Тип: <code>Булево</code>. Открывать форму в режиме выбора.</li>\r\n  <li><code>ТекущаяСтрока</code>. Строка динамического списка, на которую будет установлен курсор после открытия формы. В качестве значения для параметра используются значения ссылок на объекты, которые содержит главная таблица динамического списка. Например, <code>СправочникСсылка.Товары</code>.</li> \r\n  <li><code>ФиксированныеНастройки</code>. </code>Тип</code>: НастройкиКомпоновкиДанных. Настройки, помещаемые в фиксированные настройки отчета.</li>\r\n</ul>\r\n\r\n<h3>Стандартные параметры формы документа</h3>\r\n<ul>\r\n  <li><code>ДополнительныеПараметры</code>. Тип: <code>Структура</code>. Дополнительные параметры формы, открываемой при нажатии кнопки «Создать».</li>\r\n  <li><code>ЗначениеКопирования</code>. Значение для копирования. Тип параметра соответствует типу объекта, копия которого будет создана.</li> \r\n  <li><code>ЗначенияЗаполнения</code>. Тип: <code>Структура</code>. Параметры заполнения нового объекта. Ключ структуры — имя реквизита формы, значение — заполняемое значение.</li> \r\n  <li><code>Ключ</code>. Тип: <code>ДокументСсылка.ИмяДокумента</code>. Ключ объекта. В случае отсутствия или неверного значения создается новый объект с использованием остальных параметров.</li> \r\n  <li><code>Основание</code>. Тип: <code>Произвольный</code>. Объект, являющийся основанием для создания нового объекта.</li> \r\n  <li><code>ПараметрыВыбора</code>. Тип: <code>Структура</code>. Содержит значения, по которым проверяется возможность выбора для форм, находящихся в режиме выбора.</li> \r\n  <li><code>РежимВыбора</code>. Тип: <code>Булево</code>. Позволяет открывать форму в режиме выбора.</li> \r\n  <li><code>ТекстЗаполнения</code>. Тип: <code>Строка</code>. Текст, введенный в поле ввода, при открытии формы в режиме выбора.</li>\r\n</ul>\r\n\r\n<h3>Стандартные параметры формы справочника</h3>\r\n<ul>\r\n  <li><code>ДополнительныеПараметры</code>. Тип: <code>Структура</code>. Дополнительные параметры формы, открываемой при нажатии кнопки «Создать».</li>\r\n  <li><code>ЗначениеКопирования</code>. Значение для копирования. Тип параметра соответствует типу объекта, копия которого будет создана.</li> \r\n  <li><code>ЗначенияЗаполнения</code>. Тип: <code>Структура</code>. Параметры заполнения нового объекта.</li> \r\n  <li><code>Ключ</code>. Тип: <code>СправочникСсылка.ИмяСправочника</code>. Ключ объекта. В случае отсутствия или неверного значения создается новый объект с использованием остальных параметров.</li> \r\n  <li><code>Основание</code>. Тип: <code>Произвольный</code>. Объект, являющийся основанием для создания нового объекта.</li> \r\n  <li><code>ПараметрыВыбора</code>. Тип: <code>Структура</code>. Содержит значения, по которым проверяется возможность выбора для форм, находящихся в режиме выбора.</li>\r\n  <li><code>РежимВыбора</code>. Тип: <code>Булево</code>. Позволяет открывать форму в режиме выбора.</li> \r\n  <li><code>ТекстЗаполнения</code>. Тип: <code>Строка</code>. Текст, введенный в поле ввода, при открытии формы в режиме выбора.</li>\r\n  <li><code>ЭтоГруппа</code>. Тип: <code>Булево</code>. Определяет вид нового объекта — группа или элемент.</li> \r\n</ul>\r\n\r\n<h3>Стандартные параметры формы плана видов характеристик</h3>\r\n<ul>\r\n  <li><code>ДополнительныеПараметры</code>. Тип: <code>Структура</code>. Дополнительные параметры формы, открываемой при нажатии кнопки «Создать».</li>\r\n  <li><code>ЗначениеКопирования</code>. Значение для копирования. Тип параметра соответствует типу объекта, копия которого будет создана.</li>\r\n  <li><code>ЗначенияЗаполнения</code>. Тип: <code>Структура</code>. Параметры заполнения нового объекта.</li>\r\n  <li><code>Ключ</code>. Тип: <code>ПланВидовХарактеристикСсылка.ИмяПВХ</code>. Ключ объекта. В случае отсутствия или неверного значения создается новый объект с использованием остальных параметров.</li>\r\n  <li><code>ОбъектОтбораВидовХарактеристик</code>. Тип: <code>Произвольный</code>. Содержит объект отбора видов характеристик. Если значение данного параметра не равно <code>Неопределено</code>, то определяется тип значения.</li>\r\n  <li><code>Основание</code>. Тип: <code>Произвольный</code>. Объект, являющийся основанием для создания нового объекта.</li> \r\n  <li><code>ПараметрыВыбора</code>. Тип: <code>Структура</code>. Содержит значения, по которым проверяется возможность выбора для форм, находящихся в режиме выбора.</li>\r\n  <li><code>РежимВыбора</code>. Тип: <code>Булево</code>. Позволяет открывать форму в режиме выбора.</li>\r\n  <li><code>ТекстЗаполнения</code>. Тип: <code>Строка</code>. Текст, введенный в поле ввода, при открытии формы в режиме выбора.</li>\r\n  <li><code>ЭтоГруппа</code>. Тип: <code>Булево</code>. Определяет вид нового объекта — группа или элемент.</li>\r\n</ul>\r\n\r\n<h2>Справка</h2>\r\n\r\n[язык]\r\nПолучитьФорму(ИмяФормы, Параметры, Владелец, Уникальность, Окно, НавигационнаяСсылка)\r\n[/язык]\r\n<p>Параметры:</p>\r\n<ul>\r\n  <li><code>ИмяФормы</code> (обязательный, тип: <code>Строка</code>). Образуется как полный путь к объекту метаданных <code>Форма</code> (например, <code>\"Справочник.Контрагенты.Форма.ФормаОбъекта\"</code>, <code>\"ОбщаяФорма.ФормаСохраненияФайла\"</code>) или как полный путь к прикладному объекту, дополненный именем формы по умолчанию (например, <code>\"Справочник.Товары.ФормаВыбора\"</code>).</li>\r\n  <li><code>Параметры</code> (необязательный, тип: <code>Структура</code>). Ключ структуры — имя параметра, а значение — значение параметра формы. Имя элемента должно совпадать с именем параметра структуры.</li>\r\n  <li><code>Владелец</code> (необязательный). Форма или элемент управления другой формы.\r\n  <li><code>Уникальность</code> (необязательный, тип: <code>Произвольный</code>). В данном параметре может быть задан некоторый ключ, значение которого будет использоваться для поиска уже открытых форм. Если будет найдена форма с таким же ключом уникальности, вместо открытия новой формы будет активизирована найденная форма.\r\n    <ul>\r\n      <li><code>Ложь</code> — искать форму с ключом уникальности по умолчанию</li>\r\n      <li><code>Истина</code> — не искать форму вообще, любое другое значение устанавливает ключ уникальности, по которому будет произведен поиск</li>\r\n      <li>Значение по умолчанию: <code>Ложь</code></li>\r\n    </ul>\r\n  </li>\r\n  <li><code>Окно</code> (необязательный, тип: <code>ОкноКлиентскогоПриложения</code>; <code>ВариантОткрытияОкна</code>). Окно приложения, в котором будет открыта форма. Применимо только для управляемой формы. Окном может быть только основное окно приложения или вспомогательное окно формы. Если указан тип <code>ВариантОткрытияОкна</code>, окно формы будет создано согласно выбранному варианту.</li>\r\n  <li><code>НавигационнаяСсылка</code> (необязательный, тип: <code>Строка</code>; <code>Неопределено</code>). Если содержит значение, отличное от <code>Неопределено</code>, то это значение присваивается свойству <code>НавигационнаяСсылка</code> формы, полученной в результате вызова данного метода, и свойство <code>АвтоНавигационнаяСсылка</code> этой формы устанавливается в <code>Ложь</code>. Значение по умолчанию: <code>Неопределено</code>.</li>\r\n</ul>\r\n<p>Возвращаемое значение:</p>\r\n<ul>\r\n  <li>Тип: <code>Форма</code>; <code>УправляемаяФорма</code>; <code>Неопределено</code>. <code>Неопределено</code> — если в обработчике <code>ПриСозданииНаСервере</code> установлен признак отказа от создания формы.</li>\r\n</ul>\r\n<p>Описание:</p>\r\n<ul>\r\n  <li>Получает форму или управляемую форму. Перед получением осуществляется поиск уже открытой такой же формы. Поиск осуществляется по типу формы, значениям ключевых параметров формы, владельцу формы, пользовательскому ключу уникальности. Если в параметре <code>Уникальность</code> передано значение <code>Истина</code>, то поиск уже открытых форм не осуществляется.</li>\r\n</ul>\r\n<p>Доступность:</p>\r\n<ul>\r\n  <li>Тонкий клиент, веб-клиент, толстый клиент, мобильное приложение (клиент). Вызов метода выполняет обращение к серверу.</li>\r\n</ul>\r\n\r\n[язык]\r\nПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n[/язык]\r\n<p>Параметры:</p>\r\n<ul>\r\n  <li><code>Отказ</code> (Тип: <code>Булево</code>). Признак отказа от создания формы. Если в теле процедуры-обработчика установить данному параметру значение <code>Истина</code>, то форма создана не будет. Значение по умолчанию: <code>Ложь</code>.</li>\r\n  <li><code>СтандартнаяОбработка</code> (Тип: <code>Булево</code>). В данный параметр передается признак выполнения стандартной (системной) обработки события. Если в теле процедуры-обработчика установить данному параметру значение <code>Ложь</code>, стандартная обработка события производиться не будет. Значение по умолчанию: <code>Истина</code>.</li>\r\n</ul>\r\n<p>Описание:</p>\r\n<ul>\r\n  <li>Возникает на сервере при создании формы.</li>\r\n</ul>','2018-03-04 18:38:28',1),(60,14,'Примеры скриптов на Python','','','Python, Web-разработка, Модуль','Примеры скриптов: 1. Скачивает страницу и сохраняет ее в файл; 2. Открывает карту в браузере, извлекая адрес из командной строки или буфера обмена; 3. Ищет в буфере обмена номера телефонов и адреса эл.почты; 4. Копирует директорию со всем ее содержимым в zip-файл с инкрементным номером в имени файла.','[python]\r\n# Скачивает страницу и сохраняет ее в файл\r\n\r\nimport requests\r\n\r\nresult = requests.get(\'http://www.tinko.info/\')\r\ntry:\r\n    result.raise_for_status()\r\nexcept Exception as e:\r\n    print(\'Ошибка при загрузке страницы: \' + str(e))\r\n\r\nfile = open(\'C:\\\\example\\\\tinko.txt\', mode = \'w\', encoding = \'utf-8\')\r\nfile.write(result.text)\r\nfile.close()\r\n[/python]\r\n\r\n[python]\r\n# Открывает карту в браузере, извлекая адрес\r\n# из командной строки или буфера обмена\r\n\r\nimport webbrowser, sys, pyperclip\r\nfrom urllib import parse\r\n\r\nif len(sys.argv) > 1:\r\n    address = \' \'.join(sys.argv[1:])\r\nelse:\r\n    address = pyperclip.paste()\r\n\r\naddress = parse.urlencode({\'text\': address})\r\nwebbrowser.open(\'https://yandex.ru/maps/?\' + address)\r\n[/python]\r\n\r\n[python]\r\n# Ищет в буфере обмена номера телефонов и адреса эл.почты\r\n\r\n# импортируем модули pyperclip (работа с буфером обмена)\r\n# и re (работа с регулярными выражениями)\r\nimport pyperclip, re\r\n\r\n# регулярное выражение для номера телефона\r\nphoneRegex = re.compile(\'\'\'(\r\n    (?:\\(?(\\d{3})\\)?)?             # код города\r\n    (?:\\s|-)?                      # разделитель\r\n    (\\d{3})                        # первые три цифры\r\n    (?:\\s|-)?                      # разделитель\r\n    (\\d{2})                        # еще две цифры\r\n    (?:\\s|-)?                      # разделитель\r\n    (\\d{2})                        # еще две цифры\r\n    (?:\\s*доб[.а-я]*\\s*(\\d{2,5}))? # добавочный\r\n    )\'\'\', re.VERBOSE)\r\n\r\n# регулярное выражение для адреса эл.почты\r\nemailRegex = re.compile(\'\'\'\r\n    [a-z0-9._-]+     # имя пользователя\r\n    @                # @\r\n    [a-z0-9.-]+      # первая часть домена\r\n    \\.[a-z]{2,6}     # вторая часть домена\r\n    \'\'\', re.VERBOSE | re.IGNORECASE)\r\n\r\n# получить содержимое буфера обмена\r\ntext = str(pyperclip.paste())\r\n\r\n# список для хранения найденных номеров\r\n# телефонов и адресов эл.почты\r\nmatches = []\r\n\r\n# цикл по найденным номерам телефонов\r\nfor groups in phoneRegex.findall(text):\r\n    phoneNum = \'+7 (\' + groups[1] + \') \' + groups[2] + \'-\' + groups[3] + \'-\' + groups[4]\r\n    if groups[5] != \'\':\r\n        phoneNum += \' доб.\' + groups[5]\r\n    # пропускаем дубли\r\n    if phoneNum not in matches:\r\n        matches.append(phoneNum)\r\n\r\n# цикл по найденным адресам эл.почты\r\nfor groups in emailRegex.findall(text):\r\n    if groups not in matches:\r\n        # пропускаем дубли\r\n        matches.append(groups)\r\n\r\n# копируем результат в буфер обмена\r\nif len(matches) > 0:\r\n    pyperclip.copy(\'\\n\'.join(matches))\r\n    print(\'Скопировано в буфер обмена:\')\r\n    print(\'\\n\'.join(matches))\r\nelse:\r\n    print(\'Телефонные номера и адреса почты не найдены.\')\r\n[/python]\r\n\r\n[python]\r\n# Копирует директорию со всем ее содержимым в\r\n# zip-файл с инкрементным номером в имени файла\r\n\r\nimport zipfile, os\r\n\r\ndef backupToZip(source, backup):\r\n    \"\"\"Создание резервной копии всего содержимого директории source\"\"\"\r\n\r\n    # Проверить, что обе директории существуют\r\n    if not (os.path.isabs(source) and os.path.isdir(source)):\r\n        print(\'Директория %s не существует\' % (source))\r\n        return\r\n    if not (os.path.isabs(backup) and os.path.isdir(backup)):\r\n        print(\'Директория %s не существует\' % (backup))\r\n        return\r\n\r\n    # Определить, какое имя файла будет у zip-архива,\r\n    # исходя из имен уже существующих файлов\r\n    number = 1\r\n    while True:\r\n        name = os.path.basename(source) + \'-\' + str(number) + \'.zip\'\r\n        backupFile = os.path.join(backup, name)\r\n        if not os.path.isfile(backupFile):\r\n            break\r\n        number = number + 1\r\n\r\n    # Создание нового zip-файла\r\n    print(\'Создание нового zip-файла %s...\' % (backupFile))\r\n    zipFile = zipfile.ZipFile(backupFile, \'w\')\r\n\r\n    # Обход всего дерева директории и сжатие файлов в каждой папке\r\n    archDirName = \'\'\r\n    for dir, subdirs, files in os.walk(source):\r\n        print(\'Добавление файлов из директории %s...\' % (dir))\r\n        # Имя текущей директории в архиве\r\n        archDirName = \'/\'.join([archDirName, os.path.basename(dir)]).strip(\'/\')\r\n        # Добавить в архив текущую директорию\r\n        zipFile.write(dir, archDirName)\r\n\r\n        # Добавить в архив все файлы из текущей директории\r\n        for file in files:\r\n            # Имя текущего файла в архиве\r\n            archFileName = archDirName + \'/\' + file\r\n            zipFile.write(os.path.join(dir, file), archFileName)\r\n\r\n    # Закрываем zip-файл\r\n    zipFile.close()\r\n\r\n    print(\'Готово\')\r\n\r\n# end function backupToZip()\r\n\r\n\r\nbackupToZip(\'C:\\\\project\', \'C:\\\\backup\')\r\n[/python]','2018-03-05 09:43:31',1),(61,14,'Работа с HTTP в Python, модуль Requests','','','HTTP, Python, Web-разработка, Модуль','Модуль Requests не поставляется вместе с Python, поэтому сперва установим его, выполнив команду pip install requests. Теперь попробуем получить веб-страницу. Как обычно, импортируем модуль и вызываем метод requests.get().','<p>\r\nМодуль Requests не поставляется вместе с Python, поэтому сперва установим его, выполнив команду <code>pip install requests</code>. Теперь попробуем получить веб-страницу. Как обычно, импортируем модуль и вызываем метод <code>requests.get()</code>:\r\n</p>\r\n[idle]\r\n>>> import requests\r\n>>> res = requests.get(\'https://www.python.org\')\r\n>>> type(res)\r\n<class \'requests.models.Response\'>\r\n>>> res.status_code\r\n200\r\n>>> res.status_code == requests.codes.ok\r\nTrue\r\n>>> res.encoding\r\n\'utf-8\'\r\n>>> len(res.text)\r\n48844\r\n>>> print(res.text)\r\n<!doctype html>\r\n<!--[if lt IE 7]>   <html class=\"no-js ie6 lt-ie7 lt-ie8 lt-ie9\"> ...\r\n[/idle]\r\n<p>\r\nМетод <code>requests.get()</code> возвращает объект <code>Response</code>. Проверить успешность запроса можно с помощью свойства <code>status_code</code> или вызвать метод <code>raise_for_status()</code> для объекта <code>Response</code>:\r\n</p>\r\n[idle]\r\n>>> res = requests.get(\'https://www.python.org/bla-bla-bla\')\r\n>>> res.raise_for_status()\r\nTraceback (most recent call last):\r\n  File \"<pyshell#12>\", line 1, in <module>\r\n    res.raise_for_status()\r\n  File \"C:\\python\\lib\\site-packages\\requests\\models.py\", line 935, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 404 Client Error: OK for url: https://www.python.org/bla-bla-bla\r\n[/idle]\r\n<p>\r\nЕсли ошибка при загрузке страницы не является критичной для дальнейшей работы, можно обработать исключение:\r\n</p>\r\n[python]\r\nres = requests.get(\'https://www.some-host.ru/bla-bla-bla\')\r\ntry:\r\n    res.raise_for_status()\r\nexcept Exception as e:\r\n    print(\'Ошибка при загрузке страницы: \' + str(e))\r\n[/python]\r\n[code]\r\nОшибка при загрузке страницы: 404 Client Error: Not Found for url: http://www.some-host.ru/bla-bla-bla\r\n[/code]\r\n<p>\r\nПри выполнении запроса, модуль <code>requests</code> устанавливает кодировку на основании заголовков HTTP. Эта кодировка используется при обращении к <code>res.text</code>. Если кодировка была определена неправильно, ее можно изменить:\r\n</p>\r\n[python]\r\nres.encoding = \'ISO-8859-1\'\r\n[/python]\r\n<p>\r\nТеперь посмотрим, как получить бинарные данные, например, изображение:\r\n</p>\r\n[python]\r\nres = requests.get(\'http://www.some-host.ru/files/slider/4.jpg\')\r\nimgFile = open(\'C:\\\\example\\\\slider.jpg\', \'wb\')\r\nimgFile.write(res.content)\r\nimgFile.close()\r\n[/python]\r\n<p>\r\nПри потоковой загрузке (методу <code>requests.get()</code> надо передать именованный аргумент <code>stream=True</code>) рекомендуется использовать метод <code>iter_content(size)</code>, который возвращает порции данных размером <code>size</code> на каждой итерации:\r\n</p>\r\n[python]\r\nwith open(filename, \'wb\') as f:\r\n    for chunk in res.iter_content(100000):\r\n        f.write(chunk)\r\n[/python]\r\n<p>\r\nДля передачи параметров в запросе, надо использовать параметр <code>params</code> метода <code>requests.get()</code>:\r\n</p>\r\n[python]\r\nparams = {\'first\': \'первый\', \'second\': \'второй\'}\r\nres = requests.get(\'http://httpbin.org/get\', params = params)\r\nprint(res.url)\r\n[/python]\r\n[code]\r\nhttp://httpbin.org/get?[red]first=%D0%BF%D0%B5%D1%80%D0%B2%D1%8B%D0%B9[/red]&[red]second=%D0%B2%D1%82%D0%BE%D1%80%D0%BE%D0%B9[/red]\r\n[/code]\r\n<p>\r\nЛюбой ключ словаря, значение которого <code>None</code>, не будет добавлен к строке запроса URL.\r\n</p>\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"/articles/item/11\">Python, библиотека Requests: быстрый старт</a></li>\r\n  <li><a href=\"https://www.youtube.com/watch?v=8vwoc0n6Isc\">Парсинг сайтов: как скачивать картинки и другие файлы</a></li>\r\n</ul>','2018-03-09 11:01:37',1),(62,14,'Парсинг сайтов, модуль Beautiful Soup','','','Python, Web-разработка, Модуль, Парсинг','Beautiful Soup — модуль, предназначенный для извлечения информации из HTML-документа. Для установки модуля выполняем команду pip install beautifulsoup4 в командной строке и импортируем его с помощью инструкции import bs4.','<p>\r\nBeautiful Soup — модуль, предназначенный для извлечения информации из HTML-документа. Для установки модуля выполняем команду <code>pip install beautifulsoup4</code> в командной строке и импортируем его с помощью инструкции <code>import bs4</code>.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/62/1.jpg\" alt=\"\" />\r\n</p>\r\n[idle]\r\n>>> import requests, bs4\r\n>>> res = requests.get(\'http://www.tinko.info/\')\r\n>>> soup = bs4.BeautifulSoup(res.text, \"html.parser\")\r\n>>> type(soup)\r\n<class \'bs4.BeautifulSoup\'>\r\n[/idle]\r\n<p>\r\nДля получения элемента HTML-документа можно использовать метод <code>select()</code> и передать ему строку CSS-селектора искомого элемента. Примеры наиболее часто используемых селекторов:\r\n<p>\r\n<table class=\"data-table\">\r\n<tr>\r\n  <td><code>\'div\'</code></td>\r\n  <td>Все элементы <code>&lt;div&gt;</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>\'#author\'</code></td>\r\n  <td>Элемент, атрибут <code>id</code> которого имеет значение <code>author</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>\'.notice\'</code></td>\r\n  <td>Все элементы, атрибут <code>class</code> которых имеет значение <code>notice</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>\'div span\'</code></td>\r\n  <td>Все элементы <code>&lt;span&gt;</code>, вложенные в элементы <code>&lt;div&gt;</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>\'div &gt; span\'</code></td>\r\n  <td>Все элементы <code>&lt;span&gt;</code>, вложенные <em>непосредственно</em> в элементы <code>&lt;div&gt;</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>\'input[name]\'</code></td>\r\n  <td>Все элементы <code>&lt;input&gt;</code>, имеющие атрибут <code>name</code>, независимо от его значения</td>\r\n</tr>\r\n<tr>\r\n  <td><code>\'input[type=\"button\"]\'</code></td>\r\n  <td>Все элементы <code>&lt;input&gt;</code>, имеющие атрибут name со значением <code>button</code></td>\r\n</tr>\r\n</table>\r\n<p>Получим элемент <code>&lt;title&gt;</code> HTML-документа:</p>\r\n[idle]\r\n>>> title = soup.select(\'head > title\')\r\n>>> type(title)\r\n<class \'list\'>\r\n>>> len(title)\r\n1\r\n>>> title\r\n[<title>Торговый Дом ТИНКО</title>]\r\n>>> title[0].getText()\r\n\'Торговый Дом ТИНКО\'\r\n[/idle]\r\n<p>Скрипты, подключенные к странице:</p>\r\n[idle]\r\n>>> js = soup.select(\'head > script[type=\"text/javascript\"]\')\r\n>>> js\r\n[<script src=\"http://www.tinko.info/view/tinko/frontend/resource/js/jquery-2.1.1.min.js\" type=\"text/javascript\"></script>,\r\n<script src=\"http://www.tinko.info/view/tinko/frontend/resource/js/jquery.cookie.js\" type=\"text/javascript\"></script>,...]\r\n>>> js[0].attrs\r\n{\'type\': \'text/javascript\', \'src\': \'http://www.tinko.info/view/tinko/frontend/resource/js/jquery-2.1.1.min.js\'}\r\n>>> js[0].attrs[\'type\']  # получаем значение атрибута\r\n\'text/javascript\'\r\n>>> script = js[0]\r\n>>> script.get(\'src\') # получаем значение атрибута\r\n\'http://www.tinko.info/view/tinko/frontend/resource/js/jquery-2.1.1.min.js\'\r\n[/idle]\r\n\r\n[python]\r\n# Открывает несколько вкладок браузера с результатами\r\n# поиска; поисковый запрос берёт из командной строки\r\n\r\nimport requests, sys, webbrowser, bs4\r\n\r\nprint(\'Поиск...\')\r\n# Получаем из командной строки поисковый запрос\r\nparam = {\'q\': \' \'.join(sys.argv[1:])}\r\nres = requests.get(\'http://google.com/search\', params = param)\r\nif res.status_code != requests.codes.ok:\r\n    print(\'Ошибка при загрузке страницы Google\')\r\n    sys.exit()\r\n\r\nsoup = bs4.BeautifulSoup(res.text, \"html.parser\")\r\n\r\n# Открываем вкладку браузера для каждого результата\r\nlinks = soup.select(\'.r a\')\r\nnumOpen = min(5, len(links))\r\nfor i in range(numOpen):\r\n    webbrowser.open(\'http://google.com\' + links[i].get(\'href\'))\r\n[/python]\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"https://www.youtube.com/watch?v=3hgkiDAaSQs\">Приемы работы с библиотекой BeautifulSoup</a></li>\r\n  <li><a href=\"https://www.youtube.com/watch?v=IGPUs49a1Zo\">Парсинг данных с сайта несколькими процессами</a></li>\r\n</ul>','2018-03-09 12:20:17',1),(63,13,'Раскрытие выражений (expansion)','','','Bash, CLI, Linux, Команда','Когда оболочка получает какую-то командную строку на выполнение, она до начала выполнения команды осуществляет «грамматический разбор» полученной командной строки. Одним из этапов такого «разбора» является подстановка выражений.','<p>\r\nКогда оболочка получает какую-то командную строку на выполнение, она до начала выполнения команды осуществляет «грамматический разбор» полученной командной строки. Одним из этапов такого «разбора» является раскрытие или подстановка выражений (expansion). В bash имеется семь типов подстановки выражений:\r\n</p>\r\n<ul>\r\n  <li>раскрытие скобок (brace expansion);</li>\r\n  <li>замена знака тильды (tilde expansion);</li>\r\n  <li>подстановка параметров и переменных;</li>\r\n  <li>подстановка команд;</li>\r\n  <li>арифметические подстановки (выполняемые слева направо);</li>\r\n  <li>разделение слов (word splitting);</li>\r\n  <li>раскрытие шаблонов имен файлов и каталогов (pathname expansion).</li>\r\n</ul>\r\n<p>\r\nВсе эти операции выполняются именно в том порядке, как они здесь перечислены.\r\n</p>\r\n<h3>Раскрытие скобок</h3>\r\n<p>\r\nРаскрытие скобок проще всего пояснить на примере. Предположим, что нам нужно создать сразу несколько подкаталогов в каком-то каталоге. Эти можно выполнить с помощью команды:\r\n</p>\r\n[cli]\r\n$ mkdir /usr/local/src/bash/{old,new,dist,bugs}\r\n[/cli]\r\n<p>\r\nВ каталоге <code>/usr/local/src/bash/</code> будут созданы подкаталоги <code>old</code>, <code>new</code>, <code>dist</code> и <code>bugs</code>. Другими словами, строка <code>a{b,c,d}e</code> при раскрытии скобок превращается в три слова «<code>abe ace ade</code>».\r\n</p>\r\n<p>\r\nРаскрытие скобок выполняется до выполнения других видов подстановок в командной строке, причем все специальные символы, встречающиеся в командной строке, в том числе внутри скобок, сохраняются неизменными (они будут интерпретированы на следующих этапах анализа строки).\r\n</p>\r\n<h3>Замена тильды</h3>\r\n<p>\r\nЕсли слово начинается с символа тильды <code>~</code>, все символы до первого слэша (или все символы, если слэша нет) трактуются как имя пользователя (login name).\r\n</p>\r\n<p>\r\nЕсли это имя есть пустая строка (т. е. вслед за тильдой идет сразу слэш), то тильда заменяется на значение переменной <code>HOME</code>. Если значение переменной <code>HOME</code> не задано, тильда заменяется на полный путь к домашнему каталогу пользователя, запустившего оболочку.\r\n</p>\r\n<h3>Подстановка параметров и переменных</h3>\r\n<p>\r\nСимвол <code>$</code> используется для обозначения операций подстановки параметров, подстановки команд и подстановок арифметических выражений. Выражение или имя, следующее за <code>$</code>, может быть заключено в скобки; что не обязательно, но удобно, так как позволяет отделить заменяемое выражение от следующих за ним слов или символов. Таким образом, чтобы в командной строке вызвать значение параметра (в частности, любой переменной), нужно вставить выражение вида <code>${parameter}</code>.\r\n</p>\r\n<p>\r\nСкобки необходимы только в том случае, если имя параметра состоит из нескольких цифр, или когда за именем следует символ, который не должен интерпретироваться как часть имени.\r\n</p>\r\n<p>\r\nВсе значения переменных подвергаются подстановке знака тильды, раскрытию параметров и переменных, подстановке команд, подстановкам арифметических выражений, а также удалению специальных символов цитирования. Разделение слов не производится, за исключением случая <code>\"$@\"</code>. Раскрытие шаблонов имен файлов и каталогов не производится.\r\n</p>\r\n<h3>Подстановка команд</h3>\r\n<p>\r\nПодстановка команд является очень мощным инструментов bash. Она заключается в замене имени команды на результат ее выполнения. Существует две формы подстановки команд:\r\n</p>\r\n[code]$(command)[/code]\r\n[code]`command`[/code]\r\n<p>\r\nЕсли подстановка производится внутри двойных кавычек, то в результатах подстановки не осуществляется разделение слов и раскрытие шаблонов имен файлов и каталогов.\r\n</p>\r\n<h3>Арифметичекие подстановки</h3>\r\n<p>\r\nАрифметические подстановки позволяют вычислить значение арифметического выражения и подставить вместо него результат.\r\n</p>\r\n[code]$((expression))[/code]\r\n<p>Например, команда</p>\r\n[cli]$ echo $(( 2 + 3 * 5 ))[/cli]\r\n<p>в качестве результата выдает <code>17</code>.</p>\r\n<h3>Разделение слов</h3>\r\n<p>\r\nПосле завершения подстановок параметров, команд и арифметических выражений оболочка снова анализирует командную строку (в том виде, который она приобрела к этому моменту) и осуществляет разделение слов.\r\n</p>\r\n<p>\r\nЭта операция заключается в том, что в командной строке ищутся все вхождения символов-разделителей, определенных в переменой <code>IFS</code>, и в соответствующих местах строки разделяются на отдельные слова. Если значение <code>IFS</code> равно пустой строке, разделение слов не производится.\r\n</p>\r\n<p>\r\nЕсли в командной строке не производилось никаких подстановок, то разбиение на слова не производится.\r\n</p>\r\n<h3>Раскрытие шаблонов имен файлов и каталогов</h3>\r\n<p>\r\nПодстановки имен путей и файлов используются для того, чтобы с помощью краткого образца или шаблона указать несколько имен файлов (или каталогов), соответствующих данному шаблону. После разделения слов, если не была задана опция <code>-f</code>, bash производит поиск в каждом слове командной строки символов <code>*</code>, <code>?</code>, <code>[</code>. Если будет найдено слово с одним или несколькими вхождениями таких символов, то это слово рассматривается как шаблон, который должен быть заменен словами из лексикографически упорядоченного списка имен путей, соответствующих данному шаблону.\r\n</p>\r\n<p>\r\nСпециальные символы шаблонов имеют следующее значение.\r\n</p>\r\n<ul>\r\n  <li><code>*</code> — Соответствует произвольной строке символов, включая пустую строку. Например, <code>my*.txt</code> будет заменено на <code>myday.txt</code>, <code>myweek.txt</code> и <code>mymonth.txt</code>, а <code>*.jpg</code> соответствует всем файлам с расширением jpg в указанном каталоге.</li>\r\n  <li><code>?</code> — Соответствует любому одиночному символу. Например, вместо шаблона <code>file?.txt</code> будут подставлены имена <code>file1.txt</code> и <code>filex.txt</code>, но не <code>file10.txt</code>.\r\n  <li><code>[…]</code> — Соответствует любому символу из числа символов, указанных в скобках. Пары символов, разделенные знаком дефиса, обозначают интервал; любой символ стоящий лексически между этими двумя символами, соответствует шаблону. Если первым символом внутри скобок является <code>!</code> или <code>^</code>, то считается, что шаблону соответствуют все символы, не указанные в скобках.\r\n</ul>\r\n<p>\r\nШаблоны имен файлов очень часто применяются в командных строках, содержащих команду <code>ls</code>. Допустим, надо просмотреть информацию о содержимом каталога, в котором находится огромное количество разных файлов различных форматов. Чтобы получить только список файлов формата jpeg, можно использовать команду\r\n</p>\r\n[cli]$ ls *.jpg[/cli]\r\n<p>\r\nЕсли в каталоге имеется множество файлов, имена которых представлены четырехзначными номерами, то следующей командой можно вывести только список файлов с номерами от 0200 до 0499:\r\n</p>\r\n[cli]$ ls -l 0[2-4]??.*[/cli]\r\n<h3>Удаление специальных символов</h3>\r\n<p>\r\nПосле того, как все подстановки в командной строке сделаны, из нее еще удаляются все вхождения символов <code>\\</code>, <code>`</code> и <code>\"</code>, которые служили для отмены специального значения других символов.\r\n</p>','2018-03-10 11:27:57',1),(64,13,'Подстановки имен файлов','','','Bash, CLI, Linux, Команда, Файл, Шаблон','Когда вы набираете команду типа ls *.txt и нажимаете Enter, задача поиска файлов, совпадающих с критерием *.txt решается не только командой ls, но и самой оболочкой. Здесь требуется небольшое объяснение о том, как командная строка интерпретируется в shell.','<p>\r\nКогда вы набираете команду типа <code>ls *.txt</code> и нажимаете Enter, задача поиска файлов, совпадающих с критерием <code>*.txt</code> решается не только командой <code>ls</code>, но и самой оболочкой. Здесь требуется небольшое объяснение о том, как командная строка интерпретируется в shell. При вводе:\r\n</p>\r\n[cli]\r\n$ ls *.txt\r\nreadme.txt recipes.txt\r\n[/cli]\r\n<p>\r\nКомандная строка сначала разделяет слова (<code>ls</code> и <code>*.txt</code> в этом примере). Когда оболочка видит <code>*</code> в слове, она будет интерпретировать все слово как шаблон постановки и заменять его именами всех совпадающих файлов. Следовательно, команда, перед тем как оболочка выполняет ее, становится такой\r\n</p>\r\n[cli]\r\n$ ls readme.txt recipes.txt\r\n[/cli]\r\n<p>\r\nчто дает результат выполнения:\r\n</p>\r\n[cli]\r\nreadme.txt recipes.txt\r\n[/cli]\r\n<p>\r\nДругие специальные символы:\r\n</p>\r\n</ul>\r\n  <li><code>?</code> — соответствует одному и только одному символу, независимо от того чем этот символ является;</li>\r\n  <li><code>[…]</code> — соответствует одному символу, найденному в скобках. Символы можно указать как диапазон символов (то есть <code>1-9</code>) или дискретные значения, или даже и то и другое. Пример: <code>[a-zBE5-7]</code> будет соответствовать всем символам между <code>a</code> и <code>z</code>, <code>B</code>, <code>E</code>, <code>5</code>, <code>6</code> или <code>7</code>;</li>\r\n  <li><code>[!…]</code> — соответствует любому символу, не находящемуся в скобках. Например, <code>[!a-z]</code>, будет соответствовать любому символу который не является буквой в нижнем регистре;</li>\r\n  <li><code>{abc,def}</code> — соответствует <code>abc</code> или <code>def</code>, где <code>abc</code> и <code>def</code> также шаблоны подстановки; это означает, что можно написать <code>{[0-9]*,[xyz]}</code> например.</li>\r\n</ul>\r\n<p>\r\nНесколько примеров:\r\n</p>\r\n<ul>\r\n  <li><code>/etc/*conf</code> — все файлы в каталоге <code>/etc</code> с окончаниями в именах <code>conf</code>. Это может соответствовать <code>/etc/inetd.conf</code>, <code>/etc/conf.linuxconf</code>, а также <code>/etc/conf</code> если такой файл существует. Не надо забывать, что <code>*</code> может соответствовать пустой строке.</li>\r\n  <li><code>image/{cars,space[0-9]}/*.jpg</code> — все файлы, заканчивающиеся на <code>.jpg</code> в каталогах <code>image/cars</code>, <code>image/space0</code>, …, <code>image/space9</code>, если эти каталоги существуют.</li>\r\n  <li><code>/usr/share/doc/*/README</code> — все файлы с именем README во всех каталогах <code>/usr/share/doc</code> непосредственно. Это будет соответствовать <code>/usr/share/doc/mandrake/README</code>, например, но не соответствовать <code>/usr/share/doc/myprog/doc/README</code>.</li>\r\n  <li><code>*[!a-z]</code> — все файлы, имена которых не заканчиваются буквой в нижнем регистре в текущем каталоге.</li>\r\n</ul>\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"/blog/item/63\">Раскрытие выражений (expansion)</a></li>\r\n</ul>','2018-03-06 11:54:06',1),(65,14,'Модуль Selenium, управление браузером','','','Python, Web-разработка, Модуль','Selenium — это инструмент для автоматизированного управления браузерами. Наиболее популярной областью применения Selenium является автоматизация тестирования веб-приложений. Однако можно автоматизировать любые другие рутинные действия, выполняемые через браузер.','<p>\r\nSelenium — это инструмент для автоматизированного управления браузерами. Наиболее популярной областью применения Selenium является автоматизация тестирования веб-приложений. Однако можно автоматизировать любые другие рутинные действия, выполняемые через браузер.\r\n</p>\r\n<p>\r\nУстанавливаем Selenium:\r\n</p>\r\n[cli]\r\n> pip install selenium\r\n[/cli]\r\n<p>\r\n<img src=\"/files/blog/65/1.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nДля браузера Firefox загружаем драйвер <a href=\"https://github.com/mozilla/geckodriver/releases\">geckodriver</a> для своей версии ОС и прописываем путь к нему в переменной окружения <code>PATH</code>.\r\n<p>\r\n<p>\r\nПробуем управлять браузером удаленно:\r\n</p>\r\n[idle]\r\n>>> from selenium import webdriver\r\n>>> browser = webdriver.Firefox()\r\n>>> type(browser)\r\n<class \'selenium.webdriver.firefox.webdriver.WebDriver\'>\r\n>>> browser.get(\'http://yandex.ru/\')\r\n[/idle]\r\n<p>\r\n<img src=\"/files/blog/65/2.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nОбъект <code>WebDriver</code> имеет большое количество методов, предназначенных для поиска элементов на странице. Эти методы можно поделить на две группы: <code>find_element_*()</code> и <code>find_elements_*()</code>. Методы первой группы возвращают одиночный объект <code>WebElement</code>, который представляет первый из найденных на странице элементов. Методы второй группы возвращают список объектов <code>WebElement</code>, соответствующих запросу.\r\n</p>\r\n<ul>\r\n  <li><code>find_element_by_id()</code> — элемент с указанным <code>id</code></li>\r\n  <li><code>find_element_by_name()</code> — элемент с указанным значением атрибута <code>name</code></li>\r\n  <li><code>find_element_by_tag_name()</code> — элемент с указанным именем тега</li>\r\n  <li><code>find_element_by_class_name()</code> — элемент с указанным CSS-классом</li>\r\n  <li><code>find_element_by_css_selector()</code> — элемент с указанным CSS-селектором</li>\r\n  <li><code>find_element_by_link_text()</code> — элемент <code>&lt;a&gt;</code> с указанным текстом</li>\r\n  <li><code>find_element_by_partial_link_text()</code> — элемент <code>&lt;a&gt;</code>, содержащий указанный текст</li>\r\n</ul>\r\n<ul>\r\n  <li><code>find_elements_by_name()</code>  — элементы с указанным значением атрибута <code>name</code></li>\r\n  <li><code>find_elements_by_tag_name()</code> — элементы с указанным именем тега</li>\r\n  <li><code>find_elements_by_class_name()</code> — элементы с указанным CSS-классом</li>\r\n  <li><code>find_elements_by_css_selector()</code> — элементы с указанным CSS-селектором</li>\r\n  <li><code>find_elements_by_link_text()</code> — элементы <code>&lt;a&gt;</code> с указанным текстом</li>\r\n  <li><code>find_elements_by_partial_link_text()</code> — элементы <code>&lt;a&gt;</code>, содержащие указанный текст</li>\r\n</ul>\r\n<p>\r\nПример использования:\r\n</p>\r\n[html]\r\n<html>\r\n    <body>\r\n        <form id=\"loginForm\">\r\n            <input name=\"username\" type=\"text\" />\r\n            <input name=\"password\" type=\"password\" />\r\n            <input name=\"continue\" type=\"submit\" value=\"Login\" />\r\n        </form>\r\n    </body>\r\n<html>\r\n[/html]\r\n<p>Находим поля «Имя пользователя» и «Пароль»:</p>\r\n[python]\r\nusername = browser.find_element_by_name(\'username\')\r\npassword = browser.find_element_by_name(\'password\')\r\n[/python]\r\n<p>\r\nСвойства и методы объекта <code>WebElement</code>:\r\n</p>\r\n<ul>\r\n  <li><code>tag_name</code> — имя тега</li>\r\n  <li><code>get_attribute()</code> — значение атрибута с указанным именем</li>\r\n  <li><code>text</code> — текст, содержащийся в элементе</li>\r\n  <li><code>clear()</code> — удаляет текст, введенный в текстовое поле</li>\r\n  <li><code>is_displayed()</code> — возвращает <code>True</code>, если элемент видимый и <code>False</code> в противном случае</li>\r\n  <li><code>is_enabled()</code> — возвращает <code>True</code> для элемента ввода, если элемент активизирован и <code>False</code> в противном случае</li>\r\n  <li><code>is_selected()</code> — возвращает <code>True</code> для <code>checkbox</code>, если элемент выбран и <code>False</code>  в противном случае</li>\r\n  <li><code>location</code> —  словарь с ключами <code>x</code> и <code>y</code> позиции элемента на странице</li>\r\n</ul>\r\n[python]\r\nimport sys\r\nfrom selenium import webdriver\r\n\r\nbrowser = webdriver.Firefox()\r\nbrowser.get(\'http://www.tinko.info/\')\r\ntry:\r\n    elements = browser.find_elements_by_class_name(\'news-heading\')\r\n    print(\'Найдены элементы с заданным именем класса\')\r\nexcept:\r\n    print(\'Не найдены элементы с заданным именем класса\')\r\n    sys.exit(1)\r\n\r\nfor element in elements:\r\n    print(element.text)\r\n[/python]\r\n\r\n<h2>Клик на элементе страницы</h2>\r\n<p>\r\nОбъект <code>WebElement</code> имеет метод <code>click()</code>, имитирующий клик мышкой на элементе. Этот метод можно использовать для перехода по ссылке, для отправки данных формы или инициирования любого другого действия, которое может быть запущено кликом на элементе.\r\n</p>\r\n[python]\r\nfrom selenium import webdriver\r\n\r\nbrowser = webdriver.Firefox()\r\nbrowser.get(\'http://www.tinko.info/\')\r\nelement = browser.find_element_by_link_text(\'Контакты\')\r\n# Перейти на страницу «Контакты»\r\nelement.click()\r\n[/python]\r\n\r\n<h2>Заполнение и отправка формы</h2>\r\n<p>\r\nДля отправки данных формы:\r\n</p>\r\n<ul>\r\n  <li>находим нужные поля <code>&lt;input&gt;</code></li>\r\n  <li>заполняем их, используя метод <code>send_keys()</code></li>\r\n  <li>вызываем метод <code>submit()</code> для любого элемента формы или метод <code>click()</code> для кнопки <code>Submit</code></li>\r\n</ul>\r\n[python]\r\nfrom selenium import webdriver\r\n\r\nbrowser = webdriver.Firefox()\r\nbrowser.get(\'http://www.tinko.info/\')\r\n# переходим на страницу входа в личный кабинет\r\nlink = browser.find_element_by_partial_link_text(\'Личный кабинет\')\r\nlink.click()\r\n# находим на странице элементы формы и заполняем их\r\nemail = browser.find_element_by_css_selector(\'#login-user-center input[name=\"email\"]\')\r\nemail.send_keys(\'pupkin@mail.ru\')\r\npassword = browser.find_element_by_css_selector(\'#login-user-center input[name=\"password\"]\')\r\npassword.send_keys(\'qwerty\')\r\n# находим на странице кнопку отправки формы\r\nsubmit = browser.find_element_by_css_selector(\'#login-user-center input[type=\"submit\"]\')\r\n# отправляем данные формы на сервер\r\nsubmit.click()\r\n[/python]\r\n<p>\r\n<img src=\"/files/blog/65/3.jpg\" alt=\"\" />\r\n</p>\r\n\r\n<h2>Отправка кодов специальных клавиш</h2>\r\n<p>\r\nSelenium включает модуль для отправки в браузер нажатий специальных клавиш: Up, Down, Left, Right, Enter, Return, Home, PageUp, PageDown, End, Escape, BackSpace, Delete, F1…F12, Tab.\r\n</p>\r\n[python]\r\nfrom selenium import webdriver\r\nfrom selenium.webdriver.common.keys import Keys\r\n\r\nbrowser = webdriver.Firefox()\r\nbrowser.get(\'http://www.tinko.info/repair\')\r\nhtml = browser.find_element_by_tag_name(\'html\')\r\nhtml.send_keys(Keys.END) # прокрутка в конец\r\nhtml.send_keys(Keys.HOME) # прокрутка в начало\r\n[/python]\r\n\r\n<h2>Щелчки на кнопках браузера</h2>\r\n<p>\r\nМодуль Selenium также может имитировать щелчки на кнопках браузера:\r\n</p>\r\n<ul>\r\n  <li><code>browser.back()</code> — щелчок на кнопке «Назад»</li>\r\n  <li><code>browser.forward()</code> — щелчок на кнопке «Вперед»</li>\r\n  <li><code>browser.refresh()</code> — щелчок на кнопке «Обновить»</li>\r\n  <li><code>browser.quit()</code> — щелчок на кнопке «Закрыть»</li>\r\n</ul>\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"https://selenium2.ru/\">Что такое Selenium?</a></li>\r\n  <li><a href=\"https://selenium-python.com/install-geckodriver\">Установка драйвера geckodriver для Firefox Selenium</a></li>\r\n  <li><a href=\"https://selenium-python.com/install-chromedriver-chrome\">Установка драйвера chromedriver для Chrome Selenium</a></li>\r\n  <li><a href=\"https://habrahabr.ru/post/250975/\">Selenium для Python. Поиск элементов</a></li>\r\n</ul>','2018-03-10 17:37:19',1),(66,10,'Команда getopts','','','Bash, CLI, Linux, Команда','Команды Linux предполагают, что некоторые из переданных аргументов будут опциями. Исторически сложилось так, что это были переключатели в виде одиночных символов, отличающиеся от других параметров стоящей перед ними дефисом.','<p>\r\nКоманды Linux предполагают, что некоторые из переданных аргументов будут опциями. Исторически сложилось так, что это были переключатели в виде одиночных символов, отличающиеся от других параметров стоящей перед ними дефисом. Для удобства некоторые опции могут быть скомбинированы, как в команде <code>ls -lrt</code>.\r\n</p>\r\n<p>\r\nЧтобы использовать те же методы в скриптах shell, можно использовать команду <code>getopts</code>, которая облегчает задачу. Чтобы увидеть, как она работает, рассмотрим пример:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\necho \"Начальное значение OPTIND равно $OPTIND\"\r\nwhile getopts \":pq:\" option ; do\r\n    case \"$option\" in\r\n      \"p\") echo \"Найдена опция $option\";;\r\n      \"q\") echo \"Опция $option имеет значение $OPTARG\";;\r\n      \"?\") echo \"Неизвестная опция $OPTARG\";;\r\n      \":\") echo \"Не передано значение для опции $OPTARG\";;\r\n       * ) echo \"Произошла неизвестная ошибка\";;\r\n    esac\r\n    echo \"OPTIND имеет значение $OPTIND\"\r\ndone\r\n[/bash]\r\n<p>\r\nКоманда <code>getopts</code> возвращает нулевой код завершения, если опция найдена. Если в командной строке больше не остается аргументов или же текущий аргумент не начинается с дефиса, <code>getopts</code> возвращает ненулевой код завершения.\r\n</p>\r\n<p>\r\n<strong>Первый аргумент</strong>, передаваемый команде <code>getopts</code> — список букв, обозначающих опции, которые будут распознаваться, в данном случае <code>p</code> и <code>q</code>. Двоеточие после буквы показывает, что опция требует значения. Первое двоеточие дает указание не показывать обычные сообщения об ошибках, поскольку этот скрипт имеет собственную обработку ошибок.\r\n</p>\r\n<p>\r\n<strong>Второй аргумент</strong>, передаваемый команде <code>getopts</code> — имя переменной, которая получит имя найденной опции (в нашем примере <code>option</code>). Если ожидается, что опция будет иметь значение, это значение будет помещено в <strong>переменной</strong> <code>OPTARG</code>.\r\n</p>\r\n<p>\r\nКроме <code>OPTARG</code>, есть еще одна предустановленная <strong>переменная</strong> <code>OPTIND</code>, которая изначально установлена в <code>1</code>. Затем она содержит индекс следующего подлежащего обработке параметра.\r\n</p>\r\n<p>\r\nЕсли найдена неопознанная опция, переменная <code>option</code> будет содержать <code>?</code> и <code>OPTARG</code> будет содержать эту неизвестную опцию.\r\n</p>\r\n<p>\r\nЕсли найдена опция, которая требует значения, но значения нет, <code>optname</code> будет содержать <code>:</code> и <code>OPTARG</code> будет содержать имя опции, чей аргумент отсутствует.\r\n</p>\r\n<p>\r\nРезультат работы скрипта:\r\n</p>\r\n[cli]\r\n$ ./testopt.sh -p -q\r\nНачальное значение OPTIND равно 1\r\nНайдена опция p\r\nOPTIND имеет значение 2\r\nНе передано значение для опции q\r\nOPTIND имеет значение 3\r\n[/cli]\r\n[cli]\r\n$ ./testopt.sh -p -q -r -s tuv\r\nНачальное значение OPTIND равно 1\r\nНайдена опция p\r\nOPTIND имеет значение 2\r\nОпция q имеет значение -r\r\nOPTIND имеет значение 4\r\nНеизвестная опция s\r\nOPTIND имеет значение 5\r\n[/cli]','2018-03-11 18:00:35',1),(67,13,'Кавычки в bash','','','Bash, CLI, Linux','Оболочка распознает четыре типа знаков кавычек: знак одиночной кавычки, знак двойной кавычки, знак обратного слэша, знак обратной кавычки. Одиночные кавычки чаще всего используется для объединения в единый элемент последовательности символов, включая пробелы.','<p>\r\nОболочка распознает четыре типа знаков кавычек:\r\n</p>\r\n<ul>\r\n  <li>знак одиночной кавычки</li>\r\n  <li>знак двойной кавычки</li>\r\n  <li>знак обратного слэша</li>\r\n  <li>знак обратной кавычки</li>\r\n</ul>\r\n<p>\r\n<h2>Одиночные кавычки</h2>\r\n<p>\r\nЧаще всего используются для объединения в единый элемент последовательности символов, включая пробелы. Рассмотрим пример:\r\n</p>\r\n[cli]\r\n$ cat phonebook.txt\r\nAlice Chebba     973-555-2015\r\nBarbara Swingle  201-555-9257\r\nLiz Stachiw      212-555-2298\r\nSusan Goldberg   201-555-7776\r\nSusan Topple     212-555-4932\r\nTony Iannino     973-555-1295\r\n[/cli]\r\n<p>\r\nЧтобы вывести сведения о конкретном абоненте, достаточно выполнить команду:\r\n</p>\r\n[cli]\r\n$ grep Susan phonebook.txt\r\nSusan Goldberg   201-555-7776\r\nSusan Topple     212-555-4932\r\n[/cli]\r\n<p>\r\nБыло найдено два абонента. Попробуем уточнить поиск:\r\n</p>\r\n[cli]\r\n$ grep Susan Goldberg phonebook.txt\r\n[red]grep: can\'t open Goldberg[/red]\r\nSusan Goldberg   201-555-7776\r\nSusan Topple     212-555-4932\r\n[/cli]\r\n<p>\r\nЭто не работает. Проблема в том, что в оболочке пробелы служат для разделения аргументов команды. Команда <code>grep</code> интерпретирует первый аргумент как шаблон для поиска, а все остальные — как имена файлов для поиска. Теперь попробуем так:\r\n</p>\r\n[cli]\r\n$ grep \'Susan Goldberg\' phonebook.txt\r\nSusan Goldberg   201-555-7776\r\n[/cli]\r\n<p>\r\nКогда оболочка обнаруживает первую открывающую одинарную кавычку, она игнорирует любые последующие специальные символы до тех пор, пока не обнаружит вторую закрывающую кавычку. Важно подчеркнуть, что игнорируются <strong>все</strong> специальные символы, если они заключены в одиночные кавычки:\r\n</p>\r\n[cli]\r\n$ file=/home/evgeniy/readme.txt\r\n$ echo $file\r\n/home/evgeniy/readme.txt\r\n$ echo \'$file\'\r\n$file\r\n$ echo *\r\nreadme.txt phonebook.txt unix.txt\r\n$ echo \'*\'\r\n*\r\n[/cli]\r\n<p>\r\nКавычки требуются и в том случае, если переменным присваиваются значения, содержащие пробелы или специальные символы, хотя здесь имеются свои особенности:\r\n</p>\r\n[cli]\r\n$ text=\'one two three four\'\r\n$ echo $text\r\none two three four\r\n$ text=\'* means all files in the direcory\'\r\n$ echo $text\r\n[red]readme.txt phonebook.txt unix.txt[/red] means all files in the direcory\r\n[/cli]\r\n<p>\r\nВо втором случае показано, что при подстановке значения пременной <code>text</code> оболочка интерпретирует <code>*</code> как указание на подстановку имен файлов из текущей директории. Чтобы избежать этого, надо делать так:\r\n</p>\r\n[cli]\r\n$ text=\'* means all files in the directory\'\r\n$ echo \"$text\"\r\n* means all files in the directory\r\n[/cli]\r\n\r\n<h2>Двойные кавычки</h2>\r\n<p>\r\nДвойные кавычки действуют таким же образом, как и одиночные, за исключением того, что они в меньшей стапени защищают свое содержимое. Если одиночные кавычки предписывают оболочке игнорировать <strong>все</strong> заключенные в них специальные символы, то двойные кавычки — игнорировать <strong>бо&#x301;льшую</strong> их часть. В частности, следующие три символа <strong>не</strong> игнорируются в двойных кавычках:\r\n</p>\r\n<ul>\r\n  <li>знак <code>$</code></li>\r\n  <li>знак обратной кавычки</li>\r\n  <li>знак обратного слэша</li>\r\n</ul>\r\n<p>\r\nТот факт, что знак <code>$</code> не игнорируется в двойных кавычках, означает, что вместо имени переменной оболочка подставляет значение этой переменной:\r\n</p>\r\n[cli]\r\n$ filelist=*\r\n$ echo $filelist\r\nreadme.txt phonebook.txt unix.txt\r\necho \'$filelist\'\r\n$filelist\r\n$ echo \"$filelist\"\r\n*\r\n[/cli]\r\n<p>\r\nВ последнем случае двойные кавычки предписывают оболочке подставить вместо имени переменной ее значение (символ <code>*</code>). Но поскольку подстановка имен файлов <strong>не</strong> выполняется в двойных кавычках, то символ <code>*</code> передается команде <code>echo</code> как отображаемое значение.\r\n</p>\r\n<p>\r\nРассмотрим еще один пример, нагладно демонстрирующий, чем отстутствие кавычек отличается от наличия двойных кавычек:\r\n</p>\r\n[cli]\r\n$ address=\"39 East 12th Street\r\n> New York, N. Y. 10003\"\r\n$ echo $address\r\n39 East 12th Street New York, N. Y. 10003\r\n$ echo \"$address\"\r\n39 East 12th Street\r\nNew York, N. Y. 10003\r\n[/cli]\r\n<p>\r\nОболочка ужаляет символы прообела, табуляции и новой строки (т.е. все пробельные символы) из командной строки, а затем разделяет ее на аргументы, прежде чем передать их запрашиваемой команде. Поэтому при выводе значения переменной <code>$address</code> без кавычек, оболочка удалила символ новой строки. А затем передала команде <code>echo</code> <strong>девять</strong> аргументов.\r\n</p>\r\n<p>\r\nВо втором случае, когда выводится значение переменной <code>$address</code> в кавычках, оболочка оставляет без внимания любые заключенные в них пробелы. Таким образом, оболочка передаст команде <code>echo</code> единственный аргумент, содержащий символ новой строки.\r\n</p>\r\n\r\n<h2>Обратный слэш</h2>\r\n<p>\r\nФункционально обратный слэш перед символом равнозначен заключению этого символа в одиночные кавычки, хотя и за рядом незначительных исключений. Обратный слэш <strong>экранирует</strong> следующий сразу за ним символ:\r\n</p>\r\n[cli]\r\n$ filelist=*\r\n$ echo \\$filelist\r\n$filelist\r\n[/cli]\r\n<p>\r\nКогда обратный слэш указывается последним во вводимой строке, оболочка интерпретирует его как знак продолжения строки. В этом случае она <strong>удаляет</strong> следующий далее знак новой строки, не интерпретируя его как разделитель аргументов, как будто его вообще не было:\r\n</p>\r\n[cli]\r\n$ lines=first\\\r\n> second\r\n$ echo $lines\r\nfirstsecond\r\n[/cli]\r\n<p>\r\nКак уже упоминалось, обратный слэш относится к числу трех символов, интерпретируемых оболочкой в двойных кавычках. Это означает, что с помощью обратного слэша можно экранировать символы <code>$</code> и двойных кавычек:\r\n</p>\r\n[cli]\r\n$ echo \"\\$x\"\r\n$x\r\n$ y=5\r\n$ echo \"Значение переменной \\\"y\\\" равно $y\"\r\nЗначение переменной \"y\" равно 5\r\n[/cli]\r\n\r\n<h2>Подстановка команд</h2>\r\n<p>\r\nОболочка имеет возможность заменить указанную команду результатом ее выполнения в любом месте командной строки. Выполнить подстановку можно двумя способами: заключив команду в обратные кавычки или использовать конструкцию <code>$(…)</code>.\r\n</p>\r\n[cli]\r\n$ echo Your current working directory is $(pwd)\r\nYour current working directory is /home/evgeniy\r\n[/cli]','2018-03-14 17:39:47',1),(68,10,'Команда read','','','$REPLY, Bash, CLI, Linux, read, stdin, Команда, Переменная','Когда выполняется эта команда, оболочка читает строку из стандартного ввода и присваивает первое слово первой переменной, второе слово — второй переменной и т.д. Если же слов в строке оказывается больше, чем переменных, лишние слова присваиваются последней переменной.','<p>\r\nОбщая форма этой команды выглядит следующим образом:\r\n</p>\r\n[code]\r\nread [grn][опции][/grn] [red]переменная1 переменная2 …[/red]\r\n[/code]\r\n<p>\r\nКогда выполняется эта команда, оболочка читает строку из стандартного ввода и присваивает первое слово первой переменной, второе слово — второй переменной и т.д. Если же слов в строке оказывается больше, чем переменных, лишние слова присваиваются последней переменной.\r\n</p>\r\n<ul>\r\n  <li>Опция <code>-t</code> позволяет указать <code>timeout</code> в секундах, после которого команда отдаст управление назад в скрипт.</li>\r\n  <li>Опция <code>-s</code> скрывает ввод; это нужно для получения каких-то конфиденциальных данных, например пароля.</li>\r\n  <li>Опция <code>-d</code> указывает символ, при появлении которого чтение ввода нужно завершить; по умолчанию это символ переноса строки.</li>\r\n  <li>Опция <code>-p строка</code> показывает строку приглашения без оконечного перевода строки; обычно с помощью этой опции выводят подсказку, перед тем как команда будет считывать данные.</li>\r\n</ul>\r\n<p>\r\n<p>\r\nЕсли команде не было передано ни одной переменной, то ввод будет сохранен в переменную <code>$REPLY</code>.\r\n</p>\r\n</p>\r\nКоманда <code>read</code> часто используется в цикле <code>while</code> для построчного чтения файла. Команда <code>read</code> возвращает нулевой код завершения до тех пор, пока не обнаружит конец файла. Если данные поступают с терминала, это означает, что пользователь нажал комбинацию клавиш <code>Ctrl+D</code>. \r\n<p>\r\n[bash]\r\nwhile read line ; do\r\n    команда1\r\n    команда2\r\n    ........\r\ndone < data.txt\r\n[/bash]\r\n<p>\r\nВ качестве примера выведем список всех пользователей из файла <code>/etc/passwd</code>:\r\n</p>\r\n[cli]\r\n$ while read line; do echo \"$line\" | cut -f1 -d:; done < /etc/passwd\r\nroot\r\ndaemon\r\nbin\r\n.....\r\n[/cli]\r\n<p>\r\nНиже приведен пример скрипта, который называется <code>number</code> и является упрощенной версией стандартной команды <code>nl</code>. Он принимает в качестве аргументов один или несколько файлов и отображает их содержимое в отдельно пронумерованных строках. Если же аргументы не заданы, скрипт читает данные из стандартного ввода.\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nnumber=1\r\n\r\ncat \"$@\" |\r\nwhile read line ; do\r\n    echo \"$number: $line\"\r\n    ((number++))\r\ndone\r\n[/bash]\r\n[cli]\r\n$ cat linux.txt\r\nUbuntu\r\nRedhat\r\nCentos\r\nDebian\r\nFedora\r\n$ ./number linux.txt\r\n1: Ubuntu\r\n2: Redhat\r\n3: Centos\r\n4: Debian\r\n5: Fedora\r\n[/cli]\r\n[cli]\r\n$ cat /etc/passwd | ./number \r\n1: root:x:0:0:root:/root:/bin/bash\r\n2: daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\n3: bin:x:2:2:bin:/bin:/usr/sbin/nologin\r\n..........\r\n[/cli]\r\n<p>\r\nИ еще один скрипт, который представляет собой упрощенную версию команды <code>cp</code>:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\n# Скрипт копирует файл из source в target; source может быть списком файлов, тогда target\r\n# должен быть каталогом.\r\n\r\nnumargs=$#      # количество аргументов \r\nsource_list=\"\"  # список исходных файлов\r\ncopy_list=\"\"    # список конечных файлов\r\n\r\n#\r\n# Обрабатываем аргументы, сохраняя в переменной source_list все, кроме последнего аргумента\r\n#\r\nwhile [ \"$#\" -gt 1 ] ; do\r\n    source_list=\"$source_list $1\"\r\n    shift\r\ndone\r\ntarget=\"$1\"  # файл или директория\r\n\r\n#\r\n# Если количество аргументов меньше двух или количество аргументов больше двух, но последний\r\n# аргумент не является каталогом, вывести сообщение об ошибке и завершить работу\r\n#\r\nif [ \"$numargs\" -lt 2 -o \"$numargs\" -gt 2 -a ! -d \"$target\" ] ; then\r\n    echo \"Использование: $0 file1 file2\"\r\n    echo \"Или так: $0 file(s) dir\"\r\n    exit 1\r\nfi\r\n\r\n#\r\n# Перебрать каждый файл в переменной source_list\r\n#\r\nfor item in $source_list ; do\r\n    # Выяснить, является ли целевой файл каталогом\r\n    if [ -d \"$target\" ] ; then\r\n        target_file=\"$target/$(basename $item)\"\r\n    else\r\n        target_file=\"$target\"\r\n    fi\r\n    \r\n    # Добавить имя файла к переменной copy_list если файл еще не существует или если\r\n    # пользователь дает разрешение на его перезапись\r\n    if [ -e \"$target_file\" ] ; then\r\n        echo -n \"Файл $target_file уже существует. Перезаписать (да/нет)?\"\r\n        read answer\r\n        \r\n        if [ \"$answer\" = \"да\" ] ; then\r\n            copy_list=\"$copy_list $item\"\r\n        fi \r\n    else\r\n        copy_list=\"$copy_list $item\"\r\n    fi\r\ndone\r\n\r\n#\r\n# Теперь проверяем, что список файлов для копирования не пустой, и можно копировать\r\n#\r\nif [ -n \"$copy_list\" ] ; then\r\n    cp $copy_list $target\r\nfi\r\n[/bash]','2018-03-18 14:37:05',1),(69,10,'Циклы for, while и until','','','Bash, IFS, Linux, for, until, while, Оператор, Цикл','Оператор for служит для выполнения одной или нескольких команд указанное количество раз. Команды, указанные в промежутке между операторами do и done, называются телом цикла. В начале цикла первое слово присваивается переменной цикла и далее выполняется тело цикла.','<p>\r\nОператор <code>for</code> служит для выполнения одной или нескольких команд указанное количество раз. Общая форма этого оператора, реализующего цикл:\r\n</p>\r\n[bash]\r\nfor var in слово1 слово2 …\r\ndo\r\n    команда\r\n    команда\r\n    .......\r\ndone\r\n[/bash]\r\n<p>\r\nПожалуй, самый простой пример цикла <code>for</code> в bash-скриптах — это перебор списка простых значений:\r\n</p>\r\n[bash]\r\nfor var in first second third\r\ndo\r\n    echo \"The  $var item\"\r\ndone\r\n[/bash]\r\n[code]\r\nThe first item\r\nThe second item\r\nThe third item\r\n[/code]\r\n<p>\r\nОдин из самых распространённых вариантов использования циклов <code>for</code> в bash-скриптах заключается в обходе файлов, находящихся в некоей директории, и в обработке этих файлов.\r\n</p>\r\n[bash]\r\nfor file in /home/evgeniy/* ; do\r\n    if [ -d \"$file\" ] ; then\r\n        echo \"$file — это директория\"\r\n    elif [ -f \"$file\" ] ; then\r\n        echo \"$file — обычный файл\"\r\n    else\r\n        echo \"$file — что-то еще\"\r\n    fi\r\ndone\r\n[/bash]\r\n<p>\r\nВ скриптах можно использовать циклы <code>for</code>, описание которых выглядит очень похожим на циклы в стиле C:\r\n</p>\r\n[bash]\r\nfor (( i=1; i <= 10; i++ )) ; do\r\n    echo \"number is $i\"\r\ndone\r\n[/bash]\r\n<p>\r\nЕще один способ организации цикла заключается в том, чтобы передать <code>for</code> результат работы некой команды:\r\n</p>\r\n[bash]\r\nfor i in $(ls *.html) ; do\r\n    cp $i $i.bak\r\ndone\r\n[/bash]\r\n<p>\r\nВ теле цикла можно использовать любые команды, в том числе — запускать другие циклы. Чаще всего вложенные циклы используют для обработки файлов. Так, внешний цикл занимается перебором строк файла, а внутренний уже работает с каждой строкой.\r\n</p>\r\n[bash]\r\nIFS=$\'\\n\'\r\nfor entry in $(cat /etc/passwd) ; do\r\n    echo \"Values in $entry\"\r\n    IFS=:\r\n    for value in $entry ; do\r\n        echo $value\r\n    done\r\ndone\r\n[/bash]\r\n\r\n<h2>Циклы while и until</h2>\r\n<p>\r\nОператор <code>while</code> выполняет тело цикла, пока какое-то условие истинно, т.е. выражение или команда возвращают нулевой код. Оператор <code>until</code> наоборот, выполняет тело цикла, пока условие ложно, т.е. код возврата выражения или команды отличен от нуля.\r\n</p>\r\n<p>\r\nПростой пример цикла <code>while</code>:\r\n</p>\r\n[bash]\r\ncount=0\r\nwhile [ $count -lt 5 ] ; do\r\n    (( count++ ))\r\n    echo $count\r\ndone\r\n[/bash]\r\n[code]\r\n1\r\n2\r\n3\r\n4\r\n5\r\n[/code]\r\n<p>\r\nПростой пример цикла <code>until</code>:\r\n</p>\r\n[bash]\r\ncount=0\r\nuntil [ $count -ne 5 ] ; do\r\n    (( count++ ))\r\n    echo $count\r\ndone\r\n[/bash]\r\n[code]\r\n1\r\n2\r\n3\r\n4\r\n5\r\n[/code]','2018-03-19 16:20:37',1),(70,10,'Операторы if-then-else и case','','','Bash, Linux, Оператор','Практически любая программа требует выполнения различных наборов команд в зависимости от условий. В bash для этого есть операторы if-then-else и case. Оператор if-then-else проверяет код возврата команды и выполняет команды, следующие за словом then или else.','<p>\r\nПрактически любая программа требует выполнения различных наборов команд в зависимости от условий. В bash для этого есть операторы <code>if-then-else</code> и <code>case</code>.\r\n</p>\r\n<h2>Оператор if-then-else</h2>\r\n<p>\r\nОператор <code>if-then-else</code> проверяет — является ли код возврата команды нулевым (поскольку 0 означает ИСТИНА), и если это так, то выполняет команды, следующие за словом <code>then</code>. Если код возврата ненулевой (ЛОЖЬ), то выполняются команды, следующие за словом <code>else</code>.\r\n</p>\r\n[bash]\r\nif команда; then\r\n    команда\r\n    команда\r\n    .......\r\nelse\r\n    команда\r\n    команда\r\n    .......\r\nfi\r\n[/bash]\r\n<p>\r\nСуществует специальная команда — <code>[…]</code> (синонимом команды <code>test</code>). Она воспринимает свои аргументы как выражение сравнения или как файловую проверку и возвращает код завершения в соответствии с результатами проверки (0 — истина, 1 — ложь).\r\n</p>\r\n<p>\r\nВ новых версиях bash добавлена конструкция <code>[[…]]</code> (расширенный вариант команды <code>test</code>), которая выполняет сравнение способом, более привычном для программистов. Оболочка исполняет <code>[[[…]]</code> как один элемент, который имеет код возврата.\r\n</p>\r\n<p>\r\nКруглые скобки <code>((…))</code> возвращают код 0, если результатом арифметического выражения является ненулевое значение. Таким образом, арифметические выражения могут участвовать в операциях сравнения.\r\n</p>\r\n[bash]\r\nif [ \"$(whoami)\" != \'root\' ] ; then\r\n    echo \"У вас нет прав для запуска $0.\"\r\n    exit 1;\r\nfi\r\n[/bash]\r\n[bash]\r\nfor file in /home/evgeniy/* ; do\r\n    if [ -d \"$file\" ] ; then\r\n        echo \"$file — это директория\"\r\n    elif [ -f \"$file\" ] ; then\r\n        echo \"$file — обычный файл\"\r\n    else\r\n        echo \"$file — что-то еще\"\r\n    fi\r\ndone\r\n[/bash]\r\n\r\n<h2>Оператор case</h2>\r\n<p>\r\nОператор <code>case</code> позволяет выполнять тот или иной участок кода, в зависимости от результатов проверки условий. Она является, своего рода, краткой формой записи большого количества операторов <code>if/then/else</code>. Синтаксис крайне простой: нужно указать переменную, шаблоны и блоки кода после каждого шаблона.\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\n\r\n# считывание ввода пользователя\r\necho -n \'Введите имя файла: \'\r\nread file\r\n\r\n# проверяем совпадение переменной file с шаблоном\r\ncase $file in\r\n    *.php) echo \'Программа на языке PHP\'   ;;\r\n    *.js ) echo \'Исходный код JavaScript\'  ;;\r\n    *.css) echo \'Каскадная таблица стилей\' ;;\r\n        *) echo \'Тип файла не распознан\'   ;;\r\nesac\r\n[/bash]\r\n<p>\r\nОператору <code>case</code> можно передать всего один параметр, который поочередно сравнивается с подготовленными шаблонами. Если сравнение истинно, выполняется блок кода, следующий за шаблоном. Выполнение <code>case</code> завершится при отработке блока кода, либо прохождении всех шаблонов до конца и отсутствии совпадений.\r\n</p>\r\n<p>\r\nЕсли требуется назначить несколько шаблонов для одного и того же блока команд, используйте символ «|» для их разделения. Например, «<code>*.txt|*.shell</code>».\r\n</p>\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"/blog/item/50\">Команда test</a></li>\r\n  <li><a href=\"/blog/item/57\">Конструкции ((…)) и [[…]]</a></li>\r\n</ul>','2018-03-21 10:35:09',1),(71,14,'Работа с файлами Excel в Python','','','Excel, MS, Python, Web-разработка, Модуль','Документ электронной таблицы Excel называется рабочей книгой. Каждая книга может хранить некоторое количество листов. Лист, просматриваемый пользователем в данный момент, называется активным. Лист состоит из из столбцов (адресуемых с помощью букв, начиная с A) и строк (адресуемых с помощью цифр, начиная с 1).','<p>\r\nДокумент электронной таблицы Excel называется рабочей книгой. Каждая книга может хранить некоторое количество листов. Лист, просматриваемый пользователем в данный момент, называется активным. Лист состоит из из столбцов (адресуемых с помощью букв, начиная с A) и строк (адресуемых с помощью цифр, начиная с 1).\r\n</p>\r\n<p>\r\nМодуль OpenPyXL не поставляется вместе с Python, поэтому его предварительно нужно установить:\r\n</p>\r\n[cli]\r\n> pip install openpyxl\r\n[/cli]\r\n<p>\r\n<img src=\"/files/blog/71/1.jpg\" alt=\"\" />\r\n</p>\r\n\r\n<h2>Чтение файлов Excel</h2>\r\n\r\n<p>\r\nНачинаем работать:\r\n</p>\r\n[idle]\r\n>>> import openpyxl\r\n>>> wb = openpyxl.load_workbook(\'example.xlsx\')\r\n>>> type(wb)\r\n<class \'openpyxl.workbook.workbook.Workbook\'>\r\n>>> wb.sheetnames\r\n[\'Лист1\', \'Лист2\', \'Лист3\']\r\n>>> sheet = wb.active\r\n>>> sheet\r\n<Worksheet \"Лист1\">\r\n>>> sheet[\'A1\']\r\n<Cell Лист1.A1>\r\n[/idle]\r\n<p>\r\n<img src=\"/files/blog/71/2.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nА теперь небольшой скрипт:\r\n</p>\r\n[python]\r\nimport openpyxl\r\n\r\n# читаем excel-файл\r\nwb = openpyxl.load_workbook(\'example.xlsx\')\r\n\r\n# печатаем список листов\r\nsheets = wb.sheetnames\r\nfor sheet in sheets:\r\n    print(sheet)\r\n\r\n# получаем активный лист\r\nsheet = wb.active\r\n\r\n# печатаем значение ячейки A1\r\nprint(sheet[\'A1\'].value)\r\n# печатаем значение ячейки B1\r\nprint(sheet[\'B1\'].value)\r\n[/python]\r\n<p>\r\nРезультат работы:\r\n</p>\r\n[code]\r\nЛист1\r\nЛист2\r\nЛист3\r\n\r\n2015-04-05 13:34:02\r\nЯблоки\r\n[/code]\r\n<p>\r\nКак получить другой лист книги:\r\n</p>\r\n[python]\r\n# получаем другой лист\r\nsheet2 = wb[\'Лист2\']\r\n# печатаем значение ячейки A1\r\nprint(sheet2[\'A2\'].value)\r\n[/python]\r\n<p>\r\nКак сделать лист книги активным:\r\n</p>\r\n[python]\r\n# делаем третий лист активным\r\nwb.active = 2\r\n[/python]\r\n<p>\r\nКак задать имя листа:\r\n</p>\r\n[python]\r\nsheet.title = \'Третий лист\'\r\n[/python]\r\n<p>\r\nОбъект <code>Cell</code> имеет атрибут <code>value</code>, который содержит значение, хранящееся в ячейке. Объект <code>Cell</code> также имеет атрибуты <code>row</code>, <code>column</code> и <code>coordinate</code>, которые предоставляют информацию о расположении данной ячейки в таблице.\r\n</p>\r\n[python]\r\n# получаем ячейку листа B2\r\ncell = sheet[\'B2\']\r\nprint(\'Строка: \' + str(cell.row))\r\nprint(\'Столбец: \' + cell.column)\r\nprint(\'Ячейка: \' + cell.coordinate)\r\nprint(\'Значение: \' + cell.value)\r\n[/python]\r\n[code]\r\nСтрока: 2\r\nСтолбец: B\r\nЯчейка: B2\r\nЗначение: Вишни\r\n[/code]\r\n<p>\r\nК отдельной ячейке можно также обращаться с помощью метода <code>cell()</code> объекта <code>Sheet</code>, передавая ему именованные аргументы <code>row</code> и <code>column</code>. Первому столбцу или первой строке соответствует число 1, а не 0:\r\n</p>\r\n[python]\r\n# получаем ячейку листа B2\r\ncell = sheet.cell(row = 2, column = 2)\r\nprint(cell.value)\r\n[/python]\r\n[code]\r\nВишни\r\n[/code]\r\n<p>\r\nРазмер листа можно получить с помощью атрибутов <code>max_row</code> и <code>max_column</code> объекта <code>Worksheet</code>:\r\n</p>\r\n[python]\r\nrows = sheet.max_row\r\ncols = sheet.max_column\r\n\r\nfor i in range(1, rows + 1):\r\n    string = \'\'\r\n    for j in range(1, cols + 1):\r\n        cell = sheet.cell(row = i, column = j)\r\n        string = string + str(cell.value) + \' \'\r\n    print(string)\r\n[/python]\r\n[code]\r\n2015-04-05 13:34:02 Яблоки 73 \r\n2015-04-05 03:41:23 Вишни 85 \r\n2015-04-06 12:46:51 Груши 14 \r\n2015-04-08 08:59:43 Апельсины 52 \r\n2015-04-10 02:07:00 Яблоки 152 \r\n2015-04-10 18:10:37 Бананы 23 \r\n2015-04-10 02:40:46 Земляника 98\r\n[/code]\r\n<div class=\"note\">\r\n<p>\r\nЧтобы преобразовать буквенное обозначение столбца в цифровое, следует вызвать функцию\r\n</p>\r\n[python]\r\nopenpyxl.utils.column_index_from_string()\r\n[/python]\r\n<p>\r\nЧтобы преобразовать цифровое обозначение столбуа в буквенное, следует вызвать функцию\r\n[python]\r\nopenpyxl.utils.get_column_letter()\r\n[/python]\r\n<p>\r\nДля вызова этих функций загружать рабочую книгу не обязательно.\r\n</p>\r\n[idle]\r\n>>> from openpyxl.utils import get_column_letter, column_index_from_string\r\n>>> get_column_letter(1)\r\n\'A\'\r\n>>> get_column_letter(27)\r\n\'AA\'\r\n>>> column_index_from_string(\'A\')\r\n1\r\n>>> column_index_from_string(\'AA\')\r\n27\r\n[/idle]\r\n</div>\r\n<p>\r\nИспользуя срезы объектов <code>Worksheet</code>, можно получить все объекты <code>Cell</code>, принадлежащие определенной строке, столбцу или прямоугольной области.\r\n</p>\r\n[idle]\r\n>>> sheet[\'A1\':\'C3\']\r\n((<Cell \'Лист1\'.A1>, <Cell \'Лист1\'.B1>, <Cell \'Лист1\'.C1>),\r\n (<Cell \'Лист1\'.A2>, <Cell \'Лист1\'.B2>, <Cell \'Лист1\'.C2>),\r\n (<Cell \'Лист1\'.A3>, <Cell \'Лист1\'.B3>, <Cell \'Лист1\'.C3>))\r\n[/idle]\r\n[python]\r\nfor row in sheet[\'A1\':\'C3\']:\r\n    string = \'\'\r\n    for cell in row:\r\n        string = string + str(cell.value) + \' \'\r\n    print(string)\r\n[/python]\r\n[code]\r\n2015-04-05 13:34:02 Яблоки 73 \r\n2015-04-05 03:41:23 Вишни 85 \r\n2015-04-06 12:46:51 Груши 14 \r\n[/code]\r\n<p>Выводим значения второй колонки:</p>\r\n[idle]\r\n>>> sheet[\'B\']\r\n(<Cell \'Лист1\'.B1>, <Cell \'Лист1\'.B2>, <Cell \'Лист1\'.B3>, <Cell \'Лист1\'.B4>, ..., <Cell \'Лист1\'.B7>)\r\n[/idle]\r\n[python]\r\nfor cell in sheet[\'B\']:\r\n    print(cell.value)\r\n[/python]\r\n[code]\r\nЯблоки\r\nВишни\r\nГруши\r\nАпельсины\r\nЯблоки\r\nБананы\r\nЗемляника\r\n[/code]\r\n<p>Выводим строки с первой по третью:</p>\r\n[idle]\r\n>>> sheet[1:3]\r\n((<Cell \'Лист1\'.A1>, <Cell \'Лист1\'.B1>, <Cell \'Лист1\'.C1>),\r\n (<Cell \'Лист1\'.A2>, <Cell \'Лист1\'.B2>, <Cell \'Лист1\'.C2>),\r\n (<Cell \'Лист1\'.A3>, <Cell \'Лист1\'.B3>, <Cell \'Лист1\'.C3>))\r\n[/idle]\r\n[python]\r\nfor row in sheet[1:3]:\r\n    string = \'\'\r\n    for cell in row:\r\n        string = string + str(cell.value) + \' \'\r\n    print(string)\r\n[/python]\r\n[code]\r\n2015-04-05 13:34:02 Яблоки 73 \r\n2015-04-05 03:41:23 Вишни 85 \r\n2015-04-06 12:46:51 Груши 14 \r\n[/code]\r\n<p>\r\nДля доступа к ячейкам конкретной строки или столбца также можно воспользоваться атрибутами <code>rows</code> и <code>columns</code> объекта <code>Worksheet</code>.\r\n</p>\r\n[idle]\r\n>>> list(sheet.rows)\r\n[(<Cell \'Лист1\'.A1>, <Cell \'Лист1\'.B1>, <Cell \'Лист1\'.C1>),\r\n (<Cell \'Лист1\'.A2>, <Cell \'Лист1\'.B2>, <Cell \'Лист1\'.C2>),\r\n ..........\r\n (<Cell \'Лист1\'.A6>, <Cell \'Лист1\'.B6>, <Cell \'Лист1\'.C6>),\r\n (<Cell \'Лист1\'.A7>, <Cell \'Лист1\'.B7>, <Cell \'Лист1\'.C7>)]\r\n[/idle]\r\n[python]\r\nfor row in sheet.rows:\r\n    print(row)\r\n[/python]\r\n[code]\r\n(<Cell \'Лист1\'.A1>, <Cell \'Лист1\'.B1>, <Cell \'Лист1\'.C1>)\r\n(<Cell \'Лист1\'.A2>, <Cell \'Лист1\'.B2>, <Cell \'Лист1\'.C2>)\r\n..........\r\n(<Cell \'Лист1\'.A6>, <Cell \'Лист1\'.B6>, <Cell \'Лист1\'.C6>)\r\n(<Cell \'Лист1\'.A7>, <Cell \'Лист1\'.B7>, <Cell \'Лист1\'.C7>)\r\n[/code]\r\n[idle]\r\n>>> list(sheet.columns)\r\n[(<Cell \'Лист1\'.A1>, <Cell \'Лист1\'.A2>, <Cell \'Лист1\'.A3>, <Cell \'Лист1\'.A4>, ..., <Cell \'Лист1\'.A7>),\r\n (<Cell \'Лист1\'.B1>, <Cell \'Лист1\'.B2>, <Cell \'Лист1\'.B3>, <Cell \'Лист1\'.B4>, ..., <Cell \'Лист1\'.B7>),\r\n (<Cell \'Лист1\'.C1>, <Cell \'Лист1\'.C2>, <Cell \'Лист1\'.C3>, <Cell \'Лист1\'.C4>, ..., <Cell \'Лист1\'.C7>)]\r\n[/idle]\r\n[python]\r\nfor column in sheet.columns:\r\n    print(column)\r\n[/python]\r\n[code]\r\n(<Cell \'Лист1\'.A1>, <Cell \'Лист1\'.A2>, <Cell \'Лист1\'.A3>, <Cell \'Лист1\'.A4>, ..., <Cell \'Лист1\'.A7>)\r\n(<Cell \'Лист1\'.B1>, <Cell \'Лист1\'.B2>, <Cell \'Лист1\'.B3>, <Cell \'Лист1\'.B4>, ..., <Cell \'Лист1\'.B7>)\r\n(<Cell \'Лист1\'.C1>, <Cell \'Лист1\'.C2>, <Cell \'Лист1\'.C3>, <Cell \'Лист1\'.C4>, ..., <Cell \'Лист1\'.C7>)\r\n[/code]\r\n<p>Выводим значения всех ячеек листа:</p>\r\n[python]\r\nfor row in sheet.rows:\r\n    string = \'\'\r\n    for cell in row:\r\n        string = string + str(cell.value) + \' \'\r\n    print(string)\r\n[/python]\r\n[code]\r\n2015-04-05 13:34:02 Яблоки 73 \r\n2015-04-05 03:41:23 Вишни 85 \r\n2015-04-06 12:46:51 Груши 14 \r\n2015-04-08 08:59:43 Апельсины 52 \r\n2015-04-10 02:07:00 Яблоки 152 \r\n2015-04-10 18:10:37 Бананы 23 \r\n2015-04-10 02:40:46 Земляника 98 \r\n[/code]\r\n<p>Выводим значения второй строки (индекс 1):</p>\r\n[python]\r\nfor cell in list(sheet.rows)[1]:\r\n    print(str(cell.value))\r\n[/python]\r\n[code]\r\n2015-04-05 03:41:23\r\nВишни\r\n85\r\n[/code]\r\n<p>Выводим значения второй колонки (индекс 1):</p>\r\n[python]\r\nfor row in sheet.rows:\r\n    print(str(row[1].value))\r\n[/python]\r\n[code]\r\nЯблоки\r\nВишни\r\nГруши\r\nАпельсины\r\nЯблоки\r\nБананы\r\nЗемляника\r\n[/code]\r\n\r\n<h2>Запись файлов Excel</h2>\r\n\r\n[idle]\r\n>>> import openpyxl\r\n>>> wb = openpyxl.Workbook()\r\n>>> wb.sheetnames\r\n[\'Sheet\']\r\n>>> wb.create_sheet(title = \'Первый лист\', index = 0)\r\n<Worksheet \"Первый лист\">\r\n>>> wb.sheetnames\r\n[\'Первый лист\', \'Sheet\']\r\n>>> wb.remove(wb[\'Первый лист\'])\r\n>>> wb.sheetnames\r\n[\'Sheet\']\r\n>>> wb.save(\'example.xlsx\')\r\n[/idle]\r\n<p>\r\nМетод <code>create_sheet()</code> возвращает новый объект <code>Worksheet</code>, который по умолчанию становится последним листом книги. С помощью именовынных аргументов <code>title</code> и <code>index</code> можно задать имя и индекс нового листа.\r\n</p>\r\n<p>\r\nМетод <code>remove()</code> принимает в качестве аргумента не строку с именем листа, а объект <code>Worksheet</code>. Если изместно только имя листа, который надо удалить, используйте <code>wb[sheetname]</code>. Еще один способ удалить лист — использовать инструкцию <code>del wb[sheetname]</code>.\r\n</p>\r\n<p>\r\nНе забудьте вызвать метод <code>save()</code>, чтобы сохранить изменения после добавления или удаления листа рабочей книги.\r\n</p>\r\n\r\n<p>\r\nЗапись значений в ячейки напоминает запись значений в ключи словаря:\r\n</p>\r\n[idle]\r\n>>> import openpyxl\r\n>>> wb = openpyxl.Workbook()\r\n>>> wb.create_sheet(title = \'Первый лист\', index = 0)\r\n>>> sheet = wb[\'Первый лист\']\r\n>>> sheet[\'A1\'] = \'Здравствуй, мир!\'\r\n>>> sheet[\'A1\'].value\r\n\'Здравствуй, мир!\'\r\n[/idle]\r\n<p>\r\nЗаполняем таблицу 3x3:\r\n</p>\r\n[python]\r\nimport openpyxl\r\n\r\n# создаем новый excel-файл\r\nwb = openpyxl.Workbook()\r\n\r\n# добавляем новый лист\r\nwb.create_sheet(title = \'Первый лист\', index = 0)\r\n\r\n# получаем лист, с которым будем работать\r\nsheet = wb[\'Первый лист\']\r\n\r\nfor row in range(1, 4):\r\n    for col in range(1, 4):\r\n        value = str(row) + str(col)\r\n        cell = sheet.cell(row = row, column = col)\r\n        cell.value = value\r\n\r\nwb.save(\'example.xlsx\')\r\n[/python]\r\n<p>\r\n<img src=\"/files/blog/71/3.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nМожно добавлять строки целиком:\r\n</p>\r\n[python]\r\nsheet.append([\'Первый\', \'Второй\', \'Третий\'])\r\nsheet.append([\'Четвертый\', \'Пятый\', \'Шестой\'])\r\nsheet.append([\'Седьмой\', \'Восьмой\', \'Девятый\'])\r\n[/python]\r\n\r\n<h2>Стилевое оформление</h2>\r\n<p>\r\nДля настройки шрифтов, используемых в ячейках, необходимо импортировать функцию <code>Font()</code> из модуля <code>openpyxl.styles</code>:\r\n</p>\r\n[python]\r\nfrom openpyxl.styles import Font\r\n[/python]\r\n<p>\r\nНиже приведен пример создания новой рабочей книги, в которой для шрифта, используемого в ячейке <code>A1</code>, устанавливается шрифт <code>Arial</code>, красный цвет, курсивное начертание и размер 24 пункта:\r\n</p>\r\n[python]\r\nimport openpyxl\r\nfrom openpyxl.styles import Font\r\n\r\n# создаем новый excel-файл\r\nwb = openpyxl.Workbook()\r\n# добавляем новый лист\r\nwb.create_sheet(title = \'Первый лист\', index = 0)\r\n# получаем лист, с которым будем работать\r\nsheet = wb[\'Первый лист\']\r\n\r\nfont = Font(name=\'Arial\', size=24, italic=True, color=\'FF0000\')\r\nsheet[\'A1\'].font = font\r\nsheet[\'A1\'] = \'Здравствуй мир!\'\r\n\r\n# записываем файл\r\nwb.save(\'example.xlsx\')\r\n[/python]\r\n\r\n<p>\r\n<strong>Именованные стили</strong> применяются, когда надо применить стилевое оформление к большому количеству ячеек.\r\n</p>\r\n[python]\r\nimport openpyxl\r\nfrom openpyxl.styles import NamedStyle, Font, Border, Side\r\n\r\n# создаем новый excel-файл\r\nwb = openpyxl.Workbook()\r\n# добавляем новый лист\r\nwb.create_sheet(title = \'Первый лист\', index = 0)\r\n# получаем лист, с которым будем работать\r\nsheet = wb[\'Первый лист\']\r\n\r\n# создаем именованный стиль\r\nns = NamedStyle(name=\'highlight\')\r\nns.font = Font(bold=True, size=20)\r\nborder = Side(style=\'thick\', color=\'000000\')\r\nns.border = Border(left=border, top=border, right=border, bottom=border)\r\n\r\n# вновь созданный именованный стиль надо зарегистрировать\r\n# для дальнейшего использования\r\nwb.add_named_style(ns)\r\n\r\n# теперь можно использовать именованный стиль\r\nsheet[\'A1\'].style = \'highlight\'\r\n\r\n# записываем файл\r\nwb.save(\'example.xlsx\')\r\n[/python]\r\n\r\n<h2>Добавление формул</h2>\r\n\r\n<p>\r\nФормулы, начинающиеся со знака равенства, позволяют устанавливать для ячеек значения, рассчитанные на основе значений в других ячейках.\r\n</p>\r\n[python]\r\nsheet[\'B9\'] = \'=SUM(B1:B8)\'\r\n[/python]\r\n<p>\r\nЭта инструкция сохранит <code>=SUM(B1:B8)</code> в качестве значения в ячейке <code>B9</code>. Тем самым для ячейки <code>B9</code> задается формула, которая суммирует значения, хранящиеся в ячейках от <code>B1</code> до <code>B8</code>.\r\n</p>\r\n\r\n<div class=\"note\">\r\n<p>\r\nФормула Excel — это математическое выражение, которое создается для вычисления результата и которое может зависеть от содержимого других ячеек. Формула в ячейке Excel может содержать данные, ссылки на другие ячейки, а также обозначение действий, которые необходимо выполнить.\r\n</p>\r\n<p>\r\nИспользование ссылок на ячейки позволяет пересчитывать результат по формулам, когда происходят изменения содержимого ячеек, включенных в формулы. Формулы Excel начинаются со знака <code>=</code>. Скобки <code>()</code> могут использоваться для определения порядка математических операции.\r\n</p>\r\n<p>\r\nПримеры формул Excel: <span style=\"color: blue; border: 1px solid #ddd;\">=27+36</span>, <span style=\"color: blue; border: 1px solid #ddd;\">=А1+А2-АЗ</span>, <span style=\"color: blue; border: 1px solid #ddd;\">=SUM(А1:А5)</span>, <span style=\"color: blue; border: 1px solid #ddd;\">=MAX(АЗ:А5)</span>, <span style=\"color: blue; border: 1px solid #ddd;\">=(А1+А2)/АЗ</span>.\r\n</p>\r\n</div>\r\n\r\n<p>\r\nХранящуюся в ячейке формулу можно читать, как любое другое значение. Однако, если нужно получить <strong>результат</strong> расчета по формуле, а не саму формулу, то при вызове функции <code>load_workbook()</code> ей следует передать именованный аргумент <code>data_only</code> со значением <code>True</code>.\r\n</p>\r\n\r\n<h2>Настройка строк и столбцов</h2>\r\n\r\n<p>\r\nС помощью модуля OpenPyXL можно задавать высоту строк и ширину столбцов таблицы, закреплять их на месте (чтобы они всегда были видны на экране), полностью скрывать из виду, объединять ячейки.\r\n<p>\r\n<h4>Настройка высоты строк и ширины столбцов</h4>\r\n<p>\r\nОбъекты <code>Worksheet</code> имеют атрибуты <code>row_dimensions</code> и <code>column_dimensions</code>, которые управляют высотой строк и шириной столбцов.\r\n</p>\r\n[python]\r\nsheet[\'A1\'] = \'Высокая строка\'\r\nsheet[\'B2\'] = \'Широкий столбец\'\r\n\r\nsheet.row_dimensions[1].height = 70\r\nsheet.column_dimensions[\'B\'].width = 30\r\n[/python]\r\n<p>\r\n<img src=\"/files/blog/71/4.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nАтрибуты <code>row_dimension</code>s и <code>column_dimensions</code> представляют собой значения, подобные словарю. Атрибут <code>row_dimensions</code> содержит объекты <code>RowDimensions</code>, а атрибут <code>column_dimensions</code> содержит объекты <code>ColumnDimensions</code>. Доступ к объектам в <code>row_dimensions</code> осуществляется с использованием номера строки, а доступ к объектам в <code>column_dimensions</code> — с использованием буквы столбца.\r\n</p>\r\n<p>\r\nДля указания высоты строки разрешено использовать целые или вещественные числа в диапазоне от 0 до 409. Для указания ширины столбца можно использовать целые или вещественные числа в диапазоне от 0 до 255. Столбцы с нулевой шириной и строки с нулевой высотой невидимы для пользователя.\r\n</p>\r\n\r\n<h4>Объединение ячеек</h4>\r\n<p>\r\nЯчейки, занимающие прямоугольную область, могут быть объединены в одну ячейку с помощью метода <code>merge_cells()</code> рабочего листа:\r\n</p>\r\n[python]\r\nsheet.merge_cells(\'A1:D3\')\r\nsheet[\'A1\'] = \'Объединены двенадцать ячеек\'\r\n\r\nsheet.merge_cells(\'C5:E5\')\r\nsheet[\'C5\'] = \'Объединены три ячейки\'\r\n[/python]\r\n<p>\r\n<img src=\"/files/blog/71/5.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nЧтобы отменить слияние ячеек, надо вызвать метод <code>unmerge_cells()</code>:\r\n</p>\r\n[python]\r\nsheet.unmerge_cells(\'A1:D3\')\r\nsheet.unmerge_cells(\'C5:E5\')\r\n[/python]\r\n\r\n<h4>Закрепление областей</h4>\r\n<p>\r\nЕсли размер таблицы настолько велик, что ее нельзя увидеть целиком, можно заблокировать несколько верхних строк или крайних слева столбцов в их позициях на экране. В этом случае пользователь всегда будет видеть заблокированные заголовки столбцов или строк, даже если он прокручивает таблицу на экране.\r\n</p>\r\n<p>\r\nУ объекта <code>Worksheet</code> имеется атрибут <code>freeze_panes</code>, значением которого может служить объект <code>Cell</code> или строка с координатами ячеек. Все строки и столбцы, расположенные выше и левее, будут заблокированы.\r\n</p>\r\n<table class=\"data-table\">\r\n  <tr>\r\n    <th>Значение атрибута freeze_panes</th>\r\n    <th>Заблокированные строки и столбцы</th>\r\n  </tr>\r\n  <tr>\r\n    <td><code>sheet.freeze_panes = \'A2\'</code></td>\r\n    <td>Строка 1</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>sheet.freeze_panes = \'B1\'</code></td>\r\n    <td>Столбец A</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>sheet.freeze_panes = \'C1\'</code></td>\r\n    <td>Столбцы A и B</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>sheet.freeze_panes = \'C2\'</code></td>\r\n    <td>Строка 1 и столбцы A и B</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>sheet.freeze_panes = None</code></td>\r\n    <td>Закрепленные области отсутствуют</td>\r\n  </tr>\r\n</table>\r\n\r\n<h2>Диаграммы</h2>\r\n<p>\r\nМодуль OpenPyXL поддерживает создание гистогорамм, графиков, а также точечных и круговых диаграмм с использование данных, хранящихся в электронной таблице. Чтобы создать диаграмму, необходимо выполнить следующие действия:\r\n</p>\r\n<ol>\r\n  <li>создать объект <code>Reference</code> на основе ячеек в пределах выделенной прямоугольной области;</li>\r\n  <li>создать объект <code>Series</code>, передав функции <code>Series()</code> объект <code>Reference</code>;</li>\r\n  <li>создать объект Chart;</li>\r\n  <li>дополнительно можно установить значения переменных <code>drawing.top</code>, <code>drawing.left</code>, <code>drawing.width</code>, <code>drawing.height</code> объекта <code>Chart</code>, определяющих положение и размеры диаграммы;</li>\r\n  <li>добавить объект <code>Chart</code> в объект <code>Worksheet</code>.</li>\r\n</ol>\r\n<p>\r\nОбъекты <code>Reference</code> создаются путем вызова функции <code>openpyxl.charts.Reference()</code>, принимающей пять аргуменов:\r\n</p>\r\n<ol>\r\n  <li>Объект <code>Worksheet</code>, содержащий данные диаграммы.</li>\r\n  <li>Два целых числа, представляющих верхнюю левую ячейку выделенной прямоугольной области, в которых содержатся данные диаграммы: первое число задает строку, второе — столбец; первой строке соответствует 1, а не 0.</li>\r\n  <li>Два целых числа, представляющих нижнюю правую ячейку выделенной прямоугольной области, в которых содержатся данные диаграммы: первое число задает строку, второе — столбец.</li>\r\n</ol>\r\n[python]\r\nfrom openpyxl import Workbook\r\nfrom openpyxl.chart import BarChart, Reference\r\n\r\n# создаем новый excel-файл\r\nwb = Workbook()\r\n# добавляем новый лист\r\nwb.create_sheet(title = \'Первый лист\', index = 0)\r\n# получаем лист, с которым будем работать\r\nsheet = wb[\'Первый лист\']\r\n\r\nsheet[\'A1\'] = \'Серия 1\'\r\n# это колонка с данными\r\nfor i in range(1, 11):\r\n    cell = sheet.cell(row = i + 1, column = 1)\r\n    cell.value = i * i\r\n\r\n# создаем диаграмму\r\nchart = BarChart()\r\nchart.title = \'Первая серия данных\'\r\ndata = Reference(sheet, min_col = 1, min_row = 1, max_col = 1, max_row = 11)\r\nchart.add_data(data, titles_from_data = True)\r\n\r\n# добавляем диаграмму на лист\r\nsheet.add_chart(chart, \'C2\')\r\n\r\n# записываем файл\r\nwb.save(\'example.xlsx\')\r\n[/python]\r\n<p>\r\n<img src=\"/files/blog/71/6.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nАналогично можно создавать графики, точечные и круговые диаграммы, вызывая методы:\r\n</p>\r\n<ul>\r\n  <li><code>openpyxl.chart.LineChart()</code></li>\r\n  <li><code>openpyxl.chart.ScatterChart()</code></li>\r\n  <li><code>openpyxl.chart.PieChart()</code></li>\r\n</ul>\r\n<p>\r\n<img src=\"/files/blog/71/7.jpg\" alt=\"\" />\r\n</p>','2018-03-23 14:54:41',1),(72,7,'События при записи и проведении документа','','','1С:Предприятие, Документ, ПередЗаписью, ПередЗаписьюНаСервере, ПослеЗаписи, ПослеЗаписиНаСервере, ПриЗаписи, ПриЗаписиНаСервере, Событие','1. Последовательность событий при записи нового документа из формы документа. 2. Последовательность событий при проведении документа из формы документа (провести и закрыть). 3. Последовательность событий при отмене проведения документа из формы документа.','<h3>Последовательность событий при записи нового документа из формы документа</h3>\r\n<p>\r\n<img src=\"/files/blog/72/1.jpg\" alt=\"\" />\r\n</p>\r\n<p>Заливкой выделены события, выполняющиеся в транзакции записи.</p>\r\n<h3>Последовательность событий при проведении документа из формы документа (провести и закрыть)</h3>\r\n<p>\r\n<img src=\"/files/blog/72/2.jpg\" alt=\"\" />\r\n</p>\r\n<p>Заливкой выделены события, выполняющиеся в транзакции записи.</p>\r\n<h3>Последовательность событий при отмене проведения документа из формы документа</h3>\r\n<p>\r\n<img src=\"/files/blog/72/3.jpg\" alt=\"\" />\r\n</p>\r\n<p>Заливкой выделены события, выполняющиеся в транзакции записи.</p>\r\n\r\n<h3>Обработчики событий</h3>\r\n\r\n[язык]\r\nПередЗаписью(Отказ, ПараметрыЗаписи)  // модуль формы клиент\r\n[/язык]\r\n<p>Расширение управляемой формы для документа. Возникает на клиенте перед выполнением записи объекта из формы. Процедура-обработчик данного события вызывается перед вызовом процедуры-обработчика события <code>ПередЗаписью</code>.\r\n</p>\r\n<ul>\r\n  <li><code>Отказ</code>, тип <code>Булево</code>. Признак отказа от записи. Если в теле процедуры-обработчика установить данному параметру значение <code>Истина</code>, запись выполнена не будет и будет вызвано исключение. Значение по умолчанию: <code>Ложь</code>.</li>\r\n  <li><code>ПараметрыЗаписи</code>, тип <code>Структура</code>. Структура, содержащая параметры записи. Для формы документа существует два предопределенных параметра — <code>РежимЗаписи</code> и <code>РежимПроведения</code>. Они добавляются автоматически при вызове команд «Провести», «Провести и закрыть», «Отмена проведения». Параметр <code>РежимПроведения</code> может отсутствовать, если режим проведения в документе не определен. \r\n</ul>\r\n<p>\r\nПримечание: В обработчике данного события нельзя использовать серверные методы формы с директивой компиляции <code>&amp;НаСервере</code>.\r\n</p>\r\n\r\n[язык]\r\nПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)  // модуль формы сервер\r\n[/язык]\r\n<p>Расширение управляемой формы для документа. Вызывается перед записью объекта на сервере. Можно отменить запись. Выполняется вне транзакции.\r\n</p>\r\n<ul>\r\n  <li><code>Отказ</code>, тип <code>Булево</code>. Признак отказа от записи. Если в теле процедуры-обработчика установить данному параметру значение <code>Истина</code>, запись выполнена не будет и будет вызвано исключение. Значение по умолчанию: <code>Ложь</code>.</li>\r\n  <li><code>ТекущийОбъект</code>, тип <code>ДокументОбъект.ИмяДокумента</code>. Записываемый объект.</li>\r\n  <li><code>ПараметрыЗаписи</code>, тип <code>Структура</code>. Структура, содержащая параметры записи. Для формы документа существует два предопределенных параметра — <code>РежимЗаписи</code> и <code>РежимПроведения</code>. Они добавляются автоматически при вызове команд «Провести», «Провести и закрыть», «Отмена проведения».</li>\r\n</ul>\r\n\r\n[язык]\r\nДокументОбъект.ИмяДокумента.ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)  // модуль объекта сервер\r\n[/язык]\r\n<p>\r\nВозникает перед выполнением записи объекта. Процедура-обработчик вызывается после начала транзакции записи, но до начала записи документа.\r\n</p>\r\n<ul>\r\n  <li><code>Отказ</code>, тип <code>Булево</code>. Признак отказа от записи. Если в теле процедуры-обработчика установить данному параметру значение <code>Истина</code>, то запись выполнена не будет и будет вызвано исключение. Значение по умолчанию: <code>Ложь</code>.</li>\r\n  <li><code>РежимЗаписи</code>, тип <code>РежимЗаписиДокумента</code>. В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи. Изменение значения параметра позволяет изменить режим записи.</li>\r\n  <li><code>РежимПроведения</code>, тип <code>РежимПроведенияДокумента</code>. В данный параметр передается текущий режим проведения. Изменение значения параметра позволяет изменить режим проведения.</li>\r\n</ul>\r\n\r\n[язык]\r\nДокументОбъект.ИмяДокумента.ПриЗаписи(Отказ)  // модуль объекта сервер\r\n[/язык]\r\n<p>\r\nВозникает при записи объекта. Процедура-обработчик вызывается после записи объекта в базу данных, но до окончания транзакции записи.\r\n</p>\r\n<ul>\r\n  <li><code>Отказ</code>, тип <code>Булево</code>. Признак отказа от записи документа. Если в теле процедуры-обработчика установить данному параметру значение <code>Истина</code>, то запись документа выполнена не будет. Значение по умолчанию: <code>Ложь</code>.</li>\r\n</ul>\r\n\r\n[язык]\r\nПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)  // модуль формы сервер\r\n[/язык]\r\n<p>\r\nРасширение управляемой формы для документа. Возникает на сервере при записи объекта из формы. Процедура-обработчик вызывается после записи объекта (после события <code>ПриЗаписи</code> объекта) в базу данных, но до окончания транзакции записи.\r\n</p>\r\n<ul>\r\n  <li><code>Отказ</code>, тип <code>Булево</code>. Признак отказа от записи. Если в теле процедуры-обработчика установить данному параметру значение <code>Истина</code>, то запись произведена не будет. Значение по умолчанию: <code>Ложь</code>.</li>\r\n  <li><code>ТекущийОбъект</code>, тип <code>ДокументОбъект.ИмяДокумента</code>. Записываемый документ.</li>\r\n  <li><code>ПараметрыЗаписи</code>, тип <code>Структура</code>. Структура, содержащая параметры записи. Для формы документа существует два предопределенных параметра — <code>РежимЗаписи</code> и <code>РежимПроведения</code>. Они добавляются автоматически при вызове команд «Провести», «Провести и закрыть», «Отмена проведения».</li>\r\n</ul>\r\n\r\n[язык]\r\nПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)  // модуль формы сервер\r\n[/язык]\r\n<p>\r\nРасширение управляемой формы для документа. Вызывается после записи объекта на сервере и после завершения транзакции.\r\n</p>\r\n<ul>\r\n  <li><code>ТекущийОбъект</code>, тип <code>ДокументОбъект.ИмяДокумента</code>. Записываемый объект.</li>\r\n  <li><code>ПараметрыЗаписи</code>, тип <code>Структура</code>. Структура, содержащая параметры записи. Для формы документа существует два предопределенных параметра — <code>РежимЗаписи</code> и <code>РежимПроведения</code>. Они добавляются автоматически при вызове команд «Провести», «Провести и закрыть», «Отмена проведения».</li>\r\n</ul>\r\n\r\n[язык]\r\nПослеЗаписи(ПараметрыЗаписи)  // модуль формы клиент\r\n[/язык]\r\n<p>\r\nРасширение управляемой формы для документа. Возникает на сервере после записи объекта и после окончания транзакции записи, то есть к моменту вызова этой процедуры запись объекта полностью завершена.\r\n</p>\r\n<ul>\r\n  <li><code>ПараметрыЗаписи</code>, тип <code>Структура</code>. Структура, содержащая параметры записи. Для формы документа существует два предопределенных параметра — <code>РежимЗаписи</code> и <code>РежимПроведения</code>. Они добавляются автоматически при вызове команд «Провести», «Провести и закрыть», «Отмена проведения».</li>\r\n</ul>\r\n<p>\r\nПримечание: В обработчике данного события нельзя использовать серверные методы формы с директивой компиляции <code>&amp;НаСервере</code>.\r\n</p>','2018-03-15 11:23:51',1),(73,7,'Проверка заполнения реквизитов формы','','','1С:Предприятие, ОбработкаПроверкиЗаполнения, ПроверяемыеРеквизиты, Реквизит, УправляемаяФорма','Механизм проверки заполнения позволяет автоматически проверить, заполнены ли указанные реквизиты объекта. Для этого нужно воспользоваться свойством ПроверкаЗаполнения, которое есть у реквизитов объектов конфигурации.','<p>\r\nМеханизм проверки заполнения позволяет автоматически проверить, заполнены ли указанные реквизиты объекта. Для этого нужно воспользоваться свойством <code>ПроверкаЗаполнения</code>, которое есть у реквизитов объектов конфигурации.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/73/1.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nЕсли установить это свойство в значение «Выдавать ошибку», поле <code>Поставщик</code> в форме будет помечено как обязательное для заполнения. А при записи накладной платформа будет контролировать заполненность этого реквизита. Если реквизит окажется не заполнен, платформа выдаст автоматическое сообщение и запись накладной будет отменена.\r\n</p>\r\n<p>\r\nРазработчик может повлиять на стандартную проверку заполнения, выполняемую платформой. Для этого у него есть два события:\r\n</p>\r\n<ul>\r\n  <li>Одно событие — <code>ОбработкаПроверкиЗаполненияНаСервере</code> — можно обработать в модуле формы.</li>\r\n  <li>Другое событие — <code>ОбработкаПроверкиЗаполнения</code> — можно обработать в модуле прикладного объекта.</li>\r\n</ul>\r\n<p>\r\n<img src=\"/files/blog/73/2.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nУ формы, как правило, есть основной реквизит (редактируемый объект) и могут быть реквизиты, не относящиеся к редактируемому объекту, а являющиеся лишь частью формы:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/73/3.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nПоэтому серверное событие формы <code>ОбработкаПроверкиЗаполненияНаСервере</code> предназначено для проверки заполнения тех реквизитов формы, которые не относятся к редактируемому объекту. Это данные только формы, у формы могут быть свои причины и алгоритмы для проверки этих данных.\r\n</p>\r\n<p>\r\nНапротив, событие объекта <code>ОбработкаПроверкиЗаполнения</code> предназначено для для того, чтобы проверить реквизиты основного реквизита формы.\r\n</p>\r\n<p>\r\nОбработчики обеих событий имеют параметр <code>ПроверяемыеРеквизиты</code>, в который платформа передает массив имен тех реквизитов, которые подлежат проверке. Если после выхода из обработчика в этом массиве все еще останутся какие-то имена реквизитов — платформа выполнит автоматическую проверку оставшися реквизитов.\r\n</p>\r\n<p>\r\nПоэтому существует несколько сценариев того, как разработчик может встроить свой алгоритм в механизм проверки заполнения:\r\n</p>\r\n<ul>\r\n  <li>самостоятельно проверить заполненность всех реквизитов и очистить массив <code>ПроверяемыеРеквизиты</code>, чтобы платформа не выполняла их проверку</li>\r\n  <li>проверить часть реквизитов самостоятельно, удалить их из массива <code>ПроверяемыеРеквизиты</code>, а оставшиеся оставить на проверку платформе</li>\r\n  <li>добавить в массив <code>ПроверяемыеРеквизиты</code> какие-то реквизиты, чтобы платформа проверила и их тоже</li>\r\n  <li>вообще отказаться от проверки заполненности реквизитов, очистив массив</li>\r\n</ul>\r\n<p>\r\nВсе эти сценарии реализуются довольно просто. Например, чтобы самостоятельно проверить заполненность реквизитов, можно выполнить следующий код:\r\n</p>\r\n[язык]\r\nЕсли Поставщик = Справочники.Поставщики.ПустаяСсылка() Тогда\r\n    Сообщение = Новый СообщениеПользователю();\r\n    Сообщение.Текст = \"Необходимо заполнить поставщика!\";\r\n    Сообщение.Поле  = \"Поставщик\";\r\n    Сообщение.УстановитьДанные(ЭтотОбъект);\r\n    Сообщение.Сообщить();\r\n    Отказ = Истина;\r\nКонецЕсли;\r\n\r\n// Проверка остальных реквизитов\r\n// ..........\r\n\r\n// Очистить массив проверяемых реквизитов, чтобы платформа\r\n// не выполняла их автоматическую проверку\r\nПроверяемыеРеквизиты.Очистить(); \r\n[/язык]\r\n<p>\r\nЧтобы проверить лишь часть реквизитов, можно выполнить такой код:\r\n</p>\r\n[язык]\r\nЕсли Поставщик = Справочники.Поставщики.ПустаяСсылка() Тогда\r\n    Сообщение = Новый СообщениеПользователю();\r\n    Сообщение.Текст = \"Необходимо заполнить поставщика!\";\r\n    Сообщение.Поле  = \"Поставщик\";\r\n    Сообщение.УстановитьДанные(ЭтотОбъект);\r\n    Сообщение.Сообщить();\r\n    Отказ = Истина;\r\n    // Удалить поставщика из массива проверяемых реквизитов\r\n    ИндексПоляПоставщик = ПроверяемыеРеквизиты.Найти(\"Поставщик\");\r\n    Если ИндексПоляПоставщик <> Неопределено Тогда\r\n        ПроверяемыеРеквизиты.Удалить(ИндексПоляПоставщик);\r\n    КонецЕсли;\r\nКонецЕсли;\r\n[/язык]\r\n<p>\r\nДобавить в массив проверяемых реквизитов еще один реквизит можно следующим образом:\r\n</p>\r\n[язык]\r\nПроверяемыеРеквизиты.Добавить(\"Комментарий\");\r\n[/язык]\r\n<p>\r\nА очистить массив проверяемых реквизитов, чтобы ничего не проверять ни самому, ни платформе, можно так:\r\n</p>\r\n[язык]\r\nПроверяемыеРеквизиты.Очистить();\r\n[/язык]\r\n<p>\r\nВторым параметром в обработчиках этих событий является параметр <code>Отказ</code>. Если ему присвоить значение <code>Истина</code>, то после выхода из обработчика дальнейшая запись объекта будет отменена. Таким образом этот параметр нужно устанавливать в значение <code>Истина</code> тогда, когда ваш алгоритм приходит к выводу, что реквизит не заполнен. В этом случае запись объекта выполнена не будет.\r\n</p>\r\n\r\n<h2>Справка</h2>\r\n\r\n<h3>ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)</h3>\r\n[язык]\r\nУправляемаяФорма.ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)\r\n[/язык]\r\n<ul>\r\n  <li><code>Отказ</code>. Тип: <code>Булево</code>. Признак отказа от записи. Если в теле процедуры-обработчика установить данному параметру значение <code>Истина</code>, то запись выполнена не будет. Значение по умолчанию <code>Ложь</code>.</li>\r\n  <li><code>ПроверяемыеРеквизиты</code>. Тип: <code>Массив</code>. Массив путей к реквизитам, для которых будет выполнена проверка заполнения. Массив может быть модифицирован удалением или добавлением путей к необходимым реквизитам.</li>\r\n</ul>\r\n<p>\r\nВызывается расширением формы при необходимости проверки заполнения реквизитов при записи в форме, а также при выполнении метода <code>ПроверитьЗаполнение()</code>. Для вызова проверки заполнения системой необходимо, чтобы у формы (с которой происходит работа) было установлено свойство <code>ПроверятьЗаполнениеАвтоматически</code>. В этом случае вначале будет вызван данный обработчик, а затем обработчик <code>ОбработкаПроверкиЗаполнения()</code> модуля объекта.\r\n</p>\r\n<p>\r\nПозволяет разработчику самостоятельно реализовать проверку заполнения в обработчике события. При этом в обработчике можно полностью отказаться от системной обработки (очистив список проверяемых реквизитов), отказаться от проверки системой части реквизитов (выполнив проверку отдельных реквизитов особенным образом и исключив эти реквизиты из списка), а также добавить для проверки другие реквизиты, проверка которых не была указана.\r\n</p>\r\n<p>\r\nДля формы документа, если при конфигурировании для документа свойство <code>Проведение</code> установлено в <code>Разрешить</code>, событие вызывается только при проведении. Если документ не проводится (свойство <code>Проведение</code> установлено в <code>Запретить</code>), то вызывается при записи.\r\n</p>\r\n\r\n<h3>ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)</h3>\r\n[язык]\r\nДокументОбъект.ИмяДокумента.ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)\r\n[/язык]\r\n<ul>\r\n  <li><code>Отказ</code>. Тип: <code>Булево</code>.  Если в теле процедуры-обработчика установить данному параметру значение <code>Истина</code>, то будет выполнен отказ от продолжения работы после выполнения проверки заполнения. Значение по умолчанию <code>Ложь</code>.</li>\r\n  <li><code>ПроверяемыеРеквизиты</code>. Тип: <code>Массив</code>. Массив путей к реквизитам, для которых будет выполнена проверка заполнения. Массив может быть модифицирован удалением или добавлением путей к необходимым реквизитам.</li>\r\n</ul>\r\n<p>\r\nВызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме, а также при выполнении метода <code>ПроверитьЗаполнение()</code>. Если для документа при конфигурировании свойство <code>Проведение</code> установлено в <code>Разрешить</code>, то вызывается только при проведении. Если документ не проводится (установлено <code>Запретить</code>), то вызывается при записи.\r\n</p>\r\n<p>\r\nПозволяет разработчику конфигурации самостоятельно реализовать проверку заполнения в обработчике события. При этом в обработчике можно полностью отказаться от системной обработки (очистив список проверяемых реквизитов), отказаться от проверки системой части реквизитов (выполнив проверку отдельных реквизитов особенным образом и исключив эти реквизиты из списка), а также добавить для проверки другие реквизиты, проверка которых не была указана.\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)\r\n\r\n    // Проверим заполненность реквизита «Покупатель»\r\n    Покупатель = ПроверяемыеРеквизиты.Найти(\"Покупатель\");\r\n\r\n    Если Не ЗначениеЗаполнено(Покупатель) Тогда\r\n        \r\n        // Если он не заполнен, сообщим об этом пользователю\r\n        Сообщение = Новый СообщениеПользователю();\r\n        Сообщение.Текст = \"Не указан Покупатель, на которого выписывается товарная накладная!\";\r\n        Сообщение.Поле = \"Покупатель\";\r\n        Сообщение.УстановитьДанные(ЭтотОбъект);\r\n        Сообщение.Сообщить();\r\n            \r\n        // Сообщим платформе, что мы сами обработали проверку заполнения реквизита «Покупатель»\r\n        ПроверяемыеРеквизиты.Удалить(Покупатель);\r\n\r\n        // Так как информация не консистентна, то продолжать работу дальше смысла нет\r\n        Отказ = Истина;\r\n            \r\n    КонецЕсли;\r\n\r\n    // Сообщим платформе, что мы сами обрабатываем проверку реквизита товар в табличной части «Товары»\r\n    ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти(\"Товары.Товар\"));\r\n\r\n    // Обходим строки и проверяем заполнение реквизита\r\n    Для Индекс = 0 По Товары.Количество()-1 Цикл\r\n        СтрокаТовар = Товары.Получить(Индекс);\r\n        Если Не ЗначениеЗаполнено(СтрокаТовар.Товар) Тогда\r\n            Сообщение = Новый СообщениеПользователю();\r\n            Сообщение.Текст = \"В строке \" + Индекс + \" не заполнено значение товара\";\r\n            Сообщение.Поле = \"Товары[\" + Индекс + \"].Товар\";\r\n            Сообщение.УстановитьДанные(ЭтотОбъект);\r\n            Сообщение.Сообщить();\r\n            Отказ = Истина;\r\n        КонецЕсли;\r\n    КонецЦикла;\r\n    \r\nКонецПроцедуры\r\n[/язык]','2018-03-20 14:11:40',1),(74,7,'Проведение документов','','','1С:Предприятие, Движения, Документ, МоментВремени, ОбработкаПроведения','Когда происходит интерактивное или программное проведение документа, срабатывает выполнение процедуры ОбработкаПроведения(), которая находится в модуле объекта документа. Данная процедура имеет два параметра: Отказ и РежимПроведения. Если выставить параметру Отказ значение Истина, то проведение не будет выполнено.','<p>\r\nКогда происходит интерактивное или программное проведение документа, срабатывает выполнение процедуры <code>ОбработкаПроведения()</code>, которая находится в модуле объекта документа.\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаПроведения(Отказ, РежимПроведения)\r\n    // Вставить содержимое обработчика\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nДанная процедура имеет два параметра: <code>Отказ</code> и <code>РежимПроведения</code>. Если выставить параметру <code>Отказ</code> значение <code>Истина</code>, то проведение не будет выполнено. Параметр <code>РежимПроведения</code> устанавливает режим проведения документа — «оперативное» или «неоперативное». Сами движения в регистры разработчик должен прописать в этой процедуре самостоятельно.\r\n</p>\r\n<p>Рассмотрим подробно свойства документа на вкладке «Движения»</p>\r\n<ul>\r\n  <li>Проведение — «разрешить» или «запретить». Определяет, будет ли документ создавать движения.</li>\r\n  <li>Оперативное проведение — «разрешить» или «запретить». Если установлено «разрешить», то проведение документа будущей датой невозможно.</li>\r\n  <li>Удаление движений — определяет режим очистки движений документа:\r\n    <ul>\r\n      <li>Удалять автоматически при отмене проведения. При перепроведении документа движения перезаписываются, а при отмене проведения движения документа автоматически удаляются.</li>\r\n      <li>Удалять автоматически. При записи документа с проведением сначала будут удалены все старые движения документа. На момент выполнения обработчика события <code>ОбработкаПроведения</code> в регистрах не будет наборов записей с движениями данного документа.</li>\r\n      <li>Не удалять автоматически — значит, что удаление движений берет на себя разработчик системы.</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n<h2>Процедура ОбработкаПроведения</h2>\r\n<p>\r\nФормирование новых наборов записей регистров включает в себя операции, состоящие:\r\n</p>\r\n<ul>\r\n  <li>из добавления новых записей к набору записей;</li>\r\n  <li>заполнения полей записей;</li>\r\n  <li>записи набора записей.</li>\r\n</ul>\r\n<p>\r\nНапример, требуется сформировать движения по регистру <code>ТоварыНаСкладах</code> на основании данных документа <code>ПоступлениеТоваров</code>. Причем информация для заполнения полей записей движений в основном находится в табличной части <code>Состав</code> документа.\r\n<p>\r\n[язык]\r\nПроцедура ОбработкаПроведения(Отказ, РежимПроведения)\r\n    // Укажем, что движения по данному регистру нужно записывать\r\n    Движения.ТоварыНаСкладах.Записывать = Истина;\r\n    // Перебрать коллекцию строк табличной части документа\r\n    Для Каждого ТекСтрокаСостав Из Состав Цикл\r\n        // Добавить новую запись к набору записей регистра ТоварыНаСкладах\r\n        Движение = Движения.ТоварыНаСкладах.Добавить();\r\n        // Заполнить поля добавленной записи\r\n        Движение.ВидДвижения = ВидДвиженияНакопления.Приход;\r\n        Движение.Период = Дата;\r\n        Движение.Номенклатура = ТекСтрокаСостав.Номенклатура;\r\n        Движение.Склад = Склад;\r\n        Движение.Количество = ТекСтрокаСостав.Количество;\r\n        Движение.ВидОперации = ВидОперации;\r\n    КонецЦикла;\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nПосле выхода из обработки проведения те наборы записей, у которых свойство <code>Записывать</code> имеет значение <code>Истина</code>, будут автоматически записаны платформой. После этого свойство <code>Записывать</code> у этих наборов движений будет установлено в значение <code>Ложь</code>.\r\n</p>\r\n<p>\r\nСледует учитывать, что при автоматической записи движений они будут записаны с замещением, то есть старые движения документа будут замещены новыми. Фактически, платформа неявно выполнит код:\r\n</p>\r\n[язык]\r\n// По умолчанию параметр Замещать имеет значение Истина\r\nДвижения.ТоварыНаСкладах.Записать();\r\n[/язык]\r\n<p>\r\nЕсли же при записи движений документа нужно добавлять новые движения к старым, то для этого нужно использовать параметр <code>Замещать</code>, установленным в значение <code>Ложь</code>.\r\n</p>\r\n[язык]\r\n// Добавлять новые движения к старым\r\nДвижения.ТоварыНаСкладах.Записать(Ложь);\r\n[/язык]\r\n<p>\r\nДействие данного параметра проявляется в случае, если на момент записи нового (или модифицированного) набора записей в регистре присутствуют еще записи, подчиненные данному же регистратору.\r\n</p>\r\n<h2>Подробнее о формировании движений</h2>\r\n<p>\r\nС точки зрения платформы отдельного процесса «проведение» не существует. Есть запись документа с проведением, причем в рамках одной транзакции. Таким образом, в момент выполнения обработчика события <code>ОбработкаПроведения</code> документ уже записан.\r\n</p>\r\n<p>\r\nСвойство «Удаление движений» документа как объекта конфигурации стандартно устанавливается платформой в значение «Удалять автоматически при отмене проведения». Это значит, что при перепроведении документа движения, подчиненные данному документу, перезаписываются, а при отмене проведения движения документа автоматически удаляются.\r\n</p>\r\n<p>\r\nЕсли разработчик захочет реализовать нестандартный вариант проведения документа и установит свойство «Удаление движений» в значение «Удалять автоматически», то при записи документа с проведением сначала будут удалены все старые движения документа. То есть на момент выполнения обработчика события <code>ОбработкаПроведения</code> в регистрах не будет наборов записей с движениями данного документа.\r\n</p>\r\n<p>\r\nПри записи с проведением система автоматически запишет выбранные и незаписанные наборы записей, находящиеся в свойстве «Движения». Отсюда следуют два важных вывода:\r\n</p>\r\n<ul>\r\n  <li>Во-первых, если наборы записей необходимо записывать с добавлением, то это нужно выполнять в явном виде, т. к. при автоматической записи движений они будут записаны с замещением.</li>\r\n  <li>Во-вторых, последовательность обращения к регистрам при автоматической записи движений будет одна и та же для разных документов. Это позволяет снизить вероятность взаимных блокировок при проведении документа в конкурентных режимах работы.</li>\r\n</ul>\r\n<p>\r\nВ случаях, если необходимо программно вызвать саму обработку проведения, инициируется запись документа с проведением. Пример программного вызова проведения документа в оперативном режиме:\r\n</p>\r\n[язык]\r\nЗаписать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);\r\n[/язык]\r\n<p>\r\nПример перепроведения документов <code>РеализацияТоваров</code> в интервале с <code>ДатаНачала</code> по <code>ДатаОкончания</code>:\r\n</p>\r\n[язык]\r\n// Получить ссылки на проведенные документы в требуемом интервале\r\nЗапрос = Новый Запрос();\r\nЗапрос.Текст =\r\n    \"ВЫБРАТЬ\r\n    |  РеализацияТоваров.Ссылка\r\n    |ИЗ\r\n    |  Документ.РеализацияТоваров КАК РеализацияТоваров\r\n    |ГДЕ\r\n    |  РеализацияТоваров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания\r\n    |  И РеализацияТоваров.Проведен\";\r\nЗапрос.УстановитьПараметр(\"ДатаНачала\", ДатаНачала);\r\nЗапрос.УстановитьПараметр(\"ДатаОкончания\", ДатаОкончания);\r\nРезультат = Запрос.Выполнить();\r\n// Перебрать ссылки полученных документов\r\nВыборка = Результат.Выбрать();\r\nПока Выборка.Следующий() Цикл\r\n    // Перепровести каждый документ неоперативно\r\n    Документ = Выборка.Ссылка.ПолучитьОбъект();\r\n    Документ.Записать(РежимЗаписиДокумента.Проведение);\r\nКонецЦикла;\r\n[/язык]\r\n<p>\r\nЗдесь инициировалось проведение в неоперативном режиме. Значение по умолчанию параметра <code>РежимПроведения</code> метода объекта документа <code>Записать()</code> — именно <code>РежимПроведенияДокумента.Неоперативный</code>.\r\n</p>\r\n\r\n<h2>Оперативное и неоперативное проведение</h2>\r\n<p>\r\nОперативное и неоперативное проведение подразумевает, что работа пользователей может происходить в двух принципиально разных по своей сути режимах. Оперативное проведение документов пользователями выполняется в режиме «реального времени», то есть отображает изменения, факты, свершающиеся в настоящее время. Поэтому при этом способе проведения документов следует осуществлять максимум проверок, способных исключить ошибки при вводе данных пользователями.\r\n</p>\r\n<p>\r\nНапример, при оперативном проведении следует выполнять контроль остатков на складе списываемой номенклатуры с тем, чтобы исключить одновременную продажу одного товара несколькими продавцами. При оперативном проведении документа система, прежде всего, проверит положение даты документа относительно текущей даты сеанса. Если дата проводимого документа совпадает с текущей датой сеанса, то система будет проводить такой документ в оперативном режиме, и в обработке проведения об этом можно узнать, чтобы выстроить определенный алгоритм проведения документа.\r\n</p>\r\n<p>\r\nЕсли дата проводимого документа меньше текущей даты сеанса, то такой документ система будет проводить в неоперативном режиме. Неоперативное проведение документов подразумевает отражение в базе данных фактов, которые свершились в прошлом или которые точно будут совершены в будущем. Поэтому задача неоперативного проведения документов — просто отразить в информационной базе данные о совершенных операциях.\r\n</p>\r\n<p>\r\nПри неоперативном проведении документов не имеет смысла производить целый ряд проверок, в частности контроль остатков. Подразумевается, что если в процессе неоперативного проведения документов были допущены ошибки (например, списано такое количество номенклатуры, которого не было на складе на дату проведения документа), то анализ полученного состояния базы данных является отдельной задачей, не относящейся к неоперативному проведению.\r\n</p>\r\n<p>\r\nС оперативным проведением документов связано понятие оперативной отметки времени и понятие момента времени.\r\n</p>\r\n\r\n<h2>Понятие момента времени</h2>\r\n<p>\r\nДля определения положения документа на оси времени используется реквизит документа «Дата». Дата содержит время с точностью до секунды. Это позволяет контролировать последовательность записи документов. Однако при большом объеме создаваемых документов вероятна ситуация, когда несколько документов будут иметь одинаковое значение даты (т. е. будут созданы в течение одной секунды). Как в этом случае определить последовательность созданных документов?\r\n</p>\r\n<p>\r\nДля обработки подобных ситуаций было введено понятие <strong>момент времени</strong>. Момент времени представляет собой совокупность даты, времени и ссылки на объект базы данных. Он позволяет однозначно идентифицировать любой объект ссылочного типа базы данных на оси событий, но имеет смысл в основном только для документов. Кроме того, момент времени позволяет идентифицировать и необъектные данные, например, записи регистров, подчиненных регистратору.\r\n</p>\r\n<p>\r\nПонятие момента времени реализовано во встроенном языке при помощи универсального объекта <code>МоментВремени</code>. Этот объект имеет свойства <code>Дата</code> и <code>Ссылка</code>, которые позволяют получить «составляющие» момента времени, и один метод — <code>Сравнить()</code>, при помощи которого возможно сравнение двух моментов времени между собой.\r\n</p>\r\n<p>\r\nДля нескольких документов, имеющих одинаковую дату и время, последовательность их на оси событий определяется системой исходя из ссылок на эти документы. Она может не совпадать с последовательностью создания документов, и она недоступна для изменения пользователем, то есть нельзя каким-либо образом повлиять на последовательность документов внутри одной секунды или вычислить, что один документ создан раньше, а другой — позже.\r\n</p>\r\n<p>\r\n<strong>Оперативная отметка времени</strong> создается системой каждый раз при оперативном проведении документа. Ее значение формируется исходя из текущей даты сеанса и последней созданной оперативной отметки. Если последняя оперативная отметка меньше текущей даты сеанса, в качестве новой оперативной отметки принимается текущая дата сеанса. Если последняя оперативная отметка равна или больше текущей даты сеанса, в качестве новой оперативной отметки принимается значение на одну секунду большее, чем старая оперативная отметка времени.\r\n</p>\r\n<p>\r\nТаким образом, если у объекта конфигурации Документ установлено свойство оперативного проведения, последовательность действий системы будет следующей:\r\n</p>\r\n<ul>\r\n  <li>при создании нового документа система будет устанавливать ему текущую дату сеанса и «нулевое» время;</li>\r\n  <li>при проведении такого документа (с датой, день которой соответствует дню текущей даты сеанса) система установит в качестве даты документа оперативную отметку времени;</li>\r\n  <li>если отменить проведение документа и затем провести его снова (не изменяя даты), система установит документу новую оперативную отметку времени;</li>\r\n  <li>если попытаться перепровести документ, то система также автоматически установит документу новую оперативную отметку времени и проведет его;</li>\r\n  <li>при попытке проведения (или перепроведения) оперативно проводимого документа с датой, день которой меньше дня текущей даты сеанса, документ будет проведен неоперативно;</li>\r\n  <li>если попытаться провести (или перепровести) оперативно проводимый документ с датой, день которой больше дня текущей даты сеанса, то система не даст выполнить такое действие.</li>\r\n</ul>','2018-03-26 18:17:39',1),(75,9,'Команда tee','','','Bash, CLI, Linux, stderr, stdin, stdout, tee, Команда, Поток','Команда tee считывает стандартный ввод (stdin), после чего записывает его в стандартный вывод (stdout) и одновременно копирует его в подготовленный файл или переменную. Синтаксис различается в соответствии с местом использования команды.','<p>\r\nКоманда <code>tee</code> считывает стандартный ввод (<code>stdin</code>), после чего записывает его в стандартный вывод (<code>stdout</code>) и одновременно копирует его в подготовленный файл или переменную. Синтаксис различается в соответствии с местом использования команды.\r\n</p>\r\n[code]\r\ntee [grn][опции][/grn] [red]файл[/red]\r\n[/code]\r\n<p>\r\nИспользуется для разделения выводимых программой данных, таким образом данные могут быть использованы для вывода на дисплей и сохранены в файл. Также команда может быть использована для получения промежуточных данных, до того как они будут изменены другой программой или командой.\r\n</p>\r\n<p>Опции</p>\r\n<ul>\r\n  <li><code>-a</code> — дописать выходящие данные в конец файла, не перезаписывая его содержимого</li>\r\n  <li><code>-i</code> — игнорировать ошибки</li>\r\n</ul>\r\n<p>\r\nПример использования:\r\n</p>\r\n[cli]\r\n$ ping yandex.ru | tee ping-yandex.txt\r\n[/cli]\r\n<p>\r\nЧтобы дописать данные в существующий файл:\r\n</p>\r\n[cli]\r\n$ ping yandex.ru | tee -a ping-yandex.txt\r\n[/cli]\r\n<p>\r\nИспользование совместно с <code>sudo</code>:\r\n</p>\r\n[cli]\r\n$ echo \"Content of file...\" | sudo tee root_owned_file > /dev/null\r\n[/cli]\r\n<p>\r\nЗдесь демонстрируется, как при помощи <code>tee</code> обойти ограничения команды <code>sudo</code>, за счёт которых она не может перенаправлять вывод (<code>stdout</code>) в файл. А дальнейшее перенаправление в <code>/dev/null</code> позволит избежать вывода текста на консоль.\r\n</p>\r\n<p>\r\nПеренаправление <code>stderr</code>:\r\n</p>\r\n[cli]\r\n$ ls ./ qwerty.txt 2>&1 | tee ls.log\r\n[/cli]\r\n<p>\r\nПо умолчанию команда <code>tee</code> записывает в файл только данные от <code>stdout</code>, поэтому, если файл <code>qwerty.txt</code> отсутствует в текущем каталоге, в файле <code>ls.log</code> будет перечень имеющихся файлов и каталогов и не будет записи о не найденном файле. На экране же будут отображаться выводы как <code>stdout</code>, так и <code>stderr</code>. Если в файл нужно включить так же и данные из <code>stderr</code>, то необходимо, как в примере выше, перенаправить <code>stderr</code> на <code>stdout</code>.\r\n</p>','2018-03-30 16:46:41',1),(76,9,'Команда exec','','','Bash, CLI, Linux, exec, export, stdin, stdout, Команда','Любой сценарий (или программа) запускается как дочерний процесс родительской командной оболочки. Однако, программа, выполняемая по команде exec, заменяет текущую программу, и поэтому в системе остается на один выполняемый процесс меньше.','<p>\r\nЗапуск сценария из командной строки приводит к запуску новой оболочки, которая и будет выполнять список команд, содержащихся в файле сценария. Другими словами, любой сценарий (или программа) запускается как дочерний процесс родительской командной оболочки. Однако, программа, выполняемая по команде <code>exec</code>, заменяет текущую программу, и поэтому в системе остается на один выполняемый процесс меньше.\r\n</p>\r\n<div class=\"note\">\r\n<p>\r\nДействие, когда какая либо команда или сама командная оболочка инициирует (порождает) новый подпроцесс, чтобы выполнить какую либо работу, называется ветвлением (forking) процесса. Новый процесс называется «дочерним» (или «потомком»), а породивший его процесс — «родительским» (или «предком»). В результате и потомок и предок продолжают исполняться одновременно — параллельно друг другу.\r\n</p>\r\n</div>\r\n<p>\r\nОбщая форма команды <code>exec</code>:\r\n</p>\r\n[code]\r\nexec [red]программа[/red]\r\n[/code]\r\n<p>\r\nПусть нам нужно настроить среду для выполнения определенной задачи, например, для работы с базой данных: заменить приглашение в переменной <code>PS1</code> на <code>DataBase</code>, добавить в переменную <code>PATH</code> каталог <code>bin</code> базы данных, изменить переменную <code>CDPATH</code> (чтобы было удобнее использовать команду <code>cd</code>) и т.п.\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\n#\r\n# Установить и экспортировать переменные, связанные с базой данных\r\n#\r\n\r\nHOME=/usr/database\r\nBIN=$HOME/bin\r\nRPTS=$HOME/rpts\r\nDATA=$HOME/data\r\n\r\nPATH=$PATH:$BIN\r\nCDPATH=:$HOME:$RPTS\r\n\r\nPS1=\"DataBase: \"\r\n\r\nexport HOME BIN RPTS DATA CDPATH PS1\r\n\r\n# запустить новую оболочку с замещением текущего сценария\r\nexec /bin/bash\r\n[/bash]\r\n\r\n<p>\r\nС помощью команды <code>exec</code> можно переназначить стандартный ввод (<code>stdin</code>) и стандартный вывод (<code>stdout</code>). Например, переназначим стандартный ввод:\r\n</p>\r\n[cli]\r\n$ exec < inputFile.txt   # или exec 0< inputFile.txt\r\n[/cli]\r\n<p>\r\nЛюбые последующие команды, читающие данные со стандартного ввода, будут читать их из файла <code>inputFile.txt</code>. Пример использования в сценарии:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nexec 0< data.txt\r\ncount=1\r\nwhile read line ; do\r\n    echo \"Line $count: $line\"\r\n    count=$(( $count + 1 ))\r\ndone\r\n[/bash]\r\n<p>\r\nПереадресация стандартного вывода выполняется аналогично:\r\n</p>\r\n[cli]\r\n$ exec > outputFile.txt   # или exec 1> outputFile.txt\r\n[/cli]\r\n<p>\r\nСледует, однако, иметь в виду, что в обоих примерах команда <code>exec</code> применялась не для запуска новой программы на выполнение, а лишь для переназначения стандартного ввода или вывода.\r\n</p>\r\n<p>\r\nЧтобы переназначить стандартный ввод обратно на терминал, достаточно ввести команду:\r\n</p>\r\n[cli]\r\n$ exec < /dev/tty\r\n[/cli]\r\n<p>\r\nАналогичным образом переназначается и стандартный вывод:\r\n</p>\r\n[cli]\r\n$ exec > /dev/tty\r\n[/cli]','2018-04-01 16:20:03',1),(77,6,'Предопределенные константы в PHP','','','DIRECTORY_SEPARATOR, PHP, PHP_0S, PHP_EOL, PHP_VERSION, Web-разработка, __CLASS__, __DIR__, __FILE__, __FUNCTION__, __LINE__, __METHOD__, __TRAIT__, Константа','В РНР есть ряд предопределенных констант. Например, PHP_VERSION и PHP_0S содержат соответственно версию РНР и название операционной системы, на которую установлен сервер. Константы __LINE__ и __FILE__ содержат в себе соответственно номер строки и имя файла сценария.','<p>\r\nВ РНР есть ряд предопределенных констант. Например, <code>PHP_VERSION</code> и <code>PHP_0S</code> содержат соответственно версию РНР и название операционной системы, на которую установлен сервер.\r\n</p>\r\n<p>\r\nПредопределенная константа <code>DIRECTORY_SEPARATOR</code> содержит разделитель пути. Для Windows это «\\», для Linux и остальных — «/». Так как Windows понимает оба разделителя, достаточно использовать в коде разделитель Linux вместо константы.\r\n</p>\r\n<p>\r\nТем не менее, <code>DIRECTORY_SEPARATOR</code> полезен. Все функции, отдающие путь (вроде <code>realpath</code>), отдают его с специфичными для ОС разделителями. Чтобы разбить такой путь на составляющие как раз удобно использовать константу:\r\n</p>\r\n[php]\r\n$segments = explode(DIRECTORY_SEPARATOR, realpath(__FILE__));\r\n[/php]\r\n<p>\r\nСуществуют так же несколько «магических» констант. Они могут менять свое значение в зависимости от их использования. Например, константы <code>__LINE__</code> и <code>__FILE__</code> содержат в себе соответственно номер строки и имя файла сценария.\r\n</p>\r\n<h2>Некоторые предопределенные константы</h2>\r\n<ul>\r\n  <li><code>PHP_OS</code> — Операционная система, под которую собирался PHP</li>\r\n  <li><code>PHP_VERSION</code> — Текущая версия PHP</li>\r\n  <li><code>PHP_EOL</code> — Символ конца строки, используемый на данной платформе</li>\r\n  <li><code>DIRECTORY_SEPARATOR</code> — Разделитель пути</li>\r\n</ul>\r\n<h2>Магические константы</h2>\r\n<ul>\r\n  <li><code>__LINE__</code> — Текущий номер строки в файле</li>\r\n  <li><code>__FILE__</code> — Полный путь и имя текущего файла</li>\r\n  <li><code>__DIR__</code> — Директория файла, эквивалентно вызову <code>dirname(__FILE__)</code></li>\r\n  <li><code>__FUNCTION__</code> — Имя функции</li>\r\n  <li><code>__CLASS__</code> — Имя класса, содержит название пространства имен, в котором класс был объявлен</li>\r\n  <li><code>__TRAIT__</code> — Имя трейта, имя содержит название пространства имен, в котором трейт был объявлен</li>\r\n  <li><code>__METHOD__</code> — Имя метода класса</li>\r\n</ul>','2018-01-05 15:50:55',1),(78,14,'Работа с файлами MS Word в Python','','','MS, Python, Web-разработка, Word, Модуль','С помощью модуля python-docx можно создавать и изменять документы MS Word. Файлы с расширением .docx обладают развитой внутренней структурой. В модуле python-docx эта структура представлена тремя различными типами данных. На самом верхнем уровне объект Document представляет собой весь документ.','<p>\r\nС помощью модуля python-docx можно создавать и изменять документы MS Word с расширением .docx. Чтобы установить этот модуль, выполняем команду\r\n</p>\r\n[cli]\r\n> pip install python-docx\r\n[/cli]\r\n<p>\r\n<img src=\"/files/blog/78/1.jpg\" alt=\"\" />\r\n</p>\r\n<div class=\"note\">\r\nПри установке модуля надо вводить <code>python-docx</code>, а не <code>docx</code> (это другой модуль). В то же время при импортировании модуля <code>python-docx</code> следует использовать <code>import docx</code>, а не <code>import python-docx</code>.\r\n</div>\r\n\r\n<h2>Чтение документов MS Word</h2>\r\n<p>\r\nФайлы с расширением .docx обладают развитой внутренней структурой. В модуле python-docx эта структура представлена тремя различными типами данных. На самом верхнем уровне объект <code>Document</code> представляет собой весь документ. Объект <code>Document</code> содержит список объектов <code>Paragraph</code>, которые представляют собой абзацы документа. Каждый из абзацев содержит список, состоящий из одного или нескольких объектов <code>Run</code>, представляющих собой фрагменты текста с различными стилями форматирования.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/78/2.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/78/3.jpg\" alt=\"\" />\r\n</p>\r\n[python]\r\nimport docx\r\n\r\ndoc = docx.Document(\'example.docx\')\r\n\r\n# количество абзацев в документе\r\nprint(len(doc.paragraphs))\r\n\r\n# текст первого абзаца в документе\r\nprint(doc.paragraphs[0].text)\r\n\r\n# текст второго абзаца в документе\r\nprint(doc.paragraphs[1].text)\r\n\r\n# текст первого Run второго абзаца\r\nprint(doc.paragraphs[1].runs[0].text)\r\n[/python]\r\n[code]\r\n6\r\nНазвание документа\r\nПростой абзац с жирным и курсивным текстом\r\nПростой абзац с \r\n[/code]\r\n<p>\r\nПолучаем весь текст из документа:\r\n</p>\r\n[python]\r\ntext = []\r\nfor paragraph in doc.paragraphs:\r\n    text.append(paragraph.text)\r\nprint(\'\\n\'.join(text))\r\n[/python]\r\n[code]\r\nНазвание документа\r\nПростой абзац с жирным и курсивным текстом\r\nЗаголовок, уровень 1\r\nВыделенная цитата\r\nПервый элемент маркированного списка\r\nПервый элемент нумерованного списка\r\n[/code]\r\n\r\n<h3>Стилевое оформление</h3>\r\n<p>\r\nВ документах MS Word применяются два типа стилей: <strong>стили абзацев</strong>, которые могут применяться к объектам <code>Paragraph</code>, <strong>стили символов</strong>, которые могут применяться к объектам <code>Run</code>. Как объектам <code>Paragraph</code>, так и объектам <code>Run</code> можно назначать стили, присваивая их атрибутам <code>style</code> значение в виде строки. Этой строкой должно быть имя стиля. Если для стиля задано значение <code>None</code>, то у объекта <code>Paragraph</code> или <code>Run</code> не будет связанного с ним стиля.\r\n</p>\r\n\r\n<h4>Стили абзацев</h4>\r\n<ul class=\"four-columns\">\r\n  <li><code>Normal</code></li>\r\n  <li><code>Body Text</code></li>\r\n  <li><code>Body Text 2</code></li>\r\n  <li><code>Body Text 3</code></li>\r\n  <li><code>Caption</code></li>\r\n  <li><code>Heading 1</code></li>\r\n  <li><code>Heading 2</code></li>\r\n  <li><code>Heading 3</code></li>\r\n  <li><code>Heading 4</code></li>\r\n  <li><code>Heading 5</code></li>\r\n  <li><code>Heading 6</code></li>\r\n  <li><code>Heading 7</code></li>\r\n  <li><code>Heading 8</code></li>\r\n  <li><code>Heading 9</code></li>\r\n  <li><code>Intense Quote</code></li>\r\n  <li><code>List</code></li>\r\n  <li><code>List 2</code></li>\r\n  <li><code>List 3</code></li>\r\n  <li><code>List Bullet</code></li>\r\n  <li><code>List Bullet 2</code></li>\r\n  <li><code>List Bullet 3</code></li>\r\n  <li><code>List Continue</code></li>\r\n  <li><code>List Continue 2</code></li>\r\n  <li><code>List Continue 3</code></li>\r\n  <li><code>List Number</code></li>\r\n  <li><code>List Number 2</code></li>\r\n  <li><code>List Number 3</code></li>\r\n  <li><code>List Paragraph</code></li>\r\n  <li><code>Macro Text</code></li>\r\n  <li><code>No Spacing</code></li>\r\n  <li><code>Quote</code></li>\r\n  <li><code>Subtitle</code></li>\r\n  <li><code>TOCHeading</code></li>\r\n  <li><code>Title</code></li>\r\n</ul>\r\n\r\n<h4>Стили символов</h4>\r\n<ul class=\"four-columns\">\r\n  <li><code>Emphasis</code></li>\r\n  <li><code>Strong</code></li>\r\n  <li><code>Book Title</code></li>\r\n  <li><code>Default Paragraph Font</code></li>\r\n  <li><code>Intense Emphasis</code></li>\r\n  <li><code>Subtle Emphasis</code></li>\r\n  <li><code>Intense Reference</code></li>\r\n  <li><code>Subtle Reference</code></li>\r\n</ul>\r\n\r\n[python]\r\nparagraph.style = \'Quote\'\r\nrun.style = \'Book Title\'\r\n[/python]\r\n\r\n<h3>Атрибуты объекта Run</h3>\r\n<p>\r\nОтдельные фрагменты текста, представленные объектами <code>Run</code>, могут подвергаться дополнительному форматированию с помощью атрибутов. Для каждого из этих атрибутов может быть задано одно из трех значений: <code>True</code> (атрибут активизирован), <code>False</code> (атрибут отключен) и <code>None</code> (применяется стиль, установленный для данного объекта <code>Run</code>).\r\n</p>\r\n<ul>\r\n  <li><code>bold</code> — Полужирное начертание</li>\r\n  <li><code>underline</code> — Подчеркнутый текст</li>\r\n  <li><code>italic</code> — Курсивное начертание</li>\r\n  <li><code>strike</code> — Зачеркнутый текст</li>\r\n</ul>\r\n<p>\r\nИзменим стили для всех параграфов нашего документа:\r\n</p>\r\n[python]\r\nimport docx\r\n\r\ndoc = docx.Document(\'example.docx\')\r\n\r\n# изменяем стили для всех параграфов\r\nfor paragraph in doc.paragraphs:\r\n    paragraph.style = \'Normal\'\r\n\r\ndoc.save(\'restyled.docx\')\r\n[/python]\r\n<p>\r\n<img src=\"/files/blog/78/4.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nА теперь восстановим все как было:\r\n</p>\r\n[python]\r\nimport docx\r\n\r\nos.chdir(\'C:\\\\example\')\r\n\r\ndoc1 = docx.Document(\'example.docx\')\r\ndoc2 = docx.Document(\'restyled.docx\')\r\n\r\n# получаем из первого документа стили всех абзацев\r\nstyles = []\r\nfor paragraph in doc1.paragraphs:\r\n    styles.append(paragraph.style)\r\n\r\n# применяем стили ко всем абзацам второго документа\r\nfor i in range(len(doc2.paragraphs)):\r\n    doc2.paragraphs[i].style = styles[i]\r\n\r\ndoc2.save(\'restored.docx\')\r\n[/python]\r\n<p>\r\n<img src=\"/files/blog/78/5.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nИзменим форматирвание объектов <code>Run</code> второго абзаца:\r\n</p>\r\n[python]\r\nimport docx\r\n\r\ndoc = docx.Document(\'example.docx\')\r\n\r\n# добавляем стиль символов для runs[0]\r\ndoc.paragraphs[1].runs[0].style = \'Intense Emphasis\'\r\n# добавляем подчеркивание для runs[4]\r\ndoc.paragraphs[1].runs[4].underline = True\r\n\r\ndoc.save(\'restyled2.docx\')\r\n[/python]\r\n<p>\r\n<img src=\"/files/blog/78/6.jpg\" alt=\"\" />\r\n</p>\r\n\r\n<h2>Запись докуменов MS Word</h2>\r\n<p>\r\nДобавление абзацев осуществляется вызовом метода <code>add_paragraph()</code> объекта <code>Document</code>. Для добавления текста в конец существующего абзаца, надо вызвать метод <code>add_run()</code> объекта <code>Paragraph</code>:\r\n</p>\r\n[python]\r\nimport docx\r\n\r\ndoc = docx.Document()\r\n\r\n# добавляем первый параграф\r\ndoc.add_paragraph(\'Здравствуй, мир!\')\r\n\r\n# добавляем еще два параграфа\r\npar1 = doc.add_paragraph(\'Это второй абзац.\')\r\npar2 = doc.add_paragraph(\'Это третий абзац.\')\r\n\r\n# добавляем текст во второй параграф\r\npar1.add_run(\' Этот текст был добавлен во второй абзац.\')\r\n\r\n# добавляем текст в третий параграф\r\npar2.add_run(\' Добавляем текст в третий абзац.\').bold = True\r\n\r\ndoc.save(\'helloworld.docx\')\r\n[/python]\r\n<p>\r\n<img src=\"/files/blog/78/7.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nОба метода, <code>add_paragraph()</code> и <code>add_run()</code> принимают необязательный второй аргумент, содержащий строку стиля, например:\r\n</p>\r\n[python]\r\ndoc.add_paragraph(\'Здравствуй, мир!\', \'Title\')\r\n[/python]\r\n\r\n<h3>Добавление заголовков</h2>\r\n<p>\r\nВызов метода <code>add_heading()</code> приводит к добавлению абзаца, отформатированного в соответствии с одним из возможных стилей заголовков:\r\n</p>\r\n[python]\r\ndoc.add_heading(\'Заголовок 0\', 0)\r\ndoc.add_heading(\'Заголовок 1\', 1)\r\ndoc.add_heading(\'Заголовок 2\', 2)\r\ndoc.add_heading(\'Заголовок 3\', 3)\r\ndoc.add_heading(\'Заголовок 4\', 4)\r\n[/python]\r\n<p>\r\n<img src=\"/files/blog/78/8.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nАргументами метода <code>add_heading()</code> являются строка текста и целое число от 0 до 4. Значению 0 соответствует стиль заголовка <code>Title</code>.\r\n</p>\r\n\r\n<h3>Добавление разрывов строк и страниц</h3>\r\n<p>\r\nЧтобы добавить разрыв строки (а не добавлять новый абзац), нужно вызвать метод <code>add_break()</code> объекта <code>Run</code>. Если же требуется добавить разрыв страницы, то методу <code>add_break()</code> надо передать значение <code>docx.enum.text.WD_BREAK.PAGE</code> в качестве единственного аргумента:\r\n</p>\r\n[python]\r\nimport docx\r\n\r\ndoc = docx.Document()\r\n\r\ndoc.add_paragraph(\'Это первая страница\')\r\ndoc.paragraphs[0].runs[0].add_break(docx.enum.text.WD_BREAK.PAGE)\r\ndoc.add_paragraph(\'Это вторая страница\')\r\n\r\ndoc.save(\'pages.docx\')\r\n[/python]\r\n\r\n<h3>Добавление изображений</h3>\r\n<p>\r\nМетод <code>add_picture()</code> объекта <code>Document</code> позволяет добавлять изображения в конце документа. Например, добавим в конец документа изображение <code>kitten.jpg</code> шириной 10 сантиметров:\r\n</p>\r\n[python]\r\nimport docx\r\n\r\ndoc = docx.Document()\r\n\r\ndoc.add_paragraph(\'Это первый абзац\')\r\ndoc.add_picture(\'kitten.jpg\', width = docx.shared.Cm(10))\r\n\r\ndoc.save(\'picture.docx\')\r\n[/python]\r\n<p>\r\nИменованные аргументы <code>width</code> и <code>height</code> задают ширину и высоту изображения. Если их опустить, то значения этих аргументов будут определяться размерами самого изображения.\r\n<p>\r\n<img src=\"/files/blog/78/9.jpg\" alt=\"\" />\r\n</p>\r\n\r\n<h3>Добавление таблицы</h3>\r\n[python]\r\nimport docx\r\n\r\ndoc = docx.Document()\r\n\r\n# добавляем таблицу 3x3\r\ntable = doc.add_table(rows = 3, cols = 3)\r\n# применяем стиль для таблицы\r\ntable.style = \'Table Grid\'\r\n\r\n# заполняем таблицу данными\r\nfor row in range(3):\r\n    for col in range(3):\r\n        # получаем ячейку таблицы\r\n        cell = table.cell(row, col)\r\n        # записываем в ячейку данные\r\n        cell.text = str(row + 1) + str(col + 1)\r\n\r\ndoc.save(\'table.docx\')\r\n[/python]\r\n<p>\r\n<img src=\"/files/blog/78/10.jpg\" alt=\"\" />\r\n</p>\r\n[python]\r\nimport docx\r\n\r\ndoc = docx.Document(\'table.docx\')\r\n\r\n# получаем первую таблицу в документе\r\ntable = doc.tables[0]\r\n\r\n# читаем данные из таблицы\r\nfor row in table.rows:\r\n    string = \'\'\r\n    for cell in row.cells:\r\n        string = string + cell.text + \' \'\r\n    print(string)\r\n[/python]\r\n[code]\r\n11 12 13 \r\n21 22 23 \r\n31 32 33 \r\n[/code]\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"http://python-docx.readthedocs.io/en/latest/\">Документация python-docx</a></li>\r\n</ul>','2018-04-06 13:28:38',1),(79,9,'Команда «.» (точка) или source','','','Bash, CLI, Linux, source, Команда, Окружение, Точка','При запуске скрипта с использованием точки не создаётся копии оболочки — скрипт выполняется в текущей оболочке, причём все переменные окружения, инициализированные в данном скрипте, после его завершения не исчезают, а сохраняются в окружении.','<p>\r\nКоманда «.» (точка) — это синоним команды <code>source</code>, встроенной в оболочку. Часто используется для включения внешних файлов внутри сценария. Рассмотрим в чём заключается суть такого включения на примере файла <code>.bash_profile</code>:\r\n</p>\r\n[bash]\r\nif [ -f ~/.bashrc ] ; then\r\n    . ~/.bashrc\r\nfi\r\n[/bash]\r\n<p>\r\nНа второй строчке с помощью оператора «.» выполняется содержимое файла <code>~/.bashrc</code>. Возникает вопрос, почему нельзя обойтись без точки?\r\n</p>\r\n<p>\r\nДело в том, что при использовании точки не создаётся копии оболочки — скрипт выполняется в текущей оболочке, причём все переменные, инициализированные в данном скрипте, после его завершения не исчезают, а сохраняются в окружении.\r\n</p>\r\n<p>\r\nИ наоборот, если скрипт запускается без использования точки, то создаётся копия оболочки, и по завершении скрипта в родительскую оболочку ничего не возвращается — все переменные окружения, созданные в скрипте, безвозвратно теряются.\r\n</p>\r\n<div class=\"note\">\r\nДействие, когда какая либо команда или сама командная оболочка инициирует (порождает) новый подпроцесс, чтобы выполнить какую либо работу, называется ветвлением (forking) процесса. Новый процесс называется «дочерним» (или «потомком»), а породивший его процесс — «родительским» (или «предком»). В результате и потомок и предок продолжают исполняться одновременно — параллельно друг другу.\r\n</div>\r\n<p>\r\nПроиллюстрируем сказанное на простом примере. Создадим файл <code>test.sh</code> следующего содержания:\r\n</p>\r\n[bash]\r\nvar=\"Какое-то значение\"\r\necho \"Внутренняя переменная var = $var\"\r\n[/bash]\r\n<p>\r\nЕсли теперь запустить скрипт, то на экран будет выведено значение внутренней переменной скрипта <code>var</code>:\r\n</p>\r\n[cli]\r\n$ ./test.sh\r\nВнутренняя переменная var = Какое-то значение\r\n[/cli]\r\n<p>\r\nОднако эта переменная не сохранится после завершения работы скрипта и не будет присутствовать в окружении текущей оболочки:\r\n</p>\r\n[cli]\r\n$ echo :$var:\r\n::\r\n[/cli]\r\n<p>\r\nЕсли же запустить скрипт с использованием точки, то он выполнится с тем же результатом. Только переменная <code>var</code> будет доступна среди переменных окружения текущей оболочки:\r\n</p>\r\n[cli]\r\n$ . ./test.sh\r\nВнутренняя переменная var = Какое-то значение\r\n$ echo :$var:\r\n:Какое-то значение:\r\n[/cli]\r\n<p>\r\nДочерняя копия оболочки при использовании точки создаётся только в том случае, когда процесс запускается в фоновом режиме. Это единственное исключение из общего правила.\r\n<p>','2018-04-08 16:58:56',1),(80,10,'Параметры и переменные','','','Bash, CLI, Linux, set, Параметр, Переменная','Формально параметры включают в себя аргументы, передаваемые программе (т.е. позиционные параметры), специальные переменные оболочки вроде $# и $?, а также обыкновенные переменные, называемые также ключевыми параметрами. Позиционным параметрам нельзя присваивать значения, но с помощью команды set можно переназначать их значения.','<p>\r\nФормально параметры включают в себя аргументы, передаваемые программе (т.е. <em>позиционные</em> параметры), <em>специальные</em> переменные оболочки вроде <code>$#</code> и <code>$?</code>, а также обыкновенные переменные, называемые также <em>ключевыми</em> параметрами.\r\n</p>\r\n<p>\r\nПозиционным параметрам нельзя присваивать значения непосредственно, хотя с помощью команды <code>set</code> можно переназначать их значения. Для присваивания значений переменным служит форма:\r\n</p>\r\n[code]\r\nпеременная=значение переменная=значение …\r\n[/code]\r\n<p>\r\nНапример, присвоим значения трем переменным:\r\n</p>\r\n[cli]\r\n$ x=50 y=100 z=200\r\n$ echo $x $y $z\r\n50 100 200\r\n[/cli]\r\n\r\n<h2>Подстановка значений переменных</h2>\r\n<p>\r\nВ простейшей форме для подстановки значения переменной ее имя предваряется знаком $, например <code>$var</code> или <code>$2</code>.\r\n</p>\r\n\r\n<h3>Конструкция ${переменная}</h3>\r\n<p>\r\nДля избежания возможного конфликта из-за символов после имени переменной, последние можно заключать в фигурные скобки:\r\n</p>\r\n[cli]\r\n$ mv $file ${file}bak\r\n[/cli]\r\n\r\n<h3>Конструкция ${переменная:-значение}</h3>\r\n<p>\r\nКонструкция предписывает использовать значение указанной <code>переменной</code>, если оно не является пустым, а иначе — подставить заданное <code>значение</code>:\r\n</p>\r\n[cli]\r\n$ echo Using editor ${EDITOR:-/bin/vi}\r\n[/cli]\r\n<p>\r\nЭто все равно, что написать:\r\n</p>\r\n[bash]\r\nif [ -n \"$EDITOR\" ] ; then\r\n    echo Using editor $EDITOR\r\nelse\r\n    echo Using editor /bin/vi\r\nfi\r\n[/bash]\r\n\r\n<h3>Конструкция ${переменная:=значение}</h3>\r\n<p>\r\nЭта конструкция подобна предыдущей, но если заданная <code>переменная</code> имеет пустое значение, то указанное <code>значение</code> не только используется, но и присваивается заданной <code>переменной</code>:\r\n[code]\r\n${PHONEBOOK:$HOME/phonebook.txt}\r\n[/code]\r\n<p>\r\nСледует, однако, иметь ввиду, что приведенную выше конструкцию нельзя применять в качестве отдельной команды. Ведь после произведенной подстановки оболочка попытается выполнить результат такой подстановки как команду. Чтобы воспользоваться данной конструкцией как отдельной командой, надо написать:\r\n</p>\r\n[cli]\r\n$ : ${PHONEBOOK:$HOME/phonebook.txt}\r\n[/cli]\r\n<p>\r\nОболочка по-прежнему выполнит подстановку, но ничего не выполнит, поскольку указана пустая команда.\r\n</p>\r\n[cli]\r\n$ PHONEBOOK=\r\n$ echo $PHONEBOOK\r\n\r\n$ : ${PHONEBOOK:$HOME/phonebook.txt}\r\n$ echo $PHONEBOOK\r\n/home/evgeniy/phonebook.txt\r\n[/cli]\r\n\r\n<h3>Конструкция ${переменная:?значение}</h3>\r\n<p>\r\nЕсли в этой конструкции заданная <code>переменная</code> имеет непустое значение, то оболочка подставит его. В противном случае оболочка направит указанное <code>значение</code> в стандартный вывод ошибок и на этом завершит свое выполнение. Но это не означает выход из системы, если данная конструкция была выполнена в исходной оболочке.\r\n</p>\r\n\r\n<h3>Конструкция ${переменная:+значение}</h3>\r\n<p>\r\nВ данной конструкции указанное <code>значение</code> подставляется, если заданная <code>переменная</code> имеет непустое значение, а иначе вообще ничего не подставляется.\r\n</p>\r\n\r\n<div class=\"note\">\r\n<p>\r\nВ той части любой из рассматриваемых здесь конструкций, где указывается <code>значение</code>, может быть подставлена команда, поскольку она выполняется только в том случае, если требуется ее значение:\r\n</p>\r\n[bash]\r\nWORKDIR=${DBDIR:-$(pwd)}\r\n[/bash]\r\n<p>\r\nВ данном примере переменной <code>WORKDIR</code> присаивается значение параметра <code>DBDIR</code>, если оно непустое. В противном случае выполняется команда <code>pwd</code>, а результат присваивается переменной <code>WORKDIR</code>. Таким образом, команда <code>pwd</code> выполняется <em>лишь</em> в том случае, если значение параметра <code>DBDIR</code> оказывается пустым.\r\n</p>\r\n</div>\r\n\r\n<h2>Команда set</h2>\r\n<p>\r\nСлужит двум целям: для установки различных параметров оболочки и переназначения позиционных параметров <code>$1</code>, <code>$2</code> и т.п. \r\n<p>\r\n<p>\r\nОпция <code>-x</code> команды <code>set</code> позволяет включить режим трассировки. Если в исходном коде сценария добавить команду\r\n</p>\r\n[bash]\r\nset -x\r\n[/bash]\r\n<p>\r\nто данные обо всех выполняемых далее командах будут направлены оболочкой в стандартный вывод ошибок после имени файла, переменной и подстановки команд. Имена трассируемых команд предваряются знаками «плюс».\r\n</p>\r\n[cli]\r\n$ list=*\r\n$ set -x\r\n$ echo $list\r\n+ echo phonebook.txt unix.txt linux.txt\r\nphonebook.txt unix.txt linux.txt\r\n$ cmd=wc\r\n+ cmd=wc\r\ncmd=wc\r\n$ ls | $cmd -l\r\n+ ls\r\n+ wc -l\r\n      3\r\n[/cli]\r\n<p>\r\nДля выключения режима трассировки, надо в код сценария добавить команду\r\n</p>\r\n[bash]\r\nset +x\r\n[/bash]\r\n<p>\r\nВ исходном коде сценария можно указать любое количество команд <code>set -x</code> и <code>set +x</code>, чтобы включать и выключать режим трассировки по мере надобности.\r\n</p>\r\n<p>\r\nЕще один способ включить режим трассировки — запуск подоболочки с параметром <code>-x</code>, благодаря которому весь сценарий будет запущен в отладочном режиме\r\n</p>\r\n[cli]\r\n$ bash -x backup.sh\r\n[/cli]\r\n<div class=\"note\">\r\nЕсли запустить команду <code>set</code> без параметров, будет получен список всех переменных (локальных или экспортируемых), существующих в текущей среде.\r\n</div>\r\n\r\n<h3>Переназначение позиционных параметров</h3>\r\n[cli]\r\n$ set one two three four\r\n$ echo $1:$2:$3:$4\r\none:two:three:four\r\n$ echo $#\r\n4\r\n$ echo $*\r\none two three four\r\n$ for arg; do echo $arg; done\r\none\r\ntwo\r\nthree\r\nfour\r\n[/cli]','2018-04-11 16:40:24',1),(81,13,'Переменные среды и оболочки','','','Bash, CLI, Linux, env, export, set, unset, Окружение, Переменная','Каждый раз, когда активируется сессия оболочки, запускается процесс для сбора и компиляции информации, которая должна быть доступна оболочке и ее дочерним процессам. Оболочка получает эти данные от множества различных файлов и настроек в системе.','<p>\r\nКаждый раз, когда активируется сессия оболочки, запускается процесс для сбора и компиляции информации, которая должна быть доступна оболочке и ее дочерним процессам. Оболочка получает эти данные от множества различных файлов и настроек в системе.\r\n</p>\r\n<p>\r\nСреда содержит пары вида «ключ-значение». Несколько значений, как правило, разделяются символом двоеточия (:). Каждая пара, в целом, выглядит примерно так:\r\n</p>\r\n[code]\r\nКЛЮЧ=значение1:значение2:…\r\n[/code]\r\nЕсли же значение содержит пробелы, нужно использовать кавычки:\r\n[code]\r\nКЛЮЧ=\'значение с пробелами\'\r\n[/code]\r\n<p>\r\nВ данном случае под ключом подразумеваются переменные одного из двух существующих видов: переменные среды или переменные оболочки.\r\n</p>\r\n<p>\r\n<strong>Переменные среды</strong> — это переменные, которые были определены для текущей оболочки и <em>наследуются всеми дочерними оболочками</em> или процессами. Переменные среды используются для передачи информации процессам, запущенным из оболочки.\r\n</p>\r\n<p>\r\n<strong>Переменные оболочки</strong> — это локальные переменные, которые содержатся исключительно в оболочке, в которой они были установлены или определены. Они часто используются для отслеживания текущих данных (к примеру, текущего рабочего каталога).\r\n</p>\r\n<p>\r\nОбычно такие переменные обозначаются с помощью заглавных букв. Это помогает пользователям различать переменные среды в других контекстах.\r\n</p>\r\n\r\n<h2>Вывод переменных оболочки и среды</h2>\r\n<p>\r\nДля <em>просмотра списка всех переменных среды</em>, используются команды <code>env</code> или <code>printenv</code>. По умолчанию они выведут точно такой же результат:\r\n</p>\r\n[cli]\r\n$ env\r\nSHELL=/bin/bash\r\nUSER=evgeniy\r\nPWD=/home/evgeniy\r\nLANG=ru_RU.UTF-8\r\n..........\r\n[/cli]\r\n<p>\r\nДанные команды отличаются только несколькими индивидуальными функциями. К примеру, <code>printenv</code> может запрашивать значения отдельных переменных:\r\n</p>\r\n[cli]\r\n$ printenv SHELL\r\n/bin/bash\r\n[/cli]\r\n<p>\r\nКоманда <code>env</code> позволяет изменять среду, в которой запущены программы, передавая набор определений переменных в команду, примерно так:\r\n</p>\r\n[cli]\r\n$ env VAR=\'some value\' command options\r\n[/cli]\r\n<p>\r\nКак сказано выше, дочерние процессы наследуют переменные среды родительского процесса, что дает возможность менять значения или вносить дополнительные переменные для дочерних процессов.\r\n</p>\r\n<p>\r\nКак можно видеть в выводе команды <code>env</code>, многие переменные среды созданы с помощью системных файлов и процессов без вмешательства пользователя.\r\n</p>\r\n<p>\r\nДля <em>просмотра переменных оболочки</em> можно использовать команду <code>set</code>. Но, при вводе без дополнительных параметров, <code>set</code> выводит список всех переменных оболочки, переменных среды, локальных переменных и функций оболочки.\r\n</p>\r\n<p>\r\nЭтот список содержит огромное количество дополнительной информации, которая нам в данный момент не интересна (к примеру, некоторые функции bash).\r\n</p>\r\n\r\n<h2>Основные переменные среды и оболочки</h2>\r\n<p>\r\nНекоторые особенно полезные переменные среды и оболочки используются очень часто. Ниже приведен список основных переменных среды:\r\n</p>\r\n<ul>\r\n  <li><code>SHELL</code>: описывает оболочку, которая интерпретирует введенные команды. В большинстве случаев по умолчанию установлена bash, но это значение можно изменить в случае необходимости.</li>\r\n  <li><code>TERM</code>: указывает вид терминала, эмулируемого при запуске оболочки. В зависимости от операционных требований можно эмулировать разные аппаратные терминалы.</li>\r\n  <li><code>USER</code>: текущий пользователь.</li>\r\n  <li><code>PWD</code>: текущий рабочий каталог.</li>\r\n  <li><code>OLDPWD</code>: предыдущий рабочий каталог. Оболочка хранит его на случай запуска команды <code>cd -</code>.</li>\r\n  <li><code>LS_COLORS</code>: определяет цветовые коды, которые используются для цветного вывода результата команды ls. Такой вывод помогает пользователю быстрее прочесть результат команды (например, быстро различить типы файлов).</li>\r\n  <li><code>MAIL</code>: путь к текущему почтовому ящику пользователя.</li>\r\n  <li><code>PATH</code>: список каталогов, к которым обращается система при выполнении команд. Когда пользователь запускает команду, система проверяет эти каталоги в указанном порядке в поисках исполняемого файла.</li>\r\n  <li><code>LANG</code>: текущие настройки языка и локализации, в том числе кодировка символов.</li>\r\n  <li><code>HOME</code>: домашний каталог текущего пользователя.</li>\r\n  <li><code>_</code>: последняя выполненная команда.</li>\r\n</ul>\r\n<p>\r\nОзнакомившись со списком переменных среды, посмотрим на список переменных оболочки:\r\n</p>\r\n<ul>\r\n  <li><code>BASHOPTS</code>: список опций, использованных при выполнении bash. Это можно применять для того, чтоб проверить, работает ли среда должным образом.</li>\r\n  <li><code>BASH_VERSION</code>: запущенная версия bash в удобочитаемой форме.</li>\r\n  <li><code>BASH_VERSINFO</code>: версия bash в машиночитаемом формате.</li>\r\n  <li><code>COLUMNS</code>: определяет ширину вывода в столбцах.</li>\r\n  <li><code>DIRSTACK</code>: стек каталогов, доступных командам <code>pushd</code> и <code>popd</code>.</li>\r\n  <li><code>HISTFILESIZE</code>: максимальное количество строк, содержащееся в файле истории команд.</li>\r\n  <li><code>HISTSIZE</code>: Количество команд, которые необходимо запоминать в списке истории.</li>\r\n  <li><code>HOSTNAME</code>: текущее имя хоста.</li>\r\n  <li><code>IFS</code>: Внутренний разделитель полей ввода в командной строке. По умолчанию установлен пробел.</li>\r\n  <li><code>PS1</code>: определяет строку первичного приглашения – вид командной строки при запуске сессии оболочки. Переменная <code>PS2</code> устанавливает строку вторичного приглашения, если команда занимает несколько строк.</li>\r\n  <li><code>SHELLOPTS</code>: параметры оболочки, которые можно установить при помощи <code>set</code>.</li>\r\n  <li><code>UID</code>: уникальный идентификатор текущего пользователя.</li>\r\n</ul>\r\n\r\n<h2>Создание переменных оболочки</h2>\r\n<p>\r\nЭто делается очень просто, для этого нужно только указать имя и значение. Как уже было сказано, для написания имен таких переменных используются заглавные буквы.\r\n</p>\r\n[cli]\r\n$ TEST_VAR=\'Hello World!\'\r\n[/cli]\r\n<p>\r\nВ данном примере используются кавычки, поскольку значение содержит пробелы.  Более того, здесь нужно использовать именно одинарные кавычки, так как восклицательный знак является специальным символом в bash-оболочке, который обращается к истории команд, если он не избегается или не заключен в одинарные кавычки.\r\n</p>\r\n<p>\r\nПолученная переменная оболочки действительна в текущей сессии, но не передается ее дочерним процессам. Чтобы убедиться, что данная переменная не является переменной среды, используем команду <code>grep</code> для фильтрации вывода команды <code>env</code>:\r\n</p>\r\n[cli]\r\n$ env | grep TEST_VAR\r\n$\r\n[/cli]\r\n<p>\r\nДанное действие не выведет никакого результата.\r\n</p>\r\n<p>\r\nУбедимся в том, что переменная <code>TEST_VAR</code> не передается дочернему процессу. Для этого внутри текущей оболочки запустим новую оболочку:\r\n</p>\r\n[cli]\r\n$ bash\r\n$ echo $TEST_VAR\r\n\r\n$\r\n[/cli]\r\n<p>\r\nВозвращаемся в исходную оболочку:\r\n</p>\r\n[cli]\r\n$ exit\r\n[/cli]\r\n\r\n<h2>Создание переменных среды</h2>\r\n<p>\r\nТеперь попробуем превратить переменную оболочки в переменную среды. Это делается путем экспорта переменной:\r\n</p>\r\n[cli]\r\n$ export TEST_VAR\r\n[/cli]\r\n<p>\r\nДанная команда превращает переменную оболочки в переменную среды. Чтобы проверить, все ли выполнено верно, можно снова просмотреть список переменных среды:\r\n</p>\r\n[cli]\r\n$ env | grep TEST_VAR\r\nTEST_VAR=Hello World!\r\n[/cli]\r\n<p>\r\nМожно также снова развернуть дочернюю оболочку:\r\n<p>\r\n[cli]\r\n$ bash\r\n$ echo $TEST_VAR\r\nHello World!\r\n[/cli]\r\n<p>\r\nДочерняя оболочка получила переменную исходной оболочки. Попробуем экспортировать еще одну переменную, прежде чем покинуть дочернюю оболочку:\r\n</p>\r\n[cli]\r\n$ export NEW_VAR=\'New var value\'\r\n[/cli]\r\n<p>\r\nПроверим, экспортировалась ли переменная:\r\n</p>\r\n[cli]\r\n$ env | grep NEW_VAR\r\nNEW_VAR=New var value\r\n[/cli]\r\n<p>\r\nТеперь вернемся в исходную оболочку:\r\n</p>\r\n[cli]\r\n$ exit\r\n[/cli]\r\n<p>\r\nПроверим, можно ли открыть данную переменную:\r\n</p>\r\n[cli]\r\n$ echo $NEW_VAR\r\n\r\n$ \r\n[/cli]\r\n<p>\r\nРезультат не возвращается. Это происходит потому, что переменные среды передаются только дочерним процессам. Встроенного способа установки переменных среды родительской оболочки нет. В большинстве случаев это предотвращает влияние программ на операционную среду, из которой они были запущены.\r\n</p>\r\n<p>\r\nПеременная <code>NEW_VAR</code> была установлена как переменная среды дочерней оболочки. Эта переменная действительна для данной оболочки и ее дочерних оболочек и процессов. После возвращения пользователя в исходную оболочку данная среда была разрушена.\r\n</p>\r\n\r\n<h2>Перемещение и сброс переменных</h2>\r\n<p>\r\nПеременная <code>TEST_VAR</code> все еще является переменной среды. Чтобы снова сделать ее переменной оболочки:\r\n</p>\r\n[cli]\r\n$ export -n TEST_VAR\r\n[/cli]\r\n<p>\r\nТеперь эта переменная больше не является переменной среды:\r\n</p>\r\n[cli]\r\n$ env | grep TEST_VAR\r\n$\r\n[/cli]\r\n<p>\r\nЭто снова переменная оболочки:\r\n</p>\r\n[cli]\r\n$ set | grep TEST_VAR\r\nTEST_VAR=\'Hello World!\'\r\n[/cli]\r\n<p>\r\nЧтобы полностью сбросить переменную, будь то переменная среды или оболочки, надо использовать команду <code>unset</code>:\r\n</p>\r\n[cli]\r\n$ unset TEST_VAR\r\n[/cli]\r\n<p>\r\nУбедимся, что такой переменной больше нет:\r\n</p>\r\n[cli]\r\n$ echo $TEST_VAR\r\n\r\n$\r\n[/cli]\r\n<p>\r\nРезультат не был выведен, поскольку переменная была сброшена.\r\n</p>','2018-04-14 13:01:51',1),(83,14,'Работа с CSV-файлами в Python','','','CSV, Python, Web-разработка','CSV — текстовой формат, ориентированный на работу с данными несложных электронных таблиц, хранящихся в обычных тестовых файлах. Модуль Python csv упрощает синтаксический анализ (парсинг) CSV-файлов. Чтобы прочитать данные из CSV-файла, необходимо создать объект Reader.','<p>\r\nCSV — текстовой формат, ориентированный на работу с данными несложных электронных таблиц, хранящихся в обычных тестовых файлах. Модуль Python <code>csv</code> упрощает синтаксический анализ (парсинг) CSV-файлов.\r\n</p>\r\n<h2>Чтение CSV-файлов</h2>\r\n<p>\r\nФайл <code>example.csv</code>, из которого будем читать:\r\n</p>\r\n[code]\r\n05.04.2015 13:34;Яблоки;73\r\n05.04.2015 3:41;Вишни;85\r\n06.04.2015 12:46;Груши;14\r\n[/code]\r\n<p>\r\nЧтобы прочитать данные из CSV-файла, необходимо создать объект <code>Reader</code>, который обеспечивает возможность итерирования по строкам файла:\r\n</p>\r\n[python]\r\nimport csv\r\n\r\nexampleFile = open(\'example.csv\', encoding = \'UTF-8\')\r\nexampleReader = csv.reader(exampleFile, delimiter = \';\')\r\nexampleData = list(exampleReader)\r\n\r\nprint(exampleData)\r\n\r\nexampleFile.close()\r\n[/python]\r\n[code]\r\n[[\'05.04.2015 13:34\', \'Яблоки\', \'73\'],\r\n[\'05.04.2015 3:41\', \'Вишни\', \'85\'],\r\n[\'06.04.2015 12:46\', \'Груши\', \'14\']]\r\n[/code]\r\n<p>\r\nТеперь, когда у нас есть список списков, можно обращаться к отдельным ячейкам с помощью <code>exampleData[row][col]</code>. В случае больших CSV-файлов целесообразно использовать объект <code>Reader</code> в цикле <code>for</code>. Тем самым удается избежать загрузки всего файла в оперативную память.\r\n</p>\r\n[python]\r\nimport csv\r\n\r\nexampleFile = open(\'example.csv\', encoding = \'UTF-8\')\r\nexampleReader = csv.reader(exampleFile, delimiter = \';\')\r\n\r\nfor row in exampleReader:\r\n    string = \'Строка #\' + str(exampleReader.line_num) + \' \'\r\n    for value in row:\r\n        string = string + value + \' \'\r\n    print(string)\r\n\r\nexampleFile.close()\r\n[/python]\r\n[code]\r\nСтрока #1 05.04.2015 13:34 Яблоки 73 \r\nСтрока #2 05.04.2015 3:41 Вишни 85 \r\nСтрока #3 06.04.2015 12:46 Груши 14 \r\n[/code]\r\n<p>\r\nДля вывода номера строки используется свойство <code>line_num</code> объекта <code>Reader</code>. Цикл по объекту <code>Reader</code> можно выполнить только один раз. Для повтороно чтения данных необходимо заново создать объект <code>Reader</code>, вызвав метод <code>csv.reader()</code>.\r\n</p>\r\n\r\n<h2>Запись CSV-файлов</h2>\r\n[python]\r\nimport csv\r\n\r\nexampleFile = open(\'output.csv\', \'w\', encoding = \'UTF-8\', newline = \'\')\r\nexampleWriter = csv.writer(exampleFile, delimiter = \';\')\r\n\r\nexampleData = [[\'05.04.2015 13:34\',\'Яблоки\',\'73\'], [\'05.04.2015 3:41\',\'Вишни\',\'85\'], [\'06.04.2015 12:46\',\'Груши\',\'14\']]\r\n\r\nfor row in exampleData:\r\n    exampleWriter.writerow(row)\r\n\r\nexampleFile.close()\r\n[/python]\r\n<p>\r\nФайл <code>output.csv</code>:\r\n</p>\r\n[code]\r\n05.04.2015 13:34;Яблоки;73\r\n05.04.2015 3:41;Вишни;85\r\n06.04.2015 12:46;Груши;14\r\n[/code]\r\n<p>\r\nПри работе в Windows функции <code>open()</code> надо передать именованный аргумент <code>newline = \'\'</code>, иначе в файле <code>output.csv</code> появятся лишние пустые строки. С помощью именованного аргумента <code>lineterminator</code> метода <code>csv.writer()</code> можно заменить разделитель строк.\r\n</p>','2018-04-15 15:20:40',1),(84,12,'Настройка интерфейса конфигурации','','','1С:Предприятие, Интерфейс, Настройка, Подсистема, ПраваДоступа, Редактор','Редактор командного интерфейса конфигурации — это один из инструментов разработки. Он предназначен для того, чтобы настроить порядок следования разделов в панели разделов и настроить видимость разделов для разных ролей, определенных в конфигурации.','<h3>Редактор командного интерфейса конфигурации</h3>\r\n<p>\r\nПредназначен для того, чтобы настроить <strong>порядок следования разделов</strong> в панели разделов и <strong>настроить видимость разделов</strong> для разных ролей, определенных в конфигурации.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/84/1.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nВызвать редактор командного интерфейса конфигурации можно разными способами, например, командой контекстного меню в корне конфигурации.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/84/2.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nДля изменения порядка разделов используются кнопки командной панели «Вверх» и «Вниз» или контекстное меню.\r\n</p>\r\n<p>\r\nЕсли подсистем много, а требуется настроить видимость только для некоторых из них, то подсистемы можно отобрать по ролям. Например, показать только те подсистемы, которые доступны для роли «Бухгалтер».\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/84/3.jpg\" alt=\"\" />\r\n</p>\r\n\r\n<h3>Редактор командного интерфейса основного раздела</h3>\r\n<p>\r\nПредназначен для настройки команд основного раздела. Позволяет настроить состав команд каждой командной панели:\r\n</p>\r\n<ul>\r\n  <li>Панель навигации. Важное</li>\r\n  <li>Панель навигации. Обычное</li>\r\n  <li>Панель навигации. См.также</li>\r\n  <li>Панель навигации. Важное</li>\r\n  <li>Панель действий. Создать</li>\r\n  <li>..........</li>\r\n</ul>\r\n<p>\r\nА также установить порядок отображения и видимость элементов командного интерфейса по ролям.\r\n<p>\r\n<p>\r\n<img src=\"/files/blog/84/4.jpg\" alt=\"\" />\r\n</p>\r\n\r\n<h3>Редактор командного интерфейса подсистемы</h3>\r\n<p>\r\nПредназначен для настройки команд какой-либо подсистемы. Он позволяет задать состав команд, их порядок и их видимость в разрезе ролей для панели функций текущего раздела.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/84/5.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nВызвать редактор командного интерфейса можно разными способами, например, командой контекстного меню на выбранной подсистеме.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/84/6.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nДля изменения порядка команд используются кнопки командной панели «Вверх» и «Вниз» или контекстное меню.\r\n</p>\r\n\r\n<h3>Редактор рабочей области начальной страницы</h3>\r\n<p>\r\nПредназначен для того, чтобы описать, какие формы и каким образом будут располагаться на начальной странице. Кроме этого редактор позволяет настроить видимость этих форм для разных ролей, определенных в конфигурации.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/84/7.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nВызвать редактор рабочей области начальной страницы можно разными способами, например, командой контекстного меню в корне конфигурации.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/84/8.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nФормы на начальной странице можно расположить в одну или в две колонки. Для добавления, удаления и перемещения форм используются кнопки командной панели или команды контекстного меню.\r\n</p>\r\n<p>\r\nВ состав начальной страницы можно включить только те формы, которые в явном виде созданы в конфигурации. Формы, генерируемые платформой автоматически, в состав начальной страницы включить нельзя.\r\n</p>\r\n<p>\r\nДля каждой формы можно задать видимость, одинаковую для всех ролей, или же установить видимость выборочно, только для некоторых ролей.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/84/9.jpg\" alt=\"\" />\r\n</p>','2018-04-10 17:01:53',1),(85,14,'Работа с JSON в Python','','','JSON, Python, Web-разработка','JSON (JavaScript Object Notation) — текстовый формат обмена данными, удобный для чтения и написания как человеком, так и компьютером. Он основан на двух структурах данных: коллекция пар ключ-значение и упорядоченный список значений.','<p>\r\nJSON (JavaScript Object Notation) — текстовый формат обмена данными, удобный для чтения и написания как человеком, так и компьютером. Он основан на подмножестве языка программирования JavaScript.\r\n</p>\r\n<p>\r\nJSON основан на двух структурах данных:\r\n</p>\r\n<ul>\r\n  <li>Коллекция пар ключ-значение (объект)</li>\r\n  <li>Упорядоченный список значений (массив)</li>\r\n</ul>\r\n<p>\r\nЭто универсальные структуры данных. Почти все современные языки программирования поддерживают их в какой-либо форме. В нотации JSON это выглядит так:\r\n</p>\r\n<p>\r\n<strong>Объект</strong> — неупорядоченный набор пар ключ-значение. Объект начинается с <strong>{</strong> и заканчивается <strong> }</strong>. Ключ и значение разделяются двоеточием, сами пары ключ-значение разделяются запятой.\r\n</p>\r\n[json]\r\n{\"email\" : \"ivanov@mail.ru\", \"name\" : \"Иванов Иван Иванович\"}\r\n[/json]\r\n<p>\r\n<strong>Массив</strong> — упорядоченная коллекция значений. Массив начинается с <strong>[</strong> и заканчивается <strong>]</strong>. Значения разделены запятой.\r\n</p>\r\n[json]\r\n[\"ivanov@mail.ru\", \"petrov@mail.ru\", \"sidorov@mail.ru\"]\r\n[/json]\r\n<p>\r\nЗначение может быть строкой в двойных кавычках, числом, <code>true</code>, <code>false</code>, <code>null</code>, объектом или массивом. Эти структуры могут быть вложенными.\r\n</p>\r\n<p>\r\nСтрока — коллекция нуля или больше символов Unicode, заключенная в двойные кавычки, используя <strong>\\</strong> (обратную косую черту) в качестве символа экранирования. Для представления числа используется только десятичная система счисления.\r\n</p>\r\n[json]\r\n{\r\n    \"id\": 765,\r\n    \"email\": \"ivanov@mail.ru\",\r\n    \"name\": \"Иванов Иван Иванович\",\r\n    \"age\": 45,\r\n    \"admin\": false,\r\n    \"friends\": [123,456,789]\r\n}\r\n[/json]\r\n<p>\r\nМодуль json позволяет легко записывать и читать данные в формате JSON.\r\n<p>\r\n<p>\r\n<strong>Для чтения</strong> данных в JSON-формате есть два метода:\r\n</p>\r\n<ul>\r\n  <li><code>json.load()</code> — метод считывает файл в формате JSON и возвращает объект Python</li>\r\n  <li><code>json.loads()</code> — метод считывает строку в формате JSON и возвращает объект Python</li>\r\n</ul>\r\n<p>\r\n<strong>Для записи</strong> информации в формате JSON также два метода:\r\n</p>\r\n<ul>\r\n  <li><code>json.dump()</code> — метод записывает объект Python в файл в формате JSON</li>\r\n  <li><code>json.dumps()</code> — метод преобразует объект Python в строку в формате JSON</li>\r\n</ul>\r\n<table class=\"data-table\">\r\n<tr>\r\n  <th colspan=\"2\">Таблица конвертации данных Python в JSON</th>\r\n  <th colspan=\"2\">Таблица конвертации JSON в данные Python</th>\r\n</tr>\r\n<tr>\r\n  <th>Python</th>\r\n  <th>JSON</th>\r\n  <th>JSON</th>\r\n  <th>Python</th> \r\n</tr>\r\n<tr>\r\n  <td>dict</td>\r\n  <td>object</td>\r\n  <td>object</td>\r\n  <td>dict</td> \r\n</tr>\r\n<tr>\r\n  <td>list, tuple</td>\r\n  <td>array</td>\r\n  <td>array</td>\r\n  <td>list</td> \r\n</tr>\r\n<tr>\r\n  <td>str</td>\r\n  <td>string</td>\r\n  <td>string</td>\r\n  <td>str</td> \r\n</tr>\r\n<tr>\r\n  <td>int, float</td>\r\n  <td>number(int, real)</td>\r\n  <td>number(int, real)</td>\r\n  <td>int, float</td> \r\n</tr>\r\n<tr>\r\n  <td>True, False</td>\r\n  <td>true, false</td>\r\n  <td>true, false</td>\r\n  <td>True, False</td> \r\n</tr>\r\n<tr>\r\n  <td>None</td>\r\n  <td>null</td>\r\n  <td>null</td>\r\n  <td>None</td> \r\n</tr>\r\n</table>\r\n\r\n<h2>Примеры</h2>\r\n<p>Преобразуем json-строку в словарь:</p>	\r\n[python]\r\nimport json\r\n\r\nstring = \'{\"id\":765, \"email\":\"ivanov@mail.ru\", \"surname\":\"Иванов\", \"age\":45, \"admin\":false, \"friends\":[123,456,789]}\'\r\ndata = json.loads(string)\r\n\r\nprint(data[\"email\"])\r\nprint(data[\"surname\"])\r\nprint(data[\"admin\"])\r\nprint(data[\"friends\"])\r\n[/python]\r\n[code]\r\nivanov@mail.ru\r\nИванов\r\nFalse\r\n[123, 456, 789]\r\n[/code]\r\n<p>Читаем json-данные из файла и преобразуем в словарь:</p>\r\n<p>\r\n<img src=\"/files/blog/85/1.jpg\" alt=\"\" />\r\n</p>\r\n[python]\r\nimport json\r\n\r\n# читаем json-данные из файла и преобразуем в словарь\r\nwith open(\'data.json\', encoding = \'UTF-8\') as file:\r\n    data = json.load(file)\r\n\r\nprint(data[\"email\"])\r\nprint(data[\"surname\"])\r\nprint(data[\"admin\"])\r\nprint(data[\"friends\"])\r\n[/python]\r\n[code]\r\nivanov@mail.ru\r\nИванов\r\nFalse\r\n[123, 456, 789]\r\n[/code]\r\n<p>Преобразуем словарь в json-строку:</p>\r\n[python]\r\nimport json\r\n\r\ndata = {\"id\":765, \"email\":\"ivanov@mail.ru\", \"surname\":\"Иванов\", \"age\":45, \"admin\":False, \"friends\":[123,456,789]}\r\n\r\n# преобразуем словарь в json-строку\r\nstring = json.dumps(data)\r\nprint(string)\r\n\r\n# преобразуем словарь в json-строку\r\nstring = json.dumps(data, ensure_ascii = False)\r\nprint(string)\r\n[/python]\r\n[code]\r\n{\"id\": 765, \"email\": \"ivanov@mail.ru\", \"surname\": \"\\u0418\\u0432…\", \"age\": 45, \"admin\": false, \"friends\": [123, 456, 789]}\r\n{\"id\": 765, \"email\": \"ivanov@mail.ru\", \"surname\": \"Иванов\", \"age\": 45, \"admin\": false, \"friends\": [123, 456, 789]}\r\n[/code]\r\n<p>Преобразуем словарь в json и записываем в файл:</p>\r\n[python]\r\nimport json\r\n\r\ndata = {\"id\":765, \"email\":\"ivanov@mail.ru\", \"surname\":\"Иванов\", \"age\":45, \"admin\":False, \"friends\":[123,456,789]}\r\n\r\n# преобразуем словарь в json и записываем в файл\r\nwith open(\'data.json\', \'w\', encoding = \'UTF-8\') as file:\r\n    json.dump(data, file)\r\n\r\n# преобразуем словарь в json и записываем в файл\r\nwith open(\'data.json\', \'w\', encoding = \'UTF-8\') as file:\r\n    json.dump(data, file, ensure_ascii = False)\r\n[/python]\r\n<p>\r\n<img src=\"/files/blog/85/2.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/85/3.jpg\" alt=\"\" />\r\n</p>','2018-04-17 12:10:40',1),(86,13,'Перенаправление ввода-вывода','','','Bash, CLI, Linux, stderr, stdin, stdout, Поток','Всё в Linux — это файлы, в том числе — ввод и вывод. Операционная система идентифицирует файлы с использованием дескрипторов. Каждому процессу позволено иметь до девяти открытых дескрипторов файлов. Оболочка bash резервирует первые три дескриптора с идентификаторами 0, 1 и 2.','<p>\r\nВсё в Linux — это файлы, в том числе — ввод и вывод. Операционная система идентифицирует файлы с использованием дескрипторов. Каждому процессу позволено иметь до девяти открытых дескрипторов файлов. Оболочка bash резервирует первые три дескриптора с идентификаторами 0, 1 и 2. Вот что они означают.\r\n</p>\r\n<ul>\r\n  <li>0, STDIN — стандартный поток ввода</li>\r\n  <li>1, STDOUT — стандартный поток вывода</li>\r\n  <li>2, STDERR — стандартный поток ошибок</li>\r\n</ul>\r\n<h2>STDIN</h2>\r\n<p>\r\n<code>STDIN</code> — это стандартный поток ввода оболочки. Для терминала стандартный ввод — это клавиатура. Когда используется символ перенаправления ввода — <code>&lt;</code>, Linux заменяет дескриптор файла стандартного ввода на тот, который указан в команде. Система читает файл и обрабатывает данные так, будто они введены с клавиатуры.\r\n</p>\r\n<p>\r\nМногие команды bash принимают ввод из <code>STDIN</code>, если в командной строке не указан файл, из которого надо брать данные. Например, это справедливо для команды <code>cat</code>.\r\n</p>\r\n<p>\r\nКогда вы вводите команду <code>cat</code> в командной строке, не задавая параметров, она принимает ввод из <code>STDIN</code>. После того, как вы вводите очередную строку, <code>cat</code> просто выводит её на экран. И останавливается после того как получает <code>EOF</code>. <code>EOF</code> вводится нажатием сочетания клавиш Ctrl+D.\r\n</p>\r\n\r\n<h2>STDOUT</h2>\r\n<p>\r\n<code>STDOUT</code> — стандартный поток вывода оболочки. По умолчанию это — экран. Большинство bash-команд выводят данные в <code>STDOUT</code>, что приводит к их появлению в консоли. Данные можно перенаправить в файл, для этого используется символ перенаправления вывода <code>&gt;</code>.\r\n</p>\r\n<p>\r\nМожно осуществить перенаправление вывода в файл с добавлением в конец с помощью <code>&gt;&gt;</code>. При этом информация, хранящаяся в файле не будет удалена, а вся новая информация будет добавлена в конец этого файла.\r\n</p>\r\n\r\n<h2>STDERR</h2>\r\n<p>\r\n<code>STDERR</code> представляет собой стандартный поток ошибок оболочки. По умолчанию этот дескриптор указывает на то же самое, на что указывает <code>STDOUT</code>, именно поэтому при возникновении ошибки мы видим сообщение на экране.\r\n</p>\r\n<p>\r\nРассмотрим простой пример — нужно записать в файл <code>data.txt</code> содержимое директории <code>data</code>. Если директория не существует, сообщение об ошибке надо записать в файл <code>error.txt</code>. Чтобы этого добиться, нужно использовать команды перенаправления для соответствующих дескрипторов с указанием файлов, куда должны попадать ошибки и стандартный вывод:\r\n</p>\r\n[cli]\r\n$ ls data 1> data.txt 2> error.txt\r\n[/cli]\r\n<p>\r\n<p>\r\nЕсли надо, <code>STDERR</code> и <code>STDOUT</code> можно перенаправить в один и тот же файл, воспользовавшись <code>&amp;&gt;</code>:\r\n</p>\r\n[cli]\r\n$ ls data &> data-error.txt\r\n[/cli]\r\n<p>\r\nУстаревшая форма записи:\r\n</p>\r\n[cli]\r\n$ ls data > data-error.txt 2>&1\r\n[/cli]\r\n<div class=\"note\">\r\n<p>\r\nОболочка определяет порядок перенаправления потоков в командной строке слева направо, поэтому приведенный выше пример нельзя записать так:\r\n</p>\r\n[cli]\r\n$ ls data 2>&1 > data-error.txt\r\n[/cli]\r\n<p>\r\nВ этом случае сначала вывод ошибок перенаправляется в стандартный вывод (на экран), а потом стандартный вывод перенаправляется в файл <code>data-error.txt</code>. То есть, ошибки будут выведены в консоль, а данные — в файл.\r\n</p>\r\n</div>\r\n<p>\r\nДля дозаписи в файл <code>data-error.txt</code>\r\n</p>\r\n[cli]\r\n$ ls data &>> data-error.txt\r\n[/cli]\r\n\r\n<h2>Перенаправление вывода в скриптах</h2>\r\n<p>\r\nСуществует два метода перенаправления вывода в сценариях командной строки:\r\n</p>\r\n<ul>\r\n  <li>Временное перенаправление, или перенаправление вывода одной строки</li>\r\n  <li>Постоянное перенаправление, или перенаправление всего вывода сценария</li>\r\n</ul>\r\n\r\n<h3>Временное перенаправление вывода</h3>\r\n<p>\r\nВ сценарии можно перенаправить вывод отдельной строки в <code>STDERR</code>. Чтобы это сделать, достаточно использовать команду перенаправления, указав дескриптор <code>STDERR</code>, при этом перед номером дескриптора надо поставить символ амперсанда:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\necho \"This is an error\" >&2\r\necho \"This is normal output\"\r\n[/bash]\r\n<p>\r\nЕсли запустить этот скрипт, обе строки попадут на экран, так как, как вы уже знаете, по умолчанию ошибки выводятся туда же, куда и обычные данные.\r\n</p>\r\n[cli]\r\n$ ./test.sh\r\nThis is an error\r\nThis is normal output\r\n[/cli]\r\n<p>\r\nЗапустим скрипт так, чтобы вывод <code>STDERR</code> попадал в файл:\r\n</p>\r\n[cli]\r\n$ ./test.sh 2> error.txt\r\nThis is normal output\r\n$ cat error.txt\r\nThis is an error\r\n[/cli]\r\n<p>\r\nТеперь обычный вывод делается в консоль, а сообщения об ошибках попадают в файл <code>error.txt</code>.\r\n</p>\r\n\r\n<h3>Постоянное перенаправление вывода</h3>\r\n<p>\r\nЕсли в скрипте нужно перенаправлять много выводимых на экран данных, добавлять <code>&gt;&amp;2</code> к каждому вызову <code>echo</code> неудобно. Вместо этого можно задать перенаправление вывода в определённый дескриптор на время выполнения скрипта, воспользовавшись командой <code>exec</code>:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nexec 1> output.txt\r\necho \"Это пример перенаправления всего\"\r\necho \"вывода сценария в файл output.txt\"\r\necho \"без перенаправления каждой строки\"\r\n[/bash]\r\n<p>\r\nПосле запуска сценария весь вывод будет перенаправлен в файл <code>output.txt</code>.\r\n</p>\r\n<p>\r\nКоманду <code>exec</code> можно использовать не только в начале скрипта, но и в других местах:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\n\r\n# ошибки перенаправляем в файл error.txt\r\nexec 2> error.txt\r\n# строка будет выведена на экран\r\necho \"Первый вывод сценария\"\r\n# перенаправляем вывод в файл output.txt\r\nexec 1> output.txt\r\n# строка будет записана в файл output.txt\r\necho \"Второй вывод сценария\"\r\n# строка будет записана в файл error.txt\r\necho \"Третий вывод сценария\" >&2\r\n[/bash]\r\n\r\n<h2>Перенаправление ввода в скриптах</h2>\r\n<p>\r\nДля перенаправления ввода можно воспользоваться тем же способом, который использовался для перенаправления вывода. Например, команда <code>exec</code> позволяет сделать источником данных для <code>STDIN</code> какой-нибудь файл:\r\n[cli]\r\n$ exec 0< data.txt\r\n[/cli]\r\n<p>\r\nЭта команда указывает оболочке на то, что источником вводимых данных должен стать файл <code>data.txt</code>, а не обычный <code>STDIN</code>. Посмотрим на перенаправление ввода в действии:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nexec 0< data.txt\r\ncount=1\r\nwhile read line ; do\r\n    echo \"Line #$count: $line\"\r\n    count=$(( $count + 1 ))\r\ndone\r\n[/bash]\r\n\r\n<h2>Подавление вывода</h2>\r\n<p>\r\nИногда надо сделать так, чтобы команды в скрипте, который, например, может исполняться как фоновый процесс, ничего не выводили на экран. Для этого можно перенаправить вывод в <code>/dev/null</code>.\r\n<p>\r\n<p>\r\nВот, например, как подавить вывод сообщений об ошибках:\r\n</p>\r\n[cli]\r\n$ ls -al badfile.txt file.txt 2> /dev/null\r\n[/cli]\r\n<p>\r\nТот же подход используется, если, например, надо очистить файл, не удаляя его:\r\n</p>\r\n[cli]\r\n$ cat /dev/null > data.txt\r\n[/cli]','2018-04-18 12:22:40',1),(87,7,'Как открыть форму списка с некоторым отбором?','','','1С:Предприятие, Отбор, ОткрытьФорму, Параметр, Список, УправляемаяФорма','Есть несколько способов для того, чтобы открыть форму списка с некоторым, заранее установленным отбором.  Первый способ заключается в том, что при открытии формы можно задать параметр формы Отбор, и открыть форму списка с этим параметром.','<p>\r\nЕсть несколько способов для того, чтобы открыть форму списка с некоторым, заранее установленным отбором. Рассмотрим их по-порядку:\r\n</p>\r\n<h2>Первый способ</h2>\r\n<p>\r\nЗаключается в том, что при открытии формы можно задать параметр формы <code>Отбор</code>, и открыть форму списка с этим параметром. Параметр <code>Отбор</code> представляет собой структуру. Имена элементов соответствуют именам полей, по которым производится отбор, а значения содержат значения отбора. Это параметр расширения управляемой формы динамического списка. То есть он существует у форм, основным реквизитом которых является реквизит типа <code>Динамический Список</code>, например у форм списка и форм выбора.\r\n</p>\r\n<p>\r\nВ процессе открытия формы будет установлен отбор по указанному полю. Например, в следующем примере открывается список приходных накладных с отбором по полю <code>Номер</code>, равному <code>333</code>.\r\n</p>\r\n[язык]\r\nЗначениеОтбора = Новый Структура(\"Номер\", \"333\");\r\nПараметрыОтбора = Новый Структура(\"Отбор\", ЗначениеОтбора);\r\nОткрытьФорму(\"Документ.ПриходнаяНакладная.ФормаСписка\", ПараметрыОтбора);\r\n[/язык]\r\n\r\n<h2>Второй способ</h2>\r\n<p>\r\nМожно открыть форму списка без параметров:\r\n</p>\r\n[язык]\r\nОткрытьФорму(\"Документ.ПриходнаяНакладная.ФормаСписка\");\r\n[/язык]\r\n<p>\r\nИ затем, в обработчике события формы списка приходных накладных <code>ПриСозданииНаСервере</code> написать код, который создает отбор в динамическом списке, являющемся основным реквизитом формы:\r\n</p>\r\n[язык]\r\n&НаСервере\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n    ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип(\"ЭлементОтбораКомпоновкиДанных\"));\r\n    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(\"Номер\");\r\n    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;\r\n    ЭлементОтбора.Использование = Истина;\r\n    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;\r\n    ЭлементОтбора.ПравоеЗначение = \"000000001\";\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nПреимущества данного метода в том, что <code>ВидСравнения</code> у отбора можно задавать не только <code>Равно</code>, как в первом случае, а и <code>Больше</code>, <code>Меньше</code> и т.п.\r\n</p>\r\n<p>\r\nНо у такого способа есть и очень существенный недостаток: с этим отбором форма будет открываться всегда. Откуда бы ее ни вызвали. Поэтому такую форму не следует назначать основной. А если все же она основная — то перед установкой отбора, необходимо предусмотреть какой-то анализ того, откуда открывается эта форма. Например, анализируя параметры формы. \r\n</p>\r\n\r\n<h2>Третий способ</h2>\r\n<p>\r\nИ наконец, условие отбора можно поместить в произвольный запрос, выбирающий данные для динамического списка. Например, нам нужно открыть список приходных накладных, в которых присутствует номенклатура, выделенная в списке номенклатуры.\r\n</p>\r\n<p>\r\nДля этого в форме списка номенклатуры создадим команду и соответствующую ей кнопку <code>ПриходныеНакладные</code>.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/87/1.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nОбработчик выполнения этой команды заполним следующим образом:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ПриходныеНакладные(Команда)\r\n    ФормаСписка = ПолучитьФорму(\"Документ.ПриходнаяНакладная.ФормаСписка\");\r\n    // Установливаем значение реквизита ФильтрПоТовару\r\n    ФормаСписка.ФильтрПоТовару = Элементы.Список.ТекущаяСтрока;\r\n    ФормаСписка.Открыть();\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nВ этом обработчике мы получаем форму списка приходных накладных и передаем в реквизит формы <code>ФильтрПоТовару</code> ссылку на текущий элемент в списке номенклатуры и открываем форму с этим параметром.\r\n</p>\r\n<p>\r\nЗатем создадим форму списка документов <code>ПриходнаяНакладная</code> и создадим реквизит формы <code>ФильтрПоТовару</code>, который мы будем использовать в качестве параметра формы при ее открытии. Теперь откроем палитру свойств основного реквизита формы <code>Список</code>. Установим флаг <code>ПроизвольныйЗапрос</code> и в строке <code>Настройка</code> списка нажмем <code>Открыть</code>.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/87/2.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nВ поле <code>Запрос</code> введем следующий текст запроса: \r\n</p>\r\n[запрос]\r\nВЫБРАТЬ\r\n    ДокументПриходнаяНакладная.Номер,\r\n    ДокументПриходнаяНакладная.Дата\r\nИЗ\r\n    Документ.ПриходнаяНакладная КАК ДокументПриходнаяНакладная\r\nГДЕ\r\n    ДокументПриходнаяНакладная.Товары.Товар = &Товар\r\n[/запрос]\r\n<p>\r\nВ запросе мы используем параметр <code>Товар</code>, в который и будет передаваться ссылка на текущую строку в списке номенклатуры, содержащуюся в параметре формы списка приходных накладных <code>ФильтрПоТовару</code>. Для этого в обработчике события формы списка <code>ПриОткрытии</code> напишем код для установки значения параметра запроса <code>Товар</code>:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ПриОткрытии(Отказ)\r\n    Список.Параметры.УстановитьЗначениеПараметра(\"Товар\", ФильтрПоТовару);\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nЗдесь <code>Список.Параметры</code> — это список параметров запроса динамического списка для реквизита <code>Список</code>. Значение параметра <code>Товар</code> устанавливается равным значению реквизита формы <code>ФильтрПоТовару</code>.\r\n</p>\r\n<p>\r\nВ результате по нажатию кнопки <code>Приходные накладные</code> в форме списка номенклатуры мы будем получать список только тех приходных накладных, в которых присутствует номенклатура, выделенная в данный момент в списке номенклатуры.\r\n</p>','2018-04-16 13:17:24',1),(88,14,'Работа с датой и временем в Python','','','Python, Web-разработка, locale, Дата, Модуль, время, и','В Python есть два модуля для работы с датой в временем: datetime и time. Модуль datetime содержит классы date, time, datetime и timedelta. Также существует класс tzinfo, который применяется для работы с часовыми поясами.','<p>\r\nВ Python есть два модуля для работы с датой в временем: <code>datetime</code> и <code>time</code>.\r\n<p>\r\n\r\n<h2>Модуль datetime</h2>\r\n<p>\r\nМодуль <code>datetime</code> содержит классы:\r\n</p>\r\n<ul>\r\n  <li><code>datetime.date</code></li>\r\n  <li><code>datetime.time</code></li>\r\n  <li><code>datetime.datetime</code></li>\r\n  <li><code>datetime.timedelta</code></li>\r\n</ul>\r\n<p>\r\nТакже существует класс <code>tzinfo</code>, который применяется для работы с часовыми поясами.\r\n</p>\r\n\r\n<h3>Класс datetime.date</h3>\r\n<p>\r\nКласс <code>datetime.date</code> принимает три аргумента: год, месяц и день.\r\n</p>\r\n[idle]\r\n>>> import datetime\r\n>>> date = datetime.date(2017, 4, 2)\r\n>>> date.year\r\n2017\r\n>>> date.month\r\n4\r\n>>> date.day\r\n2\r\n[/idle]\r\n<p>\r\nДавайте посмотрим, какой сейчас день:\r\n</p>\r\n[idle]\r\n>>> today = datetime.date.today()\r\n>>> today.year\r\n2018\r\n>>> today.month\r\n4\r\n>>> today.day\r\n21\r\n[/idle]\r\n\r\n<h3>Класс datetime.datetime</h3>\r\n<p>\r\nКласс <code>datetime.datetime</code> принимает аргументы: год, месяц, день, час, минута, секунда и микросекунда.\r\n</p>\r\n[idle]\r\n>>> date_time = datetime.datetime(2017, 4, 21, 13, 30, 10)\r\n>>> date_time.year\r\n2017\r\n>>> date_time.month\r\n4\r\n>>> date_time.day\r\n21\r\n>>> date_time.hour\r\n13\r\n>>> date_time.minute\r\n30\r\n>>> date_time.second\r\n10\r\n[/idle]\r\n<p>\r\nДавайте посмотрим, какое сейчас время:\r\n</p>\r\n[idle]\r\n>>> today = datetime.datetime.today()\r\n>>> today\r\ndatetime.datetime(2018, 4, 21, 12, 43, 27, 786725)\r\n>>> today.hour\r\n12\r\n>>> today.minute\r\n43\r\n[/idle]\r\n[idle]\r\n>>> datetime.datetime.now() # местное время\r\ndatetime.datetime(2018, 4, 24, 13, 2, 39, 17479)\r\n>>> datetime.datetime.utcnow() # время по Гринвичу\r\ndatetime.datetime(2018, 4, 24, 10, 2, 47, 46330)\r\n[/idle]\r\n<p>\r\nПолучить из объекта <code>datetime</code> отдельно дату и отдельно время:\r\n</p>\r\n[idle]\r\n>>> today = datetime.datetime.today()\r\n>>> today\r\ndatetime.datetime(2018, 4, 21, 13, 26, 54, 387462)\r\n>>> today.date() # отдельно дата\r\ndatetime.date(2018, 4, 21)\r\n>>> today.time() # отдельно время\r\ndatetime.time(13, 26, 54, 387462)\r\n[/idle]\r\n<p>\r\nКлассы <code>datetime.date</code> и <code>datetime.datetime</code> содержат метод <code>strftime()</code>, который позволяет создавать строку, отображающую время в более понятной для человека форме.\r\n</p>\r\n[idle]\r\n>>> today = datetime.date.today().strftime(\"%d.%m.%Y\")\r\n>>> today\r\n\'21.04.2018\'\r\n[/idle]\r\n[idle]\r\n>>> import locale\r\n>>> locale.setlocale(locale.LC_ALL, \"ru\") # задаем локаль для вывода даты на русском языке\r\n\'ru\'\r\n>>> today = datetime.datetime.today().strftime(\"%A, %d.%m.%Y\")\r\n>>> today\r\n\'суббота, 21.04.2018\'\r\n[/idle]\r\n\r\n<table class=\"data-table\">\r\n<tr>\r\n    <td><code>%a</code></td>\r\n    <td>Сокращенное название дня недели</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%A</code></td>\r\n    <td>Полное название дня недели</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%b</code></td>\r\n    <td>Сокращенное название месяца</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%B</code></td>\r\n    <td>Полное название месяца</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%c</code></td>\r\n    <td>Дата и время</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%d</code></td>\r\n    <td>День месяца [01,31]</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%H</code></td>\r\n    <td>24-часовой формат часа [00,23]</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%I</code></td>\r\n    <td>12-часовой формат часа [01,12]</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%j</code></td>\r\n    <td>День года. Цифровой формат [001,366]</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%m</code></td>\r\n    <td>Номер месяца. Цифровой формат [01,12]</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%M</code></td>\r\n    <td>Минута. Цифровой формат [00,59]</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%p</code></td>\r\n    <td>До полудня или после (AM или PM)</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%S</code></td>\r\n    <td>Секунда. Цифровой формат [00,61]</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%U</code></td>\r\n    <td>Номер недели в году. Цифровой формат [00,53] (с воскресенья)</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%w</code></td>\r\n    <td>День недели. Цифровой формат [0(воскресенье), 6]</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%W</code></td>\r\n    <td>Номер недели в году. Цифровой формат [00,53] (с понедельника)</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%x</code></td>\r\n    <td>Дата</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%X</code></td>\r\n    <td>Время</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%y</code></td>\r\n    <td>Год без века. Цифровой формат [00,99]</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%Y</code></td>\r\n    <td>Год с веком. Цифровой формат</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%Z</code></td>\r\n    <td>Временная зона</td>\r\n</tr>\r\n<tr>\r\n    <td><code>%%</code></td>\r\n    <td>Знак процента</td>\r\n</tr>\r\n</table>\r\n\r\n<p>Методы класса <code>datetime</code>:</p>\r\n<ul>\r\n  <li><code>datetime.today()</code> — объект <code>datetime</code> из текущей даты и времени; работает также, как и <code>datetime.now()</code> со значением <code>tz=None</code>.</li>\r\n  <li><code>datetime.now(tz=None)</code> — объект <code>datetime</code> из текущей даты и времени, местное время.</li>\r\n  <li><code>datetime.utcnow()</code> — объект <code>datetime</code> из текущей даты и времени, по Гринвичу.</li>\r\n  <li><code>datetime.fromtimestamp(timestamp)</code> — дата из стандартного представления времени.</li>\r\n  <li><code>datetime.fromordinal(ordinal)</code> — дата из числа, представляющего собой количество дней, прошедших с 01.01.1970.</li>\r\n  <li><code>datetime.combine(date, time)</code> — объект <code>datetime</code> из комбинации объектов <code>date</code> и <code>time</code>.</li>\r\n  <li><code>datetime.strptime(date_string, format)</code> — преобразует строку в <code>datetime</code> (так же, как и функция <code>strptime</code> из модуля <code>time</code>).</li>\r\n  <li><code>datetime.strftime(format)</code> — преобразует объект <code>datetime</code> в строку согласно формату.</li>\r\n  <li><code>datetime.date()</code> — объект даты (с отсечением времени).</li>\r\n  <li><code>datetime.time()</code> — объект времени (с отсечением даты).</li>\r\n  <li><code>datetime.replace([year[, month[, day[, hour[, minute[, second[, microsecond[, tzinfo]]]]]]]])</code> — возвращает новый объект <code>datetime</code> с изменёнными атрибутами.</li>\r\n  <li><code>datetime.timetuple()</code> — возвращает <code>struct_time</code> из <code>datetime</code>.</li>\r\n  <li><code>datetime.toordinal()</code> — количество дней, прошедших с 01.01.1970.</li>\r\n  <li><code>datetime.timestamp()</code> — возвращает время в секундах с начала эпохи Unix.</li>\r\n  <li><code>datetime.weekday()</code> — день недели в виде числа, понедельник — 0, воскресенье — 6.</li>\r\n  <li><code>datetime.isoweekday()</code> — день недели в виде числа, понедельник — 1, воскресенье — 7.</li>\r\n  <li><code>datetime.isocalendar()</code> — кортеж (год в формате ISO, ISO номер недели, ISO день недели).</li>\r\n  <li><code>datetime.isoformat(sep=\'T\')</code> — красивая строка вида <code>YYYY-MM-DDTHH:MM:SS.mmmmmm</code> или, если <code>microsecond == 0</code>, <code>YYYY-MM-DDTHH:MM:SS</code></li>\r\n  <li><code>datetime.ctime()</code> — возвращает строковое представление текущего местного времени.</li>\r\n</ul>\r\n\r\n<h3>Класс datetime.timedelta</h3>\r\n<p>\r\nКласс <code>datetime.timedelta</code> позволяет выполнять операции над датами — складывать, вычитать, сравнивать. Конструктор принимает именованные аргументы <code>days</code>, <code>weeks</code>, <code>hours</code>, <code>minutes</code>, <code>seconds</code>, <code>milliseconds</code>, <code>microseconds</code>:\r\n</p>\r\n[idle]\r\n>>> delta = datetime.timedelta(days = 5, hours = 1, minutes = 1)\r\n>>> delta\r\ndatetime.timedelta(5, 3660)\r\n[/idle]\r\n<p>\r\nИнтервал времени 5 дней, 1 час и 1 минута. Получить результат можно с помощью атрибутов <code>days</code>, <code>seconds</code> и <code>microseconds</code> (5 дней и 3660 секунд):\r\n</p>\r\n[idle]\r\n>>> delta.days\r\n5\r\n>>> delta.seconds\r\n3660\r\n[/idle]\r\n<p>\r\nПолучить результат в секундах позволяет метод <code>total_seconds()</code>:\r\n</p>\r\n[idle]\r\n>>> today = datetime.datetime.today() # текущая дата\r\n>>> today\r\ndatetime.datetime(2018, 4, 21, 15, 19, 2, 515432)\r\n>>> future = datetime.datetime(2019, 4, 21, 15, 19, 2, 515432) # дата на один год больше\r\n>>> delta = future - today\r\n>>> delta\r\ndatetime.timedelta(365)\r\n>>> delta.total_seconds() # 365 дней в секундах\r\n31536000.0\r\n[/idle]\r\n<p>\r\nПрибавить к текущей дате 10 дней, 10 часов и 10 минут:\r\n</p>\r\n[idle]\r\n>>> today = datetime.datetime.today()\r\n>>> delta = datetime.timedelta(days = 10, hours = 10, minutes = 10)\r\n>>> future = today + delta\r\n>>> today # 21 апреля 2018 года, 15:29\r\ndatetime.datetime(2018, 4, 21, 15, 29, 29, 265954)\r\n>>> future # 2 мая 2018 года, 01:39\r\ndatetime.datetime(2018, 5, 2, 1, 39, 29, 265954)\r\n[/idle]\r\n\r\n<h2>Модуль time</h2>\r\n<p>\r\nМодуль основан на «эпохе Unix», которая началась 1 января 1970 года:\r\n</p>\r\n[idle]\r\n>>> import time\r\n>>> print(time.gmtime(0))\r\ntime.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)\r\n[/idle]\r\n<p>\r\n<strong>Функция</strong> <code>time.time()</code> возвращает время в секундах  по Гринвичу, начиная с эпохи Unix, как число с плавающей запятой:\r\n</p>\r\n[idle]\r\n>>> time.time()\r\n1524561056.103065\r\n[/idle]\r\n<p>\r\n<strong>Функция</strong> <code>time.ctime([сек])</code> преобразует время, выраженное в секундах с начала эпохи Unix, в строку вида «Tue Apr 24 10:36:06 2018»:\r\n</p>\r\n[idle]\r\n>>> print(time.ctime())\r\nTue Apr 24 10:36:06 2018\r\n[/idle]\r\n<p>\r\n<strong>Функция</strong> <code>time.gmtime([сек])</code> возвращает время по Гринвичу как объект <code>struct_time</code>\r\n</p>\r\n[idle]\r\n>>> time.gmtime()\r\ntime.struct_time(tm_year=2018, tm_mon=4, tm_mday=24, tm_hour=9, tm_min=6, tm_sec=29, tm_wday=1, tm_yday=114, tm_isdst=0)\r\n[/idle]\r\n<p>\r\n<strong>Функция</strong> <code>time.localtime([сек])</code>  возвращает местное время (с учетом часового пояса) как объект <code>struct_time</code>\r\n</p>\r\n[idle]\r\n>>> time.localtime()\r\ntime.struct_time(tm_year=2018, tm_mon=4, tm_mday=24, tm_hour=12, tm_min=6, tm_sec=51, tm_wday=1, tm_yday=114, tm_isdst=0)\r\n[/idle]\r\n<p>\r\n<strong>Свойство</strong> <code>time.altzone</code> показывает смещение часового пояса в секундах к западу от нулевого меридиана. Если часовой пояс находится восточнее, смещение отрицательно:\r\n</p>\r\n[idle]\r\n>>> time.altzone\r\n-14400\r\n[/idle]\r\n<p>\r\n<strong>Функция</strong> <code>time.sleep()</code> приостановливает выполнение скрипта на определенное количество секунд.\r\n</p>\r\n\r\n<p>Свойства и методы класса <code>time</code><p>\r\n<ul>\r\n  <li><code>time.altzone</code> — смещение часового пояса в секундах от нулевого меридиана.</li>\r\n  <li><code>time.time()</code> — возвращает текущее время в секундах по Гринвичу, прошедшее с начала эпохи Unix.</li>\r\n  <li><code>time.asctime([time_tuple])</code> — возвращает строкове представление переданной либо текущей даты.</li>\r\n  <li><code>time.ctime([сек])</code> — возвращает строковое представление текущего местного времени.</li>\r\n  <li><code>time.gmtime([сек])</code> — возвращает объект <code>struct_time</code>, текущего или переданного времени по Гринвичу.</li>\r\n  <li><code>time.localtime([сек])</code> — возвращает объект <code>struct_time</code>, текущего или переданного времени. Представляющий местное время с начала эпохи Unix.</li>\r\n  <li><code>time.mktime(time_tuple)</code> — преобразует кортеж или объект <code>struct_time</code> во время в секундах.</li>\r\n  <li><code>time.sleep(сек)</code> — приостановить выполнение программы на заданное количество секунд.</li>\r\n  <li><code>time.strftime(формат, [time_tuple])</code> — преобразует кортеж или <code>struct_time</code> в строку по формату.</li>\r\n</ul>\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"http://www.ilnurgi1.ru/docs/python/modules/time.html\">Модуль time()</a></li>\r\n</ul>','2018-04-19 13:52:04',1),(89,9,'Команда wait','','','Bash, CLI, Linux, wait, Команда, Переменная','Если перенести команду на выполнение в фоновый режим, она будет выполняться в подоболочке независимо от текущей оболочки. Но иногда требуется подождать завершения фонового процесса, прежде чем продолжить работу. Именно для этого предназначена команда wait.','<p>\r\nЕсли перенести команду на выполнение в фоновый режим, она будет выполняться в подоболочке независимо от текущей оболочки. Но иногда требуется подождать завершения фонового процесса (называемого также <em>порожденным</em>, поскольку он порожден <em>родительским</em> процессом в текущей оболочке), прежде чем продолжить работу. Например, крупное задание по сортировке данных может быть отправлено на выполнение в фоновый режим, а для доступа к отсортированным данным придется ждать завершения этого задания. Именно для этого предназначена команда <code>wait</code>:\r\n</p>\r\n[code]\r\nwait [grn][идентификатор_процесса][/grn]\r\n[/code]\r\n<p>\r\nЕсли идентификатор процесса не указан, оболочка ждет завершения всех порожденных процессов. В этом случае выполнение текущей оболочки будет приостановлено до тех пор, пока не завершится ожидаемый процесс или ряд процессов.\r\n</p>\r\n<div class=\"note\">\r\nДействие, когда какая либо команда или сама командная оболочка инициирует (порождает) новый подпроцесс, чтобы выполнить какую либо работу, называется ветвлением (forking) процесса. Новый процесс называется «дочерним» (или «потомком»), а породивший его процесс — «родительским» (или «предком»). В результате и потомок и предок продолжают исполняться одновременно — параллельно друг другу.\r\n</div>\r\n<p>\r\nПосмотрим на команду <code>wait</code> в действии:\r\n</p>\r\n[cli]\r\n$ sort big-data.txt > sorted-data.txt &\r\n[1] 3590\r\n$ date # выполнить другое задание\r\nПн апр 23 11:42:59 MSK 2018\r\n$ wait 3590 # ждем заверешения задания на сортировку\r\n[1]+    Готово    sort big-data.txt > sorted-data.txt\r\n$\r\n[/cli]\r\n<p>\r\nЕсли идентификатор процесса не указан, команда <code>wait</code> возвращает нулевой статус завершения. В противном случае, статус заверешния команды равен статусу завершения процесса, окончания которого ждали.\r\n</p>\r\n<h3>Переменная $!</h3>\r\n<p>\r\nЕсли в фоновом режиме выполняется несколько процессов и требуется подождать завершени только того процесса, который был запущен последним, то для доступа к его идентификатору можно использовать специальную переменную <code>$!</code>:\r\n</p>\r\n[cli]\r\n$ wait $!\r\n[/cli]\r\n<p>\r\nИдентификаторы процессов можно хранить в ряде промежуточных переменных для последующего доступа:\r\n</p>\r\n[cli]\r\n$ program1 &\r\n$ pid1=$!\r\n..........\r\n$ program2 &\r\n$ pid2=$!\r\n..........\r\n$ wait $pid1 # ждать завершения программы program1\r\n..........\r\n$ wait $pid2 # ждать завершения программы program2\r\n[/cli]\r\n<p>\r\nЧтобы проверить, выполняется ли запущенный процесс по-прежнему, достаточно вызвать команду <code>ps</code> с ключом <code>-p</code> и идентификатором процесса:\r\n</p>\r\n[cli]\r\n$ sort big-data.txt > sorted-data.txt &\r\n[1] 3590\r\n$ date # выполнить другое задание\r\nПн апр 23 11:42:59 MSK 2018\r\n$ ps -p 3590 # выполняется еще задание на сортировку?\r\nPID  TTY    TIME     CMD\r\n3590 pts/17 00:00:00 bash\r\n$ wait 3590 # ждем заверешения задания на сортировку\r\n[1]+    Готово    sort big-data.txt > sorted-data.txt\r\n$\r\n[/cli]','2018-04-20 12:04:15',1),(90,10,'Команда shift','','','Bash, CLI, shift, Команда, Параметр, Переменная','Команда shift позволяет смещать влево позиционные параметры. После выполнения команды предыдущее значение позиционного параметра $2 будет присвоено позиционному параметру $1, а предыдущее значение позиционного параметра $3 — позиционному параметру $2 и т.д.','<p>\r\nКоманда <code>shift</code> позволяет смещать влево позиционные параметры. После выполнения команды предыдущее значение позиционного параметра <code>$2</code> будет присвоено позиционному параметру <code>$1</code>, а предыдущее значение позиционного параметра <code>$3</code> — позиционному параметру <code>$2</code> и т.д. В то же время прежнее значение позиционного параметра <code>$1</code> будет безвозвратно утрачено.\r\n</p>\r\n<p>\r\nПри выполнении этой команды значение переменной <code>$#</code>, содержащей количество аргументов, также автоматически уменьшается на единицу:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\necho $# $*\r\nshift\r\necho $# $*\r\nshift\r\necho $# $*\r\nshift\r\necho $# $*\r\n[/bash]\r\n[cli]\r\n$ ./test-shift.sh первый второй третий\r\n3 первый второй третий\r\n2 второй третий\r\n1 третий\r\n0\r\n[/cli]\r\n[cli]\r\n$ ./test-shift.sh\r\n0\r\n0\r\n0\r\n0\r\n[/cli]\r\n<p>\r\nСмещение может быть произведено сразу на несколько позиций:\r\n</p>\r\n[code]\r\nshift 3\r\n[/code]\r\n<p>\r\nЭто дает такой же результат, как и выполнение трех команд <code>shift</code> подряд:\r\n</p>\r\n[code]\r\nshift\r\nshift\r\nshift\r\n[/code]\r\n<p>\r\nКоманда <code>shift</code> удобна для обработки переменного количества аргументов:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nwhile [ $# -ne 0 ] ; do\r\n    echo \"$1\"\r\n    shift\r\ndone\r\n[/bash]\r\n[cli]\r\n$ ./while-shift.sh первый второй третий\r\nпервый\r\nвторой\r\nтретий\r\n[/cli]','2018-04-23 14:20:20',1),(91,9,'Команды type, which, whereis, whatis и locate','','','Bash, CLI, Linux, locate, type, updatedb, whatis, whereis, which, Команда, Поиск, Файл','Команда type позволяет выяснить, содержится ли некоторая команда в системе, и определить тип данной команды. Команда также сообщает, является ли название команды действительным и где именно в системе находится эта команда.','<h3>Команда type</h3>\r\n<p>\r\nКоманда <code>type</code> позволяет выяснить, содержится ли некоторая команда в системе, и определить тип данной команды. Команда также сообщает, является ли название команды действительным и где именно в системе находится эта команда:\r\n</p>\r\n[cli]\r\n$ type echo\r\necho встроена в оболочку\r\n$ type ls\r\nls является алиасом для \'ls --color=auto\'\r\n$ type rm\r\nrm является /bin/rm\r\n$ type wc\r\nwc является /usr/bin/wc\r\n[/cli]\r\n\r\n<h3>Команда which</h3>\r\n<p>\r\nКоманда <code>which</code> выводит полный путь до команды, если она находится в пути поиска <code>$PATH</code>. Команда <code>which</code> показывает первую найденную команду в переменной <code>$PATH</code>. Если надо проверить существование нескольких совпадений, используется опция <code>-a</code>:\r\n</p>\r\n[cli]\r\n$ which echo\r\n/bin/echo\r\n$ which ls\r\n/bin/ls\r\n$ which wc\r\n/usr/bin/wc\r\n[/cli]\r\n\r\n<h3>Команда whereis</h3>\r\n<p>\r\nКоманда <code>whereis</code> позволяет найти не только исполняемые файлы, но и файлы документации и конфигурации. Выполняет поиск в ограниченном количестве каталогов, например в каталогах стандартных двоичных файлов, каталогах библиотек и в каталогах <code>man</code>.\r\n</p>\r\n[cli]\r\n$ whereis awk\r\n/usr/bin/awk /usr/share/man/man1/awk.1.gz\r\n$ whereis sed\r\n/bin/sed /usr/share/man/man1/sed.1.gz /usr/share/info/sed.info.gz\r\n[/cli]\r\n\r\n<h3>Команда whatis</h3>\r\n<p>\r\nКоманда <code>whatis</code> показывает краткую информацию о команде из ее man-страницы.\r\n</p>\r\n[cli]\r\n$ whatis rm\r\nrm (1)     - remove files or directories\r\n$ whatis awk\r\nawk (1)    - pattern scanning and text processing language\r\n[/cli]\r\n\r\n<h3>Команда locate</h3>\r\n<p>\r\nКоманда <code>locate</code> выполняет поиск по базе данных имен файлов, хранящейся в Linux. Для получения актуальных результатов, необходимо регулярно обновлять базу данных со списком имен файлов. Чаще всего ОС настроена таким образом, что обновление будет выполняться автоматически. Если обновление по умолчанию отключено, можно обновить базу данных вручную:\r\n</p>\r\n[cli]\r\n$ sudo updatedb\r\n[/cli]\r\n<p>Опции:</p>\r\n<ul>\r\n  <li><code>-q</code> — позволяет скрыть сообщения об ошибках (например, нет доступа к файлу)</li>\r\n  <li><code>-n</code> — позволяет ограничить количество возвращаемых результатов</li>\r\n  <li><code>-c</code> — позволяет узнать количество файлов, соответствующих заданному критерию поиска</li>\r\n  <li><code>-i</code> — позволяет провести поиск файлов без учета регистра</li>\r\n</ul>\r\n[cli]\r\n$ locate .php -n 10 # первые 10 файлов с расширением .php\r\n$ locate .html -i # поиск html-файлов без учета регистра\r\n[/cli]','2018-04-25 14:10:32',1),(92,11,'Коротко о CGI, FastCGI, PHP-FPM и mod_php','','','Apache, CGI, FPM, FastCGI, Nginx, PHP, SAPI, Web-разработка','Все указанные ниже механизмы являются SAPI, которые позволяют серверу взаимодействовать со сценариями, написанными на PHP. CGI это самый старый способ выполнения php-скриптов веб-сервером. Режим доступен по умолчанию, однако может быть отключён при компиляции.','<p>\r\nВсе указанные ниже механизмы являются SAPI, которые позволяют серверу взаимодействовать со сценариями, написанными на PHP.\r\n</p>\r\n<div class=\"note\">\r\nSAPI (Server Application Programming Interface) — программный интерфейс, который предназначен для встраивания интерпретатора PHP в другие приложения и отвечает за его работу (запуск, остановка, передача скриптов на исполнение, доступ к внешним данным). В частности, SAPI позволяет интерпретатору PHP работать в качестве части web-приложения (а по сути — как часть веб-сервера), получать конкретные запросы от программы-сервера и отдавать данные.\r\n</div>\r\n\r\n<h2>PHP в режиме CGI</h2>\r\n<p>\r\nPHP в режиме CGI это самый старый способ выполнения php-скриптов веб-сервером. Режим доступен по умолчанию, однако может быть отключён при компиляции. Для Apache нужен модуль <code>mod_cgi</code> (поставляется вместе с Apache). Nginx из коробки поддержки не имеет, хотя существуют дополнительные инструменты. В данный момент режим используется редко в силу малой производительности.\r\n</p>\r\n<div class=\"note\">\r\n<p>\r\nCommon Gateway Interface — это стандарт, который описывает, как веб-сервер должен запускать прикладные программы (скрипты), как должен передавать им параметры HTTP-запроса, как программы должны передавать результаты своей работы веб-серверу. Прикладную программу взаимодействующую с веб-сервером по протоколу CGI принято называть шлюзом, хотя более распространено название CGI-скрипт или CGI-программа.\r\n</p>\r\n<p>\r\nВ качестве CGI-программ могут использоваться программы/скрипты написанные на любых языках программирования, как на компилируемых, так и на скриптовых, и даже на shell. CGI-скрипты были популярны до того, как для веб-разработки стали преимущественно использовать PHP.\r\n</p>\r\n</div>\r\n\r\n<h2>PHP в режиме FastCGI</h2>\r\n<p>\r\nПомимо CGI режима, PHP из коробки умеет работать и в FastCGI режиме (с версии 5.3 даже в двух FastCGI режимах). Режим включается флагом при компиляции интерпретатора, флаг зависит от версии PHP.\r\n</p>\r\n<p>\r\nДля работы с Apache нужен модуль <code>mod_fcgid</code> или <code>mod_fastcgi</code>, либо связка из <code>mod_proxy_fcgi</code> + <code>php-fpm</code>. Nginx умеет работать с FastCGI приложениями из коробки, но именно для PHP дополнительно нужен PHP-FPM.\r\n</p>\r\n<p>\r\nСледует помнить, что при работе PHP в режиме FastCGI в памяти висит сам php интерпретатор, а не какой-то конкретный php-скрипт.\r\n</p>\r\n<div class=\"note\">\r\n<p>\r\nFastCGI — это дальнейшее развитие технологии CGI, является более производительным и безопасным, снимает множество ограничений CGI-программ.\r\n<p>\r\n<p>\r\nFastCGI программа работает следующим образом: программа единожды загружается в память в качестве демона (независимо от HTTP-сервера), а затем входит в цикл обработки запросов от HTTP-сервера. Один и тот же процесс обрабатывает несколько различных запросов один за другим, что отличается от работы в CGI-режиме, когда на каждый запрос создается отдельный процесс, «умирающий» после окончания обработки.\r\n</p>\r\n</div>\r\n\r\n<h2>PHP-FPM</h2>\r\n<p>\r\nFastCGI Process Manager, «Менеджер процессов FastCGI». Это альтернативная реализация FastCGI режима в PHP с несколькими дополнительными возможностями, которые обычно используются для высоконагруженных сайтов.\r\n</p>\r\n<p>\r\nИзначально PHP-FPM представлял из себя набор патчей от Андрея Нигматулина, которые устраняли ряд проблем, мешающих полноценно использовать PHP в режиме FastCGI. С версии PHP 5.3 набор патчей включён в ядро, а дополнительные возможности PHP-FPM включаются флагом при компиляции.\r\n</p>\r\n<p>\r\nPHP-FPM используется в основном в связке с Nginx, без установки Apache.\r\n</p>\r\n\r\n<h2>Модуль mod_php</h2>\r\n<p>\r\nЭто модуль для Apache, позволяющий ему выполнять php скрипты. Является наверно самым популярным и простым способом подружить Apache и PHP. Модуль не использует ни CGI, ни FastCGI. Есть свои минусы — скрипты работают под пользователем веб-сервера, невозможно использовать больше одной версии PHP.\r\n</p>','2018-04-21 11:54:11',1),(94,14,'Работа с потоками в Python','','','Python, Web-разработка, Модуль, Парсинг, Поток','Поток позволяет запустить часть длинного кода так, как если бы он был отдельной программой. Это своего рода вызов наследуемого процесса, только вместо запуска отдельной программы, происходит вызов функции. Модуль threading значительно упрощает работу с потоками и позволяет программировать запуск нескольких операций одновременно.','<p>\r\nПоток позволяет запустить часть длинного кода так, как если бы он был отдельной программой. Это своего рода вызов наследуемого процесса, только вместо запуска отдельной программы, происходит вызов функции. Модуль <code>threading</code> значительно упрощает работу с потоками и позволяет программировать запуск нескольких операций одновременно.\r\n</p>\r\n[python]\r\nimport threading, time\r\n\r\ndef wakeUp():\r\n    time.sleep(5)\r\n    print(\'Подъем!\')\r\n\r\nprint(\'Начало программы\')\r\n\r\nthread = threading.Thread(target = wakeUp)\r\nthread.start()\r\n\r\nprint(\'Конец программы\')\r\n[/python]\r\n[code]\r\nНачало программы\r\nКонец программы\r\n..........\r\nПодъем!\r\n[/code]\r\n<p>\r\nЗдесь мы определяем функцию <code>wakeUp()</code>, которая будет выполняться в новом потоке. Для этого мы создаем экземпляр класса <code>Thread</code> и передаем конструктору именованный аргумент <code>target=wakeUp</code>. Это означает, что функцией, которую мы хотим вызвать в новом потоке, является функция <code>wakeUp()</code>. Обратите внимание, что именованный аргумент записывается как <code>target=wakeUp</code>, а не как <code>target=wakeUp()</code>. Это обусловлено тем, что в качестве аргумента мы хотим передать функцию <code>wakeUp</code> как таковую, а не результат ее выполнения.\r\n</p>\r\n<p>\r\nЕсли целевая функция, которую надо выполнить в отдельном потоке, принимает аргументы, то можно передать их при вызове <code>threading.Thread()</code>. Допустим, нам надо выполнить вызов функции <code>print()</code> в отдельном потоке:\r\n</p>\r\n[idle]\r\n>>> print(\'Cats\', \'Dogs\', sep = \' & \')\r\nCats & Dogs\r\n[/idle]\r\n<p>\r\nВ вызове используются два обычных аргумента и один именованный. Обычные аргументы могут быть переданы в виде списка именованному аргументу <code>args</code>, а именованный аргумент в виде словаря — именованному аргументу <code>kwargs</code>:\r\n</p>\r\n[python]\r\nthread = threading.Thread(target = print, args = [\'Cats\', \'Dogs\'], kwargs = {\'sep\':\' & \'})\r\nthread.start()\r\n[/python]\r\n<p>\r\nПример парсинга сайта с использованием потоков:\r\n</p>\r\n[python]\r\n# Скачивает фотографии товаров каталога с сайта http://www.tinko.info/ и\r\n# сохраняет их в директорию под именами, совпадающими с артикулом товара\r\n\r\nimport requests, bs4, re, os, threading\r\n\r\ndef getImages(url):\r\n    \"\"\"\r\n    Функция получает на вход URL страницы списка товаров, скачивает\r\n    эту страницу, извлекает из нее ссылки на страницы товаров, и уже\r\n    со страниц товаров скачивает фотографии\r\n    \"\"\"\r\n    res = requests.get(url)\r\n    soup = bs4.BeautifulSoup(res.text, \"html.parser\")\r\n    # получаем ссылки на страницы товаров\r\n    items = soup.select(\'.product-list-heading > h2 > a\')\r\n    # получаем в цикле страницы товаров и извлекаем\r\n    # из них фотографии\r\n    for item in items:\r\n        # получаем страницу товара\r\n        href = item.attrs[\'href\']\r\n        res = requests.get(href)\r\n        # ищем URL фото и артикул товара\r\n        soup = bs4.BeautifulSoup(res.text, \"html.parser\")\r\n        imageURL = soup.select(\'.product-item-image > a\')[0].attrs[\'href\']\r\n        # к сожалению, в BeautifulSoup пока еще не реализована в полной\r\n        # мере поддержка псевдо-классов, пришлось поставить костыль и\r\n        # удалять лишнее с помощью регулярных выражений\r\n        # code = soup.select(\'.product-item-info > div:nth-child(2) > span:last-child\')[0].getText()\r\n        temp = soup.select(\'.product-item-info > div\')[1].getText()\r\n        code = re.sub(\'[^0-9]\', \'\', temp)\r\n        # URL фотографии и артикул товара у нас есть, сохраняем фото\r\n        image = requests.get(imageURL)\r\n        with open(code + \'.jpg\', \'wb\') as f:\r\n            f.write(image.content)\r\n\r\nos.chdir(\'C:\\\\example\\\\images\')\r\n\r\n# получаем главную страницу сайта www.tinko.info\r\nres = requests.get(\'http://www.tinko.info/\')\r\nhtml = res.text\r\n\r\n# извлекаем из нее ссылки на корневые разделы каталога\r\nsoup = bs4.BeautifulSoup(html, \"html.parser\")\r\nitems = soup.select(\'#catalog-menu > ul > li > div > a\')\r\n\r\n# получаем в цикле страницы корневых разделов каталога\r\n# и выясняем, сколько страниц товаров содержит каждая\r\npages = {}\r\nfor item in items:\r\n    href = item.attrs[\'href\']\r\n    # получаем страницу корневого раздела каталога\r\n    res = requests.get(href)\r\n    # извлекаем номер последней страницы списка товаров\r\n    soup = bs4.BeautifulSoup(res.text, \"html.parser\")\r\n    url = soup.select(\'.pager > li > a.last-page\')[0]\r\n    page = re.search(\'(?<=/)\\d+$\', url.attrs[\'href\']).group()\r\n    # помещаем данные в словарь для дальнейшего использования\r\n    pages[href] = page\r\n\r\n# смотрим, что получилось\r\nprint(pages)\r\n\r\n# теперь для каждого корневого раздела каталога надо\r\n# получить все страницы списка товаров с первой по\r\n# последнюю и на каждой странице получить URL страниц\r\n# товара; и уже с этих страниц скачать фото товара\r\nthreads = []\r\nfor root, last in pages.items():\r\n    for num in range(1, int(last) + 1):\r\n        # получаем очередную страницу списка товаров\r\n        url = root\r\n        if (num > 1):\r\n            url = url + \'/page/\' + str(num)\r\n        print(\'Скачиваем фото товаров со страницы \' + url)\r\n        # запускаем скачивание изображений в отдельных потоках\r\n        thread = threading.Thread(target = getImages, args = [url])\r\n        threads.append(thread)\r\n        thread.start()\r\n\r\nfor thread in threads:\r\n    thread.join()\r\nprint(\'Готово!\')\r\n[/python]\r\n[code]\r\n{\'http://www.tinko.info/catalog/category/3\': \'438\', \'http://www.tinko.info/catalog/category/185\': \'421\', \r\n\'http://www.tinko.info/catalog/category/651\': \'269\', \'http://www.tinko.info/catalog/category/806\': \'110\',\r\n\'http://www.tinko.info/catalog/category/883\': \'125\', \'http://www.tinko.info/catalog/category/1898\': \'80\',\r\n\'http://www.tinko.info/catalog/category/1081\': \'32\', \'http://www.tinko.info/catalog/category/1004\': \'97\',\r\n\'http://www.tinko.info/catalog/category/1909\': \'144\', \'http://www.tinko.info/catalog/category/1911\': \'37\',\r\n\'http://www.tinko.info/catalog/category/1936\': \'214\', \'http://www.tinko.info/catalog/category/1948\': \'217\'}\r\nСкачиваем фото товаров со страницы http://www.tinko.info/catalog/category/3\r\nСкачиваем фото товаров со страницы http://www.tinko.info/catalog/category/3/page/2\r\nСкачиваем фото товаров со страницы http://www.tinko.info/catalog/category/3/page/3\r\n..........\r\n[/code]\r\n<p>\r\nЕсли у нас есть некоторый код, выполнение которого возможно только после завершения дочернего потока, можно использовать метод <code>join()</code> объекта <code>Thread</code>. Поток, который вызывает этот метод, приостанавливается, ожидая завершения потока, чей метод <code>join()</code> был вызван.\r\n</p>\r\n<p>\r\nВ рассмотренном выше примере парсинга сайта, есть такой код:\r\n</p>\r\n[python]\r\nfor thread in threads:\r\n    thread.join()\r\nprint(\'Готово!\')\r\n[/python]\r\n<p>\r\nСписок <code>threads</code> содержит объекты всех дочерних потоков, запущенных основным потоком программы. Строка <code>\'Готово!\'</code> не будет выведена до тех пор, пока не будет выполнен возврат из всех вызовов <code>join()</code>.\r\n</p>','2018-04-26 10:51:46',1),(95,7,'Свойства ТекущиеДанные и ТекущаяСтрока','','','1С:Предприятие, ТекущаяСтрока, ТекущиеДанные, УправляемаяФорма','Табличное поле предоставляет свойства ТекущиеДанные и ТекущаяСтрока. Отличие между этими свойствами состоит в том, что свойство ТекущиеДанные содержит значения считанных данных текущей строки табличного поля, а свойство ТекущаяСтрока содержит значение, идентифицирующее строку.','<p>\r\nТабличное поле предоставляет свойства <code>ТекущиеДанные</code> и <code>ТекущаяСтрока</code>. Отличие между этими свойствами состоит в том, что свойство <code>ТекущиеДанные</code> содержит значения считанных данных текущей строки табличного поля, а свойство <code>ТекущаяСтрока</code> содержит значение, идентифицирующее строку.\r\n</p>\r\n<p>\r\nСледует отметить, что свойство <code>ТекущиеДанные</code> содержит  коллекцию значений текущей строки, соответствующую коллекции колонок отображаемого динамического списка, при этом если нужного поля нет в текущих данных, то его можно добавить в коллекцию полей списка используя метод <code>Добавить()</code> коллекции колонок списка.\r\n</p>\r\n<p>\r\nСвойство <code>ТекущиеДанные</code> предназначено для получения значений колонок текущей строки, а свойство <code>ТекущаяСтрока</code> для получения и установки текущей строки табличного поля.\r\n</p>\r\n<p>\r\nСледует понимать, что для объектных данных (Справочник, Документ и т.д.) в качестве значения свойства <code>ТекущаяСтрока</code> используется ссылка на объект базы данных. Соответственно при обращении к свойствам этого значения будет выполняться считывание объекта базы данных.\r\n</p>\r\n<p>\r\nТипичной ошибкой является обращение к данным строки с использованием свойства <code>ТекущаяСтрока</code>. В этом случае будет выполняться считывание данных объекта из базы данных, что может существенно снизить производительность работы табличного поля. Например, приведенный ниже фрагмент текста программы является неэффективным:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура СправочникСписокПриАктивизацииСтроки(Элемент)\r\n    Сообщить(\"Цена = \" + ЭлементыФормы.СправочникСписок.ТекущаяСтрока.Цена);\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nРекомендуется для обращения к данным объекта использовать свойство <code>ТекущиеДанные</code>. Правильный фрагмент приведен ниже:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура СправочникСписокПриАктивизацииСтроки(Элемент)\r\n    Cообщить(\"Цена = \" + ЭлементыФормы.СправочникСписок.ТекущиеДанные.Цена);\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nЕсли есть идентификатор текущей строки (т.е. свойство <code>ТекущаяСтрока</code>), можно получить <code>ТекущиеДанные</code>. И наоборот:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ПолучитьТекущиеДанныеПоИдентификатору()\r\n	// Получаем идентификатор текущей строки\r\n	ИдентификаторТекущейСтроки = ЭлементыФормы.СправочникСписок.ТекущаяСтрока;\r\n	// Получаем данные по идентификатору строки\r\n	ДанныеТекущейСтроки = Элементы.Материалы.ДанныеСтроки(ИдентификаторТекущейСтроки);\r\nКонецПроцедуры\r\n[/язык]\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ПолучитьИдентификаторТекущихДанных()\r\n	// Получаем данные текущей строки\r\n	ДанныеТекущейСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;\r\n	// Получаем идентификатор текущих данных\r\n	ИдентификаторТекущейСтроки = ДанныеТекущейСтроки.ПолучитьИдентификатор();\r\nКонецПроцедуры\r\n[/язык]','2018-05-05 15:06:16',1),(96,10,'Команда trap','','','Bash, CLI, SIGCONT, SIGHUP, SIGINT, SIGKILL, SIGQUIT, SIGSTOP, SIGTERM, SIGTSTP, trap, Команда, Сигнал','Команда trap работает довольно просто — при возникновении сигнала будет выполнено указанное действие. Если действие простое (цепочка команд, умещающаяся на одной строке), его можно указать прямо в аргументе trap. Если не очень простое, то надо объявить функцию и поместить вызов этой функции в trap.','<p>\r\nСигналы — это числовые сообщения, которые посылаются запущенным приложениям операционной системой, другими приложениями или пользователем. Сигналы, как правило, ожидают от приложения какой-то определённой реакции, например «корректно завершить работу», «приостановить работу» или «умри!».\r\n</p>\r\n<p>\r\nОбычно для отправки сигналов приложениям используется программа <code>kill</code>, но некоторые сигналы можно отправлять и при помощи клавиатурных комбинаций, например <code>Ctrl+C</code> или <code>Ctrl+Z</code>.\r\n</p>\r\n<p>\r\nСигналы обрабатываются «каскадно». То есть, сигнал отправляется приложению и, если приложение не обработало поступивший сигнал, то он возвращается обратно оболочке или операционной системе. Некоторые типы сигналов в принципе не могут обрабатываться приложениями. Например, сигнал <code>SIGKILL</code> вообще не доставляется приложению, а перехватывается операционной системой, которая немедленно завершает работу приложения, которому сигнал был адресован.\r\n</p>\r\n<p>\r\nМогут быть ситуации, когда нежелательно, чтобы пользователи прерывали работу сценария, например с помощью <code>Ctrl+C</code>. Поскольку нужно освободить входной поток или удалить временные файлы. Команда <code>trap</code> позволяет перехватить сигнал до того, как он удалит процесс и выполнить некоторое дополнительное или альтернативное действие.\r\n</p>\r\n[code]\r\ntrap [red]действие[/red] [grn]сигнал(ы)[/grn]\r\n[/code]\r\n<p>\r\nКоманда <code>trap</code> работает довольно просто — при возникновении сигнала будет выполнено указанное действие. Если действие простое (цепочка команд, умещающаяся на одной строке), его можно указать прямо в аргументе <code>trap</code>. Если не очень простое, то надо объявить функцию и поместить вызов этой функции в <code>trap</code>.\r\n</p>\r\n<p>\r\nЕсли действие по умолчанию для сигнала было изменено с помощью <code>trap</code>, его можно восстановить с помощью все той же команды <code>trap</code> — надо опустить первый аргумент или заменить его дефисом:\r\n</p>\r\n[code]\r\ntrap [grn]сигнал(ы)[/grn]\r\n[/code]\r\n[code]\r\ntrap [red]-[/red] [grn]сигнал(ы)[/grn]\r\n[/code]\r\n<p>\r\nДля игнорирования сигналов команде <code>trap</code> надо передать пустую строку в качестве первого аргумента. Скрипт ниже можно прервать только смертоносным сигналом <code>SIGKILL</code>:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\ntrap \'\' SIGHUP SIGINT SIGQUIT SIGTERM\r\nsleep 60\r\n[/bash]\r\n<p>\r\nВызов <code>trap</code> без аргументов напечатает все установленные обработчики сигналов, это полезно при отладке.\r\n</p>\r\n<h2>Сигналы</h2>\r\n<ul>\r\n    <li><strong>Сигнал SIGHUP (номер 1)</strong> изначально был предназначен для того, чтобы информировать программу о потере связи с управляющим терминалом. Этот сигнал посылается процессам и в случае закрытия  виртуальных терминалов, которые используются на современных системах вместо аппаратных терминалов. Обычным действием по умолчанию для <code>SIGHUP</code> является завершение процесса.</li>\r\n    <li><strong>Сигнал SIGINT (номер 2)</strong> посылается процессу, если пользователь терминала дал команду прервать процесс (обычно это сочетание клавиш <code>Ctrl+C</code>).</li>\r\n    <li><strong>Сигнал SIGQUIT (номер 3)</strong> посылается процессу, если пользователь терминала дал команду остановить процесс комбинацией «quit» (обычно это сочетание клавиш <code>Ctrl+\\</code>). Этот сигнал также указывает, что система должна выполнить дамп памяти для процесса.</li>\r\n    <li><strong>Сигнал SIGKILL (номер 9)</strong> завершает работу программы. Программа не может ни обработать, ни игнорировать этот сигнал.</li>\r\n    <li><strong>Сигнал SIGTERM (номер 15)</strong> вызывает «вежливое» завершение программы. Получив этот сигнал, программа может выполнить необходимые перед завершением операции (например, высвободить занятые ресурсы). Получение <code>SIGTERM</code> свидетельствует не об ошибке в программе, а о желании ОС или пользователя завершить ее.</li>\r\n    <li><strong>Сигнал SIGCONT (номер 18)</strong> возобновляет выполнение процесса, остановленного сигналом <code>SIGSTOP</code> или сигналом <code>SIGTSTP</code>.</li>\r\n    <li><strong>Сигнал SIGSTOP (номер 19)</strong> приостанавливает выполнение процесса. Как и <code>SIGKILL</code>, этот сигнал невозможно перехватить или игнорировать.</li>\r\n    <li><strong>Сигнал SIGTSTP (номер 20)</strong> приостанавливает процесс по команде пользователя (обычно это сочетание клавиш <code>Ctrl+Z</code>). Для возобновления выполнения используется сигнал <code>SIGCONT</code>.</li>\r\n</ul>\r\n\r\n<h2>Примеры</h2>\r\n<p>\r\nСценарий будет выполняться до тех пор, пока не получит сигнал <code>SIGINT</code> (нажатие <code>Ctrl+C</code>):\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\ncount=0\r\ntrap \'echo \"Получен сигнал SIGINT (нажатие Ctrl+C), завершение сценария\"; exit 1\' SIGINT\r\nwhile true ; do\r\n    sleep 1\r\n    (( count++ ))\r\n    echo $count\r\ndone\r\n[/bash]\r\n<p>\r\nУдаление временного файла с помощью функции, которая передается в качестве первого аргумента команде <code>trap</code>:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\n\r\ncleanup() {\r\n    rm $TEMP_FILE\r\n    exit $?\r\n}\r\n\r\nTEMP_FILE=/tmp/tempfile.$$.$RANDOM\r\ntrap cleanup SIGHUP SIGINT SIGQUIT SIGTERM\r\n\r\n# Делаем что-то...\r\n[/bash]','2018-05-06 11:56:57',1),(97,7,'Организация подборов в табличную часть документа','','','1С:Предприятие, Владелец, ОбработкаВыбора, ОповеститьОВыборе, ОткрытьФорму, УправляемаяФорма','Для иллюстрации механизма подбора информации в форме будем использовать задачу подбора элементов справочника Номенклатура в табличную часть документа ПриходнаяНакладная как наиболее распространенную. Поскольку механизм подбора реализован на уровне форм, то в других случаях просто будут задействованы иные прикладные объекты.','<p>\r\nДля иллюстрации механизма подбора информации в форме будем использовать задачу подбора элементов справочника <code>Номенклатура</code> в табличную часть документа <code>ПриходнаяНакладная</code> как наиболее распространенную. Поскольку механизм подбора реализован на уровне форм, то в других случаях просто будут задействованы иные прикладные объекты. Сама механика подбора не изменится.\r\n</p>\r\n<p>\r\nДля организации подбора в форму документа следует открыть форму справочника как подчиненную форме документа в целом либо одному из элементов формы. Способ получения формы справочника может быть любым, также как и сама форма справочника, которая будет использована. Важно лишь то, что эта форма должна быть открыта как подчиненная.\r\n</p>\r\n<p>\r\nРезультат подбора будет доступен в обработчике события <code>ОбработкаВыбора</code> формы документа или элемента формы (в зависимости от того, чему мы подчиним форму справочника при открытии). Событие <code>ОбработкаВыбора</code> в форме документа будет вызвано в двух случаях:\r\n</p>\r\n<ul>\r\n  <li>когда в форме справочника будет выполнен интерактивный выбор;</li>\r\n  <li>когда в форме справочника будет вызван метод <code>ОповеститьОВыборе</code>.</li>\r\n</ul>\r\n\r\n<h2>Одиночный подбор</h2>\r\n<p>\r\nПри одиночном подборе форма справочника будет закрываться сразу после выбора элемента. Для выбора следующего элемента необходимо будет снова инициировать подбор.\r\n</p>\r\n<p>\r\nОткроем форму документа <code>ПриходнаяНакладная</code>, создадим команду <code>Подбор</code> и назначим для нее обработчик:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ВыборОдногоЭлемента(Команда)\r\n	// Форма выбора закрывается после двойного клика\r\n	// по выбранному элементу\r\n	ОткрытьФорму(\"Справочник.Номенклатура.ФормаВыбора\",,Элементы.Материалы);\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nВ этой процедуре мы открываем форму выбора для справочника <code>Номенклатура</code>, указывая, что она подчинена таблице <code>Материалы</code> формы документа <code>ПриходнаяНакладная</code> (<code>Элементы.Материалы</code>). При выборе из формы выбора справочника выбранное значение будет передано в обработчик события <code>ОбработкаВыбора</code> таблицы формы <code>Материалы</code>, так как она является владельцем открытой формы выбора.\r\n</p>\r\n<p>\r\nПоэтому откроем палитру свойств таблицы <code>Материалы</code> и создадим обработчик события <code>ОбработкаВыбора</code>:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура МатериалыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)\r\n	Элементы.Материалы.ДобавитьСтроку();\r\n	Элементы.Материалы.ТекущиеДанные.Материал = ВыбранноеЗначение;\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nВ этой процедуре мы добавляем новую строку в таблицу <code>Материалы</code> и присваиваем колонке <code>Материал</code> в новой строке выбранное в форме выбора справочника значение. Это значение передается в обработчик события в параметре <code>ВыбранноеЗначение</code>.\r\n</p>\r\n\r\n<h2>Множественный подбор</h2>\r\n<p>\r\nПри множественном подборе форма справочника будет открыта до тех пор, пока пользователь не закроет ее интерактивно или не будет вызван метод формы <code>Закрыть()</code>.\r\n</p>\r\n<p>\r\nОбработчик команды <code>Подбор</code>:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ВыборЭлементовБезЗакрытияФормы(Команда)\r\n	// Не закрывать форму после двойного клика; можно выбрать\r\n	// несколько элементов, дважды кликая на каждом\r\n	ПараметрыФормы = Новый Структура(\"ЗакрыватьПриВыборе\", Ложь);\r\n	ОткрытьФорму(\r\n		\"Справочник.Номенклатура.ФормаВыбора\",\r\n		ПараметрыФормы,\r\n		Элементы.Материалы\r\n	);\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nОбработчик события <code>ОбработкаВыбора</code> остается без изменений.\r\n<p>\r\n\r\n<h2>Подбор с использованием множественного выбора</h2>\r\n<p>\r\nЕще одним способом организации подбора является возможность выделения в списке сразу нескольких строк. Режим множественного выделения в списке устанавливается, как правило, во всех формах списков по умолчанию. Однако возможность выбрать сразу несколько элементов из списка по умолчанию, как правило, отключена.\r\n</p>\r\n<p>\r\nПоэтому для того, чтобы в форме списка справочника Номенклатура можно было не только отметить, но и выбрать сразу несколько элементов, мы воспользуемся одним из параметров расширения формы динамического списка — <code>МножественныйВыбор</code>.\r\n</p>\r\n<p>\r\nОбработчик команды <code>Подбор</code>:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура МножественныйВыбор(Команда)\r\n	// Позволяем выделить и выбрать несколько элементов; в обработчик\r\n	// ОбработкаВыбора() передается массив элементов\r\n	ПараметрыФормы = Новый Структура(\"МножественныйВыбор\", Истина);\r\n	ОткрытьФорму(\r\n		\"Справочник.Номенклатура.ФормаВыбора\",\r\n		ПараметрыФормы,\r\n		Элементы.Материалы\r\n	);\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nОбработчик события <code>ОбработкаВыбора</code>:\r\n<p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура МатериалыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)\r\n	Для Каждого ВыбранныйЭлемент Из ВыбранноеЗначение Цикл\r\n		НоваяСтрока = Объект.Материалы.Добавить();\r\n		НоваяСтрока.Материал = ВыбранныйЭлемент;\r\n	КонецЦикла;\r\nКонецПроцедуры\r\n[/язык]\r\n\r\n<h2>Множественный подбор с использованием множественного выбора</h2>\r\n<p>\r\nПоследний способ подбора сочетает в себе оба рассмотренных ранее способа. Мы будем отмечать сразу несколько элементов справочника и подбирать их в документ без закрытия формы выбора. Затем снова отмечать несколько элементов справочника и подбирать их в документ. Для этого нам будет необходимо при открытии формы выбора установить оба параметра: <code>ЗакрыватьПриВыборе</code> и <code>МножественныйВыбор</code>.\r\n</p>\r\n<p>\r\nОбработчик команды <code>Подбор</code>:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура МножественныйВыборБезЗакрытияФормы(Команда)\r\n	// Позволяем выделить и выбрать несколько элементов несколько раз; в\r\n	// обработчик ОбработкаВыбора() передается массив элементов; после\r\n	// каждого выбора форма не закрывается\r\n	ПараметрыФормы = Новый Структура(\r\n		\"ЗакрыватьПриВыборе,МножественныйВыбор\",\r\n		Ложь,\r\n		Истина\r\n	);\r\n	ОткрытьФорму(\r\n		\"Справочник.Номенклатура.ФормаВыбора\",\r\n		ПараметрыФормы,\r\n		Элементы.Материалы\r\n	);\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nОбработчик события <code>ОбработкаВыбора</code> остается без изменений.\r\n<p>\r\n\r\n<h2>Использование метода Оповестить о выборе()</h2>\r\n<p>\r\nМетод формы <code>ОповеститьОВыборе()</code> используется в тех случаях, когда алгоритм формирования данных подбора сложен и кроме собственно выбора элемента справочника от пользователя требуется указание некоторой дополнительной информации. В этом случае метод <code>ОповеститьОВыборе()</code> вызывается тогда, когда вся необходимая информация подбора сформирована.\r\n</p>\r\n<p>\r\nМетод <code>ОповеститьОВыборе()</code> посылает оповещение владельцу формы о выполнении выбора или подбора, передает ему выбранное значение и закрывает форму, если она открыта не в режиме множественного\r\nвыбора.\r\n</p>\r\n<p>\r\nТакже метод <code>ОповеститьОВыборе()</code> может использоваться в тех случаях, когда требуется передать в форму документа не только выбранный элемент справочника (или массив элементов), а некоторую произвольную структуру данных.\r\n</p>\r\n\r\n<h2>Справка</h2>\r\n<h3>ТабличноеПоле.ДобавитьСтроку()</h3>\r\n[язык]\r\nТабличноеПоле.ДобавитьСтроку()\r\n[/язык]\r\n<p>\r\nДобавляет строку в табличное поле, аналогично выполнению команды «Добавить».\r\n</p>\r\n<ul>\r\n  <li>Если табличное поле связано с таблицей или деревом значений, метод добавляет строку в таблицу или дерево значений (аналогично соответствующим методам этих объектов).</li>\r\n  <li>Если табличное поле связано со списком объектов, хранимых в базе данных, метод начинает редактирование нового объекта этого списка. (Например, список объектов в форме списка справочника, или документа).</li>\r\n  <li>Если табличное поле связано с набором записей или табличной частью, то метод начинает редактирование новой записи. (Например, список записей в форме списка регистра сведений; табличная часть документа или справочника).</li>\r\n</ul>\r\n<p>\r\nДоступность: Толстый клиент.\r\n</p>\r\n\r\n<h3>ДанныеФормыКоллекция.Добавить()</h3>\r\n[язык]\r\nДанныеФормыКоллекция.Добавить()\r\n[/язык]\r\n<p>\r\nДобавляет элемент в конец коллекции и возвращает его в качестве результата метода. Возвращаемое значение: <code>ДанныеФормыЭлементКоллекции</code>. \r\n</p>\r\n<p>\r\nДоступность: тонкий клиент, веб-клиент, сервер, толстый клиент, мобильное приложение(клиент), мобильное приложение(сервер).\r\n</p>','2018-04-24 16:30:26',1),(98,7,'Передача данных между управляемыми формами','','','1С:Предприятие, Документ, ОбработкаВыбора, ОткрытьФорму, Список, Справочник, УправляемаяФорма','Пусть у нас есть есть документ ПриходнаяНакладная с табличной частью Состав. Для этого документа необходимо реализовать подбор номенклатур в табличную часть. Должна быть возможность переносить в документ несколько номенклатур за раз.','<p>\r\nПусть у нас есть есть документ <code>ПриходнаяНакладная</code> с табличной частью <code>Состав</code>. Для этого документа необходимо реализовать подбор номенклатур в табличную часть. Должна быть возможность переносить в документ несколько номенклатур за раз. То есть сначала пользователь подбирает номенклатуры в определенную таблицу, а затем по команде «Перенести в документ» данные из этой таблицы переносятся в табличную часть документа. При переносе в табличную часть, если номенклатура уже была добавлена ранее, нужно увеличить количество в этой строке на значение, указанное в подборе.\r\n</p>\r\n<p>\r\nРассмотрим два способа решения этой задачи: без обращения к серверу и с обращением к серверу.\r\n</p>\r\n\r\n<h2>Без обращения к серверу</h2>\r\n<p>\r\nСоздадим форму списка у справочника <code>Номенклатура</code> не назначая ее основной. Добавим реквизит формы <code>ПодобранныеНоменклатуры</code> (тип <code>ТаблицаЗначений</code>) и разместим соответствующий элемент формы. Для полей динамического списка <code>ЭтоГруппа</code> и <code>Ссылка</code> установим флаг <code>ИспользоватьВсегда</code>. Чуть позже станет понятно, для чего.\r\n</p>\r\n<p>\r\nВсе действия выбора будут сводиться к добавлению строки в таблицу <code>ПодобранныеНоменклатуры</code> элементов динамического списка. Если элемент уже был добавлен в таблицу, то увеличиваем его количество. Код обработки выбора элемента списка номенклатуры:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)\r\n    // Проверка на наличие выбранной строки в динамическом списке\r\n    ТекущиеДанные = Элементы.Список.ТекущиеДанные;\r\n    Если ТекущиеДанные = Неопределено Тогда\r\n        Возврат;\r\n    КонецЕсли;       \r\n    // Для групп номенклатуры подбор не производится. Именно для обращения\r\n    // к свойству «ЭтоГруппа» был установлен флаг «Использовать всегда», иначе\r\n    // при отсутствии колонки «Это группа» в списке вылетала бы ошибка\r\n    // «Поле объекта не найдено»\r\n    Если ТекущиеДанные.ЭтоГруппа Тогда\r\n        Возврат;\r\n    КонецЕсли;\r\n    // Отключаем стандартную обработку\r\n    СтандартнаяОбработка = Ложь;\r\n    // Ищем товар в таблице ПодобранныеНоменклатуры. Если нет — добавляем\r\n    // строку, иначе увеличиваем количество\r\n    РезультатПоиска = ПодобранныеНоменклатуры.НайтиСтроки(\r\n        Новый Структура(\"Наименование\", ТекущиеДанные.Ссылка)\r\n    );\r\n    Если РезультатПоиска.Количество() = 0 Тогда\r\n        Строка = ПодобранныеНоменклатуры.Добавить();\r\n        Строка.Наименование = ТекущиеДанные.Ссылка;\r\n    Иначе\r\n        Строка = РезультатПоиска[0];\r\n    КонецЕсли;\r\n    Строка.Количество = Строка.Количество + 1;\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nФорма подбора номенклатур вызывается из формы документа <code>ПриходнаяНакладная</code> по команде <code>Подбор</code>:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура Подбор(Команда)\r\n    // Первый параметр — полное имя формы, третий параметр — элемент формы,\r\n    // в который осуществляется подбор (владелец). Последним параметром\r\n    // передается уникальный идентификатор формы.\r\n    ОткрытьФорму(\r\n        \"Справочник.Номенклатура.Форма.ФормаПодбораИзДокумента\",\r\n        ,\r\n        Элементы.Состав,\r\n        УникальныйИдентификатор\r\n    );\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nКогда в форме выбора необходимые номенклатуры подобраны, выполняется команда <code>ПеренестиКлиент</code>:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ПеренестиКлиент(Команда)\r\n    // Передаем данные выбора владельцу формы, т.е. документу ПриходнаяНакладная\r\n    ОповеститьОВыборе(ПодобранныеНоменклатуры); \r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nТеперь подобранные номенклатуры доступны в обработчике <code>ОбработкаВыбора</code> элемента формы документа:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура СоставОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)\r\n    // Заполняем таблицу документа подобранными номенклатурами\r\n    Для Каждого Строка Из ВыбранноеЗначение Цикл\r\n        РезультатПоиска = Объект.Состав.НайтиСтроки(\r\n            Новый Структура(\"Номенклатура\", Строка.Наименование)\r\n        );\r\n        Если РезультатПоиска.Количество() = 0 Тогда\r\n            НоваяСтрока = Объект.Состав.Добавить();\r\n            НоваяСтрока.Номенклатура = Строка.Наименование;\r\n        Иначе\r\n            НоваяСтрока = РезультатПоиска[0];    \r\n        КонецЕсли;\r\n        НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;\r\n    КонецЦикла;\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\n<a href=\"/files/blog/98/1.jpg\" class=\"zoom\"><img src=\"/files/blog/98/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/98/2.jpg\" class=\"zoom\"><img src=\"/files/blog/98/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<h2>С обращением к серверу</h2>\r\n<p>\r\nОтличия в реализации подбора будут в этом случае только в передаче данных в документ и, затем, обработки подобранных номенклатур в документе. Вот таким образом будет выглядеть команда передачи данных в документ из подбора:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ПеренестиСервер(Команда)\r\n    // Помещаем подобранные номенклатуры во временное хранилище на\r\n    // сервере  и получаем соответствующий адрес в нем\r\n    Адрес = ПодготовитьДанныеПодбора();\r\n    // Передаем владельцу формы данные выбора \r\n    ОповеститьОВыборе(Адрес); \r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nФункция ПодготовитьДанныеПодбора()\r\n    // Выгружаем таблицу формы в таблицу значений для корректной\r\n    // работы с данными на сервере\r\n    ТаблицаПодобранныхНоменклатур = ПодобранныеНоменклатуры.Выгрузить();\r\n    // Помещаем во временное хранилище и возвращаем адрес. Вторым параметром\r\n    // передаем уникальный идентификатор формы. После закрытия формы данные\r\n    // во временном хранилище будут очищены.\r\n    Адрес = ПоместитьВоВременноеХранилище(\r\n        ТаблицаПодобранныхНоменклатур,\r\n        УникальныйИдентификатор\r\n    );\r\n    Возврат Адрес;\r\nКонецФункции\r\n[/язык]\r\n<p>\r\nОбработчик события <code>ОбработкаВыбора</code> элемента формы документа:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура СоставОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)\r\n    // Обрабатываем выбранные номенклатуры на сервере\r\n    ОбработатьВыбранноеЗначение(ВыбранноеЗначение);\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура ОбработатьВыбранноеЗначение(ВыбранноеЗначение)\r\n    // Получаем таблицу подобранных номенклатур из хранилища\r\n    ТаблицаПодобранныхНоменклатур = ПолучитьИзВременногоХранилища(ВыбранноеЗначение);\r\n    // Заполняем таблицу документа подобранными номенклатурами\r\n    Для Каждого Строка Из ТаблицаПодобранныхНоменклатур Цикл\r\n        РезультатПоиска = Объект.Состав.НайтиСтроки(\r\n            Новый Структура(\"Номенклатура\", Строка.Наименование)\r\n        );\r\n        Если РезультатПоиска.Количество() = 0 Тогда\r\n            НоваяСтрока = Объект.Состав.Добавить();\r\n            НоваяСтрока.Номенклатура = Строка.Наименование;\r\n        Иначе\r\n            НоваяСтрока = РезультатПоиска[0];    \r\n        КонецЕсли;\r\n        НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;\r\n    КонецЦикла;    \r\nКонецПроцедуры\r\n[/язык]','2018-05-08 15:16:06',1),(99,14,'Запуск других программ из Python','','','Python, Web-разработка, Модуль, Процесс','Программа на Python может запускать другие программы с помощью функции Popen() (от process open) встроенного модуля subprocess. В качестве аргумента функция принимает имя программы, которую нужно запустить. Возвращаемое значение представляет собой объект Popen, имеющий два полезных метода: poll() и wait().','<p>\r\nПрограмма на Python может запускать другие программы с помощью функции <code>Popen()</code> (от process open) встроенного модуля subprocess. В качестве аргумента функция принимает имя программы, которую нужно запустить:\r\n</p>\r\n[idle]\r\n>>> import subprocess\r\n>>> subprocess.Popen(\'C:\\\\Windows\\\\System32\\\\calc.exe\')\r\n<subprocess.Popen object at 0x0000020B18386438>\r\n[/idle]\r\n<p>\r\nВозвращаемое значение представляет собой объект <code>Popen</code>, имеющий два полезных метода: <code>poll()</code> и <code>wait()</code>.\r\n</p>\r\n<p>\r\nМетод <code>poll()</code> возвращает значение <code>None</code>, если в момент его вызова процесс все еще выполняется. Если же процесс к этому моменту завершен, то он возвращает <em>код завершения</em> процесса. Код заверешения служит индикатором того, завершился ли процесс без ошибок (код равен нулю) или же его завершение было вызвано ошибкой (ненулевой код).\r\n</p>\r\n<p>\r\nМетод <code>wait()</code> ожидает завершения запущенного процесса, прежде чем продолжить выполнение основной программы. Возвращаемым значением метода является целочисленный код завершения процесса.\r\n</p>\r\n[idle]\r\n>>> notepad = subprocess.Popen(\'C:\\\\Windows\\\\System32\\\\notepad.exe\')\r\n>>> notepad.poll() == None\r\nTrue\r\n>>> notepad.poll() == None\r\nFalse\r\n>>> notepad.wait()\r\n0\r\n>>> notepad.poll()\r\n0\r\n[/idle]\r\n<p>\r\nСначала мы открываем процесс блокнота, затем проверяем, возвращает ли метод <code>poll()</code> значение <code>None</code>. Это означает, что процесс все еще выполняется. После этого закрываем блокнот и еще раз проверяем, возвращает ли метод <code>poll()</code> значение <code>None</code>. Теперь оба метода, <code>wait()</code> и <code>poll()</code> возвращают нулевое значение, что указывает на завершение программы <code>notepad.exe</code> без ошибок.\r\n</p>\r\n\r\n<h2>Передача аргументов командной строки</h2>\r\n<p>\r\nПроцессам, создаваемым с помощью функции <code>Popen()</code>, можно передвать аргументы командной строки. Для этого функции <code>Popen()</code> надо передать список в качестве единственного аргумента. Первой строкой в этом списке должно быть имя исполняемого файла программы, которую надо запустить. Все последующие строки — это аргументы командной строки, которые будут переданы программе при запуске.\r\n</p>\r\n[idle]\r\n>>> subprocess.Popen([\'C:\\\\Windows\\\\System32\\\\notepad.exe\', \'C:\\\\example\\\\readme.txt\'])\r\n<subprocess.Popen object at 0x0000020B18386630>\r\n[/idle]\r\n<p>\r\nЗдесь мы не только запускаем приложение <code>notepad.exe</code>, но и открываем файл <code>readme.txt</code>.\r\n</p>\r\n\r\n<h2>Открытие файлов программ по умолчанию</h2>\r\n<p>\r\nДвойной клик на иконке файла с расширением <code>.txt</code> позволяет автоматически запустить приложение, ассоциированное с этим расширением. Функция <code>Popen()</code> также может открывать файлы подобным образом:\r\n</p>\r\n[idle]\r\n>>> subprocess.Popen((\'start\', \'C:\\\\example\\\\readme.txt\'), shell = True)\r\n<subprocess.Popen object at 0x0000020B183EDE10>\r\n[/idle]\r\n<p>\r\nВ каждой операционной системе есть программа, выполняющая те же функции, что и двойной клик на иконке файла. В Windows это программа <code>start</code>, в Ubuntu Linux — программа <code>see</code>.\r\n</p>\r\n<div class=\"note\">\r\nИменованный аргумент <code>shell = True</code> нужен только для ОС Windows.\r\n</div>\r\n[python]\r\n# Таймер обратного отсчета\r\n\r\nimport time, subprocess\r\n\r\nwait = 10\r\nwhile wait > 0:\r\n    print(wait, end=\'\')\r\n    time.sleep(1)\r\n    wait = wait - 1\r\n\r\n# Воспроизведение звукового файла по завершении обратного отсчета\r\nsubprocess.Popen([\'start\', \'C:\\\\example\\alarm.wav\'], shell = True)\r\n[/python]','2018-05-07 11:09:20',1),(100,10,'Специальные переменные оболочки','','','Bash, CLI, Linux, Параметр, Переменная','$1...$9 — это так называемые позиционные параметры, служат для передачи сценарию оболочки аргументов командной строки. Если аргументов больше 9, то они должны заключаться в фигурные скобки, например ${12}. $0 — имя командной оболочки или запущенного сценария.','<ul>\r\n  <li><code>$1...$9</code> — Это так называемые позиционные параметры, служат для передачи сценарию оболочки аргументов командной строки. Если аргументов больше 9, то они должны заключаться в фигурные скобки, например <code>${12}</code>.</li>\r\n  <li><code>$0</code> — Имя командной оболочки или запущенного сценария.</li>\r\n  <li><code>$#</code> — Количество позиционных параметров, переданных сценарию.</li>\r\n  <li><code>$*</code> — Позиционные параметры, начиная с первого. Когда <code>$*</code> указывается в двойных кавычках, значение переменной заменяется одним словом, содержащим значения каждого параметра, разделенных первым символом специальной переменной <code>IFS</code>.</li>\r\n  <li><code>$@</code> — Позиционные параметры, начиная с первого. Когда <code>$@</code> указывается в двойных кавычках, то каждый параметр возвращается в отдельном слове.</li>\r\n  <li><code>$?</code> — Код возврата последней команды.</li>\r\n  <li><code>$!</code> — Возвращает идентификатор процесса последней команды, выполненной в фоновом режиме.</li>\r\n  <li><code>$$</code> — Номер процесса, под которым исполняется данный сценарий, очень удобно использовать в имени временного файла, чтобы сделать его уникальным.</li>\r\n</ul>\r\n\r\n<h2>Отличие между $* и $@</h2>\r\n<p>\r\n<strong>Если не использовать кавычки</strong>, между переменными <code>$*</code> и <code>$@</code> нет разницы:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nfor param in $* ; do\r\n    echo $param\r\ndone\r\necho \'=====\'\r\nfor param in $@ ; do\r\n    echo $param\r\ndone\r\n[/bash]\r\n[cli]\r\n$ ./test.sh first second third # три позиционных параметра\r\nfirst\r\nsecond\r\nthird\r\n=====\r\nfirst\r\nsecond\r\nthird\r\n[/cli]\r\n[cli]\r\n$ ./test.sh \'first second\' third # два позиционных параметра\r\nfirst\r\nsecond\r\nthird\r\n=====\r\nfirst\r\nsecond\r\nthird\r\n[/cli]\r\n<p>\r\nВыполняется подстановка позиционных параметров в операторе цикла <code>for</code>, кавычки при этом отбрасываются. Т.е. будет выполнен код:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nfor param in first second third ; do\r\n    echo $param\r\ndone\r\n[/bash]\r\n<p>\r\n<strong>Если переменная <code>$*</code> заключена в кавычки</strong>, все позиционные параметры будут заменены на один, содержащий все позиционные параметры, разделенные первым символом специальной переменной <code>IFS</code> (по умолчанию пробел):\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nfor param in \"$*\" ; do\r\n    echo $param\r\ndone\r\n[/bash]\r\n[cli]\r\n$ ./test.sh first second third # три позиционных параметра\r\nfirst second third\r\n[/cli]\r\n[cli]\r\n$ ./test.sh \'first second\' third # два позиционных параметра\r\nfirst second third\r\n[/cli]\r\n<p>\r\nФактически, и при передаче трех параметров, и при передаче двух, будет выполнен код:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nfor param in \'first second third\' ; do\r\n    echo $param\r\ndone\r\n[/bash]\r\n<p>\r\n<strong>Если переменная <code>$@</code> заключена в кавычки</strong>, то сценарию будут переданы значения <code>\"$1\"</code>, <code>\"$2\"</code> и так далее:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nfor param in \"$@\" ; do\r\n    echo $param\r\ndone\r\n[/bash]\r\n[cli]\r\n$ ./test.sh first second third # три позиционных параметра\r\nfirst\r\nsecond\r\nthird\r\n[/cli]\r\n[cli]\r\n$ ./test.sh \'first second\' third # два позиционных параметра\r\nfirst second\r\nthird\r\n[/cli]\r\n<p>\r\nФактически, в первом случае (три позиционных параметра) будет выполнен код:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nfor param in first second third ; do\r\n    echo $param\r\ndone\r\n[/bash]\r\n<p>\r\nА во втором случае (два позиционных параметра) — код:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nfor param in \'first second\' third ; do\r\n    echo $param\r\ndone\r\n[/bash]','2018-05-10 12:06:53',1),(101,9,'Команда find','','','Bash, CLI, Linux, find, Команда, Поиск, Файл','Это одна из наиболее часто используемых команд Linux. Предназначена для поиска файлов и каталогов на основе условий. Ее можно использовать, например, для поиска файлов по разрешениям, владельцам, группам, типу, размеру и другим критериям. Допускается использование нескольких критериев поиска.','<p>\r\nЭто одна из наиболее часто используемых команд Linux. Предназначена для поиска файлов и каталогов на основе условий. Ее можно использовать, например, для поиска файлов по разрешениям, владельцам, группам, типу, размеру и другим критериям.\r\n</p>\r\n[code]\r\nfind [grn][каталог][/grn] [red][опции][/red] [grn][действие][/grn]\r\n[/code]\r\n<ul>\r\n  <li><code>каталог</code> — каталог, в котором будем искать файлы</li>\r\n  <li><code>опции</code> — критерии поиска и дополнительные опции</li>\r\n  <li><code>действие</code> — действия с найденными файлами с помощью опции <code>-exec</code>.</li>\r\n</ul>\r\n\r\n<h3>Основные опции</h3>\r\n<ul>\r\n  <li><code>-name</code> — искать по имени файла, при использовании подстановочных образцов шаблон заключается в кавычки. Опция различает прописные и строчные буквы; чтобы использовать поиск без этих различий, надо использовать опцию <code>-iname</code>.</li>\r\n  <li><code>-type</code> — тип искомого: <code>f=файл</code>, <code>d=каталог</code>, <code>l=ссылка</code>, <code>p=канал</code>, <code>s=сокет</code>.</li>\r\n  <li><code>-user</code> — владелец: имя пользователя или <code>UID</code>.</li>\r\n  <li><code>-group</code> — владелец: группа пользователя или <code>GID</code>.</li>\r\n  <li><code>-perm</code> — указываются права доступа.</li>\r\n  <li><code>-size</code> — размер: указывается в 512-байтных блоках или байтах (признак байтов — символ «c» за числом).</li>\r\n  <li><code>-atime</code> — время последнего обращения к файлу (в днях).</li>\r\n  <li><code>-amin</code> — время последнего обращения к файлу (в минутах).</li>\r\n  <li><code>-ctime</code> — время последнего изменения владельца или прав доступа к файлу (в днях).</li>\r\n  <li><code>-cmin</code> — время последнего изменения владельца или прав доступа к файлу (в минутах).</li>\r\n  <li><code>-mtime</code> — время последнего изменения файла (в днях).</li>\r\n  <li><code>-mmin</code> — время последнего изменения файла (в минутах).</li>\r\n  <li><code>-newer file</code> — искать файлы созданные позже, чем <code>file</code>.</li>\r\n  <li><code>-delete</code> — удалять найденные файлы.</li>\r\n  <li><code>-ls</code> — генерирует вывод, как команда <code>ls -dgils</code>.</li>\r\n  <li><code>-print</code> — показывает на экране найденные файлы.</li>\r\n  <li><code>-exec command {} \\;</code> — выполняет над найденным файлом указанную команду.</li>\r\n  <li><code>-ok</code> — перед выполнением команды указанной в <code>-exec</code>, выдаёт запрос.</li>\r\n  <li><code>-depth</code> или <code>-d</code> — начинать поиск с самых глубоких уровней вложенности, а не с корня каталога.</li>\r\n  <li><code>-maxdepth</code> — максимальный уровень вложенности для поиска, для поиска в текущем каталоге — 1.</li>\r\n  <li><code>-prune</code> — используется, когда вы хотите исключить из поиска определённые каталоги.</li>\r\n  <li><code>-mount</code> или <code>-xdev</code> — не переходить на другие файловые системы.</li>\r\n  <li><code>-regex</code> — искать по имени файла, используя регулярные выражения.</li>\r\n  <li><code>-regextype тип</code> — указание типа используемых регулярных выражений.</li>\r\n  <li><code>-P</code> — не разворачивать символические ссылки (поведение по умолчанию).</li>\r\n  <li><code>-L</code> — разворачивать символические ссылки.</li>\r\n  <li><code>-empty</code> — только пустые файлы и каталоги.</li>\r\n</ul>\r\n<p>\r\nДопускается использование нескольких критериев поиска:\r\n</p>\r\n<ul>\r\n  <li><code>-newer php.ini -a -size +10M</code> — файл будет найден, если оба критерия верны; <code>-a</code> используется по умолчанию, поэтому его можно опускать;</li>\r\n  <li><code>-name \"*.html\" -o -name \"*.php\"</code> — файл будет найден, если хотя бы один критерий поиска возвращает истину;</li>\r\n  <li><code>-not -newer php.ini</code> — инвертирует критерий поиска.\r\n</ul>\r\n\r\n<h2>Примеры</h2>\r\n<p>\r\nПоказать все файлы в текущей директории:\r\n</p>\r\n[cli]\r\n$ find\r\n[/cli]\r\n[cli]\r\n$ find .\r\n[/cli]\r\n<p>\r\nПоказать все файлы в указанной директории:\r\n</p>\r\n[cli]\r\n$ find ./test\r\n[/cli]\r\n<p>\r\nИскать файлы по имени в текущей папке:\r\n</p>\r\n[cli]\r\n$ find . -name \"*.jpg\"\r\n[/cli]\r\n<p>\r\nНе учитывать регистр при поиске по имени:\r\n</p>\r\n[cli]\r\n$ find . -iname \"test*\"\r\n[/cli]\r\n<p>\r\nПоиск файлов по имени только в текущей папке:\r\n</p>\r\n[cli]\r\n$ find . -maxdepth 1 -name \"*.php\"\r\n[/cli]\r\n<p>\r\nНайти файлы, которые не соответствуют шаблону:\r\n</p>\r\n[cli]\r\n$ find . -not -name \"test*\"\r\n[/cli]\r\n<p>\r\nНайти файлы, начинающиеся на <code>test</code>, но без расширения <code>.php</code>:\r\n</p>\r\n[cli]\r\n$ find . -name \"test\" -not -name \"*.php\"\r\n[/cli]\r\n<p>\r\nНайти все файлы с раширением <code>.html</code> или <code>.php</code>:\r\n</p>\r\n[cli]\r\n$ find . -name \"*.html\" -o -name \"*.php\"\r\n[/cli]\r\n<p>\r\nНайти все файлы в двух каталогах с расширением <code>.c</code>:\r\n</p>\r\n[cli]\r\n$ find ./dev ./fork -type f -name \"*.c\"\r\n[/cli]\r\n<p>\r\nНайти скрытые файлы (начинающиеся на точку) в домашней директории:\r\n</p>\r\n[cli]\r\n$ find ~ -type f -name \".*\"\r\n[/cli]\r\n<p>\r\nНайти файлы с маской прав 0664:\r\n</p>\r\n[cli]\r\n$ find . -type f -perm 0664\r\n[/cli]\r\n<p>\r\nНайти файлы с установленным флагом <code>suid/guid</code>:\r\n</p>\r\n[cli]\r\n$ find / -perm 2644\r\n[/cli]\r\n[cli]\r\n$ find / -maxdepth 2 -perm /u=s\r\n[/cli]\r\n<p>\r\nПоиск файлов только для чтения:\r\n</p>\r\n[cli]\r\n$ find /etc -maxdepth 1 -perm /u=r\r\n[/cli]\r\n<p>\r\nНайти только исполняемые файлы:\r\n</p>\r\n[cli]\r\n$ find /bin -maxdepth 2 -perm /a=x\r\n[/cli]\r\n<p>\r\nНайти все файлы, принадлежащие пользователю <code>evgeniy</code>:\r\n</p>\r\n[cli]\r\n$ find . -user evgeniy\r\n[/cli]\r\n<p>\r\nПоиск файлов, принадлежащих группе <code>developer</code>:\r\n</p>\r\n[cli]\r\n$ find /var/www -group developer\r\n[/cli]\r\n<p>\r\nНайти файлы, модифицированные 30 дней назад:\r\n</p>\r\n[cli]\r\n$ find / -mtime 30\r\n[/cli]\r\n<p>\r\nПоиск файлов, открытых 30 дней назад:\r\n</p>\r\n[cli]\r\n$ find / -atime 30\r\n[/cli]\r\n<p>\r\nНайти файлы, модифицированные между 30 и 60 дней назад:\r\n</p>\r\n[cli]\r\n$ find / -mtime +30 -mtime -60\r\n[/cli]\r\n<p>\r\nНайти файлы, измененные в течении часа:\r\n</p>\r\n[cli]\r\n$ find . -cmin 60\r\n[/cli]\r\n<p>\r\nНайти все файлы размером 50 мегабайт:\r\n</p>\r\n[cli]\r\n$ find / -size 50M\r\n[/cli]\r\n<p>\r\nФайлы от пятидесяти до ста мегабайт:\r\n</p>\r\n[cli]\r\n$ find / -size +50M -size -100M\r\n[/cli]\r\n<p>\r\nПоиск пустых файлов и директорий:\r\n</p>\r\n[cli]\r\n$ find /tmp -type f -empty\r\n[/cli]\r\n[cli]\r\n$ find ~ -type d -empty\r\n[/cli]\r\n\r\n<h2>Действия с найденными файлами</h2>\r\n<p>\r\nДля выполнения произвольных команд для найденных файлов используется опция <code>-exec</code>. Например, выполнить команду <code>ls</code> для получения подробной информации о каждом файле:\r\n</p>\r\n[cli]\r\n$ find . -exec ls -ld {} \\;\r\n[/cli]\r\n<p>\r\nУдалить все текстовые файлы в директории <code>tmp</code>:\r\n</p>\r\n[cli]\r\n$ find /tmp -type f -name \"*.txt\" -exec rm -f {} \\;\r\n[/cli]\r\n<p>\r\nУдалить все log-файлы больше 100 мегабайт:\r\n</p>\r\n[cli]\r\n$ find /home/evgeniy -type f -name *.log -size +100M -exec rm -f {} \\;\r\n[/cli]','2018-05-12 14:29:24',1),(102,7,'Форма динамического списка с произвольным запросом','','','1С:Предприятие, ОткрытьФорму, Параметр, ПриСозданииНаСервере, Список, УправляемаяФорма','Пусть у нас есть форма, содержащая динамический список с произвольным запросом. И этот запрос содержит какие-то параметры. Как установить нужные параметры при открытии формы? Это решается с помощью создания дополнительных параметров формы, передачи в них необходимых значений…','<p>\r\nПусть у нас есть форма, содержащая динамический список с произвольным запросом. И этот запрос содержит какие-то параметры. Как установить нужные параметры при открытии формы? Это решается с помощью создания дополнительных параметров формы, передачи в них необходимых значений и установки их в параметры запроса в обработчике события формы <code>ПриСозданииНаСервере()</code>.\r\n</p>\r\n<p>\r\nПредположим, что мы имеем дело с регистром сведений <code>ЦеныТоваров</code>. В форме списка этого регистра содержится динамический список с произвольным запросом:\r\n</p>\r\n[запрос]\r\nВЫБРАТЬ\r\n    РегистрСведенийЦеныТоваров.Период,\r\n    РегистрСведенийЦеныТоваров.Товар,\r\n    РегистрСведенийЦеныТоваров.Цена\r\nИЗ\r\n    РегистрСведений.ЦеныТоваров КАК РегистрСведенийЦеныТоваров\r\nГДЕ\r\n    РегистрСведенийЦеныТоваров.Товар = &Товар\r\n    И РегистрСведенийЦеныТоваров.Период >= &НачалоПериода\r\n    И РегистрСведенийЦеныТоваров.Период <= &КонецПериода\r\n[/запрос]\r\n<p>\r\nКак видно из текста запроса, у запроса есть три параметра: <code>Товар</code>, <code>НачалоПериода</code> и <code>КонецПериода</code>. Для нормального функционирования формы значения этих параметров должны быть заданы при открытии формы, иначе в результате открытия формы будет получена ошибка.\r\n</p>\r\n<p>\r\nЧтобы передать собственные параметры в форму, желательно создать их в редакторе формы. Вообще говоря, делать это не обязательно. Любые параметры, переданные в функцию <code>ОткрытьФорму()</code>, будут доступны в обработчике события формы <code>ПриСозданииНаСервере()</code>. Но все же лучше создать их у формы в явном виде.\r\n</p>\r\n<p>\r\nТогда, во-первых, в модуле формы не придется проверять, существуют такие параметры или нет. А во-вторых, явное создание параметров формы облегчает поддержку прикладного решения теми разработчиками, которые не участвовали в его создании.\r\n</p>\r\n<p>\r\nИтак, создадим у формы списка регистра сведений три параметра:\r\n</p>\r\n<ul>\r\n  <li><code>НачалоПериода</code>, (тип <code>Дата</code>);</li>\r\n  <li><code>КонецПериода</code> (тип <code>Дата</code>);</li>\r\n  <li><code>Товар</code> (тип <code>СправочникСсылка.Товары</code>).</li>\r\n</ul>\r\n<p>\r\n<img src=\"/files/blog/102/1.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nТеперь в форме элемента справочника <code>Товары</code> создадим команду <code>ЦеныДекабря</code> со следующим обработчиком:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ЦеныДекабря(Команда)\r\n    ПараметрыФормы = Новый Структура(\r\n        \"НачалоПериода, КонецПериода, Товар\",\r\n        \'20171201000000\',\r\n        \'20171231235959\',\r\n        Объект.Ссылка\r\n    );\r\n    ОткрытьФорму(\"РегистрСведений.ЦеныТоваров.Форма.ФормаСписка\", ПараметрыФормы);\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nВ самой форме регистра сведений, в обработчике события формы <code>ПриСозданииНаСервере()</code>, установим переданные значения в качестве параметров произвольного запроса динамического списка следующим образом:\r\n</p>\r\n[язык]\r\n&НаСервере\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n    Список.Параметры.УстановитьЗначениеПараметра(\"НачалоПериода\", Параметры.НачалоПериода);\r\n    Список.Параметры.УстановитьЗначениеПараметра(\"КонецПериода\",  Параметры.КонецПериода);\r\n    Список.Параметры.УстановитьЗначениеПараметра(\"Товар\",         Параметры.Товар);\r\nКонецПроцедуры\r\n[/язык]','2018-05-11 16:43:49',1),(103,10,'Встроенный документ (here document)','','','Bash, CLI, Linux, heredoc, stdin, Поток','Встроенный документ (here document) является специальной формой перенаправления ввода-вывода, которая позволяет передать список строк команде или программе. Конец встроенного документа выделяется «строкой-ограничителем», в качестве которой выбирается последовательность символов, которая не встречается в теле документа.','<p>\r\nВстроенный документ (here document) является специальной формой перенаправления ввода-вывода, которая позволяет передать список строк команде или программе. Конец встроенного документа выделяется «строкой-ограничителем», которая задается с помощью специальной последовательности символов <code>&lt;&lt;</code>. В качестве строки-ограничителя должна выбираться такая последовательность символов, которая не будет встречаться в теле «встроенного документа».\r\n</p>\r\n<p>\r\nНиже приведен простой пример применения данной конструкции, где каждая ввседенная строка передается команде <code>wc</code> в качестве стандартного потока ввода до тех пор, пока не встретится строка <code>END-OF-DATA</code>:\r\n</p>\r\n[cli]\r\n$ wc -l <<END-OF-DATA\r\n> Первая строка текста\r\n> Вторая строка теста\r\n> Третья строка теста\r\n> END-OF-DATA\r\n3\r\n[/cli]\r\n<p>\r\nВстроенные документы часто используются в сценариях:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nmail $* <<END-OF-MESSAGE\r\nЭто первая строка сообщения.\r\nЭто вторая строка сообщения.\r\nЭто третья строка сообщения.\r\nEND-OF-MESSAGE\r\n[/bash]\r\n<p>\r\nОтправим это сообщение всем пользователям из файла <code>users-list.txt</code>:\r\n</p>\r\n[cli]\r\n$ ./send-message.sh $(cat users-list.txt)\r\n[/cli]\r\n<p>\r\nЕсли внутри встроенного документа встречаются переменные, обратные кавычки и конструкция <code>$(…)</code>, то переменные будут подставлены, а команды выполнены.\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\ncat <<END-OF-MESSAGE\r\nТекущая директория: $PWD\r\nСписок файлов: $(ls -la $PWD)\r\nEND-OF-MESSAGE\r\n[/bash]\r\n[cli]\r\n$ ./pwd-ls.sh\r\nТекущая директория: /home/evgeniy\r\nСписок файлов: итого 2952\r\n..........\r\n[/cli]\r\n<p>\r\nЕсли строка-ограничитель встроенного документа начинается с символа <code>-</code> (<code>&lt;&lt;-END-OF-DATA</code>), то это приводит к подавлению вывода символов табуляции (но не пробелов). Это может оказаться полезным при форматировании текста сценария для большей удобочитаемости.\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\ncat <<END-OF-MESSAGE\r\n    Это первая строка сообщения.\r\n    Это вторая строка сообщения.\r\n    Это третья строка сообщения.\r\nEND-OF-MESSAGE\r\ncat <<-END-OF-MESSAGE\r\n    Это первая строка сообщения.\r\n    Это вторая строка сообщения.\r\n    Это третья строка сообщения.\r\nEND-OF-MESSAGE\r\n[/bash]\r\n<p>\r\nРезультат работы сценария:\r\n</p>\r\n[cli]\r\n$ ./message.sh\r\n    Это первая строка сообщения.\r\n    Это вторая строка сообщения.\r\n    Это третья строка сообщения.\r\nЭто первая строка сообщения.\r\nЭто вторая строка сообщения.\r\nЭто третья строка сообщения.\r\n[/cli]','2018-05-14 14:15:58',1),(104,7,'Конструктор ввода на основании','','','1С:Предприятие, ВводНаОсновании, Заполнить, ОбработкаЗаполнения, ОткрытьФорму','Конструктор ввода на основании помогает создать процедуру на встроенном языке, которая будет вызываться при создании одного объекта прикладного решения на основании данных, содержащихся в другом объекте. Результатом работы конструктора является готовая процедура на встроенном языке с именем ОбработкаЗаполнения().','<p>\r\nКонструктор ввода на основании помогает создать процедуру на встроенном языке, которая будет вызываться при создании одного объекта прикладного решения на основании данных, содержащихся в другом объекте. Такая функциональность может потребоваться, например, если в прикладном решении на основании справочника <code>Контрагенты</code> должен создаваться документ <code>ПриходТовара</code>, содержащий те же реквизиты, что и исходный элемент справочника.\r\n</p>\r\n<p>\r\nКонструктор ввода на основании можно вызвать, например, из окна редактирования справочника:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/104/1.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nКонструктор позволяет вручную или автоматически заполнить выражения, которые будут записаны в поля результирующего объекта прикладного решения:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/104/2.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nРезультатом работы конструктора является готовая процедура на встроенном языке с именем <code>ОбработкаЗаполнения()</code>. Эта процедура располагается в модуле результирующего объекта конфигурации и будет вызвана системой при вводе этого объекта на основании другого объекта.\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)\r\n	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ\r\n	// Данный фрагмент построен конструктором.\r\n	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!\r\n	Если ТипЗнч(ДанныеЗаполнения) = Тип(\"СправочникСсылка.Контрагенты\") Тогда\r\n		// Заполнение шапки\r\n		Поставщик = ДанныеЗаполнения.Ссылка;\r\n	КонецЕсли;\r\n	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nДля каждого типа объекта-основания формируется своя ветка условия <code>Если</code>, в которой происходит заполнение реквизитов нового документа.\r\n</p>\r\n\r\n<h2>Как выполнить ввод на основании программно?</h2>\r\n<p>\r\nВ большинстве случаев, когда объект вводится на основании, нужно открыть пользователю форму нового объекта, который введен на основании какого-то объекта. В этом случае достаточно просто передать параметр <code>Основание</code> в процедуру открытия формы:\r\n</p>\r\n[язык]\r\nПараметрыФормы = Новый Структура(\"Основание\", Объект.Ссылка);\r\nОткрытьФорму(\"Документ.РасходнаяНакладная.ФормаОбъекта\", ПараметрыФормы);\r\n[/язык]\r\n<p>\r\nПри этом отработает процедура <code>ОбработкаЗаполнения()</code> в модуле объекта и те алгоритмы заполнения, которые в ней описаны.\r\n</p>\r\n<p>\r\nЕще один способ — создать новый объект программно, вызвать у него метод <code>Заполнить()</code> и передать в этот метод значение, на основании которого должен быть создан новый объект. В этом случае тоже будет выполнен обработчик события <code>ОбработкаЗаполнения()</code>. В заключении останется только получить форму объекта, установить свойство расширения формы <code>ПараметрОснование</code> и открыть ее:\r\n</p>\r\n[язык]\r\nНовыйДокумент = Документы.РасходнаяНакладная.СоздатьДокумент();\r\nНовыйДокумент.Дата = ТекущаяДата();\r\n// Вызываем процедуру ОбработкаЗаполнения() и\r\n// передаем в нее ссылку на объект-основание\r\nНовыйДокумент.Заполнить(ВыбранныйКлиент);\r\n// Показываем форму нового объекта пользователю\r\nФормаДокумента = НовыйДокумент.ПолучитьФорму();\r\nФормаДокумента.ПараметрОснование = ВыбранныйКлиент;\r\nФормаДокумента.Открыть();\r\n[/язык]\r\n<p>\r\nЕсли же объект, который вводится на основании, нужно сразу записать в базу данных, не показывая его форму пользователю:\r\n</p>\r\n[язык]\r\n// Создаем новый документ\r\nНовыйДокумент = Документы.РасходнаяНакладная.СоздатьДокумент();\r\nНовыйДокумент.Дата = ТекущаяДата();\r\n// Вызываем процедуру ОбработкаЗаполнения() и\r\n// передаем в нее ссылку на объект-основание\r\nНовыйДокумент.Заполнить(ВыбранныйКлиент);\r\n// Записываем новый документ в базу данных\r\nНовыйДокумент.Записать();\r\n[/язык]\r\n</p>\r\nВ результате этих действий будет выполнен обработчик события <code>ОбработкаЗаполнения()</code>, расположенный в модуле нового объекта.\r\n</p>','2018-05-14 16:31:17',1),(105,7,'Таблица значений','','','1С:Предприятие, Коллекция, ТаблицаЗначений, ТипыДанных','В таблицах значений существуют строки и колонки. У каждой строки есть индекс, он начинается с нуля. Таблицу значений можно создавать с различными колонками и добавлять в нее строки. По строкам в таблице можно делать выборку и поиск, устанавливать и получать значения, сортировать, группировать и удалять строки.','<p>\r\nВ таблицах значений существуют строки и колонки. У каждой строки есть индекс, он начинается с нуля. Таблицу значений можно создавать с различными колонками и добавлять в нее строки. По строкам в таблице можно делать выборку и поиск, устанавливать и получать значения, сортировать, группировать и удалять строки.\r\n</p>\r\n\r\n<h3>Как можно создать новую таблицу значений?</h3>\r\n[язык]\r\n// таблица значений с колонками «Код», «Номенклатура» и «Количество»\r\nТаблицаЗначений = Новый ТаблицаЗначений();\r\nТаблицаЗначений.Колонки.Добавить(\"Код\");\r\nТаблицаЗначений.Колонки.Добавить(\"Номенклатура\");\r\nТаблицаЗначений.Колонки.Добавить(\"Количество\");\r\n[/язык]\r\n\r\n<h3>Как добавить новую колонку с определенным типом и заголовком?</h3>\r\n[язык]\r\n// добавляем колонку «Количество» с типом «Число», длиной в 9 символов и с точностью в 2 символа\r\nФорматЧисла = Новый КвалификаторыЧисла(9, 2)\r\nОписаниеТипа = Новый ОписаниеТипов(\"Число\", ФорматЧисла);\r\nТабЗначений.Колонки.Добавить(\"Количество\", ОписаниеТипа, \"Количество номенклатуры\");\r\n[/язык]\r\n<div class=\"note\">\r\n[язык]\r\nТаблицаЗначений.Колонки.Добавить(Имя, Тип, Заголовок, Ширина)\r\n[/язык]\r\n<ul>\r\n  <li><code>Имя</code> (необязательный, тип <code>Строка</code>, по умолчанию пустая строка). Имя колонки.</li>\r\n  <li><code>Тип</code> (необязательный, тип <code>ОписаниеТипов</code>). Объект, описывающий допустимые типы значений для колонки. Если параметр не указан, в колонке можно будет хранить значение любого типа.</li>\r\n  <li><code>Заголовок</code> (необязательный, тип <code>Строка</code>, по умолчанию пустая строка). Заголовок колонки таблицы значений. Используется при визуальном отображении таблицы значений.</li>\r\n  <li><code>Ширина</code> (необязательный, тип <code>Число</code>, по умолчанию ноль). Ширина колонки в символах. Используется при визуальном отображении таблицы значений.</li>\r\n</ul>\r\n</div>\r\n\r\n<h3>Как добавить новые строки?</h3>\r\n[язык]\r\nТаблицаЗначений = Новый ТаблицаЗначений();\r\nТаблицаЗначений.Колонки.Добавить(\"Код\");\r\nТаблицаЗначений.Колонки.Добавить(\"Наименование\");\r\nТаблицаЗначений.Колонки.Добавить(\"Количество\");\r\n\r\n// делаем выборку по номенклатуре\r\nВыборка = Справочники.Номенклатура.Выбрать();\r\nПока Выборка.Следующий() Цикл\r\n    // добавляем новуй строку в таблицу значений\r\n    НоваяСтрока = ТаблицаЗначений.Добавить();\r\n    НоваяСтрока.Код = Выборка.Код;\r\n    НоваяСтрока.Наименование = Выборка.Наименование;\r\n    НоваяСтрока.Количество = 1;\r\nКонецЦикла;\r\n[/язык]\r\n\r\n<h3>Как выгрузить результат запроса в таблицу значений?</h3>\r\n[язык]\r\nЗапрос = Новый Запрос();\r\nЗапрос.Текст =\r\n    \"ВЫБРАТЬ\r\n    |	СправочникНоменклатура.Ссылка КАК Ссылка,\r\n    |	СправочникНоменклатура.Код КАК Код,\r\n    |	СправочникНоменклатура.Наименование КАК Наименование\r\n    |ИЗ\r\n    |	Справочник.Номенклатура КАК СправочникНоменклатура\"\r\nТаблицаЗначений = Запрос.Выполнить().Выгрузить();\r\n[/язык]\r\n\r\n<h3>Как обойти в цикле все строки таблицы значений?</h3>\r\n[язык]\r\nДля Каждого Строка Из ТаблицаЗначений Цикл\r\n    Сообщить(Строка.Код + \" \" + Строка.Наименование);\r\nКонецЦикла;\r\n[/язык]\r\n[язык]\r\nКоличествоСтрок = ТаблицаЗначений.Количество();\r\nДля Индекс = 0 По КоличествоСтрок - 1 Цикл\r\n    Сообщить(ТаблицаЗначений[Индекс].Код + \" \" + ТаблицаЗначений[Индекс].Наименование);\r\nКонецЦикла;\r\n[/язык]\r\n\r\n<h3>Как сделать выборку строк в таблице значений с отбором?</h3>\r\n[язык]\r\n// заполняем таблицу значений\r\nЗапрос = Новый Запрос();\r\nЗапрос.Текст =\r\n    \"ВЫБРАТЬ\r\n    |	СправочникНоменклатура.Ссылка КАК Ссылка,\r\n    |	СправочникНоменклатура.Код КАК Код,\r\n    |	СправочникНоменклатура.Наименование КАК Наименование\r\n    |ИЗ\r\n    |	Справочник.Номенклатура КАК СправочникНоменклатура\";\r\nТаблицаЗначений = Запрос.Выполнить().Выгрузить();\r\n[/язык]\r\n[язык]\r\n// создаем отбор по ссылке на элемент справочника\r\nОтбор = Новый Структура();\r\nОтбор.Вставить(\"Ссылка\", Справочники.Номенклатура.НайтиПоКоду(\"000000003\"));\r\n// ищем нужную строку\r\nСтрока = ТаблицаЗначений.НайтиСтроки(Отбор);		\r\nЕсли Строка.Количество() > 0 Тогда\r\n    Сообщить(Строка[0].Код + \" \" + Строка[0].Наименование);\r\nКонецЕсли;\r\n[/язык]\r\n[язык]\r\n// создаем отбор по коду номенклатуры\r\nОтбор = Новый Структура();\r\nОтбор.Вставить(\"Код\", \"000000003\");\r\n// ищем нужную строку\r\nСтрока = ТаблицаЗначений.НайтиСтроки(Отбор);		\r\nЕсли Строка.Количество() > 0 Тогда\r\n    Сообщить(Строка[0].Код + \" \" + Строка[0].Наименование);\r\nКонецЕсли;\r\n[/язык]\r\n[язык]\r\n// создаем отбор по наименованию\r\nОтбор = Новый Структура();\r\nОтбор.Вставить(\"Наименование\", \"трансформатор\");\r\n// ищем нужные строки\r\nСтроки = ТаблицаЗначений.НайтиСтроки(Отбор);		\r\nДля Каждого Строка Из Строки Цикл\r\n    Сообщить(Строка.Код + \" \" + Строка.Наименование);\r\nКонецЦикла;\r\n[/язык]\r\n<div class=\"note\">\r\n[язык]\r\nТаблицаЗначений.НайтиСтроки(ПараметрыОтбора)\r\n[/язык]\r\n<ul>\r\n  <li><code>ПараметрыОтбора</code> (обязательный, тип <code>Структура</code>). Задает условия поиска: ключ структуры определяет имя колонки, по которой будет осуществляться поиск, а значение структуры — искомое значение.</li>\r\n</ul>\r\n<p>\r\nОсуществляет поиск строк таблицы значений, отвечающих заданным условиям поиска. Возвращает массив строк таблицы значений, соответствующих условиям поиска. Метод эффективно использовать для выборки неуникальных значений.\r\n</p>\r\n<p>\r\n<em>Массив хранит ссылки на строки таблицы значений, то есть при изменении строки в таблице, значение в массиве тоже будет измененным.</em>\r\n</p>\r\n</div>\r\n\r\n<h3>Как выполнить сортировку?</h3>\r\n[язык]\r\nТаблицаЗначений.Сортировать(\"Код Убыв, Наименование Возр\");\r\n[/язык]\r\n\r\n<h3>Как вычислить итоги по колонке?</h3>\r\n[язык]\r\nКоличество = ТаблицаЗначений.Итог(\"Количество\");\r\n[/язык]\r\n\r\n<h3>Как сделать копию таблицы значений?</h3>\r\n[язык]\r\nКопия = ТаблицаЗначений.Скопировать();\r\n[/язык]\r\n\r\n<h3>Как свернуть таблицу значений по колонке и суммировать по количеству?</h3>\r\n[язык]\r\nТаблицаЗначений.Свернуть(\"Наименование\", \"Количество\");\r\n[/язык]\r\n<p>\r\nМетод <code>Свернуть()</code> сворачивает таблицу по колонке «Наименование» и суммирует колонку «Количество». Если существуют еще колонки, то они будут удалены.\r\n</p>\r\n<div class=\"note\">\r\n[язык]\r\nТаблицаЗначений.Свернуть(КолонкиГруппировок, КолонкиСуммирования)\r\n[/язык]\r\n<ul>\r\n  <li><code>КолонкиГруппировок</code> (обязательный, тип <code>Строка</code>). Имена колонок, разделенные запятыми, по которым необходимо группировать строки таблицы значений.\r\n  <li><code>КолонкиСуммирования</code> (необязательный, тип <code>Строка</code>). Имена колонок, разделенные запятыми, по которым необходимо суммировать значения в строках таблицы значений.\r\n</ul>\r\n<p>\r\nОсуществляет свертку таблицы значений по указанным колонкам группировки. Строки, у которых совпадают значения в колонках, указанных в первом параметре, сворачиваются в одну строку. Значения этих строк, хранящиеся в колонках, указанных во втором параметре, накапливаются.\r\n</p>\r\n<p>\r\nСписки колонок не должны пересекаться. Колонки, не вошедшие ни в один из списков колонок, после выполнения метода удаляются из таблицы значений.\r\n</p>\r\n<ul>\r\n  <li>Если в колонке установлен тип и он единственный, то при суммировании будет предприниматься попытка преобразования значения к типу <code>Число</code>.</li>\r\n  <li>Если колонке не присвоены типы, то в процессе суммирования будут принимать участие только значения, имеющие тип <code>Число</code>, значения других типов будут игнорироваться.</li>\r\n  <li>Если в колонке несколько типов и среди них есть тип <code>Число</code>, то в процессе суммирования будут принимать участие только значения, имеющие тип <code>Число</code>, значения других типов будут игнорироваться.</li>\r\n  <li>Если в колонке несколько типов и среди них нет типа <code>Число</code>, то результат суммирования будет 0, который будет присвоен в соответствующую колонку, где будет преобразован к значению по умолчанию для типа, установленного в колонке.</li>\r\n</ul>\r\n</div>\r\n\r\n<h3>Как найти строку в таблице значений по значению?</h3>\r\n[язык]\r\nНайденнаяСтрока = ТаблицаЗначений.Найти(\"000000003\", \"Код\");\r\nЕсли НайденнаяСтрока <> Неопределено Тогда\r\n    Сообщить(НайденнаяСтрока.Код + \" \" + НайденнаяСтрока.Наименование);\r\nИначе\r\n    Сообщить(\"Ничего не найдено\");\r\nКонецЕсли;\r\n[/язык]\r\n<div class=\"note\">\r\n[язык]\r\nТаблицаЗначений.Найти(Значение, Колонки)\r\n[/язык]\r\n<ul>\r\n  <li><code>Значение</code> (обязательный, тип <code>Произвольный</code>). Искомое значение.</li>\r\n  <li><code>Колонки</code> (необязательный, тип <code>Строка</code>, по умолчанию пустая строка). Список имен колонок, разделенных запятыми, по которым производится поиск. Если параметр не указан, поиск осуществляется по всей таблице значений.</li>\r\n</ul>\r\n<p>\r\nОсуществляет поиск значения в указанных колонках таблицы значений. Возвращает строку таблицы значений, в которой содержится искомое значение. Если значение не найдено, то возвращается значение <code>Неопределено</code>. Метод эффективно использовать для поиска уникальных значений.\r\n</p>\r\n</div>\r\n\r\n<h3>Как удалить строку или полностью очистить таблицу значений?</h3>\r\n[язык]\r\nТаблицаЗначений.Удалить(0); // удаляем первую строку по индексу\r\nТаблицаЗначений.Очистить(); // полностью очищаем таблицу значений\r\n[/язык]\r\n\r\n<h3>Как получить отдельную строку?</h3>\r\n[язык]\r\n// получаем строку таблицы значений по индексу\r\nПерваяСтрока = ТаблицаЗначений.Получить(0);\r\n[/язык]\r\n\r\n<h3>Как вставить строку в таблицу?</h3>\r\n[язык]\r\n// эта строка будет второй\r\nНоваяСтрока = ТаблицаЗначений.Вставить(1);\r\nНоменклатура = Справочники.Номенклатура.НайтиПоКоду(\"000000003\");\r\nНоваяСтрока.Ссылка = Номенклатура.Ссылка;\r\nНоваяСтрока.Код = Номенклатура.Код;\r\nНоваяСтрока.Наименование = Номенклатура.Наименование;\r\n[/язык]\r\n\r\n<h3>Дополнительные функции для работы с таблицей значений</h3>\r\n[язык]\r\n// выгружаем колонку «Наименование» в массив\r\nМассив = ТаблицаЗначений.ВыгрузитьКолонку(\"Наименование\");\r\n// заполняем колонку «Количество»\r\nТаблицаЗначений.ЗаполнитьЗначения(0, \"Количество\");\r\n// получаем количество строк в таблице значений\r\nКоличествоСток = ТаблицаЗначений.Количество();\r\n[/язык]','2018-05-16 13:51:54',1),(106,7,'Квалификаторы и ОписаниеТипов','','','1С:Предприятие, Квалификаторы, ОписаниеТипов, ТипыДанных','Слова «ОписаниеТипов» и «Квалификаторы» вызывают трудность понимания на начальном этапе использования. ОписаниеТипов — это объект, который содержит массив допустимых типов, но в массиве нет возможности указать дополнительные данные, так что для простых типов (Число, Строка, Дата) свойства уточняются квалификаторами.','<p>\r\nСлова «ОписаниеТипов» и «Квалификаторы» вызывают трудность понимания на начальном этапе использования. По сути это простые вещи — с толку может сбивать их название.\r\n</p>\r\n\r\n<h2>Что такое Квалификаторы?</h2>\r\n<p>\r\nВ 1С есть простые типы: <code>Число</code>, <code>Строка</code>, <code>Дата</code>. Но иногда необходимо уточнить, что переменная будет не просто числом, а например, числом длиной 12 символов и 2 разрядами после запятой, при этом неотрицательное. В простых типах это сделать невозможно т.к. тип не имеет соответствующих свойств. Для таких случаев и нужен объект «Квалификатор».\r\n</p>\r\n[язык]\r\nЗнак = ДопустимыйЗнак.Неотрицательный;\r\nКвалификаторЧисло = Новый КвалификаторыЧисла(12, 2, Знак);\r\n[/язык]\r\n<p>\r\nУ каждого простого типа есть свой квалификатор:\r\n</p>\r\n[язык]\r\nКвалификаторСтрока = Новый КвалификаторыСтроки(100);\r\nКвалификаторВремя = Новый КвалификаторыДаты(ЧастиДаты.Время);\r\n[/язык]\r\n\r\n<h2>Что такое Описание типов?</h2>\r\n<p>\r\n<code>ОписаниеТипов</code> — это объект, который содержит массив допустимых типов, но т.к. в массиве нет возможности указать дополнительные данные, то отдельно для простых типов (<code>Число</code>, <code>Строка</code>, <code>Дата</code>) можно уточнить свойства квалификаторами. \r\n</p>\r\n<div class=\"note\">\r\n[язык]\r\nНовый ОписаниеТипов(Типы, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты)\r\n[/язык]\r\n<ul>\r\n  <li><code>Типы</code> (обязательный, тип <code>Массив</code>, <code>Строка</code>). Массив значений типа <code>Тип</code>, состоящий из типов, которые будут использованы в объекте, или строка, содержащая имена типов, разделенных запятыми.</li>\r\n  <li><code>КвалификаторыЧисла</code> (необязательный, тип <code>КвалификаторыЧисла</code>). Квалификаторы числа, описывающие допустимые значения числового типа. Если параметр не указан, то числа хранить нельзя.</li>\r\n  <li><code>КвалификаторыСтроки</code> (необязательный, тип <code>КвалификаторыСтроки</code>). Квалификаторы строки, описывающие допустимые значения строкового типа. Если параметр не указан, то используется неограниченная длина строки.</li>\r\n  <li><code>КвалификаторыДаты</code> (необязательный, тип <code>КвалификаторыДаты</code>). Квалификаторы даты, описывающие допустимые значения типа <code>Дата</code>. Если параметр не указан, то используются обе части даты (дата + время).\r\n</ul>\r\n<p>\r\nСоздает описание типов на основании заданных типов и квалификаторов для типов <code>Число</code>, <code>Строка</code>, <code>Дата</code>.\r\n</p>\r\n</div>\r\n<p>\r\nУ описания типов есть четыре параметра, первый — обязательный, в нем указываются типы. Остальные — необязательные, в них указываются квалификаторы. Для создания описания типов существует несколько вариантов.\r\n</p>\r\n<p>\r\nУказание типа строкой:\r\n</p>\r\n[язык]\r\nОписаниеТипов = Новый ОписаниеТипов(\"СправочникСсылка.Склад\");\r\n[/язык]\r\n<p>\r\nМожно указать несколько типов, разделяя их запятыми:\r\n</p>\r\n[язык]\r\nОписаниеТипов = Новый ОписаниеТипов(\"СправочникСсылка.Склад, ДокументСсылка.РеализацияТоваров\");\r\n[/язык]\r\n<p>\r\nМожно передать массив типов:\r\n</p>\r\n[язык]\r\nМассивТипов = Новый Массив();\r\nМассивТипов.Добавить(Тип(\"СправочникСсылка.Склад\"));\r\nМассивТипов.Добавить(Тип(\"ДокументСсылка.РеализацияТоваров\"));\r\nМассивТипов.Добавить(Тип(\"Строка\"));\r\nКС100 = Новый КвалификаторыСтроки(100);\r\nОписаниеТипов = Новый ОписаниеТипов(МассивТипов,,КС100);\r\n[/язык]\r\n<p>\r\nВ последнем примере одним из типов является строка и это не случайно. Даже когда в описании типов указывается квалификатор, обязательно нужно добавлять в типы этот простой тип. Т.к. квалификаторы накладывают ограничение на типы, а не устанавливают их.\r\n</p>\r\n\r\n<h2>Заключение</h2>\r\n<p>\r\nОписание типов — это объект, который используется, чтобы ограничить ввод данных, а квалификаторы — это объекты, которые дополняют ограничения для простых типов. Квалификаторов в описании типов три — по одному для каждого простого типа: <code>Число</code>, <code>Строка</code>, <code>Дата</code>.\r\n</p>\r\n<p>\r\nДля наглядности посмотрим на ограничение типов в реквизитах объекта конфигурации. По сути, это один механизм:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/106/1.png\" alt=\"\" />\r\n</p>','2018-05-18 09:22:02',1),(107,7,'Как открыть форму существующего объекта?','','','1С:Предприятие, Ключ, ОткрытьЗначение, ОткрытьФорму, Параметр, ТекущаяСтрока','При открытии формы существующего объекта необходимо кроме имени формы указать также и на тот объект, форма которого должна быть открыта. Для этого используется параметр формы Ключ и ссылка на интересующий нас объект. Например, если из формы списка организаций нужно открыть форму той организации, на которой находится курсор…','<p>\r\nПри открытии формы существующего объекта необходимо кроме имени формы указать также и на тот объект, форма которого должна быть открыта. Для этого используется параметр формы <code>Ключ</code> и ссылка на интересующий нас объект.\r\n</p>\r\n<p>\r\nНапример, если из формы списка организаций нужно открыть форму той организации, на которой находится курсор, сделать это можно следующим способом:\r\n</p>\r\n[язык]\r\nСсылкаНаЭлементСправочника = Элементы.Список.ТекущаяСтрока;\r\nПараметрыФормы = Новый Структура(\"Ключ\", СсылкаНаЭлементСправочника);\r\nОткрытьФорму(\"Справочник.Организации.ФормаОбъекта\", ПараметрыФормы);\r\n[/язык]\r\n<p>\r\nСсылку на интересующий элемент справочника мы получаем через текущую строку списка:\r\n</p>\r\n[язык]\r\nСсылкаНаЭлементСправочника = Элементы.Список.ТекущаяСтрока;\r\n[/язык]\r\n<p>\r\nПараметры формы передаем в виде структуры, где имя элемента структуры соответствует имени параметра формы, а значение — это то значение, в которое мы хотим установить параметр формы.\r\n</p>\r\n<p>\r\nЕсли требуется открыть не основную, а произвольную форму объекта, созданную в конфигураторе, вместо стандартного имени основной формы (<code>ФормаОбъекта</code>) указывается слово <code>Форма</code> и через точку за ним — имя формы, созданной в конфигураторе. Например:\r\n</p>\r\n[язык]\r\nСсылкаНаЭлементСправочника = Элементы.Список.ТекущаяСтрока;\r\nПараметрыФормы = Новый Структура(\"Ключ\", СсылкаНаЭлементСправочника);\r\nОткрытьФорму(\"Справочник.Организации.Форма.УниверсальнаяФормаОбъекта\", ПараметрыФормы);\r\n[/язык]\r\n<p>\r\nСледует заметить, что в том случае, когда кроме ссылки на объект никакие параметры в открываемую форму передавать не нужно и нужна именно основная форма существующего объекта, можно использовать более простой способ — открывать форму с помощью функции глобального контекста <code>ОткрытьЗначение()</code>:\r\n</p>\r\n[язык]\r\nОткрытьЗначение(Элементы.Список.ТекущаяСтрока);\r\n[/язык]\r\n<p>\r\nТакой способ обладает меньшей универсальностью, но в некоторых случаях он экономит время и силы. Например, в рассмотренном случае одна такая строка может заменить всю написанную нами ранее процедуру из трех строк.\r\n</p>\r\n<p>\r\nОднако нужно внимательно относиться к использованию этого метода. В некоторых случаях он может вызывать дополнительные обращения к серверу, например, когда нужно открыть форму элемента иерархического справочника. При использовании этого метода платформа будет выполнять дополнительное обращение к серверу для того, чтобы определить, является ли элемент группой или нет, так как для элемента и для группы нужно открывать разные формы.\r\n</p>\r\n\r\n<h2>Справка</h2>\r\n[язык]\r\nОткрытьФорму(\r\n    ИмяФормы,\r\n    Параметры,\r\n    Владелец,\r\n    Уникальность,\r\n    Окно,\r\n    НавигационнаяСсылка,\r\n    ОписаниеОповещенияОЗакрытии,\r\n    РежимОткрытияОкна\r\n)\r\n[/язык]\r\n<p>Параметры:</p>\r\n<ul>\r\n  <li><code>ИмяФормы</code> (обязательный, тип <code>Строка</code>). Имя формы. Образуется как полный путь к объекту метаданных <code>Форма</code> (например, <code>\"Справочник.Контрагенты.Форма.ФормаОбъекта\"</code>, <code>\"ОбщаяФорма.ФормаСохраненияФайла\"</code>) или как полный путь к прикладному объекту, дополненный именем формы по умолчанию (например, <code>\"Справочник.Товары.ФормаВыбора\"</code>).</li>\r\n  <li><code>Параметры</code> (необязательный, тип <code>Структура</code>). Параметры формы. Ключ структуры — имя параметра, а значение — значение параметра формы. Имя элемента должно совпадать с именем параметра структуры.</li>\r\n  <li><code>Владелец</code> (необязательный). Владелец формы — форма или элемент управления другой формы.</li>\r\n  <li><code>Уникальность</code> (необязательный, тип <code>Произвольный</code>). В данном параметре может быть задан некоторый ключ, значение которого будет использоваться для поиска уже открытых форм. Если будет найдена форма с таким же ключом уникальности, вместо открытия новой формы будет активизирована найденная форма. <code>Ложь</code> — искать форму с ключом уникальности по умолчанию, <code>Истина</code> — не искать форму вообще, любое другое значение устанавливает ключ уникальности, по которому будет произведен поиск. Значение по умолчанию <code>Ложь</code>.</li>\r\n  <li><code>Окно</code> (необязательный, тип <code>ОкноКлиентскогоПриложения</code>, <code>ВариантОткрытияОкна</code>). Окно приложения, в котором будет открыта форма. Окном может быть только основное окно приложения или вспомогательное окно формы. Если указан тип <code>ВариантОткрытияОкна</code>, окно формы будет создано согласно выбранному варианту.</li>\r\n  <li><code>НавигационнаяСсылка</code> (необязательный, тип <code>Строка</code>, <code>Неопределено</code>). Если содержит значение, отличное от <code>Неопределено</code>, то это значение присваивается свойству <code>НавигационнаяСсылка</code> формы, полученной в результате вызова данного метода, и свойство <code>АвтоНавигационнаяСсылка</code> этой формы устанавливается в <code>Ложь</code>. Значение по умолчанию <code>Неопределено</code>.</li>\r\n  <li><code>ОписаниеОповещенияОЗакрытии</code> (необязательный, тип <code>ОписаниеОповещения</code>). Содержит описание процедуры, которая будет вызвана при закрытии формы со следующими параметрами:\r\n    <ul>\r\n      <li>значение, переданное при вызове метода <code>Закрыть()</code> открываемой формы,</li>\r\n      <li>значение, которое было указано при создании объекта <code>ОписаниеОповещения</code>.</li>\r\n    </ul>\r\n    Если параметр не указан, то по завершению никакая процедура вызвана не будет.\r\n  </li>    \r\n  <li><code>РежимОткрытияОкна</code> (необязательный, тип <code>РежимОткрытияОкнаФормы</code>). Указывает режим открытия окна формы. Значение по умолчанию <code>Неопределено</code>.</li>\r\n</ul>\r\n<p>Описание:</p>\r\n<ul>\r\n  <li>Открывает и возвращает форму или управляемую форму. В тонком и веб-клиенте только управляемую форму. Перед открытием осуществляется поиск уже открытой такой же формы. Поиск осуществляется по типу формы, значениям ключевых параметров формы, владельцу формы, пользовательскому ключу уникальности. Можно открывать уже полученную форму. В этом случае в параметрах передается уже полученная форма и окно, в котором открыть форму. Можно открыть по имени формы. В этом случае в параметры передаются имя формы, параметры формы, владелец, ключ уникальности и окно, в котором должна быть открыта форма.</li>\r\n</ul>','2018-05-13 15:11:40',1),(110,10,'Функции в сценариях оболочки','','','Bash, CLI, Linux, local, return, return, Функция','Функция — это набор команд, объединенных одним именем, которые выполняют определенную задачу. Функция вызывается по ее имени, может принимать параметры и возвращать результат работы. Функция должна быть объявлена раньше, чем ее можно будет использовать.','<p>\r\nФункция — это набор команд, объединенных одним именем, которые выполняют определенную задачу. Функция вызывается по ее имени, может принимать параметры и возвращать результат работы.\r\n</p>\r\n<p>\r\nСинтаксис создания функции:\r\n</p>\r\n[code]\r\n[grn]имя_функции[/grn][red]() {[/red]\r\n    команда\r\n    команда\r\n    .......\r\n[red]}[/red]\r\n[/code]\r\n[code]\r\n[red]function[/red] [grn]имя_функции[/grn] [red]{[/red]\r\n    команда\r\n    команда\r\n    .......\r\n[red]}[/red]\r\n[/code]\r\n<p>\r\nФункция должна быть объявлена раньше, чем ее можно будет использовать.\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nfunction print_string {\r\n  echo \"Пример использования функции\"\r\n}\r\ncount=1\r\nwhile [ $count -le 3 ] ; do\r\n    print_string\r\n    $(( count++ ))\r\ndone\r\n[/bash]\r\n[cli]\r\n$ ./function.sh\r\nПример использования функции\r\nПример использования функции\r\nПример использования функции\r\n[/cli]\r\n\r\n<h2>Использование команды return</h2>\r\n<p>\r\nКоманда <code>return</code> позволяет задавать возвращаемый функцией целочисленный код завершения, который доступен через переменную <code>$?</code>:\r\n</p>\r\n[code]\r\nreturn [red]число[/red]\r\n[/code]\r\n<p>\r\nЕсли параметр <code>число</code> опущен, то возвращается состояние завершения последней команды. Максимальное число, которое может вернуть команда <code>return</code> — 255. \r\n[bash]\r\n#!/bin/bash\r\nfunction return_value {\r\n    read -p \"Введите значение: \" value\r\n    return $(( value + 10 ))\r\n}\r\nreturn_value\r\necho \"Код завершения функции $?\"\r\n[/bash]\r\n<p>\r\nЕщё один способ возврата результатов работы функции заключается в записи данных, выводимых функцией, в переменную. Такой подход позволяет обойти ограничения команды <code>return</code> и возвращать из функции любые данные:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nfunction return_value {\r\n    read -p \"Введите значение: \" value\r\n    echo $(( value + 10 ))\r\n}\r\nresult=$(return_value)\r\necho \"Возвращенное значение $result\"\r\n[/bash]\r\n\r\n<h2>Аргументы функций</h2>\r\n<p>\r\nФункции могут использовать стандартные позиционные параметры, в которые записывается то, что передаётся им при вызове. Например, имя функции хранится в параметре <code>$0</code>, первый переданный ей аргумент — в <code>$1</code>, второй — в <code>$2</code>, и так далее. Количество переданных функции аргументов можно узнать, обратившись к переменной <code>$#</code>.\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nfunction print_sum {\r\n    echo $(( $1 + $2 ))\r\n}\r\nprint_sum 10 20\r\n[/bash]\r\n[bash]\r\n#!/bin/bash\r\nfunction print_string {\r\n    while [ $# -gt 0 ] ; do\r\n        echo $1\r\n        shift\r\n    done\r\n}\r\nprint_string \'Первая строка\' \'Вторая строка\' \'Третья строка\'\r\n[/bash]\r\n\r\n<h2>Локальные переменные</h2>\r\n<p>\r\nЕсли объявить обычную переменную в функции, то она будет доступной во всем скрипте, но иногда может понадобиться создать локальную переменную. Для этого существует команда <code>local</code>:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nprint_string() {\r\n    local first=$1\r\n    echo ${first}\r\n}\r\nprint_string \'Hello World\'\r\n[/bash]','2018-05-17 11:15:16',1),(109,7,'Типы данных формы','','','1С:Предприятие, ДанныеФормыВЗначение, ЗначениеВДанныеФормы, ЗначениеВРеквизитФормы, РеквизитФормыВЗначение, ТипыДанных, УправляемаяФорма','Форма содержит некоторую «проекцию» данных объектов в виде своих собственных типов данных и автоматически выполняет преобразование между ними при необходимости. Однако, можно и самостоятельно преобразовать объект в данные формы и обратно.','<p>\r\nДля представления в форме объектов конфигурации (справочники, документы и т.п.) существуют специальные типы данных:\r\n</p>\r\n<ul>\r\n  <li><code>ДанныеФормыСтруктура</code> — содержит набор свойств произвольного типа. Свойствами могут быть другие структуры, коллекции или структуры с коллекциями. Таким типом представляется, например, в форме <code>СправочникОбъект</code>.</li>\r\n  <li><code>ДанныеФормыКоллекция</code> — это список типизированных значений, похожий на массив. Доступ к элементу коллекции осуществляется по индексу или по идентификатору. Доступ по идентификатору может отсутствовать в некоторых случаях. Это обусловлено типом прикладного объекта, который представлен этой коллекцией. Идентификатором может быть любое целое число. Таким типом представляется, например, в форме табличная часть.</li>\r\n  <li><code>ДанныеФормыСтруктураСКоллекцией</code> — это объект, который представлен в виде структуры и коллекции одновременно. С ним можно обращаться как с любой из этих сущностей. Таким типом представляется, например, в форме набор записей.</li>\r\n  <li><code>ДанныеФормыДерево</code> — объект предназначен для хранения иерархических данных.</li>\r\n</ul>\r\n<p>\r\nПрикладной объект представлен либо одним, либо несколькими элементами данных формы. Например, документ, содержащий табличную часть, будет представлен объектом типа <code>ДанныеФормыСтруктура</code> (собственно документ), которому подчинен объект типа <code>ДанныеФормыКоллекция</code> (табличная часть документа).\r\n</p>\r\n<div class=\"note\">\r\nВо время разработки конфигурации важно помнить, что прикладные объекты доступны только на сервере, в то время как объектами данных форм можно пользоваться и на сервере, и на клиенте.\r\n</div>\r\n<p>\r\nВ редакторе формы вместо имен этих типов обычно отображаются те типы, данные которых содержит реквизит. Например, если реквизит <code>Объект</code> содержит данные элемента справочника <code>Клиенты</code>, то в колонке «Тип» отображается ненастоящий тип этого реквизита формы — <code>ДанныеФормыСтруктура</code>, а тип прикладного объекта, данные которого содержатся в этом реквизите — <code>СправочникОбъект.Клиенты</code>. Чтобы было понятно, что это «ненастоящий тип» реквизита, тип прикладного объекта показывается в круглых скобках.\r\n</p>\r\n<p>\r\nТаким образом форма содержит некоторую «проекцию» данных объектов в виде своих собственных типов данных и автоматически выполняет преобразование между ними при необходимости. Однако, можно и самостоятельно преобразовать объект в данные формы и обратно с использованием глобальных методов:\r\n</p>\r\n<ul>\r\n  <li><code>ЗначениеВДанныеФормы()</code> — преобразует объект прикладного типа в данные формы;</li>\r\n  <li><code>ДанныеФормыВЗначение()</code> — преобразует данные формы в объект прикладного типа.</li>\r\n</ul>\r\n<p>\r\nАналогичные методы, предназначенные для конвертирования значений реквизитов формы в прикладные объекты и обратно, существуют и у самой управляемой формы:\r\n</p>\r\n<ul>\r\n  <li><code>ЗначениеВРеквизитФормы()</code> — преобразует объект прикладного типа в реквизит управляемой формы;</li>\r\n  <li><code>РеквизитФормыВЗначение()</code> — преобразует реквизит управляемой формы в значение прикладного типа.</li>\r\n</ul>\r\n<p>\r\nМетоды, работающие с прикладными объектами, доступны только в серверных процедурах формы. При выполнении стандартных действий формы с основным реквизитом (открытие формы, выполнение стандартной команды <code>Записать()</code> и т. д.) преобразование выполняется автоматически.\r\n</p>\r\n<p>\r\nРассмотрим пример преобразования данных. Пусть у нас есть особенная форма, в которой в качестве одного из реквизитов (<code>ТоварДляМодификации</code>) используются данные элемента справочника <code>Товары</code>. При создании формы на сервере мы по некоторому алгоритму определяем, какой именно это товар, и читаем его данные в реквизит формы. При этом используется преобразование данных <code>ЗначениеВДанныеФормы()</code>.\r\n</p>\r\n[язык]\r\n&НаСервере\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n    ОбъектТовар = Справочники.Товары.НайтиПоНаименованию(\"Кофейник\").ПолучитьОбъект();\r\n    ЗначениеВДанныеФормы(ОбъектТовар, ТоварДляМодификации);\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура Записать()\r\n    ЗаписатьНаСервере();\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура ЗаписатьНаСервере()\r\n    ОбъектТовар = ДанныеФормыВЗначение(\r\n        ТоварДляМодификации,\r\n        Тип(\"СправочникОбъект.Товары\")\r\n    );\r\n    ОбъектТовар.Записать();\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nКак уже упоминалось, у формы также есть методы, позволяющие преобразовать прикладные данные в реквизит формы и наоборот. Использование данных методов обычно удобнее, так как они имеют, например, информацию о типе реквизита формы. Кроме этого, метод <code>РеквизитФормыВЗначение()</code> выполняет установку соответствия данных формы и объекта, которая используется при формировании сообщений.\r\n</p>\r\n<p>\r\nПриведем пример использования этих методов. В серверной процедуре формы мы получаем прикладной объект из реквизита формы и выполняем метод этого прикладного объекта <code>Пересчитать()</code>. Затем данные объекта, измененные в результате пересчета, преобразуем обратно в реквизит формы.\r\n</p>\r\n[язык]\r\n&НаСервере\r\nПроцедура ПересчитатьНаСервере()\r\n    // Преобразуем реквизит Объект в прикладной объект\r\n    Документ = РеквизитФормыВЗначение(\"Объект\");\r\n    // Выполняем пересчет методом, определенным в модуле документа\r\n    Документ.Пересчитать();\r\n    // Преобразуем прикладной объект обратно в реквизит\r\n    ЗначениеВРеквизитФормы(Документ, \"Объект\");\r\nКонецПроцедуры\r\n[/язык]','2018-05-19 14:17:49',1),(111,7,'Заполнение реквизитов нового документа','','','1С:Предприятие, Документ, ЗаполнятьИзДанныхЗаполнения, ЗначениеЗаполнения, ОбработкаЗаполнения','Частая задача — сделать так, чтобы форма нового объекта открывалась не «пустая», а уже заполненная некоторыми начальными данными. Для самых простых случаев можно использовать свойство ЗначениеЗаполнения, которое есть у реквизитов объектов конфигурации.','<p>\r\nЧастая задача — сделать так, чтобы форма нового объекта открывалась не «пустая», а уже заполненная некоторыми начальными данными. Для самых простых случаев можно использовать свойство <code>ЗначениеЗаполнения</code>, которое есть у реквизитов объектов конфигурации. В более сложных случаях можно использовать свойство <code>ЗаполнятьИзДанныхЗаполнения</code>. Если ни тот, ни другой способы не подходят, на встроенном языке можно описать собственный алгоритм начального заполнения данных нового объекта.\r\n\r\n<h2>Свойство ЗначениеЗаполнения</h2>\r\n<p>\r\nНапример, есть документ <code>Накладная</code> с реквизитом <code>Склад</code>. В подавляющем большинстве случаев товары приходуются на главный склад, и лишь в отдельных редких случаях они могут приходоваться на другие склады. Чтобы облегчить работу оператора и не заставлять его каждый раз выбирать один и тот же склад в новых накладных, можно поступить следующим образом.\r\n</p>\r\n<p>\r\nУ реквизитов объектов конфигурации существует свойство <code>ЗначениеЗаполнения</code>. Реквизит <code>Склад</code> имеет тип ссылки на справочник <code>Склады</code>, а в справочнике <code>Склады</code> существует предопределенный элемент <code>ГлавныйСклад</code>. Тогда прямо в конфигураторе можно указать, что в новых документах реквизит <code>Склад</code> будет сразу же заполнен ссылкой на <code>ГлавныйСклад</code>:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/111/1.png\" alt=\"\" />\r\n</p>\r\n\r\n<h2>Cвойство ЗаполнятьИзДанныхЗаполнения</h2>\r\n<p>\r\nПусть у пользователя список накладных отобран по поставщику и по складу. Необходимо сделать так, чтобы при вводе новой накладной эти значения (поставщик и склад) сразу же подставлялись в нужные поля накладной. Для решения этой задачи достаточно открыть накладную в конфигураторе и для ее реквизитов <code>Поставщик</code> и <code>Склад</code> установить свойство <code>ЗаполнятьИзДанныхЗаполнения</code>:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/111/2.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nТеперь будет происходить следующее. В режиме 1С:Предприятие пользователь отобрал список накладных по некоторому поставщику и некоторому складу. При вводе новой накладной с помощью команды «Создать» списка, поля <code>Поставщик</code> и <code>Склад</code> будут заполнены именно теми значениями, по которым отобран список накладных:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/111/4.png\" alt=\"\" />\r\n</p>\r\n\r\n<h2>Собственный алгоритм заполнения реквизитов</h2>\r\n<p>\r\nДля этого предназначено событие объекта <code>ОбработкаЗаполнения</code>. Первым параметром процедуре <code>ОбработкаЗаполнения()</code> передаются <code>ДанныеЗаполнения</code>. Проанализировав их тип, можно определить, каким именно образом вводится новый объект, и выполнить соответствующий этому варианту алгоритм. Например:\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)\r\n                \r\n     Если ДанныеЗаполнения = Неопределено Тогда \r\n          // «Простой» ввод нового объекта\r\n                               \r\n     ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип(\"СправочникСсылка.Поставщики\") Тогда \r\n          // Новый объект вводится на основании другого объекта. \r\n          // В этом случае в данные заполнения передается ссылка на объект, являющийся основанием.\r\n          // В данном случае обрабатывается ввод на основании элемента справочника Поставщики.\r\n                               \r\n     ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип(\"Структура\") Тогда\r\n          // Новый объект вводится командой из отобранного списка.\r\n          // В данных заполнения будет структура, содержащая значения отбора:\r\n          // «Поставщик» — СсылкаНаПоставщика\r\n          // «Склад» — СсылкаНаСклад\r\n                               \r\n     КонецЕсли;\r\n                               \r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nПараметр <code>СтандартнаяОбработка</code> позволяет управлять дальнейшим развитием событий. Если ему присвоить значение <code>Ложь</code>, то никаких других действий по заполнению реквизитов формы платформа предпринимать не будет, а сразу создаст форму и вызовет ее серверное событие <code>ПриСозданииНаСервере</code>.\r\n</p>\r\n<p>\r\nЕсли же не менять стандартное значение этого параметра, то после выхода из этого обработчика платформа попытается самостоятельно заполнить реквизиты объекта, подлежащие заполнению. Незаполненными она будет считать те реквизиты, которые имеют стандартное значение своего типа. Например, для типа <code>Число</code> это значение 0, для типа <code>Строка</code> — пустая строка, а для типа <code>Ссылка</code> — пустая ссылка.\r\n</p>\r\n<p>\r\nДля простоты предположим, что у объекта всего один реквизит, подлежащий заполнению. Тогда платформа будет действовать по следующему алгоритму:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/111/5.png\" alt=\"\" />\r\n</p>\r\n<ul>\r\n  <li>Реквизит заполнен — сразу будет вызван обработчик события <code>ПриСозданииНаСервере</code>.</li>\r\n  <li>Реквизит не заполнен — платформа попытается заполнить его из <code>ДанныеЗаполнения</code>. После этого снова проверит, заполнен реквизит или нет:\r\n    <ul>\r\n      <li>Реквизит заполнен — сразу будет вызван обработчик события <code>ПриСозданииНаСервере</code>.</li>\r\n      <li>Реквизит не заполнен — платформа попытается заполнить его из <code>ЗначениеЗаполнения</code>. После этого будет вызван обработчик события <code>ПриСозданииНаСервере</code>.</li>\r\n    </ul>\r\n  </li>\r\n</ul>','2018-05-20 13:53:26',1),(112,7,'Как программно открыть и заполнить форму?','','','1С:Предприятие, Заполнить, ЗаполнятьИзДанныхЗаполнения, ЗначениеЗаполнения, ОбработкаЗаполнения, УправляемаяФорма','Есть сложная форма, с большим количеством реквизитов. Для многих из них в конфигураторе установлено свойство ЗаполнятьИзДанныхЗаполнения. В результате при открытии этой формы для нового объекта ее реквизиты могут быть заполнены различными начальными значениями.','<p>\r\nРассмотрим такую задачу. Есть сложная форма, с большим количеством реквизитов. Для многих из них в конфигураторе установлено свойство <code>ЗаполнятьИзДанныхЗаполнения</code>. В результате при открытии этой формы для нового объекта ее реквизиты могут быть заполнены различными начальными значениями. Это зависит и от точки навигации, в которой расположена команда создания нового объекта, и от программного алгоритма, описанного в модуле самого объекта.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/112/1.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nТеперь предположим, что в процессе выполнения некоторого программного кода требуется открыть эту форму. Но не «пустую», а так, чтобы ее реквизиты были заполнены теми значениями, которые должны получиться в результате работы всех алгоритмов, заложенных в форму.\r\n</p>\r\n<p>\r\nМожно было бы получить программный объект формы и затем напрямую установить значения ее реквизитов. Но тогда в этом месте программного кода пришлось бы дублировать весь тот алгоритм, который отвечает за начальное заполнение формы. Это может быть трудоемко, и поддерживать такое решение сложно, т. к. при изменении этого алгоритма его придется менять не в одном месте, в модуле объекта, а синхронно еще в нескольких местах конфигурации. Нет никакой гарантии, что что-то не будет пропущено и что все такие изменения будут работать правильно.\r\n</p>\r\n<p>\r\nПоэтому существует другой, более удобный и простой способ решения такой задачи. Открывая форму программно, можно передать ей набор данных заполнения, который она получила бы, если бы открывалась интерактивной командой.\r\n</p>\r\n<p>\r\nНапример, программно нужно открыть форму новой накладной точно так, как если бы она открывалась интерактивной командой из списка накладных, отобранного по поставщику и складу. Предположим, что в переменных <code>СсылкаНаПоставщика</code> и <code>СсылкаНаСклад</code> у нас имеются необходимые ссылки. Тогда можно использовать следующий код:\r\n</p>\r\n[язык]\r\nЭлементыОтбора = Новый Структура(\"Поставщик, Склад\", СсылкаНаПоставщика, СсылкаНаСклад);\r\nПараметрыФормы = Новый Структура(\"ЗначенияЗаполнения\", ЭлементыОтбора);\r\nОткрытьФорму(\"Документ.Накладная.ФормаОбъекта\", ПараметрыФормы);\r\n[/язык]\r\n<p> \r\nДанные заполнения можно передать в открываемую форму с помощью параметра <code>ЗначенияЗаполнения</code>. В этот параметр нужно передать те данные, которые передала бы туда платформа, если бы выполнялось аналогичное интерактивное действие.\r\n</p>\r\n<p>\r\nВ нашем случае платформа передала бы в данные заполнения ссылку на поставщика и ссылку на склад, по которым отобран список накладных. Поэтому мы в данные заполнения передаем структуру, содержащую два элемента: для реквизита <code>Поставщик</code> — ссылку на поставщика, а для реквизита <code>Склад</code> — ссылку на склад.\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)\r\n\r\n    Если ДанныеЗаполнения = Неопределено Тогда \r\n        // «Простой» ввод новой накладной\r\n        // ..........                     \r\n    ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип(\"Структура\") Тогда\r\n        // Новая накладная создается командой из отобранного списка накладных\r\n        Поставщик = ДанныеЗаполнения.Поставщик;\r\n        Склад = ДанныеЗаполнения.Склад;\r\n    ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип(\"СправочникСсылка.Поставщики\") Тогда\r\n        // Новая накладная создается на основании элемента справочника «Поставщики»\r\n        Поставщик = ДанныеЗаполнения.Ссылка;\r\n    ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип(\"СправочникСсылка.Склады\") Тогда\r\n        // Новая накладная создается на основании элемента справочника «Склады»\r\n        Склад = ДанныеЗаполнения.Ссылка;\r\n    КонецЕсли;\r\n\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nМожет встретиться и более сложная ситуация, когда в программном коде необходимо полностью съимитировать интерактивные действия пользователя по созданию нового объекта, не открывая форму этого объекта.\r\n</p>\r\n<p>\r\nВ этом случае можно создать программно объект, а затем вызвать его метод <code>Заполнить()</code>. В этом случае платформа выполнит все те же действия и вызовет все те же события, которые она бы вызвала в случае интерактивного создания нового объекта. В метод <code>Заполнить()</code> в качестве параметра точно так же можно передать структуру, содержащую данные заполнения:\r\n</p>\r\n[язык]\r\nОбъектНакладной = Документы.Накладная.СоздатьДокумент();\r\nЭлементыОтбора = Новый Структура(\r\n    \"Поставщик, Склад\",\r\n    СсылкаНаПоставщика,\r\n    СсылкаНаСклад\r\n);\r\nОбъектНакладной.Заполнить(ЭлементыОтбора);\r\n// Действия, имитирующие интерактивный ввод данных пользователем\r\n// ..........\r\nОбъектНакладной.Дата = ТекущаяДатаСеанса();\r\n// ..........\r\nОбъектНакладной.Записать();\r\n[/язык]','2018-05-21 13:07:32',1),(113,10,'Массивы в сценариях оболочки','','','Bash, CLI, Linux, declare, unset, Коллекция, Массив, ТипыДанных','Командный интерпретатор bash помимо переменных позволяет использовать массивы. Какое-либо значение размещается в массиве с указанием числового или строкового индекса. Индекс — это уникальный для конкретного массива ключ, позволяющий получить связанное с ним значение.','<p>\r\nКомандный интерпретатор bash помимо переменных позволяет использовать массивы. Какое-либо значение размещается в массиве с указанием числового или строкового индекса. Индекс — это уникальный для конкретного массива ключ, позволяющий получить связанное с ним значение. Для доступа к значениям массива используются фигурные скобки.\r\n</p>\r\n[cli]\r\n$ array=(1 2 3 4 5)  # инициализация массива с определением элементов\r\n$ echo ${array[0]}\r\n1\r\n[/cli]\r\n[cli]\r\n$ array=(first second third)\r\n$ echo ${array[@]}  # получение значений всех элементов\r\nfirst second third\r\n[/cli]\r\n<p>\r\nПустой массив можно создать с помощью команды <code>declare</code>. Ей необходимо передать ключ <code>-a</code> (массив с числовыми индексами) и идентификатор массива:\r\n</p>\r\n[cli]\r\n$ declare -a digits  # создание пустого массива\r\n$ digits=()          # аналогично предыдущему примеру\r\n$ digits[0]=11\r\n$ digits[1]=22\r\n[/cli]\r\n<p>\r\nИндексы элементов массива можно указать явно:\r\n[cli]\r\n$ digits=([1000]=120 [2000]=165) # явное указание индексов через квадратные скобки\r\n[/cli]\r\n<p>\r\nСложить элементы числового массива:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\ndigits=(11 22)\r\necho Сумма значений ${digits[0]} и ${digits[1]} равна $(( ${digits[0]} + ${digits[1]} ))\r\n[/bash]\r\n[cli]\r\n$ ./sum.sh\r\nСумма значений 11 и 22 равна 33\r\n[/cli]\r\n<p>\r\nВывести все элементы массива, начиная с третьего:\r\n</p>\r\n[cli]\r\n$ digits=(11 22 33 44 55 66 77)\r\n$ echo ${array[@]:2}\r\n33 44 55 66 77\r\n[/cli]\r\n<p>\r\nВывести четыре элемента, начиная с третьего:\r\n</p>\r\n[cli]\r\n$ digits=(11 22 33 44 55 66 77)\r\n$ echo ${array[@]:2:4}\r\n33 44 55 66\r\n[/cli]\r\n<p>\r\nВывести последний элемент массива:\r\n</p>\r\n[cli]\r\n$ digits=(11 22 33 44 55 66 77)\r\n$ echo ${array[@]:(-1)}\r\n77\r\n[/cli]\r\n<p>\r\n<strong>Количество</strong> элементов в массиве:\r\n</p>\r\n[cli]\r\n$ digits=(11 22 33 44 55 66 77)\r\n$ echo ${#array[@]}\r\n7\r\n[/cli]\r\n<p>\r\nПеребрать элементы массива в цикле:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\n\r\nitems=(Первый Второй Третий Четвертый Пятый)\r\nfor item in ${items[@]} ; do\r\n    echo $item\r\ndone\r\n[/bash]\r\n<p>\r\n<strong>Удалить</strong> массив можно с помощью команды <code>unset</code>:\r\n</p>\r\n[cli]\r\n$ unset digits\r\n[/cli]\r\n\r\n<h2>Ассоциативные массивы</h2>\r\n<p>\r\nАссоциативными называются массивы, в которых индексы задаются с помощью строковых значений. Создавая массив через круглые скобки, можно задать каждому элементу строковой индекс, указав его в квадратных скобках:\r\n</p>\r\n[cli]\r\n$ capitals=([russia]=\'Москва\' [britain]=\'Лондон\')  # указание индексов при инициализации\r\n$ capitals[france]=\'Париж\'  # создание элементов с указанием индекса\r\n$ echo \"Столица России: ${capitals[russia]}\"\r\nСтолица России: Москва\r\n[/cli]\r\n<p>\r\nСоздание пустого ассоциативного массива через <code>declare</code> отличается лишь тем, что необходимо указать ключ <code>-A</code> (в верхнем регистре):\r\n</p>\r\n[cli]\r\n$ declare -A capitals  # создание пустого ассоциативного массива\r\n[/cli]','2018-05-19 13:59:24',1);
INSERT INTO `blog_posts` VALUES (114,7,'Программное создание таблицы формы','','','1С:Предприятие, ЗначениеВРеквизитФормы, ИзменитьРеквизиты, РеквизитФормыВЗначение, ТаблицаЗначений, УправляемаяФорма, ЭлементФормы','Задача в том, чтобы отображать на форме таблицу значений, структура которой может меняться. К примеру в результате запроса к первой таблице мы получаем пять колонок, а в результате запроса ко второй таблице семь колонок. Соответственно при выполнении каждого из запросов, старые колонки нужно убрать, а новые добавить.','<p>\r\nЗадача в том, чтобы отображать на форме таблицу значений, структура которой может меняться. К примеру в результате запроса к первой таблице мы получаем пять колонок, а в результате запроса ко второй таблице семь колонок. Соответственно при выполнении каждого из запросов, старые колонки нужно убрать, а новые добавить.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/114/1.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nСоздаем реквизит формы <code>ДанныеТаблицы</code>, тип <code>ТаблицаЗначений</code>, на форму его не выносим. И саму таблицу формы и ее колонки будем создавать программно. Для удобства тестирования добавим еще команду формы <code>СоздатьТаблицу</code>.\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура СоздатьТаблицу(Команда)\r\n	СоздатьТаблицуНаСервере();\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура СоздатьТаблицуНаСервере()\r\n\r\n	// Получаем случайную таблицу значений\r\n	НоваяТаблицаЗначений = СоздатьСлучайнуюТаблицуЗначений();\r\n	\r\n	// Чтобы воспользоваться методом управляемой формы\r\n	// ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты)\r\n	// надо сформировать два массива: ДобавляемыеРеквизиты и\r\n	// УдаляемыеРеквизиты\r\n	\r\n	// Удаляемые реквизиты: колонки старой таблицы значений\r\n    РеквизитДанныеТаблицы = РеквизитФормыВЗначение(\"ДанныеТаблицы\");\r\n    УдаляемыеРеквизиты = Новый Массив();\r\n    Для Каждого Колонка Из РеквизитДанныеТаблицы.Колонки Цикл\r\n        УдаляемыеРеквизиты.Добавить(\"ДанныеТаблицы.\" + Колонка.Имя);       \r\n	КонецЦикла;\r\n	\r\n    // Добавляемые реквизиты: колонки новой таблицы значений\r\n    ДобавляемыеРеквизиты = Новый Массив();\r\n    Для Каждого Колонка Из НоваяТаблицаЗначений.Колонки Цикл\r\n        МассивТипов = Новый Массив();\r\n        МассивТипов.Добавить(Колонка.ТипЗначения);\r\n        НоваяКолонка = Новый РеквизитФормы(\r\n			Колонка.Имя,\r\n            Новый ОписаниеТипов(МассивТипов),\r\n			\"ДанныеТаблицы\"\r\n		);\r\n        ДобавляемыеРеквизиты.Добавить(НоваяКолонка);\r\n	КонецЦикла;\r\n	\r\n	// Удаляем старые реквизиты и добавляем новые\r\n	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);\r\n	\r\n	// Присваиваем новое значение реквизиту формы\r\n	ЗначениеВРеквизитФормы(НоваяТаблицаЗначений, \"ДанныеТаблицы\");\r\n	\r\n	// Теперь удаляем таблицу с формы и добавляем ее заново.\r\n	// После этого в цикле добавляем колонки таблицы и для\r\n	// каждой указываем наименование, тип, родителя и путь\r\n	// к данным\r\n	\r\n    // Удаляем таблицу с формы\r\n    ЭлементТаблица = Элементы.Найти(\"МояТаблицаФормы\");\r\n    Если ЭлементТаблица <> Неопределено Тогда\r\n        Элементы.Удалить(ЭлементТаблица);       \r\n    КонецЕсли;    \r\n    // И добавляем ее заново\r\n    ЭлементТаблица = Элементы.Добавить(\"МояТаблицаФормы\", Тип(\"ТаблицаФормы\"));\r\n    ЭлементТаблица.ПутьКДанным = \"ДанныеТаблицы\";\r\n    ЭлементТаблица.Отображение = ОтображениеТаблицы.Список;\r\n	\r\n    // Выводим на форму колонки таблицы\r\n	ЭлементТаблица = Элементы.МояТаблицаФормы;\r\n    Для Каждого Колонка Из НоваяТаблицаЗначений.Колонки Цикл\r\n        НовыйЭлементФормы = Элементы.Добавить(\r\n			\"ДанныеТаблицы\" + Колонка.Имя,\r\n            Тип(\"ПолеФормы\"),\r\n			ЭлементТаблица\r\n		);\r\n        НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;\r\n        НовыйЭлементФормы.ПутьКДанным = \"ДанныеТаблицы.\" + Колонка.Имя;\r\n    КонецЦикла;\r\n		\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nФункция СоздатьСлучайнуюТаблицуЗначений()\r\n\r\n	Если НомерТаблицы = 0 Тогда\r\n\r\n		ТаблицаЗначений = Новый ТаблицаЗначений();\r\n		ТаблицаЗначений.Колонки.Добавить(\"Код\");\r\n		ТаблицаЗначений.Колонки.Добавить(\"Наименование\");\r\n		ТаблицаЗначений.Колонки.Добавить(\"Количество\");\r\n\r\n		// делаем выборку\r\n		Выборка = Справочники.Номенклатура.Выбрать();\r\n		Пока Выборка.Следующий() Цикл\r\n		    // добавляем новуй строку в таблицу значений\r\n		    НоваяСтрока = ТаблицаЗначений.Добавить();\r\n		    НоваяСтрока.Код = Выборка.Код;\r\n		    НоваяСтрока.Наименование = Выборка.Наименование;\r\n		    НоваяСтрока.Количество = 1;\r\n		КонецЦикла;\r\n		\r\n		НомерТаблицы = 1\r\n\r\n	Иначе\r\n\r\n		ТаблицаЗначений = Новый ТаблицаЗначений();\r\n		ТаблицаЗначений.Колонки.Добавить(\"Код\");\r\n		ТаблицаЗначений.Колонки.Добавить(\"Фамилия\");\r\n\r\n		// делаем выборку\r\n		Выборка = Справочники.Сотрудники.Выбрать();\r\n		Пока Выборка.Следующий() Цикл\r\n		    // добавляем новуй строку в таблицу значений\r\n		    НоваяСтрока = ТаблицаЗначений.Добавить();\r\n		    НоваяСтрока.Код = Выборка.Код;\r\n		    НоваяСтрока.Фамилия = Выборка.Наименование;\r\n		КонецЦикла;\r\n		\r\n		НомерТаблицы = 0\r\n\r\n	КонецЕсли;\r\n	\r\n	Возврат ТаблицаЗначений;\r\n\r\nКонецФункции\r\n[/язык]\r\n<p>\r\nРеквизит <code>НомерТаблицы</code> поочередно принимает значение нуля или единицы и нужен лишь для того, чтобы каждый раз получать другую таблицу значений.\r\n</p>\r\n\r\n<h2>Справка</h2>\r\n<h3>УправляемаяФорма.ИзменитьРеквизиты()</h3>\r\n[язык]\r\nУправляемаяФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты)\r\n[/язык]\r\n<p>Параметры:</p>\r\n<ul>\r\n  <li><code>ДобавляемыеРеквизиты</code> (необязательный, тип <code>Массив</code>). Массив, содержащий объекты типа <code>РеквизитФормы</code>. Добавлять можно реквизиты верхнего уровня и вложенные реквизиты, являющиеся колонками. К добавленным реквизитам верхнего уровня из модуля можно обращаться только с помощью конструкции <code>ЭтотОбъект</code>.</li>\r\n  <li><code>УдаляемыеРеквизиты</code> (необязательный, тип <code>Массив</code>). Массив, содержащий строки, описывающие пути к удаляемым реквизитам. Удалять можно только ранее программно добавленные реквизиты.</li>\r\n</ul>\r\n<p>Описание:</p>\r\n<ul>\r\n  <li>Изменяет структуру реквизитов формы. Сначала выполняется удаление реквизитов. Таким образом массивы добавляемых и удаляемых реквизитов могут содержать реквизиты с одинаковым путём.</li>\r\n  <li>Внимание! Действия добавления и удаления выполняются за один вызов. Следует учитывать, что операция изменения состава реквизитов является ресуркоемкой, поэтому операции изменения состава реквизитов формы выполняются пакетным образом.</li>\r\n</ul>\r\n<p>Доступность:</p>\r\n<ul>\r\n  <li>Сервер, мобильное приложение (сервер).</li>\r\n</ul>\r\n\r\n<h3>ВсеЭлементыФормы.Добавить()</h3>\r\n[язык]\r\nВсеЭлементыФормы.Добавить(Имя, ТипЭлемента, Родитель) \r\n[/язык]\r\n<p>Параметры:</p>\r\n<ul>\r\n  <li><code>Имя</code> (обязательный, тип <code>Строка</code>). Уникальное имя добавляемого элемента.</li> \r\n  <li><code>ТипЭлемента</code> (обязательный, тип <code>Тип</code>). Тип добавляемого элемента.</li>\r\n  <li><code>Родитель</code> (необязательный, тип: <code>ГруппаФормы</code>; <code>ТаблицаФормы</code>; <code>УправляемаяФорма</code>). Родитель для добавляемого элемента. Если не указан, то добавляется на верхний уровень.</li>\r\n</ul>\r\n<p>Возвращаемое значение:</p>\r\n<ul>\r\n  <li>Тип: <code>ДекорацияФормы</code>; <code>ГруппаФормы</code>; <code>КнопкаФормы</code>; <code>ТаблицаФормы</code>; <code>ПолеФормы</code>.</li> \r\n</ul>\r\n<p>Описание:</p>\r\n<ul>\r\n  <li>Добавляет элемент в коллекцию.</li>\r\n</ul>\r\n<p>Доступность:</p> \r\n<ul>\r\n  <li>Сервер, мобильное приложение (сервер).</li>\r\n</ul>','2018-05-23 13:27:37',1),(115,7,'Добавление реквизитов и элементов на форму','','','1С:Предприятие, ИзменитьРеквизиты, ПриСозданииНаСервере, Реквизит, УправляемаяФорма, ЭлементФормы','Посмотрим, как можно программно добавить реквизиты и элементы на форму. В форме элемента справочника «Номенклатура» создадим два реквизита формы и элементы для них. Новые элементы объединим в группу с горизонтальной группировкой. Сейчас форма имеет следующий вид…','<p>\r\nПосмотрим, как можно программно добавить реквизиты и новые элементы на форму. В форме элемента справочника «Номенклатура» создадим два реквизита формы и элементы для них. Новые элементы объединим в группу с горизонтальной группировкой.\r\n</p>\r\n<p>\r\nСейчас форма имеет следующий вид:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/115/1.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nПосле добавления новых элементов она будет иметь вид:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/115/2.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nИтак, добавляем реквизиты:\r\n</p>\r\n<ul>\r\n  <li><code>ЕдиницаИзмерения</code>, тип <code>СправочникСсылка.ЕдиницыИзмерения</code>;</li>\r\n  <li><code>ТекущийОстаток</code>, тип <code>Число</code>.</li>\r\n</ul>\r\n[язык]\r\n&НаСервере\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n\r\n    #Область ДобавлениеРеквизитовФормы\r\n\r\n    // Массив для новых реквизитов\r\n    ДобавляемыеРеквизиты = Новый Массив();\r\n\r\n    // Описываем новые ревизиты формы\r\n    РеквизитЕдиницаИзмерения = Новый РеквизитФормы(\r\n        \"ЕдиницаИзмерения\",\r\n        Новый ОписаниеТипов(\"СправочникСсылка.ЕдиницыИзмерения\"),\r\n        ,\r\n        \"Единица измерения\"\r\n    );\r\n    РеквизитТекущийОстаток = Новый РеквизитФормы(\r\n        \"ТекущийОстаток\",\r\n        Новый ОписаниеТипов(\"Число\", , , Новый КвалификаторыЧисла(10, 3)),\r\n        ,\r\n        \"Текущий остаток\"\r\n    );\r\n\r\n    // Заполняем массив новых реквизитов\r\n    ДобавляемыеРеквизиты.Добавить(РеквизитЕдиницаИзмерения);\r\n    ДобавляемыеРеквизиты.Добавить(РеквизитТекущийОстаток);\r\n\r\n    // Добавляем новые реквизиты в форму\r\n    ИзменитьРеквизиты(ДобавляемыеРеквизиты);\r\n\r\n    #КонецОбласти\r\n\r\n    #Область ДобавлениеЭлементовФормы\r\n\r\n    // Добавляем группу без отображения на форме\r\n    НоваяГруппаФормы = Элементы.Добавить(\r\n        \"ЕдиницаИзмеренияОстаток\",\r\n        Тип(\"ГруппаФормы\")\r\n    );\r\n    НоваяГруппаФормы.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;\r\n    НоваяГруппаФормы.Отображение         = ОтображениеОбычнойГруппы.Нет;\r\n    НоваяГруппаФормы.ОтображатьЗаголовок = Ложь;\r\n    НоваяГруппаФормы.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;\r\n\r\n    // Добавляем элементы внутрь новой группы\r\n    НовыйЭлемент = Элементы.Добавить(\r\n        \"ЯчейкаХранения\",\r\n        Тип(\"ПолеФормы\"),\r\n        НоваяГруппаФормы\r\n    );\r\n    НовыйЭлемент.ПутьКДанным    = \"ЕдиницаИзмерения\";\r\n    НовыйЭлемент.Вид            = ВидПоляФормы.ПолеВвода;\r\n    НовыйЭлемент.ТолькоПросмотр = Истина;\r\n\r\n    НовыйЭлемент = Элементы.Добавить(\r\n        \"ТекущийОстаток\",\r\n        Тип(\"ПолеФормы\"),\r\n        НоваяГруппаФормы\r\n    );\r\n    НовыйЭлемент.ПутьКДанным    = \"ТекущийОстаток\";\r\n    НовыйЭлемент.Вид            = ВидПоляФормы.ПолеВвода;\r\n    НовыйЭлемент.ТолькоПросмотр = Истина;\r\n\r\n    #КонецОбласти\r\n\r\n    #Область ЗаполнениеДанных\r\n\r\n    // Имитируем заполнение данных\r\n    ЭтаФорма.ЕдиницаИзмерения = ПредопределенноеЗначение(\r\n        \"Справочник.ЕдиницыИзмерения.Штука\"\r\n    );\r\n    ЭтаФорма.ТекущийОстаток = 12;\r\n\r\n    #КонецОбласти\r\n\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nДля удаления необходимо передать массив реквизитов на удаление в качестве второго параметра метода формы <code>ИзменитьРеквизиты()</code>. Удалять можно только реквизиты, созданные программно.\r\n</p>\r\n\r\n<p>\r\nТеперь посмотрим, как можно изменить <strong>основной реквизит</strong> формы. Изменим табличную часть <code>Состав</code> документа <code>РасходнаяНакладная</code>:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/115/3.png\" alt=\"\" />\r\n</p>\r\n[язык]\r\n&НаСервере\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n\r\n    // Массив для новых реквизитов\r\n    ДобавляемыеРеквизиты = Новый Массив();\r\n\r\n    // Описываем новый ревизит формы\r\n    РеквизитЕдиницаИзмерения = Новый РеквизитФормы(\r\n        \"ЕдиницаИзмерения\",\r\n        Новый ОписаниеТипов(\"СправочникСсылка.ЕдиницыИзмерения\"),\r\n        \"Объект.Состав\",\r\n        \"Единица измерения\"\r\n    );\r\n\r\n    // Заполняем массив новых реквизитов\r\n    ДобавляемыеРеквизиты.Добавить(РеквизитЕдиницаИзмерения);\r\n\r\n    // Добавляем новый реквизит в форму\r\n    ИзменитьРеквизиты(ДобавляемыеРеквизиты);\r\n\r\n    // Добавляем элемент формы для нового реквизита\r\n    НовыйЭлемент = Элементы.Добавить(\r\n        \"ЕдиницаИзмерения\",\r\n        Тип(\"ПолеФормы\"),\r\n        Элементы.Состав\r\n    );\r\n    НовыйЭлемент.ПутьКДанным = \"Объект.Состав.ЕдиницаИзмерения\";\r\n    НовыйЭлемент.Вид         = ВидПоляФормы.ПолеВвода;\r\n\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\n<img src=\"/files/blog/115/4.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nВажно понимать, что данные добавленного реквизита сохраняться в ИБ не будут.\r\n</p>','2018-05-23 18:00:30',1),(116,7,'Как при открытии формы определить, что создается новый элемент?','','','1С:Предприятие, Заполнить, ЗаполнятьИзДанныхЗаполнения, ЗначениеЗаполнения, Ключ, ОбработкаЗаполнения, ПриСозданииНаСервере','Необходимость в определении того, что создается новый элемент, возникает тогда, когда новый элемент нужно предварительно заполнить какими-то данными. Все действия, которые разработчику требуется сделать при создании нового объекта, должны быть выполнены на сервере.','<p>\r\nНеобходимость в определении того, что создается новый элемент, возникает тогда, когда новый элемент нужно предварительно заполнить какими-то данными. Все действия, которые разработчику требуется сделать при создании нового объекта, должны быть выполнены на сервере.\r\n</p>\r\n<p>\r\nПричем действия с данными самого объекта и действия с внешним видом его формы должны быть разделены. Действия с данными нужно выполнять в самом объекте, а внешним видом формы нужно управлять уже в форме, но в серверной процедуре.\r\n</p>\r\n<p>\r\nКроме этого могут понадобиться и другие действия при открытии формы, например открыть связанную форму, выдать предупреждение и т.д., которые нельзя сделать на сервере — их нужно выполнять в форме, но уже в клиентской процедуре.\r\n</p>\r\n<p>\r\nПоследовательность событий, которые происходят при открытии формы нового элемента, можно представить следующей схемой:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/116/1.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nПрежде всего, при заполнении нового объекта данными, можно попробовать обойтись вообще без написания какого-либо кода. Для этого у реквизитов объектов конфигурации есть свойства <code>ЗначениеЗаполнения</code> и <code>ЗаполнятьИзДанныхЗаполнения</code>. Эти свойства позволяют визуально (в конфигураторе) задать правила, по которым реквизит будет заполняться данными при создании нового объекта.\r\n</p>\r\n<p>\r\nЕсли этих возможностей недостаточно, то тогда нужно использовать возможности встроенного языка.\r\n</p>\r\n<p>\r\nДействия с данными объекта нужно выполнять в модуле объекта, в обработчике события <code>ОбработкаЗаполнения</code>. Этот событие возникает только при создании новых объектов, при открытии форм существующих объектов это событие не вызывается. Поэтому в нем не нужно узнавать, новый это объект, или нет. Нужно только описать алгоритм заполнения объекта данными. При этом следует учитывать, что это событие будет вызываться в нескольких случаях:\r\n</p>\r\n<ul>\r\n  <li>при интерактивном создании нового объекта</li>\r\n  <li>при вводе на основании</li>\r\n  <li>при выполнении метода объекта <code>Заполнить()</code></li>\r\n</ul>\r\n<p>\r\nПри этом параметр <code>ДанныеЗаполнения</code>, передаваемый в этот обработчик, может иметь различные значения в зависимости от того, каким образом создается новый элемент. Например, он может иметь тип <code>Ссылка</code>, если новый объект вводится на основании. Или он может иметь тип <code>Структура</code>, если новый объект создается интерактивной командой из списка, в котором установлен отбор. В этом случае структура будет содержать значения элементов отбора этого списка. Также этот параметр может иметь тип <code>Неопределено</code>, если новый элемент создается интерактивной командой из панели действий.\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)\r\n                \r\n     Если ДанныеЗаполнения = Неопределено Тогда \r\n          // «Простой» ввод нового объекта\r\n                               \r\n     ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип(\"СправочникСсылка.Поставщики\") Тогда \r\n          // Новый объект вводится на основании другого объекта. \r\n          // В этом случае в данные заполнения передается ссылка на объект, являющийся основанием.\r\n          // В данном случае обрабатывается ввод на основании элемента справочника Поставщики.\r\n                               \r\n     ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип(\"Структура\") Тогда\r\n          // Новый объект вводится командой из отобранного списка.\r\n          // В данных заполнения будет структура, содержащая значения отбора:\r\n          // «Поставщик» — СсылкаНаПоставщика\r\n          // «Склад» — СсылкаНаСклад\r\n                               \r\n     КонецЕсли;\r\n                               \r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nЧто касается внешнего вида формы нового объекта, то им нужно управлять в обработчике события формы <code>ПриСозданииНаСервере</code>. Это событие возникает и для новых, и для существующих объектов. Поэтому в нем нужно убедиться в том, что открывается форма именно нового объекта. Убедиться в этом можно проанализировав параметр формы <code>Ключ</code>. Если объект новый, в этом параметре будет пустая ссылка. Если это существующий объект — в этом параметре будет ссылка на этот объект:\r\n</p>\r\n[язык]\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n    Если Параметры.Ключ.Пустая() Тогда\r\n        Сообщить(\"Создается новый объект\");\r\n    КонецЕсли;\r\n    // Если Объект.Ссылка.Пустая() Тогда\r\n    //     Сообщить(\"Создается новый объект\");\r\n    // КонецЕсли;\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nИ, наконец, если требуется выполнять какие-то действия в обработчике события формы <code>ПриОткрытии</code>, то в нем ситуация аналогичная, нужно анализировать параметр формы <code>Ключ</code>.\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ПриОткрытии(Отказ)	\r\n    Если Параметры.Ключ.Пустая() Тогда\r\n        Сообщить(\"Создается новый объект\");\r\n    КонецЕсли;		\r\nКонецПроцедуры\r\n[/язык]','2018-05-25 10:20:04',1),(117,7,'Как создать документ и открыть его форму?','','','1С:Предприятие, Документ, Заполнить, ЗаполнятьИзДанныхЗаполнения, ЗначениеЗаполнения, ОбработкаЗаполнения, ОткрытьЗначение, ОткрытьФорму','Для этих целей существует два возможных сценария работы. Первый: открыть форму нового документа и предоставить пользователю самому интерактивно записать данные объекта в базу данных. Второй: создать новый документ программно, программно заполнить его данными и программно записать.','<p>\r\nДля этих целей существует два возможных сценария работы:\r\n</p>\r\n<ul>\r\n  <li>Открыть форму нового документа и предоставить пользователю самому интерактивно записать данные объекта в базу данных.</li>\r\n  <li>Создать новый документ программно, программно заполнить его данными и программно записать. Затем, если нужно, показать его пользователю.</li>\r\n</ul>\r\n<p>  \r\nВ первом сценарии проще всего использовать метод глобального контекста <code>ОткрытьФорму()</code>. Это можно сделать на клиенте. При этом создается новый документ и открывается для редактирования основная форма этого документа.\r\n</p>\r\n[язык]\r\nОткрытьФорму(\"Документ.ПриходнаяНакладная.ФормаОбъекта\");\r\n[/язык]\r\n<p>\r\nЕсли нужно какое-то предварительное заполнение документа начальными данными, то это можно сделать либо с помощью свойств реквизитов документа <code>ЗначениеЗаполнения</code>, <code>ЗаполнятьИзДанныхЗаполнения</code> либо в обработчике события документа <code>ОбработкаЗаполнения</code>.\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)\r\n	                   \r\n	Если ТипЗнч(ДанныеЗаполнения) = Тип(\"Структура\") Тогда\r\n		Поставщик = ДанныеЗаполнения.Поставщик;\r\n		Склад = ДанныеЗаполнения.Склад;\r\n	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип(\"СправочникСсылка.Поставщики\") Тогда\r\n		Поставщик = ДанныеЗаполнения.Ссылка;\r\n	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип(\"СправочникСсылка.Склады\") Тогда\r\n		Склад = ДанныеЗаполнения.Ссылка;\r\n	КонецЕсли;\r\n\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nВо втором случае можно программно создать документ на сервере, заполнить данными (если это нужно) в обработчике события <code>ОбработкаЗаполнения</code>, записать, и передать ссылку на новый документ в метод глобального контекста <code>ОткрытьЗначение()</code>, который откроет форму этого документа. Например:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура СоздатьНовыйДокумент(Команда)\r\n\r\n	СсылкаНаДокумент = СоздатьНовыйДокументНаСервере();\r\n	ОткрытьЗначение(СсылкаНаДокумент);\r\n\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nФункция СоздатьНовыйДокументНаСервере()\r\n\r\n	НовыйДокумент = Документы.ПриходнаяНакладная.СоздатьДокумент();\r\n	НовыйДокумент.Дата = ТекущаяДата();\r\n\r\n	СсылкаНаПоставщика = Справочники.Поставщики.Основной;\r\n	СсылкаНаСклад = Справочники.Склады.Основной;\r\n	ЭлементыОтбора = Новый Структура(\r\n		\"Поставщик, Склад\",\r\n		СсылкаНаПоставщика,\r\n		СсылкаНаСклад\r\n	);\r\n	НовыйДокумент.Заполнить(ЭлементыОтбора);\r\n\r\n	НовыйДокумент.Записать();\r\n\r\n	Возврат НовыйДокумент.Ссылка;\r\n\r\nКонецФункции\r\n[/язык]','2018-05-27 10:56:17',1),(118,6,'Как создать нового пользователя MySQL?','','','MySQL, Web-разработка, БазаДанных, ПраваДоступа','Учетные записи в СУБД MySQL представлены в виде связки user@host. Если пользователь не является root, то давать ему все права нецелесообразно, поэтому заодно посмотрим, как можно назначать права доступа для пользователей. Начнем с создания нового пользователя из консоли MySQL.','<p>\r\nУчетные записи в СУБД MySQL представлены в виде связки <code>user@host</code>. Если пользователь не является <code>root</code>, то давать ему все права нецелесообразно, поэтому заодно посмотрим, как можно назначать права доступа для пользователей. Начнем с создания нового пользователя из консоли MySQL:\r\n</p>\r\n[cli]\r\n> mysql -u[grn]root[/grn] -p[grn]qwerty[/grn]\r\n[/cli]\r\n[cli]\r\n> CREATE USER \'dbuser\'@\'localhost\' IDENTIFIED BY \'password\';\r\n[/cli]\r\n<p>\r\nНа данном этапе новый пользователь <code>dbuser</code> не имеет прав делать что-либо с базами данных. На самом деле, даже если если пользователь <code>dbuser</code> попробует залогиниться (с паролем <code>password</code>), он не попадет в консоль MySQL.\r\n</p>\r\n<p>\r\nДавайте предоставим пользователю доступ к информации, которая ему потребуется:\r\n</p>\r\n[cli]\r\n> GRANT ALL PRIVILEGES ON dbname.* TO \'dbuser\'@\'localhost\';\r\n[/cli]\r\n<p>\r\nЭта команда позволяет пользователю читать, редактировать, выполнять любые действия над всеми таблицами базы данных <code>dbname</code>. Чтобы изменения вступили в силу, выполняем команду:\r\n</p>\r\n[cli]\r\n> FLUSH PRIVILEGES;\r\n[/cli]\r\n<p>\r\nОбщий синтаксис команды <code>GRANT</code> имеет вид:\r\n</p>\r\n[code]\r\nGRANT [red][Привилегии][/red] ON [red][БазаДанных.Таблица][/red] TO [red][Пользователь][/red] [grn][WITH GRANT OPTION][/grn];\r\n[/code]\r\n<p>\r\nЕсли нужно дать доступ к любой базе данных или к любой таблице, можно использовать звездочку <code>*</code> вместо названия базы данных или таблицы. Например, эта команда предоставляет все права доступа пользователю <code>dbuser</code> и, если его не существует, создает его:\r\n</p>\r\n[cli]\r\n> GRANT ALL PRIVILEGES ON *.* TO \'dbuser\'@\'localhost\' IDENTIFIED BY \'password\' WITH GRANT OPTION;\r\n[/cli]\r\n<p>\r\n<code>WITH GRANT OPTION</code> дает возможность назначать другим пользователям любые привилегии, которые есть у самого пользователя.\r\n</p>\r\n<p>\r\nСписок прав доступа, которые могут получить пользователи:\r\n</p>\r\n<ul>\r\n  <li><code>ALL PRIVILEGES</code> — полный доступ к заданной базе данных</li>\r\n  <li><code>CREATE</code> — позволяет создавать новые таблицы или базы данных</li>\r\n  <li><code>DROP</code> — позволяет удалять таблицы или базы данных</li>\r\n  <li><code>DELETE</code> — позволяет удалять строки из таблиц</li>\r\n  <li><code>INSERT</code> — позволяет добавлять строки в таблицу</li>\r\n  <li><code>SELECT</code> — позволяет делать выборку из таблиц</li>\r\n  <li><code>UPDATE</code> — позволит редактировать строки таблиц</li>\r\n</ul>\r\n<p>\r\nКаждый раз после изменения прав доступа надо использовать команду <code>FLUSH PRIVILEGES</code>.\r\n</p>\r\n<p>\r\nЛишение прав доступа практически идентично их назначению:\r\n</p>\r\n[code]\r\nREVOKE [red][Привилегии][/red] ON [red][БазаДанных.Таблица][/red] FROM [red][Пользователь][/red];\r\n[/code]\r\n<p>\r\nОтменим привилегию <code>GRANT OPTION</code> у пользователя <code>dbuser</code>:\r\n</p>\r\n[cli]\r\n> REVOKE GRANT OPTION ON *.* FROM \'dbuser\'@\'localhost\';\r\n[/cli]\r\n<p>\r\nДля удаления пользователя используется команда\r\n</p>\r\n[code]\r\nDROP USER [red][Пользователь][/red];\r\n[/code]\r\n<p>\r\nУдалим пользователя <code>dbuser</code>:\r\n</p>\r\n[cli]\r\n> DROP USER \'dbuser\'@\'localhost\'\r\n[/cli]\r\n<p>\r\nВыходим из консоли MySQL:\r\n</p>\r\n[cli]\r\n> quit\r\n[/cli]','2018-05-22 13:47:42',1),(119,17,'Битрикс. Установка по шагам','','','CMS, MySQL, PHP, Web-разработка, php.ini, Битрикс, Установка','Первым делом идем на сайт Битрикс, в раздел «Скачать» и внизу страницы скачиваем файл bitrixsetup.php. Кладем его в директорию виртуального хоста и запускаем. Скрипт скачивает дистрибутив CMS, распаковывает архив и начинает установку. Не забудьте изменить директиву short_open_tag=On в файле php.ini.','<p>\r\nПервым делом идем на сайт Битрикс, в раздел «<a href=\"https://www.1c-bitrix.ru/download/cms.php\">Скачать</a>» и внизу страницы скачиваем файл <code>bitrixsetup.php</code>. Кладем его в директорию виртуального хоста и запускаем. Скрипт скачивает дистрибутив CMS, распаковывает архив и начинает установку:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/119/bitrix-setup-1.png\" class=\"zoom\"><img src=\"/files/blog/119/bitrix-setup-1.png\" alt=\"\" /></a>\r\n</p>\r\n<div class=\"note\">\r\nНе забудьте изменить директиву <code>short_open_tag = On</code> в файле <code>php.ini</code>.\r\n</div>\r\n<p>\r\n<a href=\"/files/blog/119/bitrix-setup-2.png\" class=\"zoom\"><img src=\"/files/blog/119/bitrix-setup-2.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nНа очередном шаге надо выбрать кодировку <code>UTF-8</code>. Система старая и до сих пор по умолчанию устанавливается в кодировке <code>Windows-1251</code>.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/119/bitrix-setup-3.png\" class=\"zoom\"><img src=\"/files/blog/119/bitrix-setup-3.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nНа следуюшем шаге установщик проверяет, насколько система удовлетворяет требованиям CMS. Пришлось добавить в <code>php.ini</code>:\r\n</p>\r\n[ini]\r\nmbstring.func_overload = 2\r\n[/ini]\r\n<p>\r\n<a href=\"/files/blog/119/bitrix-setup-4.png\" class=\"zoom\"><img src=\"/files/blog/119/bitrix-setup-4.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nДалее — параметры соединения с базой данных. У меня ее еще не было, поэтому запускаем консоль MySQL и выполняем команды:\r\n</p>\r\n[cli]\r\n> mysql -u[grn]root[/grn] -p[grn]qwerty[/grn]  # запускаем консоль mysql\r\n[/cli]\r\n[cli]\r\n> CREATE DATABASE bitrix;  # создаем базу данных bitrix\r\n> CREATE USER \'bitrix\'@\'localhost\' IDENTIFIED BY \'bitrix\'; # создаем пользователя bitrix с паролем bitrix\r\n> GRANT ALL PRIVILEGES ON bitrix.* TO \'bitix\'@\'localhost\';  # предоставляем пользователю все права на БД bitrix\r\n> quit  # выходим из консоли mysql\r\n[/cli]\r\n<p>\r\n<a href=\"/files/blog/119/bitrix-setup-5.png\" class=\"zoom\"><img src=\"/files/blog/119/bitrix-setup-5.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nДальше еще надо будет ввести логин и пароль администратора, выбрать решение для установки, шаблон и тему. В конечном итоге переходим на готовый сайт.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/119/bitrix-setup-6.png\" class=\"zoom\"><img src=\"/files/blog/119/bitrix-setup-6.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВ панели управления переходим в раздел «Проверка системы» (Настройки &gt; Инструменты &gt; Проверка системы). Эта страница предназначена для проверки соответствия параметров системы, на которой осуществляется функционирование проекта, техническим требованиям CMS. Здесь я столкнулся с ошибкой\r\n</p>\r\n[code]\r\nПеременная sql_mode в MySQL должна быть пустая, текущее значение:\r\nSTRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\r\n[/code]\r\n<p>\r\nДля устранения этой ошибки можно отредактировать файлы\r\n</p>\r\n<ul>\r\n  <li><code>/bitrix/php_interface/after_connect_d7.php</code> (новое ядро)</li>\r\n  <li><code>/bitrix/php_interface/after_connect.php</code> (старое ядро)</li>\r\n</ul>\r\n<p>\r\nНо, поскольку при обновлении Битрикса эти файлы могут быть перезаписаны, лучше скопировать их в <code>/local/php_interface</code> и отредактировать уже там:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл /local/php_interface/after_connect_d7.php\r\n */\r\n$connection = \\Bitrix\\Main\\Application::getConnection();\r\n$connection->queryExecute(\"SET NAMES \'utf8\'\");\r\n$connection->queryExecute(\'SET collation_connection = \"utf8_unicode_ci\"\');\r\n// добавляем еще одну строку для установки пустого значения sql_mode\r\n$connection->queryExecute(\'SET sql_mode = \"\"\');\r\n?>\r\n[/php]\r\n[php]\r\n<?php\r\n/*\r\n * Файл /local/php_interface/after_connect.php\r\n */\r\n$DB->Query(\"SET NAMES \'utf8\'\");\r\n$DB->Query(\'SET collation_connection = \"utf8_unicode_ci\"\');\r\n// добавляем еще одну строку для установки пустого значения sql_mode\r\n$DB->Query(\'SET sql_mode = \"\"\');\r\n?>\r\n[/php]','2018-05-24 14:00:59',1),(120,7,'События при вводе на основании и при копировании','','','1С:Предприятие, ВводНаОсновании, Заполнить, Копировать, ОбработкаЗаполнения, Параметр, ПараметрОбъектКопирования, ПараметрОснование, Событие','При вызове стандартной команды ввода на основании выполняется создание нового объекта и вызов в модуле объекта обработчика события ОбработкаЗаполнения(). В этом событии должен быть реализован алгоритм заполнения данных объекта из данных объекта-основания. Именно этот обработчик генерируется конструктором ввода на основании.','<p>\r\nПри вызове стандартной команды ввода на основании выполняется создание нового объекта и вызов в модуле объекта обработчика события <code>ОбработкаЗаполнения()</code>. В этом событии должен быть реализован алгоритм заполнения данных объекта из данных объекта-основания. Именно этот обработчик генерируется конструктором ввода на основании:\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)\r\n    //{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ\r\n    // Данный фрагмент построен конструктором.\r\n    // При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!\r\n    Если ТипЗнч(ДанныеЗаполнения) = Тип(\"СправочникСсылка.Клиенты\") Тогда\r\n        // Заполнение шапки\r\n        Клиент = ДанныеЗаполнения.Ссылка;\r\n    КонецЕсли;\r\n    //}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\nСледует учитывать, что этот обработчик будет использоваться не только при вводе на основании. Он будет вызываться и при вызове метода объекта <code>Заполнить()</code>:\r\n</p>\r\n[язык]\r\nНовыйДокумент = Документы.РасходнаяНакладная.СоздатьДокумент();\r\nНовыйДокумент.Заполнить(ВыбранныйКлиент);\r\nФормаДокумента = НовыйДокумент.ПолучитьФорму();\r\nФормаДокумента.ПараметрОснование = ВыбранныйКлиент;\r\nФормаДокумента.Открыть();\r\n[/язык]\r\n<p>\r\nТаким образом, он является стандартным местом, в котором реализуется заполнение данных объекта из данных объекта основания без учета того, откуда и зачем вызывается это заполнение. Соответственно в этом обработчике можно только выполнять заполнение данных и нельзя делать каких-либо дополнительных действий связанных с интерфейсом системы. \r\n</p>\r\n<p>\r\nАналогично при копировании вызывается обработчик события <code>ПриКопировании()</code>, в котором можно дополнить стандартное заполнение данных выполняемое системой при копировании объекта. Этот обработчик вызывается, как при интерактивном копировании, так и при вызове метода <code>Скопировать()</code>. \r\n</p>\r\n<p>\r\nКроме того, расширения форм объектов предоставляют свойства <code>ПараметрОснование</code> и <code>ПараметрОбъектКопирования</code>, которые заполняются системой при выполнении стандартных команд ввода на основании и копирования. Значения этих свойств могут использоваться в обработчиках формы для определения того, что при открытии формы выполнялся ввод на основании или копирование.\r\n</p>\r\n\r\n<h2>Справка</h2>\r\n[язык]\r\nДокументСсылка.ИмяДокумента.Скопировать()\r\n[/язык]\r\n<p>Возвращаемое значение:</p>\r\n<ul><li>Тип: <code>ДокументОбъект</code>.</li></ul> \r\n<p>Описание:</p>\r\n<ul><li>Создает новый документ копированием существующего. Использование метода не приводит к записи созданного объекта в базу данных.</li></ul> \r\n<p>Доступность:</p> \r\n<ul><li>Сервер, толстый клиент, внешнее соединение, мобильное приложение (сервер).</li></ul> \r\n\r\n[язык]\r\nДокументОбъект.ИмяДокумента.ПриКопировании(ОбъектКопирования)\r\n[/язык]\r\n<p>Параметры:</p>\r\n<ul><li><code>ОбъектКопирования</code>, тип <code>ДокументОбъект</code>. Исходный документ, который является источником копирования.</li></ul> \r\n<p>Описание:</p>\r\n<ul><li>Возникает при создании документа копированием.</li></ul>','2018-05-29 11:42:12',1),(121,7,'Как обработать выбор значения в поле ввода','','','1С:Предприятие, ОбработкаВыбора, ОповеститьОВыборе, УправляемаяФорма, ЭлементФормы','При выборе ссылочного значения в поле ввода иногда возникает необходимость специальным образом обработать выбираемое значение. Например, в документе нужно выбрать поставщика. Но нужно вмешаться в процесс выбора значения и кроме ссылки на поставщика получить еще и другую информацию о поставщике.','<p>\r\nПри выборе ссылочного значения в поле ввода иногда возникает необходимость специальным образом обработать выбирамемое значение. Например, в документе нужно выбрать поставщика. Но нужно вмешаться в процесс выбора значения и кроме ссылки на поставщика получить еще и другую информацию о поставщике. Например, его полное наименование и ИНН, которые являются реквизитами поставщика.\r\n</p>\r\n<p>\r\nДля того, чтобы вмешаться в процесс выбора значения используется событие <code>ОбработкаВыбора</code> элемента формы <code>Поле</code>. Это событие поставляется расширением поля ввода. Обработчик этого события имеет такой синтаксис: \r\n</p>\r\n[язык]\r\nОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)\r\n[/язык]\r\n<p>\r\nВ параметре <code>ВыбранноеЗначение</code> платформа передает в обработчик то значение, которое выбрал пользователь. В данном случае это будет ссылка на поставщика. Но проблема заключается в том, что обработчик <code>ОбработкаВыбора</code> исполняется на клиенте. А на клиенте возможности ссылки очень сильно ограничены. В частности, от нее нельзя через точку получить значения реквизитов.\r\n</p>\r\n<p>\r\nПоэтому для того, чтобы в этой ситуации получить значения реквизитов ссылки, нужно из этого обработчика вызвать серверную функцию и в ней получить нужные реквизиты. Например так:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)\r\n    ИНН = ПолучитьРеквизитВыбранногоЗначения(ВыбранноеЗначение);\r\nКонецПроцедуры\r\n\r\n&НаСервереБезКонтекста\r\nФункция ПолучитьРеквизитВыбранногоЗначения(ВыбранноеЗначение)\r\n    Возврат ВыбранноеЗначение.ИНН;\r\nКонецФункции\r\n[/язык]\r\n<p>\r\nПри этом следует иметь ввиду два момента:\r\n</p>\r\n<ul>\r\n  <li>Во-первых, для получения реквизитов используется неконтекстный серверный вызов (<code>&НаСервереБезКонтекста</code>). Это важно, т.к. в этом обработчике нельзя использовать контекстные серверные вызовы (<code>&НаСервере</code>).</li>\r\n  <li>Во-вторых, любое обращение к серверу требует дополнительных ресурсов системы и может замедлять работу пользователя, особенно в случае подключения по низкоскоростному каналу связи. Поэтому нужно прежде всего внимательно оценить, а так ли необходимо в этом месте получать реквизиты ссылки или можно обойтись без этого? И если нужно получать несколько реквизитов и при этом используется какой-то сложный алгоритм — нужно постараться реализовать его так, чтобы все необходимые данные получить за один серверный вызов, вернуть их на клиента и на клиенте только поместить их в нужные поля формы, не проводя каких-то сложных вычислений.</li>\r\n</ul>\r\n\r\n<h2>Справка</h2>\r\n[язык]\r\nУправляемаяФорма.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)\r\n[/язык]\r\n<p>Параметры:</p>\r\n<ul>\r\n  <li><code>ВыбранноеЗначение</code>, тип <code>Произвольный</code>. Результат выбора в подчиненной форме. В случае множественного выбора возвращается массив выбранных значений.</li>\r\n  <li><code>ИсточникВыбора</code>, тип <code>Произвольный</code>. Форма, где осуществлен выбор.</li>\r\n</ul>\r\n<p>Описание:</p>\r\n<ul><li>Возникает на клиенте при выборе объекта в одной из подчиненных форм или при вызове в одной из подчиненных форм метода <code>ОповеститьОВыборе</code>.</li></ul>\r\n\r\n[язык]\r\nУправляемаяФорма.ОповеститьОВыборе(ЗначениеВыбора)\r\n[/язык]\r\n<p>Параметры:</p>\r\n<ul><li><code>ЗначениеВыбора</code>, обязательный, тип <code>Произвольный</code>. Результат выбора.</li></ul>\r\n<p>Описание:</p>\r\n<ul><li>Посылает оповещение владельцу формы о выполнении выбора или подбора, передает ему выбранное значение. Закрывает форму в соответствии со значением свойства <code>ЗакрыватьПриВыборе</code>. Данное действие аналогично выполнению выбора в форме, открытой для выбора в поле ввода или ячейке табличного поля.</li></ul>\r\n<p>Доступность:</p> \r\n<ul><li>Тонкий клиент, веб-клиент, толстый клиент, мобильное приложение (клиент).</li></ul>\r\n<p>Примечание:</p>\r\n<ul><li>Может применяться в случае, когда открытие формы выбора или подбора выполнено средствами языка.</li></ul>','2018-05-30 16:56:34',1),(122,7,'Можно ли использовать форму списка в качестве формы выбора?','','','1С:Предприятие, ОткрытьФорму, ПолучитьФорму, РежимВыбора, Список, УправляемаяФорма','В управляемых формах рекомендуется в качестве формы выбора и формы списка использовать разные формы. Это связано с тем, что форма списка и форма выбора имеют разный внешний вид. В форме выбора стандартно присутствует кнопка «Выбрать», которой нет в форме списка.','<p>\r\nВ управляемых формах рекомендуется в качестве формы выбора и формы списка использовать разные формы. Это связано с тем, что форма списка и форма выбора имеют разный внешний вид. В форме выбора стандартно присутствует кнопка «Выбрать», которой нет в форме списка.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/122/1.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nИзменение внешнего вида управляемой формы в режиме исполнения влечет за собой обращение к серверу и кроме этого может приводить к отключению кэширования такой формы, что отрицательно сказывается на производительности. По этой причине основная форма списка и основная форма выбора должны быть разными формами.\r\n</p>\r\n<p>\r\nНужно заметить, что у таблицы управляемой формы имеется свойство <code>РежимВыбора</code>. Изменение этого свойства в конфигураторе, в палитре свойств, позволяет превратить форму списка в форму выбора, и наоборот. Однако попытка изменить это свойство программно приведёт к ошибке:\r\n</p>\r\n[язык]\r\nФорма = ПолучитьФорму(\"Справочник.Товары.ФормаСписка\");\r\nФорма.Элементы.Список.РежимВыбора = Истина;\r\n// Ошибка: Изменение свойства недоступно\r\nФорма.Открыть();\r\n[/язык]\r\n<p>Открыть основную форму списка или выбора можно следующим образом:\r\n</p>\r\n[язык]\r\nОткрытьФорму(\"Справочник.Товары.ФормаСписка\");\r\nОткрытьФорму(\"Справочник.Товары.ФормаВыбора\");\r\nОткрытьФорму(\"Справочник.Товары.ФормаВыбораГруппы\");\r\n[/язык]\r\n<p>\r\nЕсли требуется открыть произвольную форму объекта конфигурации, созданную в конфигураторе, но не назначенную основной:\r\n</p>\r\n[язык]\r\nОткрытьФорму(\"Справочник.Товары.Форма.СписокСОстатками\");\r\nОткрытьФорму(\"Справочник.Товары.Форма.ФормаУниверсальногоПодбора\");\r\n[/язык]','2018-05-30 18:29:47',1),(123,17,'Битрикс. Подключение файлов js и css в шаблоне','','','CMS, CSS, HTML, JavaScript, PHP, Web-разработка, Битрикс, ШаблонКомпонента, ШаблонСайта','Посмотрим, как правильно подключать дополнительные файлы стилей и скрипты в шаблон сайта, чтобы корректно работала настройка сжатия файлов js и css. Прямое подключение дополнительных файлов не рекомендуется, для этого есть методы AddHeadScript() и SetAdditionalCSS().','<p>\r\nПосмотрим, как правильно подключать дополнительные файлы стилей и скрипты в шаблон сайта, чтобы корректно работала настройка сжатия файлов js и css (<em>Настройки • Настройки модулей • Главный модуль</em>):\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/123/1.jpg\" class=\"zoom\"><img src=\"/files/blog/123/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПрямое подключение дополнительных файлов не рекомендуется\r\n</p>\r\n[html]\r\n<script type=\"text/javascript\" src=\"/js/script.js\"></script>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/css/style.css\" />\r\n[/html]\r\n<p>\r\nДля правильного подключения есть методы\r\n</p>\r\n<ul>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/setadditionalcss.php\">$APPLICATION->SetAdditionalCSS()</a> — для добавления файлов стилей</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/addheadscript.php\">$APPLICATION->AddHeadScript()</a> — для добавления скриптов</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/addheadstring.php\">$APPLICATION->SetHeadString()</a> — для добавления произвольных строк</li>\r\n</ul>\r\n[php]\r\n$APPLICATION->SetAdditionalCSS(SITE_TEMPLATE_PATH . \'/css/style.css\');\r\n$APPLICATION->AddHeadScript(SITE_TEMPLATE_PATH . \'/js/script.js\');\r\n$APPLICATION->SetHeadString(\'<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\');  \r\n[/php]\r\n<p>\r\nС появлением ядра D7 добавились методы\r\n</p>\r\n<ul>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_d7/bitrix/main/page/asset/addcss.php\">\\Bitrix\\Main\\Page\\Asset::addCss()</a> — для добавления файлов стилей</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_d7/bitrix/main/page/asset/addjs.php\">\\Bitrix\\Main\\Page\\Asset::addJs()</a> — для добавления скриптов</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_d7/bitrix/main/page/asset/addstring.php\">\\Bitrix\\Main\\Page\\Asset::addString()</a> — для добавления произвольных строк</li>\r\n</ul>\r\n[php]\r\nuse Bitrix\\Main\\Page\\Asset; \r\n\r\nAsset::getInstance()->addCss(SITE_TEMPLATE_PATH . \'/css/style.css\');\r\nAsset::getInstance()->addJs(SITE_TEMPLATE_PATH . \'/js/script.js\'); \r\nAsset::getInstance()->addString(\'<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\'); \r\n[/php]\r\n<p>\r\nЗаписи равнозначные, можно использовать и запись без обращения к ядру D7 и с обращением.\r\n</p>\r\n<div class=\"note\">\r\n<p>\r\n<code>$APPLICATION</code> (экземпляр класса <code>CMain</code>) и <code>Asset::getInstance()</code> — глобальные объекты. Они доступны после подключения служебной части пролога Битрикса. Таким образом, можно их использовать в любом месте компонента, модуля или шаблона.\r\n</p>\r\n[php]\r\n// подключение служебной части пролога\r\nrequire($_SERVER[\'DOCUMENT_ROOT\'] . \'/bitrix/modules/main/include/prolog_before.php\');\r\n[/php]\r\n</div>\r\n\r\n<h2>Подключение js и css в шаблоне компонента</h2>\r\n<p>\r\nДля правильного подключения дополнительных файлов, подключаем их из шаблона компонента, а не прописываем в шаблон сайта.\r\n</p>\r\n[php]\r\n$this->addExternalJS(\'/local/js/script.js\');\r\n$this->addExternalCss(\'/local/css/style.css\');\r\n[/php]\r\n<p>\r\nТогда эти файлы правильно объединятся с остальными.\r\n</p>\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/addheadscript.php\">CMain::AddHeadScript()</a></li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/setadditionalcss.php\">CMain::SetAdditionalCSS()</a></li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_d7/bitrix/main/page/asset/addjs.php\">\\Bitrix\\Main\\Page\\Asset::addJs()</a></li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_d7/bitrix/main/page/asset/addcss.php\">\\Bitrix\\Main\\Page\\Asset::addCss()</a></li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cbitrixcomponenttemplate/\">Класс CBitrixComponentTemplate</a></li>\r\n  <li><a href=\"http://bxapi.ru/\">Поиск по исходникам Битрикс</a></li>\r\n</ul>','2018-05-26 15:03:58',1),(124,17,'Битрикс. Файл init.php','','','CMS, PHP, Web-разработка, init.php, Битрикс','Сам по себе файл не обязательный, особенность его в том, что он подключается в начале каждой страницы сайта и служит для инициализации обработчиков событий или подключения дополнительных функций. То есть, в нем можно размещать код, который необходим для выполнения на каждой странице сайта.','<p>\r\nСам по себе файл не обязательный, особенность его в том, что он подключается в начале каждой страницы сайта и служит для инициализации обработчиков событий или подключения дополнительных функций. То есть, в нем можно размещать код, который необходим для выполнения на каждой странице сайта.\r\n</p>\r\n<p>\r\nПоследовательность очереди подключения можно посмотреть в <a href=\"https://dev.1c-bitrix.ru/api_help/main/general/pageplan.php\">документации</a> по Битрикс: первым идет подключение пролога, а затем <code>init.php</code>.\r\n</p>\r\n<P>\r\nЕсли в системе несколько сайтов, то можно создать отдельную директорию для каждого сайта с индивидуальным <code>init.php</code>. Имя каждой директории совпадает с <code>ID</code> сайта. Первым подключается файл из директории <code>bitix/php_interface</code>, а потом — из <code>bitix/php_interface/ID</code>.\r\n</p>\r\n<p>\r\nКроме того, файл <code>init.php</code> может быть создан в директории <code>local/php_interface</code> или в директории <code>local/php_interface/ID</code>. Если такие файлы есть, они будут использованы вместо файлов в директории <code>bitrix</code>. Это директория как раз и нужна для того, чтобы ничего не менять в ядре Битрикс. Битрикс в первую очередь смотрит <code>local</code> и только если файлы не найдены, ищет их в <code>bitrix</code>.\r\n</p>\r\n<p>\r\nЕсли файл <code>init.php</code> будет создан в директории <code>bitrix/php_interface</code>, то в случае ошибки в коде, весь сайт перестанет работать, в том числе и админка (т.е. через админку исправить ошибку не получится). Если файл будет создан в директории <code>bitix/php_interface/ID</code>, то в случае ошибки кода, сайт перестанет работать, но админку это не затронет, и через панель управления можно будет внести правки в <code>init.php</code>.\r\n</p>\r\n<p>\r\nЕсли файл <code>bitrix/php_interface/init.php</code> содержит ошибки, получаем белый экран и текст:\r\n</p>\r\n[code]\r\nПри выполнении скрипта возникла ошибка. Включить расширенный вывод ошибок можно в файле настроек .settings.php\r\n[/code]\r\n<p>\r\nЗайти в панель управления и иcправить ошибку теперь нельзя. Чтобы избежать такой ситуации, надо вынести содержимое файла <code>init.php</code> в отдельный файл и подключить его другим способом.\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/php_interface/init.php\r\n */\r\n// session_start();\r\nif (isset($_GET[\'noinit\']) && $_GET[\'noinit\'] === \'yes\') {\r\n    $_SESSION[\'work_without_init\'] = 1;\r\n}\r\nif ( ! isset($_SESSION[\'work_without_init\'])) {\r\n    if (is_file($_SERVER[\'DOCUMENT_ROOT\'].\'/local/php_interface/init/script.php\')) {\r\n        // в этот файл вынесен весь код из файла init.php\r\n        require_once $_SERVER[\'DOCUMENT_ROOT\'].\'/local/php_interface/init/script.php\';\r\n    }\r\n}\r\n[/php]\r\n<p>\r\nВ подключаемом файле допущена ошибка, нет <code>;</code> после функции <code>define()</code>:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/php_interface/include/init.php\r\n */\r\ndefine(\'DEFAULT_TEMPLATE_PATH\', \'/local/templates/.default\')\r\n[/php]\r\n<p>\r\nНо, набрав в адресной строке\r\n</p>\r\n[code]\r\nhttp://www.server.com/?noinit=yes\r\n[/code]\r\n<p>\r\nможно не подключать файл с ошибкой и получить доступ к панели управления. И уже в панели управления исправить ошибку.\r\n</p>','2018-05-29 18:30:26',1),(125,6,'Константы класса в PHP','','','PHP, Web-разработка, Класс, Константа','Класс может привязывать к своему контексту не только переменные и методы. Иногда требуются значения, которые невозможно изменить за весь жизненный цикл объекта. Для этих целей предназначены константы внутри классов. Определение константы записывается как…','<p>\r\nКласс может привязывать к своему контексту не только переменные и методы. Иногда требуются значения, которые невозможно изменить за весь жизненный цикл объекта. Для этих целей предназначены константы внутри классов. Определение константы записывается как\r\n</p>\r\n[code]\r\n[red]const[/red] [grn]ИМЯ_КОНСТАНТЫ[/grn] [red]=[/red] значение_константы\r\n[/code]\r\n<p>\r\nФункция <code>define()</code>, применяемая в работе с обычными константами, здесь не используется.\r\n</p>\r\n[php]\r\nclass ErrorMessage {\r\n    // определяем константу с сообщением\r\n    const ERROR = \'Произошла ошибка!\';\r\n}\r\n[/php]\r\n<p>\r\nПолучить значение константы можно как внутри класса, так и снаружи. Доступ к константе извне класса:\r\n</p>\r\n[php]\r\n/*\r\n * Доступ к константе извне класса\r\n */\r\nclass Colors {\r\n    // определяем константы цветов\r\n    const BLACK = \'Черный\';\r\n    const WHITE = \'Белый\';\r\n}\r\n\r\n$colors = new Colors();\r\n// получение доступа к константе через экземпляр класса\r\necho $colors::BLACK; // результат: Черный\r\n// получение доступа к константе по имени класса\r\necho Colors::WHITE; // результат: Белый\r\n[/php]\r\n<p>\r\nДоступ к константе внутри класса:\r\n</p>\r\n[php]\r\n/*\r\n * Доступ к константе внутри класса\r\n */\r\nclass Colors {\r\n    // определяем константы цветов\r\n    const BLACK = \'Черный\';\r\n    const WHITE = \'Белый\';\r\n    \r\n    public function showBlackColor() {\r\n        echo self::BLACK;\r\n    }\r\n    public function showWhiteColor() {\r\n        echo $this::WHITE;\r\n    }\r\n}\r\n\r\n$colors = new Colors();\r\n// получение доступа к константе внутри класса через self\r\necho $colors->showBlackColor(); // результат: Черный\r\n// получение доступа к константе внутри класса через $this\r\necho $colors->showWhiteColor(); // результат: Белый\r\n[/php]','2018-05-30 19:50:54',1),(126,10,'Команды declare и typeset','','','Bash, Linux, declare, Команда, Массив, Переменная','Команды declare и typeset являются встроенными и предназначены для наложения ограничений на переменные. Это попытка контроля над типами, которая имеется во многих языках программирования. Команды абсолютно идентичны друг другу и являются синонимами.','<p>\r\nКоманды <code>declare</code> и <code>typeset</code> являются встроенными и предназначены для наложения ограничений на переменные. Это попытка контроля над типами, которая имеется во многих языках программирования. Команды абсолютно идентичны друг другу и являются синонимами.\r\n</p>\r\n<p>Опции</p>\r\n<ul>\r\n  <li><code>-r</code> (readonly, только для чтения). Попытка изменения таких переменных завершается сообщением об ошибке.</li>\r\n  <li><code>-i</code> (integer, целое число). Переменная объявляется как целое число.</li>\r\n  <li><code>-a</code> (array, массив). Переменная объявляется массивом с числовыми индексами.</li>\r\n  <li><code>-A</code> (array, массив). Переменная объявляется как ассоциативный массив (индексы задаются с помощью строк).</li>\r\n  <li><code>-x</code> (export, экспорт). Переменная объявляется как доступная для экспорта.</li>\r\n  <li><code>-g</code> (global, глобальная). При использовании внутри функции делает переменную глобальной.</li>\r\n</ul>\r\n<p>\r\nКоманда <code>declare</code> допускает совмещение объявления и присваивания значения переменной одновременно:\r\n</p>\r\n[cli]\r\n$ declare -x delta=373\r\n[/cli]\r\n<p>\r\nДопускается выполнение некоторых арифметических операций над переменными, объявленными как <code>integer</code>:\r\n</p>\r\n[cli]\r\n$ declare -i var=123  # var целочисленная переменная\r\n$ var=var+1  # допустимая арифметическая операция\r\n[/cli]\r\n<p>\r\nВывести список всех определенных функций:\r\n</p>\r\n[cli]\r\n$ declare -f\r\nfoo () \r\n{ \r\n    echo \"foo is bar\"\r\n}\r\nworld () \r\n{ \r\n    echo \"Hello World!\"\r\n}\r\n[/cli]\r\n<div class=\"note\">\r\nНе рекомендуется использовать синоним <code>typeset</code>, он считается устаревшим.\r\n</div>','2018-05-31 13:03:27',1),(127,10,'Что означает IFS=$\'\\n\' в сценариях','','','Bash, CLI, IFS, Linux, Переменная','Переменная IFS хранит «внутренние разделители полей». Она используется оболочкой для определения того, как выполнять разбиение на слова. Разбиение на слова происходит при преобразованиях командной строки, выполняемых оболочкой перед тем, как запустить командную строку на исполнение.','<p>\r\nПеременная <code>IFS</code> хранит «внутренние разделители полей». Она используется оболочкой для определения того, как выполнять разбиение на слова. Разбиение на слова происходит при преобразованиях командной строки, выполняемых оболочкой перед тем, как запустить командную строку на исполнение. Значение <code>IFS</code> умолчанию состоит из пробельных символов (пробел, табуляция и новая строка). Каждый из этих символов может быть границей слова.\r\n</p>\r\n<p>\r\nНапишем небольшой сценарий:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nstring=\'11111:22222 33333:44444 55555:66666\'\r\nfor item in $string; do\r\n    echo $item\r\ndone\r\n[/bash]\r\n[code]\r\n11111:22222\r\n33333:44444\r\n55555:66666\r\n[/code]\r\n<p>\r\nДругими словами, оболочка считает, что пробел является границей слов. Теперь перед выполнением цикла изменим значение специальной переменной <code>IFS</code>:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nstring=\'11111:22222 33333:44444 55555:66666\'\r\nIFS=:\r\nfor item in $string; do\r\n    echo $item\r\ndone\r\n[/bash]\r\n[code]\r\n11111\r\n22222 33333\r\n44444 55555\r\n66666\r\n[/code]\r\n<p>\r\nОболочка все также разбивает <code>string</code> на слова — но теперь она рассматривает только двоеточие как границу слова.\r\n</p>\r\n<p>\r\nПервый символ <code>IFS</code> является особым: он используется <strong>для разграничения слов в выводе</strong> при использовании специальной переменной <code>$*</code> в кавычках:\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\n# задаем позиционные параметры $1 $2 $3\r\nset first second third\r\n\r\n# выводим значение переменной \"$*\"\r\necho \"$*\"\r\n# изменяем значение переменной IFS\r\nIFS=\':-;\'\r\n# выводим значение переменной \"$*\"\r\necho \"$*\"\r\n[/bash]\r\n[code]\r\nfirst second third\r\nfirst:second:third\r\n[/code]\r\n<div class=\"note\">\r\n<p>\r\nПеременная <code>$*</code> содержит позиционные параметры, начиная с первого. Когда <code>$*</code> указывается в двойных кавычках, она заменяется одним словом, содержащим значения каждого параметра, разделенных первым символом специальной переменной <code>IFS</code>.\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\n# задаем позиционные параметры $1 $2 $3\r\nset first second third\r\n\r\nfor item in $*; do\r\n    echo $item\r\ndone\r\necho \'===============\'\r\nfor item in \"$*\"; do\r\n    echo $item\r\ndone\r\n[/bash]\r\n[code]\r\nfirst\r\nsecond\r\nthird\r\n===============\r\nfirst second third\r\n[/code]\r\n</div>\r\n<p>\r\nЧто касается <code>IFS=$\'\\n\'</code>, то это способ присвоить <code>IFS</code> значение символа новой строки.\r\n</p>\r\n[bash]\r\n#!/bin/bash\r\nIFS=$\'\\n\'\r\nfor entry in $(cat /etc/passwd) ; do\r\n    echo \"Values in $entry\"\r\n    IFS=:\r\n    for value in $entry ; do\r\n        echo $value\r\n    done\r\ndone\r\n[/bash]','2018-06-02 12:35:05',1),(129,17,'Битрикс. Заголовок страницы','','','CMS, PHP, ShowTitle, Web-разработка, Битрикс','С заголовком страницы в Битрикс все достаточно запутано. Через панель управления можно установить «Заголовок страницы» и «Заголовок окна браузера». «Заголовок страницы» — это содержимое тега h1 страницы, а «Заголовок окна браузера» — содержимое тега title. Однако, выводить на страницу и то и другое можно с помощью ShowTitle().','<p>\r\nС заголовком страницы в Битрикс все очень запутано. Через панель управления можно установить «Заголовок страницы» и «Заголовок окна браузера». «Заголовок страницы» — это содержимое тега <code>&lt;h1&gt;</code> страницы, а «Заголовок окна браузера» — содержимое тега <code>&lt;title&gt;</code>. Однако, выводить на страницу и то и другое можно с помощью метода <code>CMain::ShowTitle()</code>, только вызывать его надо по-разному.\r\n</p>\r\n<p>\r\nЕсли совсем коротко:\r\n</p>\r\n[phtml]\r\n<title><?php $APPLICATION->ShowTitle(); /* Выводим «Заголовок окна браузера» */ ?></title>\r\n[/phtml]\r\n[phtml]\r\n<h1><?php $APPLICATION->ShowTitle(false); /* Выводим «Заголовок страницы» */ ?></h1>\r\n[/phtml]\r\n<p>\r\nЧтобы установить заголовки страницы программно, существуют специализированные функции:\r\n</p>\r\n<ul>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/settitle.php\">CMain::SetTitle()</a> — Устанавливает заголовок страницы</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/gettitle.php\">CMain::GetTitle()</a> — Возвращает заголовок страницы</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/showtitle.php\">CMain::ShowTitle()</a> — Отображает заголовок страницы</li>\r\n</ul>\r\n<p>\r\nИ более общие функции работы со свойствами страницы и раздела:\r\n<ul>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/showproperty.php\">CMain::ShowProperty()</a> — Отображает свойство страницы, учитывая свойства раздела</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/getproperty.php\">CMain::GetProperty()</a> — Возвращает свойство страницы, учитывая свойства раздела</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/getpageproperty.php\">CMain::GetPageProperty()</a> — Возвращает свойство страницы</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/getdirproperty.php\">CMain::GetDirProperty()</a> — Возвращает свойство раздела</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/getpagepropertylist.php\">CMain::GetPagePropertyList()</a> — Возвращает массив всех свойств страницы</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/setpageproperty.php\">CMain::GetDirPropertyList()</a> — Возвращает массив всех свойств раздела</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/setpageproperty.php\">CMain::SetPageProperty()</a> — Устанавливает свойство страницы</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/setdirproperty.php\">CMain::SetDirProperty()</a> — Устанавливает свойство раздела</li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/showmeta.php\">CMain::ShowMeta()</a> — Отображает свойство раздела/страницы обрамленное тегом <code>meta</code></li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/api_help/main/reference/cmain/getmeta.php\">CMain::GetMeta()</a> — Возвращает свойство раздела/страницы обрамленное тегом <code>meta</code></li>\r\n</ul>\r\n<p>\r\nМетод <code>SetTitle(\'…\')</code> устанавливает «Заголовок страницы», а метод <code>SetPageProperty(\'title\', \'…\')</code> устанавливает «Заголовок окна браузера». При вызове <code>ShowTitle()</code> без аргументов будет показан «Заголовок окна браузера», потому что фактически происходит вызов <code>ShowTitle(\'title\')</code>. Если нужно, чтобы <code>ShowTitle()</code> выводил на страницу «Заголовок страницы», надо вызвать его с аргументом <code>false</code>.\r\n</p>\r\n[phtml]\r\n<?php require($_SERVER[\'DOCUMENT_ROOT\'].\'/bitrix/header.php\'); ?>\r\n\r\n<?php\r\n$APPLICATION->SetTitle(\'Заголовок страницы\');\r\n$APPLICATION->SetPageProperty(\'title\', \'Заголовок окна браузера\');\r\n?>\r\n\r\n<?php $APPLICATION->ShowTitle(); ?>\r\n<br/>\r\n<?php $APPLICATION->ShowTitle(false); ?>\r\n\r\n<?php require($_SERVER[\'DOCUMENT_ROOT\'].\'/bitrix/footer.php\'); ?>\r\n[/phtml]\r\n[html]\r\nЗаголовок окна браузера\r\n<br/>\r\nЗаголовок страницы\r\n[/html]\r\n<p>\r\nВообще, с помощью <code>ShowTitle()</code> можно вывести любое свойство страницы в качестве заголовка окна браузера. Для этого надо передать первым аргументом имя свойства, предварительно установленное с помощью <code>SetPageProperty()</code>:\r\n</p>\r\n[phtml]\r\n<?php $APPLICATION->SetPageProperty(\'heading\', \'Мой заголовок\'); ?>\r\n<title><?php $APPLICATION->ShowTitle(\'heading\'); ?></title>\r\n[/phtml]\r\n<p>\r\nМетод <code>GetTitle()</code> по умолчанию вызывается с аргументом <code>false</code> и возвращает заголовок страницы, установленный с помощью метода <code>SetTitle()</code>. Можно передать методу имя свойства страницы (предварительно установленное с помощью <code>SetPageProperty()</code>), значение которого будет выведено в качестве заголовка, например <code>GetTitle(\'title\')</code>.\r\n</p>\r\n<div class=\"post-scriptum\">\r\n<p>\r\nСтолкнулся с тем, что компоненты, расположенные на странице, тоже могут устанавливать свойства страницы. Если вдруг вылезли непонятные заголовки или мета-теги, надо смотреть все компоненты и снимать галочки:\r\n</p>\r\n<ul>\r\n  <li>Устанавливать заголовок страницы</li>	\r\n  <li>Устанавливать заголовок окна браузера</li>	\r\n  <li>Устанавливать ключевые слова страницы</li>	\r\n  <li>Устанавливать описание страницы</li>\r\n</ul>\r\n</div>','2018-06-02 16:08:16',1),(128,17,'Битрикс. Создание шаблона','','','CMS, CSS, HTML, PHP, Web-разработка, Битрикс, ШаблонСайта','Все файлы шаблонов хранятся в директории /bitrix/templates/ или /local/templates/, для каждого шаблона — отдельная директория. Список всех шаблонов, доступных для использования, можно посмотреть в панели управления. Битрикс рекомендует следующую структуру для директории каждого шаблона…','<p>\r\nВсе файлы шаблонов хранятся в директории <code>/bitrix/templates/</code> или <code>/local/templates/</code>, для каждого шаблона — отдельная директория. Список всех шаблонов, доступных для использования, можно посмотреть в панели управления: <em>Настройки&nbsp;• Настройки продукта&nbsp;• Сайты&nbsp;• Шаблоны сайтов</em>. \r\n</p>\r\n<p>\r\n<a href=\"/files/blog/128/1.jpg\" class=\"zoom\"><img src=\"/files/blog/128/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nБитрикс рекомендует следующую структуру для директории каждого шаблона:\r\n</p>\r\n<ul>\r\n  <li>каталог <code>images</code> — для картинок шаблона</li>\r\n  <li>каталог <code>include_areas</code> — для включаемых файлов</li>\r\n  <li>каталог <code>page_templates</code> — для образцов включаемых областей</li>\r\n  <li>файл <code>header.php</code> — часть шаблона до контента</li>\r\n  <li>файл <code>footer.php</code> — часть шаблона после контента</li>\r\n  <li>файл <code>description.php</code> — название и описание шаблона</li>\r\n  <li>файл <code>.styles.php</code> — описания стилей для визуального редактора страниц</li>\r\n  <li>файл <code>template_styles.css</code> — стили для шаблона сайта, кроме основого контента</li>\r\n  <li>файл <code>styles.css</code> — стили для основого контента и включаемых областей</li>\r\n  <li>файл <code>screen.gif</code> — скриншот шаблона</li>\r\n</ul>\r\n<p>\r\nНо это необязательно, можно делать, как удобнее. Итак, наш шаблон имеет вид:\r\n</p>\r\n[html]\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n<title>Сайт на Битрикс</title>\r\n<link rel=\"stylesheet\" href=\"css/reset.css\" type=\"text/css\" />\r\n<link rel=\"stylesheet\" href=\"css/style.css\" type=\"text/css\" />\r\n<link href=\"//fonts.googleapis.com/css?family=Monda\" rel=\"stylesheet\" type=\"text/css\">\r\n<script type=\"text/javascript\" src=\"js/jquery.min.js\"></script>\r\n<script type=\"text/javascript\" src=\"js/script.js\"></script>\r\n</head>\r\n<body>\r\n<header>\r\n    <a id=\"logo\"><img src=\"img/logo.png\" alt=\"\" /></a>\r\n    <span id=\"phone\">+7 (495) 123-45-67</span>\r\n</header>\r\n<main>\r\n    <h1>Lorem ipsum dolor sit amet</h1>\r\n    <p>\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\r\n    ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\r\n    laboris nisi ut aliquip ex ea commodo consequat.\r\n    </p>\r\n</main>\r\n<aside>\r\n    <h3>Lorem ipsum</h3>\r\n    <p>\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\r\n    ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\r\n    laboris nisi ut aliquip ex ea commodo consequat.\r\n    </p>\r\n</aside>\r\n<footer>\r\n    <span id=\"copyright\">Copyright 2018</span>\r\n    <span id=\"address\">Lorem ipsum dolor sit amet</span>\r\n</footer>\r\n</body>\r\n</html>\r\n[/html]\r\n<p>\r\nСоздаем в директории <code>/local/templates</code> директорию <code>example</code>, а внутри нее — три каталога и четыре файла:\r\n<p>\r\n<ul>\r\n  <li><code>css</code> — для файлов стилей</li>\r\n  <li><code>js</code> — для файлов скриптов</li>\r\n  <li><code>img</code> — для файлов изображений</li>\r\n  <li><code>description.php</code> — описание шаблона</li>\r\n  <li><code>header.php</code> — шапка сайта</li>\r\n  <li><code>footer.php</code> — подвал сайта</li>\r\n  <li><code>screen.gif</code> — скриншот</li>\r\n</ul>\r\n<p>\r\nВ файле <code>description.php</code> задаем название и описание шаблона (показываются в панели управления, в списке шаблонов):\r\n</p>\r\n[php]\r\n<?php\r\n$arTemplate = array(\r\n    \'NAME\' => \'Lorem ipsum\',\r\n    \'DESCRIPTION\' => \'Lorem ipsum dolor sit amet, consectetur adipiscing elit\',\r\n);\r\n[/php]\r\n<p>\r\nДля файла <code>header.php</code> вырезаем из исходного html-файла все, что выше заголовка <code>&lt;h1&gt;</code>, с которого начинается основной контент. Подключаем css и js файлы, заменяем пути к файлам изображений с помощью константы <code>SITE_TEMPLATE_PATH</code>:\r\n</p>\r\n[phtml]\r\n<?php if ( ! defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED !== true) die(); ?>\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<?php $APPLICATION->showHead(); ?>\r\n<title><?php $APPLICATION->showTitle(); ?></title>\r\n<?php\r\n    use Bitrix\\Main\\Page\\Asset;\r\n    // подключаем стили\r\n    Asset::getInstance()->addCss(SITE_TEMPLATE_PATH . \'/css/reset.css\');\r\n    Asset::getInstance()->addCss(SITE_TEMPLATE_PATH . \'/css/style.css\');\r\n    // подключаем скрипты\r\n    Asset::getInstance()->addJs(SITE_TEMPLATE_PATH . \'/js/jquery.min.js\');\r\n    Asset::getInstance()->addJs(SITE_TEMPLATE_PATH . \'/js/script.js\');\r\n    // подключаем строки\r\n    Asset::getInstance()->addString(\'<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\');\r\n    Asset::getInstance()->addString(\'<link href=\"//fonts.googleapis.com/css?family=Monda\" rel=\"stylesheet\" type=\"text/css\">\');\r\n?>\r\n</head>\r\n<body>\r\n<div id=\"panel\"><?php $APPLICATION->showPanel(); /* панель управления */ ?></div>\r\n<header>\r\n    <a id=\"logo\"><img src=\"<?= SITE_TEMPLATE_PATH ?>/img/logo.png\" alt=\"\" /></a>\r\n    <span id=\"phone\">+7 (495) 123-45-67</span>\r\n</header>\r\n<main>\r\n[/phtml]\r\n<p>\r\nДля файла <code>footer.php</code> вырезаем из исходного html-файла все, что ниже основного контента. У нас контент заканчивается перед <code>&lt;/main&gt;</code>:\r\n</p>\r\n[phtml]\r\n<?php if ( ! defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED !== true) die(); ?>\r\n\r\n</main>\r\n<aside>\r\n    <h3>Lorem ipsum</h3>\r\n    <p>\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\r\n    ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\r\n    laboris nisi ut aliquip ex ea commodo consequat.\r\n    </p>\r\n</aside>\r\n<footer>\r\n    <span id=\"copyright\">Copyright 2018</span>\r\n    <span id=\"address\">Lorem ipsum dolor sit amet</span>\r\n</footer>\r\n</body>\r\n</html>\r\n[/phtml]\r\n<p>\r\nВсе, что осталось от исходного html-файла, помещаем в файл <code>index.php</code> в корне сервера:\r\n</p>\r\n[phtml]\r\n<?php\r\nrequire($_SERVER[\'DOCUMENT_ROOT\'].\'/bitrix/header.php\');\r\n?>\r\n\r\n<h1>Lorem ipsum dolor sit amet</h1>\r\n<p>\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\r\nut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\r\nlaboris nisi ut aliquip ex ea commodo consequat.\r\n</p>\r\n\r\n<?php\r\nrequire($_SERVER[\'DOCUMENT_ROOT\'].\'/bitrix/footer.php\');\r\n?>\r\n[/phtml]\r\n<p>\r\nНаконец, можем посмотреть, что получилось — для этого надо подключить шаблон к сайту. В панели управления: <em>Настройки&nbsp;• Настройки продукта&nbsp;• Сайты</em>, выбираем наш сайт (чаще всего там один-единственный сайт <code>s1</code>), далее выбираем наш шаблон.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/128/2.jpg\" class=\"zoom\"><img src=\"/files/blog/128/2.jpg\" alt=\"\" /></a>\r\n</p>','2018-06-01 16:16:49',1),(142,11,'Режимы запуска интерпретатора PHP (SAPI)','','','Apache, CGI, CLI, FPM, FastCGI, Nginx, PHP, SAPI, Web-разработка','SAPI (Server Application Programming Interface) — программный интерфейс, который предназначен для встраивания интерпретатора PHP в другие приложения и отвечает за его работу (запуск, остановка, передача скриптов на исполнение, доступ к внешним данным).','<p>\r\nSAPI (Server Application Programming Interface) — программный интерфейс, который предназначен для встраивания интерпретатора PHP в другие приложения и отвечает за его работу (запуск, остановка, передача скриптов на исполнение, доступ к внешним данным). В частности, SAPI позволяет интерпретатору PHP работать в качестве части web-приложения (а по сути — как часть веб-сервера), получать конкретные запросы от программы-сервера и отдавать данные.\r\n</p>\r\n<p>\r\nСуществует несколько основных SAPI, определяющих способы запуска и использования PHP:\r\n</p>\r\n<p>\r\nВ качестве <strong>модуля к веб-серверу</strong> (например, для Apache модуль <code>mod_php</code>). В этом случае интерпретатор PHP выполняется в окружении процесса веб-сервера. Веб-сервер управляет количеством запущенных процессов PHP и сообщает им какие скрипты требуется исполнить.\r\n</p>\r\n<p>\r\n<strong>CGI SAPI</strong>. Использование CGI подразумевает запуск нового процесса для обработки каждого запроса. Для исполнения PHP скрипта веб-сервер запускает\r\n[code]./php-cgi /path/to/script.php\r\n[/code]\r\n<p>\r\nСам принцип такого использования подразумевает, что интерпретатор PHP исполняет только один скрипт, после чего заканчивает свою работу. Затраты на запуск процесса интерпретатора и его инициализацию очень часто сопоставимы или даже превышают затраты на исполнение PHP скрипта. Для решения этой проблемы в CGI SAPI был введён режим FastCGI. В этом режиме PHP интерпретатор запускается как независимый сервер, обрабатывающий входящие запросы на исполнение PHP скриптов по протоколу FastCGI, что позволяет ему работать с любым веб-сервером, поддерживающим этот протокол.\r\n</p>\r\n<p>\r\n<strong>FPM SAPI</strong>, известный как <code>php-fpm</code> — это другая реализация протокола FastCGI. Данная реализация решала ряд проблем, которые мешали использованию CGI/FastCGI SAPI. В частности, появилась возможность перезапуска пула интерпретаторов PHP без потери запросов, запуск нескольких пулов под разными пользователями, аварийный перезапуск интерпретаторов в случае проблем с ними и ещё несколько приятных дополнений. В дальнейшем был добавлен режим динамического управления числом запущенных процессов PHP (по принципу управления числом процессов в веб-сервере Apache).\r\n<p>\r\nВ качестве <strong>скрипта командной строки</strong> (CLI SAPI), являющегося исполняемым файлом, который вызывается пользователем из командной строки; скрипт выполняется в окружении вызвавшего пользователя. В этом случае возможно использование PHP для создания клиентских GUI-приложений и решения административных задач в операционных системах UNIX, Linux, Microsoft Windows.\r\n</p>\r\n<p>\r\nНачиная с версии PHP 5.4.0 в CLI SAPI появилась возможность запуска PHP как отдельного HTTP сервера. Однако этот режим предназначен исключительно для разработки, так как запускает только один процесс интерпретатора и выполняет все запросы исключительно последовательно.\r\n</p>\r\n<p>\r\nЧтобы узнать версию SAPI достаточно выполнить код:\r\n</p>\r\n[php]\r\necho php_sapi_name();\r\n[/php]','2018-06-17 10:58:01',1),(130,17,'Битрикс. Что такое инфоблоки?','','','CMS, Web-разработка, Битрикс, Инфоблок, РазделИнфоблока, ЭлементИнфоблока','Информационные блоки — модуль, позволяющий каталогизировать и управлять различными типами (блоками) однородной информации. С помощью информационных блоков может быть реализована публикация различных типов динамической информации: каталоги товаров, блоки новостей, справочники и т.д.','<p>\r\nИнформационные блоки — модуль, позволяющий каталогизировать и управлять различными типами (блоками) однородной информации. С помощью информационных блоков может быть реализована публикация различных типов динамической информации: каталоги товаров, блоки новостей, справочники и т.д.\r\n</p>\r\n<p>\r\nИнформационные блоки представляют собой очередной уровень абстракции над обычными таблицами СУБД, своеобразная «база данных в базе данных». Поэтому к ним частично применимы все те правила, которых придерживаются при проектировании БД.\r\n</p>\r\n<p>\r\nИнфоблоки — сущность, которая в физической структуре БД создает 4 таблицы, не меняющиеся при изменении структуры данных: типы объектов, экземпляры объектов, свойства объектов и значения свойств объектов.\r\n</p>\r\n<p>\r\nЭто все были формулировки с сайта Битрикс. Теперь чуть попроще. Допустим, мы разрабатываем сайт блога, причем без использования CMS. Для этого нам нужно создать в БД две таблицы: <code>blog_categories</code> и <code>blog_articles</code>. Таблица <code>blog_categories</code> нужна для хранения категорий (разделов) блога, таблица <code>blog_articles</code> — для хранения статей блога.\r\n</p>\r\n<p>\r\nВ Битрикс же мы создаем новый инфоблок <code>blog</code>. Поскольку инфоблоков может быть много, есть смысл не сваливать их в одну кучу, а как-то классифицировать. Поэтому сначала создаем новый тип инфоблока, скажем <code>blog_news</code> — для периодических публикаций.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/130/1.jpg\" class=\"zoom\"><img src=\"/files/blog/130/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПотом создаем сам инфоблок <code>blog</code>, тем самым описывая новый тип контента, который хотим разместить на сайте. Здесь уже есть предопределенный набор полей: название, описание, теги, seo, картинки для превью и т.д. Мало того, по умолчанию есть возможность создания не только элементов (статей блога), но и разделов (категорий блога).\r\n</p> \r\n<a href=\"/files/blog/130/2.jpg\" class=\"zoom\"><img src=\"/files/blog/130/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nНа этапе создания инфоблока, на вкладке «Подписи», можно задать — как выводить надписи «Элемент» и «Раздел». Например, для блога это будут «Статья» и «Категория». Для каталога товаров — «Товар» и «Группа».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/130/5.jpg\" class=\"zoom\"><img src=\"/files/blog/130/5.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТакже есть возможность задать дополнительные свойства инфоблока. Если мы хотим для каждой статьи блога указывать автора, добавляем свойство <code>AUTHOR</code>.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/130/4.jpg\" class=\"zoom\"><img src=\"/files/blog/130/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВсе готово, можно добавлять категории и статьи блога.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/130/3.jpg\" class=\"zoom\"><img src=\"/files/blog/130/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЕсли на сайте нужно будет разместить новости, достаточно создать новый инфоблок <code>news</code> типа <code>blog_news</code>.\r\n</p>','2018-06-03 15:03:17',1),(131,6,'Подводный камень в foreach ($items as &$item)','','','PHP, Web-разработка, Цикл','Если переменной $item предшествует знак амперсанда, это позволяет напрямую изменять элементы массива внутри цикла. В этом случае значение будет присвоено по ссылке. Но не все знают о том, какая опасность тут скрывается — надо обязательно уничтожать временную переменную $item с помощью unset().','<p>\r\nМногие любят писать такие конструкции в том или ином виде, каждый сталкивался:\r\n</p>\r\n[php]\r\nforeach ($items as &$item) {\r\n    $item = $item * 2;\r\n}\r\n[/php]\r\n<p>\r\nЕсли переменной <code>$item</code> предшествует знак амперсанда, это позволяет напрямую изменять элементы массива внутри цикла. В этом случае значение будет присвоено по ссылке. Но не все знают о том, какая опасность тут скрывается.\r\n</p>\r\n[php]\r\n$items = array(1, 2, 3, 4);\r\nforeach ($items as &$item) {\r\n    $item = $item * 2;\r\n}\r\n// $items = array(2, 4, 6, 8)\r\n\r\n// $item все еще ссылается на последний элемент: $items[3]\r\n\r\nforeach ($items as $key => $item) {\r\n    // $items[3] будет перезаписываться значениями $item на каждой итерации цикла ...\r\n    echo $key . \' => \' . $item;\r\n    print_r($items);\r\n}\r\n// ... и в конце концов предпоследнее значение определит окончательное содержимое $items[3]\r\n[/php]\r\n[code]\r\n0 => 2  Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 2 )\r\n1 => 4  Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 4 )\r\n2 => 6  Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )\r\n3 => 6  Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )\r\n[/code]\r\n<p>\r\nНадо обязательно уничтожать временную переменную <code>$item</code> с помощью <code>unset()</code>:\r\n</p>\r\n[php]\r\n$items = array(1, 2, 3, 4);\r\nforeach ($items as &$item) {\r\n    $item = $item * 2;\r\n}\r\nunset($item);\r\n[/php]','2018-06-04 16:45:31',1),(132,13,'Авторизация по ключу SSH','','','Bash, CLI, Linux, SSH, Ключ','SSH или Secure Shell — это зашифрованный протокол, который часто используется для взаимодействия и удаленного управления серверами. Если нужно что-либо сделать на удаленном сервере, придется воспользоваться SSH и работать через терминал.','<p>\r\nSSH или Secure Shell&nbsp;— это зашифрованный протокол, который часто используется для взаимодействия и удаленного управления серверами. Если нужно что-либо сделать на удаленном сервере, придется воспользоваться SSH и работать через терминал.\r\n<p>\r\n<p>\r\nВ SSH существует несколько способов авторизации. Можно каждый раз вводить пароль пользователя или использовать более безопасный способ&nbsp;— ключи SSH. Что интересно, он более удобен для применения&nbsp;— не нужно вводить пароль.\r\n</p>\r\n\r\n<h2>Как работают ключи SSH?</h2>\r\n<p>\r\nSSH-ключи представляют собой пару — закрытый и открытый ключ. Закрытый должен храниться в закрытом доступе у клиента, открытый отправляется на сервер и размещается в файле <code>~/.ssh/authorized_keys</code>.\r\n</p>\r\n<p>\r\nКогда клиент подключается к серверу, сервер отправляет сообщение, зашифрованное с помощью открытого ключа. Если клиент сможет его расшифровать с помощью закрытого ключа и вернуть правильный ответ&nbsp;— аутентификация пройдена.\r\n</p>\r\n\r\n<h2>Как создать ключи SSH?</h2>\r\n<p>\r\nСначала необходимо создать ключи SSH на клиенте. Для этого существует специальная утилита <code>ssh-keygen</code>, которая входит в набор утилит OpenSSH. По умолчанию она создает пару 2048 битных RSA ключей:\r\n</p>\r\n[cli]\r\n$ ssh-keygen\r\n[/cli]\r\n<p>\r\nУтилита предложит выбрать расположение ключей. По умолчанию ключи располагаются в папке <code>~/.ssh/</code>. Секретный ключ будет называться <code>id_rsa</code>, а публичный <code>id_rsa.pub</code>.\r\n</p>\r\n<p>\r\nЗатем утилита предложит ввести пароль для дополнительного шифрования ключа на диске. Использование дополнительного шифрования имеет только один минус&nbsp;— необходимость вводить пароль (впрочем, этого легко избежать с помощью <a href=\"http://xgu.ru/wiki/%D0%A3%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BA%D0%BB%D1%8E%D1%87%D0%B0%D0%BC%D0%B8_SSH_%D1%81_%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E_%D0%B0%D0%B3%D0%B5%D0%BD%D1%82%D0%B0\">ssh-agent</a>). Если не нужно, можно просто нажать <code>Enter</code>. Тогда доступ по ключу ssh будет выполняться автоматически и не нужно будет что-либо вводить.\r\n</p>\r\n\r\n<h2>Загрузка ключа на сервер</h2>\r\n<p>\r\nСамый простой способ — использовать утилиту <code>ssh-copy-id</code>, которая входит в пакет OpenSSH. Но для этого нужно иметь пароль доступа к серверу по SSH:\r\n</p>\r\n[cli]\r\n$ ssh-copy-id UserName@RemoteHost\r\n[/cli]\r\n<p>\r\nПри первом подключении к серверу, его ключ будет неизвестен вашему SSH клиенту и поэтому он предложит проверить и подтвердить его отпечаток:\r\n</p>\r\n[code]\r\nThe authenticity of host \'XXX.XXX.XXX.XXX\' can\'t be established.\r\nAre you sure you want to continue connecting ([grn]yes/no[/grn])? [red]yes[/red]\r\n[/code]\r\n<p>\r\nПоэтому нужно ввести <code>yes</code>. Затем вводим пароль пользователя на удаленном сервере. Утилита подключится к удаленному серверу, а затем использует содержимое ключа <code>id_rsa.pub</code> для загрузки его на сервер в файл <code>~/.ssh/authorized_keys</code>.\r\n</p>\r\n\r\n<h2>Отключение авторизации по паролю</h2>\r\n<p>\r\nЕсли пароль больше не будет использоваться, то для увеличения безопасности лучше его вовсе отключить. После авторизации на сервере\r\n</p>\r\n<ul>\r\n  <li>открываем конфигурационный файл <code>/etc/ssh/sshd_config</code></li> \r\n  <li>выставляем директиву <code>PasswordAuthenticatin</code> в значение <code>No</code></li>\r\n  <li>перезапускаем службу SSH: <code>sudo service ssh restart</code></li>\r\n</ul>','2018-06-06 19:28:20',1),(133,17,'Файлы обмена с 1С:Предприятие','','','1С:Предприятие, Web-разработка, XML, import.xml, offers.xml, Битрикс','Существует два различных набора файлов используемых в обмене между интернет-магазином и 1С:Предприятие. Набор этих файлов зависит от версии модуля обмена с веб-узлами, установленного в 1С. В «старом» обмене участвовало 3 файла: import.xml, offers.xml и orders.xml.','<p>\r\nСуществует два различных набора файлов используемых в обмене между интернет-магазином и 1С:Предприятие. Набор этих файлов зависит от версии модуля обмена с веб-узлами, установленного в 1С. В «старом» обмене участвовало 3 файла: <code>import.xml<code>, </code>offers.xml</code> и <code>orders.xml</code>. В «новом» добавилось еще 5 файлов: <code>prices.xml</code>, <code>rests.xml</code>, <code>documents.xml</code>, <code>contragents.xml</code>, <code>references.xml</code>.\r\n</p>\r\n<div class=\"note\">\r\nРазница между «старом» и «новом» обменом в том, что ранее 1C умела обмениваться с сайтом лишь в регламентном режиме с промежутком один р в 15 минут и дольше, в новом появилась возможность обновления в режиме реального времени (realtime).\r\n</div>\r\n<p>\r\nСписок файлов, участвующих в обменах:\r\n</p>\r\n<ul>\r\n  <li><code>import.xml</code> — содержит данные о товарах, категориях (группах), типах цен, складах, свойствах товаров и единицах измерения;</li>\r\n  <li><code>offers.xml</code> — содержит данные о предложениях товаров (SKU) и их свойствах;</li>\r\n  <li><code>orders.xml</code> — содержит подробные данные о заказах;</li>\r\n  <li><code>prices.xml</code> — содержит данные о ценах предложений, перечисленных в <code>offers.xml</code>;</li>\r\n  <li><code>rests.xml</code> — содержит данные о фактических остатках торговых предложений, перечисленных в <code>offers.xml</code>;</li>\r\n  <li><code>documents.xml</code> — содержит информацию о документах, прикрепленных к товарам;</li>\r\n  <li><code>contragents.xml</code> — содержит информацию о контрагентах;</li>\r\n  <li><code>references.xml</code> — содержит информацию о пользовательских справочниках, затронутых в <code>import.xml</code>.</li>\r\n</ul>\r\n<div class=\"note\">\r\nИнициатором обмена всегда является 1С. Сайт выступает только принимающей стороной и обрабатывает данные, присланные из 1С. На стороне магазина не хранятся никакие доступы, позволяющие подключиться на удаленный сервер 1С и инициализировать обмен.\r\n</div>\r\n\r\n<h2>Структура файла import.xml</h2>\r\n<p>\r\nФайл содержит основную информацию о товарах, самые важные элементы:\r\n</p>\r\n<ul>\r\n  <li><code>&lt;Классификатор&gt;</code> — Содержит описание категорий товаров и свойств.</li>\r\n  <li><code>&lt;Каталог&gt;</code> — Содержит полное описание товаров.</li>\r\n</ul>\r\n\r\n[xml]\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<КоммерческаяИнформация ВерсияСхемы=\"2.04\">\r\n	<Классификатор>\r\n        <!-- Классификатор -->\r\n    </Классификатор>\r\n	<Каталог СодержитТолькоИзменения=\"false\">\r\n        <!-- Каталог -->\r\n    <Каталог>\r\n<КоммерческаяИнформация>\r\n[/xml]\r\n\r\n<h3>&lt;Классификатор&gt;</h3>\r\n<ul>\r\n  <li><code>&lt;Группы&gt;</code> —	Содержит информацию о группах (категориях) товаров, каждая <code>&lt;Группа&gt;</code> может содержать подгруппы. Каждый элемент <code>&lt;Группа&gt;</code> содержит:\r\n  <ul>\r\n    <li><code>&lt;Ид&gt;</code> — Идентификатор группы (категории).</li>\r\n    <li><code>&lt;Наименование&gt;</code> — Наименование группы (категории).</li>\r\n  </ul>\r\n  </li>\r\n  <li><code>&lt;Свойства&gt;</code> — Содержит информацию о свойствах товаров. Каждый элемент <code>&lt;Свойство&gt;</code> содержит:\r\n  <ul>\r\n    <li><code>&lt;Ид&gt;</code> — идентификатор свойства.</li>\r\n    <li><code>&lt;Наименование&gt;</code> — наименование свойства.</li>\r\n    <li><code>&lt;ВариантыЗначений&gt;</code> — содержит описание возможных значений свойств. Каждый элемент <code>&lt;ВариантЗначения&gt;</code> содержит:</li>\r\n    <ul>\r\n      <li><code>&lt;Ид&gt;</code> — идентификатор значения свойства.</li>\r\n      <li><code>&lt;Значение&gt;</code> — значение свойства.</li>\r\n    </ul>\r\n    </li>\r\n  </ul>\r\n  </li>\r\n</ul>\r\n[xml]\r\n<Классификатор>\r\n	<Ид>4bda4442-08dd-49c3-ae90-587e45ca65ce</Ид>\r\n	<Наименование>Классификатор (Основной каталог товаров)</Наименование>\r\n	<Владелец>\r\n		<Ид>51ed67a3-7220-11df-b336-0011955cba6b</Ид>\r\n		<Наименование>Торговый дом \"Комплексный\"</Наименование>\r\n		<ОфициальноеНаименование>Закрытое акционерное общество \"Торговый дом Комплексный\"</ОфициальноеНаименование>\r\n		<ИНН>7705260699</ИНН>\r\n		<КПП>770501001</КПП>\r\n	</Владелец>\r\n	<Группы>\r\n		<Группа>\r\n			<Ид>bd72d90d-55bc-11d9-848a-00112f43529a</Ид>\r\n			<Наименование>Обувь</Наименование>\r\n			<Группы>\r\n				<Группа>\r\n					<Ид>bd72d90e-55bc-11d9-848a-00112f43529a</Ид>\r\n					<Наименование>Женская обувь</Наименование>\r\n					<Группы/>\r\n				</Группа>\r\n				<Группа>\r\n					<Ид>dee6e1cf-55bc-11d9-848a-00112f43529a</Ид>\r\n					<Наименование>Кроссовки</Наименование>\r\n					<Группы/>\r\n				</Группа>\r\n				<Группа>\r\n					<Ид>dee6e186-55bc-11d9-848a-00112f43529a</Ид>\r\n					<Наименование>Мужская обувь</Наименование>\r\n					<Группы/>\r\n				</Группа>\r\n			</Группы>\r\n		</Группа>\r\n	</Группы>\r\n    <Свойства>\r\n        <Свойство>\r\n            <Ид>14ed8b2e-55bd-11d9-848a-00112f43529a</Ид>\r\n            <Наименование>Вид товара</Наименование>\r\n        </Свойство>\r\n        <Свойство>\r\n            <Ид>14ed8b20-55bd-11d9-848a-00112f43529a</Ид>\r\n            <Наименование>Производитель</Наименование>\r\n        </Свойство>\r\n    </Свойства>\r\n</Классификатор>\r\n[/xml]\r\n<p>\r\nВарианты описания свойств товаров в элементе <code>&lt;Классификатор&gt;</code>:\r\n</p>\r\n[xml]\r\n<Свойства>\r\n    <Свойство> <!-- строка -->\r\n        <Ид>14ed8b20-55bd-11d9-848a-00112f43529a</Ид>\r\n        <Наименование>Производитель</Наименование>\r\n        <ТипЗначений>Строка</ТипЗначений>\r\n    </Свойство>\r\n    <Свойство> <!-- число -->\r\n        <Ид>984a5031-9698-11e2-9e62-002590093899</Ид>\r\n        <Наименование>Вес, кг</Наименование>\r\n        <ТипЗначений>Число</ТипЗначений>\r\n    </Свойство>\r\n    <Свойство> <!-- дата -->\r\n        <Ид>88fe46f9-8ad9-11e6-9420-001dd8b71c11</Ид>\r\n        <Наименование>Начало продаж</Наименование>\r\n        <ТипЗначений>Время</ТипЗначений>\r\n    </Свойство>\r\n    <Свойство> <!-- справочник -->\r\n        <Ид>14ed8b2e-55bd-11d9-848a-00112f43529a</Ид>\r\n        <Наименование>Напряжение питания</Наименование>\r\n        <ТипыЗначений>\r\n            <ТипЗначений>\r\n                <Тип>Справочник</Тип>\r\n                <ВариантыЗначений>\r\n                    <ВариантЗначения>\r\n                        <Ид>14ed8b3e-55bd-11d9-848a-00112f43529a</Ид>\r\n                        <Значение>12 Вольт</Значение>\r\n                    </ВариантЗначения>\r\n                    <ВариантЗначения>\r\n                        <Ид>14ed8b50-55bd-11d9-848a-00112f43529a</Ид>\r\n                        <Значение>24 Вольт</Значение>\r\n                    </ВариантЗначения>\r\n                </ВариантыЗначений>\r\n            </ТипЗначений>\r\n        </ТипыЗначений>\r\n    </Свойство>\r\n</Свойства>\r\n[/xml]\r\n<div class=\"note\">\r\n<p>\r\nПоследний вариант, судя по всему, на самом деле представляет собой не «чистый» справочник, а составной тип данных. Т.е. значением свойства может быть, например, элемент справочника, строка, число или дата.\r\n</p>\r\n[xml]\r\n<Свойство> <!-- составной тип -->\r\n    <Ид>14ed8b2e-55bd-11d9-848a-00112f43529a</Ид>\r\n    <Наименование>Напряжение питания</Наименование>\r\n    <ТипыЗначений>\r\n        <ТипЗначений>\r\n            <Тип>Справочник</Тип>\r\n        </ТипЗначений>\r\n        <ТипЗначений>\r\n            <Тип>Строка</Тип>\r\n        </ТипЗначений>\r\n        <ТипЗначений>\r\n            <Тип>Число</Тип>\r\n        </ТипЗначений>\r\n        <ТипЗначений>\r\n            <Тип>Дата</Тип>\r\n        </ТипЗначений>\r\n    </ТипыЗначений>\r\n</Свойство>\r\n[/xml]\r\n<p>\r\n«Чистый» справочник (содержащий только значения ссылочного типа) может быть представлен проще:\r\n</p>\r\n[xml]         \r\n<Свойство> <!-- справочник -->\r\n    <Ид>14ed8b2e-55bd-11d9-848a-00112f43529a</Ид>\r\n    <Наименование>Напряжение питания</Наименование>\r\n    <ТипЗначений>Справочник</ТипЗначений>\r\n    <ВариантыЗначений>\r\n        <ВариантЗначения>\r\n            <Ид>14ed8b3e-55bd-11d9-848a-00112f43529a</Ид>\r\n            <Значение>12 Вольт</Значение>\r\n        </ВариантЗначения>\r\n        <ВариантЗначения>\r\n            <Ид>14ed8b50-55bd-11d9-848a-00112f43529a</Ид>\r\n            <Значение>24 Вольт</Значение>\r\n        </ВариантЗначения>\r\n    </ВариантыЗначений>\r\n</Свойство>\r\n[/xml]\r\n<p>\r\nНо это только мои догадки, не нашел нигде толкового описания формата элемента <code>&lt;Свойство&gt;</code>, собирал по крупицам.\r\n</div>\r\n<p>\r\nВарианты задания значений свойств товаров в элементе <code>&lt;Каталог&gt;</code>:\r\n</p>\r\n</p>\r\n[xml]\r\n<Товары>\r\n    <Товар>\r\n        <ЗначенияСвойств>\r\n            <ЗначенияСвойства> <!-- строка -->\r\n                <Ид>14ed8b20-55bd-11d9-848a-00112f43529a</Ид>\r\n                <Значение>Аврора</Значение>\r\n            </ЗначенияСвойства>\r\n            <ЗначенияСвойства> <!-- число -->\r\n                <Ид>984a5031-9698-11e2-9e62-002590093899</Ид>\r\n                <Значение>5</Значение>\r\n            </ЗначенияСвойства>\r\n            <ЗначенияСвойства> <!-- дата -->\r\n                <Ид>88fe46f9-8ad9-11e6-9420-001dd8b71c11</Ид>\r\n                <Значение>01.02.2018 0:00:00</Значение>\r\n            </ЗначенияСвойства>\r\n            <ЗначенияСвойства> <!-- справочник -->\r\n                <Ид>14ed8b2e-55bd-11d9-848a-00112f43529a</Ид>\r\n                <Значение>14ed8b3e-55bd-11d9-848a-00112f43529a</Значение> <!-- 12 Вольт -->\r\n                <Значение>14ed8b50-55bd-11d9-848a-00112f43529a</Значение> <!-- 24 Вольт -->\r\n            </ЗначенияСвойства>\r\n        </ЗначенияСвойств>\r\n    </Товар>\r\n</Товары>\r\n[/xml]\r\n\r\n<h3>&lt;Каталог&gt;</h3>\r\n<ul>\r\n  <li><code>&lt;Товары&gt;</code> —	Содержит описания товаров. Каждый элемент <code>&lt;Товар&gt;</code> содержит:\r\n  <ul>\r\n    <li><code>&lt;Ид&gt;</code> — Идентификатор товара.</li>\r\n    <li><code>&lt;Артикул&gt;</code> — Артикул товара.</li>\r\n    <li><code>&lt;Наименование&gt;</code> — Название товара.</li>\r\n    <li><code>&lt;Группы&gt;</code> — Содержит список элементов <code>&lt;Ид&gt;</code> групп, к которым относится товар.</li>\r\n    <li><code>&lt;Описание&gt;</code> —	Подробное описание номенклатуры.</li>\r\n    <li><code>&lt;ЗначенияСвойств&gt;</code> — Содержит свойства товаров, относящихся к данному товару. Каждый элемент <code>&lt;ЗначениеСвойства&gt;</code> содержит:\r\n    <ul>\r\n      <li><code>&lt;Ид&gt;</code> — идентификатор свойства, по которому устанавливается взаимосвязь со свойством из элемента <code>&lt;Классификатор&gt;</code>.</li>\r\n      <li><code>&lt;Значение&gt;</code> — идентификатор значения свойства, по которому устанавливается взаимосвязь со значением свойства из элемента <code>&lt;Классификатор&gt;</code>.</li>\r\n    </ul>\r\n    </li>\r\n    <li><code>&lt;СтавкиНалогов&gt;</code> — Cписок ставок налогов. Каждый элемент <code>&lt;СтавкаНалогов&gt;</code> содержит:\r\n    <ul>\r\n    <li><code>&lt;Наименование&gt;</code> наименование ставки.</li>\r\n    <li><code>&lt;Ставка&gt;</code> значение ставки.</li>\r\n    </ul>\r\n    </li>\r\n    <li><code>&lt;ХарактеристикиТовара&gt;</code> — Содержит список характеристик номенклатуры в 1С (например, материал, масса). Каждый элемент <code>&lt;ХарактеристикаТовара&gt;</code> содержит:\r\n    <ul>\r\n      <li><code>&lt;Наименование&gt;</code> — наименование характеристики.</li>\r\n      <li><code>&lt;Значение&gt;</code> — значение характеристики.</li>\r\n    </ul>\r\n  </li>\r\n    <li><code>&lt;ЗначенияРеквизитов&gt;</code> — Cписок значений дополнительных реквизитов номенклатуры. Каждый элемент <code>&lt;ЗначениеРеквизита&gt;</code> содержит:\r\n    <ul>\r\n    <li><code>&lt;Наименование&gt;</code> — наименование реквизита.</li>\r\n    <li><code>&lt;Значение&gt;</code> — значение реквизита.</li>\r\n    </ul>\r\n    </li>\r\n    <li><code>&lt;Картинка&gt;</code> — содержит путь к картинке.</li>\r\n  </ul>\r\n  </li>\r\n</ul>\r\n[xml]\r\n<Каталог СодержитТолькоИзменения=\"false\">\r\n	<Ид>4bda4442-08dd-49c3-ae90-587e45ca65ce</Ид>\r\n	<ИдКлассификатора>4bda4442-08dd-49c3-ae90-587e45ca65ce</ИдКлассификатора>\r\n	<Наименование>Основной каталог товаров</Наименование>\r\n	<Товары>\r\n		<Товар>\r\n			<Ид>bd72d910-55bc-11d9-848a-00112f43529a</Ид>\r\n			<Артикул>Б-130001</Артикул>\r\n			<Наименование>Женские ботфорты</Наименование>\r\n			<БазоваяЕдиница Код=\"715\" НаименованиеПолное=\"Пара (2 шт.)\" МеждународноеСокращение=\"NPR\">пар</БазоваяЕдиница>\r\n			<ПолноеНаименование>Женские ботфорты Б-130001 Фабрика обуви</ПолноеНаименование>\r\n			<Группы>\r\n				<Ид>bd72d90e-55bc-11d9-848a-00112f43529a</Ид>\r\n			</Группы>\r\n			<ЗначенияСвойств>\r\n				<ЗначенияСвойства>\r\n					<Ид>28b6895a-24a9-11e0-aeec-0015e9b8c48d</Ид>\r\n					<Значение/>\r\n				</ЗначенияСвойства>\r\n			</ЗначенияСвойств>\r\n			<СтавкиНалогов>\r\n				<СтавкаНалога>\r\n					<Наименование>НДС</Наименование>\r\n					<Ставка>18</Ставка>\r\n				</СтавкаНалога>\r\n			</СтавкиНалогов>\r\n            <ХарактеристикиТовара>\r\n                <ХарактеристикаТовара>\r\n                    <Наименование>Цвет</Наименование>\r\n                    <Значение>Белый</Значение>\r\n                </ХарактеристикаТовара>\r\n            </ХарактеристикиТовара>\r\n			<ЗначенияРеквизитов>\r\n				<ЗначениеРеквизита>\r\n					<Наименование>ВидНоменклатуры</Наименование>\r\n					<Значение>Обувь</Значение>\r\n				</ЗначениеРеквизита>\r\n				<ЗначениеРеквизита>\r\n					<Наименование>Полное наименование</Наименование>\r\n					<Значение>Женские ботфорты Б-130001 Фабрика обуви</Значение>\r\n				</ЗначениеРеквизита>\r\n				<ЗначениеРеквизита>\r\n					<Наименование>Вес</Наименование>\r\n					<Значение>1</Значение>\r\n				</ЗначениеРеквизита>\r\n			</ЗначенияРеквизитов>\r\n		</Товар>\r\n	</Товары>\r\n</Каталог>\r\n[/xml]\r\n\r\n<h2>Структура файла offers.xml</h2>\r\n<p>\r\nФайл содержит информацию о ценах товаров, два главных элемента:\r\n</p>\r\n<ul>\r\n  <li><code>&lt;ТипыЦен&gt;</code> — содержит общее описание цен.\r\n  <li><code>&lt;Предложения&gt;</code> — содержит список товаров с ценами и количеством.\r\n</ul>\r\n\r\n[xml]\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<КоммерческаяИнформация ВерсияСхемы=\"2.04\">\r\n    <ПакетПредложений СодержитТолькоИзменения=\"true\">\r\n        <ТипыЦен>\r\n            <!-- ТипыЦен -->\r\n        </ТипыЦен>\r\n        <Предложения>\r\n            <!-- Предложения -->\r\n        </Предложения>\r\n    </ПакетПредложений>\r\n</КоммерческаяИнформация>\r\n[/xml]\r\n\r\n<h3>&lt;ТипыЦен&gt;</h3>\r\n<p>\r\nКаждый элемент <code>&lt;ТипЦены&gt;</code> содержит:\r\n<ul>\r\n  <li><code>&lt;Ид&gt;</code> —	Идентификатор цены.</li>\r\n  <li><code>&lt;Наименование&gt;</code> — Наименование цены.</li>\r\n  <li><code>&lt;Валюта&gt;</code> — Валюта цены.</li>\r\n</ul>\r\n[xml]\r\n<ТипыЦен>\r\n    <ТипЦены>\r\n        <Ид>aabf5dd5-f6b0-406d-b4e7-f93fb8329eec</Ид>\r\n        <Наименование>Розничная</Наименование>\r\n        <Валюта>руб</Валюта>\r\n        <Налог>\r\n            <Наименование>НДС</Наименование>\r\n            <УчтеноВСумме>true</УчтеноВСумме>\r\n        </Налог>\r\n    </ТипЦены>\r\n    <ТипЦены>\r\n        <Ид>b6fb4bdd-c8c6-4e92-9337-e759f5e0c5d8</Ид>\r\n        <Наименование>Оптовая</Наименование>\r\n        <Валюта>руб</Валюта>\r\n        <Налог>\r\n            <Наименование>НДС</Наименование>\r\n            <УчтеноВСумме>true</УчтеноВСумме>\r\n        </Налог>\r\n    </ТипЦены>\r\n    <ТипЦены>\r\n        <Ид>3ef9485b-e7e7-433f-94b5-7e72e2f0127f</Ид>\r\n        <Наименование>Интеренет</Наименование>\r\n        <Валюта>руб</Валюта>\r\n        <Налог>\r\n            <Наименование>НДС</Наименование>\r\n            <УчтеноВСумме>true</УчтеноВСумме>\r\n        </Налог>\r\n    </ТипЦены>\r\n</ТипыЦен>\r\n[/xml]\r\n\r\n<h3>&lt;Предложения&gt;</h3>\r\n<p>\r\nКаждый элемент <code>&lt;Предложение&gt;</code> содержит:\r\n<ul>\r\n  <li><code>&lt;Ид&gt;</code> — Идентификатор номенклатуры.\r\n  <li><code>&lt;Наименование&gt;</code> — Наименование номенклатуры.	\r\n  <li><code>&lt;Цены&gt;</code> — Значения цен номенклатуры. Каждый элемент <code>&lt;Цена&gt;</code> содержит:\r\n  <ul>\r\n    <li><code>&lt;Представление&gt;</code> — Название цены.\r\n    <li><code>&lt;ИдТипаЦены&gt;</code> — Идентификатор цены, по которой устанавливается взаимосвязь с типом цен из элемента <code>&lt;ТипыЦен&gt;</code>.\r\n    <li><code>&lt;ЦенаЗаЕдиницу&gt;</code> — Значение цены.\r\n    <li><code>&lt;Валюта&gt;</code> — Валюта цены.\r\n    <li><code>&lt;Единица&gt;</code> — Единица измерения.\r\n    <li><code>&lt;Коэффициент&gt;</code> — Коэффициент единицы измерения.\r\n  </ul>\r\n  </li>\r\n  <li><code>&lt;Количество&gt;</code> — количество на складе.\r\n</ul>\r\n[xml]\r\n<Предложения>\r\n    <Предложение>\r\n        <Ид>05e26d70-01e4-11dc-a411-00055d80a2d1</Ид>\r\n        <Наименование>Стол обеденный</Наименование>\r\n        <БазоваяЕдиница Код=\"796\" НаименованиеПолное=\"Штука\" МеждународноеСокращение=\"PCE\">шт</БазоваяЕдиница>\r\n        <Цены>\r\n            <Цена>\r\n                <Представление>50,00 руб. за шт</Представление>\r\n                <ИдТипаЦены>aabf5dd5-f6b0-406d-b4e7-f93fb8329eec</ИдТипаЦены>\r\n                <ЦенаЗаЕдиницу>50.00</ЦенаЗаЕдиницу>\r\n                <Валюта>руб</Валюта>\r\n                <Единица>шт</Единица>\r\n                <Коэффициент>1</Коэффициент>\r\n            </Цена>\r\n            <Цена>\r\n                <Представление>40,00 руб. за шт</Представление>\r\n                <ИдТипаЦены>b6fb4bdd-c8c6-4e92-9337-e759f5e0c5d8</ИдТипаЦены>\r\n                <ЦенаЗаЕдиницу>40.00</ЦенаЗаЕдиницу>\r\n                <Валюта>руб</Валюта>\r\n                <Единица>шт</Единица>\r\n                <Коэффициент>1</Коэффициент>\r\n            </Цена>\r\n            <Цена>\r\n                <Представление>45,00 руб. за шт</Представление>\r\n                <ИдТипаЦены>3ef9485b-e7e7-433f-94b5-7e72e2f0127f</ИдТипаЦены>\r\n                <ЦенаЗаЕдиницу>45.00</ЦенаЗаЕдиницу>\r\n                <Валюта>руб</Валюта>\r\n                <Единица>шт</Единица>\r\n                <Коэффициент>1</Коэффициент>\r\n            </Цена>\r\n        </Цены>\r\n        <Количество>127</Количество>\r\n    </Предложение>\r\n</Предложения>\r\n[/xml]\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"http://v8.1c.ru/edi/edi_stnd/131/\">Протокол обмена между 1С:Предприятие и сайтом</a></li>\r\n  <li><a href=\"http://v8.1c.ru/edi/edi_stnd/131/import.xml\">Образец файла import.xml</a></li>\r\n  <li><a href=\"http://v8.1c.ru/edi/edi_stnd/131/offers.xml\">Образец файла offers.xml</a></li>\r\n  <li><a href=\"https://1c.1c-bitrix.ru/ecommerce/download.php\">Дополнения конфигураций\r\nдля обмена с Битрикс</a></li>\r\n  <li><a href=\"https://www.cs-cart.ru/docs/4.1.x/developer/1c/catalogxml.html\">Описание файлов import.xml и offers.xml</a></li>\r\n  <li><a href=\"https://smsdesign.com.ua/blog/bitrix/import-offers-files-to-1c.html\">Подробно о файлах обмена с 1С</a></li>\r\n  <li><a href=\"https://www.clickon.ru/blog/exchange-1c-with-bitrix/\">Как 1С выгружает товары на сайт Битрикс</a></li>\r\n  <li><a href=\"https://mrcappuccino.ru/blog/post/1c-exchange\">Процесс обмена Битрикса и 1С</a></li>\r\n</ul>','2018-06-07 15:51:00',1),(134,7,'Отбор строк табличной части','','','1С:Предприятие, ОбычнаяФорма, ОтборСтрок, ТаблицаФормы, ТабличнаяЧасть, УправляемаяФорма, ЭлементФормы','Часто возникает задача показать только нужные строки в табличной части документа или справочника. Для этого можно использовать свойство ОтборСтрок, которое входит в расширение табличного поля, связанного с табличной частью. Для обычных форм использовать его очень просто…','<p>\r\nЧасто возникает задача показать только нужные строки в табличной части документа или справочника. Для этого можно использовать свойство <code>ОтборСтрок</code>, которое входит в расширение табличного поля, связанного с табличной частью. Для <strong>обычных форм</strong> использовать его очень просто:\r\n</p>\r\n[язык]\r\n// установить отбор\r\nЭлементыФормы.ИмяТабличногоПоля.ОтборСтрок.ИмяКолонки.Установить(ЗначениеОтбора);\r\n[/язык]\r\n[язык]\r\n// отключить отбор\r\nЭлементыФормы.ИмяТабличногоПоля.ОтборСтрок.ИмяКолонки.Установить(,Ложь);\r\n[/язык]\r\n<p>\r\nИли второй вариант:\r\n</p>\r\n[язык]\r\nЭлементыФормы.ИмяТабличногоПоля.ОтборСтрок.ИмяКолонки.Использование = Истина;\r\nЭлементыФормы.ИмяТабличногоПоля.ОтборСтрок.ИмяКолонки.ВидСравнения = ВидСравнения.Равно;\r\nЭлементыФормы.ИмяТабличногоПоля.ОтборСтрок.ИмяКолонки.Значение = ЗначениеОтбора;\r\n[/язык]\r\n<p>\r\nА теперь конкретные примеры:\r\n</p>\r\n[язык]\r\n// выбрать строки с ценой = 100\r\nЭлементыФормы.Товары.ОтборСтрок.Цена.Установить(100);\r\n \r\n// выбрать строки с ценой 100 и опр. валютой\r\nЭлементыФормы.Товары.ОтборСтрок.Валюта.Установить(ВалютаУпр);\r\nЭлементыФормы.Товары.ОтборСтрок.Цена.Установить(200);\r\n \r\n// выбрать строки с ценой >= 100 (неравенство)\r\nЭлементыФормы.Товары.ОтборСтрок.Цена.Использование = Истина;\r\nЭлементыФормы.Товары.ОтборСтрок.Цена.ВидСравнения = ВидСравнения.БольшеИлиРавно;\r\nЭлементыФормы.Товары.ОтборСтрок.Цена.Значение = 100;\r\n \r\n// выбрать строки с ценой от 100 до 200 (интервал)\r\nЭлементыФормы.Товары.ОтборСтрок.Цена.Использование = Истина;\r\nЭлементыФормы.Товары.ОтборСтрок.Цена.ВидСравнения = ВидСравнения.Интервал;\r\nЭлементыФормы.Товары.ОтборСтрок.Цена.ЗначениеС = 100;\r\nЭлементыФормы.Товары.ОтборСтрок.Цена.ЗначениеПо = 200;\r\n \r\n// выбрать строки с определенными товарами по списку\r\nЭлементыФормы.Товары.ОтборСтрок.Товар.Использование = Истина;\r\nЭлементыФормы.Товары.ОтборСтрок.Товар.ВидСравнения = ВидСравнения.ВСписке;\r\nЭлементыФормы.Товары.ОтборСтрок.Товар.Значение.Добавить(ПервыйТовар);\r\nЭлементыФормы.Товары.ОтборСтрок.Товар.Значение.Добавить(ВторойТовар);\r\n[/язык]\r\n<div class=\"note\">\r\n<code>ОтборСтрок</code> входит в расширение табличного поля табличной части, т.е. табличное поле должно быть связано с табличной частью. Если же оно связано с динамическим списком, то здесь нужно использовать свойство <code>Отбор</code> для объекта типа <code>СправочникСписок</code>.\r\n</div>\r\n<p>\r\nС помощью этого свойства можно реализовать подчиненные (связанные) табличные части. При смене текущей строки в первой табличной части, вторая табличная часть показывает только связанную информацию. Например, таким образом можно реализовать работу с комплектами: первая табличная часть — комплекты, вторая — состав комплекта.\r\n</p>\r\n<p>\r\nВо второй табличной части должна быть колонка — идентификационный признак, связывающий ее с первой табличной частью. Таких колонок может быть несколько (составной ключ). В событии <code>ПриАктивизацииСтроки</code> для первого табличного поля пишем:\r\n</p>\r\n[язык]\r\nЭлементыФормы.СоставКомплекта.ОтборСтрок.Комплект.Установить(Комплект);\r\n[/язык]\r\n<p>\r\nДля <strong>управляемых форм</strong> используется <code>ФиксированнаяСтруктура</code>:\r\n</p>\r\n[язык]\r\nЭлементыФормы.ИмяТабличногоПоля.ОтборСтрок = Новый ФиксированнаяСтруктура(\"Поставщик\", Поставщик);\r\n[/язык]\r\n<p>\r\nОтбор по двум колонкам:\r\n</p>\r\n[язык]\r\nЭлементыФормы.ИмяТабличногоПоля.ОтборСтрок = Новый ФиксированнаяСтруктура(\r\n    \"Номенклатура,Поставщик\",\r\n    Номенклатура,\r\n    Поставщик\r\n);\r\n[/язык]\r\n<p>\r\nИли второй вариант:\r\n</p>\r\n[язык]\r\nПараметрыОтбора = Новый Структура();\r\nПараметрыОтбора.Вставить(\"Номенклатура\", Номенклатура);\r\nПараметрыОтбора.Вставить(\"Поставщик\", Поставщик);\r\nЭлементыФормы.ИмяТабличногоПоля.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);\r\n[/язык]','2018-06-08 19:11:33',1),(135,11,'Установка PHP как FastCGI под Apache (Windows 10)','','','Apache, CGI, FastCGI, PHP, SAPI, Web-разработка, Windows, php.ini, Установка','При установке Битрикс столкнулся с необходимостью изменять настройки PHP в файле php.ini. Но, поскольку у меня PHP установлен как модуль Apache, эти изменения коснулись всех виртуальных хостов. Из-за этого перестал работать phpMyAdmin. Пришлось устанавливать PHP как FastCGI.','<p>\r\nПри установке Битрикс столкнулся с необходимостью изменять настройки PHP в файле <code>php.ini</code>. Например, вот эти\r\n</p>\r\n[ini]\r\nshort_open_tag = On\r\nmbstring.func_overload = 2\r\nmax_input_vars = 10000\r\n[/ini]\r\n<p>\r\nНо, поскольку у меня PHP установлен как модуль Apache, эти изменения затронули все виртуальные хосты. Из-за этого перестал работать phpMyAdmin. Пришлось устанавливать PHP как FastCGI, чтобы для каждого виртуального хоста был свой файл <code>php.ini</code>.\r\n</p>\r\n<div class=\"note\">\r\n<p>\r\nИнтерфейс FastCGI — клиент-серверный протокол взаимодействия вебсервера и приложения, дальнейшее развитие технологии CGI. По сравнению с CGI является более производительным и безопасным.\r\n</p>\r\n<p>\r\nFastCGI ликвидирует множество ограничений CGI-программ. Проблема CGI-программ в том, что они должны быть перезапущены веб-сервером при каждом запросе, что приводит к понижению производительности.\r\n</p>\r\n<p>\r\nFastCGI убирает это ограничение, сохраняя процесс запущенным и передавая запросы этому постоянно запущенному процессу. Это позволяет не тратить время на запуск новых процессов.\r\n</p>\r\n<p>\r\nВ то время как CGI-программы взаимодействуют с сервером через STDIN и STDOUT запущенного CGI-процесса, FastCGI-процессы используют Unix Domain Sockets или TCP/IP для связи с сервером. Это значит, что FastCGI-программы могут быть запущены не только на этом же сервере, но и где угодно в сети. Также возможна обработка запросов несколькими FastCGI-процессами, работающими параллельно.\r\n</p>\r\n</div>\r\n<p>\r\nДля начала скачиваем модуль <code>mod_fcgid</code> с сайта <a href=\"https://www.apachelounge.com/download/\">apachelounge.com</a>, распаковываем и кладем в директорию <code>modules</code> сервера Apache. У меня это <code>C:/wamp/apache/modules</code>. Далее, переходим в директорию <code>apache/conf</code> и вносим изменения в файл конфигурации Apache <code>httpd.conf</code>:\r\n</p>\r\n[apache]\r\n<Directory \"d:/work/localhost*/www\">\r\n    Options Indexes FollowSymLinks ExecCGI\r\n    AddHandler fcgid-script .php\r\n    FcgidWrapper \"c:/wamp/php71/php-cgi.exe\" .php\r\n    AllowOverride All\r\n    Require all granted\r\n</Directory>\r\n[/apache]\r\n<p>\r\nВ конец файла дописываем:\r\n</p>\r\n[apache]\r\nLoadModule fcgid_module modules/mod_fcgid.so\r\nFcgidInitialEnv PHPRC \"c:/wamp/php71\"\r\n[/apache]\r\n<p>\r\nПоследняя директива означает, что файл <code>php.ini</code> расположен в директории <code>C:/wamp/php71</code>. Это будет файл конфигурации PHP по умолчанию. Строки, которые отвечают за работу PHP как модуля Apache, удаляем или комментируем:\r\n</p>\r\n[apache]\r\n# PHPIniDir \"c:/wamp/php71\"\r\n# AddHandler application/x-httpd-php .php\r\n# LoadModule php7_module \"c:/wamp/php71/php7apache2_4.dll\"\r\n[/apache]\r\n<p>\r\nТеперь редактируем файл виртуальных хостов <code>httpd-vhosts.conf</code>. У меня он расположен в <code>C:/wamp/apache/conf/extra</code>:\r\n</p>\r\n[apache]\r\n#\r\n#   localhost\r\n#\r\n<VirtualHost *:80>\r\n    ServerAdmin admin@localhost\r\n    ServerName localhost\r\n    DocumentRoot \"d:/work/localhost/www\"\r\n    ServerAlias host.ru www.host.ru\r\n    # Переопределяем PHPRC, чтобы у хоста был свой php.ini\r\n    FcgidInitialEnv PHPRC \"d:/work/localhost\"\r\n    ErrorLog \"d:/work/localhost/error.log\"\r\n    CustomLog \"d:/work/localhost/access.log\" common\r\n</VirtualHost>\r\n\r\n#\r\n#   localhost1\r\n#\r\n<VirtualHost *:80>\r\n    ServerAdmin admin@localhost1\r\n    ServerName localhost1\r\n    DocumentRoot \"d:/work/localhost1/www\"\r\n    ServerAlias host1.ru www.host1.ru\r\n    # Переопределяем PHPRC, чтобы у хоста был свой php.ini\r\n    FcgidInitialEnv PHPRC \"d:/work/localhost1\"\r\n    ErrorLog \"d:/work/localhost1/error.log\"\r\n    CustomLog \"d:/work/localhost1/access.log\" common\r\n</VirtualHost>\r\n\r\n#\r\n#   localhost2\r\n#\r\n<VirtualHost *:80>\r\n    ServerAdmin admin@localhost2\r\n    ServerName localhost2\r\n    DocumentRoot \"d:/work/localhost2/www\"\r\n    ServerAlias host2.ru www.host2.ru\r\n    # Переопределяем PHPRC, чтобы у хоста был свой php.ini\r\n    FcgidInitialEnv PHPRC \"d:/work/localhost2\"\r\n    ErrorLog \"d:/work/localhost2/error.log\"\r\n    CustomLog \"d:/work/localhost2/access.log\" common\r\n</VirtualHost>\r\n\r\n#\r\n#   localhost3\r\n#\r\n<VirtualHost *:80>\r\n    ServerAdmin admin@localhost3\r\n    ServerName localhost3\r\n    DocumentRoot \"d:/work/localhost3/www\"\r\n    ServerAlias host3.ru www.host3.ru\r\n    # Переопределяем PHPRC, чтобы у хоста был свой php.ini\r\n    FcgidInitialEnv PHPRC \"d:/work/localhost3\"\r\n    ErrorLog \"d:/work/localhost3/error.log\"\r\n    CustomLog \"d:/work/localhost3/access.log\" common\r\n</VirtualHost>\r\n[/apache]\r\n<p>\r\nДля каждого виртуального хоста добавляем одну строчку, которая переопределяет переменную среды <code>PHPRC</code>. После этого берем дефолтный <code>php.ini</code> из директории <code>C:/wamp/php71</code> и копируем в директорию каждого хоста. У меня это\r\n</p>\r\n<ul>\r\n  <li><code>D:/work/localhost</code></li>\r\n  <li><code>D:/work/localhost1</code></li>\r\n  <li><code>D:/work/localhost2</code></li>\r\n  <li><code>D:/work/localhost3</code></li>\r\n</ul>\r\n<p>\r\nВ каждом файле <code>php.ini</code> находим строки\r\n</p>\r\n[ini]\r\n; The root of the PHP pages, used only if nonempty.\r\n; if PHP was not compiled with FORCE_REDIRECT, you SHOULD set doc_root\r\n; if you are running php as a CGI under any web server (other than IIS)\r\n; see documentation for security issues.  The alternate is to use the\r\n; cgi.force_redirect configuration below\r\n; http://php.net/doc-root\r\ndoc_root =\r\n[/ini]\r\n<p>\r\nи установливаем значение <code>doc_root</code>:\r\n</p>\r\n[ini]\r\ndoc_root = \"d:/work/localhost/www\"\r\n[/ini]\r\n[ini]\r\ndoc_root = \"d:/work/localhost1/www\"\r\n[/ini]\r\n[ini]\r\ndoc_root = \"d:/work/localhost2/www\"\r\n[/ini]\r\n[ini]\r\ndoc_root = \"d:/work/localhost3/www\"\r\n[/ini]\r\n<p>\r\nТеперь у каждого виртуального хоста будет свой <code>php.ini</code>. Осталось только перезапустить Apache, чтобы изменения вступили в силу.\r\n</p>\r\n[cli]\r\n> cd C:/wamp/apache/bin\r\n> httpd.exe -k restart\r\n[/cli]\r\n\r\n<h2>Разные версии PHP</h2>\r\n<p>\r\nЕсли для какого-то проекта нужно использовать другую версию PHP, вносим изменения в файл <code>httpd-vhosts.conf</code>\r\n</p>\r\n[apache]\r\n#\r\n#   localhost4\r\n#\r\n<VirtualHost *:80>\r\n    ServerAdmin admin@localhost4\r\n    ServerName localhost4\r\n    DocumentRoot \"d:/work/localhost4/www\"\r\n    ServerAlias host4.ru www.host4.ru\r\n    # Переопределяем PHPRC, чтобы у хоста был свой php.ini\r\n    FcgidInitialEnv PHPRC \"d:/work/localhost4\"\r\n    # Этот хост будет работать с PHP версии 5.6\r\n    <Directory \"d:/work/localhost4/www\">\r\n        FcgidWrapper \"c:/wamp/php56/php-cgi.exe\" .php\r\n    </Directory>\r\n    ErrorLog d:/work/localhost4/error.log\r\n    CustomLog d:/work/localhost4/access.log common\r\n</VirtualHost>\r\n[/apache]\r\n<p>\r\nУ меня PHP 5.6 установлен в директории <code>C:/wamp/php56</code>, поэтому именно оттуда я взял <code>php.ini</code> и скопировал в <code>D:/work/localhost4</code>.\r\n</p>\r\n\r\n<div class=\"post-scriptum\">\r\n<p>\r\nЧуть позже столкнулся с ошибкой при тестировании системы в Битрикс (<em>Настройки • Инструменты • Проверка системы</em>):\r\n</p>\r\n[code]\r\nЗагрузка файла больше 4 Мб: [red]Ошибка! Не работает[/red]\r\n[/code]\r\n<p>\r\nПроверил настройки <code>php.ini</code>, связанные с загрузкой файлов:\r\n</p>\r\n[ini]\r\n; загрузка файлов разрешена\r\nfile_uploads = On\r\n; максимальный размер загружаемого файла\r\nupload_max_filesize = 32M\r\n; максимальное кол-во загружаемых файлов\r\nmax_file_uploads = 20\r\n; максимальный размер POST-данных\r\npost_max_size = 64M\r\n; максимальное время выполнения скрипта\r\nmax_execution_time = 600\r\n; ограничение памяти, используемой скриптом\r\nmemory_limit = 512M\r\n[/ini]\r\n<p>\r\nВроде все в порядке. Тогда посмотрел еще логи Apache, и там увидел ошибку:\r\n</p>\r\n[code]\r\n[Sun Jun 10 13:03:33.657355 2018] [fcgid:warn] [pid 6148:tid 1224] [client 127.0.0.1:3954] mod_fcgid:\r\nHTTP request length 135743 (so far) exceeds MaxRequestLen (131072)\r\n[/code]\r\n<p>\r\nЗначение по умолчанию <code>FcgidMaxRequestLen</code> равно 131072 байт (128 Кб). Добавил в конец файла <code>httpd.conf</code>:\r\n</p>\r\n[apache]\r\n# максимальный размер данных HTTP-запроса 64 Мб\r\nFcgidMaxRequestLen 67108864\r\n# максимальное время выполнения скрипта 600 сек.\r\nFcgidIOTimeout 600\r\n[/apache]\r\n<p>\r\nЭтого должно быть достаточно, но есть еще и другие настройки:\r\n</p>\r\n<ul>\r\n  <li><code>FcgidFixPathinfo</code> — должно быть 1, если в <code>php.ini</code> параметр <code>cgi.fix_pathinfo</code> выставлен в 1</li>\r\n  <li><code>FcgidIOTimeout</code> — максимальное время ожидания ответа от FastCGI приложения</li>\r\n  <li><code>FcgidMaxRequestLen</code> — максимальный размер запроса HTTP</li>\r\n  <li><code>FcgidMaxProcesses</code> — максимальное количество процессов FastCGI</li>\r\n  <li><code>FcgidMinProcessesPerClass</code> — минимальное количество процессов на программу FastCGI</li>\r\n  <li><code>FcgidMaxProcessesPerClass</code> — максимальное количество процессов на программу FastCGI</li>\r\n  <li><code>FcgidIdleTimeout</code> — если процесс не обрабатывал запросы в течении указанного здесь времени и текущее количество процессов на программу больше, чем <code>FcgidMinProcessesPerClass</code>, то он удаляется</li>\r\n  <li><code>FcgidMaxRequestsPerProcess</code> — приложение FastCGI будет уничтожено, после того как обработает указанное здесь количество запросов</li>\r\n  <li><code>FcgidPassHeader</code> — запрос, который передается в переменные окружения</li>\r\n  <li><code>FcgidProcessLifeTime</code> — максимальное время жизни процесса FastCGI</li>\r\n</ul>\r\n</div>\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"https://hackware.ru/?p=21\">Установка веб-сервера (Apache 2.4, MySQL 8.0, PHP 7, phpMyAdmin) на Windows 10</a></li>\r\n  <li><a href=\"https://hackware.ru/?p=1612\">Подключение виртуальных хостов Apache в Windows</a></li>\r\n  <li><a href=\"https://www.youtube.com/watch?v=WF726oHZ0xs\">How install PHP as FastCGI under Apache on Windows 10</a></li>\r\n  <li><a href=\"https://vanyukov.su/tech/apache-mod_fcgi/\">Запуск PHP как модуля FastCGI</a></li>\r\n  <li><a href=\"https://httpd.apache.org/mod_fcgid/en/mod/mod_fcgid.html\">Apache Module mod_fcgid</a></li>\r\n</ul>','2018-06-10 11:28:13',1),(136,17,'Битрикс. Файл .settings.php','','','.settings.php, CMS, PHP, Web-разработка, Битрикс','Bitrix Framework имеет ряд специфичных настроек ядра, которые не имеют визуального интерфейса редактирования. Этот подход вызван тем, что изменение настроек или ошибка в них легко могут привести к неработоспособности системы (настройки подключения к базе данных, настройки кеширования и т.д.).','<p>\r\nBitrix Framework имеет ряд специфичных настроек ядра, которые не имеют визуального интерфейса редактирования. Этот подход вызван тем, что изменение настроек или ошибка в них легко могут привести к неработоспособности системы (настройки подключения к базе данных, настройки кеширования и т.д.).\r\n</p>\r\n<p>\r\nНастройки в новом ядре выполняются в файле <code>/bitrix/.settings.php</code>. В старом ядре аналогичные настройки выполнялись в файле <code>/bitrix/php_interface/dbconn.php</code>. Файл <code>.settings.php</code> структурно сильно отличается от прежнего <code>dbconn.php</code>.\r\n</p>\r\n<div class=\"note\">\r\n<p>\r\nВ Битрикс параллельно используются 2 ядра — старое и новое, соответственно, оба файла настроек используются одновременно. Поэтому необходимо производить настройки обоих файлов.\r\n</p>\r\n<p>\r\nДаже если используется код только старого ядра, то файл <code>.settings.php</code> должен быть создан. Возможна ситуация, когда при установке обновлений какой-то из встроенных механизмов системы будет переписан на новое ядро. Если этот файл корректно не настроен, то это может привести к неработоспособности системы.\r\n</p>\r\n<p>\r\nИногда бывают ситуации, что файл <code>.settings.php</code> отсутствует. Его можно создать в автоматическом режиме, если выполнить в командной строке:\r\n</p>\r\n[php]\r\nBitrix\\Main\\Config\\Configuration::wnc();\r\n[/php]\r\n</div>\r\n<p>\r\nЕсли на экране появилась ошибка\r\n</p>\r\n[code]\r\nПри выполнении скрипта возникла ошибка. Включить расширенный вывод ошибок можно в файле настроек .settings.php\r\n[/code]\r\n<p>\r\nто открываем файл <code>.settings.php</code>, находим\r\n<p>\r\n[php]\r\n\'exception_handling\' => \r\n  array (\r\n    \'value\' => \r\n    array (\r\n      \'debug\' => false, // изменяем значение на true\r\n      \'handled_errors_types\' => 20853,\r\n      \'exception_errors_types\' => 20853,\r\n      \'ignore_silence\' => false,\r\n      \'assertion_throws_exception\' => true,\r\n      \'assertion_error_type\' => 256,\r\n      \'log\' => \r\n      array (\r\n        \'settings\' => \r\n        array (\r\n          \'file\' => NULL,\r\n          \'log_size\' => NULL,\r\n        ),\r\n      ),\r\n    ),\r\n    \'readonly\' => false,\r\n  ),\r\n[/php]\r\n<p>\r\nи заменяем <code>\'debug\'=>false</code> на <code>\'debug\'=>true</code>. В результате чего на экране будет подробное описание ошибки\r\n</p>\r\n[code]\r\n[Error] \r\nClass \'Assets\' not found (0)\r\nD:\\work\\localhost11\\www\\local\\templates\\voguis_index\\header.php:17\r\n#0: include_once\r\n	D:\\work\\localhost11\\www\\bitrix\\modules\\main\\include\\prolog_after.php:96\r\n#1: require(string)\r\n	D:\\work\\localhost11\\www\\bitrix\\modules\\main\\include\\prolog.php:11\r\n#2: require_once(string)\r\n	D:\\work\\localhost11\\www\\bitrix\\header.php:1\r\n#3: require(string)\r\n	D:\\work\\localhost11\\www\\index.php:2\r\n[/code]','2018-06-13 13:56:09',1),(137,11,'Настройка виртуальных хостов Apache в Windows','','','Apache, Web-разработка, Windows, Установка','Виртуальные хосты могут быть привязаны к имени хоста (например, host.local) или к IP-адресу (например, 127.0.0.3). Рассмотрим оба способа, и начнём с создания директорий виртуальных хостов. После установки Apache у меня уже есть директория DocumentRoot…','<p>\r\nВиртуальные хосты могут быть привязаны к имени хоста (например, <code>host.local</code>) или к IP-адресу (например, <code>127.0.0.3</code>). Рассмотрим оба способа, и начнём с создания директорий виртуальных хостов. После установки Apache у меня уже есть директория <code>DocumentRoot</code>:\r\n</p>\r\n[apache]\r\nDocumentRoot d:/work/localhost/www\r\n<Directory \"d:/work/localhost*/www\">\r\n    Options Indexes FollowSymLinks\r\n    AllowOverride All\r\n    Require all granted\r\n</Directory>\r\n[/apache]\r\n<p>\r\nВнутри директории <code>d:/work</code> создаем еще три: <code>localhost1</code>, <code>localhost2</code>, <code>localhost3</code>. Внутри каждой директории <code>localhost*</code> создаем еще одну директорию <code>www</code>. В каждую папку <code>www</code> добавляем файл <code>index.html</code> с любым содержанием, который позволил бы идентифицировать хост. Например\r\n</p>\r\n<ul>\r\n  <li>в файл <code>D:\\work\\localhost1\\www\\index.html</code> добавляем текст «localhost1»</li>\r\n  <li>в файл <code>D:\\work\\localhost2\\www\\index.html</code> добавляем текст «localhost2»</li>\r\n  <li>в файл <code>D:\\work\\localhost3\\www\\index.html</code> добавляем текст «localhost3»</li>\r\n</ul>\r\n[code]\r\n[D:\\]\r\n    [work]\r\n        [localhost]\r\n            [www]\r\n                [grn]index.html[/grn]\r\n            [grn]access.log[/grn]\r\n            [grn]error.log[/grn]\r\n        [localhost1]\r\n            [www]\r\n                [grn]index.html[/grn]\r\n            [grn]access.log[/grn]\r\n            [grn]error.log[/grn]\r\n        [localhost2]\r\n            [www]\r\n                [grn]index.html[/grn]\r\n            [grn]access.log[/grn]\r\n            [grn]error.log[/grn]\r\n        [localhost3]\r\n            [www]\r\n                [grn]index.html[/grn]\r\n            [grn]access.log[/grn]\r\n            [grn]error.log[/grn]\r\n[/code]\r\n<p>\r\nВ файле <code>C:\\wamp\\apache\\conf\\httpd.conf</code> надо найти и раскоментировать строку:\r\n</p>\r\n[apache]\r\nInclude conf/extra/httpd-vhosts.conf\r\n[/apache]\r\n<p>\r\nВ файле <code>C:\\wamp\\apache\\conf\\extra\\httpd-vhosts.conf</code> надо закомментировать (или удалить) те строки, которые приведены по умолчанию.\r\n<p>\r\n\r\n<h2>Виртуальные хосты на основе IP-адреса</h2>\r\n<p>\r\nДля виртуальных хостов, которые привязаны к IP, требуются несколько IP-адресов. Таковые у нас имеются: это <code>127.0.0.1</code>,  <code>127.0.0.2</code>, <code>127.0.0.3</code>, <code>127.0.0.4</code>, <code>127.0.0.5</code> и так далее. И к каждому из них можно привязать виртуальный хост.\r\n</p>\r\n<p>\r\nДля этого добавляем в файл <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code> строки\r\n</p>\r\n[code]\r\n127.0.0.1 localhost host.ru www.host.ru\r\n127.0.0.2 localhost1 host1.ru www.host1.ru\r\n127.0.0.3 localhost2 host2.ru www.host2.ru\r\n127.0.0.4 localhost3 host3.ru www.host3.ru\r\n[/code]\r\n<p>\r\nА в файл <code>C:\\wamp\\apache\\conf\\extra\\httpd-vhosts.conf</code> добавляем следующее\r\n</p>\r\n[apache]\r\n#\r\n#   localhost\r\n#\r\n<VirtualHost 127.0.0.1:80>\r\n	ServerAdmin admin@localhost\r\n	ServerName localhost\r\n	DocumentRoot d:/work/localhost/www\r\n	ServerAlias host.ru www.host.ru\r\n	ErrorLog d:/work/localhost/error.log\r\n	CustomLog d:/work/localhost/access.log common\r\n</VirtualHost>\r\n#\r\n#   localhost1\r\n#\r\n<VirtualHost 127.0.0.2:80>\r\n	ServerAdmin admin@localhost1\r\n	ServerName localhost1\r\n	DocumentRoot d:/work/localhost1/www\r\n	ServerAlias host1.ru www.host1.ru\r\n	ErrorLog d:/work/localhost1/error.log\r\n	CustomLog d:/work/localhost1/access.log common\r\n</VirtualHost>\r\n#\r\n#   localhost2\r\n#\r\n<VirtualHost 127.0.0.3:80>\r\n	ServerAdmin admin@localhost2\r\n	ServerName localhost2\r\n	DocumentRoot c:/work/localhost2/www\r\n	ServerAlias host2.ru www.host2.ru\r\n	ErrorLog d:/work/localhost2/error.log\r\n	CustomLog d:/work/localhost2/access.log common\r\n</VirtualHost>\r\n#\r\n#   localhost3\r\n#\r\n<VirtualHost 127.0.0.4:80>\r\n	ServerAdmin admin@localhost3\r\n	ServerName localhost3\r\n	DocumentRoot d:/work/localhost3/www\r\n	ServerAlias host3.ru www.host3.ru\r\n	ErrorLog d:/work/localhost3/error.log\r\n	CustomLog d:/work/localhost3/access.log common\r\n</VirtualHost>\r\n[/apache]\r\n<p>\r\nТеперь можно обращаться к виртуальным хостам так:\r\n</p>\r\n<ul>\r\n  <li><code>http://127.0.0.1</code>, <code>http://localhost/</code>, <code>http://host.ru/</code>, <code>http://www.host.ru/</code></li>\r\n  <li><code>http://127.0.0.2</code>, <code>http://localhost1/</code>, <code>http://host1.ru/</code>, <code>http://www.host1.ru/</code></li>\r\n  <li><code>http://127.0.0.3</code>, <code>http://localhost2/</code>, <code>http://host2.ru/</code>, <code>http://www.host2.ru/</code></li>\r\n  <li><code>http://127.0.0.4</code>, <code>http://localhost3/</code>, <code>http://host3.ru/</code>, <code>http://www.host3.ru/</code></li>\r\n</ul>\r\n\r\n<h2>Виртуальные хосты на основе имени хоста</h2>\r\n<p>\r\nДля этого добавляем в файл <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code> строки\r\n</p>\r\n[code]\r\n127.0.0.1 localhost host.ru www.host.ru\r\n127.0.0.1 localhost1 host1.ru www.host1.ru\r\n127.0.0.1 localhost2 host2.ru www.host2.ru\r\n127.0.0.1 localhost3 host3.ru www.host3.ru\r\n[/code]\r\n<p>\r\nА в файл <code>C:\\wamp\\apache\\conf\\extra\\httpd-vhosts.conf</code> добавляем следующее\r\n</p>\r\n[apache]\r\n#\r\n#   localhost\r\n#\r\n<VirtualHost *:80>\r\n	ServerAdmin admin@localhost\r\n	ServerName localhost\r\n	DocumentRoot d:/work/localhost/www\r\n	ServerAlias host.ru www.host.ru\r\n	ErrorLog d:/work/localhost/error.log\r\n	CustomLog d:/work/localhost/access.log common\r\n</VirtualHost>\r\n#\r\n#   localhost1\r\n#\r\n<VirtualHost *:80>\r\n	ServerAdmin admin@localhost1\r\n	ServerName localhost1\r\n	DocumentRoot d:/work/localhost1/www\r\n	ServerAlias host1.ru www.host1.ru\r\n	ErrorLog d:/work/localhost1/error.log\r\n	CustomLog d:/work/localhost1/access.log common\r\n</VirtualHost>\r\n#\r\n#   localhost2\r\n#\r\n<VirtualHost *:80>\r\n	ServerAdmin admin@localhost2\r\n	ServerName localhost2\r\n	DocumentRoot c:/work/localhost2/www\r\n	ServerAlias host2.ru www.host2.ru\r\n	ErrorLog d:/work/localhost2/error.log\r\n	CustomLog d:/work/localhost2/access.log common\r\n</VirtualHost>\r\n#\r\n#   localhost3\r\n#\r\n<VirtualHost *:80>\r\n	ServerAdmin admin@localhost3\r\n	ServerName localhost3\r\n	DocumentRoot d:/work/localhost3/www\r\n	ServerAlias host3.ru www.host3.ru\r\n	ErrorLog d:/work/localhost3/error.log\r\n	CustomLog d:/work/localhost3/access.log common\r\n</VirtualHost>\r\n[/apache]\r\n<p>\r\nТеперь можно обращаться к виртуальным хостам так:\r\n</p>\r\n<ul>\r\n  <li><code>http://localhost/</code>, <code>http://host.ru/</code>, <code>http://www.host.ru/</code></li>\r\n  <li><code>http://localhost1/</code>, <code>http://host1.ru/</code>, <code>http://www.host1.ru/</code></li>\r\n  <li><code>http://localhost2/</code>, <code>http://host2.ru/</code>, <code>http://www.host2.ru/</code></li>\r\n  <li><code>http://localhost3/</code>, <code>http://host3.ru/</code>, <code>http://www.host3.ru/</code></li>\r\n</ul>\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"https://hackware.ru/?p=21\">Установка веб-сервера (Apache 2.4, MySQL 8.0, PHP 7, phpMyAdmin) на Windows 10</a></li>\r\n  <li><a href=\"https://hackware.ru/?p=1612\">Подключение виртуальных хостов Apache в Windows</a></li>\r\n</ul>','2018-06-14 12:02:13',1),(138,17,'Битрикс. Включаемая область','','','CMS, PHP, Web-разработка, init.php, Битрикс, ВключаемаяОбласть, Компонент, ШаблонСайта','Компонент располагается в шаблоне дизайна сайта и определяет место расположения включаемых областей страниц и разделов. Также компонент может выводить содержимое произвольного файла (например, информацию об авторских правах, название компании и т.д.).','<p>\r\nКомпонент располагается в шаблоне дизайна сайта и определяет место расположения включаемых областей страниц и разделов. Также компонент может выводить содержимое произвольного файла (например, информацию об авторских правах, название компании и т.д.).\r\n</p>\r\n<p>\r\nВ визуальном редакторе компонент расположен по пути: <em>Служебные • Включаемые области • Вставка включаемой области</em>.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/138/1.jpg\" class=\"zoom\"><img src=\"/files/blog/138/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВ файловой системе компонент расположен: <code>bitrix/components/bitrix/include</code>. Пример вызова:\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:main.include\",\r\n    \"\",\r\n    Array(\r\n        \"AREA_FILE_SHOW\" => \"sect\", \r\n        \"AREA_FILE_SUFFIX\" => \"inc\", \r\n        \"AREA_FILE_RECURSIVE\" => \"Y\", \r\n        \"EDIT_TEMPLATE\" => \"standard.php\" \r\n    )\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nОписание параметров:\r\n</p>\r\n<p>\r\n<code>AREA_FILE_SHOW</code> — Показывать включаемую область. Возможные значения:\r\n</p>\r\n<ul>\r\n  <li><code>sect</code>: показывать для раздела, область будет являться включаемой для всего раздела;</li>\r\n  <li><code>page</code>: показывать для страницы, область будет являться включаемой только для текущей страницы;</li>\r\n  <li><code>file</code>: показывать информацию из файла. Если компонент расположить в шаблоне дизайна сайта, то информация из файла будет выводиться на всем сайте. Установка параметра доступна только пользователю с правами <code>edit_php</code>.</li>\r\n</ul>\r\n<p>\r\n<code>PATH</code> — Путь к файлу области. Поле доступно, если выбрано «Показывать включаемую область из файла». Задается полный путь от корня сайта к файлу с информацией, которую надо вывести в этой части сайта.\r\n</p>\r\n<p>\r\n<code>AREA_FILE_SUFFIX</code> — Суффикс имени файла включаемой области. Поле предназначено для указания суффикса, который будет добавляться к именам файлов включаемых областей. Страницы с таким суффиксом будут восприниматься как включаемые области.\r\n</p>\r\n<p>\r\n<code>AREA_FILE_RECURSIVE [Y|N]</code> — Рекурсивное подключение включаемых областей разделов. Настройка доступна при отмеченной области «Показывать включаемую область» (<code>AREA_FILE_SHOW</code>) в значение для раздела (<code>sect</code>). При отмеченной опции включаемые области разделов будут подключаться рекурсивно, т.е. если в папке более низкого уровня есть своя включаемая область, то она будет показана. Если же текущий раздел не имеет своей включаемой области, то рекурсивно до корня сайта будут проверяться все разделы до самого верхнего и будет выведена первая встретившаяся включаемая область.\r\n</p>\r\n<p>\r\n<code>EDIT_TEMPLATE</code> — Шаблон области по умолчанию. Доступны все шаблоны страниц, созданные в системе. Они располагаются в разделе\r\n</p>\r\n[code]/bitrix/templates/.default/page_templates/[/code]\r\n<p>\r\nВ данном поле можно указать любой другой файл в системе, указав полный путь к файлу-шаблону.\r\n</p>\r\n\r\n<h2>Пример создания включаемой области</h2>\r\n<p>\r\nНужно добавить возможность изменения логотипа для контент-менеджера сайта. Включаем режим правки в правом верхнем углу общедоступной части сайта. Создаем тестовую страницу, чтобы не сломать случайно во время работы рабочую страницу сайта. Для этой страницы выбираем «Изменить страницу» и далее «В визуальном редакторе». Справа выбираем компонент «<em>Служебные • Включаемые области • Вставить область</em>» и перетаскиваем в рабочую область редактора.\r\n</p>\r\n<p>\r\nВ настройках компонента выбираем «Показывать включаемую область из файла» и задаем путь к файлу области <code>/include/logo.php</code>. Нажимаем «Сохранить» и получаем фрагмент кода вставки компонента. Нам только он и нужен, копируем фрагмент в буфер, а дальше жмем «Отменить» и «Выйти без сохранения».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/138/2.jpg\" class=\"zoom\"><img src=\"/files/blog/138/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:main.include\",\r\n    \"\",\r\n    Array(\r\n        \"AREA_FILE_SHOW\" => \"file\",\r\n        \"AREA_FILE_SUFFIX\" => \"inc\",\r\n        \"EDIT_TEMPLATE\" => \"\",\r\n        \"PATH\" => \"/include/logo.php\"\r\n    )\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nОткрываем файл шаблона сайта <code>/local/templates/имя-шаблона/header.php</code> на редактирование и заменяем html-код логотипа\r\n</p>\r\n[phtml]\r\n<div class=\"logo\">\r\n    <a href=\"/\">\r\n        <img src=\"<?= SITE_TEMPLATE_PATH ?>/images/logo.png\" class=\"img-responsive\" alt=\"\">\r\n    </a>\r\n</div>\r\n[/phtml]\r\n<p>\r\nна код вызова компонента\r\n</p>\r\n[phtml]\r\n<div class=\"logo\">\r\n    <?php\r\n    $APPLICATION->IncludeComponent(\r\n        // ..........\r\n    );\r\n    ?>\r\n</div>\r\n[/phtml]\r\n<p>\r\nТеперь в режиме правки при наведении указателя мыши на логотип будет появляться подсказка «Изменить область». Кликаем и переходим к редактированию включаемой области. В визуальном редакторе загружаем файл логотипа в медиа библиотеку, выбираем его же для вставки в визуальный редактор, указываем дополнительные параметры: CSS-класс <code>img-responsive</code> и ссылку на главную страницу.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/138/3.jpg\" class=\"zoom\"><img src=\"/files/blog/138/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВ результате получим html-код:\r\n</p>\r\n[html]\r\n<a href=\"/\">\r\n    <img src=\"/upload/medialibrary/92c/92c14abfa22a397a07e276a3d43e5759.png\" class=\"img-responsive\" />\r\n</a>\r\n[/html]\r\n<p>\r\n<a href=\"/files/blog/138/4.jpg\" class=\"zoom\"><img src=\"/files/blog/138/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nСобственно, это и будет содержимое файла <code>/include/logo.php</code>.\r\n</p>\r\n<div class=\"post-scriptum\">\r\n<p>\r\nНеправильно захламлять корневую директорию сервера, поэтому перенес папку <code>/include/</code> в папку шаблона по умолчанию <code>.default</code> и переименовал в <code>include_area</code> (следуя рекомендациям Битрикс). А вызов компонента заменил на:\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION->IncludeComponent(  // логотип, включаемая область\r\n    \"bitrix:main.include\",\r\n    \"\",\r\n    Array(\r\n        \"AREA_FILE_SHOW\" => \"file\",\r\n        \"AREA_FILE_SUFFIX\" => \"inc\",\r\n        \"EDIT_TEMPLATE\" => \"\",\r\n        \"PATH\" => DEFAULT_TEMPLATE_PATH . \'/include_areas/logo.php\'\r\n    )\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nСоздал файл <code>init.php</code> в папке <code>local/php_interface</code> и определили в нем константу:\r\n</p>\r\n[php]\r\n<?php\r\ndefine(\"DEFAULT_TEMPLATE_PATH\", \'/local/templates/.default\');\r\n[/php]\r\n</div>','2018-06-15 13:18:53',1),(139,9,'Команда chmod','','','Bash, CLI, Linux, SGID, SUID, StickyBit, chmod, Владелец, Директория, Команда, ПраваДоступа, Файл','В Linux существует всего три вида прав — право на чтение (read), запись (write) и выполнение (execute), а также три категории пользователей, к которым они могут применяться — владелец файла (user), группа владельца (group) и все остальные (others). Для изменения прав доступа используется команда chmod.','<p>\r\nВ Linux существует всего три вида прав — право на чтение (<code>read</code>), запись (<code>write</code>) и выполнение (<code>execute</code>), а также три категории пользователей, к которым они могут применяться — владелец файла (<code>user</code>), группа владельца (<code>group</code>) и все остальные (<code>others</code>).\r\n</p>\r\n<p>\r\nДля изменения прав доступа используется команда <code>chmod</code>:\r\n</p>\r\n[code]\r\nchmod [grn][опции][/grn] группа[red]действие[/red]режим [grn]файл(ы)[/grn]\r\n[/code]\r\n<p>\r\n<strong>Опции</strong>:\r\n</p>\r\n<ul>\r\n  <li><code>-R</code> — рекурсивное изменение прав доступа для каталогов и их содержимого</li>\r\n  <li><code>-f</code> — не выдавать сообщения об ошибке для файлов, чьи права не могут быть изменены</li>\r\n  <li><code>-v</code> — подробно описывать действие или отсутствие действия для каждого файла</li>\r\n</ul>\r\n<p>\r\n<strong>Группа</strong> указывает, для каких пользователей нужно применять права:\r\n</p>\r\n<ul>\r\n  <li><code>u</code> — владелец файла</li>\r\n  <li><code>g</code> — группа файла</li>\r\n  <li><code>o</code> — другие пользователи</li>\r\n  <li><code>a</code> — все пользователи</li>\r\n</ul>\r\n<p>\r\n<strong>Действие</strong> может быть одно из трех:\r\n</p>\r\n<ul>\r\n  <li><code>+</code> — добавить определенные права</li>\r\n  <li><code>-</code> — удалить определенные права</li>\r\n  <li><code>=</code> — установить определенные права</li>\r\n</ul>\r\n<p>\r\n<strong>Режим</strong> — собственно права доступа\r\n</p>\r\n<ul>\r\n  <li><code>r</code> — чтение файла или содержимого каталога</li>\r\n  <li><code>w</code> — запись в файл или в каталог</li>\r\n  <li><code>x</code> — выполнение файла или чтение содержимого каталога</li>\r\n  <li><code>s</code> — установленные атрибуты <code>SUID</code> или <code>SGID</code> позволяют запускать файл на выполнение с правами владельца файла или группы соответственно</li>\r\n  <li><code>t</code> — устанавливая <code>sticky bit</code> для каталога, мы защищаем файлы в нем; удалить файл в такой директории может только владелец этого файла</li>\r\n</ul>\r\n<p>\r\nКоманда никогда не изменяет права на символьные ссылки. Однако, для каждой символьной ссылки, заданной в командной строке, <code>chmod</code> изменяет права доступа связанного с ней файла.\r\n</p>\r\n\r\n<h2>Примеры использования</h2>\r\n[cli]\r\n$ chmod g+rx data.txt # установить для группы право на чтение и выполнение\r\n[/cli]\r\n[cli]\r\n$ chmod go-rwx data.txt # забрать все права у группы и остальных пользователей\r\n[/cli]\r\n[cli]\r\n$ chmod a+rwx data.txt # установить полный доступ всем пользователям\r\n[/cli]\r\n[cli]\r\n$ chmod u=rwx,g+w,go-x script.sh\r\n[/cli]\r\n[cli]\r\n$ chmod u+s backup.sh # установить для файла SUID\r\n[/cli]\r\n[cli]\r\n$ chmod g+s backup.sh # установить для файла SGID\r\n[/cli]\r\n[cli]\r\n$ chmod -R u-s,g-s /home/dev # рекурсивно удалить SUID и SGID\r\n[/cli]\r\n[cli]\r\n$ chmod +t /home/dev # установить sticky-бит на каталог\r\n[/cli]\r\n\r\n<h2>Использование команды в числовом виде</h2>\r\n<p>\r\nНо права можно записывать не только в символьном виде, но и числовом:\r\n</p>\r\n<ul>\r\n  <li><code>0</code> — никаких прав</li>\r\n  <li><code>1</code> — только выполнение</li>\r\n  <li><code>2</code> — только запись</li>\r\n  <li><code>3</code> — выполнение и запись</li>\r\n  <li><code>4</code> — только чтение</li>\r\n  <li><code>5</code> — чтение и выполнение</li>\r\n  <li><code>6</code> — чтение и запись</li>\r\n  <li><code>7</code> — чтение, запись и выполнение</li>\r\n</ul>\r\n<p>\r\nДля установки прав сначала указывается цифра прав для владельца, затем для группы, а потом для остальных:\r\n</p>\r\n<ul>\r\n  <li><code>744</code> — разрешить все для владельца, а остальным только чтение</li>\r\n  <li><code>755</code> — все для владельца, остальным только чтение и выполнение</li>\r\n  <li><code>764</code> — все для владельца, чтение и запись для группы, и только чтение для остальных</li>\r\n  <li><code>777</code> — всем разрешено все</li>\r\n</ul>\r\n[cli]\r\n$ chmod 755 backup.sh\r\n[/cli]','2018-06-15 11:02:18',1),(141,13,'Дополнительные атрибуты файлов: sticky bit, suid, sgid','','','Linux, SGID, SUID, StickyBit, chmod, Директория, ПраваДоступа, Файл','В Linux существует три основных вида прав — право на чтение (read), запись (write) и выполнение (execute), а также три категории пользователей, к которым они могут применяться — владелец файла (user), группа владельца (group) и все остальные (others). Но, кроме прав чтения, выполнения и записи, есть еще три дополнительных атрибута.','<p>\r\nВ Linux существует три основных вида прав — право на чтение (<code>read</code>), запись (<code>write</code>) и выполнение (<code>execute</code>), а также три категории пользователей, к которым они могут применяться — владелец файла (<code>user</code>), группа владельца (<code>group</code>) и все остальные (<code>others</code>). Но, кроме прав чтения, выполнения и записи, есть еще три дополнительных атрибута.\r\n</p>\r\n\r\n<h2>Sticky bit</h2>\r\n<p>\r\nИспользуется в основном для каталогов, чтобы защитить в них файлы. В такой каталог может писать любой пользователь. Но, из такой директории пользователь может удалить только те файлы, владельцем которых он является. Примером может служить директория <code>/tmp</code>, в которой запись открыта для всех пользователей, но нежелательно удаление чужих файлов.\r\n</p>\r\n\r\n<h2>SUID (Set User ID)</h2>\r\n<p>\r\nАтрибут исполняемого файла, позволяющий запустить его с правами владельца. В Linux приложение запускается с правами пользователя, запустившего указанное приложение. Это обеспечивает дополнительную безопасность т.к. процесс с правами пользователя не сможет получить доступ к важным системным файлам, которые принадлежат пользователю <code>root</code>.\r\n<p>\r\nЕсли на исполняемый файл установлен бит <code>suid</code>, то при выполнении его «эффективный userID» автоматически меняется на идентификатор того пользователя, который является владельцем этого файла. То есть, независимо от того, кто запускает эту программу, она при выполнении имеет права владельца этого файла.\r\n</p>\r\n<div class=\"note\">\r\nИсполняемый файл с установленным атрибутом <code>suid</code> является «потенциально опасным». Без установленного атрибута, файл не позволит обычному пользователю сделать то, что выходит за пределы прав пользователя (пример, программа <code>passwd</code> позволяет пользователю изменить только собственный пароль). Но, даже незначительная ошибка в такой программе может привести к тому, что злоумышленник сможет заставить её выполнить ещё какие-нибудь действия, не предусмотренные автором программы.\r\n</div>\r\n\r\n<h2> SGID (Set Group ID)</h2>\r\n<p>\r\nАналогичен <code>suid</code>, но относиться к группе. Если установить <code>sgid</code> для каталога, то все файлы созданные в нем, при запуске будут принимать идентификатор группы каталога, а не группы владельца, который создал файл в этом каталоге. Аналогично и для <code>suid</code>. Другими словами, если пользователь поместил исполняемый файл в такой каталог, запустив его, процесс запустится от имени владельца (группы) каталога, в котором лежит этот файл.\r\n</p>\r\n\r\n<h2>Обозначение атрибутов sticky, suid, sgid</h2>\r\n<p>\r\nСпециальные права используются довольно редко, поэтому при выводе программы <code>ls -l</code> символ, обозначающий указанные атрибуты, закрывает символ стандартных прав доступа. Пример:\r\n</p>\r\n[code]\r\nrw[red]s[/red]rw[red]s[/red]rw[red]t[/red]\r\n[/code]\r\n<p>\r\nгде первая <code>s</code> — это <code>suid</code>, вторая <code>s</code> — это <code>sgid</code>, а последняя <code>t</code> — это <code>sticky bit</code>.\r\n</p>\r\n<p>\r\nВ приведенном примере не понятно, <code>rwt</code> — это <code>rw-</code> или <code>rwx</code>? Определить это просто. Если <code>t</code> маленькое, значит <code>x</code> установлен. Если <code>T</code> большое, значит <code>x</code> не установлен. То же самое правило распространяется и на <code>s</code>.\r\n</p>\r\n<p>\r\nВ числовом эквиваленте данные атрибуты определяются первым символом при четырехзначном обозначении (который часто опускается при назначении прав), например в правах <code>1777</code> — символ <code>1</code> обозначает <code>sticky bit</code>. Остальные атрибуты имеют следующие числовое соответствие:\r\n</p>\r\n<ul>\r\n  <li><code>1</code> — установлен <code>sticky bit</code></li>\r\n  <li><code>2</code> — установлен <code>sgid</code></li>\r\n  <li><code>4</code> — установлен <code>suid</code></li>\r\n</ul>\r\n[cli]\r\n$ chmod 4755 backup.sh # установить suid\r\n[/cli]\r\n[cli]\r\n$ chmod 2755 backup.sh # установить sgid\r\n[/cli]\r\n[cli]\r\n$ chmod 1775 /home/dev # установить sticky bit\r\n[/cli]','2018-06-16 11:11:33',1),(143,17,'Битрикс. Создание меню','','','$arResult, .type.menu.php, CMS, PHP, Web-разработка, Битрикс, Компонент, Меню, Навигация, Структура, ШаблонКомпонента','По задумке дизайнера, на сайте должно быть два меню: главное (наверху) и вспомогательное (в подвале). В панели управления переходим «Настройка • Настройка продукта • Настройки модулей • Управление структурой», прокручиваем вниз до «Настройки для сайтов», удаляем те меню, которые там остались после установки…','<p>\r\nПо задумке дизайнера, на сайте должно быть два меню: главное (наверху) и вспомогательное (в подвале). В панели управления переходим «Настройка • Настройка продукта • Настройки модулей • Управление структурой», прокручиваем вниз до «Настройки для сайтов», удаляем те меню, которые там остались после установки и создаем два новых меню: «Главное меню» и «Меню в подвале».\r\n</p>\r\n<ul>\r\n  <li><code>main</code>, Главное меню</li>\r\n  <li><code>bottom</code>, Меню в подвале</li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/143/1.jpg\" class=\"zoom\"><img src=\"/files/blog/143/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЖмем «Сохранить». Далее, переходим в публичную часть сайта, переходим на главную страницу и создаем несколько разделов:\r\n</p>\r\n<ul>\r\n  <li>«О компании», имя папки <code>about-company</code></li>\r\n  <li>«Услуги», имя папки <code>services</code></li>\r\n  <li>«Блог», имя папки <code>blog</code></li>\r\n  <li>«Контакты», имя папки <code>contacts</code></li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/143/2.jpg\" class=\"zoom\"><img src=\"/files/blog/143/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nУказываем, что каждый новый раздел будет пунктом главного меню:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/143/3.jpg\" class=\"zoom\"><img src=\"/files/blog/143/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nДобавляем какой-нибудь текст:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/143/4.jpg\" class=\"zoom\"><img src=\"/files/blog/143/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nРазделы готовы, теперь нам надо показать наше меню. Для этого нам нужно разместить в шаблоне сайта код вызова компонента. Проще всего это сделать с помощью визуального редактора. Переходим на тестовую страницу, выбираем в верхней панели «<em>Изменить страницу • В визуальном редакторе</em>». Справа в визуальном редакторе выбираем компонент «<em>Служебные • Навигация • Меню</em>» и перетаскиваем в левую часть редактора. В настройках компонента выбираем «<em>Тип меню для первого уровня: Главное меню</em>»:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/143/5.jpg\" class=\"zoom\"><img src=\"/files/blog/143/5.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nСохраняем настройки, копируем полученный код в буфер обмена и закрываем редактор страницы без сохранения:\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n	\"bitrix:menu\",\r\n	\"\",\r\n	Array(\r\n		\"ALLOW_MULTI_SELECT\" => \"N\",\r\n		\"CHILD_MENU_TYPE\" => \"left\",\r\n		\"DELAY\" => \"N\",\r\n		\"MAX_LEVEL\" => \"1\",\r\n		\"MENU_CACHE_GET_VARS\" => array(\"\"),\r\n		\"MENU_CACHE_TIME\" => \"3600\",\r\n		\"MENU_CACHE_TYPE\" => \"N\",\r\n		\"MENU_CACHE_USE_GROUPS\" => \"Y\",\r\n		\"ROOT_MENU_TYPE\" => \"main\",\r\n		\"USE_EXT\" => \"N\"\r\n	)\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nЭтот код вставляем в шаблон сайта, в то место, где нужно вывести главное меню.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/143/7.jpg\" class=\"zoom\"><img src=\"/files/blog/143/7.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/143/6.jpg\" class=\"zoom\"><img src=\"/files/blog/143/6.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТеперь меню на сайте выводится компонентом, осталось только немного подправить шаблон компонента:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/143/8.jpg\" class=\"zoom\"><img src=\"/files/blog/143/8.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nШаблон компонента размещен по пути <code>bitrix/components/bitrix/menu/templates/.default/template.php</code>:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл bitrix/components/bitrix/menu/templates/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n?>\r\n\r\n<?php if (!empty($arResult)): ?>\r\n    <ul class=\"left-menu\">\r\n\r\n    <?php\r\n    foreach ($arResult as $arItem):\r\n        if ($arParams[\"MAX_LEVEL\"] == 1 && $arItem[\"DEPTH_LEVEL\"] > 1) continue;\r\n    ?>\r\n        <?php if ($arItem[\"SELECTED\"]): ?>\r\n            <li><a href=\"<?= $arItem[\"LINK\"] ?>\" class=\"selected\"><?= $arItem[\"TEXT\"] ?></a></li>\r\n        <?php else: ?>\r\n            <li><a href=\"<?= $arItem[\"LINK\"] ?>\"><?= $arItem[\"TEXT\"] ?></a></li>\r\n        <?php endif; ?>\r\n        \r\n    <?php endforeach; ?>\r\n\r\n    </ul>\r\n<?php endif; ?>\r\n[/phtml]\r\n<p>\r\nНам надо скопировать этот шаблон и внести изменения в копию, чтобы ничего не изменять в папке <code>bitrix</code>. Для этого включаем режим правки, наводим указатель мыши на меню и выбираем «<em>Копировать шаблон компонента</em>»:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/143/9.jpg\" class=\"zoom\"><img src=\"/files/blog/143/9.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nНазвание нового шаблона компонента будет <code>main_menu</code>, а копировать его будем в папку с текущим шаблоном <code>local/templates/voguis</code>:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/143/10.jpg\" class=\"zoom\"><img src=\"/files/blog/143/10.jpg\" alt=\"\" /></a>\r\n</p>\r\n<div class=\"note\">\r\nЕсли у сайта несколько шаблонов, и в каждом из них предусмотрен вывод главного меню, есть смысл скопировать шаблон компонента в папку общего шаблона <code>local/templates/.default</code>. И вызов компонента меню надо добавить в каждый файл <code>local/templates/имя_шаблона/header.php</code>.\r\n</div>\r\n<p>\r\nВ результате этих действий шаблон компонента будет скопирован в\r\n</p>\r\n[code]\r\nlocal/templates/voguis/components/bitrix/menu/main_menu/template.php\r\n[/code]\r\n<p>\r\nВ этот файл мы и будем вносить изменения. Кроме копирования, Битрикс заменит php-код вызова компонента в файле <code>local/templates/voguis/header.php</code>:\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:menu\",\r\n    \"main_menu\",\r\n    Array(\r\n        \"ALLOW_MULTI_SELECT\" => \"N\",    // Разрешить несколько активных пунктов одновременно\r\n        \"CHILD_MENU_TYPE\" => \"left\",    // Тип меню для остальных уровней\r\n        \"DELAY\" => \"N\",                 // Откладывать выполнение шаблона меню\r\n        \"MAX_LEVEL\" => \"1\",             // Уровень вложенности меню\r\n        \"MENU_CACHE_GET_VARS\" => array( // Значимые переменные запроса\r\n            0 => \"\",\r\n        ),\r\n        \"MENU_CACHE_TIME\" => \"3600\",    // Время кеширования (сек.)\r\n        \"MENU_CACHE_TYPE\" => \"N\",       // Тип кеширования\r\n        \"MENU_CACHE_USE_GROUPS\" => \"Y\", // Учитывать права доступа\r\n        \"ROOT_MENU_TYPE\" => \"main\",     // Тип меню для первого уровня\r\n        \"USE_EXT\" => \"N\",               // Подключать файлы с именами вида .тип_меню.menu_ext.php\r\n    ),\r\n    false\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nФайлы стилей нам не нужны, поэтому удаляем их из папки <code>local/templates/voguis/components/bitrix/menu/main_menu</code>. И изменяем <code>template.php</code>:\r\n</p>\r\n[phtml]\r\n<?php if (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true)die(); ?>\r\n\r\n<?php if (!empty($arResult)): ?>\r\n<div class=\"head-nav\">\r\n    <span class=\"menu\"></span>\r\n    <ul class=\"cl-effect-1\">\r\n    <?php foreach ($arResult as $arItem): ?>\r\n        <?php if ($arParams[\"MAX_LEVEL\"] == 1 && $arItem[\"DEPTH_LEVEL\"] > 1) continue; ?>\r\n\r\n        <?php if ($arItem[\"SELECTED\"]): ?>\r\n            <li class=\"active\"><a href=\"<?= $arItem[\"LINK\"]?>\"><?= $arItem[\"TEXT\"] ?></a></li>\r\n        <?php else: ?>\r\n            <li><a href=\"<?= $arItem[\"LINK\"] ?>\"><?= $arItem[\"TEXT\"] ?></a></li>\r\n        <?php endif; ?>\r\n    <?php endforeach; ?>\r\n    </ul>\r\n</div>\r\n<?php endif; ?>\r\n[/phtml]\r\n<p>\r\n<a href=\"/files/blog/143/11.jpg\" class=\"zoom\"><img src=\"/files/blog/143/11.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПункты меню сохраняются не в базе данных, а в файле <code>.main.menu.php</code> в корне сервера.\r\n</p>\r\n[php]\r\n<?php\r\n$aMenuLinks = Array(\r\n	Array(\r\n		\"О компании\", \r\n		\"/about-company/\", \r\n		Array(), \r\n		Array(), \r\n		\"\" \r\n	),\r\n	Array(\r\n		\"Услуги\", \r\n		\"/services/\", \r\n		Array(), \r\n		Array(), \r\n		\"\" \r\n	),\r\n	Array(\r\n		\"Блог\", \r\n		\"/blog/\", \r\n		Array(), \r\n		Array(), \r\n		\"\" \r\n	),\r\n	Array(\r\n		\"Контакты\", \r\n		\"/contacts/\", \r\n		Array(), \r\n		Array(), \r\n		\"\" \r\n	)\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nОсталось только добавить пункт меню «Главная (страница)»:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/143/12.jpg\" class=\"zoom\"><img src=\"/files/blog/143/12.jpg\" alt=\"\" /></a>\r\n</p>\r\n<div class=\"note\">\r\nМеню является иерархически наследуемым. Файлы меню размещаются в папках тех разделов сайта, где требуется показ соответствующих типов меню. Если для данного раздела не создан соответствующий файл меню, система производит поиск файла в каталоге уровнем выше.\r\n</div>','2018-06-17 12:13:36',1),(145,17,'Битрикс. Отдельный шаблон для страницы','','','CMS, Web-разработка, Битрикс, ШаблонСайта','Пусть у нас на сайте есть страница (или раздел), которая сильно отличается от всех остальных. Чтобы разговор был более предметным, это будет страница блога. Мы уже создали шаблон voguis_index, применили его ко всем страницам, а теперь надо придумать, как для страницы блога что-то скрыть или наоборот — показать.','<p>\r\nПусть у нас на сайте есть страница (или раздел), которая сильно отличается от всех остальных. Чтобы разговор был более предметным, это будет страница блога. Мы уже создали шаблон <code>voguis_index</code>, применили его ко всем страницам, а теперь надо придумать, как для страницы блога что-то скрыть или наоборот — показать.\r\n</p>\r\n<p>\r\nСамый простой способ — использовать метод <code>getCurPage(false)</code> объекта <code>$APPTICATION</code>. Для главной страницы он вернет <code>/</code> (слэш), а для блога&nbsp;— <code>/blog/</code>. Проверяя возвращаемое значение, можно выводить разный контент:\r\n</code>\r\n[phtml]\r\n<?php if ($APPLICATION->getCurPage(false) === \'/blog/\'): ?>\r\n    <div class=\"slider\">\r\n        <a href=\"…\"><img src=\"…\" alt=\"\" /></a>\r\n        <a href=\"…\"><img src=\"…\" alt=\"\" /></a>\r\n        <a href=\"…\"><img src=\"…\" alt=\"\" /></a>\r\n    </div>\r\n<?php endif; ?>\r\n[/phtml]\r\n<p>\r\nНо, если отличий много, таких вставок тоже будет немало. А если и верстка блога имеет большие отличия от дефолтного шаблона — будет вообще трудно что-то понять: множество проверок (выводить или нет), какие css-стили применять и т.п. Гораздо проще для блога создать отдельный шаблон. Для этого копируем уже имеющийся шаблон из папки <code>voguis_index</code> в папку <code>voguis_blog</code>, и вносим исправления в копию.\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/voguis_blog/description.php\r\n */\r\nif(!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$arTemplate = [\r\n    \'NAME\' => \'Шаблон для страницы блога\',\r\n    \'DESCRIPTION\' => \'Описание шаблона страницы блога\',\r\n];\r\n[/php]\r\n<p>\r\nА потом для страницы блога подключаем отдельный шаблон по условию:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/145/1.jpg\" class=\"zoom\"><img src=\"/files/blog/145/1.jpg\" alt=\"\" /></a>\r\n</p>','2018-06-20 13:42:18',1),(146,7,'Дерево значений','','','1С:Предприятие, ДеревоЗначений, Иерархия, Коллекция, ТаблицаФормы, ТипыДанных, УправляемаяФорма','Дерево значений представляет из себя некую структуру с иерархией. Каждая строка имеет свойства «Родитель» и «Строки». У каждой строки может быть сколько угодно подчиненных строк. При этом такие операции как поиск, сортировка, подсчет итогов можно проводить с учетом уровня иерархии и подчиненных строк.','<p>\r\nДерево значений представляет из себя некую структуру с иерархией. Каждая строка имеет свойства «Родитель» и «Строки». У каждой строки может быть сколько угодно подчиненных строк. При этом такие операции как поиск, сортировка, подсчет итогов можно проводить с учетом уровня иерархии и подчиненных строк.\r\n</p>\r\n\r\n<h2>Программное создание дерева значений</h2>\r\n<p>\r\nКак уже упоминалось выше, каждая строка имеет свойство <code>Строки</code>, которое содержит коллекцию дочерних строк. И сам объект <code>ДеревоЗначений</code> имеет свойство <code>Строки</code>, которое содержит коллекцию строк верхнего уровня.\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура СоздатьДеревоЗначений(Команда)\r\n    СоздатьДеревоЗначенийНаСервере();\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура СоздатьДеревоЗначенийНаСервере()\r\n\r\n    // создаем объект ДеревоЗначений и добавляем колонки\r\n    ДеревоЗначений = Новый ДеревоЗначений();\r\n    ДеревоЗначений.Колонки.Добавить(\"Код\");\r\n    ДеревоЗначений.Колонки.Добавить(\"Наименование\");\r\n    ДеревоЗначений.Колонки.Добавить(\"Количество\");\r\n\r\n    // добавляем две строки верхнего уровня\r\n    ГруппаТовары = ДеревоЗначений.Строки.Добавить();\r\n    ГруппаТовары.Код = \"001\";\r\n    ГруппаТовары.Наименование = \"Товары\";\r\n    ГруппаТовары.Количество = \"\";\r\n    ГруппаУслуги = ДеревоЗначений.Строки.Добавить();\r\n    ГруппаУслуги.Код = \"002\";\r\n    ГруппаУслуги.Наименование = \"Услуги\";\r\n    ГруппаУслуги.Количество = \"\";\r\n\r\n    // для первой строки верхнего уровня добавляем дочерние строки\r\n    ПервыйТовар = ГруппаТовары.Строки.Добавить();\r\n    ПервыйТовар.Код = \"003\";\r\n    ПервыйТовар.Наименование = \"Первый товар\";\r\n    ПервыйТовар.Количество = 5;\r\n    ПервыйТовар = ГруппаТовары.Строки.Добавить();\r\n    ПервыйТовар.Код = \"004\";\r\n    ПервыйТовар.Наименование = \"Второй товар\";\r\n    ПервыйТовар.Количество = 7;\r\n\r\n    // для второй строки верхнего уровня добавляем дочерние строки\r\n    ПерваяУслуга = ГруппаУслуги.Строки.Добавить();\r\n    ПерваяУслуга.Код = \"005\";\r\n    ПерваяУслуга.Наименование = \"Первая услуга\";\r\n    ПерваяУслуга.Количество = \"\";\r\n    ВтораяУслуга = ГруппаУслуги.Строки.Добавить();\r\n    ВтораяУслуга.Код = \"006\";\r\n    ВтораяУслуга.Наименование = \"Вторая услуга\";\r\n    ВтораяУслуга.Количество = \"\";\r\n\r\n    // цикл по строкам верхнего уровня\r\n    Для Каждого ТекущаяГруппа Из ДеревоЗначений.Строки Цикл\r\n        Сообщить(\"Код: \" + ТекущаяГруппа.Код + \", Группа: \" + ТекущаяГруппа.Наименование);\r\n        // цикл по дочерним строкам текущей строки верхнего уровня\r\n        Для Каждого ТекущийТоварИлиУслуга Из ТекущаяГруппа.Строки Цикл\r\n            Сообщить(\r\n                \"Код: \" + ТекущийТоварИлиУслуга.Код +\r\n                \", Товар или услуга: \" + ТекущийТоварИлиУслуга.Наименование\r\n            );\r\n        КонецЦикла;\r\n    КонецЦикла;\r\n\r\nКонецПроцедуры\r\n[/язык]\r\n[code]\r\n[grn]Код: 001, Группа: Товары[/grn]\r\nКод: 003, Товар или услуга: Первый товар\r\nКод: 004, Товар или услуга: Второй товар\r\n[grn]Код: 002, Группа: Услуги[/grn]\r\nКод: 005, Товар или услуга: Первая услуга\r\nКод: 006, Товар или услуга: Вторая услуга\r\n[/code]\r\n\r\n<div class=\"note\">\r\n[язык]\r\nКоллекцияКолонокДереваЗначений.Добавить(Имя, Тип, Заголовок, Ширина) \r\n[/язык]\r\n<ul>\r\n  <li>Добавляет колонку в конец коллекции колонок дерева значений.</li>\r\n  <li>Возвращаемое значение: <code>КолонкаДереваЗначений</code>.\r\n</ul>\r\n[язык]\r\nКоллекцияСтрокДереваЗначений.Добавить()\r\n[/язык]\r\n<ul>\r\n  <li>Добавляет строку в конец коллекции строк данного уровня дерева значений.</li>\r\n  <li>Возвращаемое значение: <code>СтрокаДереваЗначений</code>.</li>\r\n<ul>\r\n</div>\r\n\r\n<h2>Заполнить табличное поле на форме</h2>\r\n<p>\r\nВизуальное представление дерева значений на форме обеспечивает элемент <code>Таблица</code>.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/146/1.jpg\" class=\"zoom\"><img src=\"/files/blog/146/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/146/2.jpg\" class=\"zoom\"><img src=\"/files/blog/146/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПример программного заполнения дерева значений для управляемых форм:\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ЗаполнитьТабличноеПоле(Команда)\r\n    ЗаполнитьТабличноеПолеНаСервере();\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура ЗаполнитьТабличноеПолеНаСервере()\r\n    ДеревоЗначений = РеквизитФормыВЗначение(\"РеквизитДеревоЗначений\");\r\n\r\n    // Добавляем строку в корень дерева\r\n    ПерваяСтрока = ДеревоЗначений.Строки.Добавить();\r\n    ПерваяСтрока.ПерваяКолонка = \"Первая строка, первая колонка\";\r\n    ПерваяСтрока.ВтораяКолонка = \"Первая строка, вторая колонка\";\r\n    // Дочерняя строка первой строки\r\n    ВтораяСтрока = ПерваяСтрока.Строки.Добавить();\r\n    ВтораяСтрока.ПерваяКолонка = \"Вторая строка, первая колонка\";\r\n    ВтораяСтрока.ВтораяКолонка = \"Вторая строка, вторая колонка\";\r\n    // Дочерняя строка второй строки\r\n    ТретьяСтрока = ВтораяСтрока.Строки.Добавить();\r\n    ТретьяСтрока.ПерваяКолонка = \"Третья строка, первая колонка\";\r\n    ТретьяСтрока.ВтораяКолонка = \"Третья строка, вторая колонка\";\r\n\r\n    ЗначениеВРеквизитФормы(ДеревоЗначений, \"РеквизитДеревоЗначений\");\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\n<a href=\"/files/blog/146/3.jpg\" class=\"zoom\"><img src=\"/files/blog/146/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/146/4.jpg\" class=\"zoom\"><img src=\"/files/blog/146/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<p>\r\nРезультат выполнения запроса очень легко преобразовать в дерево значений, для этого нужно воспользоваться методом <code>Выгрузить()</code> и указать  параметр <code>ТипОбхода</code> отличным от того, что стоит по умолчанию, т.е. <code>ПоГруппировкам</code> или <code>ПоГруппировкамСИерархией</code>.\r\n</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ЗаполнитьТабличноеПоле(Команда)\r\n    ЗаполнитьТабличноеПолеНаСервере();\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура ЗаполнитьТабличноеПолеНаСервере()\r\n    Запрос = Новый Запрос();\r\n    Запрос.Текст = \r\n        \"ВЫБРАТЬ\r\n        |    Номенклатура.Наименование КАК ПерваяКолонка,\r\n        |    Номенклатура.Код КАК ВтораяКолонка\r\n        |ИЗ\r\n        |    Справочник.Номенклатура КАК Номенклатура\r\n        |УПОРЯДОЧИТЬ ПО\r\n        |    ПерваяКолонка ИЕРАРХИЯ\";\r\n    ДеревоЗначений = Запрос.Выполнить().Выгрузить(\r\n        ОбходРезультатаЗапроса.ПоГруппировкамСИерархией\r\n    );\r\n    ЗначениеВРеквизитФормы(ДеревоЗначений, \"РеквизитДеревоЗначений\"); \r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\n<a href=\"/files/blog/146/5.jpg\" class=\"zoom\"><img src=\"/files/blog/146/5.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<h2>Свернуть и развернуть строки дерева значений</h2>\r\n<p>\r\nСвернуть и развернуть дочерние строки элемента дерева значений можно с помощью методов <code>Свернуть()</code> и <code>Развернуть()</code>.\r\n</p>\r\n[язык]\r\nВсеЭлементыФормы.ЭлементТаблицаФормы.Свернуть(ИдектификаторСтроки)\r\n[/язык]\r\n<ul>\r\n  <li>Сворачивает узел в указанной строке дерева.</li>\r\n  <li><code>ИдектификаторСтроки</code> — идентификатор строки таблицы.</li>\r\n</ul>\r\n[язык]\r\nВсеЭлементыФормы.ЭлементТаблицаФормы.Развернуть(ИдектификаторСтроки, СПодчиненными)\r\n[/язык]\r\n<ul>\r\n  <li>Сворачивает узел в указанной строке дерева.</li>\r\n  <li><code>ИдектификаторСтроки</code> — идентификатор строки таблицы.</li>\r\n  <li><code>СПодчиненными</code> — определяет необходимость раскрытия подчиненных узлов.</li>\r\n</ul>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура СвернутьТекущуюСтрокуДерева(Команда)\r\n    Элементы.ЭлементДеревоЗначений.Свернуть(\r\n        Элементы.ЭлементДеревоЗначений.ТекущаяСтрока\r\n    );\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура СвернутьВерхниеСтрокиДерева(Команда)\r\n    СтрокиДерева = РеквизитДеревоЗначений.ПолучитьЭлементы();\r\n    Для Каждого ТекущаяСтрока Из СтрокиДерева Цикл\r\n        Элементы.ЭлементДеревоЗначений.Свернуть(\r\n            ТекущаяСтрока.ПолучитьИдентификатор()\r\n        );\r\n    КонецЦикла;\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура СвернутьВсеСтрокиДерева(Команда)\r\n    СтрокиДерева = РеквизитДеревоЗначений.ПолучитьЭлементы();\r\n    СвернутьДочерниеСтрокиДерева(СтрокиДерева); \r\nКонецПроцедуры\r\n \r\n&НаКлиенте\r\nПроцедура СвернутьДочерниеСтрокиДерева(СтрокиДерева)\r\n    Для Каждого ТекущаяСтрока Из СтрокиДерева Цикл\r\n        ДочерниеСтроки = ТекущаяСтрока.ПолучитьЭлементы();\r\n        // рекурсивный вызов процедуры СвернутьДочерниеСтрокиДерева()\r\n        СвернутьДочерниеСтрокиДерева(ДочерниеСтроки);\r\n        Элементы.ЭлементДеревоЗначений.Свернуть(\r\n            ТекущаяСтрока.ПолучитьИдентификатор()\r\n        );\r\n    КонецЦикла; \r\nКонецПроцедуры\r\n[/язык]\r\n\r\n[язык]\r\n&НаКлиенте\r\nПроцедура РазвернутьТекущуюСтрокуДерева(Команда)\r\n    Элементы.ЭлементДеревоЗначений.Развернуть(\r\n        Элементы.ЭлементДеревоЗначений.ТекущаяСтрока, Истина\r\n    );\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура РазвернутьВсеСтрокиДерева(Команда)\r\n    СтрокиДерева = РеквизитДеревоЗначений.ПолучитьЭлементы();\r\n    Для Каждого ТекущаяСтрока Из СтрокиДерева Цикл\r\n        Элементы.ЭлементДеревоЗначений.Развернуть(\r\n            ТекущаяСтрока.ПолучитьИдентификатор(), Истина\r\n        );\r\n    КонецЦикла;\r\nКонецПроцедуры\r\n[/язык]\r\n\r\n<div class=\"note\">\r\n[язык]\r\nДанныеФормыДерево.ПолучитьЭлементы()\r\n[/язык]\r\n<ul>\r\n  <li>Получает коллекцию элементов дерева верхнего уровня.</li>\r\n  <li>Возвращаемое значение: <code>ДанныеФормыКоллекцияЭлементовДерева</code>.</li>\r\n</ul>\r\n[язык]\r\nДанныеФормыЭлементДерева.ПолучитьЭлементы()\r\n[/язык]\r\n<ul>\r\n  <li>Получает коллекцию дочерних элементов.</li>\r\n  <li>Возвращаемое значение: <code>ДанныеФормыКоллекцияЭлементовДерева</code>.</li>\r\n</ul>\r\n</div>\r\n<div class=\"note\">\r\n<p>\r\nДля представления в форме объектов конфигурации (справочники, документы и т.п.) существуют специальные типы данных:\r\n</p>\r\n<ul>\r\n  <li><code>ДанныеФормыСтруктура</code> — содержит набор свойств произвольного типа. Свойствами могут быть другие структуры, коллекции или структуры с коллекциями. Таким типом представляется, например, в форме <code>СправочникОбъект</code>.</li>\r\n  <li><code>ДанныеФормыКоллекция</code> — это список типизированных значений, похожий на массив. Доступ к элементу коллекции осуществляется по индексу или по идентификатору. Доступ по идентификатору может отсутствовать в некоторых случаях. Это обусловлено типом прикладного объекта, который представлен этой коллекцией. Идентификатором может быть любое целое число. Таким типом представляется, например, в форме табличная часть.</li>\r\n  <li><code>ДанныеФормыСтруктураСКоллекцией</code> — это объект, который представлен в виде структуры и коллекции одновременно. С ним можно обращаться как с любой из этих сущностей. Таким типом представляется, например, в форме набор записей.</li>\r\n  <li><code>ДанныеФормыДерево</code> — объект предназначен для хранения иерархических данных.</li>\r\n</ul>\r\n<p>\r\nПрикладной объект представлен либо одним, либо несколькими элементами данных формы. Например, документ, содержащий табличную часть, будет представлен объектом типа <code>ДанныеФормыСтруктура</code> (собственно документ), которому подчинен объект типа <code>ДанныеФормыКоллекция</code> (табличная часть документа).\r\n</p>\r\n</div>\r\n\r\n<h2>Удалить строку и очистить дерево значений</h2>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура УдалитьСтрокуДереваЗначений(Команда)\r\n    УдалитьСтрокуДереваЗначенийНаСервере();\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура УдалитьСтрокуДереваЗначенийНаСервере()\r\n    ДеревоЗначений = РеквизитФормыВЗначение(\"РеквизитДеревоЗначений\");\r\n    // удаляем первую строку дерева значений\r\n    ДеревоЗначений.Строки.Удалить(0);\r\n    ЗначениеВРеквизитФормы(ДеревоЗначений, \"РеквизитДеревоЗначений\");\r\nКонецПроцедуры\r\n[/язык]\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ОчиститьДеревоЗначений(Команда)\r\n    ОчиститьДеревоЗначенийНаСервере();\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура ОчиститьДеревоЗначенийНаСервере()\r\n    ДеревоЗначений = РеквизитФормыВЗначение(\"РеквизитДеревоЗначений\");\r\n    ДеревоЗначений.Строки.Очистить();\r\n    ЗначениеВРеквизитФормы(ДеревоЗначений, \"РеквизитДеревоЗначений\");\r\nКонецПроцедуры\r\n[/язык]\r\n\r\n<h2>Поиск в дереве значений</h2>\r\n<p>\r\nСреди наиболее часто используемых методов стоит отметить метод <code>Найти()</code> коллекции строк дерева значений.\r\n</p>\r\n\r\n[язык]\r\nКоллекцияСтрокДереваЗначений.Найти(Значение, Колонки, ВключатьПодчиненные)\r\n[/язык]\r\n<ul>\r\n  <li><code>Значение</code> (обязательный, тип <code>Произвольный</code>). Искомое значение.</li>\r\n  <li><code>Колонки</code> (необязательный, тип <code>Строка</code>). Список имен колонок, в которых будет осуществляться поиск, разделенных запятыми. Если параметр не указан, поиск осуществляется по всем колонкам дерева. Значение по умолчанию — Пустая строка.</li>\r\n  <li><code>ВключатьПодчиненные</code> (необязательный, тип <code>Булево</code>). Определяет, будут ли участвовать в поиске строки подчиненных коллекций (если таковые имеются). Если <code>Истина</code> — строки подчиненных коллекций участвуют в поиске. Значение по умолчанию — <code>Ложь</code>.</li>\r\n</ul>\r\n<p>\r\nМетод осуществляет поиск значения в дереве в указанных колонках коллекции строк дерева значений. Возвращает строку (тип <code>СтрокаДереваЗначений</code>), которая содержит искомое значение. Если значение не найдено, то возвращается значение <code>Неопределено</code>. Предназначен для поиска уникальных значений.\r\n</p>\r\n\r\n[язык]\r\n&НаКлиенте\r\nПроцедура НайтиСтрокуДереваЗначений(Команда)\r\n    ЗаполнитьТабличноеПолеНаСервере();\r\n    НайтиСтрокуДереваЗначенийНаСервере();\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура НайтиСтрокуДереваЗначенийНаСервере()\r\n    ДеревоЗначений = РеквизитФормыВЗначение(\"РеквизитДеревоЗначений\");\r\n    РезультатПоиска = ДеревоЗначений.Строки.Найти(\r\n        ИскомоеЗначение,\r\n        \"ПерваяКолонка,ВтораяКолонка\",\r\n        Истина\r\n    );\r\n    Если РезультатПоиска <> Неопределено Тогда\r\n        Сообщить(\r\n            \"Первая колонка: \" + РезультатПоиска.ПерваяКолонка +\r\n            \", Вторая колонка: \" + РезультатПоиска.ВтораяКолонка\r\n        );\r\n    Иначе\r\n        Сообщить(\"Ничего не найдено\");\r\n    КонецЕсли;\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура ЗаполнитьТабличноеПолеНаСервере()\r\n    Запрос = Новый Запрос();\r\n    Запрос.Текст = \r\n        \"ВЫБРАТЬ\r\n        |    Номенклатура.Наименование КАК ПерваяКолонка,\r\n        |    Номенклатура.Код КАК ВтораяКолонка\r\n        |ИЗ\r\n        |    Справочник.Номенклатура КАК Номенклатура\r\n        |УПОРЯДОЧИТЬ ПО\r\n        |    ПерваяКолонка ИЕРАРХИЯ\";\r\n    ДеревоЗначений = Запрос.Выполнить().Выгрузить(\r\n        ОбходРезультатаЗапроса.ПоГруппировкамСИерархией\r\n    );\r\n    ЗначениеВРеквизитФормы(ДеревоЗначений, \"РеквизитДеревоЗначений\");\r\nКонецПроцедуры\r\n[/язык]\r\n<p>\r\n<a href=\"/files/blog/146/6.jpg\" class=\"zoom\"><img src=\"/files/blog/146/6.jpg\" alt=\"\" /></a>\r\n</p>','2018-06-19 18:11:45',1),(147,17,'Битрикс. Комплексный компонент «Новости»','','','$arResult, CMS, Web-разработка, init.php, Битрикс, Инфоблок, Компонент, Новости, ПостраничнаяНавигация, ЧПУ, ШаблонКомпонента','Создаем раздел «blog», в визуальном редакторе выбираем комплексный компонент «Контент • Новости • Новости» и добавляем его на страницу. Это комплексный компонент, предназначен для решения нескольких задач: показывать список новостей, показывать отдельную новость и т.д.','<p>\r\nСоздаем раздел <code>blog</code> и в визуальном редакторе, в правой колонке выбираем комплексный компонент <em>Контент • Новости • Новости</em> и добавляем его на страницу. Это комплексный компонент, предназначен для решения нескольких задач: показывать список новостей, показывать отдельную новость и т.д.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/147/1.jpg\" class=\"zoom\"><img src=\"/files/blog/147/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nРядом с комплексным компонентом есть несколько простых, которые предназначены для решения одной задачи:\r\n</p>\r\n<ul>\r\n  <li>Список новостей</li>\r\n  <li>Новость детально</li>\r\n</ul>\r\n<p>\r\nВ настройках компонента оставляем шаблон <code>.default</code>, выбираем тип инфоблока и сам инфоблок, которые были предварительно созданы в панели управления. Отмечаем checkbox «Устанавливать статус 404». В принципе, больше можно ничего не менять, остальные настройки можно поменять позже. В результате файл <code>/blog/index.php</code> будет таким:\r\n</p>\r\n[phtml]\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Блог\");\r\n?>\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:news\",\r\n    \"\",\r\n    Array(\r\n        // настройки компонента\r\n    )\r\n);\r\n?>\r\n<?php require($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\"); ?>\r\n[/phtml]\r\n<p>\r\n<a href=\"/files/blog/147/2.jpg\" class=\"zoom\"><img src=\"/files/blog/147/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nСам компонент расположен в <code>bitrix/components/bitrix/news</code>. В папке <code>templates</code> видим три шаблона, и среди них <code>.default</code>, который мы выбрали. Теперь надо скопировать этот шаблон в папку шаблона сайта:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/147/3.jpg\" class=\"zoom\"><img src=\"/files/blog/147/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nДля раздела «Блог»  у меня отдельный шаблон <code>local/templates/voguis_blog</code>, именно в эту папку я и буду копировать. Для шаблона компонента использую имя <code>blog</code>:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/147/4.jpg\" class=\"zoom\"><img src=\"/files/blog/147/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПосле копирования шаблона компонента, файл <code>/blog/index.php</code> был перезаписан:\r\n</p>\r\n[phtml]\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Блог\");\r\n?>\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:news\",\r\n    \"blog\",\r\n    Array(\r\n        \"ADD_ELEMENT_CHAIN\" => \"N\",                   // Включать название элемента в цепочку навигации\r\n        \"ADD_SECTIONS_CHAIN\" => \"N\",                  // Включать раздел в цепочку навигации\r\n        \"AJAX_MODE\" => \"N\",                           // Включить режим AJAX\r\n        \"AJAX_OPTION_ADDITIONAL\" => \"\",               // Дополнительный идентификатор\r\n        \"AJAX_OPTION_HISTORY\" => \"N\",                 // Включить эмуляцию навигации браузера\r\n        \"AJAX_OPTION_JUMP\" => \"N\",                    // Включить прокрутку к началу компонента\r\n        \"AJAX_OPTION_STYLE\" => \"Y\",                   // Включить подгрузку стилей\r\n        \"BROWSER_TITLE\" => \"-\",                       // Установить заголовок окна браузера из свойства\r\n        \"CACHE_FILTER\" => \"N\",                        // Кешировать при установленном фильтре\r\n        \"CACHE_GROUPS\" => \"Y\",                        // Учитывать права доступа\r\n        \"CACHE_TIME\" => \"36000000\",                   // Время кеширования (сек.)\r\n        \"CACHE_TYPE\" => \"N\",                          // Тип кеширования\r\n        \"CHECK_DATES\" => \"Y\",                         // Показывать только активные на данный момент элементы\r\n        \"DETAIL_ACTIVE_DATE_FORMAT\" => \"M j, Y\",      // Формат показа даты\r\n        \"DETAIL_DISPLAY_BOTTOM_PAGER\" => \"Y\",         // Выводить под списком\r\n        \"DETAIL_DISPLAY_TOP_PAGER\" => \"N\",            // Выводить над списком\r\n        \"DETAIL_FIELD_CODE\" => array(                 // Поля\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"DETAIL_PAGER_SHOW_ALL\" => \"Y\",               // Показывать ссылку \"Все\"\r\n        \"DETAIL_PAGER_TEMPLATE\" => \"\",                // Название шаблона\r\n        \"DETAIL_PAGER_TITLE\" => \"Страница\",           // Название категорий\r\n        \"DETAIL_PROPERTY_CODE\" => array(              // Свойства\r\n            0 => \"AUTHOR\",\r\n            1 => \"\",\r\n        ),\r\n        \"DETAIL_SET_CANONICAL_URL\" => \"N\",            // Устанавливать канонический URL\r\n        \"DISPLAY_BOTTOM_PAGER\" => \"Y\",                // Выводить под списком\r\n        \"DISPLAY_DATE\" => \"Y\",                        // Выводить дату элемента\r\n        \"DISPLAY_NAME\" => \"Y\",                        // Выводить название элемента\r\n        \"DISPLAY_PICTURE\" => \"Y\",                     // Выводить изображение для анонса\r\n        \"DISPLAY_PREVIEW_TEXT\" => \"Y\",                // Выводить текст анонса\r\n        \"DISPLAY_TOP_PAGER\" => \"N\",                   // Выводить над списком\r\n        \"HIDE_LINK_WHEN_NO_DETAIL\" => \"N\",            // Скрывать ссылку, если нет детального описания\r\n        \"IBLOCK_ID\" => \"1\",    // Инфоблок\r\n        \"IBLOCK_TYPE\" => \"content\",                   // Тип инфоблока\r\n        \"INCLUDE_IBLOCK_INTO_CHAIN\" => \"N\",           // Включать инфоблок в цепочку навигации\r\n        \"LIST_ACTIVE_DATE_FORMAT\" => \"j F Y\",         // Формат показа даты\r\n        \"LIST_FIELD_CODE\" => array(    // Поля\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"LIST_PROPERTY_CODE\" => array(                // Свойства\r\n            0 => \"AUTHOR\",\r\n            1 => \"\",\r\n        ),\r\n        \"MESSAGE_404\" => \"\",                          // Сообщение для показа (по умолчанию из компонента)\r\n        \"META_DESCRIPTION\" => \"-\",                    // Установить описание страницы из свойства\r\n        \"META_KEYWORDS\" => \"-\",                       // Установить ключевые слова страницы из свойства\r\n        \"NEWS_COUNT\" => \"10\",                         // Количество новостей на странице\r\n        \"PAGER_BASE_LINK_ENABLE\" => \"N\",              // Включить обработку ссылок\r\n        \"PAGER_DESC_NUMBERING\" => \"N\",                // Использовать обратную навигацию\r\n        \"PAGER_DESC_NUMBERING_CACHE_TIME\" => \"36000\", // Время кеширования страниц для обратной навигации\r\n        \"PAGER_SHOW_ALL\" => \"N\",                      // Показывать ссылку \"Все\"\r\n        \"PAGER_SHOW_ALWAYS\" => \"N\",                   // Выводить всегда\r\n        \"PAGER_TEMPLATE\" => \".default\",               // Шаблон постраничной навигации\r\n        \"PAGER_TITLE\" => \"Новости\",                   // Название категорий\r\n        \"PREVIEW_TRUNCATE_LEN\" => \"\",                 // Максимальная длина анонса для вывода (только для типа текст)\r\n        \"SEF_MODE\" => \"N\",                            // Включить поддержку ЧПУ\r\n        \"SET_LAST_MODIFIED\" => \"Y\",                   // Устанавливать в заголовках ответа время модификации страницы\r\n        \"SET_STATUS_404\" => \"Y\",                      // Устанавливать статус 404\r\n        \"SET_TITLE\" => \"N\",                           // Устанавливать заголовок страницы\r\n        \"SHOW_404\" => \"N\",                            // Показ специальной страницы\r\n        \"SORT_BY1\" => \"ACTIVE_FROM\",                  // Поле для первой сортировки новостей\r\n        \"SORT_BY2\" => \"SORT\",                         // Поле для второй сортировки новостей\r\n        \"SORT_ORDER1\" => \"DESC\",                      // Направление для первой сортировки новостей\r\n        \"SORT_ORDER2\" => \"ASC\",                       // Направление для второй сортировки новостей\r\n        \"STRICT_SECTION_CHECK\" => \"N\",                // Строгая проверка раздела\r\n        \"USE_CATEGORIES\" => \"N\",                      // Выводить материалы по теме\r\n        \"USE_FILTER\" => \"N\",                          // Показывать фильтр\r\n        \"USE_PERMISSIONS\" => \"N\",                     // Использовать дополнительное ограничение доступа\r\n        \"USE_RATING\" => \"N\",                          // Разрешить голосование\r\n        \"USE_REVIEW\" => \"N\",                          // Разрешить отзывы\r\n        \"USE_RSS\" => \"N\",                             // Разрешить RSS\r\n        \"USE_SEARCH\" => \"N\",                          // Разрешить поиск\r\n        \"USE_SHARE\" => \"N\",                           // Отображать панель соц. закладок\r\n        \"VARIABLE_ALIASES\" => array(\r\n            \"ELEMENT_ID\" => \"ELEMENT_ID\",\r\n            \"SECTION_ID\" => \"SECTION_ID\",\r\n        )\r\n    ),\r\n    false\r\n);\r\n?>\r\n<?php require($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\"); ?>\r\n[/phtml]\r\n<p>\r\nФайлы css-стилей удаляем:\r\n</p>\r\n<ul>\r\n  <li><code>/local/templates/voguis_blog/components/bitrix/news/blog/bitrix/news.list/.default/style.css</code></li>\r\n  <li><code>/local/templates/voguis_blog/components/bitrix/news/blog/bitrix/news.detail/.default/style.css</code></li>\r\n</ul>\r\n<p>\r\nТеперь внесем изменения в шаблоны, отвечающие за вывод списка новостей и за показ отдельной новости:\r\n</p>\r\n<ul>\r\n  <li><code>/local/templates/voguis_blog/components/bitrix/news/blog/bitrix/news.list/.default/template.php</code></li>\r\n  <li><code>/local/templates/voguis_blog/components/bitrix/news/blog/bitrix/news.detail/.default/template.php</code></li>\r\n</ul>\r\n<p>\r\nЧтобы иметь возможность просматривать значения переменных, доступных в шаблоне, создадим в файле <code>local/php_interface/init.php</code> функцию <code>debug()</code>:\r\n</p>\r\n[php]\r\n<?php\r\ndefine(\"DEFAULT_TEMPLATE_PATH\", \'/local/templates/.default\');\r\n\r\nfunction debug($data) {\r\n    echo \'<pre>\' . print_r($data, true) . \'</pre>\';\r\n}\r\n[/php]\r\n\r\n<h2>Шаблон списка новостей</h2>\r\n<p>\r\nФайл шаблона <code>/local/templates/voguis_blog/components/bitrix/news/blog/bitrix/news.list/.default/template.php</code>\r\n</p>\r\n<p>\r\nРаспечатаем массив <code>$arResult[\"ITEMS\"]</code>, весь остальной код удалим:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл /local/templates/voguis_blog/components/bitrix/news/blog/bitrix/news.list/.default/template.php\r\n */\r\n\r\nif(!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<?php\r\ndebug($arResult[\"ITEMS\"]);\r\n?>\r\n[/phtml]\r\n<p>\r\n<a href=\"/files/blog/147/5.jpg\" class=\"zoom\"><img src=\"/files/blog/147/5.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПосле внесения изменений:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл /local/templates/voguis_blog/components/bitrix/news/blog/bitrix/news.list/.default/template.php\r\n */\r\n\r\nif(!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<?php if($arParams[\"DISPLAY_TOP_PAGER\"]): /* постраничная навигация вверху */ ?>\r\n    <?= $arResult[\"NAV_STRING\"] ?><br />\r\n<?php endif; ?>\r\n\r\n<section>\r\n<?php foreach($arResult[\"ITEMS\"] as $arItem): /* список постов блога */ ?>\r\n    <article>\r\n        <div class=\"blog-article-image\">\r\n            <a href=\"<?= $arItem[\'DETAIL_PAGE_URL\']; ?>\">\r\n                <img src=\"<?= $arItem[\'PREVIEW_PICTURE\'][\'SRC\']; ?>\"\r\n                     title=\"<?= $arItem[\'PREVIEW_PICTURE\'][\'ALT\']; ?>\" />\r\n            </a>\r\n        </div>\r\n        <div class=\"blog-article-header\">\r\n            <h2><a href=\"<?= $arItem[\'DETAIL_PAGE_URL\']; ?>\"><?= $arItem[\'NAME\']; ?></a></h2>\r\n            <p>\r\n                Добавлено <span><?= $arItem[\'DISPLAY_ACTIVE_FROM\']; ?></span>\r\n                Автор <span><?= $arItem[\'PROPERTIES\'][\'AUTHOR\'][\'VALUE\']; ?></span>\r\n            </p>\r\n        </div>\r\n        <div class=\"blog-artcle-preview\">\r\n            <p><?= $arItem[\'PREVIEW_TEXT\']; ?> <a href=\"<?= $arItem[\'DETAIL_PAGE_URL\']; ?>\">[...]</a></p>\r\n        </div>\r\n        <div class=\"blog-article-links\">\r\n            <ul>\r\n                <li><span>Просмотров: <?= $arItem[\'SHOW_COUNTER\']; ?></span></li>\r\n                <li><a href=\"<?= $arItem[\'DETAIL_PAGE_URL\']; ?>\">Постоянная ссылка</a></li>\r\n            </ul>\r\n        </div>\r\n    </article>\r\n<?php endforeach; ?>\r\n</section>\r\n\r\n<?php if($arParams[\"DISPLAY_BOTTOM_PAGER\"]): /* постраничная навигация внизу */  ?>\r\n    <br /><?= $arResult[\"NAV_STRING\"] ?>\r\n<?php endif; ?>\r\n[/phtml]\r\n\r\n<h2>Постраничная навигация</h2>\r\n<p>\r\nЧтобы кастомизировать постраничную навигацию, надо скопировать один из шаблонов системного компонента <code>system.pagenavigation</code>. Все содержимое папки <code>modern</code> копируем в папку <code>pager</code>:\r\n</p>\r\n<ul>\r\n  <li><code>bitrix/components/bitrix/system.pagenavigation/templates/modern</code></li>\r\n  <li><code>local/templates/.default/components/bitrix/system.pagenavigation/pager</code></li>\r\n</ul>\r\n<p>\r\nУдаляем файлы стилей <code>style.css</code> и <code>style.min.css</code> и создаем файл <code>.description.php</code>:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.navigation/pager/.description.php\r\n */\r\nif(!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$arTemplateDescription = array(\r\n    \"NAME\" => GetMessage(\"SYS_PAGER_TMPL_NAME\"),\r\n    \"DESCRIPTION\" => GetMessage(\"SYS_PAGER_TMPL_DESCR\"),\r\n);\r\n[/php]\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.navigation/pager/lang/ru/.description.php\r\n */\r\n$MESS[\'SYS_PAGER_TMPL_NAME\'] = \'Постраничная навигация\';\r\n$MESS[\'SYS_PAGER_TMPL_DESCR\'] = \'Шаблон постраничной навигации\';\r\n[/php]\r\n<p>\r\nИ теперь нам надо отредактировать файл <code>template.php</code>. Распечатаем массив <code>$arResult</code> с помощью функции <code>debug()</code>:\r\n</p>\r\n[code]\r\nArray\r\n(\r\n    [NavShowAlways] => \r\n    [NavTitle] => Статьи\r\n    [NavRecordCount] => 7\r\n    [NavPageCount] => 2\r\n    [NavPageNomer] => 1\r\n    [NavPageSize] => 4\r\n    [bShowAll] => \r\n    [NavShowAll] => \r\n    [NavNum] => 1\r\n    [bDescPageNumbering] => \r\n    [add_anchor] => \r\n    [nPageWindow] => 5\r\n    [bSavePage] => \r\n    [sUrlPath] => /blog/\r\n    [NavQueryString] => \r\n    [sUrlPathParams] => /blog/?\r\n    [nStartPage] => 1\r\n    [nEndPage] => 2\r\n    [NavFirstRecordShow] => 1\r\n    [NavLastRecordShow] => 4\r\n)\r\n[/code]\r\n<ul>\r\n  <li><code>NavRecordCount</code> — общее количество статей (записей)</li>\r\n  <li><code>NavPageCount</code> — общее количество страниц</li>\r\n  <li><code>NavPageNomer</code> — номер текущей страницы</li>\r\n  <li><code>NavPageSize</code> — количество статей на страницу</li>\r\n  <li><code>nStartPage</code> — номер первой страницы</code></li>\r\n  <li><code>nEndPage</code> — номер последней страницы</code></li>\r\n  <li><code>NavNum</code> — номер постраничной навигации (<code>PAGEN_1</code>, <code>PAGEN_2</code>, …)</li>\r\n</ul>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.pagenavigation/pager/template.php\r\n */\r\n\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$this->setFrameMode(true);\r\n\r\nif (!$arResult[\"NavShowAlways\"]) {\r\n    if ($arResult[\"NavRecordCount\"] == 0 || ($arResult[\"NavPageCount\"] == 1 && $arResult[\"NavShowAll\"] == false)) return;\r\n}\r\n\r\n$strNavQueryString = ($arResult[\"NavQueryString\"] != \"\" ? $arResult[\"NavQueryString\"].\"&amp;\" : \"\");\r\n$strNavQueryStringFull = ($arResult[\"NavQueryString\"] != \"\" ? \"?\".$arResult[\"NavQueryString\"] : \"\");\r\n?>\r\n\r\n<nav>\r\n    <ul class=\"pagination\">\r\n        <?php if ($arResult[\"NavPageNomer\"] > 1): /* показываем ссылку на предыдущую страницу */ ?>\r\n            <?php if ($arResult[\"NavPageNomer\"] > 2): /* доп.условие, чтобы убрать /blog/?PAGEN_1=1 для первой страницы */ ?>\r\n                <li>\r\n                    <a href=\"<?=$arResult[\"sUrlPath\"]?>?<?=$strNavQueryString?>PAGEN_<?=$arResult[\"NavNum\"]?>=<?=($arResult[\"NavPageNomer\"]-1)?>\" aria-label=\"Предыдущая\">\r\n                        <span aria-hidden=\"true\">«</span>\r\n                    </a>\r\n                </li>\r\n            <?php else: ?>\r\n                <li>\r\n                    <a href=\"<?=$arResult[\"sUrlPath\"]?><?=$strNavQueryStringFull?>\" aria-label=\"Предыдущая\">\r\n                        <span aria-hidden=\"true\">«</span>\r\n                    </a>\r\n                </li>\r\n            <?php endif; ?>\r\n        <?php endif; ?>\r\n\r\n        <?php while ($arResult[\"nStartPage\"] <= $arResult[\"nEndPage\"]): /* цикл с первой по последнюю страницу */ ?>\r\n            <?php if ($arResult[\"nStartPage\"] == $arResult[\"NavPageNomer\"]): /* если это текущая страница */ ?>\r\n                <li class=\"active\"><a><?=$arResult[\"nStartPage\"]?></a></li>\r\n            <?php elseif ($arResult[\"nStartPage\"] == 1 && $arResult[\"bSavePage\"] == false): /* если это ссылка на первую страницу */ ?>\r\n                <li><a href=\"<?=$arResult[\"sUrlPath\"]?><?=$strNavQueryStringFull?>\"><?=$arResult[\"nStartPage\"]?></a></li>\r\n            <?php else: ?>\r\n                <li><a href=\"<?=$arResult[\"sUrlPath\"]?>?<?=$strNavQueryString?>PAGEN_<?=$arResult[\"NavNum\"]?>=<?=$arResult[\"nStartPage\"]?>\"><?=$arResult[\"nStartPage\"]?></a></li>\r\n            <?php endif; ?>\r\n            <?php $arResult[\"nStartPage\"]++ /* увеличиваем счетчик страниц */ ?>\r\n        <?php endwhile; ?>\r\n\r\n        <?php if ($arResult[\"NavPageNomer\"] < $arResult[\"NavPageCount\"]): /* показываем ссылку на следующую страницу */ ?>\r\n            <li>\r\n                <a href=\"<?=$arResult[\"sUrlPath\"]?>?<?=$strNavQueryString?>PAGEN_<?=$arResult[\"NavNum\"]?>=<?=($arResult[\"NavPageNomer\"]+1)?>\" aria-label=\"Следующая\">\r\n                    <span aria-hidden=\"true\">»</span>\r\n                </a>\r\n            </li>\r\n        <?php endif; ?>\r\n    </ul>\r\n</nav>\r\n[/phtml]\r\n\r\n<h2>ЧПУ (SEF)</h2>\r\n<p>\r\nИдем в настройки компонента и выставляем значения:\r\n</p>\r\n<ul>\r\n  <li>Каталог ЧПУ (относительно корня сайта): <code>/blog/</code></li>\r\n  <li>Страница общего списка: [пусто]</li>\r\n  <li>Страница раздела: <code>category/#SECTION_ID#/</code></li>\r\n  <li>Страница детального просмотра: <code>category/#SECTION_ID#/post/#ELEMENT_ID#/</code></li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/147/6.jpg\" class=\"zoom\"><img src=\"/files/blog/147/6.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТеперь URL будут иметь вид:\r\n</p>\r\n<ul>\r\n  <li>Категория (раздел блога): <code>http://www.host.ru/blog/category/3/</code></li>\r\n  <li>Страница просмотра записи: <code>http://www.host.ru/blog/category/3/post/12/</code></li>\r\n</ul>\r\n<p>\r\nЕще один вариант — использовать символьные коды (транслитерация названия) разделов и элементов:\r\n</p>\r\n<ul>\r\n  <li>Каталог ЧПУ (относительно корня сайта): <code>/blog/</code></li>\r\n  <li>Страница общего списка: [пусто]</li>\r\n  <li>Страница раздела: <code>category/#SECTION_CODE#/</code></li>\r\n  <li>Страница детального просмотра: <code>category/#SECTION_CODE#/post/#ELEMENT_CODE#/</code></li>\r\n</ul>\r\n<p>\r\n<p>\r\nТеперь URL будут иметь вид:\r\n</p>\r\n[code]\r\nhttp://www.host.ru/blog/category/[red]vtoraya-kategoriya[/red]/\r\nhttp://www.host.ru/blog/category/[red]vtoraya-kategoriya[/red]/post/[grn]sedmaya-statya-bloga[/grn]/\r\n[/code]\r\n<p>\r\nЕсли категории блога имеют вложенность, можно использовать <code>#SECTION_CODE_PATH#</code> вместо <code>#SECTION_CODE#</code>:\r\n</p>\r\n[code]\r\nhttp://www.host.ru/blog/category/[red]tretya-kategoriya[/red]/[red]dochernyaya-kategoriya[/red]/\r\nhttp://www.host.ru/blog/category/[red]tretya-kategoriya[/red]/[red]dochernyaya-kategoriya[/red]/post/[grn]vosmaya-statya-bloga/[/grn]\r\n[/code]\r\n\r\n<h2>Шаблон отдельной новости</h2>\r\n<p>\r\nФайл шаблона <code>/local/templates/voguis_blog/components/bitrix/news/blog/bitrix/news.detail/.default/template.php</code>\r\n</p>\r\n<p>\r\nКак обычно, удаляем все из шаблона <code>template.php</code> и распечатываем массив <code>$arResult</code>:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл /local/templates/voguis_blog/components/bitrix/news/blog/bitrix/news.detail/.default/template.php\r\n */\r\n\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<?php\r\ndebug($arResult);\r\n?>\r\n[/phtml]\r\n<p>\r\nПосле внесения изменений:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл /local/templates/voguis_blog/components/bitrix/news/blog/bitrix/news.detail/.default/template.php\r\n */\r\n\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<img src=\"<?= $arResult[\'DETAIL_PICTURE\'][\'SRC\']; ?>\" class=\"img-responsive\" alt=\"<?= $arResult[\'DETAIL_PICTURE\'][\'ALT\']; ?>\">\r\n\r\n<?= $arResult[\'DETAIL_TEXT\']; ?>\r\n\r\n<div class=\"artical-links\">\r\n    <ul>\r\n        <li><small> </small><span><?= $arResult[\'DISPLAY_ACTIVE_FROM\']; ?></span></li>\r\n        <li><a href=\"#\"><small class=\"admin\"> </small><span><?= $arResult[\'PROPERTIES\'][\'AUTHOR\'][\'VALUE\']; ?></span></a></li>\r\n        <li><a href=\"#\"><small class=\"no\"> </small><span>Нет комментариев</span></a></li>\r\n        <li><a href=\"#\"><small class=\"posts\"> </small><span>Количество просмотров: <?=$arResult[\'SHOW_COUNTER\'] ? $arResult[\'SHOW_COUNTER\'] : 0;?></span></a></li>\r\n        <li><a href=\"<?= $arResult[\'DETAIL_PAGE_URL\']; ?>\"><small class=\"link\"> </small><span>Постоянная ссылка</span></a></li>\r\n    </ul>\r\n</div>\r\n[/phtml]','2018-06-25 10:07:32',1),(148,17,'Битрикс. Обратная постраничная навигация','','','CMS, Web-разработка, Битрикс, Компонент, Новости, ПостраничнаяНавигация, ШаблонКомпонента','Обратная постраничная навигация встречается сравнительно редко. Обратную навигацию необходимо использовать везде, где элементы добавляются в начало: новости, отзывы, посты в блоге, сообщения на форуме. Это для того, чтобы контент не убегал при добавлении нового отзыва. Полезно для поисковых систем.','<p>\r\nОбратная постраничная навигация встречается сравнительно редко. Обратную навигацию необходимо использовать везде, где элементы добавляются в начало: новости, отзывы, посты в блоге, сообщения на форуме. Это для того, чтобы контент не убегал при добавлении нового отзыва. Полезно для поисковых систем.\r\n</p>\r\n<p>\r\nЕсли делать прямую навигацию, то для 11 элементов будет:\r\n</p>\r\n<ul>\r\n  <li>3 элемента</li>\r\n  <li>3 элемента, <code>PAGEN_1=2</code></li>\r\n  <li>3 элемента, <code>PAGEN_1=3</code></li>\r\n  <li>2 элемента, <code>PAGEN_1=4</code></li>\r\n</ul>\r\n<p>\r\nПри добавлении элемента все старые страницы сдвигаются и меняются. Это плохо — с поиска Яндекс или Google пользователи будут переходить на старую проиндексированнуюю страницу, а контент уже убежал на другую страницу.\r\n</p>\r\n<p>\r\nВ случае обратной постраничной навигации отзывы не сдвигаются и прошлые страницы для поисковиков не изменятся.\r\n</p>\r\n<ul>\r\n  <li>5 элементов</li>\r\n  <li>3 элемента, <code>PAGEN_1=2</code></li>\r\n  <li>3 элемента, <code>PAGEN_1=1</code></li>\r\n</ul>\r\n<p>\r\nВ этом случае на последней странице всегда 3 элемента. А на первой — не менее 3, но не более 5. \r\n</p>\r\n<p>\r\nПри добавлении еще одного отзыва (12 отзывов):\r\n</p>\r\n<ul>\r\n  <li>3 элемента</li>\r\n  <li>3 элемента, <code>PAGEN_1=3</code></li>\r\n  <li>3 элемента, <code>PAGEN_1=2</code></li>\r\n  <li>3 элемента, <code>PAGEN_1=1</code></li>\r\n</ul>\r\n<p>\r\nПри добавлении еще одного отзыва (13 отзывов):\r\n</p>\r\n<ul>\r\n  <li>4 элемента</li>\r\n  <li>3 элемента, <code>PAGEN_1=3</code></li>\r\n  <li>3 элемента, <code>PAGEN_1=2</code></li>\r\n  <li>3 элемента, <code>PAGEN_1=1</code></li>\r\n</ul>\r\n<p>\r\nПри добавлении еще одного отзыва (14 отзывов):\r\n</p>\r\n<ul>\r\n  <li>5 элементов</li>\r\n  <li>3 элемента, <code>PAGEN_1=3</code></li>\r\n  <li>3 элемента, <code>PAGEN_1=2</code></li>\r\n  <li>3 элемента, <code>PAGEN_1=1</code></li>\r\n</ul>\r\n<p>\r\nПри добавлении еще одного отзыва (15 отзывов):\r\n</p>\r\n<ul>\r\n  <li>3 элемента</li>\r\n  <li>3 элемента, <code>PAGEN_1=4</code></li>\r\n  <li>3 элемента, <code>PAGEN_1=3</code></li>\r\n  <li>3 элемента, <code>PAGEN_1=2</code></li>\r\n  <li>3 элемента, <code>PAGEN_1=1</code></li>\r\n</ul>\r\n<p>\r\nВсе типовые шаблоны компонента навигации Битрикса поддерживают обратную постраничную навигацию.\r\n</p>','2018-06-23 09:33:24',1),(149,8,'Примеры запросов для работы с иерархическими справочниками','','','1С:Предприятие, Иерархия, Справочник, ЯзыкЗапросов','Для получения подчиненных элементов иерархического справочника в языке запросов предусмотрена конструкция «В ИЕРАРХИИ». Если же нас интересуют только элементы и группы, находящиеся непосредственно в заданной группе, то такие элементы мы можем получить, установив условие на поле «Родитель».','<h3>Получение элементов иерархического справочника, находящихся в подчинении заданной группы</h3>\r\n<p>\r\nДля получения подчиненных элементов иерархического справочника в языке запросов предусмотрена конструкция <code>В ИЕРАРХИИ</code>:\r\n</p>\r\n[запрос]\r\nВЫБРАТЬ\r\n    Номенклатура.Код, \r\n    Номенклатура.Наименование КАК Наименование, \r\n    Номенклатура.ЗакупочнаяЦена \r\nИЗ \r\n    Справочник.Номенклатура КАК Номенклатура\r\nГДЕ \r\n    Номенклатура.Ссылка В ИЕРАРХИИ (&Группа) \r\n[/запрос]\r\n<p>\r\nВ данном примере будут получены все записи справочника <code>Номенклатура</code>, находящиеся в группе <code>&amp;Группа</code>, включая ее саму, ее подчиненные группы и элементы, принадлежащие подчиненным группам.\r\n</p>\r\n<p>\r\nЕсли же нас интересуют только элементы и группы, находящиеся непосредственно в заданной группе, то такие элементы мы можем получить, установив условие на поле <code>Родитель</code>:\r\n</p>\r\n[запрос]\r\nВЫБРАТЬ\r\n    Номенклатура.Код, \r\n    Номенклатура.Наименование КАК Наименование, \r\n    Номенклатура.ЗакупочнаяЦена \r\nИЗ \r\n    Справочник.Номенклатура КАК Номенклатура\r\nГДЕ \r\n    Номенклатура.Родитель = &Группа\r\n[/запрос]\r\n<p>\r\nТакой запрос выберет группы и элементы, находящиеся в подчинении группы со ссылкой <code>&amp;Группа</code>.\r\n</p>\r\n\r\n<h3>Проверка наличия подчиненных элементов у элемента справочника</h3>\r\n<p>\r\nДля проверки наличия подчиненных записей элемента справочника можно пользоваться запросом, аналогичным представленному:\r\n</p>\r\n[запрос]\r\nВЫБРАТЬ ПЕРВЫЕ 1 \r\n    Номенклатура.Ссылка \r\nИЗ \r\n    Справочник.Номенклатура КАК Номенклатура \r\nГДЕ \r\n    Номенклатура.Родитель = &Родитель\r\n[/запрос]\r\n<p>\r\nВ данном примере ссылка элемента, для которого необходимо проверить наличие дочерних элементов, записывается в параметр запроса <code>&amp;Родитель</code>. После выполнения такого запроса необходимо проверить результат на пустоту. Если результат не пустой, то подчиненные записи есть. Иначе — нет.\r\n</p>\r\n[язык]\r\nЕсли Запрос.Выполнить().Пустой() Тогда \r\n    Сообщить(\"Записей нет\"); \r\nИначе \r\n    Сообщить(\"Записи есть\"); \r\nКонецЕсли;\r\n[/язык]\r\n\r\n<h3>Получение всех родителей элемента</h3>\r\n<P>\r\nВ языке запросов не предусмотрено специальных средств для получения всех родителей элемента. Для выполнения задачи можно воспользоваться иерархическими итогами, однако получение иерархических итогов оптимизировано для построения итогов большого количества записей, и не вполне эффективно для получения родителей одного элемента. Для более эффективного получения всех родительских записей элемента, рекомендуется перебирать в цикле его родителей небольшими порциями.\r\n</p>\r\n[язык]\r\nТекущийЭлементНоменклатуры = ЭлементНоменклатура;\r\n\r\nЗапрос = Новый Запрос(\r\n    \"ВЫБРАТЬ \r\n    |    Номенклатура.Родитель, \r\n    |    Номенклатура.Родитель.Родитель, \r\n    |    Номенклатура.Родитель.Родитель.Родитель, \r\n    |    Номенклатура.Родитель.Родитель.Родитель.Родитель, \r\n    |    Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель \r\n    |ИЗ \r\n    |    Справочник.Номенклатура КАК Номенклатура \r\n    |ГДЕ \r\n    |    Номенклатура.Ссылка = &ТекущийЭлементНоменклатуры\"\r\n); \r\n\r\nПока Истина Цикл \r\n    Запрос.УстановитьПараметр(\"ТекущийЭлементНоменклатуры\", ТекущийЭлементНоменклатуры); \r\n    Результат = Запрос.Выполнить(); \r\n    Если Результат.Пустой() Тогда \r\n        Прервать; \r\n    КонецЕсли; \r\n    Выборка = Результат.Выбрать(); \r\n    Выборка.Следующий(); \r\n    Для НомерКолонки = 0 По Результат.Колонки.Количество() - 1 Цикл \r\n        ТекущийЭлементНоменклатуры = Выборка[НомерКолонки]; \r\n        Если ТекущийЭлементНоменклатуры = Справочники.Номенклатура.ПустаяСсылка() Тогда \r\n            Прервать; \r\n        Иначе \r\n            Сообщить(ТекущийЭлементНоменклатуры); \r\n        КонецЕсли; \r\n    КонецЦикла; \r\n\r\n    Если ТекущийЭлементНоменклатуры = Справочники.Номенклатура.ПустаяСсылка() Тогда \r\n        Прервать; \r\n    КонецЕсли; \r\nКонецЦикла;\r\n[/язык]\r\n<p>\r\nВ данном примере в окно служебных сообщений выводятся все родители для ссылки, записанной в переменную <code>ЭлементНоменклатура</code>. В цикле выбирается по пять родителей ссылки.\r\n</p>\r\n<p>\r\nЕсли число уровней в справочнике ограничено и невелико, то возможно получение всех родителей одним запросом без цикла.\r\n</p>\r\n\r\n<h3>Вывод иерархического справочника в отчет</h3>\r\n<p>\r\nДля вывода иерархического справочника в отчет с сохранением иерархии необходимо пользоваться запросом аналогичным следующему:\r\n</p>\r\n[запрос]\r\nВЫБРАТЬ\r\n    Номенклатура.Код, \r\n    Номенклатура.Наименование КАК Наименование, \r\n    Номенклатура.ЗакупочнаяЦена \r\nИЗ \r\n    Справочник.Номенклатура КАК Номенклатура \r\nУПОРЯДОЧИТЬ ПО \r\n    Наименование ИЕРАРХИЯ\r\n[/запрос]\r\n<p>\r\nДанный запрос выбирает все записи из справочника и производит упорядочивание по иерархии. Результат будет упорядочен по наименованию, с учетом иерархии.\r\n</p>\r\n<p>\r\nДля того, чтобы группы справочника размещались выше элементов необходимо в данном запросе заменить предложение <code>УПОРЯДОЧИТЬ ПО</code> на следующее:\r\n</p>\r\n[запрос]\r\nУПОРЯДОЧИТЬ ПО \r\n    Номенклатура.ЭтоГруппа ИЕРАРХИЯ,\r\n    Наименование\r\n[/запрос]\r\n<p>\r\nРезультат по-прежнему будет упорядочен по иерархии, однако группы будут располагаться выше элементов.\r\n</p>\r\n<p>\r\nВозможна также замена предложения <code>УПОРЯДОЧИТЬ ПО</code> на предложение <code>АВТОУПОРЯДОЧИВАНИЕ</code>. В этом случае результат будет упорядочен в соответствии с настройками справочника, т.е. если в справочнике указано, что группы должны располагаться выше элементов, то они будут расположены выше.\r\n</p>\r\n<p>\r\nПолучить иерархическую структуру справочника также возможно и при помощи итогов:\r\n</p>\r\n[запрос]\r\nВЫБРАТЬ \r\n    Номенклатура.Код, \r\n    Номенклатура.Наименование КАК Наименование, \r\n    Номенклатура.ЗакупочнаяЦена \r\nИЗ \r\n    Справочник.Номенклатура КАК Номенклатура \r\nГДЕ \r\n    Номенклатура.ЭтоГруппа = ЛОЖЬ \r\nУПОРЯДОЧИТЬ ПО \r\n    Наименование \r\nИТОГИ ПО\r\n    Номенклатура.Ссылка ТОЛЬКО ИЕРАРХИЯ\r\n[/запрос]\r\n\r\n<h3>Получение итогов по иерархии</h3>\r\n<p>\r\nДля получения итогов по иерархии в запросе необходимо в предложении <code>ИТОГИ ПО</code> указать ключевое слово <code>ИЕРАРХИЯ</code> после указания поля, по которому будет рассчитываться итоги. Пример отчета «Обороты номенклатуры» с получением итогов по иерархии:\r\n</p>\r\n[запрос]\r\nВЫБРАТЬ\r\n    УчетНоменклатурыОбороты.Номенклатура КАК Номенклатура, \r\n    УчетНоменклатурыОбороты.Номенклатура.Представление, \r\n    УчетНоменклатурыОбороты.КоличествоОборот КАК КоличествоОборот \r\nИЗ \r\n    РегистрНакопления.УчетНоменклатуры.Обороты КАК УчетНоменклатурыОбороты \r\nИТОГИ СУММА(КоличествоОборот) ПО \r\n    Номенклатура ИЕРАРХИЯ\r\n[/запрос]\r\n<p>\r\nВ результате данного запроса будут рассчитаны итоги не только для каждой номенклатуры, но и для групп, к которым принадлежит та или иная номенклатура.\r\n</p>\r\n<p>\r\nВ случае, когда не нужны итоги по элементам, а нужны итоги только по группам, необходимо использовать в итогах конструкцию <code>ТОЛЬКО ИЕРАРХИЯ</code>:\r\n</p>\r\n[запрос]\r\nВЫБРАТЬ\r\n    УчетНоменклатурыОбороты.Номенклатура КАК Номенклатура, \r\n    УчетНоменклатурыОбороты.Номенклатура.Представление, \r\n    УчетНоменклатурыОбороты.КоличествоОборот КАК КоличествоОборот \r\nИЗ \r\n    РегистрНакопления.УчетНоменклатуры.Обороты КАК УчетНоменклатурыОбороты \r\nИТОГИ СУММА(КоличествоОборот) ПО \r\n    Номенклатура ТОЛЬКО ИЕРАРХИЯ\r\n[/запрос]\r\n<p>\r\nВ результате данного запроса будут итоговые записи только для групп номенклатуры.\r\n</p>','2018-06-22 16:32:48',1),(150,17,'Битрикс. SEO для инфоблока, раздела и страницы','','','CMS, SEO, Web-разработка, Битрикс, Инфоблок, РазделИнфоблока, РазделСайта, СтраницаСайта, ЭлементИнфоблока','Для тех, кто не в курсе: SEO (Search Engine Optimization, оптимизация для поисковых систем) — это комплекс мер для повышения позиций сайта в результатах выдачи поисковых систем (Яндекс, Google, MAIL.RU и других) по заранее определенным поисковым запросам.','<p>\r\nДля тех, кто не в курсе: SEO (Search Engine Optimization, оптимизация для поисковых систем) — это комплекс мер для повышения позиций сайта в результатах выдачи поисковых систем (Яндекс, Google, MAIL.RU и других) по заранее определенным поисковым запросам.\r\n</p>\r\n\r\n<h2>SEO-настройки для инфоблока</h2>\r\n<p>\r\nШаблоны SEO данных можно задавать как для всего инфоблока (т.е. для всех его разделов и элементов), так и для конкретных разделов, или элементов нужного раздела. Настройка может быть сделана для всего инфоблока, а потом для конкретного раздела/элемента переопределена на свою персональную. Все эти настройки выполняются на закладке «SEO» формы создания/редактирования соответственно инфоблока, раздела или элемента.\r\n</p>\r\n<p>\r\nНастройки для всего инфоблока, раздела и элемента:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/150/1.jpg\" class=\"zoom\" title=\"Битрикс. SEO настройки для всего инфоблока\"><img src=\"/files/blog/150/1.jpg\" alt=\"Битрикс. SEO настройки для всего инфоблока\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/150/2.jpg\" class=\"zoom\" title=\"Битрикс. SEO настройки для раздела инфоблока\"><img src=\"/files/blog/150/2.jpg\" alt=\"Битрикс. SEO настройки для раздела инфоблока\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/150/3.jpg\" class=\"zoom\" title=\"Битрикс. SEO настройки для элемента инфоблока\"><img src=\"/files/blog/150/3.jpg\" alt=\"Битрикс. SEO настройки для элемента инфоблока\" /></a>\r\n</p>\r\n<p>\r\nСодержимое закладки «SEO» для инфоблока и для раздела полностью идентично. В ней задаются шаблоны заголовков, ключевых слов, описаний для разделов и для элементов, а также шаблоны тегов для изображений разделов и элементов. На закладке SEO формы редактирования элементов присутствуют только те настройки, которые касаются самих элементов и их изображений.\r\n</p>\r\n<p>\r\nАналогичным образом происходит работа и с атрибутами картинок. Настройка шаблонов осуществляется как для анонсовых, так и для детальных изображений разделов и элементов инфоблока. Для картинок можно устанавливать атрибуты <code>alt</code>, <code>title</code>, а также делать шаблоны названий файлов.\r\n</p>\r\n<div class=\"note\">\r\nОбратите внимание, что все настройки файлов работают только для тех файлов, которые были загружены в систему после выполнения настроек. Для ранее загруженных файлов настройки не применяются.\r\n</div>\r\n\r\n<h2>SEO-настройки для раздела и страницы</h2>\r\n<p>\r\nВ Битрикс «создать раздел» — означает создать директорию и файл <code>index.php</code>, а «создать страницу» — означает создать php-файл. Для раздела также могут быть заданы SEO-настройки. Причем, эти настройки будут наследоваться дочерними разделами и страницами. Мало того, есть возможность задать SEO-настройки для корневой директории, которые будут наследоваться всеми разделами и страницами.\r\n</p>\r\n<p>\r\nНастройки для корневого раздела, раздела и страницы:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/150/4.jpg\" class=\"zoom\" title=\"Битрикс. SEO настройки для корневого раздела\"><img src=\"/files/blog/150/4.jpg\" alt=\"Битрикс. SEO настройки для корневого раздела\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/150/5.jpg\" class=\"zoom\" title=\"Битрикс. SEO настройки для раздела\"><img src=\"/files/blog/150/5.jpg\" alt=\"Битрикс. SEO настройки для раздела\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/150/6.jpg\" class=\"zoom\" title=\"Битрикс. SEO настройки для страницы\"><img src=\"/files/blog/150/6.jpg\" alt=\"Битрикс. SEO настройки для страницы\" /></a>\r\n</p>\r\n<p>\r\nНастройки для раздела сохраняются не в базе данных, а в файле <code>.section.php</code>:\r\n</p>\r\n[php]\r\n<?php\r\n$sSectionName = \"Торговый Дом Аврора\";\r\n$arDirProperties = Array(\r\n    \"keywords\" => \"поставка и монтаж холодильного оборудования, холодильные камеры, камеры шоковой заморозки\",\r\n    \"description\" => \"Поставка и монтаж холодильного оборудования, холодильные камеры для магазинов и супермаркетов.\",\r\n    \"title\" => \"Поставка и монтаж холодильного оборудования супермаркетов\",\r\n    \"robots\" => \"index, follow\"\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nНастройки для страницы прописываются в самом php-файле страницы:\r\n</p>\r\n[phtml]\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetPageProperty(\r\n    \"title\",\r\n    \"Поставка и монтаж холодильного оборудования супермаркетов\"\r\n);\r\n$APPLICATION->SetPageProperty(\r\n    \"keywords\",\r\n    \"поставка и монтаж холодильного оборудования, холодильные камеры, камеры шоковой заморозки\"\r\n);\r\n$APPLICATION->SetPageProperty(\r\n    \"description\",\r\n    \"Поставка и монтаж холодильного оборудования, холодильные камеры для магазинов и супермаркетов.\"\r\n);\r\n$APPLICATION->SetTitle(\"Поставка и монтаж холодильного оборудования\");\r\n?>\r\n<h1><?php $APPLICATION->ShowTitle(false); ?></h1>\r\n<p>\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore...\r\n</p>\r\n<?php require($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\"); ?>\r\n[/phtml]\r\n<div class=\"post-scriptum\">\r\n<p>\r\nСтолкнулся с тем, что компоненты, расположенные на странице, тоже могут устанавливать свойства страницы. Если вдруг вылезли непонятные заголовки или мета-теги, надо смотреть настройки всех компонентов на странице и снимать галочки:\r\n</p>\r\n<ul>\r\n  <li>Устанавливать заголовок страницы</li>	\r\n  <li>Устанавливать заголовок окна браузера</li>	\r\n  <li>Устанавливать ключевые слова страницы</li>	\r\n  <li>Устанавливать описание страницы</li>\r\n</ul>\r\n</div>','2018-06-27 15:58:35',1),(151,17,'Битрикс. Файл component_epilog.php','','','$arParams, $arResult, CMS, Web-разработка, Битрикс, Компонент, Кеширование, ШаблонКомпонента, result_modifier.php, component_epilog.php, SetResultCacheKeys','При использовании компонента в Битриксе часто нужно, чтобы компонент не только выводил данные на страницу, но и выполнял некоторые дополнительные действия. Раньше (при работе с версией Битрикса, младшей чем 9.0) для реализации такого поведения необходимо было модифицировать основной файл компонента component.php.','<p>\r\nПри использовании компонента в Битриксе часто нужно, чтобы компонент не только выводил данные на страницу, но и выполнял некоторые дополнительные действия: изменение заголовка страницы, добавление элементов навигационной цепочки и т. п. Раньше (при работе с версией Битрикса, младшей чем 9.0) для реализации такого поведения необходимо было модифицировать основной файл компонента <code>component.php</code>.\r\n</p>\r\n<p>\r\nВ версии 9.0 в шаблон компонента был добавлен файл <code>component_epilog.php</code> — эпилог компонента. Его особенность в том, что он, в отличие от файлов <code>template.php</code> и <code>result_modifier.php</code>, исполняется при каждом вызове компонента, вне зависимости от наличия кеша. Кроме того, в <code>component_epilog.php</code> доступны привычные массивы <code>$arParams</code> и <code>$arResult</code>.\r\n</p>\r\n\r\n<h2>Как работает компонент</h2>\r\n<p>\r\nДля начала небольшое описание составных частей среднестатистического компонента в Битрикс:\r\n</p>\r\n<ul>\r\n  <li><code>component.php</code> — файл с кодом, который формирует данные для шаблона (массив <code>$arResult</code>) и подключает шаблон. Кроме того, может выполнять какие-либо действия после получения данных. Например, устанавливать заголовок страницы или добавлять пункты в навигационную цепочку.</li>\r\n  <li><code>template.php</code> — файл шаблона. В идеале не содержит никакой логики, только вывод данных из <code>$arResult</code>. Кешируется html-вывод, т.е. PHP код из этого файла выполнится один раз, затем будет возвращаться html до следующего обновления кеша.</li>\r\n  <li><code>result_modifier.php</code> — файл, который подключается до <code>template.php</code> и может менять <code>$arResult</code>. Кешируется так же, как и <code>template.php</code>.\r\n  <li><code>component_epilog.php</code> — файл, который подключается после <code>template.php</code>. Никогда не кешируется.\r\n</ul>\r\n<p>\r\nПоследние три файла относятся к шаблону, предпочтительно редактировать именно их. Файл <code>component.php</code> в стандартных компонентах изменять нельзя, т.к. есть шанс, что правки затрутся после обновления системы.\r\n</p>\r\n<p>\r\nОбщую схему работы компонента можно представить несколькими шагами:\r\n</p>\r\n<ol>\r\n  <li>Проверка входных данных в <code>component.php</code>.</li>\r\n  <li>Проверка на наличие валидного (активного) кеша файлов <code>result_modifier.php</code> и <code>template.php</code>. Если кеш валидный, то вывод его, заполнение <code>$arResult</code> с помощью функции <code>SetResultCacheKeys()</code> и переход к <strong>пункту 5</strong>.</li>\r\n  <li>В случае невалидного кеша производятся необходимые действия для получения данных, т.е. заполнение массива <code>$arResult</code>.</li>\r\n  <li>Подключение файлов <code>result_modifier.php</code> и <code>template.php</code>, формирование + вывод html, а также «запоминание» этого вывода и части массива <code>$arResult</code>.</li>\r\n  <li>Подключение файла <code>component_epilog.php</code>.</li>\r\n  <li>Выполнение остального кода в <code>component.php</code>.</li>\r\n</ol>\r\n\r\n<h2>Что нужно помнить</h2>\r\n<p>\r\nСодержимое массива <code>$arResult</code> на разных этапах различается. В <code>result_modifier.php</code> и <code>template.php</code> попадает массив, содержащий <strong>все</strong> данные, которые получены на <strong>третьем шаге</strong>. В файле <code>component_epilog.php</code> и коде компонента, который выполняется после него, доступны данные массива <code>$arResult</code> с ключами, которые были указаны в функции <code>SetResultCacheKeys()</code>. Вызов ее происходит в <code>component.php</code>.\r\n</p>\r\n<p>\r\nНапример, нам нужно вывести заголовок страницы вида «[Название инфоблока] (кол-во элементов)»:\r\n</p>\r\n[php]\r\n/*\r\n * Фрагмент кода из файла component.php, где устанавливаются ключи, которые попадут в кеш\r\n */\r\n$this->SetResultCacheKeys(\r\n    array(\r\n        \"ID\",\r\n        \"IBLOCK_TYPE_ID\",\r\n        \"LIST_PAGE_URL\",\r\n        \"NAV_CACHED_DATA\",\r\n        \"NAME\",\r\n        \"SECTION\",\r\n        \"ELEMENTS\",\r\n    )\r\n);\r\n[/php]\r\n[php]\r\n/*\r\n * Фрагмент кода из файла component_epilog.php, где устанавливается заголовок страницы\r\n */\r\nglobal $APPLICATION;\r\n\r\n// этот код не сработает, т.к. в массиве $arResult не определен элемент с ключом «ITEMS»\r\nif (isset($arResult[\'NAME\']) && isset($arResult[\'ITEMS\'])) {\r\n    $title = $arResult[\'NAME\'] . \' (\' . count($arResult[\'ITEMS\']) . \')\';\r\n    $APPLICATION->SetTitle($title);\r\n}\r\n\r\n// правильный вариант, все нужные элемента массива присутствуют в кеше\r\nif (isset($arResult[\'NAME\']) && isset($arResult[\'ELEMENTS\'])) {\r\n    $title = $arResult[\'NAME\'] . \' (\' . count($arResult[\'ELEMENTS\']) . \')\';\r\n    $APPLICATION->SetTitle($title);\r\n}\r\n[/php]\r\n<p>\r\nДанные, которые доступны в <code>component_epilog.php</code> и далее (т.е. указаны в вызове <code>SetResultCacheKeys()</code>) можно изменять в <code>result_modifier.php</code> и <code>template.php</code>. Будет закешировано их новое значение.\r\n</p>\r\n[php]\r\n/*\r\n * Фрагмент кода из файла result_modifier.php шаблона компонента news.list. Задача — вывести\r\n * заголовок страницы вида «[Название инфоблока] (кол-во элементов)»\r\n */\r\n\r\n// доступен весь массив $arResult и мы можем переопределить элементы, которые попадут в кеш\r\n$arResult[\'NAME\'] .= \' (\' . count($arResult[\'ELEMENTS\']) . \')\';\r\n[/php]\r\n[php]\r\n/*\r\n * Фрагмент кода из файла component_epilog.php, где устанавливается заголовок страницы\r\n */\r\nglobal $APPLICATION;\r\n\r\n// компонент использует измененный $arResult[\'NAME\'] и мы получим нужный заголовок\r\nif (isset($arResult[\'NAME\'])) {\r\n    $APPLICATION->SetTitle($arResult[\'NAME\']);\r\n}\r\n[/php]\r\n<p>\r\nВ <code>result_modifier.php</code> можно добавлять данные в кеш.\r\n</p>\r\n[php]\r\n/*\r\n * Фрагмент кода из файла result_modifier.php шаблона компонента news.list. Задача — сделать мета-тег\r\n * description вида «[Названия элементов через запятую] скачать бесплатно без регистрации»\r\n */\r\n$arNames = array(); // сюда собираем названия элементов\r\nforeach ($arResult[\'ITEMS\'] as $arItem) {\r\n    $arNames[] = $arItem[\'NAME\'];\r\n}\r\n$arResult[\'DESCRIPTION\'] = implode(\', \', $arNames) . \' скачать бесплатно без регистрации\';\r\n$cp = $this->__component; // объект компонента\r\nif (is_object($cp)) {\r\n    $cp->SetResultCacheKeys(array(\'DESCRIPTION\')); // запомнить $arResult[\'DESCRIPTION\'] в кеш\r\n}\r\n[/php]\r\n[php]\r\n/*\r\n * Фрагмент кода из файла component_epilog.php, где устанавливается мета-тег description\r\n */\r\nglobal $APPLICATION;\r\n\r\n// устанавливаем свойство DESCRIPTION\r\nif (isset($arResult[\'DESCRIPTION\'])) {\r\n    $APPLICATION->SetDirProperty(\'description\', $arResult[\'DESCRIPTION\']);\r\n}\r\n[/php]','2018-06-29 18:47:26',1),(152,17,'Битрикс. Структура простого компонента','','','$arParams, $arResult, CMS, Web-разработка, Битрикс, Компонент, ШаблонКомпонента','Компонент хранит все, что ему нужно для работы, в своей папке. Поэтому их можно легко переносить между проектами. Файлы компонента нельзя использовать по отдельности. Компонент — это единое целое, он обладает свойством неделимости. Папка компонента может содержать следующие папки и файлы…','<p>\r\nКомпонент хранит все, что ему нужно для работы, в своей папке. Поэтому их можно легко переносить между проектами. Файлы компонента нельзя использовать по отдельности. Компонент — это единое целое, он обладает свойством неделимости.\r\n</p>\r\n<p>\r\nПапка компонента может содержать следующие папки и файлы:\r\n</p>\r\n<ul>\r\n  <li>папка <code>lang</code>, в которой расположены файлы языковых сообщений (переводов) компонента. С версии 11.0 в ней также могут размещаться папка помощи <code>help</code>.</li>\r\n  <li>папка </code>templates</code>, в которой расположены шаблоны вывода (отображения) компонента. Эта подпапка может отсутствовать, если у компонента нет шаблонов вывода.</li>\r\n  <li>файл </code>component.php</code>, который содержит код компонента. Задача этого файла — сформировать из полученных параметров (<code>$arParams</code>) массив <code>$arResult</code>, который впоследствии попадет в шаблон компонента. Этот файл должен всегда присутствовать в папке компонента.</li>\r\n  <li>файл <code>.description.php</code>, который содержит название, описание компонента и его положение в дереве логического размещения (для редактора). Этот файл должен всегда присутствовать в папке компонента. Его отсутствие не скажется на работе компонента, но размещение компонента через визуальный редактор станет невозможным.</li>\r\n  <li>файл <code>.parameters.php</code>, который содержит описание входных параметров компонента для редактора. Если у компонента есть входные параметры, то этот файл должен присутствовать в папке компонента.</li>\r\n  <li>файл <code>class.php</code> для поддержки ООП-компонентов.</li>\r\n  <li>файл <code>script.js</code>, который подключается автоматически.</li>\r\n  <li>любые другие папки и файлы с ресурсами, необходимыми компоненту, например, папка <code>images</code>.</li>\r\n</ul>\r\n<p>\r\nОбщая структура компонента\r\n</p>\r\n[php]\r\n<?php if (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) die(); ?> \r\n\r\n<?php\r\n/*\r\n * Проверка и инициализация входящих параметров компонента\r\n */\r\n\r\nif (/* валидный кэш */) { \r\n    /*\r\n     * Вывод данных из кеша в браузер\r\n     */\r\n} else {\r\n    /*\r\n     * Запрос данных и формирование массива $arResult\r\n     */\r\n\r\n    // подключение шаблона компонента\r\n    $this->IncludeComponentTemplate();\r\n\r\n    /*\r\n     * Сохранение данных в кэше\r\n     */\r\n}\r\n[/php]\r\n\r\n<h2>Массивы $arParams и $arResult</h2>\r\n<p>\r\n<strong>Массив</strong> <code>$arParams</code> — это предопределенная для компонента переменная, представляющая собой массив входных параметров компонента. Ключами в этом массиве являются названия параметров, а значениями — их значения.\r\n</p>\r\n<p>\r\nПеред подключением компонента ко всем значениям параметров применяется функция <code>htmlspecialcharsEx()</code>. Исходные значения параметров сохраняются в этом же массиве с теми же ключами, но с префиксом <code>~</code>. Например, <code>$arParams[\"NAME\"]</code> — входной параметр, к которому применена функция <code>htmlspecialcharsEx()</code>, а <code>$arParams[\"~NAME\"]</code> — исходный входной параметр.\r\n</p>\r\n<p>\r\nПеременная <code>$arParams</code> является псевдонимом для члена класса компонента, поэтому все изменения этой переменной отражаются и на этом члене класса. В начале кода компонента должна быть произведена проверка входных параметров, инициализация не установленных параметров, приведение к нужному типу. Все эти изменения входных параметров будут доступны и в шаблоне. То есть параметры будут там уже проверенными и максимально безопасными. Дублирование подготовки параметров в шаблоне компонента не требуется.\r\n</p>\r\n<p>\r\n<strong>Массив</strong> <code>$arResult</code> — это предопределенная для компонента переменная, в которую собирается результат работы компонента для передачи в шаблон. Перед подключением файла компонента эта переменная инициализируется пустым массивом <code>array()</code>.\r\n</p>\r\n<p>\r\nПеременная <code>$arResult</code> является псевдонимом для члена класса компонента, поэтому все изменения этой переменной отражаются и на этом члене класса. Значит явно передавать в шаблон эту переменную не нужно, это сделают внутренние механизмы класса компонента.\r\n</p>','2018-07-01 13:37:08',1),(153,9,'Работа с файлами и директорями','','','Linux, cp, mv, rm, Директория, Команда, Копировать, Удалить, Файл','Основные команды для работы с файлами и директориями: cp — скопировать файл; mv — переместить файл; rm — удалить файл. Команда mkdir позволяет создать новую директорию, а с помощью команды rmdir можно удалить пустую директорию.','<p>\r\nОсновные команды для работы с файлами и директориями:\r\n</p>\r\n<ul>\r\n  <li><code>cp</code> — скопировать файл;</li>\r\n  <li><code>mv</code> — переместить файл;</li>\r\n  <li><code>rm</code> — удалить файл;</li>\r\n  <li><code>mkdir</code> — создать директорию;</li>\r\n  <li><code>rmdir</code> — удалить директорию;</li>\r\n</ul>\r\n<h2>Команда cp</h2>\r\n<p>\r\nПредназначена для копирования файлов и директорий:\r\n</p>\r\n[code]\r\ncp [grn][опции][/grn] [red]источник(и)[/red] [grn]приемник[/grn]\r\n[/code]\r\n<p>\r\nОпции:\r\n</p>\r\n<ul>\r\n  <li><code>-R</code>, <code>-r</code> — копировать директории рекурсивно (то есть все поддиректории и все файлы в поддиректориях).</li>\r\n  <li><code>-f</code> — разрешает удаление целевого файла, в который производится копирование, если он не может быть открыт для записи.</li>\r\n  <li><code>-i</code> — команда будет запрашивать, следует ли перезаписывать конечный файл, имя которого совпадает с именем исходного.</li>\r\n  <li><code>-n</code> — не перезаписывать существующий файл (отменяет опцию <code>-i</code>).</li>\r\n  <li><code>-v</code> — выводит имя каждого файла перед его копированием.</li>\r\n</ul>\r\n[cli]\r\n$ cp data.txt data-back.txt\r\n[/cli]\r\n<p>\r\nЕсли в директории, куда планируется скопировать файл, уже есть файл с таким именем, то он будет перезаписан. Во избежание таких ситуаций желательно использовать опцию <code>-i</code>. Команда также позводяет рекурсивно скопировать всю директорию с помощью опции <code>-r</code>.\r\n</p>\r\n[cli]\r\n$ cp -r /etc /etc-back # скопровать директорию\r\n[/cli]\r\n\r\n<h2>Команда mv</h2>\r\n<p>\r\nПредназначена для перемещения или переименования файлов и директорий:\r\n</p>\r\n[code]\r\nmv [grn][опции][/grn] [red]источник(и)[/red] [grn]приемник[/grn]\r\n[/code]\r\n<p>\r\nОпции:\r\n</p>\r\n<ul>\r\n  <li><code>–f</code> — не запрашивать подтверждения операций.</li>\r\n  <li><code>–i</code> — выводить запрос на подтверждение операции, когда существует файл, в который происходит переименование или перемещение.</li>\r\n</ul>\r\n<p>\r\nЕсли в качестве аргументов заданы имена двух файлов в одной директории, то файл будет переименован:\r\n</p>\r\n[cli]\r\n$ mv old-name.txt new-name.txt # переименование файла\r\n[/cli]\r\n<p>\r\nЕсли последний аргумент является именем существующего каталога, то происходит перемещение всех заданных файлы в этот каталог:\r\n</p>\r\n[cli]\r\n$ mv first.txt second.txt ./data/ # перемещение файлов в директорию data\r\n[/cli]\r\n\r\n<h2>Команда rm</h2>\r\n<p>\r\nПредназначена для удаления файлов и директорий:\r\n</p>\r\n[code]\r\nrm [grn][опции][/grn] [red]файл(ы)[/red]\r\n[/code]\r\n<p>\r\nОпции:\r\n</p>\r\n<ul>\r\n  <li><code>-r</code> — обязательная опция, если удаляемый файл является каталогом, пусть даже пустым.</li>\r\n  <li><code>-i</code> — выводить запрос на подтверждение каждой операции удаления.</li>\r\n  <li><code>-f</code> — не возвращать код ошибочного завершения, если ошибки были вызваны несуществующими файлами; не запрашивать подтверждения операций.</li>\r\n</ul>\r\n<p>\r\nКоманда <code>rm</code> часто является синонимом команды <code>rm -i</code>, то есть команда по умолчанию запрашивает подтверждение перед удалением файлов, что позволяет предотвратить их случайное удаление. Если пользователю нужно удалить большое количество файлов без подтверждения операции, можно отменить действие опции <code>-i</code> с помощью добавления опции <code>-f</code>.\r\n</p>\r\n[cli]\r\n$ rm /usr/share/file\r\n[/cli]\r\n\r\n<h2>Команды mkdir и rmdir</h2>\r\n<p>\r\nКоманда <code>mkdir</code> позволяет создать новую директорию, а с помощью команды <code>rmdir</code> можно удалить пустую директорию.\r\n</p>\r\n<p>\r\nОпции команды <code>mkdir</code>:\r\n</p>\r\n<ul>\r\n  <li><code>-m, --mode=режим</code> — установить код доступа (как в <code>chmod</code>)</li>\r\n  <li><code>-p, --parents</code> — не выдавать ошибок если существует, создавать родительские каталоги если необходимо</li>\r\n  <li><code>-v, --verbose</code> — печатать сообщение о каждом созданном каталоге</li>\r\n</ul>','2018-06-24 12:11:16',1),(154,17,'Битрикс. Простой компонент «Список новостей»','','','$arResult, CMS, Web-разработка, init.php, Битрикс, Изображение, Компонент, Новости, ШаблонКомпонента','На главной странице сайта, в правой колонке, надо вывести список трех последних записей блога. Для решения это задачи используем простой компонент «Список новостей». Как обычно, чтобы получить код вызова компонента со всеми параметрами, переходим на тестовую страницу и вызываем визуальный редактор.','<p>\r\nНа главной странице сайта, в правой колонке, надо вывести список трех последних записей блога. Для решения это задачи используем простой компонент «Список новостей». Как обычно, чтобы получить код вызова компонента со всеми параметрами, переходим на тестовую страницу и вызываем визуальный редактор. Выбираем в правой колонке компонент <em>«Контент • Новости • Список новостей</em>».\r\n</p>\r\n<p>\r\nВ настройках\r\n</p>\r\n<ul>\r\n  <li>оставляем шаблон по умолчанию <code>.default</code></li>\r\n  <li>выбираем тип информационного блока</li>\r\n  <li>выбираем код информационного блока</li>\r\n  <li>задаем количество новостей на странице</li>\r\n  <li>убираем постраничную навигацию под списком</li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/154/1.jpg\" class=\"zoom\"><img src=\"/files/blog/154/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nКопируем код вызова компонента и выходим без сохранения:\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:news.list\",\r\n    \"\",\r\n    Array(\r\n        // настройки компонента\r\n    )\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nКомментируем в шаблоне <code>local/templates/voguis_index/footer.php</code> HTML-код вывода списка последних постов блога и вставляем на это место вызов компонента:\r\n</p>\r\n[phtml]\r\n<div class=\"blo-top\">\r\n    <div class=\"blog-grids\">\r\n        <div class=\"blog-grid-left\">\r\n            <a href=\"single.html\"><img src=\"<?= DEFAULT_TEMPLATE_PATH ?>/images/1b.jpg\" class=\"img-responsive\" alt=\"\"></a>\r\n        </div>\r\n        <div class=\"blog-grid-right\">\r\n            <h4><a href=\"single.html\">Little Invaders </a></h4>\r\n            <p>pellentesque dui, non felis. Maecenas male </p>\r\n        </div>\r\n        <div class=\"clearfix\"> </div>\r\n    </div>\r\n    <div class=\"blog-grids\">\r\n        <div class=\"blog-grid-left\">\r\n            <a href=\"single.html\"><img src=\"<?= DEFAULT_TEMPLATE_PATH ?>/images/2b.jpg\" class=\"img-responsive\" alt=\"\"></a>\r\n        </div>\r\n        <div class=\"blog-grid-right\">\r\n            <h4><a href=\"single.html\">Little Invaders </a></h4>\r\n            <p>pellentesque dui, non felis. Maecenas male </p>\r\n        </div>\r\n        <div class=\"clearfix\"> </div>\r\n    </div>\r\n    <div class=\"blog-grids\">\r\n        <div class=\"blog-grid-left\">\r\n            <a href=\"\"><img src=\"<?= DEFAULT_TEMPLATE_PATH ?>/images/3b.jpg\" class=\"img-responsive\" alt=\"\"></a>\r\n        </div>\r\n        <div class=\"blog-grid-right\">\r\n            <h4><a href=\"single.html\">Little Invaders </a></h4>\r\n            <p>pellentesque dui, non felis. Maecenas male </p>\r\n        </div>\r\n        <div class=\"clearfix\"> </div>\r\n    </div>\r\n</div>\r\n[/phtml]\r\n<p>\r\nПереходим на главную страницу сайта, включаем режим правки и копируем шаблон компонента:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/154/2.jpg\" class=\"zoom\"><img src=\"/files/blog/154/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЗадаем имя шаблона <code>posts_sidebar</code> и выбираем куда копировать:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/154/3.jpg\" class=\"zoom\"><img src=\"/files/blog/154/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nФайл шаблона <code>local/templates/voguis_index/footer.php</code> был перезаписан, теперь вызов компонента выглядит так:\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:news.list\",\r\n    \"posts_sidebar\",\r\n    Array(\r\n        \"ACTIVE_DATE_FORMAT\" => \"d.m.Y\",    // Формат показа даты\r\n        \"ADD_SECTIONS_CHAIN\" => \"Y\",        // Включать раздел в цепочку навигации\r\n        \"AJAX_MODE\" => \"N\",                 // Включить режим AJAX\r\n        \"AJAX_OPTION_ADDITIONAL\" => \"\",     // Дополнительный идентификатор\r\n        \"AJAX_OPTION_HISTORY\" => \"N\",       // Включить эмуляцию навигации браузера\r\n        \"AJAX_OPTION_JUMP\" => \"N\",          // Включить прокрутку к началу компонента\r\n        \"AJAX_OPTION_STYLE\" => \"Y\",         // Включить подгрузку стилей\r\n        \"CACHE_FILTER\" => \"N\",              // Кешировать при установленном фильтре\r\n        \"CACHE_GROUPS\" => \"Y\",              // Учитывать права доступа\r\n        \"CACHE_TIME\" => \"36000000\",         // Время кеширования (сек.)\r\n        \"CACHE_TYPE\" => \"A\",                // Тип кеширования\r\n        \"CHECK_DATES\" => \"Y\",               // Показывать только активные на данный момент элементы\r\n        \"DETAIL_URL\" => \"\",                 // URL страницы детального просмотра (по умолчанию - из настроек инфоблока)\r\n        \"DISPLAY_BOTTOM_PAGER\" => \"N\",      // Выводить под списком\r\n        \"DISPLAY_DATE\" => \"Y\",              // Выводить дату элемента\r\n        \"DISPLAY_NAME\" => \"Y\",              // Выводить название элемента\r\n        \"DISPLAY_PICTURE\" => \"Y\",           // Выводить изображение для анонса\r\n        \"DISPLAY_PREVIEW_TEXT\" => \"Y\",      // Выводить текст анонса\r\n        \"DISPLAY_TOP_PAGER\" => \"N\",         // Выводить над списком\r\n        \"FIELD_CODE\" => array(              // Поля\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"FILTER_NAME\" => \"\",                // Фильтр\r\n        \"HIDE_LINK_WHEN_NO_DETAIL\" => \"N\",  // Скрывать ссылку, если нет детального описания\r\n        \"IBLOCK_ID\" => \"1\",                 // Код информационного блока\r\n        \"IBLOCK_TYPE\" => \"content\",         // Тип информационного блока (используется только для проверки)\r\n        \"INCLUDE_IBLOCK_INTO_CHAIN\" => \"Y\", // Включать инфоблок в цепочку навигации\r\n        \"INCLUDE_SUBSECTIONS\" => \"Y\",       // Показывать элементы подразделов раздела\r\n        \"MESSAGE_404\" => \"\",                // Сообщение для показа (по умолчанию из компонента)\r\n        \"NEWS_COUNT\" => \"3\",                // Количество новостей на странице\r\n        \"PAGER_BASE_LINK_ENABLE\" => \"N\",    // Включить обработку ссылок\r\n        \"PAGER_DESC_NUMBERING\" => \"N\",      // Использовать обратную навигацию\r\n        \"PAGER_DESC_NUMBERING_CACHE_TIME\" => \"36000\", // Время кеширования страниц для обратной навигации\r\n        \"PAGER_SHOW_ALL\" => \"N\",            // Показывать ссылку \"Все\"\r\n        \"PAGER_SHOW_ALWAYS\" => \"N\",         // Выводить всегда\r\n        \"PAGER_TEMPLATE\" => \".default\",     // Шаблон постраничной навигации\r\n        \"PAGER_TITLE\" => \"Новости\",         // Название категорий\r\n        \"PARENT_SECTION\" => \"\",             // ID раздела\r\n        \"PARENT_SECTION_CODE\" => \"\",        // Код раздела\r\n        \"PREVIEW_TRUNCATE_LEN\" => \"\",       // Максимальная длина анонса для вывода (только для типа текст)\r\n        \"PROPERTY_CODE\" => array(           // Свойства\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"SET_BROWSER_TITLE\" => \"Y\",         // Устанавливать заголовок окна браузера\r\n        \"SET_LAST_MODIFIED\" => \"N\",         // Устанавливать в заголовках ответа время модификации страницы\r\n        \"SET_META_DESCRIPTION\" => \"Y\",      // Устанавливать описание страницы\r\n        \"SET_META_KEYWORDS\" => \"Y\",         // Устанавливать ключевые слова страницы\r\n        \"SET_STATUS_404\" => \"N\",            // Устанавливать статус 404\r\n        \"SET_TITLE\" => \"Y\",                 // Устанавливать заголовок страницы\r\n        \"SHOW_404\" => \"N\",                  // Показ специальной страницы\r\n        \"SORT_BY1\" => \"ACTIVE_FROM\",        // Поле для первой сортировки новостей\r\n        \"SORT_BY2\" => \"SORT\",               // Поле для второй сортировки новостей\r\n        \"SORT_ORDER1\" => \"DESC\",            // Направление для первой сортировки новостей\r\n        \"SORT_ORDER2\" => \"ASC\",             // Направление для второй сортировки новостей\r\n        \"STRICT_SECTION_CHECK\" => \"N\",      // Строгая проверка раздела для показа списка\r\n    ),\r\n    false\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nСкопированный шаблон у нас теперь в директории <code>local/templates/voguis_index/components/bitrix/news.list/posts_sidebar</code>. Удаляем файл стилей <code>style.css</code> и открываем шаблон <code>template.php</code> на редактирование. Убираем весь мусор от разработчиков Битрикс и пишем свой код:\r\n</p>\r\n[phtml]\r\n<?php\r\nif(!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) die();\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<?php foreach ($arResult[\'ITEMS\'] as $arItem): ?>\r\n    <div class=\"blog-grids\">\r\n        <div class=\"blog-grid-left\">\r\n            <a href=\"<?= $arItem[\'DETAIL_PAGE_URL\']; ?>\">\r\n                <img src=\"<?= $arItem[\'PREVIEW_PICTURE\'][\'SRC\']; ?>\" class=\"img-responsive\" alt=\"<?= $arItem[\'PREVIEW_PICTURE\'][\'ALT\']; ?>\" />\r\n            </a>\r\n        </div>\r\n        <div class=\"blog-grid-right\">\r\n            <h4><a href=\"<?= $arItem[\'DETAIL_PAGE_URL\']; ?>\"><?= $arItem[\'NAME\']; ?></a></h4>\r\n            <?php $preview = iconv_strlen($arItem[\'PREVIEW_TEXT\']) > 50 ? iconv_substr($arItem[\'PREVIEW_TEXT\'], 0, iconv_strpos($arItem[\'PREVIEW_TEXT\'], \' \', 50)).\'…\' : $arItem[\'PREVIEW_TEXT\']; ?>\r\n            <p><?= $preview; ?></p>\r\n        </div>\r\n        <div class=\"clearfix\"></div>\r\n    </div>\r\n<?php endforeach; ?>\r\n\r\n[/phtml]\r\n<p>\r\nДля удобства можно распечатать массив <code>$arResult</code> с помощью функции <code>debug()</code>, которую можно добавить в файл <code>init.php</code>:\r\n</p>\r\n[php]\r\nfunction debug($data) {\r\n    echo \'<pre>\' . print_r($data, true) . \'</pre>\';\r\n}\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [ID] => 1\r\n    [~ID] => 1\r\n    [TIMESTAMP_X] => 25.06.2018 11:26:10\r\n    [~TIMESTAMP_X] => 25.06.2018 11:26:10\r\n    [IBLOCK_TYPE_ID] => content\r\n    [~IBLOCK_TYPE_ID] => content\r\n    [LID] => s1\r\n    [~LID] => s1\r\n    [CODE] => blog\r\n    [~CODE] => blog\r\n    [NAME] => Блог\r\n    [~NAME] => Блог\r\n    [ACTIVE] => Y\r\n    [~ACTIVE] => Y\r\n    [SORT] => 500\r\n    [~SORT] => 500\r\n    [LIST_PAGE_URL] => \r\n    [~LIST_PAGE_URL] =>\r\n    [DETAIL_PAGE_URL] => /#IBLOCK_CODE#/category/#SECTION_CODE_PATH#/post/#ELEMENT_CODE#/\r\n    [~DETAIL_PAGE_URL] => /#IBLOCK_CODE#/category/#SECTION_CODE_PATH#/post/#ELEMENT_CODE#/\r\n    [SECTION_PAGE_URL] => /#IBLOCK_CODE#/category/#SECTION_CODE_PATH#/\r\n    [~SECTION_PAGE_URL] => /#IBLOCK_CODE#/category/#SECTION_CODE_PATH#/\r\n    [CANONICAL_PAGE_URL] => \r\n    [~CANONICAL_PAGE_URL] => \r\n    [PICTURE] => \r\n    [~PICTURE] => \r\n    [DESCRIPTION] => \r\n    [~DESCRIPTION] => \r\n    [DESCRIPTION_TYPE] => text\r\n    [~DESCRIPTION_TYPE] => text\r\n    [RSS_TTL] => 24\r\n    [~RSS_TTL] => 24\r\n    [RSS_ACTIVE] => Y\r\n    [~RSS_ACTIVE] => Y\r\n    [RSS_FILE_ACTIVE] => N\r\n    [~RSS_FILE_ACTIVE] => N\r\n    [RSS_FILE_LIMIT] => \r\n    [~RSS_FILE_LIMIT] => \r\n    [RSS_FILE_DAYS] => \r\n    [~RSS_FILE_DAYS] => \r\n    [RSS_YANDEX_ACTIVE] => N\r\n    [~RSS_YANDEX_ACTIVE] => N\r\n    [XML_ID] => \r\n    [~XML_ID] => \r\n    [TMP_ID] => 24b419b95508c0efa9de16e20eb4beb5\r\n    [~TMP_ID] => 24b419b95508c0efa9de16e20eb4beb5\r\n    [INDEX_ELEMENT] => Y\r\n    [~INDEX_ELEMENT] => Y\r\n    [INDEX_SECTION] => Y\r\n    [~INDEX_SECTION] => Y\r\n    [WORKFLOW] => N\r\n    [~WORKFLOW] => N\r\n    [BIZPROC] => N\r\n    [~BIZPROC] => N\r\n    [SECTION_CHOOSER] => L\r\n    [~SECTION_CHOOSER] => L\r\n    [LIST_MODE] => \r\n    [~LIST_MODE] => \r\n    [RIGHTS_MODE] => S\r\n    [~RIGHTS_MODE] => S\r\n    [SECTION_PROPERTY] => \r\n    [~SECTION_PROPERTY] => \r\n    [PROPERTY_INDEX] => \r\n    [~PROPERTY_INDEX] => \r\n    [VERSION] => 1\r\n    [~VERSION] => 1\r\n    [LAST_CONV_ELEMENT] => 0\r\n    [~LAST_CONV_ELEMENT] => 0\r\n    [SOCNET_GROUP_ID] => \r\n    [~SOCNET_GROUP_ID] => \r\n    [EDIT_FILE_BEFORE] => \r\n    [~EDIT_FILE_BEFORE] => \r\n    [EDIT_FILE_AFTER] => \r\n    [~EDIT_FILE_AFTER] => \r\n    [SECTIONS_NAME] => Категории\r\n    [~SECTIONS_NAME] => Категории\r\n    [SECTION_NAME] => Категория\r\n    [~SECTION_NAME] => Категория\r\n    [ELEMENTS_NAME] => Статьи\r\n    [~ELEMENTS_NAME] => Статьи\r\n    [ELEMENT_NAME] => Статья\r\n    [~ELEMENT_NAME] => Статья\r\n    [EXTERNAL_ID] => \r\n    [~EXTERNAL_ID] => \r\n    [LANG_DIR] => /\r\n    [~LANG_DIR] => /\r\n    [SERVER_NAME] => \r\n    [~SERVER_NAME] => \r\n    [USER_HAVE_ACCESS] => 1\r\n    [SECTION] => \r\n    [ITEMS] => Array (\r\n        [0] => Array (\r\n            [ID] => 8\r\n            [~ID] => 8\r\n            [IBLOCK_ID] => 1\r\n            [~IBLOCK_ID] => 1\r\n            [IBLOCK_SECTION_ID] => 4\r\n            [~IBLOCK_SECTION_ID] => 4\r\n            [NAME] => Восьмая статья блога\r\n            [~NAME] => Восьмая статья блога\r\n            [ACTIVE_FROM] => 25.06.2018\r\n            [~ACTIVE_FROM] => 25.06.2018\r\n            [TIMESTAMP_X] => 25.06.2018 12:08:00\r\n            [~TIMESTAMP_X] => 25.06.2018 12:08:00\r\n            [DETAIL_PAGE_URL] => category/tretya-kategoriya/dochernyaya-kategoriya/post/vosmaya-statya-bloga/\r\n            [~DETAIL_PAGE_URL] => category/tretya-kategoriya/dochernyaya-kategoriya/post/vosmaya-statya-bloga/\r\n            [LIST_PAGE_URL] => \r\n            [~LIST_PAGE_URL] => \r\n            [DETAIL_TEXT] => ..........\r\n            [~DETAIL_TEXT] => ..........\r\n            [DETAIL_TEXT_TYPE] => html\r\n            [~DETAIL_TEXT_TYPE] => html\r\n            [PREVIEW_TEXT] => ..........\r\n            [~PREVIEW_TEXT] => ..........\r\n            [PREVIEW_TEXT_TYPE] => text\r\n            [~PREVIEW_TEXT_TYPE] => text\r\n            [PREVIEW_PICTURE] => Array (\r\n                [ID] => 17\r\n                [TIMESTAMP_X] => 25.06.2018 12:08:00\r\n                [MODULE_ID] => iblock\r\n                [HEIGHT] => 354\r\n                [WIDTH] => 830\r\n                [FILE_SIZE] => 59190\r\n                [CONTENT_TYPE] => image/jpeg\r\n                [SUBDIR] => iblock/73c\r\n                [FILE_NAME] => 73cfee09bfe27e6a6124541bd1d6f20c.jpg\r\n                [ORIGINAL_NAME] => 11.jpg\r\n                [DESCRIPTION] => \r\n                [HANDLER_ID] => \r\n                [EXTERNAL_ID] => d92457cbe985fae03e83d7619b8a9aee\r\n                [~src] => \r\n                [SRC] => /upload/iblock/73c/73cfee09bfe27e6a6124541bd1d6f20c.jpg\r\n                [UNSAFE_SRC] => /upload/iblock/73c/73cfee09bfe27e6a6124541bd1d6f20c.jpg\r\n                [SAFE_SRC] => /upload/iblock/73c/73cfee09bfe27e6a6124541bd1d6f20c.jpg\r\n                [ALT] => Восьмая статья блога\r\n                [TITLE] => Восьмая статья блога\r\n            )\r\n            [~PREVIEW_PICTURE] => 17\r\n            [LANG_DIR] => /\r\n            [~LANG_DIR] => /\r\n            [SORT] => 500\r\n            [~SORT] => 500\r\n            [CODE] => vosmaya-statya-bloga\r\n            [~CODE] => vosmaya-statya-bloga\r\n            [EXTERNAL_ID] => 8\r\n            [~EXTERNAL_ID] => 8\r\n            [IBLOCK_TYPE_ID] => content\r\n            [~IBLOCK_TYPE_ID] => content\r\n            [IBLOCK_CODE] => blog\r\n            [~IBLOCK_CODE] => blog\r\n            [IBLOCK_EXTERNAL_ID] => \r\n            [~IBLOCK_EXTERNAL_ID] => \r\n            [LID] => s1\r\n            [~LID] => s1\r\n            [EDIT_LINK] => /bitrix/admin/iblock_element_edit.php?IBLOCK_ID=1&type=content&ID=8&lang=ru\r\n            [DELETE_LINK] => /bitrix/admin/iblock_list_admin.php?IBLOCK_ID=1&type=content&lang=ru\r\n            [DISPLAY_ACTIVE_FROM] => 25.06.2018\r\n            [IPROPERTY_VALUES] => Array (\r\n                [SECTION_META_TITLE] => Блог веб-разработчика\r\n                [SECTION_META_KEYWORDS] => HTML CSS JavaScript PHP MySQL Apache\r\n            )\r\n            [FIELDS] => Array()\r\n            [DISPLAY_PROPERTIES] => Array()\r\n        )\r\n    [1] => Array(\r\n        ..........\r\n    )\r\n    ..........\r\n)\r\n[/code]\r\n<p>\r\nЧтобы у контент-менеджера была возможность редактировать и удалять статьи блога не через панель управления, а прямо с морды сайта, в шаблон надо добавить php-код (его можно взять из шаблона компонента, который мы удалили):\r\n</p>\r\n[phtml]\r\n<?php\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) die();\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<?php foreach ($arResult[\'ITEMS\'] as $arItem): ?>\r\n    <?php /* код, который позволяет редактировать и удалять статьи */\r\n    $this->AddEditAction(\r\n        $arItem[\'ID\'],\r\n        $arItem[\'EDIT_LINK\'],\r\n        CIBlock::GetArrayByID($arItem[\"IBLOCK_ID\"], \"ELEMENT_EDIT\")\r\n    );\r\n    $this->AddDeleteAction(\r\n        $arItem[\'ID\'],\r\n        $arItem[\'DELETE_LINK\'],\r\n        CIBlock::GetArrayByID($arItem[\"IBLOCK_ID\"], \"ELEMENT_DELETE\"),\r\n        array(\r\n            \"CONFIRM\" => GetMessage(\'CT_BNL_ELEMENT_DELETE_CONFIRM\')\r\n        )\r\n    );\r\n    ?>\r\n    <div class=\"blog-grids\" id=\"<?= $this->GetEditAreaId($arItem[\'ID\']); /* идентификатор статьи */ ?>\">\r\n        <!-- здесь код без изменений -->\r\n    </div>\r\n<?php endforeach; ?>\r\n[/phtml]\r\n<p>\r\n<a href=\"/files/blog/154/4.jpg\" class=\"zoom\"><img src=\"/files/blog/154/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПосты в правой колонке выводятся с квадратной превьюшкой, а у нас она прямоугольная. Так что для каждого поста надо создать квадратную превьюшку. Для этого создаем файл <code>result_modifier.php</code>, создаем в нем превьюшки 100x100px с помощью метода <code>CFile::ResizeImageGet()</code> и записываем путь к файлам превьюшек в массив <code>$arResult</code>:\r\n</p>\r\n<div class=\"note\">\r\n[php]\r\narray CFile::ResizeImageGet( \r\n    mixed file, \r\n    array arSize, \r\n    const resizeType = BX_RESIZE_IMAGE_PROPORTIONAL, \r\n    bool bInitSizes = false,\r\n    array arFilters = false,\r\n    bool bImmediate = false,\r\n    bool jpgQuality = false\r\n);\r\n[/php]\r\n<p>\r\nМетод возвращает массив вида:\r\n</p>\r\n[php]\r\narray(\r\n    \'src\',    // путь к уменьшенной картинке относительно корня сайта\r\n    \'width\',  // если bInitSizes = true ширина уменьшенной картинки, иначе 0\r\n    \'height\', // если bInitSizes = true высота уменьшенной картинки, иначе 0\r\n)\r\n[/php]\r\n<p>\r\nМетод уменьшает картинку и размещает уменьшенную копию в папку <code>/upload/resize_cache/путь</code>. Один раз уменьшив изображение получаем физический файл, который позволяет при последующих обращениях не проводить операции по уменьшению изображения. При следующем вызове метод вернет путь к уменьшенному файлу. Статический метод.\r\n</p>\r\n</div>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/voguis_index/components/bitrix/news.list/posts_sidebar/result_modifier.php\r\n */\r\n\r\nforeach ($arResult[\'ITEMS\'] as &$arItem) {\r\n    $thumb = CFile::ResizeImageGet(\r\n        $arItem[\'PREVIEW_PICTURE\'],\r\n        array(\'width\' => 100, \'height\' => 100),\r\n        BX_RESIZE_IMAGE_EXACT\r\n    );\r\n    $arItem[\'PREVIEW_PICTURE\'][\'SRC\'] = $thumb[\'src\'];\r\n}\r\nunset($arItem);\r\n[/php]','2018-07-03 15:40:44',1),(17,5,'AJAX. Основы передачи данных','','','AJAX, POST, Web-разработка, jQuery, Форма','В jQuery есть несколько методов, которые осуществляют запросы к серверной части сайта без перезагрузки страницы. Мы не будем рассматривать каждый метод отдельно, по той простой причине, что все они являются сокращенными функция метода $.ajax().','<p>\r\nВ jQuery есть несколько методов, которые осуществляют запросы к серверной части сайта без перезагрузки страницы. Мы не будем рассматривать каждый метод отдельно, по той простой причине, что все они являются сокращенными функция метода <code>$.ajax()</code>. Для начала, давайте помотрим на код ниже, а дальше разберем его подробней:\r\n</p>\r\n[html]\r\n<!doctype html>\r\n<html>\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <title>AJAX</title>\r\n    <script src=\"jquery-2.1.1.min.js\"></script> <!-- библиотека jQuery -->\r\n    <script src=\"script.js\" charset=\"UTF-8\"></script> <!-- наш javascript-код -->\r\n</head>\r\n<body>\r\n    <button id=\"button\">Отправить запрос</button> <!-- кнопка для запуска AJAX-запроса -->\r\n    <div id=\"output\"></div> <!-- блок для вывода результатов -->\r\n</body>\r\n</html>\r\n[/html]\r\n[js]\r\n$(document).ready(function() {\r\n    var output = $(\'#output\');         // блок вывода информации\r\n    $(\'#button\').on(\'click\', function() {\r\n        $.ajax({\r\n            url: \'handler.php\',        // путь к php-обработчику\r\n            type: \'POST\',              // метод передачи данных\r\n            dataType: \'json\',          // тип ожидаемых данных в ответе\r\n            data: {key: 5},            // данные, которые передаем на сервер\r\n            beforeSend: function() {   // функция вызывается перед отправкой запроса\r\n                output.text(\'Запрос отправлен. Ждите ответа.\');\r\n            },\r\n            error: function(req, text, error) { // отслеживание ошибок во время выполнения ajax-запроса\r\n                output.text(\'Произошла ошибка! \' + text + \', \' + error);\r\n            },\r\n            complete: function() {      // функция вызывается по окончании запроса\r\n                output.append(\'<p>Запрос полностью завершен!</p>\');\r\n            },\r\n            success: function(json) {  // функция, которая будет вызвана при удачном завершении запроса\r\n                // json — переменная, содержащая данные ответа от сервера\r\n                output.html(json);     // выводим на страницу данные, полученные с сервера\r\n            }\r\n        });\r\n    });\r\n});\r\n[/js]\r\n[php]\r\n<?php\r\nif (isset($_POST[\'key\'])){\r\n    $response = false;\r\n    $key = (int)$_POST[\'key\']; // защита — приводим к целому\r\n    if ($key > 0) {\r\n        $response = \'<p>Получили значение \' . $key . \'</p>\';\r\n    }\r\n    die(json_encode($response)); // возвращаем данные в JSON-формате\r\n}\r\n[/php]\r\n<p>\r\nЧто будет происходить на каждом этапе:\r\n</p>\r\n<ol>\r\n  <li>При нажатии на кнопку, начинает работать javascript-код\r\n  <li>Перед отправкой, сработает функция <code>beforeSend</code>. Она выведет в блок <code>id=\"output\"</code> сообщение о начале запроса\r\n  <li>Если что-то пойдет не так (например, путь к обработчику указан не верно), то сработает функция <code>error</code> и в блок выведется ошибка\r\n  <li>Если всё нормально, то запустится функция <code>success</code> и в блоке появится результат нашего запроса\r\n  <li>На последнем этапе — выполнится функция <code>complete</code>, которая добавит в блок вывода сообщения об окончании AJAX-запроса\r\n</ol>\r\n<p>\r\nФункции <code>beforeSend</code> и <code>complete</code> можно использовать, например, для вывода какой-нибудь картинки-прелоадера, чтоб дать понять пользователю, что процесс идет.\r\n</p>\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"https://jquery-docs.ru/\">jQuery. Русская документация</a></li>\r\n</ul>','2014-07-03 14:33:39',1),(156,9,'Команда umask','','','Linux, umask, Директория, Команда, ПраваДоступа, Файл','При создании файла или директории, среда операционной системы присваивает им определенные права доступа по умолчанию, и umask — это пользовательская маска (user mask), которая используется для назначения прав доступа новым файлам и директориям.','<p>\r\nПри создании файла или директории, среда операционной системы присваивает им определенные права доступа по умолчанию, и <code>umask</code> — это пользовательская маска (<code>user mask</code>), которая используется для назначения прав доступа новым файлам и директориям.\r\n</p>\r\n<p>\r\nУзнать текущее значение <code>umask</code> можно с помощью одноименной команды:\r\n</p>\r\n[cli]\r\n$ umask\r\n0002\r\n[/cli]\r\n<p>\r\nЗначение <code>umask</code> для всех пользователей по умолчанию устанавливается в файлах <code>/etc/.bashrc</code> или <code>/etc/.profile</code>. Если в этих файлах добавить или изменить строку с <code>umask</code>:\r\n</p>\r\n[cli]\r\n$ umask 0027\r\n[/cli]\r\n<p>\r\nТо при следующем входе в систему получим новое значение <code>umask</code>. Если выполнить эту команду в текущем сеансе, то тем самым изменим значение маски на время работы текущего сеанса.\r\n</p>\r\n\r\n<h2>Что такое umask 0002 и 0022?</h2>\r\n<p>\r\nРежим полного доступа для для директории равен <code>0777</code> (<code>rwxrwxrwx</code>), а для файла — <code>0666</code> (<code>rw-rw-rw-</code>).\r\n</p>\r\n<ul>\r\n  <li>По умолчанию для обычного пользователя используется маска <code>0002</code>. Права для новой директории — <code>0775</code>, для нового файла — <code>0664</code>.</li>\r\n  <li>По умолчанию для суперпользователя (<code>root</code>) используется маска <code>0022</code>. Права для новой директории — <code>0755</code>, для нового файла — <code>0644</code>.</li>\r\n</ul>\r\n<p>\r\nКак определить права директории для маски <code>0002</code> (обычный пользователь):\r\n</p>\r\n<ul>\r\n  <li>Полный доступ: <code>0777</code></li>\r\n  <li>Вычитаем маску: <code>0002</code></li>\r\n  <li>Итоговые права: <code>0755</code></li>\r\n</ul>\r\n[code]\r\n0777\r\n0002\r\n----\r\n0775\r\n[/code]\r\n<p>\r\nКак определить права файла для маски <code>0002</code> (обычный пользователь):\r\n</p>\r\n<ul>\r\n  <li>Полный доступ: <code>0666</code></li>\r\n  <li>Вычитаем маску: <code>0002</code></li>\r\n  <li>Итоговые права: <code>0664</code></li>\r\n</ul>\r\n[code]\r\n0666\r\n0002\r\n----\r\n0664\r\n[/code]\r\n<p>\r\nКак определить права директории для маски <code>0022</code> (пользователь <code>root</code>):\r\n</p>\r\n<ul>\r\n  <li>Полный доступ: <code>0777</code></li>\r\n  <li>Вычитаем маску: <code>0022</code></li>\r\n  <li>Итоговые права: <code>0755</code></li>\r\n</ul>\r\n[code]\r\n0777\r\n0022\r\n----\r\n0755\r\n[/code]\r\n<p>\r\nКак определить права файла для маски <code>0022</code> (пользователь <code>root</code>):\r\n</p>\r\n<ul>\r\n  <li>Полный доступ: <code>0666</code></li>\r\n  <li>Вычитаем маску: <code>0022</code></li>\r\n  <li>Итоговые права: <code>0644</code></li>\r\n</ul>\r\n[code]\r\n0666\r\n0022\r\n----\r\n0644\r\n[/code]','2018-06-28 11:29:04',1),(157,9,'Команда chown','','','Linux, chown, Владелец, Директория, ПраваДоступа, Файл','Команда изменяет владельца и/или группу файла или директории. Если задано только имя пользователя (или числовой идентификатор пользователя), то данный пользователь становится владельцем каждого из указанных файлов, а группа этих файлов не изменяется.','<p>\r\nКоманда изменяет владельца и/или группу файла или директории.\r\n</p>\r\n[code]\r\nchown [grn][опции][/grn] [red]владелец[:группа][/red] файл(ы)\r\n[/code]\r\n[code]\r\nchown [grn][опции][/grn] [red]:группа[/red] файл(ы)\r\n[/code]\r\n<p>\r\nОпции:\r\n</p>\r\n<ul>\r\n  <li><code>-c</code> — Подробно описывать действие для каждого файла, владелец которого действительно изменяется.</li>\r\n  <li><code>-f</code> — Не выдавать сообщения об ошибках для файлов, чей владелец не может быть изменён.</li>\r\n  <li><code>-h</code> — Работать с самими символьными ссылками, а не с файлами, на которые они указывают.</li>\r\n  <li><code>-R</code> — Рекурсивное изменение владельца каталогов и их содержимого.</li>\r\n  <li><code>-v</code> — Подробное описание действия (или отсутствия действия) для каждого файла.</li>\r\n  <li><code>--dereference</code> — Изменить владельца файла, на который указывает символьная ссылка, вместо самой символьной ссылки.</li>\r\n</ul>\r\n<p>\r\nЕсли задано только имя пользователя (или числовой идентификатор пользователя), то данный пользователь становится владельцем каждого из указанных файлов, а группа этих файлов не изменяется. Если за именем пользователя через двоеточие следует имя группы (или числовой идентификатор группы), без пробелов между ними, то изменяется также и группа файла.\r\n</p>\r\n<p>\r\nПринадлежность файла может быть изменена только суперпользователем, по соображениям безопасности.\r\n</p>\r\n<p>\r\nКоманда <code>chown</code> возвращает 0 при удачном завершении, и код ошибки — случае возникновения ошибки.\r\n</p>\r\n[cli]\r\n$ chown root /var/run/httpd.pid  # поменять владельца на root\r\n[/cli]\r\n[cli]\r\n$ chown rob:developers strace.log  # поменять владельца и группу\r\n[/cli]\r\n[cli]\r\n$ chown nobody:nogroup /tmp /var/tmp  # поменять владельца и группу для двух директорий\r\n[/cli]\r\n[cli]\r\n$ chown :512 /home  # поменять идентификатор группы для директории /home на 512\r\n[/cli]\r\n[cli]\r\n$ chown -R us base  # поменять владельца для директрии base и всех вложенных файлов\r\n[/cli]','2018-07-02 17:14:22',1),(158,17,'Битрикс. Простой компонент «Структура разделов»','','','$arResult, CMS, IncludeComponent, Web-разработка, catalog.section.list, Битрикс, Инфоблок, Компонент, Меню, Навигация, ПростойКомпонент, РазделИнфоблока, Структура, СтруктураРазделов','На главной странице сайта, в правой колонке, надо вывести список категорий блога. Для решения это задачи используем простой компонент «Структура разделов», который предназначен для вывода списка разделов инфоблока. Чтобы получить код вызова компонента со всеми параметрами, переходим на тестовую страницу и вызываем визуальный редактор.','<p>\r\nНа главной странице сайта, в правой колонке, надо вывести список категорий блога. Для решения это задачи используем простой компонент «Структура разделов», который предназначен для вывода списка разделов инфоблока. Как обычно, чтобы получить код вызова компонента со всеми параметрами, переходим на тестовую страницу и вызываем визуальный редактор. Выбираем в правой колонке компонент «<em>Контент • Каталог • Структура разделов</em>».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/158/1.jpg\" class=\"zoom\"><img src=\"/files/blog/158/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВ настройках\r\n</p>\r\n</p>\r\n  <li>оставляем шаблон по умолчанию <code>.default</code></li>\r\n  <li>выбираем тип информационного блока</li>\r\n  <li>выбираем код информационного блока</li>\r\n  <li>задаем максимальную глубину разделов</li>\r\n  <li>не включать раздел в цепочку навигации</li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/158/2.jpg\" class=\"zoom\"><img src=\"/files/blog/158/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nКопируем код вызова компонента и выходим без сохранения:\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:catalog.section.list\",\r\n    \"\",\r\n    Array(\r\n        \"ADD_SECTIONS_CHAIN\" => \"N\",\r\n        \"CACHE_GROUPS\" => \"Y\",\r\n        \"CACHE_TIME\" => \"36000000\",\r\n        \"CACHE_TYPE\" => \"A\",\r\n        \"COUNT_ELEMENTS\" => \"Y\",\r\n        \"IBLOCK_ID\" => \"1\",\r\n        \"IBLOCK_TYPE\" => \"content\",\r\n        \"SECTION_CODE\" => \"\",\r\n        \"SECTION_FIELDS\" => array(\"\", \"\"),\r\n        \"SECTION_ID\" => $_REQUEST[\"SECTION_ID\"],\r\n        \"SECTION_URL\" => \"\",\r\n        \"SECTION_USER_FIELDS\" => array(\"\", \"\"),\r\n        \"SHOW_PARENT_NAME\" => \"Y\",\r\n        \"TOP_DEPTH\" => \"2\",\r\n        \"VIEW_MODE\" => \"LINE\"\r\n    )\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nКомментируем в шаблоне <code>local/templates/voguis_index/footer.php</code> HTML-код вывода списка последних постов блога и вставляем на это место вызов компонента:\r\n</p>\r\n[html]\r\n<h3>Категории блога</h3>\r\n<ul class=\"blo-top\">\r\n    <li><a href=\"#\">|| Lorem Ipsum passage</a></li>\r\n    <li><a href=\"#\">|| Finibus Bonorum et</a></li>\r\n    <li><a href=\"#\">|| Treatise on the theory</a></li>\r\n    <li><a href=\"#\">|| Characteristic words</a></li>\r\n    <li><a href=\"#\">|| combined with a handful</a></li>\r\n    <li><a href=\"#\">|| which looks reasonable</a></li>\r\n</ul>\r\n[/html]\r\n<p>\r\n<a href=\"/files/blog/158/3.jpg\" class=\"zoom\"><img src=\"/files/blog/158/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПереходим на главную страницу сайта, включаем режим правки и копируем шаблон компонента:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/158/4.jpg\" class=\"zoom\"><img src=\"/files/blog/158/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<p>\r\nЗадаем имя шаблона <code>blog_ctgs</code> и выбираем куда копировать:\r\n<p>\r\n<p>\r\n<a href=\"/files/blog/158/5.jpg\" class=\"zoom\"><img src=\"/files/blog/158/5.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nФайл шаблона <code>local/templates/voguis_index/footer.php</code> был перезаписан, теперь вызов компонента выглядит так:\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:catalog.section.list\",\r\n    \"blog_ctgs\",\r\n    Array(\r\n        \"ADD_SECTIONS_CHAIN\" => \"N\",     // Включать раздел в цепочку навигации\r\n        \"CACHE_GROUPS\" => \"Y\",           // Учитывать права доступа\r\n        \"CACHE_TIME\" => \"36000000\",      // Время кеширования (сек.)\r\n        \"CACHE_TYPE\" => \"A\",             // Тип кеширования\r\n        \"COUNT_ELEMENTS\" => \"Y\",         // Показывать количество элементов в разделе\r\n        \"IBLOCK_ID\" => \"1\",              // Инфоблок\r\n        \"IBLOCK_TYPE\" => \"content\",      // Тип инфоблока\r\n        \"SECTION_CODE\" => \"\",            // Код раздела\r\n        \"SECTION_FIELDS\" => array(       // Поля разделов\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"SECTION_ID\" => $_REQUEST[\"SECTION_ID\"], // ID раздела\r\n        \"SECTION_URL\" => \"\",             // URL, ведущий на страницу с содержимым раздела\r\n        \"SECTION_USER_FIELDS\" => array(  // Свойства разделов\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"SHOW_PARENT_NAME\" => \"Y\",       // Показывать название раздела\r\n        \"TOP_DEPTH\" => \"2\",              // Максимальная отображаемая глубина разделов\r\n        \"VIEW_MODE\" => \"LINE\",           // Вид списка подразделов\r\n    ),\r\n    false\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nСкопированный шаблон у нас теперь в директории <code>local/templates/voguis_index/components/bitrix/catalog.section.list/blog_ctgs</code>. Удаляем файл стилей <code>style.css</code> и открываем шаблон <code>template.php</code> на редактирование.\r\n</p>\r\n<p>\r\nПеред тем, как удалить из файла шаблона весь мусор, который напихали в него разработчики Битрикс, сохраним несколько полезных фрагментов:\r\n</p>\r\n[phtml]\r\n<?php\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n$this->setFrameMode(true);\r\n// Вид списка подразделов из настроек компонента\r\n$arViewModeList = $arResult[\'VIEW_MODE_LIST\'];\r\n\r\n// Все доступные варианты вывода списка\r\n$arViewStyles = array(\r\n    \'LIST\' => array(\r\n        // ..........\r\n    ),\r\n    \'LINE\' => array(\r\n        // ..........\r\n    ),\r\n    \'TEXT\' => array(\r\n        // ..........\r\n    ),\r\n    \'TILE\' => array(\r\n        // ..........\r\n    )\r\n);\r\n\r\n// Как будем выводить список: LIST, LINE, TEXT, TILE\r\n$arCurView = $arViewStyles[$arParams[\'VIEW_MODE\']];\r\n\r\n// Редактировать или удалить раздел с морды сайта\r\n$strSectionEdit = CIBlock::GetArrayByID($arParams[\"IBLOCK_ID\"], \"SECTION_EDIT\");\r\n$strSectionDelete = CIBlock::GetArrayByID($arParams[\"IBLOCK_ID\"], \"SECTION_DELETE\");\r\n$arSectionDeleteParams = array(\"CONFIRM\" => GetMessage(\'CT_BCSL_ELEMENT_DELETE_CONFIRM\'));\r\n\r\n// Код ниже отвечает за вывод списка\r\n?><ul class=\"<?php echo $arCurView[\'LIST\']; ?>\">\r\n<?php\r\n    switch ($arParams[\'VIEW_MODE\'])\r\n    {\r\n        case \'LINE\':\r\n            foreach ($arResult[\'SECTIONS\'] as &$arSection)\r\n            {\r\n                $this->AddEditAction($arSection[\'ID\'], $arSection[\'EDIT_LINK\'], $strSectionEdit);\r\n                $this->AddDeleteAction($arSection[\'ID\'], $arSection[\'DELETE_LINK\'], $strSectionDelete, $arSectionDeleteParams);\r\n                ?><li id=\"<?php echo $this->GetEditAreaId($arSection[\'ID\']); ?>\">\r\n                <a href=\"<?php echo $arSection[\'SECTION_PAGE_URL\']; ?>\" title=\"<?php echo $arSection[\'PICTURE\'][\'TITLE\']; ?>\"></a>\r\n                    <h2><a href=\"<?php echo $arSection[\'SECTION_PAGE_URL\']; ?>\"><?php echo $arSection[\'NAME\']; ?></a><?\r\n                if ($arParams[\"COUNT_ELEMENTS\"]) {\r\n                    ?> <span>(<? echo $arSection[\'ELEMENT_CNT\']; ?>)</span><?\r\n                }\r\n                ?></h2>\r\n                </li><?php\r\n            }\r\n            unset($arSection);\r\n            break;\r\n        case \'TEXT\':\r\n            foreach ($arResult[\'SECTIONS\'] as &$arSection) { /* ... */ }\r\n            unset($arSection);\r\n            break;\r\n        case \'TILE\':\r\n            foreach ($arResult[\'SECTIONS\'] as &$arSection) { /* ... */ }\r\n            unset($arSection);\r\n            break;\r\n        case \'LIST\':\r\n            foreach ($arResult[\'SECTIONS\'] as &$arSection) { /* ... */ }\r\n            unset($arSection);\r\n            break;\r\n    }\r\n?>\r\n</ul>\r\n[/phtml]\r\n<p>\r\nИ пишем свой код\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/voguis_index/components/bitrix/catalog.section.list/blog_ctgs/template.php\r\n */\r\n\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n$this->setFrameMode(true);\r\n\r\n// Редактировать или удалить раздел с морды сайта\r\n$strSectionEdit = CIBlock::GetArrayByID($arParams[\'IBLOCK_ID\'], \'SECTION_EDIT\');\r\n$strSectionDelete = CIBlock::GetArrayByID($arParams[\'IBLOCK_ID\'], \'SECTION_DELETE\');\r\n$arSectionDeleteParams = array(\'CONFIRM\' => GetMessage(\'CT_BCSL_ELEMENT_DELETE_CONFIRM\'));\r\n?>\r\n\r\n<ul class=\"blo-top\">\r\n<?php foreach ($arResult[\'SECTIONS\'] as $arSection): ?>\r\n    <?php\r\n    $this->AddEditAction($arSection[\'ID\'], $arSection[\'EDIT_LINK\'], $strSectionEdit);\r\n    $this->AddDeleteAction($arSection[\'ID\'], $arSection[\'DELETE_LINK\'], $strSectionDelete, $arSectionDeleteParams);\r\n    ?>\r\n    <li id=\"<?php echo $this->GetEditAreaId($arSection[\'ID\']); ?>\">\r\n        <a href=\"<?php echo $arSection[\'SECTION_PAGE_URL\']; ?>\">||\r\n            <?php echo $arSection[\'NAME\']; ?>\r\n            <?php if ($arParams[\'COUNT_ELEMENTS\']): /* показывать кол-во элементов в разделе? */ ?>\r\n                <span>(<?php echo $arSection[\'ELEMENT_CNT\']; ?>)</span>\r\n            <?php endif; ?>\r\n        </a>\r\n    </li>\r\n<?php endforeach; ?>\r\n</ul>\r\n[/phtml]\r\n<p>\r\n<a href=\"/files/blog/158/6.jpg\" class=\"zoom\"><img src=\"/files/blog/158/6.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/user_help/components/content/catalog/catalog_section_list.php\">Простой компонент «Структура разделов»</a></li>\r\n</ul>','2018-07-06 13:38:13',1),(159,17,'Битрикс. Поиск на сайте','','','$arResult, CMS, Web-разработка, Битрикс, Компонент, Поиск, Форма, ШаблонКомпонента','Задача — создать форму поиска, которая будет доступна на всех страницах сайта. Для этого используем два компонента: «Форма поиска» и «Стандартная страница поиска». Сначала создаем новый раздел search в корне сайта, где будут показываться результаты поиска.','<p>\r\nЗадача — создать форму поиска, которая будет доступна на всех страницах сайта. Для этого используем два компонента: «Форма поиска» и «Стандартная страница поиска». Сначала создаем новый раздел <code>search</code> в корне сайта, где будут показываться результаты поиска. Вызываем визуальный редактор и справа выбираем «<em>Служебные • Поиск • Стандартная страница поиска</em>». В настройках поиска убираем постраничную навигацию сверху, все остальное оставляем «как есть»:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/159/1.jpg\" class=\"zoom\"><img src=\"/files/blog/159/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВключаем режим правки и копируем шаблон компонента. Имя шаблона будет <code>search</code>, копируем в общий шаблон <code>local/templates/.default</code>:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/159/2.jpg\" class=\"zoom\"><img src=\"/files/blog/159/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nОткрываем на редактирование скопированный шаблон <code>local/templates/.default/components/bitrix/search.page/search/template.php</code>, удаляем оттуда весь мусор от разработчиков Битрикс и пишем свой код:\r\n</p>\r\n[phtml]\r\n<?php\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n?>\r\n\r\n<div class=\"search-page\">\r\n<?php if (count($arResult[\"SEARCH\"]) > 0): /* если что-то найдено */ ?>\r\n    <?php if ($arParams[\"DISPLAY_TOP_PAGER\"] != \"N\") echo $arResult[\"NAV_STRING\"]; /* постраничная навигация вверху */ ?>\r\n\r\n    <?php foreach($arResult[\"SEARCH\"] as $arItem): ?>\r\n        <div>\r\n            <a href=\"<?= $arItem[\"URL\"]; ?>\"><?= $arItem[\"TITLE_FORMATED\"]; ?></a>\r\n            <p><?= $arItem[\"BODY_FORMATED\"]; ?></p>\r\n        </div>\r\n    <?php endforeach;?>\r\n\r\n    <?php if($arParams[\"DISPLAY_BOTTOM_PAGER\"] != \"N\") echo $arResult[\"NAV_STRING\"]; /* постраничная навигация внизу */ ?>\r\n<?php else: ?>\r\n    <p><?= GetMessage(\"SEARCH_NOTHING_TO_FOUND\")); /* ничего не найдено */ ?></p>\r\n<?php endif; ?>\r\n</div>\r\n[/phtml]\r\n<p>\r\nОсталось только изменить шаблон постраничной навигации, вместо того безобразия, которое Битрикс предлагает по умолчанию. У меня такой шаблон уже был:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.pagenavigation/pager/template.php\r\n */\r\n\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$this->setFrameMode(true);\r\n\r\nif (!$arResult[\"NavShowAlways\"]) {\r\n    if ($arResult[\"NavRecordCount\"] == 0 || ($arResult[\"NavPageCount\"] == 1 && $arResult[\"NavShowAll\"] == false)) return;\r\n}\r\n\r\n$strNavQueryString = ($arResult[\"NavQueryString\"] != \"\" ? $arResult[\"NavQueryString\"].\"&amp;\" : \"\");\r\n$strNavQueryStringFull = ($arResult[\"NavQueryString\"] != \"\" ? \"?\".$arResult[\"NavQueryString\"] : \"\");\r\n?>\r\n\r\n<nav>\r\n    <ul class=\"pagination\">\r\n        <?php if ($arResult[\"NavPageNomer\"] > 1): /* показываем ссылку на предыдущую страницу */ ?>\r\n            <?php if ($arResult[\"NavPageNomer\"] > 2): /* доп.условие, чтобы убрать /blog/?PAGEN_1=1 для первой страницы */ ?>\r\n                <li>\r\n                    <a href=\"<?=$arResult[\"sUrlPath\"]?>?<?=$strNavQueryString?>PAGEN_<?=$arResult[\"NavNum\"]?>=<?=($arResult[\"NavPageNomer\"]-1)?>\" aria-label=\"Предыдущая\">\r\n                        <span aria-hidden=\"true\">«</span>\r\n                    </a>\r\n                </li>\r\n            <?php else: ?>\r\n                <li>\r\n                    <a href=\"<?=$arResult[\"sUrlPath\"]?><?=$strNavQueryStringFull?>\" aria-label=\"Предыдущая\">\r\n                        <span aria-hidden=\"true\">«</span>\r\n                    </a>\r\n                </li>\r\n            <?php endif; ?>\r\n        <?php endif; ?>\r\n\r\n        <?php while ($arResult[\"nStartPage\"] <= $arResult[\"nEndPage\"]): /* цикл с первой по последнюю страницу */ ?>\r\n            <?php if ($arResult[\"nStartPage\"] == $arResult[\"NavPageNomer\"]): /* если это текущая страница */ ?>\r\n                <li class=\"active\"><a><?=$arResult[\"nStartPage\"]?></a></li>\r\n            <?php elseif ($arResult[\"nStartPage\"] == 1 && $arResult[\"bSavePage\"] == false): /* если это ссылка на первую страницу */ ?>\r\n                <li><a href=\"<?=$arResult[\"sUrlPath\"]?><?=$strNavQueryStringFull?>\"><?=$arResult[\"nStartPage\"]?></a></li>\r\n            <?php else: ?>\r\n                <li><a href=\"<?=$arResult[\"sUrlPath\"]?>?<?=$strNavQueryString?>PAGEN_<?=$arResult[\"NavNum\"]?>=<?=$arResult[\"nStartPage\"]?>\"><?=$arResult[\"nStartPage\"]?></a></li>\r\n            <?php endif; ?>\r\n            <?php $arResult[\"nStartPage\"]++ /* увеличиваем счетчик страниц */ ?>\r\n        <?php endwhile; ?>\r\n\r\n        <?php if ($arResult[\"NavPageNomer\"] < $arResult[\"NavPageCount\"]): /* показываем ссылку на следующую страницу */ ?>\r\n            <li>\r\n                <a href=\"<?=$arResult[\"sUrlPath\"]?>?<?=$strNavQueryString?>PAGEN_<?=$arResult[\"NavNum\"]?>=<?=($arResult[\"NavPageNomer\"]+1)?>\" aria-label=\"Следующая\">\r\n                    <span aria-hidden=\"true\">»</span>\r\n                </a>\r\n            </li>\r\n        <?php endif; ?>\r\n    </ul>\r\n</nav>\r\n[/phtml]\r\n<p>\r\nТак что мне достаточно только указать его имя <code>pager</code> в настройках компонента:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/159/3.jpg\" class=\"zoom\"><img src=\"/files/blog/159/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПоскольку поиск должен быть доступен везде:\r\n</p>\r\n<ul> \r\n  <li>вызов компонента «Форма поиска» разместим во всех шаблонах страниц (у меня это <code>voguis_index</code> и <code>voguis_blog</code>)</li>\r\n  <li>сам шаблон компонента «Форма поиска» разместим в шаблоне по умолчанию <code>local/templates/.default</code></li>\r\n</ul>\r\n[code]\r\n[local]\r\n    [templates]\r\n        [.default]\r\n            [components]\r\n                [bitrix]\r\n                    [menu]\r\n                    [red][search.form][/red]\r\n                    [grn][search.page][/grn]\r\n                    [system.pagenavigation]\r\n            [css]\r\n            [images]\r\n            [include_areas]\r\n            [js]\r\n            favicon.ico\r\n        [voguis_blog]\r\n        [voguis_index]\r\n[/code]\r\n<p>\r\nКак обычно, чтобы получить код вызова компонента со всеми параметрами, переходим на тестовую страницу и вызываем визуальный редактор. Выбираем в правой колонке компонент «Служебные • Поиск • Форма поиска». Копируем код вызова компонента и выходим без сохранения.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/159/4.jpg\" class=\"zoom\"><img src=\"/files/blog/159/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:search.form\",\r\n    \"\",\r\n    Array(\r\n        \"PAGE\" => \"#SITE_DIR#search/index.php\",\r\n        \"USE_SUGGEST\" => \"N\"\r\n    )\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nОткрываем на редактирование файлы шаблонов\r\n</p>\r\n<ul>\r\n  <li><code>local/templates/voguis_index/footer.php</code></li>\r\n  <li><code>local/templates/voguis_blog/footer.php</code></li>\r\n</ul>\r\n<p>\r\nКомментируем HTML-код формы поиска и вставляем вызов компонента:\r\n</p>\r\n[phtml]\r\n<!--\r\n<div class=\"b-search\">\r\n    <form>\r\n        <input type=\"text\" value=\"Search\" onfocus=\"this.value=\'\';\" onblur=\"if (this.value==\'\') {this.value=\'Search\';}\">\r\n        <input type=\"submit\" value=\"\">\r\n    </form>\r\n</div>\r\n-->\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:search.form\",\r\n    \"\",\r\n    Array(\r\n        \"PAGE\" => \"#SITE_DIR#search/index.php\",\r\n        \"USE_SUGGEST\" => \"N\"\r\n    )\r\n);\r\n?>\r\n[/phtml]\r\n<p>\r\n<a href=\"/files/blog/159/5.jpg\" class=\"zoom\"><img src=\"/files/blog/159/5.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПереходим на главную страницу сайта, включаем режим правки и копируем шаблон компонента:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/159/6.jpg\" class=\"zoom\"><img src=\"/files/blog/159/6.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nИмя шаблона будет <code>search</code>, копируем в шаблон по умолчанию <code>.default</code>:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/159/7.jpg\" class=\"zoom\"><img src=\"/files/blog/159/7.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nКод вызова компонента в файле <code>local/templates/voguis_index/footer.php</code> был перезаписан, но нам еще нужно изменить код вызова и в шаблоне <code>local/templates/voguis_blog/footer.php</code>:\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:search.form\",\r\n    \"search\",\r\n    Array(\r\n        \"PAGE\" => \"#SITE_DIR#search/index.php\", // Страница выдачи результатов поиска (доступен макрос #SITE_DIR#)\r\n        \"USE_SUGGEST\" => \"N\",                   // Показывать подсказку с поисковыми фразами\r\n    ),\r\n    false\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nОткрываем на редактирование скопированный шаблон <code>local/templates/.default/components/bitrix/search.form/search/template.php</code>.\r\n</p>\r\n[phtml]\r\n<?if(!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true)die();\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n$this->setFrameMode(true);?>\r\n<div class=\"search-form\">\r\n<form action=\"<?=$arResult[\"FORM_ACTION\"]?>\">\r\n    <table border=\"0\" cellspacing=\"0\" cellpadding=\"2\" align=\"center\">\r\n        <tr>\r\n            <td align=\"center\"><?if($arParams[\"USE_SUGGEST\"] === \"Y\"):?><?$APPLICATION->IncludeComponent(\r\n                \"bitrix:search.suggest.input\",\r\n                \"\",\r\n                array(\r\n                    \"NAME\" => \"q\",\r\n                    \"VALUE\" => \"\",\r\n                    \"INPUT_SIZE\" => 15,\r\n                    \"DROPDOWN_SIZE\" => 10,\r\n                ),\r\n                $component, array(\"HIDE_ICONS\" => \"Y\")\r\n            );?><?else:?><input type=\"text\" name=\"q\" value=\"\" size=\"15\" maxlength=\"50\" /><?endif;?></td>\r\n        </tr>\r\n        <tr>\r\n            <td align=\"right\"><input name=\"s\" type=\"submit\" value=\"<?=GetMessage(\"BSF_T_SEARCH_BUTTON\");?>\" /></td>\r\n        </tr>\r\n    </table>\r\n</form>\r\n</div>\r\n[/phtml]\r\n<p>\r\nТабличная верстка двадцатилетней давности нам не нужна, так что удаляем все и пишем свой код:\r\n</p>\r\n[phtml]\r\n<?php\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<div class=\"b-search\">\r\n    <form action=\"<?= $arResult[\"FORM_ACTION\"]; ?>\">\r\n        <input type=\"text\" name=\"q\" value=\"Поиск\" onfocus=\"this.value=\'\';\" onblur=\"if (this.value==\'\') {this.value=\'Поиск\';}\">\r\n        <input type=\"submit\" name=\"s\" value=\"\">\r\n    </form>\r\n</div>\r\n[/phtml]\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/user_help/components/sluzhebnie/search/search_page.php\">Компонент «Стандартная страница поиска»</a></li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/user_help/components/sluzhebnie/search/search_form.php\">Компонент «Форма поиска»</a></li>\r\n</ul>','2018-07-07 12:53:23',1),(160,17,'Продление жизни демо-версии Битрикс','','','CMS, Web-разработка, Битрикс','Довольно часто при создании сайта разработчики используют демо-версию Биртикса, у которой установлен 30-дневный срок лицензии. Иногда встает вопрос о продлении демо-версии, потому что 30 дней оказалось недостаточно. Для этого нужно взять данные из новой установки Битрикс и перенести на старую установку.','<p>\r\nДовольно часто при создании сайта разработчики используют демо-версию Биртикса, у которой установлен 30-дневный срок лицензии. Иногда встает вопрос о продлении демо-версии, потому что 30 дней оказалось недостаточно. Для этого нужно взять данные из новой установки Битрикс и перенести на старую установку.\r\n</p>\r\n<p>\r\nЗа контроль демки отвечают хэшированные значения дат в базе данных и в одном из файлов.\r\n</p>\r\n<h3>Первый шаг</h3>\r\n<p>\r\nСтавим на локалке новый Битрикс.\r\n</p>\r\n<h3>Второй шаг</h3>\r\n<p>\r\nВытаскиваем хэш из новой базы данных:\r\n</p>\r\n[mysql]\r\nSELECT\r\n    `VALUE`\r\nFROM\r\n    `b_option`\r\nWHERE\r\n    `NAME` = \'admin_passwordh\'\r\n[/mysql]\r\n<p>\r\nИзменяем хэш в старой базе данных:\r\n</p>\r\n[mysql]\r\nUPDATE\r\n    `b_option`\r\nSET\r\n    `VALUE` = \'хэш-из-новой-установки\'\r\nWHERE\r\n    `NAME` = \'admin_passwordh\'\r\n[/mysql]\r\n<h3>Третий шаг</h3>\r\n<p>\r\nИз файла новой установки <code>/bitrix/modules/main/admin/define.php</code> забираем хэш и копируем в файл старой установки:\r\n</p>\r\n[php]\r\ndefine(\"TEMPORARY_CACHE\", \"ARtsfwYHb2MMdAgebRtkG2sA\");\r\n[/php]\r\n<h3>Четвертый шаг</h3>\r\n<p>\r\nОчищаем директорию <code>/bitrix/managed_cache/</code> на старой установке.\r\n</p>','2018-07-09 12:58:12',1),(161,17,'Битрикс. Показ элементов инфоблока по условию','','','CMS, GetList, Web-разработка, Битрикс, Инфоблок, Список, ЭлементИнфоблока','Задача: на главной странице сайта показывать избранные статьи блога. Для этого в настройках инфоблока «Блог», который предназначен для показа периодических публикаций (новости, статьи, записи блога) добавляем новое свойство «Показывать на главной».','<p>\r\nЗадача: на главной странице сайта показывать избранные статьи блога. Для этого в настройках инфоблока «Блог», который предназначен для показа периодических публикаций (новости, статьи, записи блога) добавляем новое свойство «Показывать на главной»:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/161/1.jpg\" class=\"zoom\"><img src=\"/files/blog/161/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВ настройках свойства инфоблока\r\n</p>\r\n<ul>\r\n  <li>Показывать на странице редактирования элемента</li>\r\n  <li>Внешний вид: Флажки</li>\r\n  <li>Задаем единственное значение Y(es)</li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/161/2.jpg\" class=\"zoom\"><img src=\"/files/blog/161/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТеперь для нескольких публикаций в блоге задаем это свойство:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/161/3.jpg\" class=\"zoom\"><img src=\"/files/blog/161/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВ итоге получаем такую картину:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/161/4.jpg\" class=\"zoom\"><img src=\"/files/blog/161/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТеперь посмотрим на метод <code>CIBlockElement::GetList()</code>, возвращает объект типа <code>CIBlockResult</code>\r\n</p>\r\n[php]\r\n// Возвращает объект типа CIBlockResult\r\nCIBlockElement::GetList(\r\n    array arOrder = Array(\"SORT\"=>\"ASC\"), // массив полей, по которым будут отсортированы элементы\r\n    array arFilter = Array(),             // массив полей, по которым будут отобраны элементы\r\n    mixed arGroupBy = false,              // массив полей для группировки элементов\r\n    mixed arNavStartParams = false,       // параметры для постраничной навигации\r\n    array arSelectFields = Array()        // массив возвращаемых полей элементов\r\n)\r\n[/php]\r\n<div class=\"note\">\r\n<p>\r\n<code>CIBlockResult</code> — вспомогательный класс для работы с объектами результатов выборок, наследуется от класса <code>CDBResult</code> и содержит все его параметры и методы. Методы класса:\r\n</p>\r\n<ul>\r\n  <li><code>GetNext()</code> — Возвращает из выборки список полей элемента, с замененными ссылками в полях <code>DETAIL_PAGE_URL</code> и <code>LIST_PAGE_URL</code>.</li>\r\n  <li><code>GetNextElement()</code> — Возвращает объект <code>_CIBElement</code> элемента из выборки.</li>\r\n  <li><code>SetUrlTemplates()</code> — Устанавливает шаблоны путей для элементов.</li>\r\n  <li><code>SetSectionContext()</code> — Метод устанавливает поля раздела в качестве родителя элемента для подстановки в шаблоны путей.</li>\r\n</ul>\r\n</div>\r\n<div class=\"note\">\r\n<p>\r\n<code>_CIBElement</code> — вспомогательный класс для работы с объектами, которые возвращает <code>CIBlockResult::GetNextElement()</code>. Для получения различных характеристик элемента рекомендуется использовать именно этот класс. Методы класса\r\n</p>\r\n<ul>\r\n  <li><code>GetFields()</code> — Возвращает массив полей элемента, с замененными ссылками в полях <code>DETAIL_PAGE_URL</code> и <code>LIST_PAGE_URL</code>.</li>\r\n  <li><code>GetProperties()</code> — Возвращает все или некоторые значения свойств элемента.</li>\r\n  <li><code>GetProperty()</code> — Возвращает значения свойства элемента.</li>\r\n  <li><code>GetGroups()</code> — Возвращает группы, к которым привязан элемент.</li>\r\n</ul>\r\n</div>\r\n<p>\r\nНа главной странице комментируем HTML-код показа избранных статей:\r\n</p>\r\n[phtml]\r\n<div class=\"nam-matis\">\r\n    <div class=\"col-md-6 nam-matis-1\">\r\n        <a href=\"single.html\"><img src=\"<?= DEFAULT_TEMPLATE_PATH ?>/images/5.jpg\" class=\"img-responsive\" alt=\"\"></a>\r\n        <h3><a href=\"single.html\">Suspendisse a pellentesque dui</a></h3>\r\n        <p>Etiam ullamcorper. Suspendisse a pellentesque dui, non felis. Maecenas malesuada elit lectus felis...</p>\r\n    </div>\r\n    <div class=\"col-md-6 nam-matis-1\">\r\n        <a href=\"\"><img src=\"<?= DEFAULT_TEMPLATE_PATH ?>/images/6.jpg\" class=\"img-responsive\" alt=\"\"></a>\r\n        <h3><a href=\"\">Suspendisse a pellentesque dui</a></h3>\r\n        <p>Etiam ullamcorper. Suspendisse a pellentesque dui, non felis. Maecenas malesuada elit lectus felis...</p>\r\n    </div>\r\n    <div class=\"col-md-6 nam-matis-1\">\r\n        <a href=\"single.html\"><img src=\"<?= DEFAULT_TEMPLATE_PATH ?>/images/4.jpg\" class=\"img-responsive\" alt=\"\"></a>\r\n        <h3><a href=\"single.html\">Suspendisse a pellentesque dui</a></h3>\r\n        <p>Etiam ullamcorper. Suspendisse a pellentesque dui, non felis. Maecenas malesuada elit lectus felis...</p>\r\n    </div>\r\n    <div class=\"col-md-6 nam-matis-1\">\r\n        <a href=\"single.html\"><img src=\"<?= DEFAULT_TEMPLATE_PATH ?>/images/1.jpg\" class=\"img-responsive\" alt=\"\"></a>\r\n        <h3><a href=\"single.html\">Suspendisse a pellentesque dui</a></h3>\r\n        <p>Etiam ullamcorper. Suspendisse a pellentesque dui, non felis. Maecenas malesuada elit lectus felis...</p>\r\n    </div>\r\n</div>\r\n[/phtml]\r\n<p>\r\nИ на это место вставляем код:\r\n[phtml]\r\n<?php\r\nCModule::IncludeModule(\'iblock\');\r\n// какие поля получаем\r\n$arSelect = Array(\"ID\", \"IBLOCK_ID\", \"NAME\", \"PREVIEW_TEXT\", \"DETAIL_PAGE_URL\", \"DETAIL_PICTURE\");\r\n// условия фильтрации\r\n$arFilter = Array(\"IBLOCK_ID\" => 1, \"ACTIVE_DATE\" => \"Y\", \"ACTIVE\" => \"Y\", \"PROPERTY_SHOW_MAIN_VALUE\" => \"Y\");\r\n// получаем объект типа CIBlockResult\r\n$res = CIBlockElement::GetList(\r\n    Array(\'CREATED\' => \'DESC\'),  // сортируем по убыванию даты и времени добавления\r\n    $arFilter,\r\n    false,\r\n    Array(\"nPageSize\" => 4),    // получаем четыре статьи\r\n    $arSelect\r\n);\r\n?>\r\n\r\n<?php if (!empty($res->arResult)): ?>\r\n    <div class=\"nam-matis\">\r\n        <?php while ($ob = $res->GetNextElement()): ?>\r\n            <?php $arFields = $ob->GetFields(); /* поля текущего элемента инфоблока */ ?>\r\n            <?php $img = CFile::GetPath($arFields[\'DETAIL_PICTURE\']); ?>\r\n            <div class=\"col-md-6 nam-matis-1\">\r\n                <a href=\"<?= $arFields[\'DETAIL_PAGE_URL\']; ?>\">\r\n                    <img src=\"<?= $img; ?>\" class=\"img-responsive\" alt=\"<?= $arFields[\'NAME\']; ?>\">\r\n                </a>\r\n                <h3><a href=\"<?= $arFields[\'DETAIL_PAGE_URL\']; ?>\"><?= $arFields[\'NAME\']; ?></a></h3>\r\n                <?php\r\n                $preview = $arFields[\'PREVIEW_TEXT\'];\r\n                if (iconv_strlen($arFields[\'PREVIEW_TEXT\']) > 90) {\r\n                    $preview = iconv_substr($arFields[\'PREVIEW_TEXT\'], 0, iconv_strpos($arFields[\'PREVIEW_TEXT\'], \' \', 90)).\'…\';\r\n                }\r\n                ?>\r\n                <p><?= $preview; ?></p>\r\n            </div>\r\n        <?php endwhile; ?>\r\n    </div>\r\n<?php endif; ?>\r\n[/phtml]','2018-07-10 16:04:11',1),(163,17,'Битрикс. Облако тегов','','','CMS, Web-разработка, Битрикс, Компонент, ОблакоТегов, Поиск, ШаблонКомпонента','Задача — создать облако тегов, которое будет в правой колонке, в разделе «Блог». Для начала в панели управления для статей блога создадим несколько тегов. Потом переходим на сайт, на тестовую страницу, и вызываем визуальный редактор. Нам надо получить код вызова компонента «Облако тегов», который находится в «Служебные • Поиск».','<p>\r\nЗадача — создать облако тегов, которое будет в правой колонке, в разделе «Блог». Для начала в панели управления для статей блога создадим несколько тегов. Потом переходим на сайт, на тестовую страницу, и вызываем визуальный редактор. Нам надо получить код вызова компонента «Облако тегов», который находится в «Служебные • Поиск». В настройках изменяем количество тегов, сортировку (по имени или релевантности) и выбираем область поиска: тип инфоблока и сам инфоблок (который был создан в панели управления под публикации статей блога):\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/163/1.jpg\" class=\"zoom\"><img src=\"/files/blog/163/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nКопируем код вызова компонента и закрываем редактор без сохранения:\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:search.tags.cloud\",\r\n    \"\",\r\n    Array(\r\n        \"CACHE_TIME\" => \"3600\",\r\n        \"CACHE_TYPE\" => \"A\",\r\n        \"CHECK_DATES\" => \"N\",\r\n        \"COLOR_NEW\" => \"3E74E6\",\r\n        \"COLOR_OLD\" => \"C0C0C0\",\r\n        \"COLOR_TYPE\" => \"Y\",\r\n        \"FILTER_NAME\" => \"\",\r\n        \"FONT_MAX\" => \"50\",\r\n        \"FONT_MIN\" => \"10\",\r\n        \"PAGE_ELEMENTS\" => \"10\",\r\n        \"PERIOD\" => \"\",\r\n        \"PERIOD_NEW_TAGS\" => \"\",\r\n        \"SHOW_CHAIN\" => \"Y\",\r\n        \"SORT\" => \"NAME\",\r\n        \"TAGS_INHERIT\" => \"Y\",\r\n        \"URL_SEARCH\" => \"/search/index.php\",\r\n        \"WIDTH\" => \"100%\",\r\n        \"arrFILTER\" => array(\"iblock_content\"),  // область поиска: тип инфобока\r\n        \"arrFILTER_iblock_content\" => array(\"1\") // область поиска: сам инфобок\r\n    )\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nВ шаблоне блога <code>local/templates/voguis_blog/footer.php</code> комментируем HTML-код облака тегов от верстальщика и вставляем вызов компонента:\r\n</p>\r\n[html]\r\n<div class=\"b-tag-weight\">\r\n    <h3>Tags Weight</h3>\r\n    <ul>\r\n        <li><a href=\"#\">Lorem</a></li>\r\n        <li><a href=\"#\">consectetur</a></li>\r\n        <li><a href=\"#\">dolore</a></li>\r\n        <li><a href=\"#\">aliqua</a></li>\r\n        <li><a href=\"#\">sit amet</a></li>\r\n        <li><a href=\"#\">ipsum</a></li>\r\n    </ul>\r\n</div>\r\n[/html]\r\n<p>\r\n<a href=\"/files/blog/163/2.jpg\" class=\"zoom\"><img src=\"/files/blog/163/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВ принципе, облако тегов уже работает. И даже можно посмотреть результат поиска по тегу, если была создана страница результатов поиска с использованием компонента «Стандартная страница поиска»:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/163/3.jpg\" class=\"zoom\"><img src=\"/files/blog/163/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nОсталось только скопировать шаблон компонента «Облако тегов» и изменить под наш дизайн:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/163/4.jpg\" class=\"zoom\"><img src=\"/files/blog/163/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nИмя шаблона <code>tags</code>, копируем в шаблон страницы блога <code>voguis_blog</code>:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/163/5.jpg\" class=\"zoom\"><img src=\"/files/blog/163/5.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nУдаляем весь код из скопированного шаблона <code>local/templates/voguis_blog/components/bitrix/search.tags.cloud/tags/template.php</code>\r\n</p>\r\n[phtml]\r\n<?if(!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true)die();\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n$this->setFrameMode(true);\r\n\r\nif($arParams[\"SHOW_CHAIN\"] != \"N\" && !empty($arResult[\"TAGS_CHAIN\"])):\r\n?>\r\n<noindex>\r\n    <div class=\"search-tags-chain\" <?=$arParams[\"WIDTH\"]?>><?\r\n        foreach ($arResult[\"TAGS_CHAIN\"] as $tags):\r\n            ?><a href=\"<?=$tags[\"TAG_PATH\"]?>\" rel=\"nofollow\"><?=$tags[\"TAG_NAME\"]?></a> <?\r\n            ?>[<a href=\"<?=$tags[\"TAG_WITHOUT\"]?>\" class=\"search-tags-link\" rel=\"nofollow\">x</a>]  <?\r\n        endforeach;?>\r\n    </div>\r\n</noindex>\r\n<?\r\nendif;\r\n\r\nif(is_array($arResult[\"SEARCH\"]) && !empty($arResult[\"SEARCH\"])):\r\n?>\r\n<noindex>\r\n    <div class=\"search-tags-cloud\" <?=$arParams[\"WIDTH\"]?>><?\r\n        foreach ($arResult[\"SEARCH\"] as $key => $res)\r\n        {\r\n        ?><a href=\"<?=$res[\"URL\"]?>\" style=\"font-size: <?=$res[\"FONT_SIZE\"]?>px; color: #<?=$res[\"COLOR\"]?>;\" rel=\"nofollow\"><?=$res[\"NAME\"]?></a> <?\r\n        }\r\n    ?></div>\r\n</noindex>\r\n<?\r\nendif;\r\n?>\r\n[/phtml]\r\n<p>\r\nИ пишем свой код:\r\n</p>\r\n[phtml]\r\n<?php\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<?php if (is_array($arResult[\'SEARCH\']) && !empty($arResult[\'SEARCH\'])): ?>\r\n<div class=\"b-tag-weight\">\r\n    <h3>Облако тегов</h3>\r\n    <ul>\r\n    <?php foreach ($arResult[\'SEARCH\'] as $arItem): ?>\r\n        <li><a href=\"<?= $arItem[\'URL\']; ?>\"><?= $arItem[\'NAME\']; ?></a></li>\r\n    <?php endforeach; ?>\r\n    </ul>\r\n</div>\r\n<?php endif; ?>\r\n[/phtml]','2018-07-11 13:04:27',1),(162,11,'Mustache — шаблонизатор для JavaScript','','','HTML, JavaScript, Web-разработка, ШаблонСайта, Шаблонизатор','Mustache — шаблонизатор, который содержит минимум управляющей логики и доступен для разных языков программирования. Его можно использовать и на сервере (PHP, Ruby и т.д.), и на клиенте (Javascript). Шаблон пишется на простом языке, состоящем из нескольких типов тегов. Теги обрамляются двумя или тремя фигурными скобками с каждой стороны.','<p>\r\nMustache — шаблонизатор, который содержит минимум управляющей логики и доступен для разных языков программирования. Его можно использовать и на сервере (PHP, Ruby и т.д.), и на клиенте (Javascript).\r\n</p>\r\n<p>\r\nШаблон пишется на простом языке, состоящем из нескольких типов тегов. Теги обрамляются двумя или тремя фигурными скобками с каждой стороны. Можно использовать вложенные шаблоны.\r\n</p>\r\n<p>\r\nРассмотрим простой пример  шаблона:\r\n</p>\r\n[html]\r\n<h1>{{header}}</h1>\r\n<p>{{{content}}}</p>\r\n<ul>\r\n{{#authors}}\r\n    <li>{{#accent}} {{.}} {{/accent}}</li>\r\n{{/authors}}\r\n{{^authors}}\r\n    <li>anonymous</li>\r\n{{/authors}}\r\n</ul>\r\n[/html]\r\n<p>\r\nДанные, с которыми работает шаблон, называются контекстом. Имя тега указывает, к какому полю контекста необходимо обратиться. Пример данных, которые могут послужить контекстом для нашего шаблона:\r\n</p>\r\n[js]\r\nvar data = {\r\n    header : \"Новый пост\",\r\n    content: \"Первая строка<br />Вторая строка\",\r\n    authors: [\"alex\", \"daemon\", \"john\"],\r\n    accent : function () {\r\n        return function (text, render) {\r\n            text = render(text);\r\n            return \'<strong>\' + text + \'</strong>\';\r\n        }\r\n    }\r\n};\r\n[/js]\r\n<p>\r\nЧтобы «запустить» шаблонизатор и отрисовать с помощью шаблона данные, необходимо подключить библиотеку:\r\n</p>\r\n[html]\r\n<script type=\"text/javascript\" src=\"http://github.com/janl/mustache.js/raw/master/mustache.js\"></script>\r\n[/html]\r\n<p>\r\nИ вызывать рендеринг методом <code>render()</code>:\r\n</p>\r\n[js]\r\nMustache.render(template, data);\r\n[/js]\r\n<p>\r\nЗдесь первым параметром передается шаблон, а вторым — данные. Так же можно использовать третий параметр — список дополнительных шаблонов, и четвертый — функцию <code>callback</code>, которая вызывается после обработки шаблона.\r\n</p>\r\n\r\n<h2>Более подробно о тегах</h2>\r\n<p>\r\nВсего в Mustache четыре основных типа тегов: переменная, секция, комментарий и подключение дополнительного шаблона.\r\n</p>\r\n<p>\r\n<strong>Переменная</strong> выводит данные с экранированием HTML-сущностей <code>{{header}}</code> и без экранирования <code>{{{content}}}</code>. Отличаются они количеством скобок. В нашем случае, вместо <code>{{header}}</code> подставится строчка «Новый пост».\r\n</p>\r\n<p>\r\n<strong>Секция</strong> представляет собой парный тег. Принцип ее действия зависит от типа данных, с которыми она работает:\r\n</p>\r\n<ul>\r\n  <li><code>true/false</code> — ведет себя как оператор <code>if</code>: отображает блок только в случае, когда было передано <code>true</code></li>\r\n  <li>список значений — аналог цикла с подставкой значений; элемент списка подставляется вместо тега-точки</li>\r\n  <li>функция — получает два значения: текст блока и рендер-метод, и заменяет блок своим результатом</li>\r\n</ul>\r\n<p>\r\nТак, например, секция\r\n</p>\r\n[html]\r\n{{#authors}}<li>{{.}}</li>{{/authors}}\r\n[/html]\r\n<p>\r\nпревратится в\r\n</p>\r\n[html]\r\n<li>alex</li>\r\n<li>daemon</li>\r\n<li>john</li>\r\n[/html]\r\n<p>\r\nЕсли список пуст, то обрабатывается содержимое «тега с крышечкой», в нашем случае — это <code>{{^authors}} … {{/authors}}</code>.\r\n</p>\r\n<p>\r\n<strong>Комментарий</strong> оформляется в виде тега с восклицательным знаком, например, <code>{{! comment content}}</code>.\r\n</p>\r\n<p>\r\n<strong>Подключение дополнительного шаблона</strong> вызывается с помощью тега с угловой скобкой. Например, <code>{{&gt;copyright}}</code>. Если в текущем контексте присутствует поле с таким названием, то оно будет передано в качестве контекста для подключаемого шаблона.\r\n</p>\r\n\r\n[html]\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n<script type=\"text/javascript\" src=\"mustache.js\"></script>\r\n<script type=\"text/javascript\">\r\n[/html]\r\n[js]\r\nvar template = \'<h1>{{header}}</h1>\' +\r\n               \'<p>{{{content}}}</p>\' +\r\n               \'{{#authors}}<li>{{#accent}} {{.}} {{/accent}}</li>{{/authors}}\' +\r\n               \'{{^authors}}<li>anonymous</li>{{/authors}}</ul>\';\r\nvar data = {\r\n    header : \"Новый пост\",\r\n    content: \"Первая строка<br />Вторая строка\",\r\n    authors: [\"alex\", \"daemon\", \"john\"],\r\n    accent : function () {\r\n        return function (text, render) {\r\n            text = render(text);\r\n            return \'<strong>\' + text + \'</strong>\';\r\n        }\r\n    }\r\n};\r\nfunction loadpage() {\r\n    var html = Mustache.render(template, data);\r\n    document.getElementById(\'output\').innerHTML = html;\r\n}\r\n[/js]\r\n[html]\r\n</script>\r\n</head>\r\n<body onload=\"loadpage()\">\r\n<div id=\"output\"></div>\r\n</body>\r\n</html>\r\n[/html]','2018-07-05 12:21:48',1),(164,11,'Статическая маршрутизация','','','Windows, route, Команда','Статический маршрут — представляет собой заданный администратором маршрут, который заставляет пакеты, перемещающиеся между источником и адресатом, отправляться по указанному пути. Другими словами — это явно указанный путь, по которому должен пройти пакет из пункта «А» в пункт «Б».','<p>\r\nСтатическая маршрутизация — вид маршрутизации, при котором маршруты указываются в явном виде при конфигурации маршрутизатора. Вся маршрутизация при этом происходит без участия каких-либо протоколов маршрутизации.\r\n</p>\r\n<p>\r\nСтатический маршрут — представляет собой заданный администратором маршрут, который заставляет пакеты, перемещающиеся между источником и адресатом, отправляться по указанному пути. Другими словами — это явно указанный путь, по которому должен пройти пакет из пункта «А» в пункт «Б».\r\n</p>\r\n<p>\r\nСейчас очень распространено для безопасности использовать «Виртуальные частные сети» (VPN). VPN используют как в организациях, для организации своей защищенной сети, так и провайдеры, для предоставления доступа к сети Интернет. Но, так или иначе, это иногда вызывает небольшие неудобства, как в организациях, так и у обычных пользователей.\r\n</p>\r\n<p>\r\nНапример, у вас дома два компьютера, один из которых имеет доступ в Интернет посредством VPN, также он соединен со вторым компьютером локальной сетью. И каждый раз, когда он подключается к Интернету, связь между двумя компьютерами теряется, так как первый компьютер (который подключился к VPN) уже находится в другой сети, и поэтому недоступен со второго компа.\r\n</p>\r\n<h2>Использование утилиты route</h2>\r\n<p>\r\nДавайте пропишем маршрут, который разрешит нам получить доступ к локальной сети при включенном VPN соединении. Эпригодится обычным пользователям, у которых дома более одного компьютера, а в Интернет выходят посредством VPN.\r\n</p>\r\n<ul>\r\n  <li>Имеем локальную сеть: <code>192.168.1.0/24</code></li>\r\n  <li>Локальный IP первого компьютера (компьютер «А»): <code>192.168.1.2</code></li>\r\n  <li>Локальный IP второго компьютера (компьютер «Б»): <code>192.168.1.3</code></li>\r\n  <li>IP адрес шлюза: <code>192.168.1.1</code></li>\r\n</ul>\r\n<p>\r\nНам нужно прописать маршрут на компьютере «А», чтобы он смог видеть компьютер «Б» при включенном VPN соединении. Делается это следующи образом:\r\n</p>\r\n[cli]\r\n> route –p add 192.168.1.0 mask 255.255.255.0 192.168.1.1\r\n[/cli]\r\n<p>\r\nгде:\r\n</p>\r\n<ul>\r\n  <li><code>route</code> — сама программа, которая работает с таблицей маршрутизации;</li>\r\n  <li><code>-p</code> — ключ, который говорит, что маршрут будет постоянный; без этого ключа все добавленные маршруты удалятся после перезагрузке;</li>\r\n  <li><code>add</code> — команда, добавляющая запись в таблицу маршрутизации;</li>\r\n  <li><code>192.168.1.0</code> — сеть, с которой нужна связь;</li>\r\n  <li><code>mask 255.255.255.0</code> — маска подсети;</li>\r\n  <li><code>192.168.1.1</code> — адрес шлюза.</li>\r\n</ul>\r\n<h2>Синтаксис утилиты route</h2>\r\n[code]\r\nroute [grn][-f] [-p][/grn] [red]<add|change|delete|print>[/red] [destination] [mask <netmask>] [gateway] [metric <metric>] [if <interface>]\r\n[/code]\r\n<p>\r\nОсновные ключи:\r\n</p>\r\n<ul>\r\n  <li><code>-f</code> — удаляет из таблицы маршрутизации все маршруты;</li>\r\n  <li><code>-p</code> — сохраняет маршрут на постоянную основу;</li>\r\n  <li><code>add</code> — добавляет новый маршрут;</li>\r\n  <li><code>change</code> — меняет текущий маршрут в таблице маршрутизации;</li>\r\n  <li><code>delete</code> — удаляет маршрут из таблицы маршрутизации;</li>\r\n  <li><code>print</code> — отображает содержимое таблицы маршрутизации;</li>\r\n  <li><code>destination</code> — при добавлении или изменении маршрута этот параметр используется для указания идентификатора сети назначения;</li>\r\n  <li><code>mask</code> — при добавлении или изменении маршрута этот параметр используется для указания маски подсети для сети назначения;</li>\r\n  <li><code>gateway</code> — при добавлении или изменении нового маршрута этот параметр используется для указания шлюза (маршрутизатора или модема);</li>\r\n  <li><code>metric</code> — используется для указания целого числа в диапазоне от 1 до 9999, являющегося метрикой стоимости для маршрута. Если для определенной сети назначения существует несколько возможных маршрутов, будет использован маршрут с наименьшим значением метрики;</li>\r\n  <li><code>if</code> — используется для указания номера индекса интерфейса, который подключен к сети назначения.</li>\r\n</ul>','2018-07-08 17:40:38',1),(165,17,'Битрикс. Форма обратной связи','','','CMS, Web-разработка, Битрикс, Компонент, Форма, ШаблонКомпонента','Задача: создать форму обратной связи для страницы «Контакты». Эта страница содержит Google-карту, адрес и форму обратной связи. Для получения кода вызова компонента, открываем тестовую страницу в визуальном редакторе, справа выбираем компонент «Служебные • Форма обратной связи».','<p>\r\nЗадача: создать форму обратной связи для страницы «Контакты». Эта страница содержит Google-карту, адрес и форму обратной связи. Для получения кода вызова компонента, открываем тестовую страницу в визуальном редакторе, справа выбираем компонент «Служебные • Форма обратной связи». В настройках компонента убираем CAPTCHA, задаем e-mail, на который будут приходить сообщения и отмечаем обязательные для заполнения поля. Сохраняем в буфер обмена код вызова компонента и выходим из редактора без сохранения.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/165/1.jpg\" class=\"zoom\"><img src=\"/files/blog/165/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВ шаблоне от верстальщика страница «Контакты» выглядит так:\r\n</p>\r\n[html]\r\n<div class=\"main-head-section\">\r\n    <h3>contact</h3>\r\n    <div class=\"contact-map\">\r\n        <iframe src=\"https://www.google.com/maps/embed?pb=...\" width=\"100%\" height=\"151px\" style=\"border:0\"></iframe>\r\n    </div>\r\n</div>\r\n<div class=\"contact_top\">\r\n    <div class=\"col-md-8 contact_left\">\r\n        <h4>Contact Form</h4>\r\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec tincidunt dolor...</p>\r\n        <form>\r\n            <div class=\"form_details\">\r\n                <input type=\"text\" class=\"text\" value=\"Name\" placeholder=\"Name\">\r\n                <input type=\"text\" class=\"text\" value=\"Email Address\" placeholder=\"Email Address\">\r\n                <input type=\"text\" class=\"text\" value=\"Subject\" placeholder=\"Subject\">\r\n                <textarea value=\"Message\" placeholder=\"Message\">Message</textarea>\r\n                <div class=\"clearfix\"> </div>\r\n                <div class=\"sub-button\">\r\n                   <input type=\"submit\" value=\"Send message\">\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    <div class=\"col-md-4 company-right\">\r\n        <div class=\"company_ad\">\r\n            <h3>Contact Info</h3>\r\n            <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit velit justo.</span>\r\n            <address>\r\n                <p>email:<a href=\"#\">info@display.com</a></p>\r\n                <p>phone: 1.306.222.4545</p>\r\n                <p>222 2nd Ave South</p>\r\n                <p>Saskabush, SK   S7M 1T6</p>\r\n            </address>\r\n        </div>\r\n    </div>\r\n    <div class=\"clearfix\"> </div>\r\n</div>\r\n[/html]\r\n<p>\r\nHTML-код формы обратной связи комментируем и на это место вставляем код вызова компонента:\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION-$APPLICATION->IncludeComponent(\r\n    \"bitrix:main.feedback\", \r\n    \".default\", \r\n    array(\r\n        \"EMAIL_TO\" => \"feedback@mail.ru\", // куда отправлять сообщения\r\n        \"EVENT_MESSAGE_ID\" => array(),\r\n        \"OK_TEXT\" => \"Спасибо, ваше сообщение принято.\",\r\n        \"REQUIRED_FIELDS\" => array(       // обязательные для заполнения поля\r\n            0 => \"NAME\",\r\n            1 => \"EMAIL\",\r\n            2 => \"MESSAGE\",\r\n        ),\r\n        \"USE_CAPTCHA\" => \"N\",             // не использовать CAPTCHA\r\n        \"COMPONENT_TEMPLATE\" => \".default\"\r\n    ),\r\n    false\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nКопируем шаблон компонента, чтобы задать для формы наше оформление. Имя шаблона задаем как <code>feedback</code>, копировать будем в общий шаблон <code>local/templates/.default</code>.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/165/2.jpg\" class=\"zoom\"><img src=\"/files/blog/165/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nОткрываем скопированный шаблон <code>local/templates/.default/components/bitrix/main.feedback/feedback/template.php</code> на редактирование. Чтобы было проще разобраться в коде, откроем также языковый файл:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.feedback/feedback/lang/ru/template.php\r\n */\r\n$MESS[\'MFT_NAME\'] = \"Ваше имя\";\r\n$MESS[\'MFT_EMAIL\'] = \"Ваш E-mail\";\r\n$MESS[\'MFT_MESSAGE\'] = \"Сообщение\";\r\n$MESS[\'MFT_CAPTCHA\'] = \"Защита от автоматических сообщений\";\r\n$MESS[\'MFT_CAPTCHA_CODE\'] = \"Введите слово на картинке\";\r\n$MESS[\'MFT_SUBMIT\'] = \"Отправить\";\r\n[/php]\r\n<p>\r\nИ будем держать перед глазами шаблон формы обратной связи от верстальщика:\r\n</p>\r\n[html]\r\n<form>\r\n    <div class=\"form_details\">\r\n        <input type=\"text\" class=\"text\" value=\"Name\" placeholder=\"Name\">\r\n        <input type=\"text\" class=\"text\" value=\"Email Address\" placeholder=\"Email Address\">\r\n        <input type=\"text\" class=\"text\" value=\"Subject\" placeholder=\"Subject\">\r\n        <textarea value=\"Message\" placeholder=\"Message\">Message</textarea>\r\n        <div class=\"clearfix\"> </div>\r\n        <div class=\"sub-button\">\r\n           <input type=\"submit\" value=\"Send message\">\r\n        </div>\r\n    </div>\r\n</form>\r\n[/html]\r\n<p>\r\nПосле редактирования шаблон компонента получился таким:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.feedback/feedback/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n/**\r\n * Bitrix vars\r\n *\r\n * @var array $arParams\r\n * @var array $arResult\r\n * @var CBitrixComponentTemplate $this\r\n * @global CMain $APPLICATION\r\n * @global CUser $USER\r\n */\r\n?>\r\n<div class=\"mfeedback\">\r\n\r\n<?php /* сообщение об ошибке */\r\nif(!empty($arResult[\"ERROR_MESSAGE\"])) {\r\n    foreach($arResult[\"ERROR_MESSAGE\"] as $v) {\r\n        ShowError($v);\r\n    }\r\n}\r\n?>\r\n\r\n<?php if (strlen($arResult[\"OK_MESSAGE\"]) > 0): /* сообщение об успешной отправке формы */ ?>\r\n    <div class=\"mf-ok-text\"><?= $arResult[\"OK_MESSAGE\"]; ?></div>\r\n<?php endif; ?>\r\n\r\n<form action=\"<?= POST_FORM_ACTION_URI; ?>\" method=\"POST\">\r\n    <div class=\"form_details\">\r\n\r\n        <?= bitrix_sessid_post(); ?>\r\n\r\n        <div class=\"mf-name clearfix\"> <!-- поле «Ваше имя» -->\r\n            <div class=\"mf-text\">\r\n                <?= GetMessage(\"MFT_NAME\"); ?>\r\n                <?php if (empty($arParams[\"REQUIRED_FIELDS\"]) || in_array(\"NAME\", $arParams[\"REQUIRED_FIELDS\"])): /* поле обязательно для заполнения? */ ?>\r\n                    <span class=\"mf-req\">*</span>\r\n                <?php endif; ?>\r\n            </div>\r\n            <input type=\"text\" name=\"user_name\" value=\"<?= $arResult[\"AUTHOR_NAME\"]; ?>\" placeholder=\"<?= GetMessage(\"MFT_NAME\"); ?>\">\r\n        </div>\r\n\r\n        <div class=\"mf-email clearfix\"> <!-- поле «Ваш e-mail» -->\r\n            <div class=\"mf-text\">\r\n                <?= GetMessage(\"MFT_EMAIL\"); ?>\r\n                <?php if (empty($arParams[\"REQUIRED_FIELDS\"]) || in_array(\"EMAIL\", $arParams[\"REQUIRED_FIELDS\"])): /* поле обязательно для заполнения? */ ?>\r\n                    <span class=\"mf-req\">*</span>\r\n                <?php endif; ?>\r\n            </div>\r\n            <input type=\"text\" name=\"user_email\" value=\"<?=$arResult[\"AUTHOR_EMAIL\"]?>\" placeholder=\"<?= GetMessage(\"MFT_EMAIL\"); ?>\">\r\n        </div>\r\n\r\n        <div class=\"mf-message clearfix\"> <!-- поле «Сообщение» -->\r\n            <div class=\"mf-text\">\r\n                <?= GetMessage(\"MFT_MESSAGE\"); ?>\r\n                <?php if (empty($arParams[\"REQUIRED_FIELDS\"]) || in_array(\"MESSAGE\", $arParams[\"REQUIRED_FIELDS\"])): /* поле обязательно для заполнения? */ ?>\r\n                    <span class=\"mf-req\">*</span>\r\n                <?php endif; ?>\r\n            </div>\r\n            <textarea name=\"MESSAGE\" placeholder=\"<?= GetMessage(\"MFT_MESSAGE\"); ?>\"><?= $arResult[\"MESSAGE\"]; ?></textarea>\r\n        </div>\r\n\r\n        <?php if($arParams[\"USE_CAPTCHA\"] == \"Y\"): ?> <!-- CAPTCHA -->\r\n            <div class=\"mf-captcha\">\r\n                <div class=\"mf-text\"><?= GetMessage(\"MFT_CAPTCHA\"); ?></div>\r\n                <input type=\"hidden\" name=\"captcha_sid\" value=\"<?= $arResult[\"capCode\"]; ?>\">\r\n                <img src=\"/bitrix/tools/captcha.php?captcha_sid=<?= $arResult[\"capCode\"]; ?>\" width=\"180\" height=\"40\" alt=\"CAPTCHA\">\r\n                <div class=\"mf-text\"><?= GetMessage(\"MFT_CAPTCHA_CODE\"); ?><span class=\"mf-req\">*</span></div>\r\n                <input type=\"text\" name=\"captcha_word\" size=\"30\" maxlength=\"50\" value=\"\">\r\n            </div>\r\n        <?php endif; ?>\r\n\r\n        <input type=\"hidden\" name=\"PARAMS_HASH\" value=\"<?= $arResult[\"PARAMS_HASH\"]; ?>\">\r\n\r\n        <div class=\"sub-button\">\r\n            <input type=\"submit\" name=\"submit\" value=\"<?= GetMessage(\"MFT_SUBMIT\"); ?>\"> <!-- кнопка отправки формы -->\r\n        </div>\r\n\r\n    </div>\r\n</form>\r\n</div>\r\n[/phtml]\r\n<p>\r\nЕсли что-то выглядит не так, можно подправить файл стилей компонента:\r\n</p>\r\n[css]\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.feedback/feedback/style.css\r\n */\r\ndiv.mfeedback {}\r\ndiv.mf-name, div.mf-email, div.mf-captcha, div.mf-message {\r\n    width: 100%;\r\n    padding-bottom: 0.4em;\r\n}\r\ndiv.mf-name input, div.mf-email input {\r\n    width: 60%;\r\n}\r\ndiv.mf-message textarea {\r\n    /* width: 60%; */\r\n}\r\nspan.mf-req {\r\n    color: red;\r\n}\r\ndiv.mf-ok-text {\r\n    color: green;\r\n    font-weight: bold;\r\n    padding-bottom: 1em;\r\n}\r\n[/css]','2018-07-13 15:40:27',1),(166,17,'Битрикс. Галерея для элемента инфоблока','','','CMS, Web-разработка, Битрикс, Галерея, Изображение, Инфоблок, Коллекция, ЭлементИнфоблока','Задача: добавить возможность прикреплять несколько изображений для каждой статьи блога. Добавим новое пользовательское свойство для инфоблока «Блог». Тип свойства — «Файл», множественное (можно добавить несколько файлов), код — GALLERY, в настройках свойства указываем тип загружаемых файлов — «Изображения».','<p>\r\nЗадача: добавить возможность прикреплять несколько изображений для каждой статьи блога. Добавим новое пользовательское свойство для инфоблока «Блог». Тип свойства — «Файл», множественное (можно добавить несколько файлов), код — GALLERY, в настройках свойства указываем тип загружаемых файлов — «Изображения».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/166/1.jpg\" class=\"zoom\"><img src=\"/files/blog/166/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/166/2.jpg\" class=\"zoom\"><img src=\"/files/blog/166/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТеперь добавим для какой-нибудь статьи блога несколько изображений:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/166/3.jpg\" class=\"zoom\"><img src=\"/files/blog/166/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЗа показ статей блога отвечает комплексный компонент «Новости». Распечатаем массив <code>$arResult</code>, чтобы увидеть доступные переменные:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/voguis_blog/components/bitrix/news/blog/bitrix/news.detail/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n$this->setFrameMode(true);\r\n// массив доступных переменных\r\ndebug($arResult);\r\n?>\r\n\r\n<img src=\"<?=$arResult[\'DETAIL_PICTURE\'][\'SRC\'];?>\" class=\"img-responsive\" alt=\"<?=$arResult[\'DETAIL_PICTURE\'][\'ALT\'];?>\">\r\n\r\n<?= $arResult[\'DETAIL_TEXT\']; /* текст статьи */ ?>\r\n\r\n<div class=\"artical-links\">\r\n    <ul>\r\n        <li><small> </small><span><?= $arResult[\'DISPLAY_ACTIVE_FROM\']; ?></span></li>\r\n        <li><a href=\"#\"><small class=\"admin\"> </small><span><?= $arResult[\'PROPERTIES\'][\'AUTHOR\'][\'VALUE\']; ?></span></a></li>\r\n        <li><a href=\"#\"><small class=\"no\"> </small><span>Нет комментариев</span></a></li>\r\n        <li><a href=\"#\"><small class=\"posts\"> </small><span>Количество просмотров: <?=$arResult[\'SHOW_COUNTER\'] ? $arResult[\'SHOW_COUNTER\'] : 0;?></span></a></li>\r\n        <li><a href=\"<?= $arResult[\'DETAIL_PAGE_URL\']; ?>\"><small class=\"link\"> </small><span>Постоянная ссылка</span></a></li>\r\n    </ul>\r\n</div>\r\n[/phtml]\r\n[code]\r\nArray\r\n(\r\n    [SHOW_COUNTER] => 5\r\n    [ID] => 8\r\n    [NAME] => Восьмая статья блога\r\n    [IBLOCK_ID] => 1\r\n    [IBLOCK_SECTION_ID] => 4\r\n    .....\r\n    [PROPERTIES] => Array\r\n        (\r\n            [AUTHOR] => Array(.....)\r\n            [SHOW_MAIN] => Array(.....)\r\n            [GALLERY] => Array\r\n                (\r\n                    [ID] => 5\r\n                    [TIMESTAMP_X] => 2018-07-14 11:32:52\r\n                    [IBLOCK_ID] => 1\r\n                    [NAME] => Галерея\r\n                    [ACTIVE] => Y\r\n                    [SORT] => 500\r\n                    [CODE] => GALLERY\r\n                    .....\r\n                    [red][VALUE] => Array\r\n                        (\r\n                            [0] => 30\r\n                            [1] => 31\r\n                            [2] => 32\r\n                            [3] => 33\r\n                            [4] => 34\r\n                            [5] => 35\r\n                        )[/red]\r\n                    .....\r\n                )\r\n        )\r\n    [DISPLAY_PROPERTIES] => Array(.....)\r\n    [IBLOCK] => Array(.....)\r\n    [SECTION] => Array(.....)\r\n    [SECTION_URL] => \r\n    [META_TAGS] => Array(.....)\r\n)\r\n[/code]\r\n<p>\r\nУ нас есть идентификаторы файлов изображений, нам надо получить пути к файлам с помощью метода <code>CFile::GetPath()</code>. И создать миниатюры изображений с помощью метода <code>CFile::ResizeImageGet()</code>:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/voguis_blog/components/bitrix/news/blog/bitrix/news.detail/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<img src=\"<?=$arResult[\'DETAIL_PICTURE\'][\'SRC\'];?>\" class=\"img-responsive\" alt=\"<?=$arResult[\'DETAIL_PICTURE\'][\'ALT\'];?>\">\r\n\r\n<?= $arResult[\'DETAIL_TEXT\']; /* текст статьи */ ?>\r\n\r\n<?php if (!empty($arResult[\'PROPERTIES\'][\'GALLERY\'][\'VALUE\'])): /* галерея изображений к статье блога */ ?>\r\n    <div class=\"gallery\">\r\n    <?php foreach ($arResult[\'PROPERTIES\'][\'GALLERY\'][\'VALUE\'] as $item): ?>\r\n        <?php\r\n        // путь к изображению от корня сайта\r\n        $image = CFile::GetPath($item);\r\n        // создаем превьюшку изображения\r\n        $thumb = CFile::ResizeImageGet(\r\n            $item,\r\n            array(\'width\' => 200, \'height\' => 100)\r\n        );\r\n        ?>\r\n        <a href=\"<?= $image; ?>\"><img src=\"<?= $thumb[\'src\']; ?>\" alt=\"\" /></a>\r\n    <?php endforeach; ?>\r\n    </div>\r\n<?php endif; ?>\r\n\r\n<div class=\"artical-links\">\r\n    <ul>\r\n        <li><small> </small><span><?= $arResult[\'DISPLAY_ACTIVE_FROM\']; ?></span></li>\r\n        <li><a href=\"#\"><small class=\"admin\"> </small><span><?= $arResult[\'PROPERTIES\'][\'AUTHOR\'][\'VALUE\']; ?></span></a></li>\r\n        <li><a href=\"#\"><small class=\"no\"> </small><span>Нет комментариев</span></a></li>\r\n        <li><a href=\"#\"><small class=\"posts\"> </small><span>Количество просмотров: <?=$arResult[\'SHOW_COUNTER\'] ? $arResult[\'SHOW_COUNTER\'] : 0;?></span></a></li>\r\n        <li><a href=\"<?= $arResult[\'DETAIL_PAGE_URL\']; ?>\"><small class=\"link\"> </small><span>Постоянная ссылка</span></a></li>\r\n    </ul>\r\n</div>\r\n[/phtml]\r\n<div class=\"note\">\r\n[php]\r\nCFile::GetPath(\r\n   int file_id\r\n)\r\n[/php]\r\n<p>\r\nМетод возвращает путь от корня сайта к зарегистрированному файлу. Возвращает <code>NULL</code>, если файл не зарегистрирован.\r\n</p>\r\n</div>\r\n<div class=\"note\">\r\n[php]\r\narray CFile::ResizeImageGet( \r\n    mixed file, \r\n    array arSize, \r\n    const resizeType = BX_RESIZE_IMAGE_PROPORTIONAL, \r\n    bool bInitSizes = false,\r\n    array arFilters = false,\r\n    bool bImmediate = false,\r\n    bool jpgQuality = false\r\n);\r\n[/php]\r\n<p>\r\nМетод возвращает массив вида:\r\n</p>\r\n[php]\r\narray(\r\n    \'src\',    // путь к уменьшенной картинке относительно корня сайта\r\n    \'width\',  // если bInitSizes = true ширина уменьшенной картинки, иначе 0\r\n    \'height\', // если bInitSizes = true высота уменьшенной картинки, иначе 0\r\n)\r\n[/php]\r\n<p>\r\nМетод уменьшает картинку и размещает уменьшенную копию в папку <code>/upload/resize_cache/путь</code>. Один раз уменьшив изображение получаем физический файл, который позволяет при последующих обращениях не проводить операции по уменьшению изображения. При следующем вызове метод вернет путь к уменьшенному файлу. Статический метод.\r\n</p>\r\n</div>\r\n<p>\r\nНу и набросаем стили для галереи изображений:\r\n</p>\r\n[css]\r\n/*\r\n * Файл local/templates/voguis_blog/components/bitrix/news/blog/bitrix/news.detail/.default/style.css\r\n */\r\n.gallery {\r\n\r\n}\r\n    .gallery a img {\r\n        border: 1px solid #ddd;\r\n        padding: 10px;\r\n        margin: 10px;\r\n    }\r\n    .gallery a img:hover {\r\n        box-shadow: 0 0 10px #ddd;\r\n    }\r\n[/css]\r\n<p>\r\n<a href=\"/files/blog/166/4.jpg\" class=\"zoom\"><img src=\"/files/blog/166/4.jpg\" alt=\"\" /></a>\r\n</p>','2018-07-14 11:36:39',1),(167,17,'Битрикс. Регистрация и авторизация. Часть 1','','','CMS, Web-разработка, Авторизация, Битрикс, Компонент, Регистрация, Форма, ШаблонКомпонента','Самый простой вариант создания страницы регистрации, авторизации, восстановления пароля — создать раздел auth и в файле /auth/index.php определить константу NEED_AUTH. После этого надо кастомизоровать шаблоны системных компонентов system.auth.registration, system.auth.authorize, system.auth.forgotpasswd…','<p>\r\nСамый простой вариант создания страницы регистрации, авторизации, восстановления пароля — создать раздел <code>auth</code> и в самом начале файла <code>/auth/index.php</code> определить константу <code>NEED_AUTH</code>. \r\n</p>\r\n[phtml]\r\n<?php\r\n// обратите внимание на эту константу\r\ndefine(\"NEED_AUTH\", true);\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Авторизация и регистрация\");\r\n?>\r\n\r\n<p>Вы зарегистрированы и успешно авторизовались.</p>\r\n\r\n<?php\r\n// ссылка для выхода из личного кабинета\r\n$logout = $APPLICATION->GetCurPageParam(\r\n    \"logout=yes\",\r\n    array(\r\n        \"login\",\r\n        \"logout\",\r\n        \"register\",\r\n        \"forgot_password\",\r\n        \"change_password\"\r\n    )\r\n);\r\n?>\r\n<p><a href=\"<?= $logout; ?>\">Выйти</a></p>\r\n\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\");\r\n?>\r\n[/phtml]\r\n<p>\r\nПосле этого регистрация и авторизация уже работает:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/167/1.jpg\" class=\"zoom\"><img src=\"/files/blog/167/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/167/2.jpg\" class=\"zoom\"><img src=\"/files/blog/167/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/167/3.jpg\" class=\"zoom\"><img src=\"/files/blog/167/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТеперь нам надо кастомизоровать шаблоны системных компонентов:\r\n</p>\r\n<ul>\r\n  <li><code>system.auth.registration</code></li>\r\n  <li><code>system.auth.authorize</code></li>\r\n  <li><code>system.auth.forgotpasswd</code></li>\r\n  <li><code>system.auth.changepasswd</code></li>\r\n</ul>\r\n<p>\r\nДля этого копируем:\r\n</p>\r\n<ul>\r\n  <li><code>bitrix/components/bitrix/system.auth.registration/templates/.default</code> в <code>local/templates/.default/components/bitrix/system.auth.registration/.default</code></li>\r\n  <li><code>bitrix/components/bitrix/system.auth.authorize/templates/.default</code> в <code>local/templates/.default/components/bitrix/system.auth.authorize/.default</code></li>\r\n  <li><code>bitrix/components/bitrix/system.auth.forgotpasswd/templates/.default</code> в <code>local/templates/.default/components/bitrix/system.auth.forgotpasswd/.default</code></li>\r\n  <li><code>bitrix/components/bitrix/system.auth.changepasswd/templates/.default</code> в <code>local/templates/.default/components/bitrix/system.auth.changepasswd/.default</code></li>\r\n</ul>\r\n\r\n<h2>Шаблон компонента system.auth.registration</h2>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.registration/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n?>\r\n\r\n<div class=\"system-auth-registration\">\r\n\r\n<h2><?= GetMessage(\'SYS_AUTH_REGISTRATION_TITLE\'); /* заголовок формы */ ?></h2>\r\n\r\n<?php\r\n// сообщение о том, как закончилась операция регистрации\r\nShowMessage($arParams[\"~AUTH_RESULT\"]);\r\n?>\r\n\r\n<?php if ($arResult[\"USE_EMAIL_CONFIRMATION\"] === \"Y\"\r\n          && is_array($arParams[\"AUTH_RESULT\"])\r\n          && $arParams[\"AUTH_RESULT\"][\"TYPE\"] === \"OK\"): ?>\r\n    <p><?= GetMessage(\'SYS_AUTH_REGISTRATION_EMAIL_SENT\'); /* отправлено письмо для подтверждения */ ?></p>\r\n    </div>\r\n    <?php return; ?>\r\n<?php endif; ?>\r\n\r\n<?php if ($arResult[\"USE_EMAIL_CONFIRMATION\"] === \"Y\"): ?>\r\n    <p><?= GetMessage(\'SYS_AUTH_REGISTRATION_EMAIL_HELP\'); /* будет отправлено письмо для подтверждения */ ?></p>\r\n<?php endif; ?>\r\n\r\n<form method=\"post\" action=\"<?= $arResult[\"AUTH_URL\"]; ?>\" name=\"bform\" enctype=\"multipart/form-data\">\r\n\r\n    <?php if (strlen($arResult[\"BACKURL\"]) > 0): ?>\r\n        <input type=\"hidden\" name=\"backurl\" value=\"<?= $arResult[\"BACKURL\"]; ?>\" />\r\n    <?php endif; ?>\r\n\r\n    <input type=\"hidden\" name=\"AUTH_FORM\" value=\"Y\" />\r\n    <input type=\"hidden\" name=\"TYPE\" value=\"REGISTRATION\" />\r\n\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_REGISTRATION_FNAME\'); /* имя пользователя */ ?>\r\n        </span>\r\n        <span>\r\n            <input type=\"text\" name=\"USER_NAME\" maxlength=\"50\"\r\n                   value=\"<?= $arResult[\"USER_NAME\"]; ?>\" />\r\n        </span>\r\n    </div>\r\n\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_REGISTRATION_LNAME\'); /* фамилия пользователя */ ?>\r\n        </span>\r\n        <span>\r\n            <input type=\"text\" name=\"USER_LAST_NAME\" maxlength=\"50\"\r\n                   value=\"<?= $arResult[\"USER_LAST_NAME\"]; ?>\" />\r\n        </span>\r\n    </div>\r\n\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_REGISTRATION_LOGIN\'); /* логин пользователя */ ?>\r\n            <i>*</i> <!-- поле обязательно для заполнения -->\r\n        </span>\r\n        <span>\r\n            <input type=\"text\" name=\"USER_LOGIN\" maxlength=\"50\"\r\n                   value=\"<?= $arResult[\"USER_LOGIN\"]; ?>\" />\r\n        </span>\r\n    </div>\r\n\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_REGISTRATION_EMAIL\'); /* e-mail пользователя */ ?>\r\n            <?php if ($arResult[\"EMAIL_REQUIRED\"]): ?>\r\n                <i>*</i> <!-- поле обязательно для заполнения -->\r\n            <?php endif; ?>\r\n        </span>\r\n        <span>\r\n            <input type=\"text\" name=\"USER_EMAIL\" maxlength=\"255\" value=\"<?= $arResult[\"USER_EMAIL\"]; ?>\" />\r\n        </span>\r\n    </div>\r\n\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_REGISTRATION_PASSWORD\'); /* пароль пользователя */ ?>\r\n            <i>*</i> <!-- поле обязательно для заполнения -->\r\n        </span>\r\n        <span>\r\n            <input type=\"password\" name=\"USER_PASSWORD\" maxlength=\"50\"\r\n                   value=\"<?= $arResult[\"USER_PASSWORD\"]; ?>\" autocomplete=\"off\" />\r\n        </span>\r\n    </div>\r\n\r\n    <?php if ($arResult[\"SECURE_AUTH\"]): /* безопасная авторизация (зашифрованная передача пароля) */ ?>\r\n        <!-- код удален -->\r\n    <?php endif; ?>\r\n\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_REGISTRATION_CONFIRM\'); /* подтверждение пароля */ ?>\r\n            <i>*</i> <!-- поле обязательно для заполнения -->\r\n        </span>\r\n        <span>\r\n            <input type=\"password\" name=\"USER_CONFIRM_PASSWORD\" maxlength=\"50\"\r\n                   value=\"<?= $arResult[\"USER_CONFIRM_PASSWORD\"]; ?>\" autocomplete=\"off\" />\r\n        </span>\r\n    </div>\r\n\r\n    <?php if ($arResult[\"USER_PROPERTIES\"][\"SHOW\"] == \"Y\"): /* User properties */ ?>\r\n        <?php\r\n            echo\r\n            strlen(trim($arParams[\"USER_PROPERTY_NAME\"])) > 0\r\n            ?\r\n            $arParams[\"USER_PROPERTY_NAME\"]\r\n            :\r\n            GetMessage(\"USER_TYPE_EDIT_TAB\");\r\n        ?>\r\n        <?php foreach ($arResult[\"USER_PROPERTIES\"][\"DATA\"] as $FIELD_NAME => $arUserField): ?>\r\n            <?php if ($arUserField[\"MANDATORY\"]==\"Y\"):?>\r\n                <i>*</i> <!-- поле обязательно для заполнения -->\r\n            <?php endif; ?>\r\n            <?= $arUserField[\"EDIT_FORM_LABEL\"]?>:\r\n            <?php\r\n            $APPLICATION->IncludeComponent(\r\n                \"bitrix:system.field.edit\",\r\n                $arUserField[\"USER_TYPE\"][\"USER_TYPE_ID\"],\r\n                array(\r\n                    \"bVarsFromForm\" => $arResult[\"bVarsFromForm\"],\r\n                    \"arUserField\" => $arUserField,\r\n                    \"form_name\" => \"bform\"\r\n                ),\r\n                null,\r\n                array(\"HIDE_ICONS\"=>\"Y\")\r\n            );\r\n            ?>\r\n        <?php endforeach; ?>\r\n    <?php endif; ?>\r\n\r\n    <?php if ($arResult[\"USE_CAPTCHA\"] == \"Y\"): /* использовать CAPTCHA? */ ?>\r\n        <div class=\"captcha\">\r\n            <h3><?= GetMessage(\'SYS_AUTH_REGISTRATION_CAPTCHA_TITLE\'); /* Защита от роботов */ ?></h3>\r\n            <input type=\"hidden\" name=\"captcha_sid\" value=\"<?= $arResult[\"CAPTCHA_CODE\"]; ?>\" />\r\n            <img src=\"/bitrix/tools/captcha.php?captcha_sid=<?= $arResult[\"CAPTCHA_CODE\"]; ?>\"\r\n                 width=\"180\" height=\"40\" alt=\"\" />\r\n            <span>\r\n                <?= GetMessage(\'SYS_AUTH_REGISTRATION_CAPTCHA_TEXT\'); /* введите код с картинки */ ?>\r\n                <i>*</i> <!-- поле обязательно для заполнения -->\r\n            </span>\r\n            <span>\r\n                <input type=\"text\" name=\"captcha_word\" maxlength=\"50\" value=\"\" />\r\n            </span>\r\n        </div>\r\n    <?php endif;  ?>\r\n\r\n    <?php\r\n    $APPLICATION->IncludeComponent( /* запрос согласия пользователя */\r\n        \"bitrix:main.userconsent.request\",\r\n        \"\",\r\n        array(\r\n            \"ID\" => COption::getOptionString(\"main\", \"new_user_agreement\", \"\"),\r\n            \"IS_CHECKED\" => \"Y\",\r\n            \"AUTO_SAVE\" => \"N\",\r\n            \"IS_LOADED\" => \"Y\",\r\n            \"ORIGINATOR_ID\" => $arResult[\"AGREEMENT_ORIGINATOR_ID\"],\r\n            \"ORIGIN_ID\" => $arResult[\"AGREEMENT_ORIGIN_ID\"],\r\n            \"INPUT_NAME\" => $arResult[\"AGREEMENT_INPUT_NAME\"],\r\n            \"REPLACE\" => array(\r\n                \"button_caption\" => GetMessage(\"AUTH_REGISTER\"),\r\n                \"fields\" => array(\r\n                    rtrim(GetMessage(\"AUTH_NAME\"), \":\"),\r\n                    rtrim(GetMessage(\"AUTH_LAST_NAME\"), \":\"),\r\n                    rtrim(GetMessage(\"AUTH_LOGIN_MIN\"), \":\"),\r\n                    rtrim(GetMessage(\"AUTH_PASSWORD_REQ\"), \":\"),\r\n                    rtrim(GetMessage(\"AUTH_EMAIL\"), \":\"),\r\n                )\r\n            ),\r\n        )\r\n    );\r\n    ?>\r\n    <div class=\"submit\">\r\n        <input type=\"submit\" name=\"Register\"\r\n               value=\"<?= GetMessage(\'SYS_AUTH_REGISTRATION_SUBMIT\'); /* кнопка отправки формы */ ?>\" />\r\n    </div>\r\n\r\n</form>\r\n\r\n<p><?= GetMessage(\'SYS_AUTH_REGISTRATION_LOGIN_LEN\'); /* предупреждение о min длине логина */ ?></p>\r\n\r\n<p><?= $arResult[\"GROUP_POLICY\"][\"PASSWORD_REQUIREMENTS\"]; /* предупреждение о min длине пароля */ ?></p>\r\n\r\n<p>\r\n    <i>*</i> <?= GetMessage(\'SYS_AUTH_REGISTRATION_REQUIRED\'); /* Эти поля обязательны для заполнения */ ?>\r\n</p>\r\n\r\n<p>\r\n    <a href=\"<?= $arResult[\"AUTH_AUTH_URL\"]; ?>\" rel=\"nofollow\">\r\n        <?= GetMessage(\'SYS_AUTH_REGISTRATION_AUTH\'); /* ссылка на страницу авторизации */ ?>\r\n    </a>\r\n</p>\r\n\r\n<script type=\"text/javascript\">\r\ndocument.bform.USER_NAME.focus();\r\n</script>\r\n\r\n</div>\r\n[/phtml]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.registration/.default/lang/ru/template.php\r\n */\r\n$MESS[\'SYS_AUTH_REGISTRATION_TITLE\']         = \'Регистрация\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_EMAIL_HELP\']    = \'На указанный в форме e-mail придет запрос на подтверждение регистрации.\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_EMAIL_SENT\']    = \'На указанный в форме e-mail было выслано письмо с информацией\r\nо подтверждении регистрации.\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_FNAME\']         = \'Имя\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_LNAME\']         = \'Фамилия\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_LOGIN\']         = \'Логин\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_PASSWORD\']      = \'Пароль\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_CONFIRM\']       = \'Подтверждение пароля\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_EMAIL\']         = \'E-mail\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_CAPTCHA_TITLE\'] = \'Защита от автоматической регистрации\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_CAPTCHA_TEXT\']  = \'Введите символы с картинки\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_SUBMIT\']        = \'Регистрация\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_LOGIN_LEN\']     = \'Логин должен быть не менее 3 символов длиной.\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_REQUIRED\']      = \'Эти поля обязательны для заполнения\';\r\n$MESS[\'SYS_AUTH_REGISTRATION_AUTH\']          = \'Авторизация\';\r\n[/php]\r\n\r\n[css]\r\n.system-auth-registration {\r\n\r\n}\r\n    .system-auth-registration > p {\r\n        margin: 1em 0;\r\n    }\r\n        .system-auth-registration > p > a {\r\n            text-decoration: underline;\r\n        }\r\n    .system-auth-registration > form {\r\n        overflow: hidden;\r\n    }\r\n        .system-auth-registration > form > div {\r\n            width: 50%;\r\n            margin-bottom: 15px;\r\n            float: left;\r\n            box-sizing: border-box;\r\n        }\r\n        .system-auth-registration > form > div.captcha {\r\n            border: 1px solid #ccc;\r\n            padding: 20px 15px 15px 15px;\r\n            position: relative;\r\n            margin-top: 15px;\r\n            width: 49%;\r\n            clear: both;\r\n        }\r\n            .system-auth-registration > form > div.captcha > h3 {\r\n                position: absolute;\r\n                top: -10px;\r\n                font-weight: normal;\r\n                font-size: 16px;\r\n                background: #eee;\r\n                padding: 0 10px;\r\n                color: #999;\r\n            }\r\n            .system-auth-registration > form > div.captcha > span:first-of-type {\r\n                margin-top: 10px;\r\n            }\r\n        .system-auth-registration > form > div:nth-of-type(even) {\r\n            padding-left: 1%;\r\n        }\r\n        .system-auth-registration > form > div:nth-of-type(odd) {\r\n            padding-right: 1%;\r\n        }\r\n            .system-auth-registration > form > div > span {\r\n                display: block;\r\n            }\r\n            .system-auth-registration > form > div > span:first-child {\r\n                margin-bottom: 5px;\r\n            }\r\n                .system-auth-registration > form > div > span > input[type=\"text\"],\r\n                .system-auth-registration > form > div > span > input[type=\"password\"] {\r\n                    width: 100%;\r\n                    padding: 5px;\r\n                    border:1px solid #ccc;\r\n                }\r\n            .system-auth-registration > form > div.submit {\r\n                float: none;\r\n                padding-left: 0;\r\n            }\r\n            .system-auth-registration > form > div.submit > input[type=\"submit\"] {\r\n                width: 30%;\r\n                padding: 5px;\r\n                background: #333;\r\n                color: #fff;\r\n                border: none;\r\n                margin-top: 10px;\r\n            }\r\n    .system-auth-registration i {\r\n        font-style: normal;\r\n        font-weight: bold;\r\n        color: #f00;\r\n    }\r\n[/css]\r\n<p>\r\n<a href=\"/files/blog/167/4.jpg\" class=\"zoom\"><img src=\"/files/blog/167/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/167/5.jpg\" class=\"zoom\"><img src=\"/files/blog/167/5.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<h2>Шаблон компонента system.auth.authorize</h2>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.authorize/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n?>\r\n\r\n<div class=\"system-auth-authorize\">\r\n\r\n<h2><?= GetMessage(\'SYS_AUTH_AUTHORIZE_TITLE\'); /* заголовок формы */ ?></h2>\r\n\r\n<?php\r\n// сообщение, как прошла операция авторизации\r\nShowMessage($arParams[\"~AUTH_RESULT\"]);\r\n// сообщение об ошибке при авторизации\r\nShowMessage($arResult[\'ERROR_MESSAGE\']);\r\n?>\r\n\r\n<form name=\"form_auth\" method=\"post\" target=\"_top\" action=\"<?= $arResult[\"AUTH_URL\"]; ?>\">\r\n\r\n    <input type=\"hidden\" name=\"AUTH_FORM\" value=\"Y\" />\r\n    <input type=\"hidden\" name=\"TYPE\" value=\"AUTH\" />\r\n\r\n    <?php if (strlen($arResult[\"BACKURL\"]) > 0): ?>\r\n        <input type=\"hidden\" name=\"backurl\" value=\"<?= $arResult[\"BACKURL\"]; ?>\" />\r\n    <?php endif; ?>\r\n\r\n    <?php foreach ($arResult[\"POST\"] as $key => $value): /* передача полученных POST-параметров */ ?>\r\n        <input type=\"hidden\" name=\"<?= $key; ?>\" value=\"<?= $value; ?>\" />\r\n    <?php endforeach; ?>\r\n\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_AUTHORIZE_LOGIN\'); /* поле логин */ ?>\r\n        </span>\r\n        <span>\r\n            <input type=\"text\" name=\"USER_LOGIN\" maxlength=\"255\" value=\"<?= $arResult[\"LAST_LOGIN\"]; ?>\"/>\r\n        </span>\r\n    </div>\r\n\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_AUTHORIZE_PASSWORD\'); /* поле пароль */ ?>\r\n        </span>\r\n        <span>\r\n            <input type=\"password\" name=\"USER_PASSWORD\" maxlength=\"255\" autocomplete=\"off\" />\r\n        </span>\r\n    </div>\r\n\r\n    <?php if ($arResult[\"SECURE_AUTH\"]): /* безопасная авторизация (зашифрованная передача пароля) */ ?>\r\n        <!-- код удален -->\r\n    <?php endif; ?>\r\n\r\n    <?php if ($arResult[\"CAPTCHA_CODE\"]): /* если используется CAPTCHA */ ?>\r\n        <div class=\"captcha\">\r\n            <h3><?= GetMessage(\'SYS_AUTH_AUTHORIZE_CAPTCHA_TITLE\'); /* Защита от роботов */ ?></h3>\r\n            <input type=\"hidden\" name=\"captcha_sid\" value=\"<?= $arResult[\"CAPTCHA_CODE\"]; ?>\" />\r\n            <img src=\"/bitrix/tools/captcha.php?captcha_sid=<?= $arResult[\"CAPTCHA_CODE\"]; ?>\"\r\n                 width=\"180\" height=\"40\" alt=\"\" />\r\n            <span>\r\n                <?= GetMessage(\'SYS_AUTH_AUTHORIZE_CAPTCHA_TEXT\'); /* введите код с картинки */ ?>\r\n                <i>*</i> <!-- поле обязательно для заполнения -->\r\n            </span>\r\n            <span>\r\n                <input type=\"text\" name=\"captcha_word\" maxlength=\"50\" value=\"\" size=\"15\" />\r\n            </span>\r\n        </div>\r\n    <?php endif; ?>\r\n\r\n    <?php if ($arResult[\"STORE_PASSWORD\"] == \"Y\"): /* checkbox «Запомнить меня» */ ?>\r\n        <div class=\"remember\">\r\n            <input type=\"checkbox\" id=\"USER_REMEMBER\" name=\"USER_REMEMBER\" value=\"Y\" />\r\n            <label for=\"USER_REMEMBER\"><?= GetMessage(\'SYS_AUTH_AUTHORIZE_REMEMBER\'); ?></label>\r\n        </div>\r\n    <?php endif; ?>\r\n\r\n    <div class=\"submit\">\r\n        <input type=\"submit\" name=\"Login\"\r\n               value=\"<?= GetMessage(\'SYS_AUTH_AUTHORIZE_SUBMIT\'); /* кнопка отправки формы */ ?>\" />\r\n    </div>\r\n\r\n</form>\r\n\r\n<?php if ($arParams[\"NOT_SHOW_LINKS\"] != \"Y\"): /* ссылка для восстановления пароля */ ?>\r\n    <p>\r\n        <a href=\"<?= $arResult[\"AUTH_FORGOT_PASSWORD_URL\"]; ?>\" rel=\"nofollow\">\r\n        <?= GetMessage(\'SYS_AUTH_AUTHORIZE_FORGOT\'); ?>\r\n        </a>\r\n    </p>\r\n<?php endif; ?>\r\n\r\n<?php\r\n// ссылка на страницу регистрации\r\nif ($arParams[\"NOT_SHOW_LINKS\"] != \"Y\"\r\n    && $arResult[\"NEW_USER_REGISTRATION\"] == \"Y\"\r\n    && $arParams[\"AUTHORIZE_REGISTRATION\"] != \"Y\"):\r\n?>\r\n    <p>\r\n        <a href=\"<?= $arResult[\"AUTH_REGISTER_URL\"]; ?>\" rel=\"nofollow\">\r\n        <?= GetMessage(\'SYS_AUTH_AUTHORIZE_REG_USER\'); ?>\r\n        </a>\r\n    </p>\r\n<?php endif; ?>\r\n\r\n<script type=\"text/javascript\">\r\n<?php if (strlen($arResult[\"LAST_LOGIN\"]) > 0): ?>\r\n    try{document.form_auth.USER_PASSWORD.focus();} catch(e){}\r\n<?php else: ?>\r\n    try{document.form_auth.USER_LOGIN.focus();} catch(e){}\r\n<?php endif; ?>\r\n</script>\r\n\r\n</div>\r\n[/phtml]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.authorize/.default/lang/ru/template.php\r\n */\r\n$MESS[\'SYS_AUTH_AUTHORIZE_TITLE\']         = \'Авторизация\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_LOGIN\']         = \'Логин\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_PASSWORD\']      = \'Пароль\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_REMEMBER\']      = \'Запомнить меня\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_CAPTCHA_TITLE\'] = \'Защита от автоматической регистрации\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_CAPTCHA_TEXT\']  = \'Введите символы с картинки\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_SUBMIT\']        = \'Войти\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_REG_USER\']      = \'Зарегистрироваться\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_FORGOT\']        = \'Забыли пароль?\';\r\n[/php]\r\n\r\n[css]\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.authorize/.default/style.css\r\n */\r\n.system-auth-authorize {\r\n\r\n}\r\n    .system-auth-authorize > p {\r\n        margin: 1em 0;\r\n    }\r\n        .system-auth-authorize > p > a {\r\n            text-decoration: underline;\r\n        }\r\n        .system-auth-authorize > form > div {\r\n            width: 50%;\r\n            margin-bottom: 15px;\r\n        }\r\n            .system-auth-authorize > form > div > span {\r\n                display: block;\r\n            }\r\n            .system-auth-authorize > form > div > span:first-child {\r\n                margin-bottom: 5px;\r\n            }\r\n                .system-auth-authorize > form > div > span > input[type=\"text\"],\r\n                .system-auth-authorize > form > div > span > input[type=\"password\"] {\r\n                    width: 100%;\r\n                    padding: 5px;\r\n                    border:1px solid #ccc;\r\n                }\r\n        .system-auth-authorize > form > div.captcha {\r\n            border: 1px solid #ccc;\r\n            padding: 20px 15px 15px 15px;\r\n            position: relative;\r\n            margin-top: 15px;\r\n            width: 49%;\r\n            clear: both;\r\n        }\r\n            .system-auth-authorize > form > div.captcha > h3 {\r\n                position: absolute;\r\n                top: -10px;\r\n                font-weight: normal;\r\n                font-size: 16px;\r\n                background: #eee;\r\n                padding: 0 10px;\r\n                color: #999;\r\n            }\r\n            .system-auth-authorize > form > div.captcha > span:first-of-type {\r\n                margin-top: 10px;\r\n            }\r\n        .system-auth-authorize > form > div.remember label {\r\n            font-weight: normal;\r\n            cursor: pointer;\r\n            border-bottom: 1px dashed #333;\r\n            position: relative;\r\n            top: -3px;\r\n            margin-left: 5px;\r\n        }\r\n            .system-auth-authorize > form > div.submit > input[type=\"submit\"] {\r\n                width: 30%;\r\n                padding: 5px;\r\n                background: #333;\r\n                color: #fff;\r\n                border: none;\r\n            }\r\n    .system-auth-authorize i {\r\n        font-style: normal;\r\n        font-weight: bold;\r\n        color: #f00;\r\n    }\r\n[/css]\r\n<p>\r\n<a href=\"/files/blog/167/6.jpg\" class=\"zoom\"><img src=\"/files/blog/167/6.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<h2>Шаблон компонента system.auth.forgotpasswd</h2>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.forgotpasswd/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n?>\r\n\r\n<div class=\"system-auth-forgotpasswd\">\r\n\r\n<h2><?= GetMessage(\'SYS_AUTH_FORGOT_TITLE\'); /* заголовок формы */?></h2>\r\n\r\n<?php\r\n// сообщение о результате операции смены пароля\r\nShowMessage($arParams[\"~AUTH_RESULT\"]);\r\n// после отправки письма и вывода сообщания об этом, не нужно больше показывать форму\r\nif (isset($arParams[\"~AUTH_RESULT\"][\'TYPE\']) && $arParams[\"~AUTH_RESULT\"][\'TYPE\'] == \'OK\') {\r\n    echo \'</div>\';\r\n    return;\r\n}\r\n?>\r\n\r\n<p><?= GetMessage(\'SYS_AUTH_FORGOT_HELP\'); /* сообщение о том, как происходит восстановление пароля */?></p>\r\n\r\n<form name=\"bform\" method=\"post\" target=\"_top\" action=\"<?= $arResult[\"AUTH_URL\"]; ?>\">\r\n\r\n    <?php if (strlen($arResult[\"BACKURL\"]) > 0): ?>\r\n        <input type=\"hidden\" name=\"backurl\" value=\"<?= $arResult[\"BACKURL\"]; ?>\" />\r\n    <?php endif; ?>\r\n\r\n    <input type=\"hidden\" name=\"AUTH_FORM\" value=\"Y\">\r\n    <input type=\"hidden\" name=\"TYPE\" value=\"SEND_PWD\">\r\n\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_FORGOT_LOGIN\'); /* логин пользователя */ ?>\r\n        </span>\r\n        <span>\r\n            <input type=\"text\" name=\"USER_LOGIN\" maxlength=\"50\" value=\"<?= $arResult[\"LAST_LOGIN\"]; ?>\" />\r\n        </span>\r\n    </div>\r\n\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_FORGOT_EMAIL\'); /* e-mail пользователя */ ?>\r\n        </span>\r\n        <span>\r\n            <input type=\"text\" name=\"USER_EMAIL\" maxlength=\"255\" value=\"\" />\r\n        </span>\r\n    </div>\r\n\r\n    <?php if ($arResult[\"USE_CAPTCHA\"]): /* использовать CAPTCHA? */ ?>\r\n        <div class=\"captcha\">\r\n            <h3><?= GetMessage(\'SYS_AUTH_FORGOT_CAPTCHA_TITLE\'); /* Защита от роботов */ ?></h3>\r\n            <input type=\"hidden\" name=\"captcha_sid\" value=\"<?= $arResult[\"CAPTCHA_CODE\"]; ?>\" />\r\n            <img src=\"/bitrix/tools/captcha.php?captcha_sid=<?= $arResult[\"CAPTCHA_CODE\"]; ?>\"\r\n                 width=\"180\" height=\"40\" alt=\"CAPTCHA\" />\r\n            <span>\r\n                <?= GetMessage(\'SYS_AUTH_FORGOT_CAPTCHA_TEXT\'); /* введите код с картинки */ ?>\r\n                <i>*</i> <!-- поле обязательно для заполнения -->\r\n            </span>\r\n            <span>\r\n                <input type=\"text\" name=\"captcha_word\" maxlength=\"50\" value=\"\" />\r\n            </span>\r\n        </div>\r\n    <?php endif; ?>\r\n\r\n    <div class=\"submit\">\r\n        <input type=\"submit\" name=\"send_account_info\"\r\n               value=\"<?= GetMessage(\'SYS_AUTH_FORGOT_SUBMIT\'); /* кнопка отправки */ ?>\" />\r\n    </div>\r\n\r\n</form>\r\n\r\n<p>\r\n    <a href=\"<?= $arResult[\"AUTH_AUTH_URL\"]; ?>\">\r\n        <?= GetMessage(\'SYS_AUTH_FORGOT_AUTH\'); /* ссылка на страницу авторизации */ ?>\r\n    </a>\r\n</p>\r\n\r\n<script type=\"text/javascript\">\r\n    document.bform.USER_LOGIN.focus();\r\n</script>\r\n\r\n</div>\r\n[/phtml]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.forgotpasswd/.default/lang/ru/template.php\r\n */\r\n$MESS[\'SYS_AUTH_FORGOT_TITLE\']         = \'Восстановление пароля\';\r\n$MESS[\'SYS_AUTH_FORGOT_HELP\']          = \'Введите логин или E-mail: инструкция по смене пароля\r\nбудет отправлена на Ваш почтовый адрес.\';\r\n$MESS[\'SYS_AUTH_FORGOT_LOGIN\']         = \'Логин\';\r\n$MESS[\'SYS_AUTH_FORGOT_EMAIL\']         = \'E-mail\';\r\n$MESS[\'SYS_AUTH_FORGOT_CAPTCHA_TITLE\'] = \'Защита от автоматической регистрации\';\r\n$MESS[\'SYS_AUTH_FORGOT_CAPTCHA_TEXT\']  = \'Введите символы с картинки\';\r\n$MESS[\'SYS_AUTH_FORGOT_SUBMIT\']        = \'Отправить\';\r\n$MESS[\'SYS_AUTH_FORGOT_AUTH\']          = \'Авторизация\';\r\n[/php]\r\n\r\n[css]\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.forgotpasswd/.default/style.css\r\n */\r\n.system-auth-forgotpasswd {\r\n\r\n}\r\n    .system-auth-forgotpasswd > p {\r\n        margin: 1em 0;\r\n    }\r\n        .system-auth-forgotpasswd > p > a {\r\n            text-decoration: underline;\r\n        }\r\n        .system-auth-forgotpasswd > form > div {\r\n            width: 50%;\r\n            margin-bottom: 15px;\r\n        }\r\n        .system-auth-forgotpasswd > form > div.captcha {\r\n            border: 1px solid #ccc;\r\n            padding: 20px 15px 15px 15px;\r\n            position: relative;\r\n            margin-top: 25px;\r\n        }\r\n            .system-auth-forgotpasswd > form > div.captcha > h3 {\r\n                position: absolute;\r\n                top: -10px;\r\n                font-weight: normal;\r\n                font-size: 16px;\r\n                background: #eee;\r\n                padding: 0 10px;\r\n                color: #999;\r\n            }\r\n            .system-auth-forgotpasswd > form > div.captcha > span:first-of-type {\r\n                margin-top: 10px;\r\n            }\r\n            .system-auth-forgotpasswd > form > div > span {\r\n                display: block;\r\n            }\r\n            .system-auth-forgotpasswd > form > div > span:first-child {\r\n                margin-bottom: 5px;\r\n            }\r\n                .system-auth-forgotpasswd > form > div > span > input[type=\"text\"],\r\n                .system-auth-forgotpasswd > form > div > span > input[type=\"password\"] {\r\n                    width: 100%;\r\n                    padding: 5px;\r\n                    border: 1px solid #ccc;\r\n                }\r\n        .system-auth-forgotpasswd > form > div.submit {\r\n            margin-top: 25px;\r\n        }\r\n            .system-auth-forgotpasswd > form > div.submit > input[type=\"submit\"] {\r\n                width: 30%;\r\n                padding: 5px;\r\n                background: #333;\r\n                color: #fff;\r\n                border: none;\r\n            }\r\n    .system-auth-forgotpasswd i {\r\n        font-style: normal;\r\n        font-weight: bold;\r\n        color: #f00;\r\n    }\r\n[/css]\r\n<p>\r\n<a href=\"/files/blog/167/7.jpg\" class=\"zoom\"><img src=\"/files/blog/167/7.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/167/8.jpg\" class=\"zoom\"><img src=\"/files/blog/167/8.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/167/9.jpg\" class=\"zoom\"><img src=\"/files/blog/167/9.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<h2>Шаблон компонента system.auth.changepasswd</h2>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.changepasswd/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n?>\r\n\r\n<div class=\"system-auth-changepasswd\">\r\n\r\n<h2><?= GetMessage(\'SYS_AUTH_CHANGE_TITLE\'); /* заголовок формы */ ?></h2>\r\n\r\n<p><?php ShowMessage($arParams[\"~AUTH_RESULT\"]); /* сообщение о результате смены пароля */ ?></p>\r\n\r\n<?php\r\n// после успешной смены пароля и вывода сообщания об этом, не нужно больше показывать форму\r\nif (isset($arParams[\"~AUTH_RESULT\"][\'TYPE\']) && $arParams[\"~AUTH_RESULT\"][\'TYPE\'] == \'OK\') {\r\n    echo \'</div>\';\r\n    return;\r\n}\r\n?>\r\n\r\n<form name=\"bform\" method=\"post\" action=\"<?= $arResult[\"AUTH_FORM\"]; ?>\">\r\n\r\n    <?php if (strlen($arResult[\"BACKURL\"]) > 0): ?>\r\n        <input type=\"hidden\" name=\"backurl\" value=\"<?= $arResult[\"BACKURL\"]; ?>\" />\r\n    <?php endif; ?>\r\n\r\n    <input type=\"hidden\" name=\"AUTH_FORM\" value=\"Y\">\r\n    <input type=\"hidden\" name=\"TYPE\" value=\"CHANGE_PWD\">\r\n\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_CHANGE_LOGIN\'); /* логин пользователя */ ?>\r\n            <i>*</i> <!-- поле обязательно для заполнения -->\r\n        </span>\r\n        <span>\r\n            <input type=\"text\" name=\"USER_LOGIN\"\r\n                   maxlength=\"50\" value=\"<?= $arResult[\"LAST_LOGIN\"]; ?>\" />\r\n        </span>\r\n    </div>\r\n\r\n    <div class=\"checkword\">\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_CHANGE_CHECK\'); /* контрольная строка */ ?>\r\n            <i>*</i> <!-- поле обязательно для заполнения -->\r\n        </span>\r\n        <span>\r\n            <input type=\"text\" name=\"USER_CHECKWORD\"\r\n                   maxlength=\"50\" value=\"<?= $arResult[\"USER_CHECKWORD\"]; ?>\" />\r\n        </span>\r\n    </div>\r\n\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_CHANGE_PASSWORD\'); /* новый пароль */ ?>\r\n            <i>*</i> <!-- поле обязательно для заполнения -->\r\n        </span>\r\n        <span>\r\n            <input type=\"password\" name=\"USER_PASSWORD\" maxlength=\"50\"\r\n                   value=\"<?= $arResult[\"USER_PASSWORD\"]; ?>\" autocomplete=\"off\" />\r\n        </span>\r\n    </div>\r\n\r\n    <?php if ($arResult[\"SECURE_AUTH\"]): /* безопасная авторизация (зашифрованная передача пароля) */?>\r\n        <!-- код удален -->\r\n    <?php endif; ?>\r\n\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_CHANGE_CONFIRM\'); /* подтверждение пароля */ ?>\r\n            <i>*</i> <!-- поле обязательно для заполнения -->\r\n        </span>\r\n        <span>\r\n            <input type=\"password\" name=\"USER_CONFIRM_PASSWORD\" maxlength=\"50\"\r\n                   value=\"<?= $arResult[\"USER_CONFIRM_PASSWORD\"]; ?>\" autocomplete=\"off\" />\r\n        </span>\r\n    </div>\r\n\r\n    <?php if ($arResult[\"USE_CAPTCHA\"]): /* использовать CAPTCHA? */?>\r\n        <div class=\"captcha\">\r\n            <h3><?= GetMessage(\'SYS_AUTH_CHANGE_CAPTCHA_TITLE\'); /* Защита от роботов */ ?></h3>\r\n            <input type=\"hidden\" name=\"captcha_sid\" value=\"<?= $arResult[\"CAPTCHA_CODE\"]; ?>\" />\r\n            <img src=\"/bitrix/tools/captcha.php?captcha_sid=<?= $arResult[\"CAPTCHA_CODE\"]; ?>\"\r\n                 width=\"180\" height=\"40\" alt=\"CAPTCHA\" />\r\n            <span>\r\n                <?= GetMessage(\'SYS_AUTH_CHANGE_CAPTCHA_TEXT\'); /* введите код с картинки */ ?>\r\n                <i>*</i> <!-- поле обязательно для заполнения -->\r\n            </span>\r\n            <span>\r\n                <input type=\"text\" name=\"captcha_word\" maxlength=\"50\" value=\"\" />\r\n            </span>\r\n        </div>\r\n    <?php endif; ?>\r\n\r\n    <div class=\"submit\">\r\n        <input type=\"submit\" name=\"change_pwd\"\r\n               value=\"<?= GetMessage(\'SYS_AUTH_CHANGE_SUBMIT\'); /* кнопка отправки формы */ ?>\" />\r\n    </div>\r\n\r\n</form>\r\n\r\n<p><?= $arResult[\"GROUP_POLICY\"][\"PASSWORD_REQUIREMENTS\"]; /* сообщение о min длине пароля */ ?></p>\r\n\r\n<p><i>*</i> <?= GetMessage(\'SYS_AUTH_CHANGE_REQUIRED\') /* Эти поля обязательны для заполнения */ ?></p>\r\n<p>\r\n    <a href=\"<?= $arResult[\"AUTH_AUTH_URL\"]; ?>\">\r\n    <?= GetMessage(\'SYS_AUTH_CHANGE_AUTH\'); /* ссылка на страницу авторизации */ ?>\r\n    </a>\r\n</p>\r\n\r\n<script type=\"text/javascript\">\r\ndocument.bform.USER_LOGIN.focus();\r\n</script>\r\n\r\n</div>\r\n[/phtml]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.changepasswd/.default/lang/ru/template.php\r\n */\r\n$MESS[\'SYS_AUTH_CHANGE_TITLE\']         = \'Смена пароля\';\r\n$MESS[\'SYS_AUTH_CHANGE_LOGIN\']         = \'Логин\';\r\n$MESS[\'SYS_AUTH_CHANGE_CHECK\']         = \'Контрольная строка\';\r\n$MESS[\'SYS_AUTH_CHANGE_PASSWORD\']      = \'Новый пароль\';\r\n$MESS[\'SYS_AUTH_CHANGE_CONFIRM\']       = \'Подтверждение пароля\';\r\n$MESS[\'SYS_AUTH_CHANGE_CAPTCHA_TITLE\'] = \'Защита от автоматической регистрации\';\r\n$MESS[\'SYS_AUTH_CHANGE_CAPTCHA_TEXT\']  = \'Введите символы с картинки\';\r\n$MESS[\'SYS_AUTH_CHANGE_SUBMIT\']        = \'Изменить пароль\';\r\n$MESS[\'SYS_AUTH_CHANGE_AUTH\']          = \'Авторизация\';\r\n$MESS[\'SYS_AUTH_CHANGE_REQUIRED\']      = \'Эти поля обязательны для заполнения\';\r\n[/php]\r\n\r\n[css]\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.changepasswd/.default/style.css\r\n */\r\n.system-auth-changepasswd {\r\n\r\n}\r\n    .system-auth-changepasswd > p {\r\n        margin: 1em 0;\r\n    }\r\n        .system-auth-changepasswd > p > a {\r\n            text-decoration: underline;\r\n        }\r\n        .system-auth-changepasswd > form > div {\r\n            width: 50%;\r\n            margin-bottom: 15px;\r\n        }\r\n        .system-auth-changepasswd > form > div.checkword {\r\n            display: none;\r\n        }\r\n            .system-auth-changepasswd > form > div > span {\r\n                display: block;\r\n            }\r\n            .system-auth-changepasswd > form > div > span:first-child {\r\n                margin-bottom: 5px;\r\n            }\r\n                .system-auth-changepasswd > form > div > span > input[type=\"text\"],\r\n                .system-auth-changepasswd > form > div > span > input[type=\"password\"] {\r\n                    width: 100%;\r\n                    padding: 5px;\r\n                    border:1px solid #ccc;\r\n                }\r\n        .system-auth-changepasswd > form > div.submit {\r\n            margin-top: 25px;\r\n        }\r\n            .system-auth-changepasswd > form > div.submit > input[type=\"submit\"] {\r\n                width: 30%;\r\n                padding: 5px;\r\n                background: #333;\r\n                color: #fff;\r\n                border: none;\r\n            }\r\n    .system-auth-changepasswd i {\r\n        font-style: normal;\r\n        font-weight: bold;\r\n        color: #f00;\r\n    }\r\n[/css]\r\n<p>\r\n<a href=\"/files/blog/167/10.jpg\" class=\"zoom\"><img src=\"/files/blog/167/10.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/167/11.jpg\" class=\"zoom\"><img src=\"/files/blog/167/11.jpg\" alt=\"\" /></a>\r\n</p>','2018-07-15 12:56:00',1),(168,17,'Битрикс. Регистрация и авторизация. Часть 2','','','CMS, Web-разработка, Авторизация, Битрикс, Компонент, Регистрация, Форма, ШаблонКомпонента','Возможности системного компонента регистрации довольно скромные: нет возможности добавить свои поля, сделать их обязательными для заполнения. Для реализации таких возможностей есть компонент «Настраиваемая регистрация», который позволяет настроить и разместить на сайте свою форму регистрации.','<p>\r\nВозможности системного компонента регистрации довольно скромные: нет возможности добавить свои поля, сделать их обязательными для заполнения. Для реализации таких возможностей есть компонент «Настраиваемая регистрация», который позволяет настроить и разместить на сайте свою форму регистрации. В визуальном редакторе компонент расположен по пути: «<em>Служебные • Пользователь • Настраиваемая регистрация</em>».\r\n</p>\r\n<p>\r\nПример вызова компонента\r\n</p>\r\n[php]\r\n<?php\r\n$APPLICATION->IncludeComponent(     // Настраиваемая регистрация\r\n    \"bitrix:main.register\",\r\n    \"\",\r\n    Array(\r\n        \"AUTH\" => \"Y\",              // Автоматически авторизовать пользователей\r\n        \"REQUIRED_FIELDS\" => array( // Поля, обязательные для заполнения\r\n            0 => \"EMAIL\",\r\n            1 => \"NAME\",\r\n            2 => \"LAST_NAME\",\r\n        ),\r\n        \"SET_TITLE\" => \"Y\",         // Устанавливать заголовок страницы\r\n        \"SHOW_FIELDS\" => array(     // Поля, которые показывать в форме\r\n            0 => \"EMAIL\",\r\n            1 => \"NAME\",\r\n            2 => \"LAST_NAME\",\r\n        ),\r\n        \"SUCCESS_PAGE\" => \"\",       // Страница окончания регистрации\r\n        \"USER_PROPERTY\" => \"\",      // Показывать дополнительные свойства\r\n        \"USER_PROPERTY_NAME\" => \"\", // Название блока пользовательских свойств\r\n        \"USE_BACKURL\" => \"N\",       // Отправлять пользователя по обратной ссылке\r\n    ),\r\n    false\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nСоздадим страницу <code>/auth/register.php</code>, разместим на ней вызов компонента «Настраиваемая регистрация». В настройках компонента выберем поля, которые надо показывать:\r\n</p>\r\n<ul>\r\n  <li><code>[EMAIL] E-mail</code></li>\r\n  <li><code>[NAME] Имя</code></li>\r\n  <li><code>[LAST_NAME] Фамилия</code></li>\r\n  <li><code>[PERSONAL_PHONE] Телефон</code></li>\r\n  <li><code>[WORK_COMPANY] Наименование компании</code></li>\r\n  <li><code>[WORK_PHONE] Телефон (рабочий)</code></li>\r\n</ul>\r\n<p>\r\nИ укажем поля, обязательные для заполнения:\r\n</p>\r\n<ul>\r\n  <li><code>[EMAIL] E-mail</code></li>\r\n  <li><code>[NAME] Имя</code></li>\r\n  <li><code>[LAST_NAME] Фамилия</code></li>\r\n  <li><code>[PERSONAL_PHONE] Телефон</code></li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/168/1.jpg\" class=\"zoom\"><img src=\"/files/blog/168/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПосле этого страница <code>/auth/register.php</code> содержит следующий код:\r\n[phtml]\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Регистрация\");\r\n?>\r\n\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:main.register\",\r\n    \".default\",\r\n    Array(\r\n        \"AUTH\" => \"N\",\r\n        \"COMPONENT_TEMPLATE\" => \".default\",\r\n        \"REQUIRED_FIELDS\" => array(\r\n            0=>\"EMAIL\",\r\n            1=>\"NAME\",\r\n            2=>\"LAST_NAME\",\r\n            3=>\"PERSONAL_PHONE\",\r\n        ),\r\n        \"SET_TITLE\" => \"Y\",\r\n        \"SHOW_FIELDS\" => array(\r\n            0=>\"EMAIL\",\r\n            1=>\"NAME\",\r\n            2=>\"LAST_NAME\",\r\n            3=>\"PERSONAL_PHONE\",\r\n            4=>\"WORK_COMPANY\",\r\n            5=>\"WORK_PHONE\",\r\n        ),\r\n        \"SUCCESS_PAGE\" => \"/auth/\",\r\n        \"USER_PROPERTY\" => array(),\r\n        \"USER_PROPERTY_NAME\" => \"\",\r\n        \"USE_BACKURL\" => \"N\"\r\n    )\r\n);\r\n?>\r\n\r\n<?php require($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\"); ?>\r\n[/phtml]\r\n<p>\r\nИ имеет такой вид:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/168/2.jpg\" class=\"zoom\"><img src=\"/files/blog/168/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТеперь нам надо кастомизировать форму регистрации под наш дизайн. Для этого копируем шаблон компонента:\r\n</p>\r\n<ul>\r\n  <li>откуда: <code>bitrix/components/bitrix/main.register/templates/.default</code></li>\r\n  <li>куда: <code>local/templates/.default/components/bitrix/main.register/.default</code></li>\r\n</ul>\r\n<p>\r\nПосле внесения изменений получилось так:\r\n</p>\r\n[phtml]\r\n<?\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.register/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n?>\r\n\r\n<?php if ($USER->IsAuthorized()): /* если пользователь уже авторизован */ ?>\r\n    <p><?= GetMessage(\'MAIN_REGISTER_REG_AUTH\'); /* Вы зарегистрированы и авторизованы */ ?></p>\r\n    <?php return ?>\r\n<?php endif; ?>\r\n\r\n<div class=\"bitrix-main-register\">\r\n\r\n    <h2><?= GetMessage(\'MAIN_REGISTER_FORM_TITLE\'); /* заголовок формы */ ?></h2>\r\n\r\n    <?php if (count($arResult[\"ERRORS\"]) > 0): /* сообщения об ошибках при заполнении формы */ ?>\r\n        <?php\r\n            foreach ($arResult[\"ERRORS\"] as $key => $error) {\r\n                if (intval($key) == 0 && $key !== 0) {\r\n                    $arResult[\"ERRORS\"][$key] = str_replace(\r\n                        \"#FIELD_NAME#\",\r\n                        \'«\'.GetMessage(\'MAIN_REGISTER_\'.$key).\'»\',\r\n                        $error\r\n                    );\r\n                }\r\n            }\r\n            ShowError(implode(\"<br />\", $arResult[\"ERRORS\"]));\r\n        ?>\r\n    <?php elseif ($arResult[\"USE_EMAIL_CONFIRMATION\"] === \"Y\"): ?>\r\n        <p><?= GetMessage(\'MAIN_REGISTER_EMAIL_HELP\'); /* будет отправлено письмо для подтверждения */ ?></p>\r\n    <?php endif; ?>\r\n\r\n    <form method=\"post\" action=\"<?= POST_FORM_ACTION_URI; ?>\" name=\"regform\" enctype=\"multipart/form-data\">\r\n\r\n        <?php if ($arResult[\"BACKURL\"] <> \'\'): ?>\r\n            <input type=\"hidden\" name=\"backurl\" value=\"<?= $arResult[\"BACKURL\"]; ?>\" />\r\n        <?php endif; ?>\r\n\r\n        <?php foreach ($arResult[\"SHOW_FIELDS\"] as $FIELD): ?>\r\n            <?php if ($FIELD == \"AUTO_TIME_ZONE\" && $arResult[\"TIME_ZONE_ENABLED\"]): /* часовой пояс */ ?>\r\n                <!-- код удален -->\r\n                <?php continue; ?>\r\n            <?php endif; ?>\r\n\r\n            <div>\r\n                <span>\r\n                    <?= GetMessage(\'MAIN_REGISTER_\'.$FIELD); /* очередное поле */ ?>\r\n                    <?php if ($arResult[\"REQUIRED_FIELDS_FLAGS\"][$FIELD] == \"Y\"): ?>\r\n                        <i>*</i> <!-- поле обязательно для заполнения -->\r\n                    <?php endif; ?>\r\n                </span>\r\n                <span>\r\n                    <?php if ($FIELD == \"PASSWORD\"): /* пароль */ ?>\r\n                        <input type=\"password\" name=\"REGISTER[<?= $FIELD; ?>]\" value=\"<?= $arResult[\"VALUES\"][$FIELD]; ?>\"\r\n                               autocomplete=\"off\" />\r\n                        <?php if ($arResult[\"SECURE_AUTH\"]): /* безопасная авторизация */ ?>\r\n                            <!-- код удален -->\r\n                        <?php endif; ?>\r\n                    <?php elseif ($FIELD == \"CONFIRM_PASSWORD\"): /* подтверждение пароля */ ?>\r\n                        <input type=\"password\" name=\"REGISTER[<?= $FIELD; ?>]\" value=\"<?= $arResult[\"VALUES\"][$FIELD]; ?>\"\r\n                               autocomplete=\"off\" />\r\n                    <?php elseif ($FIELD == \"PERSONAL_GENDER\"): /* пол: мужской, женский */ ?>\r\n                        <select name=\"REGISTER[<?= $FIELD; ?>]\">\r\n                            <option value=\"\">\r\n                                <?= GetMessage(\'MAIN_REGISTER_USER_UNKNOWN\'); ?>\r\n                            </option>\r\n                            <option value=\"M\"<?= $arResult[\"VALUES\"][$FIELD] == \'M\' ? \' selected=\"selected\"\' : \'\'; ?>>\r\n                                <?= GetMessage(\'MAIN_REGISTER_USER_MALE\'); ?>\r\n                            </option>\r\n                            <option value=\"F\"<?= $arResult[\"VALUES\"][$FIELD] == \'F\' ? \' selected=\"selected\"\' : \'\'; ?>>\r\n                                <?= GetMessage(\'MAIN_REGISTER_USER_FEMALE\'); ?>\r\n                            </option>\r\n                        </select>\r\n                    <?php elseif (in_array($FIELD, array(\"PERSONAL_COUNTRY\", \"WORK_COUNTRY\"))): /* страна проживания или работы */ ?>\r\n                        <select name=\"REGISTER[<?= $FIELD; ?>]\">\r\n                        <?php foreach ($arResult[\"COUNTRIES\"][\"reference_id\"] as $key => $value): ?>\r\n                            <?php\r\n                            $selected = ($value == $arResult[\"VALUES\"][$FIELD]) ? \' selected=\"selected\"\' : \'\';\r\n                            ?>\r\n                            <option value=\"<?= $value; ?>\"<?= $selected; ?>>\r\n                                <?= $arResult[\"COUNTRIES\"][\"reference\"][$key]; ?>\r\n                            </option>\r\n                        <?php endforeach; ?>\r\n                        </select>\r\n                    <?php elseif (in_array($FIELD, array(\"PERSONAL_PHOTO\", \"WORK_LOGO\"))): /* личное фото */ ?>\r\n                        <input type=\"file\" name=\"REGISTER_FILES_<?= $FIELD; ?>\" />\r\n                    <?php elseif (in_array($FIELD, array(\"PERSONAL_NOTES\", \"WORK_NOTES\"))): ?>\r\n                        <textarea name=\"REGISTER[<?= $FIELD; ?>]\">\r\n                            <?= $arResult[\"VALUES\"][$FIELD]; ?>\r\n                        </textarea>\r\n                    <?php elseif ($FIELD == \"PERSONAL_BIRTHDAY\"): /* дата рождения */ ?>\r\n                        <small><?= $arResult[\"DATE_FORMAT\"]; ?></small><br />\r\n                        <input size=\"30\" type=\"text\" name=\"REGISTER[<?= $FIELD; ?>]\"\r\n                               value=\"<?= $arResult[\"VALUES\"][$FIELD]; ?>\" />\r\n                        <?php\r\n                        $APPLICATION->IncludeComponent(\r\n                            \'bitrix:main.calendar\',\r\n                            \'\',\r\n                            array(\r\n                                \'SHOW_INPUT\' => \'N\',\r\n                                \'FORM_NAME\' => \'regform\',\r\n                                \'INPUT_NAME\' => \'REGISTER[PERSONAL_BIRTHDAY]\',\r\n                                \'SHOW_TIME\' => \'N\'\r\n                            ),\r\n                            null,\r\n                            array(\"HIDE_ICONS\"=>\"Y\")\r\n                        );\r\n                        ?>\r\n                    <?php else: ?>\r\n                        <input type=\"text\" name=\"REGISTER[<?= $FIELD; ?>]\"\r\n                               value=\"<?= $arResult[\"VALUES\"][$FIELD]; ?>\" />\r\n                    <?php endif; ?>\r\n                </span>\r\n            </div>\r\n        <?php endforeach; ?>\r\n\r\n        <?php /***** User properties *****/ ?>\r\n        <?php if($arResult[\"USER_PROPERTIES\"][\"SHOW\"] == \"Y\"): ?>\r\n            <h3>\r\n            <?=\r\n            empty($arParams[\"USER_PROPERTY_NAME\"]) ? GetMessage(\"USER_TYPE_EDIT_TAB\") : $arParams[\"USER_PROPERTY_NAME\"];\r\n            ?>\r\n            </h3>\r\n            <?php foreach ($arResult[\"USER_PROPERTIES\"][\"DATA\"] as $FIELD_NAME => $arUserField): ?>\r\n                <div>\r\n                    <span>\r\n                        <?= $arUserField[\"EDIT_FORM_LABEL\"]; ?>\r\n                        <?php if ($arUserField[\"MANDATORY\"]==\"Y\"): ?>\r\n                            <i>*</i> <!-- поле обязательно для заполнения -->\r\n                        <?php endif; ?>\r\n                    </span>\r\n                    <span>\r\n                        <?php\r\n                        $APPLICATION->IncludeComponent(\r\n                            \"bitrix:system.field.edit\",\r\n                            $arUserField[\"USER_TYPE\"][\"USER_TYPE_ID\"],\r\n                            array(\r\n                                \"bVarsFromForm\" => $arResult[\"bVarsFromForm\"],\r\n                                \"arUserField\" => $arUserField,\r\n                                \"form_name\" => \"regform\"\r\n                                ),\r\n                                null,\r\n                                array(\"HIDE_ICONS\"=>\"Y\")\r\n                        );\r\n                        ?>\r\n                    </span>\r\n                </div>\r\n            <?php endforeach; ?>\r\n        <?php endif; ?>\r\n        <?php /***** User properties *****/ ?>\r\n\r\n        <?php if ($arResult[\"USE_CAPTCHA\"] == \"Y\"): /* использовать CAPTCHA? */ ?>\r\n            <div class=\"captcha\">\r\n                <h3><?= GetMessage(\'MAIN_REGISTER_CAPTCHA_TITLE\'); ?></h3>\r\n                <input type=\"hidden\" name=\"captcha_sid\" value=\"<?= $arResult[\"CAPTCHA_CODE\"]; ?>\" />\r\n                <img src=\"/bitrix/tools/captcha.php?captcha_sid=<?= $arResult[\"CAPTCHA_CODE\"]; ?>\"\r\n                         width=\"180\" height=\"40\" alt=\"CAPTCHA\" />\r\n                <span>\r\n                    <?= GetMessage(\'MAIN_REGISTER_CAPTCHA_HELP\'); ?>\r\n                    <i>*</i>\r\n                </span>\r\n                <span>\r\n                    <input type=\"text\" name=\"captcha_word\" maxlength=\"50\" value=\"\" />\r\n                </span>\r\n            </div>\r\n        <?php endif; ?>\r\n\r\n        <div class=\"submit\">\r\n            <input type=\"submit\" name=\"register_submit_button\"\r\n                   value=\"<?= GetMessage(\'MAIN_REGISTER_FORM_SUBMIT\'); /* кнопка отправки формы */ ?>\" />\r\n        </div>\r\n\r\n    </form>\r\n\r\n    <p>\r\n        <?= $arResult[\"GROUP_POLICY\"][\"PASSWORD_REQUIREMENTS\"]; /* предупреждение о min длине пароля */?>\r\n    </p>\r\n    <p>\r\n        <i>*</i> <?= GetMessage(\'MAIN_REGISTER_REQUIRED\'); /* Эти поля обязательны для заполнения */ ?>\r\n    </p>\r\n\r\n</div>\r\n[/phtml]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.register/.default/lang/ru/template.php\r\n */\r\n$MESS[\'MAIN_REGISTER_FORM_TITLE\']          = \'Регистрация\';\r\n$MESS[\'MAIN_REGISTER_REG_AUTH\']            = \'Вы зарегистрированы и успешно авторизованы.\';\r\n$MESS[\'MAIN_REGISTER_EMAIL_HELP\']          = \'На указанный в форме e-mail придет запрос на подтверждение регистрации.\';\r\n\r\n$MESS[\'MAIN_REGISTER_LOGIN\']               = \'Логин\';\r\n$MESS[\'MAIN_REGISTER_EMAIL\']               = \'E-mail\';\r\n$MESS[\'MAIN_REGISTER_PASSWORD\']            = \'Пароль\';\r\n$MESS[\'MAIN_REGISTER_CONFIRM_PASSWORD\']    = \'Подтверждение пароля\';\r\n\r\n$MESS[\'MAIN_REGISTER_NAME\']                = \'Имя\';\r\n$MESS[\'MAIN_REGISTER_SECOND_NAME\']         = \'Отчество\';\r\n$MESS[\'MAIN_REGISTER_LAST_NAME\']           = \'Фамилия\';\r\n\r\n$MESS[\'MAIN_REGISTER_TITLE\']               = \'Обращение\';\r\n\r\n$MESS[\'MAIN_REGISTER_USER_UNKNOWN\']        = \'Нет данных\';\r\n$MESS[\'MAIN_REGISTER_USER_MALE\']           = \'Мужской\';\r\n$MESS[\'MAIN_REGISTER_USER_FEMALE\']         = \'Женский\';\r\n\r\n$MESS[\'MAIN_REGISTER_PERSONAL_PROFESSION\'] = \'Профессия\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_WWW\']        = \'WWW-страница\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_ICQ\']        = \'ICQ\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_GENDER\']     = \'Пол\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_BIRTHDAY\']   = \'Дата рождения\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_PHOTO\']      = \'Фотография\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_PHONE\']      = \'Телефон\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_FAX\']        = \'Факс\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_MOBILE\']     = \'Мобильный\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_PAGER\']      = \'Пейджер\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_STREET\']     = \'Улица, дом\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_MAILBOX\']    = \'Почтовый ящик\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_CITY\']       = \'Город\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_STATE\']      = \'Область / край\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_ZIP\']        = \'Почтовый индекс\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_COUNTRY\']    = \'Страна\';\r\n$MESS[\'MAIN_REGISTER_PERSONAL_NOTES\']      = \'Дополнительные заметки\';\r\n\r\n$MESS[\'MAIN_REGISTER_WORK_COMPANY\']        = \'Наименование компании\';\r\n$MESS[\'MAIN_REGISTER_WORK_DEPARTMENT\']     = \'Департамент / Отдел\';\r\n$MESS[\'MAIN_REGISTER_WORK_POSITION\']       = \'Должность\';\r\n$MESS[\'MAIN_REGISTER_WORK_WWW\']            = \'WWW-страница (работа)\';\r\n$MESS[\'MAIN_REGISTER_WORK_PHONE\']          = \'Телефон (работа)\';\r\n$MESS[\'MAIN_REGISTER_WORK_FAX\']            = \'Факс (работа)\';\r\n$MESS[\'MAIN_REGISTER_WORK_PAGER\']          = \'Пейджер (работа)\';\r\n$MESS[\'MAIN_REGISTER_WORK_STREET\']         = \'Улица, дом (работа)\';\r\n$MESS[\'MAIN_REGISTER_WORK_MAILBOX\']        = \'Почтовый ящик (работа)\';\r\n$MESS[\'MAIN_REGISTER_WORK_CITY\']           = \'Город (работа)\';\r\n$MESS[\'MAIN_REGISTER_WORK_STATE\']          = \'Область / край (работа)\';\r\n$MESS[\'MAIN_REGISTER_WORK_ZIP\']            = \'Почтовый индекс (работа)\';\r\n$MESS[\'MAIN_REGISTER_WORK_COUNTRY\']        = \'Страна (работа)\';\r\n$MESS[\'MAIN_REGISTER_WORK_PROFILE\']        = \'Направления деятельности\';\r\n$MESS[\'MAIN_REGISTER_WORK_LOGO\']           = \'Логотип компании\';\r\n$MESS[\'MAIN_REGISTER_WORK_NOTES\']          = \'Дополнительные заметки (работа)\';\r\n\r\n$MESS[\'MAIN_REGISTER_FORM_SUBMIT\']         = \'Зарегистрироваться\';\r\n$MESS[\'MAIN_REGISTER_CAPTCHA_TITLE\']       = \'Защита от автоматической регистрации\';\r\n$MESS[\'MAIN_REGISTER_CAPTCHA_HELP\']        = \'Введите символы с картинки\';\r\n$MESS[\'MAIN_REGISTER_REQUIRED\']            = \'Эти поля обязательны для заполнения\';\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.register/.default/lang/ru/component.php\r\n */\r\n$MESS[\'REGISTER_WRONG_CAPTCHA\']         = \'Неверно введено слово с картинки\';\r\n$MESS[\'REGISTER_FIELD_REQUIRED\']        = \'Поле #FIELD_NAME# обязательно для заполнения\';\r\n$MESS[\'REGISTER_DEFAULT_TITLE\']         = \'Регистрация нового пользователя\';\r\n$MESS[\'REGISTER_USER_WITH_EMAIL_EXIST\'] = \'Пользователь с таким e-mail (#EMAIL#) уже существует\';\r\n$MESS[\'main_register_sess_expired\']     = \'Ваша сессия истекла, повторите попытку регистрации\';\r\n$MESS[\'main_register_decode_err\']       = \'Ошибка при дешифровании пароля (#ERRCODE#)\';\r\n[/php]\r\n\r\n[css]\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.register/.default/style.css\r\n */\r\n.bitrix-main-register {\r\n\r\n}\r\n    .bitrix-main-register > p {\r\n        margin: 1em 0;\r\n    }\r\n        .bitrix-main-register > p > a {\r\n            text-decoration: underline;\r\n        }\r\n    .bitrix-main-register > form {\r\n        overflow: hidden;\r\n    }\r\n        .bitrix-main-register > form > div {\r\n            width: 50%;\r\n            margin-bottom: 15px;\r\n            float: left;\r\n            box-sizing: border-box;\r\n        }\r\n        .bitrix-main-register > form > div.captcha {\r\n            border: 1px solid #ccc;\r\n            padding: 20px 15px 15px 15px;\r\n            position: relative;\r\n            margin-top: 15px;\r\n            width: 49%;\r\n            clear: both;\r\n        }\r\n            .bitrix-main-register > form > div.captcha > h3 {\r\n                position: absolute;\r\n                top: -10px;\r\n                font-weight: normal;\r\n                font-size: 16px;\r\n                background: #eee;\r\n                padding: 0 10px;\r\n                color: #999;\r\n            }\r\n            .bitrix-main-register > form > div.captcha > span:first-of-type {\r\n                margin-top: 10px;\r\n            }\r\n        .bitrix-main-register > form > div:nth-of-type(even) {\r\n            padding-left: 1%;\r\n        }\r\n        .bitrix-main-register > form > div:nth-of-type(odd) {\r\n            padding-right: 1%;\r\n        }\r\n            .bitrix-main-register > form > div > span {\r\n                display: block;\r\n            }\r\n            .bitrix-main-register > form > div > span:first-child {\r\n                margin-bottom: 5px;\r\n            }\r\n                .bitrix-main-register > form > div > span > input[type=\"text\"],\r\n                .bitrix-main-register > form > div > span > input[type=\"password\"],\r\n                .bitrix-main-register > form > div > span > select,\r\n                .bitrix-main-register > form > div > span > textarea {\r\n                    width: 100%;\r\n                    padding: 5px;\r\n                    border:1px solid #ccc;\r\n                }\r\n            .bitrix-main-register > form > div.submit {\r\n                float: none;\r\n                padding-left: 0;\r\n            }\r\n            .bitrix-main-register > form > div.submit > input[type=\"submit\"] {\r\n                width: 30%;\r\n                padding: 5px;\r\n                background: #333;\r\n                color: #fff;\r\n                border: none;\r\n                margin-top: 10px;\r\n            }\r\n    .bitrix-main-register i {\r\n        font-style: normal;\r\n        font-weight: bold;\r\n        color: #f00;\r\n    }\r\n[/css]\r\n<p>\r\nИ вот что получилось в итоге:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/168/3.jpg\" class=\"zoom\"><img src=\"/files/blog/168/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТут есть еще один важный момент. Что будет, если на эту страницу попадает авторизованный пользователь? Ему показывается малоинформативное сообщение, что он зарегистрирован и авторизован.\r\n</p>\r\n[phtml]\r\n<?php if ($USER->IsAuthorized()): /* если пользователь уже авторизован */ ?>\r\n    <p><?= GetMessage(\'MAIN_REGISTER_REG_AUTH\'); /* Вы зарегистрированы и авторизованы */ ?></p>\r\n    <?php return ?>\r\n<?php endif; ?>\r\n[/phtml]\r\n<p>\r\nЕсть смысл перенаправить его на страницу личного кабинета или на страницу <a href=\"https://dev.1c-bitrix.ru/user_help/components/sluzhebnie/user/main_profile.php\">профиля</a>:\r\n</p>\r\n[phtml]\r\n<?php if ($USER->IsAuthorized()): /* если пользователь уже авторизован, ему здесь делать нечего */ ?>\r\n    <?php LocalRedirect(\'/auth/profile.php\'); ?>\r\n<?php endif; ?>\r\n[/phtml]\r\n\r\n<h2>Пользовательские поля</h2>\r\n<p>\r\nХотя Битрикс предлагает большой набор предопределенных полей, их все-таки может не хватить. Тогда остается только создавать свои поля. Это можно сделать в панели управления: «<em>Настройки • Настройки продукта • Пользовательские поля</em>»:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/168/4.jpg\" class=\"zoom\"><img src=\"/files/blog/168/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЯ добавил поле «Мое поле», тип «Строка», в настройках компонента указал, что это поле надо показывать:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/168/5.jpg\" class=\"zoom\"><img src=\"/files/blog/168/5.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТеперь форма регистрации имеет вид:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/168/6.jpg\" class=\"zoom\"><img src=\"/files/blog/168/6.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<h2>Порядок полей</h2>\r\n<p>\r\nДля настройки порядка следования полей в форме, создадим файл <code>local/templates/.default/components/bitrix/main.register/.default/result_modifier.php</code>:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.register/.default/result_modifier.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n// меняем порядок следования полей\r\n$arResult[\'SHOW_FIELDS\'] = array(\r\n    \'NAME\',\r\n    \'LAST_NAME\',\r\n    \'LOGIN\',\r\n    \'EMAIL\',\r\n    \'PASSWORD\',\r\n    \'CONFIRM_PASSWORD\',\r\n    \'WORK_COMPANY\',\r\n    \'WORK_PHONE\',\r\n    \'PERSONAL_PHONE\',\r\n);\r\n?>\r\n[/php]\r\n<p>\r\nВ результате чего форма примет вид:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/168/7.jpg\" class=\"zoom\"><img src=\"/files/blog/168/7.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<h2>Авторизация по E-mail</h2>\r\n<p>\r\nДавайте уберем поле <code>LOGIN</code>, как отживший свое пережиток прошлого. Без этого поля регистрацию пользователь не пройдет, поэтому будем создавать <code>LOGIN</code> из <code>EMAIL</code>. Добавляем в <code>init.php</code> следующий код:\r\n</p>\r\n[php]\r\nAddEventHandler(\"main\", \"OnBeforeUserRegister\", \"OnBeforeUserUpdateHandler\");\r\nAddEventHandler(\"main\", \"OnBeforeUserUpdate\", \"OnBeforeUserUpdateHandler\");\r\nfunction OnBeforeUserUpdateHandler(&$arFields) {\r\n    $arFields[\"LOGIN\"] = $arFields[\"EMAIL\"];\r\n    return $arFields;\r\n}\r\n[/php]\r\n<p>\r\nЧтобы форма регистрации не выдавала ошибок «Не заполнено обязательное поле логин», внесем изменение в шаблон компонента:\r\n</p>\r\n[phtml]\r\n<?php if ($FIELD == \'LOGIN\'): /* логин */ ?>\r\n    <input type=\"text\" name=\"REGISTER[<?= $FIELD; ?>]\"\r\n           value=\"<?= uniqid(\'user_\'); ?>\" />\r\n<?php elseif ($FIELD == \"PASSWORD\"): /* пароль */ ?>\r\n    <!-- код пропущен -->\r\n<?php elseif ($FIELD == \"CONFIRM_PASSWORD\"): /* подтверждение пароля */ ?>\r\n    <!-- код пропущен -->\r\n<?php endif; ?>\r\n[/phtml]\r\n<p>\r\nЕще раз изменим порядок следования полей в форме и сделаем поле <code>LOGIN</code> первым, чтобы можно было его скрыть, обратившись с помощью <code>:first-of-type</code>:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.register/.default/result_modifier.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n// меняем порядок следования полей\r\n$arResult[\'SHOW_FIELDS\'] = array(\r\n    \'LOGIN\',\r\n    \'NAME\',\r\n    \'LAST_NAME\',\r\n    \'EMAIL\',\r\n    \'PERSONAL_PHONE\',\r\n    \'PASSWORD\',\r\n    \'CONFIRM_PASSWORD\',\r\n    \'WORK_COMPANY\',\r\n    \'WORK_PHONE\',\r\n);\r\n?>\r\n[/php]\r\n<p>\r\n<a href=\"/files/blog/168/8.jpg\" class=\"zoom\"><img src=\"/files/blog/168/8.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТеперь скроем поле <code>LOGIN</code>:\r\n</p>\r\n[css]\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.register/.default/style.css\r\n */\r\n.bitrix-main-register {\r\n\r\n}\r\n/* код пропущен */\r\n        .bitrix-main-register > form > div:first-of-type {\r\n            display: none;\r\n        }\r\n/* код пропущен */\r\n        .bitrix-main-register > form > div:nth-of-type(even) {\r\n            padding-right: 1%;\r\n        }\r\n        .bitrix-main-register > form > div:nth-of-type(odd) {\r\n            padding-left: 1%;\r\n        }\r\n/* код пропущен */\r\n[/css]\r\n<p>\r\n<a href=\"/files/blog/168/9.jpg\" class=\"zoom\"><img src=\"/files/blog/168/9.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<p>\r\nНо есть еще одна проблема — у нас теперь две формы регистрации с разным составом полей:\r\n</p>\r\n<ul>\r\n  <li>первая формируется системным компонентом <code>system.auth.registration</code> и доступна по адресу <code>/auth/?register=yes</code></li>\r\n  <li>вторая формируется компонентом <code>bitrix:main.register</code> и доступна по адресу <code>/auth/register.php</code>\r\n</ul>\r\n<p>\r\nДавайте это исправим. Удалим весь код из шаблона компонента <code>system.auth.registration</code>, и поместим в него вызов компонента <code>bitrix:main.register</code> из файла <code>/auth/register.php</code>:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.registration/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:main.register\",\r\n    \".default\",\r\n    array(\r\n        \"AUTH\" => \"N\",\r\n        \"REQUIRED_FIELDS\" => array(\r\n            0 => \"EMAIL\",\r\n            1 => \"NAME\",\r\n            2 => \"LAST_NAME\",\r\n            3 => \"PERSONAL_PHONE\",\r\n        ),\r\n        \"SET_TITLE\" => \"Y\",\r\n        \"SHOW_FIELDS\" => array(\r\n            0 => \"EMAIL\",\r\n            1 => \"NAME\",\r\n            2 => \"LAST_NAME\",\r\n            3 => \"PERSONAL_PHONE\",\r\n            4 => \"WORK_COMPANY\",\r\n            5 => \"WORK_PHONE\",\r\n        ),\r\n        \"SUCCESS_PAGE\" => \"/auth/\",\r\n        \"USER_PROPERTY\" => array(\r\n        ),\r\n        \"USER_PROPERTY_NAME\" => \"\",\r\n        \"USE_BACKURL\" => \"N\",\r\n        \"COMPONENT_TEMPLATE\" => \".default\"\r\n    ),\r\n    false\r\n);\r\n[/php]\r\n<p>\r\nА файл <code>/auth/register.php</code> просто удалим. Можно еще удалить лишний код из шаблона компонента <code>bitrix:main.register</code>, который никогда не будет выполнен. Системный компонент <code>system.auth.registration</code> вызывается где-то глубоко в недрах Битрикс только в том случае, если пользователь не авторизован. И еще одна проверка в шаблоне «Пользователь авторизован?» просто не нужна.\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.register/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n?>\r\n<!-- следующие три строчки можно удалить -->\r\n<?php if ($USER->IsAuthorized()): /* если пользователь уже авторизован, ему здесь делать нечего */ ?>\r\n    <?php LocalRedirect(\'/auth/profile.php\'); ?>\r\n<?php endif; ?>\r\n[/phtml]\r\n<p>\r\nНе забываем изменить другие системные компоненты:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.authorize/.default/lang/ru/template.php\r\n */\r\n$MESS[\'SYS_AUTH_AUTHORIZE_TITLE\']         = \'Авторизация\';\r\n// теперь e-mail используется как логин\r\n$MESS[\'SYS_AUTH_AUTHORIZE_LOGIN\']         = \'E-mail\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_PASSWORD\']      = \'Пароль\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_REMEMBER\']      = \'Запомнить меня\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_CAPTCHA_TITLE\'] = \'Защита от автоматической регистрации\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_CAPTCHA_TEXT\']  = \'Введите символы с картинки\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_SUBMIT\']        = \'Войти\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_REG_USER\']      = \'Зарегистрироваться\';\r\n$MESS[\'SYS_AUTH_AUTHORIZE_FORGOT\']        = \'Забыли пароль?\';\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.forgotpasswd/.default/lang/ru/template.php\r\n */\r\n$MESS[\'SYS_AUTH_FORGOT_TITLE\']        = \'Восстановление пароля\';\r\n// теперь восстановление пароля только по e-mail\r\n$MESS[\'SYS_AUTH_FORGOT_HELP\']         = \'Введите Ваш E-mail: инструкция по смене пароля будет отправлена на этот почтовый адрес.\';\r\n$MESS[\'SYS_AUTH_FORGOT_LOGIN\']        = \'Логин\';\r\n$MESS[\'SYS_AUTH_FORGOT_EMAIL\']        = \'E-mail\';\r\n$MESS[\'SYS_AUTH_FORGOT_CAPTHA_TITLE\'] = \'Защита от автоматической регистрации\';\r\n$MESS[\'SYS_AUTH_FORGOT_CAPTHA_TEXT\']  = \'Введите символы с картинки\';\r\n$MESS[\'SYS_AUTH_FORGOT_SUBMIT\']       = \'Отправить\';\r\n$MESS[\'SYS_AUTH_FORGOT_AUTH\']         = \'Авторизация\';\r\n[/php]\r\n\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.forgotpasswd/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n?>\r\n    <!-- логин больше не нужен, удаляем или комментируем код ниже -->\r\n    <!--\r\n    <div>\r\n        <span>\r\n            <?= GetMessage(\'SYS_AUTH_FORGOT_LOGIN\'); /* логин пользователя */ ?>\r\n        </span>\r\n        <span>\r\n            <input type=\"text\" name=\"USER_LOGIN\" maxlength=\"50\" value=\"<?= $arResult[\"LAST_LOGIN\"]; ?>\" />\r\n        </span>\r\n    </div>\r\n    -->\r\n[/phtml]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.changepasswd/.default/lang/ru/template.php\r\n */\r\n$MESS[\'SYS_AUTH_CHANGE_TITLE\']         = \'Смена пароля\';\r\n// теперь e-mail используется как логин\r\n$MESS[\'SYS_AUTH_CHANGE_LOGIN\']         = \'E-mail\';\r\n$MESS[\'SYS_AUTH_CHANGE_CHECK\']         = \'Контрольная строка\';\r\n$MESS[\'SYS_AUTH_CHANGE_PASSWORD\']      = \'Новый пароль\';\r\n$MESS[\'SYS_AUTH_CHANGE_CONFIRM\']       = \'Подтверждение пароля\';\r\n$MESS[\'SYS_AUTH_CHANGE_CAPTCHA_TITLE\'] = \'Защита от автоматической регистрации\';\r\n$MESS[\'SYS_AUTH_CHANGE_CAPTCHA_TEXT\']  = \'Введите символы с картинки\';\r\n$MESS[\'SYS_AUTH_CHANGE_SUBMIT\']        = \'Изменить пароль\';\r\n$MESS[\'SYS_AUTH_CHANGE_AUTH\']          = \'Авторизация\';\r\n$MESS[\'SYS_AUTH_CHANGE_REQUIRED\']      = \'Эти поля обязательны для заполнения\';\r\n[/php]\r\n\r\n<p>\r\nЕсть еще один момент, о котором есть смысл упомянуть. Если при изменении пароля не заполнить поле «E-mail», появляется сообщение об ошибке «<em>Логин должен быть не менее 3 символов</em>». Где это изменить, я не нашел, видимо где-то в недрах ядра Битрикс. Поэтому небольшой хак:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.changepasswd/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n?>\r\n\r\n<div class=\"system-auth-changepasswd\">\r\n\r\n<h2><?= GetMessage(\'SYS_AUTH_CHANGE_TITLE\'); /* заголовок формы */ ?></h2>\r\n\r\n<?php\r\n// небольшй хак, который убирает сообщение о длине логина\r\nif (isset($arParams[\'AUTH_RESULT\'][\'TYPE\'])\r\n    && $arParams[\'AUTH_RESULT\'][\'TYPE\'] == \'ERROR\'\r\n    && false !== iconv_strpos($arParams[\'AUTH_RESULT\'][\'MESSAGE\'], \'Логин должен быть\')) {\r\n    $arParams[\'~AUTH_RESULT\'][\'MESSAGE\'] = \'Недопустимое значение поля «E-mail»\';\r\n}\r\n?>\r\n\r\n<p><?php ShowMessage($arParams[\"~AUTH_RESULT\"]); /* сообщение о результате смены пароля */ ?></p>\r\n[/phtml]','2018-07-20 14:52:50',1),(169,17,'Битрикс. Регистрация и авторизация. Часть 3','','','CMS, Web-разработка, Авторизация, Битрикс, Компонент, Регистрация, Форма, ШаблонКомпонента, ШаблонСайта','Компонент «Профиль пользователя» позволяет вывести в публичную часть сайта информацию о пользователе. Некоторые поля пользователь может отредактировать. В визуальном редакторе компонент расположен по пути: «Служебные • Пользователь • Параметры пользователя».','<p>\r\nКомпонент «<a href=\"https://dev.1c-bitrix.ru/user_help/components/sluzhebnie/user/main_profile.php\">Профиль пользователя</a>» позволяет вывести в публичную часть сайта информацию о пользователе. Некоторые поля пользователь может отредактировать. В визуальном редакторе компонент расположен по пути: «<em>Служебные • Пользователь • Параметры пользователя</em>».\r\n</p>\r\n<p>\r\nПример вызова компонента <code>bitrix:main.profile</code>:\r\n</p>\r\n[php]\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:main.profile\",\r\n    \"\",\r\n    Array(\r\n        \"USER_PROPERTY_NAME\" => \"\",\r\n        \"SET_TITLE\" => \"Y\",\r\n        \"AJAX_MODE\" => \"N\",\r\n        \"USER_PROPERTY\" => Array(),\r\n        \"SEND_INFO\" => \"Y\",\r\n        \"CHECK_RIGHTS\" => \"Y\",\r\n        \"AJAX_OPTION_JUMP\" => \"N\",\r\n        \"AJAX_OPTION_STYLE\" => \"Y\",\r\n        \"AJAX_OPTION_HISTORY\" => \"N\"\r\n    )\r\n);\r\n[/php]\r\n<p>\r\nДавайте создадим страницу <code>/auth/profile.php</code> и разместим на ней вызов компонента «Профиль пользователя»:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл /auth/profile.php\r\n */\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Профиль пользователя\");\r\n?>\r\n\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:main.profile\",\r\n    \"\",\r\n    Array(\r\n        \"CHECK_RIGHTS\" => \"N\",      // Проверять права доступа\r\n        \"SEND_INFO\" => \"N\",         // Генерировать почтовое событие\r\n        \"SET_TITLE\" => \"N\",         // Устанавливать заголовок страницы\r\n        \"USER_PROPERTY\" => \"\",      // Показывать доп. свойства\r\n        \"USER_PROPERTY_NAME\" => \"\", // Название закладки с доп. свойствами\r\n    ),\r\n    false\r\n);\r\n?>\r\n\r\n<?php require($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\"); ?>\r\n[/phtml]\r\n<p>\r\nСтраница <code>/auth/profile.php</code> теперь выглядит так:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/169/1.jpg\" class=\"zoom\"><img src=\"/files/blog/169/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nСкопируем шаблон компонента:\r\n</p>\r\n<ul>\r\n  <li>откуда: <code>bitrix/components/bitrix/main.profile/templates/.default</code></li>\r\n  <li>куда: <code>local/templates/.default/components/bitrix/main.profile/.default</code></li>\r\n</ul>\r\n<p>\r\nПосле разгребания табличной верстки от разработчиков Битрикс, получился такой шаблон:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.profile/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) die();\r\n?>\r\n\r\n<div class=\"bitrix-main-profile\">\r\n\r\n<h2><?= GetMessage(\'MAIN_PROFILE_FORM_TITLE\'); /* Заголовок формы */ ?></h2>\r\n\r\n<?php ShowError($arResult[\"strProfileError\"]); /* сообщения об ошибках */ ?>\r\n\r\n<?php\r\nif ($arResult[\'DATA_SAVED\'] == \'Y\') { // сообщение об успешном сохранении данных\r\n    ShowNote(GetMessage(\'PROFILE_DATA_SAVED\'));\r\n}\r\n?>\r\n\r\n<form method=\"post\" name=\"form1\" action=\"<?= $arResult[\"FORM_TARGET\"]; ?>\" enctype=\"multipart/form-data\">\r\n\r\n    <?= $arResult[\"BX_SESSION_CHECK\"]; ?>\r\n    <input type=\"hidden\" name=\"lang\" value=\"<?= LANG; ?>\" />\r\n    <input type=\"hidden\" name=\"ID\" value=<?= $arResult[\"ID\"]; ?> />\r\n\r\n    <section>\r\n        <h3><?= GetMessage(\'MAIN_PROFILE_REGISTER_TITLE\'); /* Регистрационные данные */ ?></h3>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_REG_TITLE\'); /* обращение */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"TITLE\" value=\"<?= $arResult[\"arUser\"][\"TITLE\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_REG_FNAME\'); /* имя */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"NAME\" maxlength=\"50\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"NAME\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_REG_LNAME\'); /* фамилия */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"LAST_NAME\" maxlength=\"50\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"LAST_NAME\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_REG_SNAME\'); /* отчество */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"SECOND_NAME\" maxlength=\"50\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"SECOND_NAME\"];?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span>\r\n                <?= GetMessage(\'MAIN_PROFILE_REG_EMAIL\'); /* e-mail */ ?>\r\n                <?php if ($arResult[\"EMAIL_REQUIRED\"]): ?>\r\n                    <i>*</i> <!-- поле обязательно для заполнения -->\r\n                <?php endif; ?>\r\n            </span>\r\n            <span>\r\n                <input type=\"text\" name=\"EMAIL\" maxlength=\"50\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"EMAIL\"]?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span>\r\n                <?= GetMessage(\'MAIN_PROFILE_REG_LOGIN\'); /* логин */ ?>\r\n                <i>*</i> <!-- поле обязательно для заполнения -->\r\n            </span>\r\n            <span>\r\n                <input type=\"text\" name=\"LOGIN\" maxlength=\"50\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"LOGIN\"]?>\" />\r\n            </span>\r\n        </div>\r\n        <?php if ($arResult[\"arUser\"][\"EXTERNAL_AUTH_ID\"] == \'\'): /* авторизация не через внешние сервисы */ ?>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_REG_PASSWORD\'); /* новый пароль */ ?></span>\r\n                <span>\r\n                    <input type=\"password\" name=\"NEW_PASSWORD\" maxlength=\"50\"\r\n                           value=\"\" autocomplete=\"off\" />\r\n                </span>\r\n                <?php if ($arResult[\"SECURE_AUTH\"]): /* безопасная авторизация */ ?>\r\n                    <!-- код удален -->\r\n                <?php endif; ?>\r\n            </div>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_REG_CONFIRM\'); /* подтверждение пароля */ ?></span>\r\n                <span>\r\n                    <input type=\"password\" name=\"NEW_PASSWORD_CONFIRM\" maxlength=\"50\"\r\n                           value=\"\" autocomplete=\"off\" />\r\n                </span>\r\n            </div>\r\n        <?php endif; ?>\r\n    </section>\r\n\r\n    <section>\r\n        <h3><?= GetMessage(\'MAIN_PROFILE_PERSONAL_TITLE\'); /* Личные данные */ ?></h3>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_PROFESSION\'); /* профессия */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_PROFESSION\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_PROFESSION\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_WWW\'); /* сайт */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_WWW\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_WWW\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_ICQ\'); /* ICQ */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_ICQ\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_ICQ\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_GENDER\'); /* пол */ ?></span>\r\n            <span>\r\n                <select name=\"PERSONAL_GENDER\">\r\n                    <option value=\"\">\r\n                        <?= GetMessage(\'MAIN_PROFILE_DONT_KNOW\'); ?>\r\n                    </option>\r\n                    <option value=\"M\"<?=$arResult[\"arUser\"][\"PERSONAL_GENDER\"]==\"M\" ? \' selected=\"selected\"\':\'\'?>>\r\n                        <?= GetMessage(\"USER_MALE\"); ?>\r\n                    </option>\r\n                    <option value=\"F\"<?=$arResult[\"arUser\"][\"PERSONAL_GENDER\"]==\"F\" ? \' selected=\"selected\"\':\'\'?>>\r\n                        <?= GetMessage(\"USER_FEMALE\"); ?>\r\n                    </option>\r\n                </select>\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span>\r\n                <?= GetMessage(\'MAIN_PROFILE_USER_BIRTHDAY\'); /* день рождения */ ?>\r\n                (<?= $arResult[\"DATE_FORMAT\"]; ?>)\r\n            </span>\r\n            <span>\r\n                <?php\r\n                $APPLICATION->IncludeComponent(\r\n                    \'bitrix:main.calendar\',\r\n                    \'\',\r\n                    array(\r\n                        \'SHOW_INPUT\' => \'Y\',\r\n                        \'FORM_NAME\' => \'form1\',\r\n                        \'INPUT_NAME\' => \'PERSONAL_BIRTHDAY\',\r\n                        \'INPUT_VALUE\' => $arResult[\"arUser\"][\"PERSONAL_BIRTHDAY\"],\r\n                        \'SHOW_TIME\' => \'N\'\r\n                    ),\r\n                    null,\r\n                    array(\'HIDE_ICONS\' => \'Y\')\r\n                );\r\n                ?>\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_PHOTO\'); /* фотография */ ?></span>\r\n            <span>\r\n                <?= $arResult[\"arUser\"][\"PERSONAL_PHOTO_INPUT\"]; ?>\r\n                <?php\r\n                if (strlen($arResult[\"arUser\"][\"PERSONAL_PHOTO\"]) > 0) {\r\n                    echo $arResult[\"arUser\"][\"PERSONAL_PHOTO_HTML\"];\r\n                }\r\n                ?>\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_PHONE\'); /* телефон */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_PHONE\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_PHONE\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_FAX\'); /* факс */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_FAX\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_FAX\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_MOBILE\'); /* мобильный */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_MOBILE\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_MOBILE\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_PAGER\'); /* пейджер */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_PAGER\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_PAGER\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_COUNTRY\'); /* страна */ ?></span>\r\n            <span><?= $arResult[\"COUNTRY_SELECT\"]; ?></span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_STATE\'); /* область */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_STATE\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_STATE\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_CITY\'); /* город */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_CITY\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_CITY\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_ZIP\'); /* почтовый индекс */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_ZIP\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_ZIP\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_STREET\'); /* улица */ ?></span>\r\n            <span>\r\n                <textarea name=\"PERSONAL_STREET\"><?= $arResult[\"arUser\"][\"PERSONAL_STREET\"]; ?></textarea>\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_MAILBOX\'); /* почтовый ящик */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_MAILBOX\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_MAILBOX\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_NOTES\'); /* дополнительные заметки */ ?></span>\r\n            <span>\r\n                <textarea name=\"PERSONAL_NOTES\"><?=$arResult[\"arUser\"][\"PERSONAL_NOTES\"]?></textarea>\r\n            </span>\r\n        </div>\r\n    </section>\r\n\r\n    <section>\r\n        <h3><?= GetMessage(\'MAIN_PROFILE_WORK_TITLE\'); /* Информация о работе */ ?></h3>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_COMPANY\'); /* компания */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_COMPANY\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_COMPANY\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_WWW\'); /* сайт */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_WWW\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_WWW\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_DEPARTMENT\'); /* отдел */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_DEPARTMENT\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_DEPARTMENT\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_POSITION\'); /* должность */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_POSITION\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_POSITION\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_PROFILE\'); /* направление деятельности */ ?></span>\r\n            <span>\r\n                <textarea name=\"WORK_PROFILE\"><?= $arResult[\"arUser\"][\"WORK_PROFILE\"]; ?></textarea>\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_LOGO\'); /* логотип компании */ ?></span>\r\n            <span>\r\n            <?= $arResult[\"arUser\"][\"WORK_LOGO_INPUT\"]; ?>\r\n            <?php\r\n            if (strlen($arResult[\"arUser\"][\"WORK_LOGO\"]) > 0) {\r\n                echo $arResult[\"arUser\"][\"WORK_LOGO_HTML\"];\r\n            }\r\n            ?>\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_PHONE\'); /* телефон */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_PHONE\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_PHONE\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_FAX\'); /* факс */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_FAX\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_FAX\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_PAGER\'); /* пейджер */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_PAGER\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_PAGER\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_COUNTRY\'); /* страна */ ?></span>\r\n            <span><?= $arResult[\"COUNTRY_SELECT_WORK\"]?></span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_STATE\'); /* область */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_STATE\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_STATE\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_CITY\'); /* город */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_CITY\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_CITY\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_ZIP\'); /* почтовый индекс */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_ZIP\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_ZIP\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_STREET\'); /* улица */ ?></span>\r\n            <span>\r\n                <textarea name=\"WORK_STREET\"><?= $arResult[\"arUser\"][\"WORK_STREET\"]; ?></textarea>\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_MAILBOX\'); /* почтовый ящик */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_MAILBOX\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_MAILBOX\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_NOTES\'); /* дополнительные заметки */ ?></span>\r\n            <span>\r\n                <textarea name=\"WORK_NOTES\"><?= $arResult[\"arUser\"][\"WORK_NOTES\"]; ?></textarea>\r\n            </span>\r\n        </div>\r\n    </section>\r\n\r\n    <?php if ($arResult[\"INCLUDE_FORUM\"] == \"Y\"): /* если на сайте есть форум */ ?>\r\n        <section>\r\n            <h3><?= GetMessage(\'MAIN_PROFILE_FORUM_TITLE\'); ?></h3>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_FORUM_SHOW_NAME\'); ?></span>\r\n                <span>\r\n                    <input type=\"hidden\" name=\"forum_SHOW_NAME\" value=\"N\" />\r\n                    <input type=\"checkbox\" name=\"forum_SHOW_NAME\" value=\"Y\"\r\n                           <?php if ($arResult[\"arForumUser\"][\"SHOW_NAME\"]==\"Y\") echo \'checked=\"checked\"\';?> />\r\n                </span>\r\n            </div>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_FORUM_DESCRIPTION\'); ?></span>\r\n                <span>\r\n                    <input type=\"text\" name=\"forum_DESCRIPTION\" maxlength=\"255\"\r\n                           value=\"<?= $arResult[\"arForumUser\"][\"DESCRIPTION\"]; ?>\" />\r\n                </span>\r\n            </div>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_FORUM_INTERESTS\'); ?></span>\r\n                <span>\r\n                    <textarea name=\"forum_INTERESTS\"><?= $arResult[\"arForumUser\"][\"INTERESTS\"]; ?></textarea>\r\n                </span>\r\n            </div>\r\n            <div>\r\n                <span><?= GetMessage($MESS[\'MAIN_PROFILE_FORUM_SIGNATURE\']); ?></span>\r\n                <span>\r\n                    <textarea name=\"forum_SIGNATURE\"><?= $arResult[\"arForumUser\"][\"SIGNATURE\"]; ?></textarea>\r\n                </span>\r\n            </div>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_FORUM_AVATAR\'); ?></span>\r\n                <span>\r\n                    <?= $arResult[\"arForumUser\"][\"AVATAR_INPUT\"]; ?>\r\n                    <?php\r\n                    if (strlen($arResult[\"arForumUser\"][\"AVATAR\"]) > 0) {\r\n                        echo $arResult[\"arForumUser\"][\"AVATAR_HTML\"];\r\n                    }\r\n                    ?>\r\n                </span>\r\n            </div>\r\n        </section>\r\n    <?php endif; ?>\r\n\r\n    <?php if ($arResult[\"INCLUDE_BLOG\"] == \"Y\"): /* если на сайте есть блог */ ?>\r\n        <section>\r\n            <h3><?= GetMessage(\'MAIN_PROFILE_BLOG_TITLE\'); ?></h3>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_BLOG_ALIAS\')?></span>\r\n                <span>\r\n                    <input type=\"text\" name=\"blog_ALIAS\" maxlength=\"255\"\r\n                           value=\"<?= $arResult[\"arBlogUser\"][\"ALIAS\"]; ?>\" />\r\n                </span>\r\n            </div>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_BLOG_DESCRIPTION\'); ?></span>\r\n                <span>\r\n                    <input type=\"text\" name=\"blog_DESCRIPTION\" maxlength=\"255\"\r\n                           value=\"<?= $arResult[\"arBlogUser\"][\"DESCRIPTION\"]; ?>\" />\r\n                </span>\r\n            </div>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_BLOG_INTERESTS\')?></span>\r\n                <span>\r\n                    <textarea name=\"blog_INTERESTS\"><?= $arResult[\"arBlogUser\"][\"INTERESTS\"]; ?></textarea>\r\n                </span>\r\n            </div>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_BLOG_AVATAR\')?></span>\r\n                <span>\r\n                    <?= $arResult[\"arBlogUser\"][\"AVATAR_INPUT\"]; ?>\r\n                    <?php\r\n                    if (strlen($arResult[\"arBlogUser\"][\"AVATAR\"]) > 0) {\r\n                        echo $arResult[\"arBlogUser\"][\"AVATAR_HTML\"];\r\n                    }\r\n                    ?>\r\n                </span>\r\n            </div>\r\n        </section>\r\n    <?php endif; ?>\r\n\r\n    <?php if ($arResult[\"INCLUDE_LEARNING\"] == \"Y\"): /* профиль студента */ ?>\r\n        <section>\r\n            <h3><?= GetMessage(\'MAIN_PROFILE_STUDENT_TITLE\')?></h3>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_STUDENT_PUBLIC\');?>:</span>\r\n                <span>\r\n                    <input type=\"hidden\" name=\"student_PUBLIC_PROFILE\" value=\"N\" />\r\n                    <input type=\"checkbox\" name=\"student_PUBLIC_PROFILE\" value=\"Y\"\r\n                           <?php if ($arResult[\"arStudent\"][\"PUBLIC_PROFILE\"]==\"Y\") echo \'checked=\"checked\"\'; ?> />\r\n                </span>\r\n            </div>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_STUDENT_RESUME\'); ?></span>\r\n                <span>\r\n                    <textarea name=\"student_RESUME\"><?= $arResult[\"arStudent\"][\"RESUME\"]; ?></textarea>\r\n                </span>\r\n            </div>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_STUDENT_TRANSCRIPT\'); ?></span>\r\n                <span><?= $arResult[\"arStudent\"][\"TRANSCRIPT\"]; ?>-<?= $arResult[\"ID\"]; ?></span>\r\n            </div>\r\n        </section>\r\n    <?php endif; ?>\r\n\r\n    <?php if ($arResult[\"IS_ADMIN\"]): /* если это администратор */ ?>\r\n        <section>\r\n        <h3><?= GetMessage(\'MAIN_PROFILE_ADMIN_NOTES\'); ?></h3>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_ADMIN_NOTES\'); ?></span>\r\n            <span>\r\n                <textarea name=\"ADMIN_NOTES\"><?= $arResult[\"arUser\"][\"ADMIN_NOTES\"]; ?></textarea>\r\n            </span>\r\n        </div>\r\n        </section>\r\n    <?php endif; ?>\r\n\r\n    <?php /***** Пользовательские свойства *****/ ?>\r\n    <?php if ($arResult[\"USER_PROPERTIES\"][\"SHOW\"] == \"Y\"): ?>\r\n        <section>\r\n            <h3>\r\n                <?=\r\n                strlen(trim($arParams[\"USER_PROPERTY_NAME\"])) > 0\r\n                ?\r\n                $arParams[\"USER_PROPERTY_NAME\"]\r\n                :\r\n                GetMessage(\"USER_TYPE_EDIT_TAB\");\r\n                ?>\r\n            </h3>\r\n            <?php foreach ($arResult[\"USER_PROPERTIES\"][\"DATA\"] as $FIELD_NAME => $arUserField):?>\r\n            <div>\r\n                <span>\r\n                <?php if ($arUserField[\"MANDATORY\"]==\"Y\"): ?>\r\n                    <i>*</i> <!-- поле обязательно для заполнения -->\r\n                <?php endif; ?>\r\n                <?= $arUserField[\"EDIT_FORM_LABEL\"]; ?>\r\n                </span>\r\n                <span>\r\n                    <?php\r\n                    $APPLICATION->IncludeComponent(\r\n                        \"bitrix:system.field.edit\",\r\n                        $arUserField[\"USER_TYPE\"][\"USER_TYPE_ID\"],\r\n                        array(\r\n                            \"bVarsFromForm\" => $arResult[\"bVarsFromForm\"],\r\n                            \"arUserField\"   => $arUserField\r\n                        ),\r\n                        null,\r\n                        array(\"HIDE_ICONS\"=>\"Y\")\r\n                    );\r\n                    ?>\r\n                </span>\r\n            </div>\r\n            <?php endforeach; ?>\r\n        </section>\r\n    <?php endif; ?>\r\n    <?php /***** /Пользовательские свойства *****/ ?>\r\n\r\n    <div class=\"submit\">\r\n        <input type=\"submit\" name=\"save\" value=\"<?= GetMessage(\'MAIN_PROFILE_FORM_SUBMIT\'); ?>\">\r\n        <input type=\"reset\" value=\"<?= GetMessage(\'MAIN_PROFILE_FORM_RESET\'); ?>\">\r\n    </p>\r\n</form>\r\n\r\n<p><?= $arResult[\"GROUP_POLICY\"][\"PASSWORD_REQUIREMENTS\"]; /* сообщение о min длине пароля */ ?></p>\r\n<p><i>*</i> <?= GetMessage(\'MAIN_PROFILE_FORM_REQUIRED\'); /* Эти поля обязательны для заполнения */ ?></p>\r\n\r\n<?php\r\nif ($arResult[\"SOCSERV_ENABLED\"]) {\r\n    $APPLICATION->IncludeComponent( // связать этот профиль с профилями в социальных сетях\r\n        \"bitrix:socserv.auth.split\",\r\n        \".default\",\r\n        array(\r\n            \"SHOW_PROFILES\" => \"Y\",\r\n            \"ALLOW_DELETE\" => \"Y\"\r\n        ),\r\n        false\r\n    );\r\n}\r\n?>\r\n\r\n</div>\r\n[/phtml]\r\n\r\n<p>\r\nПолей слишком много, поэтому часть из них я удалил. Кроме того, удалил профили для форума и блога. Переделал языковый файл и добавил стили.\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.profile/.default/lang/ru/template.php\r\n */\r\n$MESS[\'MAIN_PROFILE_FORM_TITLE\']         = \'Профиль пользователя\';\r\n$MESS[\'MAIN_PROFILE_DATA_SAVED\']         = \'Изменения сохранены\';\r\n$MESS[\'MAIN_PROFILE_FORM_SUBMIT\']        = \'Сохранить\';\r\n$MESS[\'MAIN_PROFILE_FORM_RESET\']         = \'Сбросить\';\r\n$MESS[\'MAIN_PROFILE_FORM_REQUIRED\']      = \'Эти поля обязательны для заполнения\';\r\n$MESS[\'MAIN_PROFILE_LAST_UPDATE\']        = \'Дата обновления\';\r\n$MESS[\'MAIN_PROFILE_LAST_LOGIN\']         = \'Последняя авторизация\';\r\n$MESS[\'MAIN_PROFILE_DONT_KNOW\']          = \'Нет данных\';\r\n// заголовки разделов профиля пользователя\r\n$MESS[\'MAIN_PROFILE_REGISTER_TITLE\']     = \'Регистрационные данные\';\r\n$MESS[\'MAIN_PROFILE_PERSONAL_TITLE\']     = \'Личные данные\';\r\n$MESS[\'MAIN_PROFILE_WORK_TITLE\']         = \'Информация о работе\';\r\n$MESS[\'MAIN_PROFILE_FORUM_TITLE\']        = \'Профиль на форуме\';\r\n$MESS[\'MAIN_PROFILE_BLOG_TITLE\']         = \'Профиль в блоге\';\r\n$MESS[\'MAIN_PROFILE_STUDENT_TITLE\']      = \'Профиль студента\';\r\n$MESS[\'MAIN_PROFILE_ADMIN_NOTES\']        = \'Заметки администратора\';\r\n// раздел: Профиль пользователя\r\n$MESS[\'MAIN_PROFILE_REG_TITLE\']          = \'Обращение\';\r\n$MESS[\'MAIN_PROFILE_REG_FNAME\']          = \'Имя\';\r\n$MESS[\'MAIN_PROFILE_REG_LNAME\']          = \'Фамилия\';\r\n$MESS[\'MAIN_PROFILE_REG_SNAME\']          = \'Отчество\';\r\n$MESS[\'MAIN_PROFILE_REG_EMAIL\']          = \'E-mail\';\r\n$MESS[\'MAIN_PROFILE_REG_LOGIN\']          = \'Логин\';\r\n$MESS[\'MAIN_PROFILE_REG_PASSWORD\']       = \'Новый пароль\';\r\n$MESS[\'MAIN_PROFILE_REG_CONFIRM\']        = \'Подтверждение пароля\';\r\n// раздел: Личные данные\r\n$MESS[\'MAIN_PROFILE_USER_PROFESSION\']    = \'Профессия\';\r\n$MESS[\'MAIN_PROFILE_USER_WWW\']           = \'Сайт\';\r\n$MESS[\'MAIN_PROFILE_USER_ICQ\']           = \'ICQ\';\r\n$MESS[\'MAIN_PROFILE_USER_GENDER\']        = \'Пол\';\r\n$MESS[\'MAIN_PROFILE_USER_MALE\']          = \'Мужской\';\r\n$MESS[\'MAIN_PROFILE_USER_FEMALE\']         = \'Женский\';\r\n$MESS[\'MAIN_PROFILE_USER_BIRTHDAY\']      = \'Дата рождения\';\r\n$MESS[\'MAIN_PROFILE_USER_PHOTO\']         = \'Фотография\';\r\n$MESS[\'MAIN_PROFILE_USER_PHONE\']         = \'Телефон\';\r\n$MESS[\'MAIN_PROFILE_USER_FAX\']           = \'Факс\';\r\n$MESS[\'MAIN_PROFILE_USER_MOBILE\']        = \'Мобильный\';\r\n$MESS[\'MAIN_PROFILE_USER_PAGER\']         = \'Пейджер\';\r\n$MESS[\'MAIN_PROFILE_USER_PHONES\']        = \'Телефоны\';\r\n$MESS[\'MAIN_PROFILE_USER_ADDRESS\']       = \'Почтовый адрес\';\r\n$MESS[\'MAIN_PROFILE_USER_COUNTRY\']       = \'Страна\';\r\n$MESS[\'MAIN_PROFILE_USER_CITY\']          = \'Город\';\r\n$MESS[\'MAIN_PROFILE_USER_ZIP\']           = \'Почтовый индекс\';\r\n$MESS[\'MAIN_PROFILE_USER_STREET\']        = \'Улица, дом\';\r\n$MESS[\'MAIN_PROFILE_USER_STATE\']         = \'Область / край\';\r\n$MESS[\'MAIN_PROFILE_USER_MAILBOX\']       = \'Почтовый ящик\';\r\n$MESS[\'MAIN_PROFILE_USER_NOTES\']         = \'Дополнительные заметки\';\r\n// раздел: Информация о работе\r\n$MESS[\'MAIN_PROFILE_WORK_COMPANY\']       = \'Наименование компании\';\r\n$MESS[\'MAIN_PROFILE_WORK_WWW\']           = \'Сайт компании\';\r\n$MESS[\'MAIN_PROFILE_WORK_DEPARTMENT\']    = \'Департамент / Отдел\';\r\n$MESS[\'MAIN_PROFILE_WORK_POSITION\']      = \'Должность\';\r\n$MESS[\'MAIN_PROFILE_WORK_PROFILE\']       = \'Направление деятельности\';\r\n$MESS[\'MAIN_PROFILE_WORK_LOGO\']          = \'Логотип компании\';\r\n$MESS[\'MAIN_PROFILE_WORK_PHONE\']         = \'Телефон\';\r\n$MESS[\'MAIN_PROFILE_WORK_FAX\']           = \'Факс\';\r\n$MESS[\'MAIN_PROFILE_WORK_MOBILE\']        = \'Мобильный\';\r\n$MESS[\'MAIN_PROFILE_WORK_PAGER\']         = \'Пейджер\';\r\n$MESS[\'MAIN_PROFILE_WORK_PHONES\']        = \'Телефоны\';\r\n$MESS[\'MAIN_PROFILE_WORK_ADDRESS\']       = \'Почтовый адрес\';\r\n$MESS[\'MAIN_PROFILE_WORK_COUNTRY\']       = \'Страна\';\r\n$MESS[\'MAIN_PROFILE_WORK_CITY\']          = \'Город\';\r\n$MESS[\'MAIN_PROFILE_WORK_ZIP\']           = \'Почтовый индекс\';\r\n$MESS[\'MAIN_PROFILE_WORK_STREET\']        = \'Улица, дом\';\r\n$MESS[\'MAIN_PROFILE_WORK_STATE\']         = \'Область / край\';\r\n$MESS[\'MAIN_PROFILE_WORK_MAILBOX\']       = \'Почтовый ящик\';\r\n$MESS[\'MAIN_PROFILE_WORK_NOTES\']         = \'Дополнительные заметки\';\r\n// раздел: Профиль на форуме\r\n$MESS[\'MAIN_PROFILE_FORUM_SHOW_NAME\']    = \'Показывать имя\';\r\n$MESS[\'MAIN_PROFILE_FORUM_DESCRIPTION\']  = \'Пояснение\';\r\n$MESS[\'MAIN_PROFILE_FORUM_INTERESTS\']    = \'Интересы\';\r\n$MESS[\'MAIN_PROFILE_FORUM_SIGNATURE\']    = \'Подпись\';\r\n$MESS[\'MAIN_PROFILE_FORUM_AVATAR\']       = \'Аватар\';\r\n// раздел: Профиль в блоге\r\n$MESS[\'MAIN_PROFILE_BLOG_ALIAS\']         = \'Псевдоним\';\r\n$MESS[\'MAIN_PROFILE_BLOG_DESCRIPTION\']   = \'Пояснение\';\r\n$MESS[\'MAIN_PROFILE_BLOG_INTERESTS\']     = \'Интересы\';\r\n$MESS[\'MAIN_PROFILE_BLOG_AVATAR\']        = \'Аватар\';\r\n// раздел: Профиль студента\r\n$MESS[\'MAIN_PROFILE_STUDENT_PUBLIC\']     = \'Разрешить публичный доступ\';\r\n$MESS[\'MAIN_PROFILE_STUDENT_RESUME\']     = \'Резюме\';\r\n$MESS[\'MAIN_PROFILE_STUDENT_TRANSCRIPT\'] = \'Transcript\';\r\n[/php]\r\n\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.profile/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) die();\r\n?>\r\n\r\n<div class=\"bitrix-main-profile\">\r\n\r\n<h2><?= GetMessage(\'MAIN_PROFILE_FORM_TITLE\'); /* Заголовок формы */ ?></h2>\r\n\r\n<?php ShowError($arResult[\"strProfileError\"]); /* сообщения об ошибках */ ?>\r\n\r\n<?php\r\nif ($arResult[\'DATA_SAVED\'] == \'Y\') { // сообщение об успешном сохранении данных\r\n    ShowNote(GetMessage(\'PROFILE_DATA_SAVED\'));\r\n}\r\n?>\r\n\r\n<form method=\"post\" name=\"form1\" action=\"<?= $arResult[\"FORM_TARGET\"]; ?>\" enctype=\"multipart/form-data\">\r\n\r\n    <?= $arResult[\"BX_SESSION_CHECK\"]; ?>\r\n    <input type=\"hidden\" name=\"lang\" value=\"<?= LANG; ?>\" />\r\n    <input type=\"hidden\" name=\"ID\" value=<?= $arResult[\"ID\"]; ?> />\r\n    <!-- в качестве логина используется e-mail -->\r\n    <input type=\"hidden\" name=\"LOGIN\" maxlength=\"50\" value=\"<?= $arResult[\"arUser\"][\"EMAIL\"]; ?>\" />\r\n\r\n    <section class=\"clearfix\">\r\n        <h3><?= GetMessage(\'MAIN_PROFILE_REGISTER_TITLE\'); /* Регистрационные данные */ ?></h3>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_REG_FNAME\'); /* имя */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"NAME\" maxlength=\"50\" value=\"<?= $arResult[\"arUser\"][\"NAME\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_REG_LNAME\'); /* фамилия */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"LAST_NAME\" maxlength=\"50\" value=\"<?= $arResult[\"arUser\"][\"LAST_NAME\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_REG_SNAME\'); /* отчество */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"SECOND_NAME\" maxlength=\"50\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"SECOND_NAME\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span>\r\n                <?= GetMessage(\'MAIN_PROFILE_REG_EMAIL\'); /* e-mail */ ?>\r\n                <?php if ($arResult[\"EMAIL_REQUIRED\"]): ?>\r\n                    <i>*</i> <!-- поле обязательно для заполнения -->\r\n                <?php endif; ?>\r\n            </span>\r\n            <span>\r\n                <input type=\"text\" name=\"EMAIL\" maxlength=\"50\" value=\"<?= $arResult[\"arUser\"][\"EMAIL\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <?php if ($arResult[\"arUser\"][\"EXTERNAL_AUTH_ID\"] == \'\'): /* если авторизация не через внешние сервисы */ ?>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_REG_PASSWORD\'); /* новый пароль */ ?></span>\r\n                <span><input type=\"password\" name=\"NEW_PASSWORD\" maxlength=\"50\" value=\"\" autocomplete=\"off\" /></span>\r\n                <?php if ($arResult[\"SECURE_AUTH\"]): /* безопасная авторизация (зашифрованная передача пароля) */ ?>\r\n                    <!-- код удален -->\r\n                <?php endif; ?>\r\n            </div>\r\n            <div>\r\n                <span><?= GetMessage(\'MAIN_PROFILE_REG_CONFIRM\'); /* подтверждение пароля */ ?></span>\r\n                <span>\r\n                    <input type=\"password\" name=\"NEW_PASSWORD_CONFIRM\" maxlength=\"50\" value=\"\" autocomplete=\"off\" />\r\n                </span>\r\n            </div>\r\n        <?php endif; ?>\r\n    </section>\r\n\r\n    <section class=\"clearfix\">\r\n        <h3><?= GetMessage(\'MAIN_PROFILE_PERSONAL_TITLE\'); /* Личные данные */ ?></h3>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_PROFESSION\'); /* профессия */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_PROFESSION\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_PROFESSION\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_WWW\'); /* сайт */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_WWW\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_WWW\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_ICQ\'); /* ICQ */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_ICQ\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_ICQ\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_GENDER\'); /* пол */ ?></span>\r\n            <span>\r\n                <select name=\"PERSONAL_GENDER\">\r\n                    <option value=\"\">\r\n                        <?= GetMessage(\'MAIN_PROFILE_DONT_KNOW\'); ?>\r\n                    </option>\r\n                    <option value=\"M\"<?=$arResult[\"arUser\"][\"PERSONAL_GENDER\"]==\"M\" ? \' selected=\"selected\"\':\'\'?>>\r\n                        <?= GetMessage(\'MAIN_PROFILE_USER_MALE\'); ?>\r\n                    </option>\r\n                    <option value=\"F\"<?=$arResult[\"arUser\"][\"PERSONAL_GENDER\"]==\"F\" ? \' selected=\"selected\"\':\'\'?>>\r\n                        <?= GetMessage(\'MAIN_PROFILE_USER_FEMALE\'); ?>\r\n                    </option>\r\n                </select>\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_PHONE\'); /* телефон */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_PHONE\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_PHONE\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_MOBILE\'); /* мобильный */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_MOBILE\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_MOBILE\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_COUNTRY\'); /* страна */ ?></span>\r\n            <span><?= $arResult[\"COUNTRY_SELECT\"]; ?></span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_STATE\'); /* область */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_STATE\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_STATE\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_CITY\'); /* город */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_CITY\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_CITY\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_ZIP\'); /* почтовый индекс */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_ZIP\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_ZIP\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_STREET\'); /* улица */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_STREET\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_STREET\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_USER_NOTES\'); /* дополнительные заметки */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"PERSONAL_NOTES\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"PERSONAL_NOTES\"];?>\" />\r\n            </span>\r\n        </div>\r\n    </section>\r\n\r\n    <section class=\"clearfix\">\r\n        <h3><?= GetMessage(\'MAIN_PROFILE_WORK_TITLE\'); /* Информация о работе */ ?></h3>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_COMPANY\'); /* компания */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_COMPANY\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_COMPANY\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_WWW\'); /* сайт */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_WWW\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_WWW\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_DEPARTMENT\'); /* отдел */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_DEPARTMENT\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_DEPARTMENT\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_POSITION\'); /* должность */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_POSITION\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_POSITION\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_PROFILE\'); /* направление деятельности */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_PROFILE\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_PROFILE\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_PHONE\'); /* телефон */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_PHONE\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_PHONE\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_COUNTRY\'); /* страна */ ?></span>\r\n            <span><?= $arResult[\"COUNTRY_SELECT_WORK\"]?></span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_STATE\'); /* область */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_STATE\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_STATE\"]; ?>\" />\r\n                </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_CITY\'); /* город */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_CITY\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_CITY\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_ZIP\'); /* почтовый индекс */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_ZIP\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_ZIP\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_STREET\'); /* улица */ ?></span>\r\n            <span><input type=\"text\" name=\"WORK_STREET\" maxlength=\"255\"\r\n                         value=\"<?= $arResult[\"arUser\"][\"WORK_STREET\"]; ?>\" /></span>\r\n        </div>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_WORK_NOTES\'); /* дополнительные заметки */ ?></span>\r\n            <span>\r\n                <input type=\"text\" name=\"WORK_NOTES\" maxlength=\"255\"\r\n                       value=\"<?= $arResult[\"arUser\"][\"WORK_NOTES\"]; ?>\" />\r\n            </span>\r\n        </div>\r\n    </section>\r\n\r\n    <?php if ($arResult[\"IS_ADMIN\"]): /* если это администратор */ ?>\r\n        <section class=\"admin-notes clearfix\">\r\n        <h3><?= GetMessage(\'MAIN_PROFILE_ADMIN_NOTES\'); ?></h3>\r\n        <div>\r\n            <span><?= GetMessage(\'MAIN_PROFILE_ADMIN_NOTES\'); ?></span>\r\n            <span><textarea name=\"ADMIN_NOTES\"><?= $arResult[\"arUser\"][\"ADMIN_NOTES\"]; ?></textarea></span>\r\n        </div>\r\n        </section>\r\n    <?php endif; ?>\r\n\r\n    <?php /***** Пользовательские свойства *****/ ?>\r\n    <?php if ($arResult[\"USER_PROPERTIES\"][\"SHOW\"] == \"Y\"): ?>\r\n        <section class=\"clearfix\">\r\n            <h3>\r\n            <?=\r\n            strlen(trim($arParams[\"USER_PROPERTY_NAME\"])) > 0\r\n            ?\r\n            $arParams[\"USER_PROPERTY_NAME\"]\r\n            :\r\n            GetMessage(\"USER_TYPE_EDIT_TAB\");\r\n            ?>\r\n            </h3>\r\n            <?php foreach ($arResult[\"USER_PROPERTIES\"][\"DATA\"] as $FIELD_NAME => $arUserField):?>\r\n            <div>\r\n                <span>\r\n                <?php if ($arUserField[\"MANDATORY\"]==\"Y\"): ?>\r\n                    <i>*</i> <!-- поле обязательно для заполнения -->\r\n                <?php endif; ?>\r\n                <?= $arUserField[\"EDIT_FORM_LABEL\"]; ?>\r\n                </span>\r\n                <span>\r\n                    <?php\r\n                    $APPLICATION->IncludeComponent(\r\n                        \"bitrix:system.field.edit\",\r\n                        $arUserField[\"USER_TYPE\"][\"USER_TYPE_ID\"],\r\n                        array(\r\n                            \"bVarsFromForm\" => $arResult[\"bVarsFromForm\"],\r\n                            \"arUserField\"   => $arUserField\r\n                        ),\r\n                        null,\r\n                        array(\"HIDE_ICONS\"=>\"Y\")\r\n                    );\r\n                    ?>\r\n                </span>\r\n            </div>\r\n            <?php endforeach; ?>\r\n        </section>\r\n    <?php endif; ?>\r\n    <?php /***** /Пользовательские свойства *****/ ?>\r\n\r\n    <div>\r\n        <input type=\"submit\" name=\"save\" value=\"<?= GetMessage(\'MAIN_PROFILE_FORM_SUBMIT\'); ?>\">\r\n        <input type=\"reset\" value=\"<?= GetMessage(\'MAIN_PROFILE_FORM_RESET\'); ?>\">\r\n    </div>\r\n</form>\r\n\r\n<p><?= $arResult[\"GROUP_POLICY\"][\"PASSWORD_REQUIREMENTS\"]; /* сообщение о min длине пароля */ ?></p>\r\n<p><i>*</i> <?= GetMessage(\'MAIN_PROFILE_FORM_REQUIRED\'); /* Эти поля обязательны для заполнения */ ?></p>\r\n\r\n</div>\r\n[/phtml]\r\n\r\n[css]\r\n/*\r\n * Файл local/templates/.default/components/bitrix/main.profile/.default/style.css\r\n */\r\n.bitrix-main-profile {\r\n\r\n}\r\n    .bitrix-main-profile > p {\r\n        margin: 1em 0;\r\n    }\r\n    .bitrix-main-profile > h2 {\r\n        margin-bottom: 30px;\r\n    }\r\n        .bitrix-main-profile > p > a {\r\n            text-decoration: underline;\r\n        }\r\n    .bitrix-main-profile > form {\r\n\r\n    }\r\n        .bitrix-main-profile > form > section {\r\n            border: 1px solid #ccc;\r\n            padding: 15px 10px 0 10px;\r\n            margin-bottom: 40px;\r\n            position: relative;\r\n        }\r\n            .bitrix-main-profile > form > section > h3 {\r\n                font-size: 18px;\r\n                position: absolute;\r\n                top: -13px;\r\n                background: #eee;\r\n                padding: 0 10px;\r\n                color: #999;\r\n            }\r\n            .bitrix-main-profile > form > section > div {\r\n                width: 50%;\r\n                margin-bottom: 15px;\r\n                float: left;\r\n                box-sizing: border-box;\r\n            }\r\n            .bitrix-main-profile > form  > section > div:nth-of-type(even) {\r\n                padding-left: 1%;\r\n            }\r\n            .bitrix-main-profile > form  > section > div:nth-of-type(odd) {\r\n                padding-right: 1%;\r\n            }\r\n                .bitrix-main-profile > form > section > div > span {\r\n                    display: block;\r\n                }\r\n                .bitrix-main-profile > form > section > div > span:first-child {\r\n                    margin-bottom: 5px;\r\n                }\r\n                    .bitrix-main-profile > form > section > div > span input[type=\"text\"],\r\n                    .bitrix-main-profile > form > section > div > span input[type=\"password\"],\r\n                    .bitrix-main-profile > form > section > div > span select {\r\n                        width: 100%;\r\n                        padding: 5px;\r\n                        border: 1px solid #ccc;\r\n                        height: 30px;\r\n                    }\r\n        .bitrix-main-profile > form > section:last-of-type {\r\n            margin-bottom: 20px;\r\n        }\r\n        .bitrix-main-profile > form > section.admin-notes > div {\r\n            width: 100%;\r\n        }\r\n            .bitrix-main-profile > form > section.admin-notes > div > span > textarea {\r\n                width: 100%;\r\n            }\r\n            .bitrix-main-profile > form > div > input[type=\"submit\"],\r\n            .bitrix-main-profile > form > div > input[type=\"reset\"] {\r\n                width: 15%;\r\n                padding: 5px;\r\n                background: #333;\r\n                color: #fff;\r\n                border: none;\r\n                margin-top: 10px;\r\n            }\r\n    .bitrix-main-profile i {\r\n        font-style: normal;\r\n        font-weight: bold;\r\n        color: #f00;\r\n    }\r\n[/css]\r\n<p>\r\nИ вот что получилось в результате:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/169/2.jpg\" class=\"zoom\"><img src=\"/files/blog/169/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nДобавим ссылку на профиль пользователя в файл <code>/auth/index.php</code>:\r\n</p>\r\n[phtml]\r\n<?php\r\n// обратите внимание на эту константу\r\ndefine(\"NEED_AUTH\", true);\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Авторизация и регистрация\");\r\n?>\r\n\r\n<p>Вы зарегистрированы и успешно авторизовались.</p>\r\n<p><a href=\"/auth/profile.php\">Мой профиль</a></p>\r\n<?php\r\n// ссылка для выхода из личного кабинета\r\n$logout = $APPLICATION->GetCurPageParam(\r\n    \"logout=yes\",\r\n    array(\r\n        \"login\",\r\n        \"logout\",\r\n        \"register\",\r\n        \"forgot_password\",\r\n        \"change_password\"\r\n    )\r\n);\r\n?>\r\n<p><a href=\"<?= $logout; ?>\">Выйти</a></p>\r\n\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\");\r\n?>\r\n[/phtml]\r\n\r\n<h2>Системный компонент system.auth.form</h2>\r\n<p>\r\nЭтот компонент предназначен для размещения формы авторизации в любом месте шаблона сайта: в шапке сайта, в левой или правой колонке. Чтобы пользователю не надо было переходить на страницу авторизации, а он мог авторизоваться на любой странице сайта. Пример вызова компонента\r\n</p>\r\n[php]\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:system.auth.form\",\r\n    \"\",\r\n    Array(\r\n        \"FORGOT_PASSWORD_URL\" => \"/auth/\",    // Страница забытого пароля\r\n        \"PROFILE_URL\" => \"/auth/profile.php\", // Страница профиля\r\n        \"REGISTER_URL\" => \"/auth/\",           // Страница регистрации\r\n        \"SHOW_ERRORS\" => \"Y\",                 // Показывать ошибки\r\n    )\r\n);\r\n[/php]\r\n<p>\r\nЯ размещу вызов компонента в шаблоне главной страницы, в правой колонке, после формы поиска:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/169/3.jpg\" class=\"zoom\"><img src=\"/files/blog/169/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТеперь скопируем шаблон компонента и оформим под наш дизайн:\r\n</p>\r\n<ul>\r\n  <li>откуда: <code>bitrix/components/bitrix/system.auth.form/templates/.default</code></li>\r\n  <li>куда: <code>local/templates/.default/components/bitrix/system.auth.form/.default</code></li>\r\n</ul>\r\n<p>\r\nПосле внесения изменений шаблон имеет вид:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.form/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\nCJSCore::Init();\r\n?>\r\n\r\n<div class=\"system-auth-form\">\r\n\r\n<h3><?= GetMessage(\'SYS_AUTH_FORM_TITLE\'); /* заголовок формы */ ?></h3>\r\n\r\n<?php\r\n// сообщения об ошибках при заполнении формы\r\nif ($arResult[\'SHOW_ERRORS\'] == \'Y\' && $arResult[\'ERROR\']) {\r\n    ShowMessage($arResult[\'ERROR_MESSAGE\']);\r\n}\r\n?>\r\n\r\n<?php if ($arResult[\"FORM_TYPE\"] == \"login\"): /* пользователь не авторизован, показываем форму авторизации */ ?>\r\n\r\n    <form name=\"system_auth_form<?= $arResult[\"RND\"]; ?>\" method=\"post\"\r\n          target=\"_top\" action=\"<?= $arResult[\"AUTH_URL\"]; ?>\">\r\n\r\n        <?php if ($arResult[\"BACKURL\"] <> \'\'): ?>\r\n            <input type=\"hidden\" name=\"backurl\" value=\"<?= $arResult[\"BACKURL\"]; ?>\" />\r\n        <?php endif; ?>\r\n\r\n        <?php foreach ($arResult[\"POST\"] as $key => $value): /* передача полученных POST-параметров */ ?>\r\n            <input type=\"hidden\" name=\"<?= $key; ?>\" value=\"<?= $value; ?>\" />\r\n        <?php endforeach; ?>\r\n\r\n        <input type=\"hidden\" name=\"AUTH_FORM\" value=\"Y\" />\r\n        <input type=\"hidden\" name=\"TYPE\" value=\"AUTH\" />\r\n\r\n        <div>\r\n            <span>\r\n                <?= GetMessage(\'SYS_AUTH_FORM_LOGIN\'); /* поле логин */ ?>\r\n                <i>*</i> <!-- поле обязательно для заполнения -->\r\n            </span>\r\n            <span>\r\n                <input type=\"text\" name=\"USER_LOGIN\" maxlength=\"50\" value=\"\" />\r\n            </span>\r\n        </div>\r\n\r\n        <script>\r\n            BX.ready(function() {\r\n                var loginCookie = BX.getCookie(\"<?= CUtil::JSEscape($arResult[\"~LOGIN_COOKIE_NAME\"]); ?>\");\r\n                if (loginCookie) {\r\n                    var form = document.forms[\"system_auth_form<?= $arResult[\"RND\"]; ?>\"];\r\n                    var loginInput = form.elements[\"USER_LOGIN\"];\r\n                    loginInput.value = loginCookie;\r\n                }\r\n            });\r\n        </script>\r\n\r\n        <div>\r\n            <span>\r\n                <?= GetMessage(\'SYS_AUTH_FORM_PASSWORD\'); /* поле пароль */ ?>\r\n                <i>*</i> <!-- поле обязательно для заполнения -->\r\n            </span>\r\n            <span>\r\n                <input type=\"password\" name=\"USER_PASSWORD\" maxlength=\"50\" autocomplete=\"off\" />\r\n            </span>\r\n        </div>\r\n\r\n        <?php if ($arResult[\"SECURE_AUTH\"]): /* безопасная авторизация (зашифрованная передача пароля пользователя) */ ?>\r\n            <!-- код удален -->\r\n        <?php endif?>\r\n\r\n        <?php if ($arResult[\"CAPTCHA_CODE\"]): /* если используется CAPTCHA */ ?>\r\n            <div class=\"captcha\">\r\n                <h4><?php echo GetMessage(\'SYS_AUTH_FORM_CAPTCHA_TITLE\'); /* Защита от роботов */ ?></h4>\r\n                <input type=\"hidden\" name=\"captcha_sid\" value=\"<?= $arResult[\"CAPTCHA_CODE\"]; ?>\" />\r\n                <img src=\"/bitrix/tools/captcha.php?captcha_sid=<?= $arResult[\"CAPTCHA_CODE\"]; ?>\"\r\n                     width=\"180\" height=\"40\" alt=\"CAPTCHA\" />\r\n                <span>\r\n                    <?= GetMessage(\'SYS_AUTH_FORM_CAPTCHA_TEXT\'); /* введите код с картинки */ ?>\r\n                    <i>*</i> <!-- поле обязательно для заполнения -->\r\n                </span>\r\n                <span>\r\n                    <input type=\"text\" name=\"captcha_word\" maxlength=\"50\" value=\"\" />\r\n                </span>\r\n            </div>\r\n        <?php endif; ?>\r\n\r\n        <?php if ($arResult[\"STORE_PASSWORD\"] == \"Y\"): /* checkbox «Запомнить меня» */ ?>\r\n            <div class=\"remember\">\r\n                <input type=\"checkbox\" id=\"USER_REMEMBER_frm\" name=\"USER_REMEMBER\" value=\"Y\" />\r\n                <label for=\"USER_REMEMBER_frm\"><?= GetMessage(\'SYS_AUTH_FORM_REMEMBER\'); ?></label>\r\n            </div>\r\n        <?php endif; ?>\r\n\r\n        <div class=\"submit\">\r\n            <input type=\"submit\" name=\"Login\"\r\n                   value=\"<?= GetMessage(\'SYS_AUTH_FORM_SUBMIT_LOGIN\'); /* кнопка отправки формы */ ?>\" />\r\n        </div>\r\n\r\n    </form>\r\n\r\n    <?php if ($arResult[\"NEW_USER_REGISTRATION\"] == \"Y\"): /* ссылка на страницу регистрации */ ?>\r\n        <p>\r\n            <a href=\"<?= $arResult[\"AUTH_REGISTER_URL\"]; ?>\" rel=\"nofollow\">\r\n                <?= GetMessage(\'SYS_AUTH_FORM_REG_USER\'); ?>\r\n            </a>\r\n        </p>\r\n    <?php endif?>\r\n\r\n    <p>\r\n        <a href=\"<?= $arResult[\"AUTH_FORGOT_PASSWORD_URL\"]; ?>\" rel=\"nofollow\">\r\n            <?= GetMessage(\'SYS_AUTH_FORM_FORGOT\'); /* ссылка на страницу восстановления пароля */ ?>\r\n        </a>\r\n    </p>\r\n\r\n<?php else: /* пользователь авторизован, показываем имя и логин пользователя, ссылку на профиль и кнопку выхода */ ?>\r\n\r\n    <p><?= $arResult[\"USER_NAME\"]; /* имя пользователя */ ?></p>\r\n    <p><?= $arResult[\"USER_LOGIN\"]; /* логин пользователя */ ?></p>\r\n    <p>\r\n        <a href=\"<?= $arResult[\"PROFILE_URL\"]; ?>\">\r\n            <?= GetMessage(\'SYS_AUTH_FORM_PROFILE\'); /* ссылка на профиль */ ?>\r\n        </a>\r\n    </p>\r\n\r\n    <form action=\"<?= $arResult[\"AUTH_URL\"]; ?>\">\r\n\r\n        <?php foreach ($arResult[\"GET\"] as $key => $value): /* передача полученных GET-параметров */ ?>\r\n            <input type=\"hidden\" name=\"<?= $key; ?>\" value=\"<?= $value; ?>\" />\r\n        <?php endforeach; ?>\r\n\r\n        <input type=\"hidden\" name=\"logout\" value=\"yes\" />\r\n\r\n        <div class=\"submit\">\r\n            <input type=\"submit\" name=\"logout_butt\"\r\n                   value=\"<?= GetMessage(\'SYS_AUTH_FORM_SUBMIT_LOGOUT\'); /* кнопка отправки формы */ ?>\" />\r\n        </div>\r\n\r\n    </form>\r\n\r\n<?php endif; ?>\r\n\r\n</div>\r\n[/phtml]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.form/.default/lang/ru/template.php\r\n */\r\n$MESS[\'SYS_AUTH_FORM_TITLE\']          = \'Личный кабинет\';\r\n// авторизация теперь по e-mail\r\n$MESS[\'SYS_AUTH_FORM_LOGIN\']          = \'E-mail\';\r\n$MESS[\'SYS_AUTH_FORM_PASSWORD\']       = \'Пароль\';\r\n$MESS[\'SYS_AUTH_FORM_REMEMBER\']       = \'Запомнить меня\';\r\n$MESS[\'SYS_AUTH_FORM_CAPTCHA_TITLE\']  = \'Защита от роботов\';\r\n$MESS[\'SYS_AUTH_FORM_CAPTCHA_TEXT\']   = \'Введите символы с картинки\';\r\n$MESS[\'SYS_AUTH_FORM_SUBMIT_LOGIN\']   = \'Войти\';\r\n$MESS[\'SYS_AUTH_FORM_SUBMIT_LOGOUT\']  = \'Выйти\';\r\n$MESS[\'SYS_AUTH_FORM_REG_USER\']       = \'Зарегистрироваться\';\r\n$MESS[\'SYS_AUTH_FORM_FORGOT\']         = \'Забыли пароль?\';\r\n$MESS[\'SYS_AUTH_FORM_PROFILE\']        = \'Мой профиль\';\r\n[/php]\r\n\r\n[css]\r\n/*\r\n * Файл local/templates/.default/components/bitrix/system.auth.form/.default/style.css\r\n */\r\n.system-auth-form {\r\n    margin-top: 15px;\r\n\r\n}\r\n    .system-auth-form > p {\r\n        margin: 5px 0;\r\n    }\r\n    .system-auth-form > h3 {\r\n        margin-bottom: 10px;\r\n    }\r\n        .system-auth-form > p > a {\r\n            text-decoration: underline;\r\n        }\r\n        .system-auth-form > form > div {\r\n            margin-bottom: 5px;\r\n        }\r\n            .system-auth-form > form > div > span {\r\n                display: block;\r\n            }\r\n            .system-auth-form > form > div > span:first-child {\r\n                margin-bottom: 2px;\r\n            }\r\n                .system-auth-form > form > div > span > input[type=\"text\"],\r\n                .system-auth-form > form > div > span > input[type=\"password\"] {\r\n                    width: 100%;\r\n                    padding: 3px;\r\n                    border: 1px solid #ccc;\r\n                }\r\n        .system-auth-form > form > div.captcha {\r\n            border: 1px solid #ccc;\r\n            padding: 15px 10px 10px 10px;\r\n            position: relative;\r\n            margin-top: 15px;\r\n        }\r\n            .system-auth-form > form > div.captcha > h4 {\r\n                position: absolute;\r\n                top: -10px;\r\n                font-weight: normal;\r\n                font-size: 16px;\r\n                background: #eee;\r\n                padding: 0 10px;\r\n                color: #999;\r\n            }\r\n            .system-auth-form > form > div.captcha > span:first-of-type {\r\n                margin-top: 10px;\r\n            }\r\n        .system-auth-form > form > div.remember label {\r\n            font-weight: normal;\r\n            cursor: pointer;\r\n            border-bottom: 1px dashed #333;\r\n            position: relative;\r\n            top: -3px;\r\n            margin-left: 5px;\r\n        }\r\n            .system-auth-form > form > div.submit > input[type=\"submit\"] {\r\n                width: 50%;\r\n                padding: 5px;\r\n                background: #333;\r\n                color: #fff;\r\n                border: none;\r\n                margin-top: 10px;\r\n            }\r\n    .system-auth-form i {\r\n        font-style: normal;\r\n        font-weight: bold;\r\n        color: #f00;\r\n    }\r\n[/css]\r\n<p>\r\n<a href=\"/files/blog/169/4.jpg\" class=\"zoom\"><img src=\"/files/blog/169/4.jpg\" alt=\"\" /></a>\r\n</p>','2018-07-22 15:33:18',1),(170,17,'Битрикс. Комментарии к элементам инфоблока','','«Новости»','CMS, Битрикс, Инфоблок, Комментарии, Компонент, Форум, ЭлементИнфоблока','Пусть у нас есть некий инфоблок (блог, новости, статьи, товары, галерея). В публичной части сайта для показа списка элементов инфоблока и самих элементов используется комплексный компонент bitrix:news. И мы хотим добавить возможность оставлять комментарии к элементам инфоблока.','<p>\r\nПусть у нас есть некий инфоблок (блог, новости, статьи, товары, галерея). В публичной части сайта для показа списка элементов инфоблока и самих элементов используется комплексный компонент <code>bitrix:news</code>. И мы хотим добавить возможность оставлять комментарии к элементам инфоблока.\r\n</p>\r\n<p>\r\nПо идее, для этого достаточно отметить checkbox «Разрешить отзывы» в настройках компонента <code>bitrix:news</code>:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/170/1.jpg\" class=\"zoom\"><img src=\"/files/blog/170/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nНо после этого получаем ошибку «Не указан форум для отзывов». При чем здесь форум, если речь идет о комментариях/отзывах — совершенно непонятно. Хорошо, тогда открываем файл, который отвечает за показ детальной страницы и видим, что за комментарии отвечает компонент <code>bitrix:forum.topic.reviews</code>:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/voguis_blog/components/bitrix/news/blog/detail.php\r\n */\r\n?>\r\n<!-- код пропущен -->\r\n<?php if ($arParams[\"USE_REVIEW\"]==\"Y\" && IsModuleInstalled(\"forum\") && $ElementID): ?>\r\n    <hr />\r\n    <?php\r\n    $APPLICATION->IncludeComponent(\r\n        \"bitrix:forum.topic.reviews\",\r\n        \"\",\r\n        Array(\r\n            \"CACHE_TYPE\" => $arParams[\"CACHE_TYPE\"],\r\n            \"CACHE_TIME\" => $arParams[\"CACHE_TIME\"],\r\n            \"MESSAGES_PER_PAGE\" => $arParams[\"MESSAGES_PER_PAGE\"],\r\n            \"USE_CAPTCHA\" => $arParams[\"USE_CAPTCHA\"],\r\n            \"PATH_TO_SMILE\" => $arParams[\"PATH_TO_SMILE\"],\r\n            \"FORUM_ID\" => $arParams[\"FORUM_ID\"],\r\n            \"URL_TEMPLATES_READ\" => $arParams[\"URL_TEMPLATES_READ\"],\r\n            \"SHOW_LINK_TO_FORUM\" => $arParams[\"SHOW_LINK_TO_FORUM\"],\r\n            \"DATE_TIME_FORMAT\" => $arParams[\"DETAIL_ACTIVE_DATE_FORMAT\"],\r\n            \"ELEMENT_ID\" => $ElementID,\r\n            \"AJAX_POST\" => $arParams[\"REVIEW_AJAX_POST\"],\r\n            \"IBLOCK_ID\" => $arParams[\"IBLOCK_ID\"],\r\n            \"URL_TEMPLATES_DETAIL\" => $arResult[\"FOLDER\"].$arResult[\"URL_TEMPLATES\"][\"detail\"],\r\n        ),\r\n        $component\r\n    );\r\n    ?>\r\n<?php endif; ?>\r\n[/phtml]\r\n<p>\r\nУже что-то проясняется. Открываем исходный код компонента <code>bitrix:forum.topic.reviews</code>:\r\n</p>\r\n[php]\r\n/*\r\n * Файл bitrix/components/bitrix/forum.topic.reviews/component.php\r\n */\r\nif (!CModule::IncludeModule(\"forum\")):\r\n    ShowError(GetMessage(\"F_NO_MODULE\"));\r\n    return 0;\r\nelseif (!CModule::IncludeModule(\"iblock\")):\r\n    ShowError(GetMessage(\"F_NO_MODULE_IBLOCK\"));\r\n    return 0;\r\nelseif ($arParams[\"FORUM_ID\"] <= 0):\r\n    // вот это сообщение об ошибке: не указан ID форума\r\n    ShowError(GetMessage(\"F_ERR_FID_EMPTY\"));\r\n    return 0;\r\nelseif ($arParams[\"ELEMENT_ID\"] <= 0):\r\n    ShowError(GetMessage(\"F_ERR_EID_EMPTY\"));\r\n    return 0;\r\nendif;\r\n[/php]\r\n<p>\r\nЧтобы оставлять сообщения на форуме, этот форум надо сперва создать. Так что идем в панель управления и создаем форум «Комментарии к постам блога»:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/170/2.jpg\" class=\"zoom\"><img src=\"/files/blog/170/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВ настройках доступа надо разрешить всем пользователям создавать новую тему:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/170/3.jpg\" class=\"zoom\"><img src=\"/files/blog/170/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<div class=\"note\">\r\nЧтобы комментарии проходили премодерацию перед публикацией, в настройках форума надо выбрать «Премодерируемый».\r\n</div>\r\n<p>\r\nПотом выбираем этот форум в настройках компонента <code>bitrix:news</code>:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/170/4.jpg\" class=\"zoom\"><img src=\"/files/blog/170/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПосле чего комментарии заработают:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/170/5.jpg\" class=\"zoom\"><img src=\"/files/blog/170/5.jpg\" alt=\"\" /></a>\r\n</p>\r\n<div class=\"note\">\r\nЕсли форум премодерируемый, надо создать отдельную страницу в публичной части сайта и предоставить к ней доступ тем, кто будет выполнять модерацию. На странице надо разместить комплексный компонент «Форум» <code>bitrix:forum</code>. В настройках компонента, в параметре «Показывать только выбранные форумы», выбрать «Комментарии к постам блога».\r\n</div>','2018-07-24 13:21:31',1),(171,11,'Основные команды Git','','','CLI, Git, GitHub, Web-разработка, Команда','Git — это популярная система контроля версий и совместной разработки проектов с открытым исходным кодом. С помощью Git можно отслеживать изменения в исходном коде своих проектов, возвращать предыдущие версии в случае критических ошибок, а также делиться своим кодом со всеми желающими и принимать от них исправления.','<p>\r\nGit — это популярная система контроля версий и совместной разработки проектов с открытым исходным кодом. С помощью Git можно отслеживать изменения в исходном коде своих проектов, возвращать предыдущие версии в случае критических ошибок, а также делиться своим кодом со всеми желающими и принимать от них исправления.\r\n</p>\r\n<p>\r\nИзменения сохраняются в виде коммитов, по-русски — фиксация. Сначала надо сделать начальный коммит, чтобы сохранить исходное состояние проекта, а затем для каждого изменения. Кроме того, git позволяет отправлять данные на удаленный сервер. Отправляются не только готовая версия, но и все снимки, таким образом, любой человек из команды может посмотреть историю изменений.\r\n</p>\r\n\r\n<h2>Создание проекта</h2>\r\n<p>\r\nПерейдем в директорию проекта и создадим в ней файл <code>index.php</code>, директорию <code>app</code> и файл <code>app/readme.txt</code>:\r\n</p>\r\n[cli]\r\n$ cd c:/work/localhost15/www\r\n$ touch index.php\r\n$ mkdir app\r\n$ touch app/readme.txt\r\n[/cli]\r\n<p>\r\nИнициализируем пустой репозиторий в директории проекта:\r\n</p>\r\n[cli]\r\n$ git init\r\nInitialized empty Git repository in C:/work/localhost15/www/.git/\r\n[/cli]\r\n<p>\r\nДобавляем файлы в репозиторий, чтобы git отслеживал изменения:\r\n</p>\r\n[cli]\r\n$ git add index.php  # добавить один файл\r\n[/cli]\r\n[cli]\r\n$ git add --all  # добавить все файлы\r\n[/cli]\r\n[cli]\r\n$ git add .  # добавить текущую директорию\r\n[/cli]\r\n[cli]\r\n$ git add app/*  # добавить все файлы из директории app\r\n[/cli]\r\n\r\n<h2>Фиксация изменений</h2>\r\n<p>\r\nИзменения файлов не отслеживаются автоматически. Фиксация изменений выполняется с помощью команды <code>commit</code>. Хорошая практика выполнять фиксацию перед каждым серьезным изменением.\r\n</p>\r\n<p>\r\nЧтобы создать первый коммит:\r\n</p>\r\n[cli]\r\n$ git commit -m \"Initial сommit\"\r\n[master (root-commit) 9dfb500] Initial commit\r\n 2 files changed, 0 insertions(+), 0 deletions(-)\r\n create mode 100644 app/readme.txt\r\n create mode 100644 index.php\r\n[/cli]\r\n<div class=\"note\">\r\n<p>\r\nКоманда <code>status</code> позволяет отслеживать, какие файлы в каком состоянии находятся:\r\n</p>\r\n[cli]\r\n$ git status\r\nOn branch master\r\nnothing to commit, working tree clean\r\n[/cli]\r\n</div>\r\n<p>\r\nВнесем изменение в файл <code>app/readme.txt</code>:\r\n</p>\r\n[cli]\r\n$ echo \'Lorem ipsum\' > app/readme.txt\r\n[/cli]\r\n<p>\r\nПосмотрим состояние репозитория:\r\n</p>\r\n[cli]\r\n$ git status\r\nOn branch master\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n        [red]modified:   app/readme.txt[/red]\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\r\n[/cli]\r\n<p>\r\nФайл <code>app/readme.txt</code> изменён, так что надо снова использовать команду <code>add</code>. Это неудобно, если измененных файлов много, поэтому делают так:\r\n</p>\r\n[cli]\r\n$ git commit -a -m \"Second commit\"\r\n[master c7a298b] Second commit\r\n 1 file changed, 1 insertion(+)\r\n[/cli]\r\n<p>\r\nДобавление параметра <code>-a</code> в команду <code>commit</code> заставляет git зафиксировать изменения в каждом отслеживаемом файле, позволяя обойтись без команды <code>add</code>.\r\n</p>\r\n\r\n<h2>Удаление файлов</h2>\r\n<p>\r\nУдалим файл <code>app/readme.txt</code> и посмотрим состояние репозитория:\r\n</p>\r\n[cli]\r\n$ git status\r\nOn branch master\r\nChanges not staged for commit:\r\n  (use \"git add/rm <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n        [red]deleted:    app/readme.txt[/red]\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\r\n[/cli]\r\n<p>\r\nФайл удален в рабочем каталоге, но продолжает отслеживаться git. Необходимо удалить его из отслеживаемых файлов, а затем выполнить фиксацию состояния:\r\n</p>\r\n[cli]\r\n$ git rm app/readme.txt  # удаляем файл из отслеживаемых\r\nrm \'app/readme.txt\'\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n        [grn]deleted:    app/readme.txt[/grn]\r\n$ git commit -m \"Delete app/readme.txt\"  # фиксируем новое состояние\r\n[master 40b0ab6] Delete app/readme.txt\r\n 1 file changed, 1 deletion(-)\r\n delete mode 100644 app/readme.txt\r\n$ git status  # все, файл удален из git\r\nOn branch master\r\nnothing to commit, working tree clean\r\n[/cli]\r\n<div class=\"note\">\r\nКоманда <code>rm</code> не только удаляет файл из отслеживаемых git, но и удаляет файл из рабочего каталога.\r\n</div>\r\n<p>\r\nЧтобы удалить файл из-под наблюдения git, оставив его при этом в рабочем каталоге:\r\n</p>\r\n[cli]\r\n$ git rm --staged app/readme.txt\r\n[/cli]\r\n\r\n<h2>Клонирование репозитория</h2>\r\n<p>\r\nДля получения локальной копии удаленного репозитория используется команда <code>clone</code>.\r\n</p>\r\n[cli]\r\n$ git clone https://github.com/pupkin/somelib\r\n[/cli]\r\n<p>\r\nЭта команда создаёт директорию <code>somelib</code>, инициализирует в ней поддиректорию <code>.git</code> и скачивает все данные для этого репозитория.\r\n</p>\r\n<p>\r\nДля того, чтобы клонировать репозиторий в директорию с другим именем:\r\n</p>\r\n[cli]\r\n$ git clone https://github.com/pupkin/somelib [grn]mylib[/grn]\r\n[/cli]\r\n<div class=\"note\">\r\n<p>\r\nПри клонировании имя локального репозитория будет <code>master</code>, а имя удаленного репозитория — <code>origin</code>.\r\n</p>\r\n[cli]\r\n$ git pull  # получить изменения из удаленного репозитория\r\n[/cli]\r\n[cli]\r\n$ git push origin master  # отправть изменения в удаленный репозиторий\r\n[/cli]\r\n</div>\r\n\r\n<h2>Удаленный репозиторой</h2>\r\n<p>\r\nЧтобы обменяться информацией с другими разработчиками и отправить данные в удаленный репозиторий, надо добавить себе этот репозиторий:\r\n</p>\r\n[cli]\r\n$ git remote add [grn]remote-name[/grn] https://github.com/pupkin/test.git\r\n[/cli]\r\n<p>\r\nТеперь у нас есть ссылка на удаленный репозиторий под именем <code>remote-name</code>. Посмотреть все удаленные репозитории можно с помощью команды <code>remote</code>:\r\n</p>\r\n[cli]\r\n$ git remote\r\nremote-name\r\n[/cli]\r\n<p>\r\nМожно также указать ключ <code>-v</code>, чтобы просмотреть адреса для чтения и записи, привязанные к репозиторию:\r\n</p>\r\n[cli]\r\n$ git remote -v\r\nremote-name   https://github.com/pupkin/test.git (fetch)\r\nremote-name   https://github.com/pupkin/test.git (push)\r\n[/cli]\r\n<p>\r\nДля получения данных из удалённого репозитория:\r\n</p>\r\n[cli]\r\n$ git fetch remote-name\r\n[/cli]\r\n<div class=\"note\">\r\nКоманда <code>fetch</code> забирает данные из удаленного репозитория, но не сливает их с локальным. Это необходимо делать вручную.\r\n</div>\r\n<p>\r\n<p>\r\nДля отправки данных в удалённый репозиторий:\r\n</p>\r\n[cli]\r\n$ git push [grn]remote-name[/grn] [red]local-name[/red]\r\n[/cli]\r\n<div class=\"note\">\r\nЭта команда срабатывает только в том случае, если вы клонировали с удаленного сервера, и если никто другой с тех пор не выполнял команду <code>push</code>. Если вы и кто-то ещё одновременно клонируете, затем он выполняет команду <code>push</code>, а затем команду <code>push</code> выполняете вы, то ваш <code>push</code> будет отклонён. Вам придётся сначала вытянуть (<code>pull</code>) их изменения и объединить с вашими. Только после этого вам будет позволено выполнить <code>push</code>.\r\n</div>\r\n<p>\r\nЧтобы переименовать ссылку на удаленный репозиторий:\r\n</p>\r\n[cli]\r\n$ git remote rename [grn]old-remote-name[/grn] [red]new-remote-name[/red]\r\n[/cli]\r\n<p>\r\nЧтобы удалить ссылку на удаленный репозиторий:\r\n</p>\r\n[cli]\r\n$ git remote rm [grn]remote-name[/grn]\r\n[/cli]\r\n\r\n<h2>Управление ветвями</h2>','2018-07-12 10:33:31',1),(172,17,'Битрикс. Шаблон компонента','','','.description.php, .parameters.php, CMS, IncludeComponent, Web-разработка, Битрикс, Компонент, ШаблонКомпонента','Шаблоны компонента могут быть папками или файлами. Если шаблону не требуется перевод на другие языки, собственные стили и прочие ресурсы, такой шаблон можно расположить в файле. В противном случае шаблон следует располагать в директории. Шаблоны компонента делятся на системные и пользовательские.','<p>\r\nШаблоны компонента делятся на системные и пользовательские:\r\n</p>\r\n<ul>\r\n  <li>Системные шаблоны поставляются вместе с компонентом и лежат в подпапке <code>templates</code> папки компонента.</li>\r\n  <li>Пользовательские шаблоны компонента — шаблоны, которые изменены под нужды конкретного сайта. Они должны лежать в папках шаблонов сайтов (т.е. в <code>/local/templates/шаблон-сайта/</code>).</li>\r\n</ul>\r\n<p>\r\nПри копировании шаблона компонента средствами системы, они будут расположены по следующему пути:\r\n</p>\r\n[code]\r\n/local/templates/имя-шаблона-сайта/components/namespace/имя-компонента/имя-шаблона-компонента\r\n[/code]\r\n<p>\r\nШаблоны компонента определяются по именам. Шаблон по умолчанию имеет имя <code>.default</code>. Если в настройках параметра компонента не указывается имя шаблона, вызывается шаблон по умолчанию.\r\n</p>\r\n<p>\r\nШаблоны компонента могут быть папками или файлами. Если шаблону не требуется перевод на другие языки, собственные стили и прочие ресурсы, такой шаблон можно расположить в файле. В противном случае шаблон следует располагать в директории.\r\n</p>\r\n\r\n<h2>Шаблон простого компонента</h2>\r\n<p>\r\nДиректория шаблона простого компонента может содержать следующие директории и файлы:\r\n</p>\r\n<ul>\r\n  <li>Файл <code>template.php</code>, который и является собственно шаблоном; этот файл должен обязательно присутствовать.</li>\r\n  <li>Файл <code>result_modifier.php</code>, который подключается непосредственно перед подключением шаблона компонента. Этот файл получает на вход массив результатов работы компонента <code>$arResult</code> и массив параметров вызова компонента <code>$arParams</code>. Таким образом, можно, например, изменить массив результатов работы компонента под конкретный шаблон.</li>\r\n  <li>Файл <code>component_epilog.php</code>, который подключается после исполнения шаблона.</li>\r\n  <li>Файл <code>style.css</code>, который определяет стили, необходимые данному шаблону.</li>\r\n  <li>Файл <code>script.js</code>, который определяет и подключает javascript, необходимые данному шаблону.</li>\r\n  <li>Файл <code>.description.php</code>, который содержит название и описание шаблона для визуального редактора.</li>\r\n  <li>Файл <code>.parameters.php</code>, который содержит описание дополнительных входных параметров шаблона для визуального редактора.</li>\r\n  <li>Директорию <code>lang</code>, в которой расположены файлы языковых сообщений (переводов) шаблона компонента.</li>\r\n  <li>Любые другие директории и файлы с ресурсами, необходимыми шаблону компонента. Например, директорию <code>image</code>, содержащая изображения, необходимые шаблону.</li>\r\n</ul>\r\n<p>\r\nПример файла <code>.description.php</code>:\r\n</p>\r\n[php]\r\n<?php\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$arTemplateDescription = array(\r\n    \"NAME\" => GetMessage(\"ADV_BANNER_NAME\"),\r\n    \"DESCRIPTION\" => GetMessage(\"ADV_BANNER_DESC\"),\r\n);\r\n[/php]\r\n<p>\r\nПример файла <code>.parameters.php</code>:\r\n</p>\r\n[php]\r\n<?\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\nif (!CModule::IncludeModule(\"advertising\")) {\r\n    return;\r\n}\r\n\r\n$arTypeFields = Array(\"-\" => GetMessage(\"ADV_SELECT_DEFAULT\"));\r\n$res = CAdvType::GetList($by, $order, Array(\"ACTIVE\" => \"Y\"), $is_filtered, \"Y\");\r\nwhile (is_object($res) && $ar = $res->GetNext()) {\r\n    $arTypeFields[$ar[\"SID\"]] = \"[\".$ar[\"SID\"].\"] \".$ar[\"NAME\"];\r\n}\r\n[/php]\r\n\r\n<h2>Шаблон комплексного компонента</h2>\r\n<p>\r\nШаблон комплексного компонента содержит все те же папки, что и шаблон простого компонента, и дополнительно:\r\n</p>\r\n<ul>\r\n  <li>Шаблоны простых компонентов, которые входят в состав комплексного. Эти шаблоны располагаются в папках вида <code>/namespace/component/</code> относительно папки шаблона комплексного компонента.</li>\r\n  <li>Простые компоненты, входящие в состав комплексного, подключаются на шаблонах страниц комплексного компонента.</li>\r\n</ul>\r\n\r\n\r\n\r\n<h2>Как система ищет шаблон</h2>\r\n<ul>\r\n  <li>Система сначала ищет шаблон компонента в папке <code>/local/templates/текущий-шаблон-сайта/components/</code>;</li>\r\n  <li>Если там шаблон не найден, то берётся папка <code>/local/templates/.default/components/</code>;</li>\r\n  <li>Если шаблон не найден, то производится поиск среди системных (т.е. поставляемых с компонентом) шаблонов.</li>\r\n</ul>\r\n<p>Особенности поиска:</p>\r\n<ul>\r\n  <li>Если имя шаблона не задано, то ищется шаблон с именем <code>.default</code>.</li>\r\n  <li>Если шаблон задан именем папки, то в случае простого компонента в этой папке ищется файл <code>template.php</code>, а в случае комплексного — <code>page-name.php</code>.</li>\r\n</ul>\r\n<p>\r\nЕсли простой компонент вызывается в составе комплексного, то шаблон простого компонента сначала ищется в составе шаблона комплексного компонента, а потом (если не найден) в собственных шаблонах. Чтобы это правило работало, при вызове простых компонентов в составе комплексного не забывайте указывать четвертым параметром переменную <code>$component</code>, указывающую на родительский компонент:\r\n</p>\r\n[php]\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:catalog.filter\",\r\n    \"\",\r\n    Array(\r\n        // ..........\r\n    ),\r\n    $component\r\n);\r\n[/php]\r\n\r\n<h2>Подключение шаблона</h2>\r\n<p>\r\n1. Ядро сначала проверяет наличие шаблона компонента в шаблоне текущего сайта:\r\n</p>\r\n[code]\r\n/local/templates/имя-шаблона-сайта/components/namespace/имя-компонента/имя-шаблона-компонента/template.php\r\n[/code]\r\n<p>\r\n<p>\r\n2. Если файла шаблона нет, проверяется шаблон сайта по умолчанию:\r\n</p>\r\n[code]\r\n/local/templates/.default/components/namespace/имя-компонента/имя-шаблона-компонента/template.php\r\n[/code]\r\n<p>\r\n3. И только после этого происходит подключение шаблона компонента из папки компонента.\r\n</p>\r\n<div class=\"note\">\r\nЕсли <code>namespace</code> — <code>bitrix</code> (<code>/bitrix/components/bitrix</code>), то это папка для шаблонов стандартных компонентов. Если <code>namespace</code> — выбранное вами <code>name</code> (<code>/bitrix/components/name</code>), то это папка для шаблонов ваших компонентов.\r\n</div>\r\n<p>\r\nШаблон в файле компонента <code>component.php</code> подключается командой:\r\n</p>\r\n[php]\r\n$this->IncludeComponentTemplate($templatePage = \"\");\r\n[/php]\r\n<p>\r\nгде <code>$templatePage</code>:\r\n</p>\r\n<ul>\r\n  <li>для комплексного компонента — имя текущей страницы;</li>\r\n  <li>для обычного компонента — пустая строка.</li>\r\n</ul>\r\n\r\n<h2>Вызов компонента</h2>\r\n<p>\r\nПри вызове компонента указываются\r\n</p>\r\n<ol>\r\n  <li>Пространство имен + имя компонента: <code>namespace:component</code>;\r\n  <li>Имя шаблона, если пустая строка — подразумевается <code>.default</code>;\r\n  <li>Параметры самого компонента</li>\r\n  <li>Объект родительского комплексного компонента, если компонент подключается из шаблона комплексного компонента. В шаблоне комплексного компонента определена переменная <code>$component</code>, которая содержит объект этого комплексного компонента.</li>\r\n  <li>Массив, содержащий дополнительные параметры отображения компонента:\r\n    <ul> \r\n      <li><code>\"HIDE_ICONS\"=>\"Y\"</code> — не показывать панель настройки компонента в режиме редактирования/разработки;</li>\r\n      <li><code>\"ACTIVE_COMPONENT\"=>\"N\"</code> — отключить компонент (код компонента не подключается).</li>\r\n    <ul>\r\n  </li>\r\n</ol>\r\n[php]\r\nmixed IncludeComponent(\r\n    string componentName,\r\n    string componentTemplate,\r\n    array arParams=array(),\r\n    object parentComponent=null,\r\n    array arFunctionParams=array()\r\n);\r\n[/php]','2018-07-27 12:46:10',1),(173,17,'Битрикс. Файл .access.php','','','.access.php, CMS, Web-разработка, Битрикс, Директория, ПраваДоступа, РазделСайта, СтраницаСайта, Файл','В Битрикс есть два уровня разграничения прав доступа: 1. доступ на файлы и каталоги; 2. права в рамках логики модуля. Доступ на файлы и каталоги проверяется в прологе, задается с помощью специального файла .access.php, содержащего массив следующего формата…','<p>\r\nВ Битрикс есть два уровня разграничения прав доступа:\r\n</p>\r\n<ul>\r\n  <li>Доступ на файлы и каталоги.</li>\r\n  <li>Права в рамках логики модуля.</li>\r\n</ul>\r\n\r\n<h2>Доступ на файлы и каталоги</h2>\r\n<p>\r\nЭтот уровень прав проверяется в прологе, задается с помощью специального файла <code>.access.php</code>, содержащего массив следующего формата:\r\n</p>\r\n[php]\r\n$PERM[\"файл/каталог\"][\"группа-пользователей\"] = \"право-доступа\";\r\n[/php]\r\n<ul>\r\n  <li><code>файл/каталог</code> — имя файла или каталога, для которых назначаются права доступа;</li>\r\n  <li><code>группа-пользователей</code> — идентификатор группы пользователей, на которую распространяется данное право (допустимо использование символа <code>*</code>, что означает — для всех групп);</li>\r\n  <li><code>право-доступа</code> — поддерживаются следующие значения (в порядке возрастания):\r\n  <ul>\r\n    <li><code>D</code> — запрещён (при обращении к файлу доступ будет всегда запрещён);</li>\r\n    <li><code>R</code> — чтение (при обращении к файлу доступ будет разрешен);</li>\r\n    <li><code>U</code> — документооборот (файл может быть отредактирован в режиме документооборота);</li>\r\n    <li><code>W</code> — запись (файл может быть отредактирован непосредственно);</li>\r\n    <li><code>X</code> — полный доступ (подразумевает право на запись и модификацию прав доступа).</li>\r\n  </ul>\r\n  </li>\r\n</ul>\r\n<p>\r\nЕсли пользователь принадлежит нескольким группам, то берется максимальное право из всех прав доступа заданных для этих групп. Если для текущего файла или каталога явно не задан уровень прав, то берется уровень прав заданный для вышележащих каталогов.\r\n</p>\r\n\r\n<h3>Пример</h3>\r\n[php]\r\n<?php\r\n/*\r\n * Файл /dir/.access.php\r\n */\r\n$PERM[\"index.php\"][\"2\"] = \"R\";\r\n$PERM[\"index.php\"][\"3\"] = \"D\";\r\n[/php]\r\n<p>\r\nПри попытке открытия страницы <code>/dir/index.php</code> пользователь, принадлежащий группе <code>ID=3</code>, будет иметь право доступа <code>D</code> (запрещено), пользователь из группы <code>ID=2</code> будет иметь право <code>R</code> (чтение). Пользователь, принадлежащий обеим группам, будет иметь максимальный уровень доступа — <code>R</code> (чтение).\r\n</p>\r\n\r\n<h3>Пример</h3>\r\n[php]\r\n<?php\r\n/*\r\n * Файл /.access.php\r\n */\r\n$PERM[\"admin\"][\"*\"] = \"D\";\r\n$PERM[\"admin\"][\"1\"] = \"R\";\r\n$PERM[\"/\"][\"*\"] = \"R\";\r\n$PERM[\"/\"][\"1\"] = \"W\";\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл Файл /admin/.access.php\r\n */\r\n$PERM[\"index.php\"][\"3\"] = \"R\";\r\n[/php]\r\n<p>\r\nПри доступе к странице <code>/admin/index.php</code> пользователь, принадлежащий группе <code>ID=3</code>, будет иметь доступ, а пользователю, принадлежащему группе <code>ID=2</code>, будет в доступе отказано. При доступе к странице <code>/index.php</code> все посетители будут иметь доступ.\r\n</p>\r\n\r\n<h2>Права в рамках логики модуля</h2>\r\n<p>\r\nЕсли речь идет об обычных статичных публичных страницах, то к ним применяется только первый уровень доступа на файлы и каталоги.\r\n</p>\r\n<p>\r\nЕсли пользователь имеет на файл как минимум право <code>R</code> (чтение) и если данный файл является функциональной частью того или иного модуля, то проверяется 2-ой уровень прав, задаваемый в настройках соответствующего модуля.\r\n</p>\r\n<p>\r\nНапример, при заходе на страницу «Список обращений» в техподдержке: администратор видит все обращения, сотрудник техподдержки — только те, за которые он ответственнен, а обычный пользователь — только свои обращения. Так работает право доступа в рамках логики модуля «Техподдержка».\r\n</p>','2018-07-28 14:58:14',1),(174,17,'Битрикс. Права доступа','','','CMS, Web-разработка, Битрикс, Пользователь, ПраваДоступа','В системе Битрикс доступно разграничение пользователей на группы с различными правами доступа к различным элементам сайта и настройкам системы. Такой инструмент крайне полезен для гибкой настройки доступа, особенно на больших сайтах и интернет-магазинах, которые обслуживает множество людей.','<p>\r\nВ системе Битрикс доступно разграничение пользователей на группы с различными правами доступа к различным элементам сайта и настройкам системы. Такой инструмент крайне полезен для гибкой настройки доступа, особенно на больших сайтах и интернет-магазинах, которые обслуживает множество людей.\r\n</p>\r\n<p>\r\nВам не придется волноваться, что посетитель сайта или контент-редактор на аутсорсе нарушит работоспособность сайта из-за некорректных действий, уничтожив по пути весь сайт. С настроенными правами пользователю будут доступны только публичная часть сайта для просмотра, а контент-менеджеру или оператору по работе с заказами — только те элементы, которые ему можно редактировать.\r\n</p>\r\n\r\n<h2>Уровни доступа</h2>\r\n<p>\r\nРазличные наборы прав называются уровнями доступа. Вы можете установить столько уровней, сколько пожелаете и добавить на каждый уровень столько групп пользователей, сколько потребуется. Чтобы просмотреть список имеющихся уровней доступа, изменить их или добавить новый, в административной части сайта перейдите в «<em>Настройки • Пользователи • Уровни доступа</em>».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/174/1.jpg\" class=\"zoom\"><img src=\"/files/blog/174/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nУ уровня доступа есть несколько основных параметров — это вид объекта, для которого создается уровень (файл/папка или модуль), сам конкретный объект (например, главный модуль) и операции, которые может совершать с объектом пользователь.\r\n</p>\r\n<p>\r\nВ режиме редактирования/добавления уровня доступа на вкладке «Параметры» располагаются первые основные параметры:\r\n</p>\r\n<ul>\r\n  <li>Название — наименование уровня</li>\r\n  <li>Модуль — выбор конкретного модуля, на который распространяются правила доступа</li>\r\n  <li>Привязка — вид объекта для уровня доступа. Это может быть файл/папка или модуль</li>\r\n  <li>Буква — это короткое наименование уровня доступа для системы</li>\r\n  <li>Описание — это развернутая информация для администратора</li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/174/2.jpg\" class=\"zoom\"><img src=\"/files/blog/174/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nНа вкладке «Включаемые операции» располагаются операции, которые можно активировать или деактивировать, настраивая права для данного уровня доступа.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/174/3.jpg\" class=\"zoom\"><img src=\"/files/blog/174/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nУровни доступа — это базовые кирпичики в настройке прав доступа. Назначая группе некие права, вы присваиваете им те или иные уровни доступа, открывая указанные в них возможности.\r\n</p>\r\n\r\n<h2>Группы пользователей</h2>\r\n<p>\r\nСледующий этап разграничения прав — создание групп для пользователей и назначение этим группам необходимых уровней доступа. Вы можете настраивать права только для групп пользователей и добавлять отдельных пользователей в группы. Однако количество групп с разными правами не ограничено, и фактически вы можете назначить каждому пользователю уникальные права. Но объединять пользователей в группы все-таки удобнее.\r\n</p>\r\n<div class=\"note\">\r\n<p>\r\nНапример, вам необходимо определить права для трех менеджеров интернет-магазина и двоих контент-менеджеров. Вы создаете две группы, которым присваиваете подходящие уровни доступа. Например, менеджеры могут просматривать заказы, менять параметры товаров и делать импорт-экспорт данных из интернет-магазина, а контентщики могут только менять параметры товаров.\r\n</p>\r\n<p>\r\nСоздав такие группы, вы сможете наполнить их любым количеством пользователей, и не надо будет назначать новому менеджеру или контентщику наборы прав отдельно, достаточно будет закинуть пользователя в соответствующую группу. Изменить права для всей группы сразу тоже можно будет за пару минут, убрав или поставив галочку в настройках уровней доступа.\r\n</p>\r\n</div>\r\n<p>\r\nЧтобы изменить или создать новую группу пользователей, в административной части сайта перейдите в «<em>Настройки • Пользователи • Группы пользователей</em>».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/174/4.jpg\" class=\"zoom\"><img src=\"/files/blog/174/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВойдите в режим редактирования/добавления группы. На вкладке «Параметры» находятся основные параметры группы:\r\n</p>\r\n<ul>\r\n  <li>Наименование — название группы</li>\r\n  <li>Символьный идентификатор — id группы для использования в системе</li>\r\n  <li>Описание — развернутое описание для администратора</li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/174/5.jpg\" class=\"zoom\"><img src=\"/files/blog/174/5.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТакже здесь можно установить порядок сортировки и перейти к списку пользователей. Для этого щелкните по ссылке на количестве пользователей.\r\n</p>\r\n<p>\r\nНа вкладке «Безопасность» настраиваются параметры политики безопасности. Например, параметры авторизации, длительность сессии, особенности паролей для пользователей.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/174/6.jpg\" class=\"zoom\"><img src=\"/files/blog/174/6.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nНа вкладке «Доступ» устанавливаются уровни доступа для всех модулей сайта от главного модуля до валют и подписок.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/174/7.jpg\" class=\"zoom\"><img src=\"/files/blog/174/7.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЧтобы добавить пользователя в группе, необходимо назначить ее в настройках прав пользователя.\r\n</p>\r\n\r\n<h2>Настройка прав пользователя</h2>\r\n<p>\r\nЧтобы настроить права для отдельного зарегистрированного пользователя, ваш собственный аккаунт должен иметь полномочия для изменения прав доступа пользователей. В идеале вам нужен административный аккаунт, имеющий доступ ко всем параметрам системы.\r\n</p>\r\n<p>\r\nВ административной части сайта перейдите в «<em>Настройки • Пользователи • Список пользователей</em>». В списке пользователей найдите нужного и войдите в режим редактирования.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/174/8.jpg\" class=\"zoom\"><img src=\"/files/blog/174/8.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nНа вкладке «Группы» можно добавлять или удалять пользователя из созданных в системе групп. Можно установить временные рамки для нахождения пользователя в той или иной группе, если необходимо. В полях в столбце «Период активности» выставляется дата начала и окончания пребывания пользователя в группе с определенными правами. Если там нет значений, то пользователь находится в группе бессрочно до тех пор, пока администратор не деактивирует его группу вручную.\r\n</p>\r\n\r\n<h2>Добавление новых пользователей</h2>\r\n<p>\r\nВ «Списке пользователей» можно не только редактировать, но и создавать новых пользователей. Обычно, новый пользователь создается, когда происходит регистрация, и человек вводит необходимые данные: e-mail, имя и фамилию. Такому пользователю автоматически присваиваются права обычного зарегистрированного пользователя.\r\n</p>\r\n<p>\r\nЕсли вам необходимо добавить нового пользователя через административную часть сайта, то в разделе «Список пользователей» нажмите кнопку «Добавить пользователя».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/174/9.jpg\" class=\"zoom\"><img src=\"/files/blog/174/9.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nОбязательно пропишите e-mail и логин для пользователя, выберите сайт по умолчанию, на который он будет попадать, если у вас в системе многосайтовость. Остальные поля на вкладке «Пользователь» не обязательны для заполнения.\r\n</p>\r\n<p>\r\nНа вкладке «Группа» назначьте пользователю необходимые группы с уровнями доступа.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/174/10.jpg\" class=\"zoom\"><img src=\"/files/blog/174/10.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЭто минимум для добавления нового пользователя. Вы можете заполнить остальные поля в профиле, если это требуется, но для успешного создания пользователя больше ничего не нужно.\r\n</p>\r\n\r\nДля изменения свойств существующих пользователей найдите их в списке, войдите в режим редактирования и внесите изменения.','2018-07-29 12:03:07',1),(175,17,'Битрикс. Меню из разделов инфоблока','','','.type.menu_ext.php, CMS, Web-разработка, Битрикс, Инфоблок, Компонент, Меню, Навигация, РазделИнфоблока, Структура','Пусть у нас на сайте уже есть меню, которое содержит пункты: Каталог, Доставка, Оплата, Контакты. Для показа меню используется компонент bitrix:menu. Сами пункты меню сохраняются в файле .main.menu.php, в корне сервера. Нам нужно, чтобы вместо пункта «Каталог» выводились названия корневых резделов каталога: Обувь, Одежда, Сумки.','<p>\r\nПусть у нас на сайте уже есть меню, которое содержит пункты: Каталог, Доставка, Оплата, Контакты. Для показа меню используется компонент <code>bitrix:menu</code>, который в визуальном редакторе расположен по пути «<em>Служебные • Навигация • Меню</em>». А сами пункты меню сохраняются в файле <code>.main.menu.php</code>, в корне сервера. Нам нужно, чтобы вместо пункта «Каталог» выводились названия корневых резделов каталога: Обувь, Одежда, Сумки.\r\n</p>\r\n[php]\r\n<?php\r\n$aMenuLinks = Array(\r\n    Array(\r\n        \"Каталог\", \r\n        \"/catalog/\", \r\n        Array(), \r\n        Array(), \r\n        \"\" \r\n    ),\r\n    Array(\r\n        \"Доставка\", \r\n        \"/delivery/\", \r\n        Array(), \r\n        Array(), \r\n        \"\" \r\n    ),\r\n    Array(\r\n        \"Оплата\", \r\n        \"/payment/\", \r\n        Array(),\r\n        Array(),\r\n        \"\" \r\n    ),\r\n    Array(\r\n        \"Контакты\", \r\n        \"/contacts/\", \r\n        Array(), \r\n        Array(), \r\n        \"\" \r\n    )\r\n);\r\n[/php]\r\n<p>\r\nДля решения этой задачи существует компонент «Пункты меню», который дополняет уже созданное меню названиями разделов инфоблоков. В визуальном редакторе компонент расположен по пути: «<em>Служебные • Навигация • Пункты меню</em>». Вызов этого компонета происходит в файле <code>.main.menu_ext.php</code>.\r\n</p>\r\n<div class=\"note\">\r\nСистема Bitrix Framework позволяет создавать меню динамического типа. Т.е. массив данных таких меню генерируется автоматически на основании некоторых данных, получаемых с помощью программного кода. Данный код должен храниться в папке соответствующего раздела сайта в файле с именем <code>.type.menu_ext.php</code>. Основная задача подобных файлов — это манипуляция массивом <code>$aMenuLinks</code>.\r\n</div>\r\n<p>\r\nЧтобы файл <code>.main.menu_ext.php</code> мог изменять массив <code>$aMenuLinks</code>, надо в настройках компонента «Меню» отметить checkbox «<em>Подключать файлы с именами вида <code>.тип.menu_ext.php</code></em>»:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/175/1.jpg\" class=\"zoom\"><img src=\"/files/blog/175/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТеперь создадим такой файл и разместим в нем код:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл .main.menu_ext.php в корне сервера\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\nglobal $APPLICATION;\r\n$aMenuLinksExt = array();\r\n\r\nif (CModule::IncludeModule(\'iblock\')) {\r\n    $arFilter = array(\r\n        \"CODE\" => \"catalog\",\r\n        \"SITE_ID\" => SITE_ID,\r\n    );\r\n\r\n    $dbIBlock = CIBlock::GetList(array(\'SORT\' => \'ASC\', \'ID\' => \'ASC\'), $arFilter);\r\n    $dbIBlock = new CIBlockResult($dbIBlock);\r\n\r\n    if ($arIBlock = $dbIBlock->GetNext()) {\r\n        if (defined(\"BX_COMP_MANAGED_CACHE\")) {\r\n            $GLOBALS[\"CACHE_MANAGER\"]->RegisterTag(\"iblock_id_\" . $arIBlock[\"ID\"]);\r\n        }\r\n\r\n        if ($arIBlock[\"ACTIVE\"] == \"Y\") {\r\n            $aMenuLinksExt = $APPLICATION->IncludeComponent(\r\n                \"bitrix:menu.sections\",\r\n                \"\",\r\n                array(\r\n                    \"IS_SEF\" => \"Y\",\r\n                    \"SEF_BASE_URL\" => \"\",\r\n                    \"SECTION_PAGE_URL\" => $arIBlock[\'SECTION_PAGE_URL\'],\r\n                    \"DETAIL_PAGE_URL\" => $arIBlock[\'DETAIL_PAGE_URL\'],\r\n                    \"IBLOCK_TYPE\" => $arIBlock[\'IBLOCK_TYPE_ID\'],\r\n                    \"IBLOCK_ID\" => $arIBlock[\'ID\'],\r\n                    \"DEPTH_LEVEL\" => \"1\",\r\n                    \"CACHE_TYPE\" => \"N\",\r\n                ),\r\n                false,\r\n                array(\'HIDE_ICONS\' => \'Y\')\r\n            );\r\n        }\r\n    }\r\n\r\n    if (defined(\"BX_COMP_MANAGED_CACHE\")) {\r\n        $GLOBALS[\"CACHE_MANAGER\"]->RegisterTag(\"iblock_id_new\");\r\n    }\r\n}\r\n\r\n$aMenuLinks = array_merge($aMenuLinksExt, $aMenuLinks);\r\n[/php]\r\n\r\n<div class=\"note\">\r\n[php]\r\nCDBResult CIBlock::GetList(\r\n    array arOrder = array(\"SORT\"=>\"ASC\"),\r\n    array arFilter = array(),\r\n    bool bIncCnt = false\r\n);\r\n[/php]\r\n<p>\r\nВозвращает список информационных блоков по фильтру <code>arFilter</code> отсортированный в порядке <code>arOrder</code>.\r\n</p>\r\n</div>\r\n\r\n<div class=\"note\">\r\n<p>\r\n<code>CIBlockResult</code> — вспомогательный класс для работы с объектами результатов выборок, наследуется от класса <code>CDBResult</code> и содержит все его параметры и методы. Объекты данного класса возвращают методы <code>CIBlockElement::GetList()</code>, <code>CIBlockElement::GetByID()</code> и функции <code>GetIBlockElementList()</code>, <code>GetIBlockElementListEx</code>.\r\n</p>\r\n<p>Методы класса</p>\r\n<ul>\r\n  <li><code>GetNext()</code> — Возвращает из выборки список полей элемента, с замененными ссылками в полях <code>DETAIL_PAGE_URL</code> и <code>LIST_PAGE_URL</code>.</li>\r\n  <li><code>GetNextElement()</code> — Возвращает объект <code>_CIBElement</code> элемента из выборки.</li>\r\n  <li><code>SetUrlTemplates()</code> — Устанавливает шаблоны путей для элементов.</li>\r\n  <li><code>SetSectionContext()</code> — Метод устанавливает поля раздела в качестве родителя элемента для подстановки в шаблоны путей.</li>\r\n</ul>\r\n</div>\r\n\r\n<p>\r\nОсталось только удалить пункт меню «Каталог» из файла <code>.main.menu.php</code>\r\n</p>\r\n[php]\r\n<?php\r\n$aMenuLinks = Array(\r\n    Array(\r\n        \"Доставка\",\r\n        \"/delivery/\",\r\n        Array(), \r\n        Array(), \r\n        \"\" \r\n    ),\r\n    Array(\r\n        \"Оплата\", \r\n        \"/payment/\", \r\n        Array(),\r\n        Array(),\r\n        \"\" \r\n    ),\r\n    Array(\r\n        \"Контакты\",\r\n        \"/contacts/\",\r\n        Array(),\r\n        Array(),\r\n        \"\" \r\n    )\r\n);\r\n[/php]\r\n<p>\r\n<a href=\"/files/blog/175/2.jpg\" class=\"zoom\"><img src=\"/files/blog/175/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЕсли кроме корневых резделов каталога нам нужно еще выводить и подразделы, в файле <code>.main.menu_ext.php</code> изменяем <code>\"DEPTH_LEVEL\"=>\"1\"</code> на <code>\"DEPTH_LEVEL\"=>\"2\"</code> и вносим изменения в шаблон компонента:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/menu/.default/template.php, старый вариант\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n?>\r\n\r\n<?php if (!empty($arResult)): ?>\r\n    <ul>\r\n    <?php foreach ($arResult as $arItem): ?>\r\n        <?php if ($arItem[\"SELECTED\"]): ?>\r\n            <li class=\"active\"><a href=\"<?= $arItem[\"LINK\"]; ?>\"><?= $arItem[\"TEXT\"]; ?></a></li>\r\n        <?php else:?>\r\n            <li><a href=\"<?= $arItem[\"LINK\"]; ?>\"><?= $arItem[\"TEXT\"]; ?></a></li>\r\n        <?php endif; ?>\r\n    <?php endforeach; ?>\r\n    </ul>\r\n<?php endif; ?>\r\n[/phtml]\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/menu/.default/template.php, новый вариант\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n?>\r\n\r\n<?php if (!empty($arResult)): ?>\r\n    <?php $previousLevel = 0; ?>\r\n    <ul>\r\n    <?php foreach ($arResult as $arItem): ?>\r\n        <?php if ($arItem[\"DEPTH_LEVEL\"] == $previousLevel): ?>\r\n            </li>\r\n        <?php endif; ?>\r\n\r\n        <?php if ($arItem[\"DEPTH_LEVEL\"] > $previousLevel): /* открыть вложенный список */ ?>\r\n            <?php if ($previousLevel > 0): ?>\r\n                <ul>\r\n            <?php endif; ?>\r\n        <?php elseif ($arItem[\"DEPTH_LEVEL\"] < $previousLevel): /* закрыть вложенный список */ ?>\r\n            </li>\r\n            </ul>\r\n            </li>\r\n        <?php endif; ?>\r\n\r\n        <?php if ($arItem[\"SELECTED\"]): /* элемент списка <li> */ ?>\r\n            <li class=\"active\">\r\n        <?php else: ?>\r\n            <li>\r\n        <?php endif; ?>\r\n\r\n        <a href=\"<?= $arItem[\"LINK\"]; ?>\"><?= $arItem[\"TEXT\"]; ?></a>\r\n\r\n        <?php $previousLevel = $arItem[\"DEPTH_LEVEL\"]; ?>\r\n    <?php endforeach; ?>\r\n    </li>\r\n    </ul>\r\n<?php endif; ?>\r\n[/phtml]\r\n<p>\r\nРезультат работы этого кода:\r\n</p>\r\n[html]\r\n<ul>\r\n    <li>\r\n        <a href=\"/catalog/list.php?SECTION_ID=18\">Обувь</a>\r\n        <ul>\r\n            <li>\r\n                <a href=\"/catalog/list.php?SECTION_ID=20\">Босоножки</a>\r\n            </li>\r\n            <li>\r\n                <a href=\"/catalog/list.php?SECTION_ID=19\">Туфли</a>\r\n            </li>\r\n            <li>\r\n                <a href=\"/catalog/list.php?SECTION_ID=21\">Сапоги</a>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n    <li>\r\n        <a href=\"/catalog/list.php?SECTION_ID=22\">Одежда</a>\r\n        <ul>\r\n            <li>\r\n                <a href=\"/catalog/list.php?SECTION_ID=24\">Брюки</a>\r\n            </li>\r\n            <li>\r\n                <a href=\"/catalog/list.php?SECTION_ID=16\">Платья</a>\r\n            </li>\r\n            <li>\r\n                <a href=\"/catalog/list.php?SECTION_ID=23\">Юбки</a>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n    <li>\r\n        <a href=\"/catalog/list.php?SECTION_ID=17\">Сумки</a>\r\n    </li>\r\n    <li>\r\n        <a href=\"/payment/\">Оплата</a>\r\n    </li>\r\n    <li>\r\n        <a href=\"/delivery/\">Доставка</a>\r\n    </li>\r\n    <li>\r\n        <a href=\"/contacts/\">Контакты</a>\r\n    </li>\r\n</ul>\r\n[/html]\r\n<p>\r\nНам осталось только набросать стили:\r\n</p>\r\n[css]\r\n#menu {\r\n    margin-top: 5px;\r\n}\r\n    #menu ul { /* многоуровневый список */\r\n        margin: 0;\r\n        padding: 0;\r\n        list-style: none;\r\n        background: #323232;\r\n    }\r\n        #menu > ul > li {\r\n            float: left;\r\n        }\r\n        #menu > ul > li > ul {\r\n            top: 100%;\r\n            left: 0;\r\n        }\r\n    #menu li {\r\n        position: relative;\r\n    }\r\n    #menu a {\r\n        display: block;\r\n        white-space: nowrap;\r\n        text-decoration: none;\r\n        color: #fff;\r\n        padding: 10px;\r\n        line-height: 1.2;\r\n        text-transform: uppercase;\r\n        min-width: 120px;\r\n    }\r\n            #menu ul li li ul {\r\n                top: 0;\r\n                left: 100%;\r\n            }\r\n        #menu ul ul {\r\n            visibility: hidden;\r\n            position: absolute;\r\n            z-index: 2;\r\n            min-width: 200px;\r\n        }\r\n        #menu li:hover > ul {\r\n            visibility: visible;\r\n        }\r\n    #menu:after {\r\n        content: \"\";\r\n        clear: both;\r\n        display: block;\r\n    }\r\n    #menu a:hover {\r\n        background: #5390cc;\r\n    }\r\n        #menu > ul > li > ul > li > a, #menu > ul > li > ul > li > ul > li > a {\r\n            border-top: 1px solid #4f5254;\r\n            padding: 7px 10px;\r\n        }\r\n[/css]\r\n<p>\r\n<a href=\"/files/blog/175/3.jpg\" class=\"zoom\"><img src=\"/files/blog/175/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЕсли нужен трехуровневый список, в файле <code>.main.menu_ext.php</code> изменяем <code>\"DEPTH_LEVEL\"=>\"2\"</code> на <code>\"DEPTH_LEVEL\"=>\"3\"</code> и вносим изменения в шаблон компонента:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/.default/components/bitrix/menu/.default/template.php, новый вариант\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n?>\r\n\r\n<?php if (!empty($arResult)): ?>\r\n    <ul>\r\n    <?php $previousLevel = 0; ?>\r\n    <?php foreach ($arResult as $arItem): ?>\r\n\r\n        <?php if ($previousLevel && $arItem[\"DEPTH_LEVEL\"] < $previousLevel): ?>\r\n            <?= str_repeat(\"</ul></li>\", ($previousLevel - $arItem[\"DEPTH_LEVEL\"])); ?>\r\n        <?php endif; ?>\r\n\r\n        <?php if ($arItem[\"IS_PARENT\"]): /* если есть дочерние элементы */ ?>\r\n            <?php if ($arItem[\"DEPTH_LEVEL\"] == 1): /* корневой элемент */ ?>\r\n                <li class=\"root parent<?php if ($arItem[\"SELECTED\"]): ?> active<?php endif; ?>\">\r\n                    <a href=\"<?= $arItem[\"LINK\"]; ?>\"><?= $arItem[\"TEXT\"]; ?></a>\r\n                    <ul>\r\n            <?php else: /* элемент второго, третьего уровня */ ?>\r\n                <li class=\"parent<?php if ($arItem[\"SELECTED\"]): ?> active<?php endif; ?>\">\r\n                    <a href=\"<?= $arItem[\"LINK\"]; ?>\"><?= $arItem[\"TEXT\"]; ?></a>\r\n                    <ul>\r\n            <?php endif; ?>\r\n        <?php else: /* если нет дочерних элементов */ ?>\r\n            <?php if ($arItem[\"DEPTH_LEVEL\"] == 1): /* корневой элемент */ ?>\r\n                <li class=\"root<?php if ($arItem[\"SELECTED\"]): ?> active<?php endif; ?>\">\r\n                    <a href=\"<?= $arItem[\"LINK\"]; ?>\"><?= $arItem[\"TEXT\"]; ?></a>\r\n                </li>\r\n            <?php else: /* элемент второго, третьего уровня */ ?>\r\n                <li<?php if ($arItem[\"SELECTED\"]): ?> class=\"active\"<?php endif; ?>>\r\n                    <a href=\"<?= $arItem[\"LINK\"]; ?>\"><?= $arItem[\"TEXT\"]; ?></a>\r\n                </li>\r\n            <?php endif; ?>\r\n        <?php endif; ?>\r\n\r\n        <?php $previousLevel = $arItem[\"DEPTH_LEVEL\"]; ?>\r\n\r\n    <?php endforeach; ?>\r\n\r\n    <?php if ($previousLevel > 1): ?>\r\n        <?= str_repeat(\"</ul></li>\", ($previousLevel-1)); ?>\r\n    <?php endif; ?>\r\n    </ul>\r\n<?php endif; ?>\r\n[/phtml]\r\n[html]\r\n<ul>\r\n    <li class=\"root parent\">\r\n        <a href=\"/catalog/list.php?SECTION_ID=18\">Обувь</a>\r\n        <ul>\r\n            <li>\r\n                <a href=\"/catalog/list.php?SECTION_ID=20\">Босоножки</a>\r\n            </li>\r\n            <li>\r\n                <a href=\"/catalog/list.php?SECTION_ID=19\">Туфли</a>\r\n            </li>\r\n            <li class=\"parent\">\r\n                <a href=\"/catalog/list.php?SECTION_ID=21\">Сапоги</a>\r\n                <ul>\r\n                    <li>\r\n                        <a href=\"/catalog/list.php?SECTION_ID=25\">Зимние сапоги</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"/catalog/list.php?SECTION_ID=26\">Осенние сапоги</a>\r\n                    </li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n    <li class=\"root parent\">\r\n        <a href=\"/catalog/list.php?SECTION_ID=22\">Одежда</a>\r\n        <ul>\r\n            <li>\r\n                <a href=\"/catalog/list.php?SECTION_ID=24\">Брюки</a>\r\n            </li>\r\n            <li>\r\n                <a href=\"/catalog/list.php?SECTION_ID=16\">Платья</a>\r\n            </li>\r\n            <li>\r\n                <a href=\"/catalog/list.php?SECTION_ID=23\">Юбки</a>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n    <li class=\"root\">\r\n        <a href=\"/catalog/list.php?SECTION_ID=17\">Сумки</a>\r\n    </li>\r\n    <li class=\"root\">\r\n        <a href=\"/payment/\">Оплата</a>\r\n    </li>\r\n    <li class=\"root\">\r\n        <a href=\"/delivery/\">Доставка</a>\r\n    </li>\r\n    <li class=\"root\">\r\n        <a href=\"/contacts/\">Контакты</a>\r\n    </li>\r\n</ul>\r\n[/html]\r\n<p>\r\n<a href=\"/files/blog/175/4.jpg\" class=\"zoom\"><img src=\"/files/blog/175/4.jpg\" alt=\"\" /></a>\r\n</p>','2018-08-01 15:14:35',1),(176,17,'Битрикс. Комплексный компонент «Каталог»','','','CMS, Web-разработка, Битрикс, КаталогТоваров, Компонент','Комплексный компонент «Каталог» осуществляет вывод полного каталога товаров из определенного инфоблока. Его функциональность объединяет возможности нескольких простых компонентов: фильтр, сравнение, вывод элементов раздела, показ отдельного элемента, топ элементов и др.','<p>\r\nКомплексный компонент «Каталог» осуществляет вывод полного каталога товаров из определенного инфоблока. Его функциональность объединяет возможности нескольких простых компонентов: фильтр, сравнение, вывод элементов раздела, показ отдельного элемента, топ элементов и др. Расположив комплексный компонент на странице, можно получить полнофункциональный каталог. Компонент является стандартным, в визуальном редакторе компонент расположен по пути «<em>Контент • Каталог • Каталог</em>».\r\n</p>\r\n<p>\r\nПример вызова компонента:\r\n</p>\r\n[php]\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:catalog\",\r\n    \"\",\r\n    Array(\r\n        \"ACTION_VARIABLE\" => \"action\",                      // Название переменной, в которой передается действие\r\n        \"ADD_ELEMENT_CHAIN\" => \"N\",                         // Включать название элемента в цепочку навигации\r\n        \"ADD_PICT_PROP\" => \"-\",                             // Дополнительная картинка основного товара\r\n        \"ADD_PROPERTIES_TO_BASKET\" => \"Y\",                  // Добавлять в корзину свойства товаров и предложений\r\n        \"ADD_SECTIONS_CHAIN\" => \"Y\",                        // Включать раздел в цепочку навигации\r\n        \"AJAX_MODE\" => \"N\",                                 // Включить режим AJAX\r\n        \"AJAX_OPTION_ADDITIONAL\" => \"\",                     // Дополнительный идентификатор\r\n        \"AJAX_OPTION_HISTORY\" => \"N\",                       // Включить эмуляцию навигации браузера\r\n        \"AJAX_OPTION_JUMP\" => \"N\",                          // Включить прокрутку к началу компонента\r\n        \"AJAX_OPTION_STYLE\" => \"Y\",                         // Включить подгрузку стилей\r\n        \"BASKET_URL\" => \"/personal/basket.php\",             // URL, ведущий на страницу с корзиной покупателя\r\n        \"BIG_DATA_RCM_TYPE\" => \"personal\",                  // Тип рекомендации\r\n        \"CACHE_FILTER\" => \"N\",                              // Кешировать при установленном фильтре\r\n        \"CACHE_GROUPS\" => \"Y\",                              // Учитывать права доступа\r\n        \"CACHE_TIME\" => \"36000000\",                         // Время кеширования (сек.)\r\n        \"CACHE_TYPE\" => \"A\",                                // Тип кеширования\r\n        \"COMMON_ADD_TO_BASKET_ACTION\" => \"ADD\",             // Показывать кнопку добавления в корзину или покупки\r\n        \"COMMON_SHOW_CLOSE_POPUP\" => \"N\",                   // Показывать кнопку продолжения покупок во всплывающих окнах\r\n        \"COMPATIBLE_MODE\" => \"Y\",                           // Включить режим совместимости\r\n        \"CONVERT_CURRENCY\" => \"N\",                          // Показывать цены в одной валюте\r\n        \"DETAIL_ADD_DETAIL_TO_SLIDER\" => \"N\",               // Добавлять детальную картинку в слайдер\r\n        \"DETAIL_ADD_TO_BASKET_ACTION\" => array(             // Показывать кнопки добавления в корзину и покупки на детальной странице товара\r\n            0 => \"BUY\",\r\n        ),\r\n        \"DETAIL_ADD_TO_BASKET_ACTION_PRIMARY\" => array(     // Выделять кнопки добавления в корзину и покупки на детальной странице товара\r\n            0 => \"BUY\",\r\n        ),\r\n        \"DETAIL_BACKGROUND_IMAGE\" => \"-\",                   // Установить фоновую картинку для шаблона из свойства\r\n        \"DETAIL_BRAND_USE\" => \"N\",                          // Использовать компонент \"Бренды\"\r\n        \"DETAIL_BROWSER_TITLE\" => \"-\",                      // Установить заголовок окна браузера из свойства\r\n        \"DETAIL_CHECK_SECTION_ID_VARIABLE\" => \"N\",          // Использовать код группы из переменной, если не задан раздел элемента\r\n        \"DETAIL_DETAIL_PICTURE_MODE\" => array(              // Режим показа детальной картинки\r\n            0 => \"POPUP\",\r\n            1 => \"MAGNIFIER\",\r\n        ),\r\n        \"DETAIL_DISPLAY_NAME\" => \"Y\",                       // Выводить название элемента\r\n        \"DETAIL_DISPLAY_PREVIEW_TEXT_MODE\" => \"E\",          // Показ описания для анонса на детальной странице\r\n        \"DETAIL_IMAGE_RESOLUTION\" => \"16by9\",               // Соотношение сторон изображения товара\r\n        \"DETAIL_MAIN_BLOCK_OFFERS_PROPERTY_CODE\" => \"\",     // Свойства предложений, отображаемые в блоке справа от картинки\r\n        \"DETAIL_MAIN_BLOCK_PROPERTY_CODE\" => \"\",            // Свойства, отображаемые в блоке справа от картинки\r\n        \"DETAIL_META_DESCRIPTION\" => \"-\",                   // Установить описание страницы из свойства\r\n        \"DETAIL_META_KEYWORDS\" => \"-\",                      // Установить ключевые слова страницы из свойства\r\n        \"DETAIL_OFFERS_FIELD_CODE\" => array(                // Поля предложений\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"DETAIL_OFFERS_PROPERTY_CODE\" => array(             // Свойства предложений\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"DETAIL_PRODUCT_INFO_BLOCK_ORDER\" => \"sku,props\",   // Порядок отображения блоков информации о товаре\r\n        \"DETAIL_PRODUCT_PAY_BLOCK_ORDER\" => \"rating,price,priceRanges,quantityLimit,quantity,buttons\", // Порядок отображения блоков покупки товара\r\n        \"DETAIL_PROPERTY_CODE\" => array(                    // Свойства\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"DETAIL_SET_CANONICAL_URL\" => \"N\",                  // Устанавливать канонический URL\r\n        \"DETAIL_SET_VIEWED_IN_COMPONENT\" => \"N\",            // Включить сохранение информации о просмотре товара на детальной странице для старых шаблонов\r\n        \"DETAIL_SHOW_POPULAR\" => \"Y\",                       // Показывать блок \"Популярное в разделе\"\r\n        \"DETAIL_SHOW_SLIDER\" => \"N\",                        // Показывать слайдер для товаров\r\n        \"DETAIL_SHOW_VIEWED\" => \"Y\",                        // Показывать блок \"Просматривали\"\r\n        \"DETAIL_STRICT_SECTION_CHECK\" => \"N\",               // Строгая проверка раздела для детального показа элемента\r\n        \"DETAIL_USE_COMMENTS\" => \"N\",                       // Включить отзывы о товаре\r\n        \"DETAIL_USE_VOTE_RATING\" => \"N\",                    // Включить рейтинг товара\r\n        \"DISABLE_INIT_JS_IN_COMPONENT\" => \"N\",              // Не подключать js-библиотеки в компоненте\r\n        \"DISPLAY_BOTTOM_PAGER\" => \"Y\",                      // Выводить под списком\r\n        \"DISPLAY_TOP_PAGER\" => \"N\",                         // Выводить над списком\r\n        \"ELEMENT_SORT_FIELD\" => \"sort\",                     // По какому полю сортируем товары в разделе\r\n        \"ELEMENT_SORT_FIELD2\" => \"id\",                      // Поле для второй сортировки товаров в разделе\r\n        \"ELEMENT_SORT_ORDER\" => \"asc\",                      // Порядок сортировки товаров в разделе\r\n        \"ELEMENT_SORT_ORDER2\" => \"desc\",                    // Порядок второй сортировки товаров в разделе\r\n        \"FILTER_HIDE_ON_MOBILE\" => \"N\",                     // Скрывать умный фильтр на мобильных устройствах\r\n        \"FILTER_VIEW_MODE\" => \"HORIZONTAL\",                 // Вид отображения умного фильтра\r\n        \"GIFTS_DETAIL_BLOCK_TITLE\" => \"Выберите один из подарков\", // Текст заголовка \"Подарки\" в детальном просмотре\r\n        \"GIFTS_DETAIL_HIDE_BLOCK_TITLE\" => \"N\",             // Скрыть заголовок \"Подарки\" в детальном просмотре\r\n        \"GIFTS_DETAIL_PAGE_ELEMENT_COUNT\" => \"4\",           // Количество элементов в блоке \"Подарки\" в строке в детальном просмотре\r\n        \"GIFTS_DETAIL_TEXT_LABEL_GIFT\" => \"Подарок\",        // Текст метки \"Подарка\" в детальном просмотре\r\n        \"GIFTS_MAIN_PRODUCT_DETAIL_BLOCK_TITLE\" => \"Выберите один из товаров, чтобы получить подарок\", // Текст заголовка \"Товары к подарку\"\r\n        \"GIFTS_MAIN_PRODUCT_DETAIL_HIDE_BLOCK_TITLE\" => \"N\", // Скрыть заголовок \"Товары к подарку\" в детальном просмотре\r\n        \"GIFTS_MAIN_PRODUCT_DETAIL_PAGE_ELEMENT_COUNT\" => \"4\", // Количество элементов в блоке \"Товары к подарку\" в строке в детальном просмотре\r\n        \"GIFTS_MESS_BTN_BUY\" => \"Выбрать\",                  // Текст кнопки \"Выбрать\"\r\n        \"GIFTS_SECTION_LIST_BLOCK_TITLE\" => \"Подарки к товарам этого раздела\", // Текст заголовка \"Подарки\" в списке\r\n        \"GIFTS_SECTION_LIST_HIDE_BLOCK_TITLE\" => \"N\",       // Скрыть заголовок \"Подарки\" в списке\r\n        \"GIFTS_SECTION_LIST_PAGE_ELEMENT_COUNT\" => \"4\",     // Количество элементов в блоке \"Подарки\" строке в списке\r\n        \"GIFTS_SECTION_LIST_TEXT_LABEL_GIFT\" => \"Подарок\",  // Текст метки \"Подарка\" в списке\r\n        \"GIFTS_SHOW_DISCOUNT_PERCENT\" => \"Y\",               // Показывать процент скидки\r\n        \"GIFTS_SHOW_IMAGE\" => \"Y\",                          // Показывать изображение\r\n        \"GIFTS_SHOW_NAME\" => \"Y\",                           // Показывать название\r\n        \"GIFTS_SHOW_OLD_PRICE\" => \"Y\",                      // Показывать старую цену\r\n        \"HIDE_NOT_AVAILABLE\" => \"Y\",                        // Недоступные товары\r\n        \"HIDE_NOT_AVAILABLE_OFFERS\" => \"N\",                 // Недоступные торговые предложения\r\n        \"IBLOCK_ID\" => \"4\",                                 // Инфоблок\r\n        \"IBLOCK_TYPE\" => \"catalog\",                         // Тип инфоблока\r\n        \"INCLUDE_SUBSECTIONS\" => \"Y\",                       // Показывать элементы подразделов раздела\r\n        \"INSTANT_RELOAD\" => \"N\",                            // Мгновенная фильтрация при включенном AJAX\r\n        \"LABEL_PROP\" => \"\",                                 // Свойство меток товара\r\n        \"LAZY_LOAD\" => \"N\",                                 // Показать кнопку ленивой загрузки Lazy Load\r\n        \"LINE_ELEMENT_COUNT\" => \"3\",                        // Количество элементов, выводимых в одной строке таблицы\r\n        \"LINK_ELEMENTS_URL\" => \"link.php?PARENT_ELEMENT_ID=#ELEMENT_ID#\", // URL на страницу, где будет показан список связанных элементов\r\n        \"LINK_IBLOCK_ID\" => \"\",                             // ID инфоблока, элементы которого связаны с текущим элементом\r\n        \"LINK_IBLOCK_TYPE\" => \"\",                           // Тип инфоблока, элементы которого связаны с текущим элементом\r\n        \"LINK_PROPERTY_SID\" => \"\",                          // Свойство, в котором хранится связь\r\n        \"LIST_BROWSER_TITLE\" => \"-\",                        // Установить заголовок окна браузера из свойства раздела\r\n        \"LIST_ENLARGE_PRODUCT\" => \"STRICT\",                 // Выделять товары в списке\r\n        \"LIST_META_DESCRIPTION\" => \"-\",                     // Установить описание страницы из свойства раздела\r\n        \"LIST_META_KEYWORDS\" => \"-\",                        // Установить ключевые слова страницы из свойства раздела\r\n        \"LIST_OFFERS_FIELD_CODE\" => array(                  // Поля предложений\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"LIST_OFFERS_LIMIT\" => \"5\",                         // Максимальное количество предложений для показа (0 - все)\r\n        \"LIST_OFFERS_PROPERTY_CODE\" => array(               // Свойства предложений\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"LIST_PRODUCT_BLOCKS_ORDER\" => \"price,props,sku,quantityLimit,quantity,buttons\", // Порядок отображения блоков товара\r\n        \"LIST_PRODUCT_ROW_VARIANTS\" =>                      // Вариант отображения товаров\r\n            \"[{\'VARIANT\':\'2\',\'BIG_DATA\':false},{\'VARIANT\':\'2\',\'BIG_DATA\':false},{\'VARIANT\':\'2\',\'BIG_DATA\':false},\r\n              {\'VARIANT\':\'2\',\'BIG_DATA\':false},{\'VARIANT\':\'2\',\'BIG_DATA\':false},{\'VARIANT\':\'2\',\'BIG_DATA\':false},\r\n              {\'VARIANT\':\'2\',\'BIG_DATA\':false},{\'VARIANT\':\'2\',\'BIG_DATA\':false},{\'VARIANT\':\'2\',\'BIG_DATA\':false},\r\n              {\'VARIANT\':\'2\',\'BIG_DATA\':false}]\",\r\n        \"LIST_PROPERTY_CODE\" => array(                      // Свойства\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"LIST_PROPERTY_CODE_MOBILE\" => \"\",                  // Свойства товаров, отображаемые на мобильных устройствах\r\n        \"LIST_SHOW_SLIDER\" => \"Y\",                          // Показывать слайдер для товаров\r\n        \"LIST_SLIDER_INTERVAL\" => \"3000\",                   // Интервал смены слайдов, мс\r\n        \"LIST_SLIDER_PROGRESS\" => \"N\",                      // Показывать полосу прогресса\r\n        \"LOAD_ON_SCROLL\" => \"N\",                            // Подгружать товары при прокрутке до конца\r\n        \"MESSAGE_404\" => \"\",                                // Сообщение для показа (по умолчанию из компонента)\r\n        \"MESS_BTN_ADD_TO_BASKET\" => \"Добавить в корзину\",   // Текст кнопки \"Добавить в корзину\"\r\n        \"MESS_BTN_BUY\" => \"Купить\",                         // Текст кнопки \"Купить\"\r\n        \"MESS_BTN_COMPARE\" => \"Сравнение\",                  // Текст кнопки \"Сравнение\"\r\n        \"MESS_BTN_DETAIL\" => \"Подробнее\",                   // Текст кнопки \"Подробнее\"\r\n        \"MESS_BTN_SUBSCRIBE\" => \"Подписаться\",              // Текст кнопки \"Уведомить о поступлении\"\r\n        \"MESS_COMMENTS_TAB\" => \"Комментарии\",               // Текст вкладки \"Комментарии\"\r\n        \"MESS_DESCRIPTION_TAB\" => \"Описание\",               // Текст вкладки \"Описание\"\r\n        \"MESS_NOT_AVAILABLE\" => \"Нет в наличии\",            // Сообщение об отсутствии товара\r\n        \"MESS_PRICE_RANGES_TITLE\" => \"Цены\",                // Название блока c расширенными ценами\r\n        \"MESS_PROPERTIES_TAB\" => \"Характеристики\",          // Текст вкладки \"Характеристики\"\r\n        \"OFFERS_CART_PROPERTIES\" => \"\",                     // Свойства предложений, добавляемые в корзину\r\n        \"OFFERS_SORT_FIELD\" => \"sort\",                      // По какому полю сортируем предложения товара\r\n        \"OFFERS_SORT_FIELD2\" => \"id\",                       // Поле для второй сортировки предложений товара\r\n        \"OFFERS_SORT_ORDER\" => \"asc\",                       // Порядок сортировки предложений товара\r\n        \"OFFERS_SORT_ORDER2\" => \"desc\",                     // Порядок второй сортировки предложений товара\r\n        \"OFFER_ADD_PICT_PROP\" => \"-\",                       // Дополнительные картинки предложения\r\n        \"OFFER_TREE_PROPS\" => \"\",                           // Свойства для отбора предложений\r\n        \"PAGER_BASE_LINK_ENABLE\" => \"N\",                    // Включить обработку ссылок\r\n        \"PAGER_DESC_NUMBERING\" => \"N\",                      // Использовать обратную навигацию\r\n        \"PAGER_DESC_NUMBERING_CACHE_TIME\" => \"36000\",       // Время кеширования страниц для обратной навигации\r\n        \"PAGER_SHOW_ALL\" => \"N\",                            // Показывать ссылку \"Все\"\r\n        \"PAGER_SHOW_ALWAYS\" => \"N\",                         // Выводить всегда\r\n        \"PAGER_TEMPLATE\" => \".default\",                     // Шаблон постраничной навигации\r\n        \"PAGER_TITLE\" => \"Товары\",                          // Название категорий\r\n        \"PAGE_ELEMENT_COUNT\" => \"30\",                       // Количество элементов на странице\r\n        \"PARTIAL_PRODUCT_PROPERTIES\" => \"N\",                // Разрешить добавлять в корзину товары, у которых заполнены не все характеристики\r\n        \"PRICE_CODE\" => \"\",                                 // Тип цены\r\n        \"PRICE_VAT_INCLUDE\" => \"Y\",                         // Включать НДС в цену\r\n        \"PRICE_VAT_SHOW_VALUE\" => \"N\",                      // Отображать значение НДС\r\n        \"PRODUCT_DISPLAY_MODE\" => \"N\",                      // Схема отображения\r\n        \"PRODUCT_ID_VARIABLE\" => \"id\",                      // Название переменной, в которой передается код товара для покупки\r\n        \"PRODUCT_PROPERTIES\" => \"\",                         // Характеристики товара, добавляемые в корзину\r\n        \"PRODUCT_PROPS_VARIABLE\" => \"prop\",                 // Название переменной, в которой передаются характеристики товара\r\n        \"PRODUCT_QUANTITY_VARIABLE\" => \"quantity\",          // Название переменной, в которой передается количество товара\r\n        \"PRODUCT_SUBSCRIPTION\" => \"Y\",                      // Разрешить оповещения для отсутствующих товаров\r\n        \"SEARCH_CHECK_DATES\" => \"Y\",                        // Искать только в активных по дате документах\r\n        \"SEARCH_NO_WORD_LOGIC\" => \"Y\",                      // Отключить обработку слов как логических операторов\r\n        \"SEARCH_PAGE_RESULT_COUNT\" => \"50\",                 // Количество результатов на странице\r\n        \"SEARCH_RESTART\" => \"N\",                            // Искать без учета морфологии (при отсутствии результата поиска)\r\n        \"SEARCH_USE_LANGUAGE_GUESS\" => \"Y\",                 // Включить автоопределение раскладки клавиатуры\r\n        \"SECTIONS_SHOW_PARENT_NAME\" => \"Y\",                 // Показывать название раздела\r\n        \"SECTIONS_VIEW_MODE\" => \"LIST\",                     // Вид списка подразделов\r\n        \"SECTION_ADD_TO_BASKET_ACTION\" => \"ADD\",            // Показывать кнопку добавления в корзину или покупки на странице списка товаров\r\n        \"SECTION_BACKGROUND_IMAGE\" => \"-\",                  // Установить фоновую картинку для шаблона из свойства\r\n        \"SECTION_COUNT_ELEMENTS\" => \"Y\",                    // Показывать количество элементов в разделе\r\n        \"SECTION_ID_VARIABLE\" => \"SECTION_ID\",              // Название переменной, в которой передается код группы\r\n        \"SECTION_TOP_DEPTH\" => \"2\",                         // Максимальная отображаемая глубина разделов\r\n        \"SEF_MODE\" => \"Y\",                                  // Включить поддержку ЧПУ\r\n        \"SET_LAST_MODIFIED\" => \"N\",                         // Устанавливать в заголовках ответа время модификации страницы\r\n        \"SET_STATUS_404\" => \"N\",                            // Устанавливать статус 404\r\n        \"SET_TITLE\" => \"Y\",                                 // Устанавливать заголовок страницы\r\n        \"SHOW_404\" => \"N\",                                  // Показ специальной страницы\r\n        \"SHOW_DEACTIVATED\" => \"N\",                          // Показывать деактивированные товары\r\n        \"SHOW_DISCOUNT_PERCENT\" => \"N\",                     // Показывать процент скидки\r\n        \"SHOW_MAX_QUANTITY\" => \"N\",                         // Показывать остаток товара\r\n        \"SHOW_OLD_PRICE\" => \"N\",                            // Показывать старую цену\r\n        \"SHOW_PRICE_COUNT\" => \"1\",                          // Выводить цены для количества\r\n        \"SHOW_TOP_ELEMENTS\" => \"Y\",                         // Выводить топ элементов\r\n        \"SIDEBAR_DETAIL_SHOW\" => \"N\",                       // Показывать правый блок на детальной странице\r\n        \"SIDEBAR_PATH\" => \"\",                               // Путь к включаемой области для вывода информации в правом блоке\r\n        \"SIDEBAR_SECTION_SHOW\" => \"Y\",                      // Показывать правый блок в списке товаров\r\n        \"TEMPLATE_THEME\" => \"blue\",                         // Цветовая тема\r\n        \"TOP_ADD_TO_BASKET_ACTION\" => \"ADD\",                // Показывать кнопку добавления в корзину или покупки на странице с top-ом товаров\r\n        \"TOP_ELEMENT_COUNT\" => \"9\",                         // Количество выводимых элементов\r\n        \"TOP_ELEMENT_SORT_FIELD\" => \"sort\",                 // По какому полю сортируем товары в разделе\r\n        \"TOP_ELEMENT_SORT_FIELD2\" => \"id\",                  // Поле для второй сортировки товаров в разделе\r\n        \"TOP_ELEMENT_SORT_ORDER\" => \"asc\",                  // Порядок сортировки товаров в разделе\r\n        \"TOP_ELEMENT_SORT_ORDER2\" => \"desc\",                // Порядок второй сортировки товаров в разделе\r\n        \"TOP_ENLARGE_PRODUCT\" => \"STRICT\",                  // Выделять товары в списке\r\n        \"TOP_LINE_ELEMENT_COUNT\" => \"3\",                    // Количество элементов, выводимых в одной строке таблицы\r\n        \"TOP_OFFERS_FIELD_CODE\" => array(                   // Поля предложений\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"TOP_OFFERS_LIMIT\" => \"5\",                          // Максимальное количество предложений для показа (0 - все)\r\n        \"TOP_OFFERS_PROPERTY_CODE\" => array(                // Свойства предложений\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"TOP_PRODUCT_BLOCKS_ORDER\" => \"price,props,sku,quantityLimit,quantity,buttons\", // Порядок отображения блоков товара\r\n        \"TOP_PRODUCT_ROW_VARIANTS\" => \r\n            \"[{\'VARIANT\':\'2\',\'BIG_DATA\':false},             // Вариант отображения товаров\r\n              {\'VARIANT\':\'2\',\'BIG_DATA\':false},\r\n              {\'VARIANT\':\'2\',\'BIG_DATA\':false}]\",\r\n        \"TOP_PROPERTY_CODE\" => array(                       // Свойства\r\n            0 => \"\",\r\n            1 => \"\",\r\n        ),\r\n        \"TOP_PROPERTY_CODE_MOBILE\" => \"\",                   // Свойства товаров, отображаемые на мобильных устройствах\r\n        \"TOP_SHOW_SLIDER\" => \"Y\",                           // Показывать слайдер для товаров\r\n        \"TOP_SLIDER_INTERVAL\" => \"3000\",                    // Интервал смены слайдов, мс\r\n        \"TOP_SLIDER_PROGRESS\" => \"N\",                       // Показывать полосу прогресса\r\n        \"TOP_VIEW_MODE\" => \"SECTION\",                       // Показ элементов top-а\r\n        \"USER_CONSENT\" => \"N\",                              // Запрашивать согласие\r\n        \"USER_CONSENT_ID\" => \"0\",                           // Соглашение\r\n        \"USER_CONSENT_IS_CHECKED\" => \"Y\",                   // Галка по умолчанию проставлена\r\n        \"USER_CONSENT_IS_LOADED\" => \"N\",                    // Загружать текст сразу\r\n        \"USE_BIG_DATA\" => \"Y\",                              // Показывать персональные рекомендации\r\n        \"USE_COMMON_SETTINGS_BASKET_POPUP\" => \"N\",          // Одинаковые настройки показа кнопок добавления в корзину или покупки на всех страницах\r\n        \"USE_COMPARE\" => \"N\",                               // Разрешить сравнение товаров\r\n        \"USE_ELEMENT_COUNTER\" => \"Y\",                       // Использовать счетчик просмотров\r\n        \"USE_ENHANCED_ECOMMERCE\" => \"N\",                    // Включить отправку данных в электронную торговлю\r\n        \"USE_FILTER\" => \"N\",                                // Показывать фильтр\r\n        \"USE_GIFTS_DETAIL\" => \"Y\",                          // Показывать блок \"Подарки\" в детальном просмотре\r\n        \"USE_GIFTS_MAIN_PR_SECTION_LIST\" => \"Y\",            // Показывать блок \"Товары к подарку\" в детальном просмотре\r\n        \"USE_GIFTS_SECTION\" => \"Y\",                         // Показывать блок \"Подарки\" в списке\r\n        \"USE_MAIN_ELEMENT_SECTION\" => \"N\",                  // Использовать основной раздел для показа элемента\r\n        \"USE_PRICE_COUNT\" => \"N\",                           // Использовать вывод цен с диапазонами\r\n        \"USE_PRODUCT_QUANTITY\" => \"N\",                      // Разрешить указание количества товара\r\n        \"USE_REVIEW\" => \"N\",                                // Разрешить отзывы\r\n        \"USE_SALE_BESTSELLERS\" => \"Y\",                      // Показывать список лидеров продаж\r\n        \"USE_STORE\" => \"N\",                                 // Показывать блок \"Количество товара на складе\"\r\n        \"COMPONENT_TEMPLATE\" => \".default\",\r\n        \"SEF_FOLDER\" => \"/catalog/\",                        // Каталог ЧПУ (относительно корня сайта)\r\n        \"SEF_URL_TEMPLATES\" => array(\r\n            \"sections\" => \"\",\r\n            \"section\" => \"#SECTION_CODE#/\",\r\n            \"element\" => \"#SECTION_CODE#/#ELEMENT_CODE#/\",\r\n            \"compare\" => \"compare.php?action=#ACTION_CODE#\",\r\n            \"smart_filter\" => \"#SECTION_ID#/filter/#SMART_FILTER_PATH#/apply/\",\r\n        ),\r\n        \"VARIABLE_ALIASES\" => array(\r\n            \"compare\" => array(\r\n                \"ACTION_CODE\" => \"action\",\r\n            ),\r\n        )\r\n    ),\r\n    false\r\n);\r\n[/php]\r\n<p>\r\nЧтобы кастомизоровать каталог под наш дизайн, надо скопировать шаблоны компонентов:\r\n</p>\r\n<ul>\r\n  <li><code>catalog</code>, комплексный компонент «Каталог»</li>\r\n  <li><code>catalog.section</code>, компонент раздела каталога\r\n    <ul>\r\n      <li><code>catalog.item</code>, компонент элемента списка</li>\r\n    </ul>\r\n  </li>\r\n  <li><code>catalog.element</code>, компонент элемента каталога</li>\r\n</ul>\r\n<div class=\"note\">\r\nПоскольку я еще только начинаю разбираться с каталогом товаров от Битрикс, моя задача — реализовать минимальный функционал: главная страница, раздел каталога и карточка товара. Сравнения товаров, умного фильтра, подарков и прочего пока что не будет. Буду есть слона по кусочку.\r\n</div>\r\n\r\n<h2>Главная страница каталога</h2>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/templates/catalog/components/bitrix/catalog/.default/sections.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED !== true) die();\r\n\r\n$this->setFrameMode(true);\r\n\r\n// Выводим список всех разделов каталога\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:catalog.section.list\",\r\n    \"\",\r\n    array(\r\n        // параметры компонента\r\n    ),\r\n    $component,\r\n    ($arParams[\"SHOW_TOP_ELEMENTS\"] !== \"N\" ? array(\"HIDE_ICONS\" => \"Y\") : array())\r\n);\r\n\r\n// Выводим лидеров продаж из всех разделов\r\nif ($arParams[\"SHOW_TOP_ELEMENTS\"] !== \"N\") {\r\n    $APPLICATION->IncludeComponent(\r\n        \"bitrix:catalog.top\",\r\n        \"\",\r\n        array(\r\n            // параметры компонента\r\n        ),\r\n        $component\r\n    );\r\n    unset($basketAction);\r\n}\r\n[/php]\r\n\r\n<h3>Компонент bitrix:catalog.section.list</h3>\r\n<p>\r\nКомпонент «<a href=\"https://dev.1c-bitrix.ru/user_help/components/content/catalog/catalog_section_list.php\">Структура разделов</a>» выводит список разделов инфоблока. Компонент стандартный, в визуальном редакторе расположен по пути «<em>Контент • Каталог • Структура разделов</em>».\r\n</p>\r\n\r\n<h3>Шаблон компонента bitrix:catalog.section.list</h3>\r\n[phtml]\r\n<?php\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n\r\n$this->setFrameMode(true);\r\n\r\n$strSectionEdit = CIBlock::GetArrayByID($arParams[\"IBLOCK_ID\"], \"SECTION_EDIT\");\r\n$strSectionDelete = CIBlock::GetArrayByID($arParams[\"IBLOCK_ID\"], \"SECTION_DELETE\");\r\n$arSectionDeleteParams = array(\"CONFIRM\" => GetMessage(\'CT_BCSL_ELEMENT_DELETE_CONFIRM\'));\r\n?>\r\n\r\n<?php if (\'Y\' == $arParams[\'SHOW_PARENT_NAME\'] && 0 < $arResult[\'SECTION\'][\'ID\']): ?>\r\n    <?php\r\n    // для редактирования раздела с морды сайта\r\n    $this->AddEditAction(\r\n        $arResult[\'SECTION\'][\'ID\'],\r\n        $arResult[\'SECTION\'][\'EDIT_LINK\'],\r\n        $strSectionEdit\r\n    );\r\n    $this->AddDeleteAction(\r\n        $arResult[\'SECTION\'][\'ID\'],\r\n        $arResult[\'SECTION\'][\'DELETE_LINK\'],\r\n        $strSectionDelete, \r\n        $arSectionDeleteParams\r\n    );\r\n    ?>\r\n\r\n    <h1 id=\"<? echo $this->GetEditAreaId($arResult[\'SECTION\'][\'ID\']); ?>\">\r\n        <?= $arResult[\'SECTION\'][\'NAME\']; ?>\r\n    </h1>\r\n<?php endif; ?>\r\n\r\n<?php\r\n// у текущего раздела нет подразделов\r\nif ($arResult[\"SECTIONS_COUNT\"] == 0) {\r\n    return;\r\n}\r\n?>\r\n\r\n<ul class=\"section-childs\">\r\n    <?php\r\n    $intCurrentDepth = 1;\r\n    $boolFirst = true;\r\n    ?>\r\n    <?php foreach ($arResult[\'SECTIONS\'] as &$arSection): ?>\r\n        <?php\r\n        // для редактирования подразделов с морды сайта\r\n        $this->AddEditAction(\r\n            $arSection[\'ID\'],\r\n            $arSection[\'EDIT_LINK\'],\r\n            $strSectionEdit\r\n        );\r\n        $this->AddDeleteAction(\r\n            $arSection[\'ID\'],\r\n            $arSection[\'DELETE_LINK\'],\r\n            $strSectionDelete,\r\n            $arSectionDeleteParams\r\n        );\r\n\r\n        if ($intCurrentDepth < $arSection[\'RELATIVE_DEPTH_LEVEL\']) {\r\n            if (0 < $intCurrentDepth) {\r\n                echo \"\\n\",str_repeat(\"\\t\", $arSection[\'RELATIVE_DEPTH_LEVEL\']),\'<ul>\';\r\n            }\r\n        } elseif ($intCurrentDepth == $arSection[\'RELATIVE_DEPTH_LEVEL\']) {\r\n            if (!$boolFirst) {\r\n                echo \'</li>\';\r\n            }\r\n        } else {\r\n            while ($intCurrentDepth > $arSection[\'RELATIVE_DEPTH_LEVEL\']) {\r\n                echo \'</li>\',\"\\n\",str_repeat(\"\\t\", $intCurrentDepth),\'</ul>\',\"\\n\",str_repeat(\"\\t\", $intCurrentDepth-1);\r\n                $intCurrentDepth--;\r\n            }\r\n            echo str_repeat(\"\\t\", $intCurrentDepth-1),\'</li>\';\r\n        }\r\n\r\n        echo (!$boolFirst ? \"\\n\" : \'\'),str_repeat(\"\\t\", $arSection[\'RELATIVE_DEPTH_LEVEL\']);\r\n        ?>\r\n        <li id=\"<?=$this->GetEditAreaId($arSection[\'ID\']);?>\">\r\n            <a href=\"<?= $arSection[\"SECTION_PAGE_URL\"]; ?>\">\r\n                <?= $arSection[\"NAME\"];?>\r\n                <?php if ($arParams[\"COUNT_ELEMENTS\"]): ?>\r\n                    <span>(<?= $arSection[\"ELEMENT_CNT\"]; ?>)</span>\r\n                <?php endif; ?>\r\n            </a>\r\n            <?php\r\n            $intCurrentDepth = $arSection[\'RELATIVE_DEPTH_LEVEL\'];\r\n            $boolFirst = false;\r\n            ?>\r\n    <?php endforeach; ?>\r\n    <?php\r\n    unset($arSection);\r\n    while ($intCurrentDepth > 1) {\r\n        echo \'</li>\',\"\\n\",str_repeat(\"\\t\", $intCurrentDepth),\'</ul>\',\"\\n\",str_repeat(\"\\t\", $intCurrentDepth-1);\r\n        $intCurrentDepth--;\r\n    }\r\n    if ($intCurrentDepth > 0) {\r\n        echo \'</li>\',\"\\n\";\r\n    }\r\n    ?>\r\n</ul>\r\n[/phtml]\r\n\r\n<h3>Компонент bitrix:catalog.top</h3>\r\n<p>\r\nКомпонент «<a href=\"https://dev.1c-bitrix.ru/user_help/components/content/catalog/catalog_top.php\">Top элементов каталога</a>» выводит в таблице top элементов из всех разделов в соответствии с заданной сортировкой (используется, как правило, на главной странице сайта). Компонент стандартный, в визуальном редакторе расположен по пути «<em>Контент • Каталог • Top элементов каталога</em>».\r\n</p>\r\n\r\n<h2>Страница товара</h2>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/catalog/components/bitrix/catalog/.default/element.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED !== true) die();\r\n\r\nuse Bitrix\\Main\\Loader;\r\nuse Bitrix\\Main\\ModuleManager;\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<div id=\"product\">\r\n    <?php\r\n    /*\r\n     * КОМПОНЕНТ ТОВАРА\r\n     */\r\n    // параметры компонента\r\n    $componentElementParams = array(\r\n        // параметры вызова компонента\r\n    );\r\n    // вызов компонента\r\n    $elementId = $APPLICATION->IncludeComponent(\r\n        \'bitrix:catalog.element\',\r\n        \'\',\r\n        $componentElementParams,\r\n        $component\r\n    );\r\n    $GLOBALS[\'CATALOG_CURRENT_ELEMENT_ID\'] = $elementId;\r\n    ?>\r\n\r\n    <?php if ( ! ($elementId > 0)): /* если товар не существует */ ?>\r\n        </div>\r\n        <?php return; ?>\r\n    <?php endif; ?>\r\n\r\n    <?php\r\n    /*\r\n     * РЕКОМЕНДАЦИИ: рекомендованные товары + популярные товвары + вы уже смотрели\r\n     */\r\n\r\n    // получение данных\r\n    $recommendedData = array();\r\n    /*\r\n     * здесь код получения данных для последующего вызова компонентов\r\n     */\r\n    ?>\r\n\r\n    <?php if (!empty($recommendedData)): ?>\r\n        <?php if (!empty($recommendedData[\'IBLOCK_LINK\'])\r\n                  || !empty($recommendedData[\'ALL_LINK\'])): /* рекомендованные товары */ ?>\r\n            <div id=\"recommended\">\r\n                <h2><?= GetMessage(\'CATALOG_RECOMMENDED_BY_LINK\'); ?></h2>\r\n                <?php\r\n                $APPLICATION->IncludeComponent(\r\n                    \'bitrix:catalog.recommended.products\',\r\n                    \'\',\r\n                    array(\r\n                        // параметры вызова компонента\r\n                    ),\r\n                    $component\r\n                );\r\n                ?>\r\n            </div>\r\n        <?php endif; ?>\r\n\r\n        <?php if (!isset($arParams[\'DETAIL_SHOW_POPULAR\'])\r\n                  || $arParams[\'DETAIL_SHOW_POPULAR\'] != \'N\'): /* популярные товары */ ?>\r\n            <div id=\"popular\">\r\n                <h2><?= GetMessage(\'CATALOG_POPULAR_IN_SECTION\'); ?></h2>\r\n                <?php\r\n                $APPLICATION->IncludeComponent(\r\n                    \'bitrix:catalog.section\',\r\n                    \'\',\r\n                    array(\r\n                        // параметры вызова компонента\r\n                    ),\r\n                    $component\r\n                );\r\n                ?>\r\n            </div>\r\n        <?php endif; ?>\r\n\r\n        <?php if (Loader::includeModule(\'catalog\')\r\n                  && (!isset($arParams[\'DETAIL_SHOW_VIEWED\'])\r\n                  || $arParams[\'DETAIL_SHOW_VIEWED\'] != \'N\')): /* просмотренные товары */ ?>\r\n            <div id=\"viewed\">\r\n                <h2><?= GetMessage(\'CATALOG_VIEWED\'); ?></h2>\r\n                <?\r\n                $APPLICATION->IncludeComponent(\r\n                    \'bitrix:catalog.products.viewed\',\r\n                    \'\',\r\n                    array(\r\n                        // параметры вызова компонента\r\n                    ),\r\n                    $component\r\n                );\r\n                ?>\r\n            </div>\r\n        <?php endif; ?>\r\n    <?php endif; ?>\r\n</div>\r\n[/phtml]\r\n\r\n<h3>Компонент bitrix:catalog.element</h3>\r\n<p>\r\nКомпонент «<a href=\"https://dev.1c-bitrix.ru/user_help/components/content/catalog/catalog_element.php\">Элемент каталога детально</a>» выводит детальную информацию по элементу каталога. Компонент стандартный, в визуальном редакторе расположен по пути «<em>Контент • Каталог • Элемент каталога детально</em>».\r\n</p>\r\n\r\n<h3>Компонент bitrix:catalog.recommended.products</h3>\r\n<p>\r\nКомпонент «<a href=\"https://dev.1c-bitrix.ru/user_help/components/magazin/information_tovars/catalog_recommended_products.php\">Рекомендуемые товары</a>» выводит для товара список рекомендуемых к покупке вместе с ним. Компонент стандартный, в визуальном редакторе расположен по пути «<em>Магазин • Информация о товарах • Рекомендуемые товары</em>».\r\n</p>\r\n\r\n<h3>Компонент bitrix:catalog.products.viewed</h3>\r\n<p>\r\nКомпонент «<a href=\"https://dev.1c-bitrix.ru/user_help/components/magazin/information_tovars/catalog_products_viewed.php\">Просмотренные товары</a>» выводит список просмотренных пользователем товаров с указанным набором свойств, цен и другими его параметрами. Компонент стандартный, в визуальном редакторе расположен по пути «<em>Магазин • Информация о товарах • Просмотренные товары</em>».\r\n</p>\r\n\r\n<h3>Шаблон компонента bitrix:catalog.element</h3>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/catalog/components/bitrix/catalog.element/.default/template.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED !== true) die();\r\n\r\nuse \\Bitrix\\Main\\Localization\\Loc;\r\n\r\n/**\r\n * @global CMain $APPLICATION\r\n * @var array $arParams\r\n * @var array $arResult\r\n * @var CatalogSectionComponent $component\r\n * @var CBitrixComponentTemplate $this\r\n * @var string $templateName\r\n * @var string $componentPath\r\n * @var string $templateFolder\r\n */\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<h1><?= $arResult[\'NAME\']; /* название товара */ ?></h1>\r\n<img src=\"<?= $arResult[\'DETAIL_PICTURE\'][\'SRC\']; /* картинка товара */ ?>\"\r\n     alt=\"<?= $arResult[\'DETAIL_PICTURE\'][\'ALT\']; ?>\"\r\n     title=\"<?= $arResult[\'DETAIL_PICTURE\'][\'TITLE\']; ?>\" />\r\n<?php if ($arResult[\'DETAIL_TEXT\'] != \'\'): /* описание товара */ ?>\r\n    <div>\r\n    <?php if ($arResult[\'DETAIL_TEXT_TYPE\'] === \'html\'): ?>\r\n        <?= $arResult[\'DETAIL_TEXT\']; ?>\r\n    <?php else: ?>\r\n        <p><?= $arResult[\'DETAIL_TEXT\']; ?></p>\r\n    <?php endif; ?>\r\n    </div>\r\n<?php endif; ?>\r\n\r\n<script type=\"text/javascript\">\r\n// добавление в список просмотренных товаров\r\nvar viewedCounter = {\r\n    path: \'/bitrix/components/bitrix/catalog.element/ajax.php\',\r\n    params: {\r\n        AJAX: \'Y\',\r\n        SITE_ID: \"<?= SITE_ID; ?>\",\r\n        PRODUCT_ID: \"<?= $arResult[\'ID\']; ?>\",\r\n        PARENT_ID: \"<?= $arResult[\'ID\']; ?>\"\r\n    }\r\n};\r\nBX.ready(\r\n    BX.defer(function(){\r\n        BX.ajax.post(\r\n            viewedCounter.path,\r\n            viewedCounter.params\r\n        );\r\n    })\r\n);\r\n</script>\r\n[/phtml]\r\n\r\n<h2>Раздел каталога</h2>\r\n<p>\r\nФайл <code>local/templates/catalog/components/bitrix/catalog/.default/section.php</code> без изменений, как в поставке Битрикс:\r\n</p>\r\n[phtml]\r\n<?php\r\nif(!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n\r\nuse Bitrix\\Main\\Loader;\r\nuse Bitrix\\Main\\ModuleManager;\r\n\r\n$this->setFrameMode(true);\r\n$this->addExternalCss(\"/bitrix/css/main/bootstrap.css\");\r\n\r\nif (!isset($arParams[\'FILTER_VIEW_MODE\']) || (string)$arParams[\'FILTER_VIEW_MODE\'] == \'\')\r\n    $arParams[\'FILTER_VIEW_MODE\'] = \'VERTICAL\';\r\n$arParams[\'USE_FILTER\'] = (isset($arParams[\'USE_FILTER\']) && $arParams[\'USE_FILTER\'] == \'Y\' ? \'Y\' : \'N\');\r\n\r\n$isVerticalFilter = (\'Y\' == $arParams[\'USE_FILTER\'] && $arParams[\"FILTER_VIEW_MODE\"] == \"VERTICAL\");\r\n$isSidebar = ($arParams[\"SIDEBAR_SECTION_SHOW\"] == \"Y\" && isset($arParams[\"SIDEBAR_PATH\"]) && !empty($arParams[\"SIDEBAR_PATH\"]));\r\n$isFilter = ($arParams[\'USE_FILTER\'] == \'Y\');\r\n\r\nif ($isFilter) {\r\n    $arFilter = array(\r\n        \"IBLOCK_ID\" => $arParams[\"IBLOCK_ID\"],\r\n        \"ACTIVE\" => \"Y\",\r\n        \"GLOBAL_ACTIVE\" => \"Y\",\r\n    );\r\n    if (0 < intval($arResult[\"VARIABLES\"][\"SECTION_ID\"]))\r\n        $arFilter[\"ID\"] = $arResult[\"VARIABLES\"][\"SECTION_ID\"];\r\n    elseif (\'\' != $arResult[\"VARIABLES\"][\"SECTION_CODE\"])\r\n        $arFilter[\"=CODE\"] = $arResult[\"VARIABLES\"][\"SECTION_CODE\"];\r\n\r\n    $obCache = new CPHPCache();\r\n    if ($obCache->InitCache(36000, serialize($arFilter), \"/iblock/catalog\")) {\r\n        $arCurSection = $obCache->GetVars();\r\n    } elseif ($obCache->StartDataCache()) {\r\n        $arCurSection = array();\r\n        if (Loader::includeModule(\"iblock\")) {\r\n            $dbRes = CIBlockSection::GetList(array(), $arFilter, false, array(\"ID\"));\r\n\r\n            if(defined(\"BX_COMP_MANAGED_CACHE\")) {\r\n                global $CACHE_MANAGER;\r\n                $CACHE_MANAGER->StartTagCache(\"/iblock/catalog\");\r\n\r\n                if ($arCurSection = $dbRes->Fetch())\r\n                    $CACHE_MANAGER->RegisterTag(\"iblock_id_\".$arParams[\"IBLOCK_ID\"]);\r\n\r\n                $CACHE_MANAGER->EndTagCache();\r\n            } else {\r\n                if(!$arCurSection = $dbRes->Fetch())\r\n                    $arCurSection = array();\r\n            }\r\n        }\r\n        $obCache->EndDataCache($arCurSection);\r\n    }\r\n    if (!isset($arCurSection))\r\n        $arCurSection = array();\r\n}\r\n?>\r\n<div class=\"row\">\r\n<?\r\nif ($isVerticalFilter)\r\n    include($_SERVER[\"DOCUMENT_ROOT\"].\"/\".$this->GetFolder().\"/section_vertical.php\");\r\nelse\r\n    include($_SERVER[\"DOCUMENT_ROOT\"].\"/\".$this->GetFolder().\"/section_horizontal.php\");\r\n?>\r\n</div>\r\n[/phtml]\r\n<p>\r\nКак видите, сначала идет подготовка к подключению фильтра, а потом подключается один из файлов <code>section_vertical.php</code> или <code>section_horizontal.php</code>. Особенных отличий в них нет, только представление. Поэтому можем упростить и перенести в один файл:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/catalog/components/bitrix/catalog/.default/section.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n\r\nuse Bitrix\\Main\\Loader;\r\nuse Bitrix\\Main\\ModuleManager;\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<?php\r\n// Выводим дочерние категории текущего раздела\r\n$APPLICATION->IncludeComponent(\r\n    \"bitrix:catalog.section.list\",\r\n    \"\",\r\n    array(\r\n        \"IBLOCK_TYPE\" => $arParams[\"IBLOCK_TYPE\"],\r\n        \"IBLOCK_ID\" => $arParams[\"IBLOCK_ID\"],\r\n        \"SECTION_ID\" => $arResult[\"VARIABLES\"][\"SECTION_ID\"],\r\n        \"SECTION_CODE\" => $arResult[\"VARIABLES\"][\"SECTION_CODE\"],\r\n        \"CACHE_TYPE\" => $arParams[\"CACHE_TYPE\"],\r\n        \"CACHE_TIME\" => $arParams[\"CACHE_TIME\"],\r\n        \"CACHE_GROUPS\" => $arParams[\"CACHE_GROUPS\"],\r\n        \"COUNT_ELEMENTS\" => $arParams[\"SECTION_COUNT_ELEMENTS\"],\r\n        \"TOP_DEPTH\" => $arParams[\"SECTION_TOP_DEPTH\"],\r\n        \"SECTION_URL\" => $arResult[\"FOLDER\"].$arResult[\"URL_TEMPLATES\"][\"section\"],\r\n        \"VIEW_MODE\" => $arParams[\"SECTIONS_VIEW_MODE\"],\r\n        \"SHOW_PARENT_NAME\" => $arParams[\"SECTIONS_SHOW_PARENT_NAME\"],\r\n        \"HIDE_SECTION_NAME\" => (isset($arParams[\"SECTIONS_HIDE_SECTION_NAME\"]) ? $arParams[\"SECTIONS_HIDE_SECTION_NAME\"] : \"N\"),\r\n        \"ADD_SECTIONS_CHAIN\" => (isset($arParams[\"ADD_SECTIONS_CHAIN\"]) ? $arParams[\"ADD_SECTIONS_CHAIN\"] : \'\')\r\n    ),\r\n    $component,\r\n    array(\"HIDE_ICONS\" => \"Y\")\r\n);\r\n?>\r\n\r\n<?php\r\n    // Выводим товары текущего раздела\r\n    $intSectionID = $APPLICATION->IncludeComponent(\r\n        \"bitrix:catalog.section\",\r\n        \"\",\r\n        array(\r\n            // параметры компонента\r\n        ),\r\n        $component\r\n    );\r\n?>\r\n[/phtml]\r\n\r\n<h3>Компонент bitrix:catalog.section</h3>\r\n<p>\r\nКомпонент «<a href=\"https://dev.1c-bitrix.ru/user_help/components/content/catalog/catalog_section.php\">Элементы раздела</a>» выводит список элементов раздела с указанным набором свойств. Компонент стандартный, в визуальном редакторе компонент расположен по пути «<em>Контент • Каталог • Элементы раздела</em>».\r\n</p>\r\n\r\n<h3>Шаблон компонента bitrix:catalog.section</h3>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/catalog/components/bitrix/catalog.section/.default/template.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED !== true) die();\r\n\r\nuse \\Bitrix\\Main\\Localization\\Loc;\r\n\r\n/**\r\n * @global CMain $APPLICATION\r\n * @var array $arParams\r\n * @var array $arResult\r\n * @var CatalogSectionComponent $component\r\n * @var CBitrixComponentTemplate $this\r\n * @var string $templateName\r\n * @var string $componentPath\r\n */\r\n\r\n$this->setFrameMode(true);\r\n\r\n/*\r\n * Параметры постраничной навигации\r\n */\r\nif (!empty($arResult[\'NAV_RESULT\'])) {\r\n    $navParams =  array(\r\n        \'NavPageCount\' => $arResult[\'NAV_RESULT\']->NavPageCount,\r\n        \'NavPageNomer\' => $arResult[\'NAV_RESULT\']->NavPageNomer,\r\n        \'NavNum\' => $arResult[\'NAV_RESULT\']->NavNum\r\n    );\r\n} else {\r\n    $navParams = array(\r\n        \'NavPageCount\' => 1,\r\n        \'NavPageNomer\' => 1,\r\n        \'NavNum\' => $this->randString()\r\n    );\r\n}\r\n\r\n$showTopPager = false;\r\n$showBottomPager = false;\r\n\r\nif ($arParams[\'PAGE_ELEMENT_COUNT\'] > 0 && $navParams[\'NavPageCount\'] > 1) {\r\n    $showTopPager = $arParams[\'DISPLAY_TOP_PAGER\'];\r\n    $showBottomPager = $arParams[\'DISPLAY_BOTTOM_PAGER\'];\r\n}\r\n?>\r\n\r\n<?php if ($showTopPager): /* постраничная навигация сверху */ ?>\r\n    <div class=\"pager\">\r\n        <?= $arResult[\'NAV_STRING\']; ?>\r\n    </div>\r\n<?php endif; ?>\r\n\r\n<?php if ($arParams[\'HIDE_SECTION_DESCRIPTION\'] !== \'Y\'): /* описание раздела каталога */ ?>\r\n    <p class=\"section-description\"><?= $arResult[\'DESCRIPTION\']; ?></p>\r\n<?php endif; ?>\r\n\r\n<?php if (!empty($arResult[\'ITEMS\']) && !empty($arResult[\'ITEM_ROWS\'])): /* список товаров */ ?>\r\n    <div class=\"section-products\">\r\n        <?php foreach ($arResult[\'ITEMS\'] as $item) {\r\n            $uniqueId = $item[\'ID\'].\'_\'.md5($this->randString().$component->getAction());\r\n            $areaIds[$item[\'ID\']] = $this->GetEditAreaId($uniqueId);\r\n            $this->AddEditAction($uniqueId, $item[\'EDIT_LINK\'], $elementEdit);\r\n            $this->AddDeleteAction($uniqueId, $item[\'DELETE_LINK\'], $elementDelete, $elementDeleteParams);\r\n            $APPLICATION->IncludeComponent(\r\n                \'bitrix:catalog.item\',\r\n                \'\',\r\n                array(\r\n                    \'RESULT\' => array(\r\n                        \'ITEM\' => $item,\r\n                        \'AREA_ID\' => $areaIds[$item[\'ID\']],\r\n                        \'TYPE\' => \'CARD\',\r\n                        \'BIG_LABEL\' => \'N\',\r\n                        \'BIG_DISCOUNT_PERCENT\' => \'N\',\r\n                        \'BIG_BUTTONS\' => \'Y\',\r\n                        \'SCALABLE\' => \'N\'\r\n                    ),\r\n                ),\r\n                $component,\r\n                array(\'HIDE_ICONS\' => \'Y\')\r\n            );\r\n        }\r\n        ?>\r\n    </div>\r\n<?php endif; ?>\r\n\r\n<?php if ($showBottomPager): /* постраничная навигация снизу */ ?>\r\n    <div class=\"pager\">\r\n        <?= $arResult[\'NAV_STRING\']; ?>\r\n    </div>\r\n<?php endif; ?>\r\n[/phtml]\r\n\r\n<h3>Шаблон компонента bitrix:catalog.item</h3>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/catalog/components/bitrix/catalog.item/.default/template.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED !== true) die();\r\n\r\nuse \\Bitrix\\Main;\r\n\r\n/**\r\n * @global CMain $APPLICATION\r\n * @var array $arParams\r\n * @var array $arResult\r\n * @var CatalogProductsViewedComponent $component\r\n * @var CBitrixComponentTemplate $this\r\n * @var string $templateName\r\n * @var string $componentPath\r\n * @var string $templateFolder\r\n */\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<?php if (isset($arResult[\'ITEM\'])): ?>\r\n    <div>\r\n        <?php\r\n        $documentRoot = Main\\Application::getDocumentRoot();\r\n        $templatePath = strtolower($arResult[\'TYPE\']).\'/template.php\';\r\n        $file = new Main\\IO\\File($documentRoot.$templateFolder.\'/\'.$templatePath);\r\n        if ($file->isExists()) {\r\n            include($file->getPath()); // подключаем ./card/template.php\r\n        }\r\n        ?>\r\n    </div>\r\n<?php endif; ?>\r\n[/phtml]\r\n\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/templates/catalog/components/bitrix/catalog.item/.default/card/template.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED !== true) die();\r\n\r\nuse \\Bitrix\\Main\\Localization\\Loc;\r\n?>\r\n\r\n<a href=\"<?= $arResult[\'ITEM\'][\'DETAIL_PAGE_URL\']; ?>\">\r\n    <img src=\"<?= $arResult[\'ITEM\'][\'PREVIEW_PICTURE\'][\'SRC\']; ?>\"\r\n         alt=\"<?= $arResult[\'ITEM\'][\'NAME\']; ?>\" title=\"<?= $arResult[\'ITEM\'][\'NAME\']; ?>\" />\r\n</a>\r\n<p>\r\n    <a href=\"<?= $arResult[\'ITEM\'][\'DETAIL_PAGE_URL\']; ?>\" title=\"<?= $arResult[\'ITEM\'][\'NAME\']; ?>\">\r\n        <?= $arResult[\'ITEM\'][\'NAME\']; ?>\r\n    </a>\r\n</p>\r\n[/phtml]\r\n\r\n<p>\r\n<a href=\"/files/blog/176/1.jpg\" class=\"zoom\"><img src=\"/files/blog/176/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<div class=\"post-scriptum\">\r\nЗла не хватает на говно-кодеров из Битрикс — ни одной строчки комментария! Мы тут облегчились, а вы разгребайте.\r\n</div>','2018-08-06 15:20:23',1),(179,17,'Битрикс. Настройки для торговых предложений','','','CMS, Web-разработка, Битрикс, ИнтернетМагазин, КаталогТоваров, Компонент, Модуль, Настройка','Рассмотрим минимальные настройки для комплексного компонента «Каталог», которые обязательно должны быть выполнены, чтобы на сайте корректно отображались товары с торговыми предложениями. В параметре «Типы цен» секции «Цены» должны быть отмечены используемые в каталоге товаров типы цен.','<p>\r\nРассмотрим минимальные настройки для комплексного компонента «Каталог», которые обязательно должны быть выполнены, чтобы на сайте корректно отображались товары с торговыми предложениями.\r\n</p>\r\n<p>\r\nВ параметре «Типы цен» секции «Цены» должны быть отмечены используемые в каталоге товаров типы цен:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/179/1.png\" class=\"zoom\"><img src=\"/files/blog/179/1.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВ секции «Внешний вид» необходимо выбрать свойства, по которым ведется отбор предложений:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/179/2.png\" class=\"zoom\"><img src=\"/files/blog/179/2.png\" alt=\"\" /></a>\r\n</p>\r\n<div class=\"note\">\r\nОтбор торговых предложений может выполняться только по свойствам типа Список, Справочник и Привязка к элементам, причем они не должны быть множественными.\r\n</div>\r\n<p>\r\nВ секции «Настройки детального просмотра» в параметре «Свойства предложений» следует отметить свойства торговых предложений, которые должны отображаться при просмотре детальной информации о товаре. Причем, среди отмеченных свойств обязательно должны быть все те свойства, которые используются для отбора предложений (см. выше):\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/179/3.png\" class=\"zoom\"><img src=\"/files/blog/179/3.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВ секции «Добавление в корзину» следует отметить опцию «Разрешить указание количества товара», чтобы покупателям была доступна возможность изменять покупаемое количество товара:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/179/4.png\" class=\"zoom\"><img src=\"/files/blog/179/4.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВ секции «Настройки списка» следует указать хотя бы одно свойство торговых предложений, чтобы в списке товаров раздела правильно отображалась анонсовая информация:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/179/5.png\" class=\"zoom\"><img src=\"/files/blog/179/5.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nАналогично, в секции «Настройки top-а» следует задать свойства торговых предложений, чтобы в top-е также правильно отображались данные по товарам:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/179/6.png\" class=\"zoom\"><img src=\"/files/blog/179/6.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЕсли после этих настроек для товаров показывается сообщение «Нет в наличии», проверьте настройки количественного учета модуля «Торговый каталог»: «<em>Настройки • Настройки продукта • Настройки модулей • Торговый каталог</em>».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/179/7.png\" class=\"zoom\"><img src=\"/files/blog/179/7.png\" alt=\"\" /></a>\r\n</p>','2018-08-13 11:16:45',1),(177,6,'Сервис DaData — быстрый ввод контактных данных','','','JSON, JavaScript, PHP, Python, Web-разработка, jQuery','Сервис DaData позволяет создавать подсказки при заполнении формы на сайте: при при вводе адреса, ФИО, организации и банковских реквизитов. Кроме того, есть возможность автоматической проверки и исправления контактных данных (ФИО, адресов, телефонов, email, паспортов).','<p>\r\nСервис DaData позволяет создавать подсказки при заполнении формы на сайте: при при вводе адреса, ФИО, организации и банковских реквизитов. Кроме того, есть возможность автоматической проверки и исправления контактных данных (ФИО, адресов, телефонов, email, паспортов).\r\n</p>\r\n<p>\r\nЧтобы использовать возможности сервиса, надо зарегистрироваться и получить API-ключ.\r\n</p>\r\n\r\n<h2>PHP</h2>\r\n<p>\r\nПолучаем данные юридического лица по ИНН:\r\n</p>\r\n[php]\r\n<?php\r\nclass Suggestions {\r\n    private $url,\r\n            $token;\r\n    \r\n    public function __construct($token, $url = \'https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/\') {\r\n        $this->token = $token;\r\n        $this->url = $url;\r\n    }\r\n    \r\n    public function suggest($resource, $data) {\r\n        $options = array(\r\n            \'http\' => array(\r\n                \'method\'  => \'POST\',\r\n                \'header\'  => array(\r\n                    \'Content-type: application/json\',\r\n                    \'Accept: application/json\',\r\n                    \'Authorization: Token \' . $this->token,\r\n                ),\r\n                \'content\' => json_encode($data),\r\n            ),\r\n        );\r\n        $context = stream_context_create($options);\r\n        $result = file_get_contents($this->url . $resource, false, $context);\r\n        return json_decode($result);\r\n    }    \r\n}\r\n\r\n// получаем данные юр.лица по ИНН\r\n$token = \'API_KEY\';\r\n$dadata = new Suggestions($token);\r\n$query = \'7702680818\';\r\n$data = array(\r\n    \'query\' => $query\r\n);\r\n$resp = $dadata->suggest(\"party\", $data);\r\n\r\n// название компании\r\nprint \'Название: \' . $resp->suggestions[0]->value . \"<br/>\\n\";\r\n// КПП\r\nprint \'КПП: \' . $resp->suggestions[0]->data->kpp . \"<br/>\\n\";\r\n// ОГРН\r\nprint \'ОГРН: \' . $resp->suggestions[0]->data->ogrn . \"<br/>\\n\";\r\n// ген.директор\r\nprint \'Ген.директор: \' . $resp->suggestions[0]->data->management->name . \"<br/>\\n\";\r\n// адрес\r\nprint \'Юр.адрес: \' . $resp->suggestions[0]->data->address->value . \"<br/>\\n\";\r\n[/php]\r\n<p>\r\nСервис возвращает данные в формате JSON:\r\n</p>\r\n[json]\r\n{\"suggestions\":\r\n    [\r\n        {\r\n            \"value\":\"ООО \\\"ТД ТИНКО\\\"\",\r\n            \"unrestricted_value\":\"ООО \\\"ТД ТИНКО\\\"\",\r\n            \"data\": {\r\n                \"kpp\":\"770201001\",\r\n                \"capital\":null,\r\n                \"management\": {\r\n                    \"name\":\"Клещенок Геннадий Степанович\",\r\n                    \"post\":\"Генеральный директор\"\r\n                },\r\n                \"founders\":null,\r\n                \"managers\":null,\r\n                \"branch_type\":\"MAIN\",\r\n                \"branch_count\":0,\r\n                \"source\":null,\r\n                \"qc\":null,\r\n                \"hid\":\"92208432eac7516308bed2d05be360f092e41f10f83d8bf13db9829e6e7f4026\",\r\n                \"type\":\"LEGAL\",\r\n                \"state\": {\r\n                    \"status\":\"ACTIVE\",\r\n                    \"actuality_date\":1523145600000,\r\n                    \"registration_date\":1217462400000,\r\n                    \"liquidation_date\":null\r\n                },\r\n                \"opf\": {\r\n                    \"type\":\"2014\",\r\n                    \"code\":\"12300\",\r\n                    \"full\":\"Общество с ограниченной ответственностью\",\r\n                    \"short\":\"ООО\"\r\n                },\r\n                \"name\": {\r\n                    \"full_with_opf\":\"ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ \\\"ТОРГОВЫЙ ДОМ ТИНКО\\\"\",\r\n                    \"short_with_opf\":\"ООО \\\"ТД ТИНКО\\\"\",\r\n                    \"latin\":null,\r\n                    \"full\":\"ТОРГОВЫЙ ДОМ ТИНКО\",\r\n                    \"short\":\"ТД ТИНКО\"\r\n                },\r\n                \"inn\":\"7702680818\",\r\n                \"ogrn\":\"1087746895510\",\r\n                \"okpo\":null,\r\n                \"okved\":\"46.43\",\r\n                \"okveds\":null,\r\n                \"authorities\":null,\r\n                \"documents\":null,\r\n                \"licenses\":null,\r\n                \"address\": {\r\n                    \"value\":\"г Москва, ул Щепкина, д 47 стр 1\",\r\n                    \"unrestricted_value\":\"г Москва, Мещанский р-н, ул Щепкина, д 47 стр 1\",\r\n                    \"data\": {\r\n                        \"postal_code\":\"129110\",\r\n                        \"country\":\"Россия\",\r\n                        \"region_fias_id\":\"0c5b2444-70a0-4932-980c-b4dc0d3f02b5\",\r\n                        \"region_kladr_id\":\"7700000000000\",\r\n                        \"region_with_type\":\"г Москва\",\r\n                        \"region_type\":\"г\",\r\n                        \"region_type_full\":\"город\",\r\n                        \"region\":\"Москва\",\r\n                        \"area_fias_id\":null,\r\n                        \"area_kladr_id\":null,\r\n                        \"area_with_type\":null,\r\n                        \"area_type\":null,\r\n                        \"area_type_full\":null,\r\n                        \"area\":null,\r\n                        \"city_fias_id\":\"0c5b2444-70a0-4932-980c-b4dc0d3f02b5\",\r\n                        \"city_kladr_id\":\"7700000000000\",\r\n                        \"city_with_type\":\"г Москва\",\r\n                        \"city_type\":\"г\",\r\n                        \"city_type_full\":\"город\",\r\n                        \"city\":\"Москва\",\r\n                        \"city_area\":\"Центральный\",\r\n                        \"city_district_fias_id\":null,\r\n                        \"city_district_kladr_id\":null,\r\n                        \"city_district_with_type\":\"Мещанский р-н\",\r\n                        \"city_district_type\":\"р-н\",\r\n                        \"city_district_type_full\":\"район\",\r\n                        \"city_district\":\"Мещанский\",\r\n                        \"settlement_fias_id\":null,\r\n                        \"settlement_kladr_id\":null,\r\n                        \"settlement_with_type\":null,\r\n                        \"settlement_type\":null,\r\n                        \"settlement_type_full\":null,\r\n                        \"settlement\":null,\r\n                        \"street_fias_id\":\"52b67c53-d0a5-4ad9-b3f1-294c5dd7a41f\",\r\n                        \"street_kladr_id\":\"77000000000317100\",\r\n                        \"street_with_type\":\"ул Щепкина\",\r\n                        \"street_type\":\"ул\",\r\n                        \"street_type_full\":\"улица\",\r\n                        \"street\":\"Щепкина\",\r\n                        \"house_fias_id\":\"b01844e6-103f-4564-9ffe-b444f545398e\",\r\n                        \"house_kladr_id\":\"7700000000031710033\",\r\n                        \"house_type\":\"д\",\r\n                        \"house_type_full\":\"дом\",\r\n                        \"house\":\"47\",\r\n                        \"block_type\":\"стр\",\r\n                        \"block_type_full\":\"строение\",\r\n                        \"block\":\"1\",\r\n                        \"flat_type\":null,\r\n                        \"flat_type_full\":null,\r\n                        \"flat\":null,\r\n                        \"flat_area\":null,\r\n                        \"square_meter_price\":null,\r\n                        \"flat_price\":null,\r\n                        \"postal_box\":null,\r\n                        \"fias_id\":\"b01844e6-103f-4564-9ffe-b444f545398e\",\r\n                        \"fias_code\":\"77000000000000031710033\",\r\n                        \"fias_level\":\"8\",\r\n                        \"fias_actuality_state\":\"0\",\r\n                        \"kladr_id\":\"7700000000031710033\",\r\n                        \"capital_marker\":\"0\",\r\n                        \"okato\":\"45286570000\",\r\n                        \"oktmo\":\"45379000\",\r\n                        \"tax_office\":\"7702\",\r\n                        \"tax_office_legal\":\"7702\",\r\n                        \"timezone\":null,\r\n                        \"geo_lat\":\"55.7813958\",\r\n                        \"geo_lon\":\"37.6286469\",\r\n                        \"beltway_hit\":null,\r\n                        \"beltway_distance\":null,\r\n                        \"metro\":null,\r\n                        \"qc_geo\":\"0\",\r\n                        \"qc_complete\":null,\r\n                        \"qc_house\":null,\r\n                        \"history_values\":null,\r\n                        \"unparsed_parts\":null,\r\n                        \"source\":\"129110, ГОРОД МОСКВА, УЛИЦА ЩЕПКИНА, 47, СТР.1\",\r\n                        \"qc\":null\r\n                    }\r\n                },\r\n                \"phones\":null,\r\n                \"emails\":null,\r\n                \"ogrn_date\":1217462400000,\r\n                \"okved_type\":\"2014\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n[/json]\r\n<p>\r\nЧтобы получить ответ в формате XML, надо указать HTTP-заголовки:\r\n</p>\r\n[code]\r\nContent-Type: application/xml\r\nAccept: application/xml\r\n[/code]\r\n<p>\r\nи тело запроса передавать в XML:\r\n</p>\r\n[xml]\r\n<req>\r\n  <query>7702680818</query>\r\n</req>\r\n[/xml]\r\n[php]\r\n<?php\r\nclass Suggestions {\r\n    private $url,\r\n            $token;\r\n    \r\n    public function __construct($token, $url = \'https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/\') {\r\n        $this->token = $token;\r\n        $this->url = $url;\r\n    }\r\n    \r\n    public function suggest($resource, $data) {\r\n        $options = array(\r\n            \'http\' => array(\r\n                \'method\'  => \'POST\',\r\n                \'header\'  => array(\r\n                    \'Content-Type: application/xml\',\r\n                    \'Accept: application/xml\',\r\n                    \'Authorization: Token \' . $this->token,\r\n                ),\r\n                \'content\' => $data,\r\n            ),\r\n        );\r\n        $context = stream_context_create($options);\r\n        return file_get_contents($this->url . $resource, false, $context);\r\n    }    \r\n}\r\n\r\n$token = \'API_KEY\';\r\n$dadata = new Suggestions($token);\r\n$query = \'7702680818\';\r\n$data = \'<req><query>\' . $query . \'</query></req>\';\r\n$resp = $dadata->suggest(\"party\", $data);\r\necho $resp;\r\n[/php]\r\n[xml]\r\n<SuggestResponse>\r\n    <suggestions>\r\n        <value>ООО \"ТД ТИНКО\"</value>\r\n        <unrestricted_value>ООО \"ТД ТИНКО\"</unrestricted_value>\r\n        <data>\r\n            <kpp>770201001</kpp>\r\n            <capital/>\r\n            <management>\r\n                <name>Клещенок Геннадий Степанович</name>\r\n                <post>Генеральный директор</post>\r\n            </management>\r\n            <founders/>\r\n            <managers/>\r\n            <branch_type>MAIN</branch_type>\r\n            <branch_count>0</branch_count>\r\n            <source/>\r\n            <qc/>\r\n            <hid>92208432eac7516308bed2d05be360f092e41f10f83d8bf13db9829e6e7f4026</hid>\r\n            <type>LEGAL</type>\r\n            <state>\r\n                <status>ACTIVE</status>\r\n                <actuality_date>1523145600000</actuality_date>\r\n                <registration_date>1217462400000</registration_date>\r\n                <liquidation_date/>\r\n            </state>\r\n            <opf>\r\n                <type>2014</type>\r\n                <code>12300</code>\r\n                <full>Общество с ограниченной ответственностью</full>\r\n                <short>ООО</short>\r\n            </opf>\r\n            <name>\r\n                <full_with_opf>ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ \"ТОРГОВЫЙ ДОМ ТИНКО\"</full_with_opf>\r\n                <short_with_opf>ООО \"ТД ТИНКО\"</short_with_opf>\r\n                <latin/>\r\n                <full>ТОРГОВЫЙ ДОМ ТИНКО</full>\r\n                <short>ТД ТИНКО</short>\r\n            </name>\r\n            <inn>7702680818</inn>\r\n            <ogrn>1087746895510</ogrn>\r\n            <okpo/>\r\n            <okved>46.43</okved>\r\n            <okveds/>\r\n            <authorities/>\r\n            <documents/>\r\n            <licenses/>\r\n            <address>\r\n                <value>г Москва, ул Щепкина, д 47 стр 1</value>\r\n                <unrestricted_value>г Москва, Мещанский р-н, ул Щепкина, д 47 стр 1</unrestricted_value>\r\n                <data>\r\n                    <postal_code>129110</postal_code>\r\n                    <country>Россия</country>\r\n                    <region_fias_id>0c5b2444-70a0-4932-980c-b4dc0d3f02b5</region_fias_id>\r\n                    <region_kladr_id>7700000000000</region_kladr_id>\r\n                    <region_with_type>г Москва</region_with_type>\r\n                    <region_type>г</region_type>\r\n                    <region_type_full>город</region_type_full>\r\n                    <region>Москва</region>\r\n                    <area_fias_id/>\r\n                    <area_kladr_id/>\r\n                    <area_with_type/>\r\n                    <area_type/>\r\n                    <area_type_full/>\r\n                    <area/>\r\n                    <city_fias_id>0c5b2444-70a0-4932-980c-b4dc0d3f02b5</city_fias_id>\r\n                    <city_kladr_id>7700000000000</city_kladr_id>\r\n                    <city_with_type>г Москва</city_with_type>\r\n                    <city_type>г</city_type>\r\n                    <city_type_full>город</city_type_full>\r\n                    <city>Москва</city>\r\n                    <city_area>Центральный</city_area>\r\n                    <city_district_fias_id/>\r\n                    <city_district_kladr_id/>\r\n                    <city_district_with_type>Мещанский р-н</city_district_with_type>\r\n                    <city_district_type>р-н</city_district_type>\r\n                    <city_district_type_full>район</city_district_type_full>\r\n                    <city_district>Мещанский</city_district>\r\n                    <settlement_fias_id/>\r\n                    <settlement_kladr_id/>\r\n                    <settlement_with_type/>\r\n                    <settlement_type/>\r\n                    <settlement_type_full/>\r\n                    <settlement/>\r\n                    <street_fias_id>52b67c53-d0a5-4ad9-b3f1-294c5dd7a41f</street_fias_id>\r\n                    <street_kladr_id>77000000000317100</street_kladr_id>\r\n                    <street_with_type>ул Щепкина</street_with_type>\r\n                    <street_type>ул</street_type>\r\n                    <street_type_full>улица</street_type_full>\r\n                    <street>Щепкина</street>\r\n                    <house_fias_id>b01844e6-103f-4564-9ffe-b444f545398e</house_fias_id>\r\n                    <house_kladr_id>7700000000031710033</house_kladr_id>\r\n                    <house_type>д</house_type>\r\n                    <house_type_full>дом</house_type_full>\r\n                    <house>47</house>\r\n                    <block_type>стр</block_type>\r\n                    <block_type_full>строение</block_type_full>\r\n                    <block>1</block>\r\n                    <flat_type/>\r\n                    <flat_type_full/>\r\n                    <flat/>\r\n                    <flat_area/>\r\n                    <square_meter_price/>\r\n                    <flat_price/>\r\n                    <postal_box/>\r\n                    <fias_id>b01844e6-103f-4564-9ffe-b444f545398e</fias_id>\r\n                    <fias_code>77000000000000031710033</fias_code>\r\n                    <fias_level>8</fias_level>\r\n                    <fias_actuality_state>0</fias_actuality_state>\r\n                    <kladr_id>7700000000031710033</kladr_id>\r\n                    <capital_marker>0</capital_marker>\r\n                    <okato>45286570000</okato>\r\n                    <oktmo>45379000</oktmo>\r\n                    <tax_office>7702</tax_office>\r\n                    <tax_office_legal>7702</tax_office_legal>\r\n                    <timezone/>\r\n                    <geo_lat>55.7813958</geo_lat>\r\n                    <geo_lon>37.6286469</geo_lon>\r\n                    <beltway_hit/>\r\n                    <beltway_distance/>\r\n                    <metro/>\r\n                    <qc_geo>0</qc_geo>\r\n                    <qc_complete/>\r\n                    <qc_house/>\r\n                    <history_values/>\r\n                    <unparsed_parts/>\r\n                    <source>129110, ГОРОД МОСКВА, УЛИЦА ЩЕПКИНА, 47, СТР.1</source>\r\n                    <qc/>\r\n                </data>\r\n            </address>\r\n            <phones/>\r\n            <emails/>\r\n            <ogrn_date>1217462400000</ogrn_date>\r\n            <okved_type>2014</okved_type>\r\n        </data>\r\n    </suggestions>\r\n</SuggestResponse>\r\n[/xml]\r\n\r\n<h2>Python</h2>\r\n<p>\r\nПолучаем данные юридического лица по ИНН:\r\n</p>\r\n[python]\r\nimport json\r\nimport requests\r\n\r\nAPI_KEY = \'API_KEY\'\r\nBASE_URL = \'https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/\'\r\n\r\ndef suggest(query, resource):\r\n    url = BASE_URL + resource\r\n    headers = {\r\n        \'Authorization\': \'Token \' + API_KEY,\r\n        \'Content-Type\': \'application/json\',\r\n    }\r\n    data = {\r\n        \'query\': query\r\n    }\r\n    res = requests.post(url, data=json.dumps(data), headers=headers)\r\n    return res.json()\r\n\r\n# получаем данные юр.лица по ИНН\r\ndata = suggest(\'7702680818\', \'party\')\r\n\r\n# название компании\r\nprint(\'Название: \' + data[\'suggestions\'][0][\'value\'])\r\n# КПП\r\nprint(\'КПП: \' + data[\'suggestions\'][0][\'data\'][\'kpp\'])\r\n# ОГРН\r\nprint(\'ОГРН: \' + data[\'suggestions\'][0][\'data\'][\'ogrn\'])\r\n# ген.директор\r\nprint(\'Ген.директор: \' + data[\'suggestions\'][0][\'data\'][\'management\'][\'name\'])\r\n# юр.адрес\r\nprint(\'Юр.адрес: \' + data[\'suggestions\'][0][\'data\'][\'address\'][\'value\'])\r\n[/python]\r\n\r\n<h2>JavaScript</h2>\r\n<p>\r\nПодсказки при вводе с использованием jQuery-плагина от DaData:\r\n</p>\r\n[html]\r\n<!DOCTYPE html>\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"ru\" lang=\"ru\">\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n<title>Сервис DADATA.RU — быстрый ввод контактных данных</title>\r\n<link href=\"style.css\" type=\"text/css\" rel=\"stylesheet\" />\r\n<link href=\"https://cdn.jsdelivr.net/npm/suggestions-jquery@18.6.0/dist/css/suggestions.min.css\"\r\n      type=\"text/css\" rel=\"stylesheet\" />\r\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\r\n<script type=\"text/javascript\"\r\n        src=\"https://cdn.jsdelivr.net/npm/suggestions-jquery@18.6.0/dist/js/jquery.suggestions.min.js\"></script>\r\n<script type=\"text/javascript\" src=\"script.js\"></script>\r\n</head>\r\n<body>\r\n<form>\r\n    <div>\r\n        <span>Наименование</span>\r\n        <span><input type=\"text\" name=\"name\" value=\"\" /></span>\r\n    </div>\r\n    <div>\r\n        <span>Ген.директор</span>\r\n        <span><input type=\"text\" name=\"ceo\" value=\"\" /></span>\r\n    </div>\r\n    <div>\r\n        <span>ИНН</span>\r\n        <span><input type=\"text\" name=\"inn\" value=\"\" /></span>\r\n    </div>\r\n    <div>\r\n        <span>ОГРН</span>\r\n        <span><input type=\"text\" name=\"ogrn\" value=\"\" /></span>\r\n    </div>\r\n    <div>\r\n        <span>Юр.адрес</span>\r\n        <span><input type=\"text\" name=\"address\" value=\"\" /></span>\r\n    </div>\r\n    <input type=\"submit\" name=\"submit\" value=\"Отправить\" />\r\n    <input type=\"reset\" name=\"reset\" value=\"Сбросить\" />\r\n</form>\r\n</body>\r\n</html>\r\n[/html]\r\n[js]\r\n$(document).ready(function() {\r\n    /*\r\n     * Подсказки для поля Наименование\r\n     */\r\n    $(\'input[name=\"name\"]\').suggestions({ // поиск по наименованию компании\r\n        token: \"API_KEY\",\r\n        type: \"PARTY\",\r\n        count: 5,\r\n        mobileWidth: 360,\r\n        // вызывается, когда пользователь выбирает одну из подсказок\r\n        onSelect: function(suggestion) {\r\n            // заполнем поле Ген.директор\r\n            if (suggestion.data.type === \'LEGAL\') { // юридическое лицо\r\n                $(\'input[name=\"ceo\"]\').val(suggestion.data.management.name);\r\n            }\r\n            if (suggestion.data.type === \'INDIVIDUAL\') { // индивидуальный предриниметель\r\n                $(\'input[name=\"ceo\"]\').val(suggestion.data.name.full);\r\n            }\r\n            // заполнем поле ИНН\r\n            $(\'input[name=\"inn\"]\').val(suggestion.data.inn);\r\n            // заполнем поле ОГРН\r\n            $(\'input[name=\"ogrn\"]\').val(suggestion.data.ogrn);\r\n            // заполнем поле юр.адрес\r\n            $(\'input[name=\"address\"]\').val(suggestion.data.address.value);\r\n        }\r\n    });\r\n\r\n    /*\r\n     * Подсказки для поля Ген.директор\r\n     */\r\n    $(\'input[name=\"ceo\"]\').suggestions({ // поиск по ФИО ген.директора\r\n        token: \"API_KEY\",\r\n        type: \"PARTY\",\r\n        count: 5,\r\n        mobileWidth: 360,\r\n        // вызывается, когда пользователь выбирает одну из подсказок\r\n        onSelect: function(suggestion) {\r\n            // заполнем поле Наименование\r\n            $(\'input[name=\"name\"]\').val(suggestion.value);\r\n            // заполнем поле Ген.директор\r\n            if (suggestion.data.type === \'LEGAL\') { // юридическое лицо\r\n                $(this).val(suggestion.data.management.name);\r\n            }\r\n            if (suggestion.data.type === \'INDIVIDUAL\') { // индивидуальный предриниматель\r\n                $(this).val(suggestion.data.name.full);\r\n            }\r\n            // заполнем поле ИНН\r\n            $(\'input[name=\"inn\"]\').val(suggestion.data.inn);\r\n            // заполнем поле ОГРН\r\n            $(\'input[name=\"ogrn\"]\').val(suggestion.data.ogrn);\r\n            // заполнем поле юр.адрес\r\n            $(\'input[name=\"address\"]\').val(suggestion.data.address.value);\r\n        }\r\n    });\r\n\r\n    /*\r\n     * Подсказки для поля ИНН\r\n     */\r\n    $(\'input[name=\"inn\"]\').suggestions({ // поиск по ИНН\r\n        token: \"API_KEY\",\r\n        type: \"PARTY\",\r\n        count: 5,\r\n        mobileWidth: 360,\r\n        // вызывается, когда пользователь выбирает одну из подсказок\r\n        onSelect: function(suggestion) {\r\n            // заполнем поле Наименование\r\n            $(\'input[name=\"name\"]\').val(suggestion.value);\r\n            // заполнем поле Ген.директор\r\n            if (suggestion.data.type === \'LEGAL\') { // юридическое лицо\r\n                $(\'input[name=\"ceo\"]\').val(suggestion.data.management.name);\r\n            }\r\n            if (suggestion.data.type === \'INDIVIDUAL\') { // индивидуальный предриниматель\r\n                $(\'input[name=\"ceo\"]\').val(suggestion.data.name.full);\r\n            }\r\n            // заполняем поле ИНН\r\n            $(this).val(suggestion.data.inn);\r\n            // заполнем поле ОГРН\r\n            $(\'input[name=\"ogrn\"]\').val(suggestion.data.ogrn);\r\n            // заполнем поле юр.адрес\r\n            $(\'input[name=\"address\"]\').val(suggestion.data.address.value);\r\n        }\r\n    });\r\n    \r\n    /*\r\n     * Подсказки для поля ОГРН\r\n     */\r\n    $(\'input[name=\"ogrn\"]\').suggestions({ // поиск по ОГРН\r\n        token: \"API_KEY\",\r\n        type: \"PARTY\",\r\n        count: 5,\r\n        mobileWidth: 360,\r\n        // вызывается, когда пользователь выбирает одну из подсказок\r\n        onSelect: function(suggestion) {\r\n            // заполнем поле Наименование\r\n            $(\'input[name=\"name\"]\').val(suggestion.value);\r\n            // заполнем поле Ген.директор\r\n            if (suggestion.data.type === \'LEGAL\') { // юридическое лицо\r\n                $(\'input[name=\"ceo\"]\').val(suggestion.data.management.name);\r\n            }\r\n            if (suggestion.data.type === \'INDIVIDUAL\') { // индивидуальный предриниматель\r\n                $(\'input[name=\"ceo\"]\').val(suggestion.data.name.full);\r\n            }\r\n            // заполнем поле ИНН\r\n            $(\'input[name=\"inn\"]\').val(suggestion.data.inn);\r\n            // заполнем поле ОГРН\r\n            $(this).val(suggestion.data.ogrn);\r\n            // заполнем поле юр.адрес\r\n            $(\'input[name=\"address\"]\').val(suggestion.data.address.value);\r\n        }\r\n    });\r\n});\r\n[/js]\r\n[css]\r\nbody {\r\n    margin: 10px;\r\n    padding: 10px;\r\n    font: 14px/1.2 Arial, sans-serif;\r\n}\r\nform {\r\n    width: 50%;\r\n}\r\n    form > div {\r\n        margin-bottom: 10px;\r\n    }\r\n        form > div > span {\r\n            display: block;\r\n        }\r\n            form > div > span > input[type=\"text\"] {\r\n                width: 100%;\r\n                padding: 5px;\r\n                box-sizing: border-box;\r\n            }\r\n    form > input[type=\"submit\"], form > input[type=\"reset\"] {\r\n        width: 30%;\r\n        padding: 5px 15px;\r\n    }\r\n[/css]\r\n<p>\r\n<a href=\"/files/blog/177/1.jpg\" class=\"zoom\"><img src=\"/files/blog/177/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/177/2.jpg\" class=\"zoom\"><img src=\"/files/blog/177/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/177/3.jpg\" class=\"zoom\"><img src=\"/files/blog/177/3.jpg\" alt=\"\" /></a>\r\n</p>','2018-07-30 09:20:26',1),(178,13,'Управление ключами SSH с помощью агента','','','Bash, CLI, Linux, SSH, ssh-agent, Ключ','Вводить парольную фразу каждый раз, когда используется ssh не очень удобно. Было бы намного проще ввести ее один раз при входе в систему, сохранить где-нибудь, а затем все время пользоваться. Такую задачу позволяет решить специальная программа — ssh-agent.','<p>\r\nВводить парольную фразу каждый раз, когда используется <code>ssh</code> не очень удобно. Было бы намного проще ввести ее один раз при входе в систему, сохранить где-нибудь, а затем все время пользоваться. Такую задачу позволяет решить специальная программа — <code>ssh-agent</code>.\r\n</p>\r\n<p>\r\nПрограмма <code>ssh-agent</code> хранит секретные ключи и, когда нужно, пользуется ими. Программа (например, <code>ssh</code>), когда ей понадобится воспользоваться секретным ключом, не делает этого сама, а обращается к <code>ssh</code>-агенту, который в свою очередь уже сам пользуется известными только ему данными о секретных ключах. Таким образом, секретные ключи не разглашаются никому, даже программам, принадлежащим самому пользователю.\r\n</p>\r\n<p>\r\nПрограмму <code>ssh-agent</code> можно использовать двумя разными способами:\r\n</p>\r\n[code]\r\nssh-agent [red]опции[/red]\r\n[/code]\r\n[code]\r\nssh-agent [red]опции[/red] [grn]команда[/grn]\r\n[/code]\r\n<p>\r\nВ обоих случаях <code>ssh-agent</code> создает файл-сокет с именем <code>/tmp/ssh-XXXXXXXX/agent.ppid</code>, через который осуществляется взаимодействие с агентом. Всем дочерним процессам агент при помощи переменных окружения <code>SSH_AUTH_SOCK</code> (в которой хранится имя файла-сокета) и <code>SSH_AGENT_PID</code> (в которой хранится идентификатор процесс агента) сообщает информацию о том, как с ним можно связаться.\r\n</p>\r\n<p>\r\nВ первом случае агент выдает информацию в виде, удобном для использования командным интерпретатором.\r\n</p>\r\n[bash]\r\nSSH_AUTH_SOCK=/tmp/ssh-XXt4pHNr/agent.5087; export SSH_AUTH_SOCK;\r\nSSH_AGENT_PID=5088; export SSH_AGENT_PID;\r\necho Agent pid 5088;\r\n[/bash]\r\n<p>\r\nПри указании ключа <code>-c</code> агент использует синтаксис C Shell. По умолчанию (и при явном указании ключа <code>-s</code>) используется синтаксис Bourne Shell. Эти переменные следует установить в текущем командном интерпретаторе, поэтому обычно вызов <code>ssh-agent</code> комбинируется с командой <code>eval</code>.\r\n</p>\r\n[cli]\r\n$ eval `ssh-agent`\r\nAgent pid 5088\r\n[/cli]\r\n<p>\r\nВо втором случае агент экспортирует значения переменных в среду окружения и порождает дочерний процесс, выполняя в нем команду. Достигается аналогичный результат, только при этом порождается дополнительный процесс.\r\n</p>\r\n<p>\r\nАгент работает до тех пор, пока не будет явно завершен сигналом либо вызовом\r\n[cli]\r\n$ ssh-agent -k\r\n[/cli]\r\n<p>\r\nВ последнем случае должна быть доступна переменная <code>SSH_AGENT_PID</code>, которая хранит <code>PID</code> агента. Поэтому команда вызванная не из дочернего процесса, например, из другой консоли, действовать не будет.\r\n</p>\r\n<p>\r\nПосле того как агент запущен и выполняется, необходимо сообщить ему информацию о ключах. Программа <code>ssh-add</code> добавляет и удаляет ключи у агента. Кроме того она позволяет блокировать агент, а также устанавливать время действия ключей.\r\n</p>\r\n<p>\r\nСинтаксис команды <code>ssh-add</code>:\r\n</p>\r\n[code]\r\nssh-add [red]опции[/red] [grn]файл[/grn]\r\n[/code]\r\n<p>\r\nПри вызове без параметров <code>ssh-add</code> сообщает агенту информацию о ключах из файлов <code>identity</code>, <code>id_dsa</code> и <code>id_rsa</code>. При этом программа спрашивает парольную фразу для каждого из ключей (или, если фразы совпадают, всего один раз). Ключ, для которого правильно была введена парольная фраза, передается агенту.\r\n</p>\r\n<p>\r\nЕсли в качестве аргумента командной строки указан файл, программа сообщает агенту информацию только о том ключе, который находится в файле.\r\n</p>\r\n<p>\r\nСписок известных агенту секретных ключей можно посмотреть той же командой <code>ssh-add</code> с ключом командной строки <code>-l</code>. Команда сообщит и отпечаток для каждого ключа.\r\n</p>\r\n[cli]\r\n$ ssh-add -l\r\n1024 ff:28:f1:2c:4c:f8:a0:80:10:f9:00:a1:c9:2d:55:73 user@host (RSA1)\r\n1024 46:88:64:82:a7:f9:aa:ea:3b:21:9e:aa:75:be:35:80 /home/user/.ssh/id_rsa (RSA)\r\n1024 18:dc:76:5d:e0:b0:e8:1a:97:48:45:00:e9:fc:b5:0f /home/user/.ssh/id_dsa (DSA)\r\n[/cli]\r\n<p>\r\nОпции командной строки программы <code>ssh-add</code>:\r\n</p>\r\n<ul>\r\n  <li><code>-l</code> — Показать список отпечатков известных агенту ключей</code>\r\n  <li><code>-L</code> — Показать информацию обо всех открытых ключах, соответствующих секретным ключам, известным <code>ssh-add</code></code>\r\n  <li><code>-d</code> — Удалить ключ у агента</code>\r\n  <li><code>-D</code> — Удалить все ключи у агента</code>\r\n  <li><code>-x</code> — Заблокировать агента паролем</code>\r\n  <li><code>-X</code> — Разблокировать агента</code>\r\n</ul>','2018-07-25 09:29:39',1),(180,17,'Битрикс. Как переместить фильтр в шаблоне','','','CMS, Web-разработка, Битрикс, Буферизация, КаталогТоваров, Компонент, УмныйФильтр, ШаблонКомпонента, ШаблонСайта','Описанный ниже метод основан на технологии буферизации. Буферизация позволяет манипулировать данными, которые формируют php скрипты на странице. Происходит следующее: перед тем как сервер отдаст сформированный HTML-код, мы с помощью определённых методов можем изменить расположение этого кода, переместив его выше или ниже.','<p>\r\nОписанный ниже метод основан на технологии буферизации вывода. Буферизация позволяет манипулировать данными, которые формируют php скрипты на странице. Проще говоря, происходит следующее: перед тем как сервер отдаст сформированный HTML-код, мы с помощью определённых методов можем изменить расположение этого кода, переместив его выше или ниже.\r\n</p>\r\n<p>\r\nВызов компонента умного фильтра <code>bitrix:catalog.smart.filter</code> должен происходить еще до вызова компонента списка товаров раздела <code>bitrix:catalog.section</code>. Это важно, так как сначала должен сформироваться массив для фильтрации, а затем он должен быть передан в компонент списка товаров.\r\n</p>\r\n[phtml]\r\n<div class=\"smart-filter\">\r\n    <?php\r\n    $APPLICATION->IncludeComponent(\r\n        \'bitrix:catalog.smart.filter\',\r\n        \'\',\r\n        Array(\r\n            // параметры компонента\r\n        ),\r\n        $component\r\n    );\r\n    ?>\r\n</div>\r\n\r\n<div class=\"section-products\">\r\n    <?php\r\n    $APPLICATION->IncludeComponent(\r\n        \'bitrix:catalog.section\',\r\n        \'\',\r\n        Array(\r\n            // параметры компонента\r\n        ),\r\n        $component\r\n    );\r\n    ?>\r\n</div>\r\n[/phtml]\r\n<p>\r\nЕсли нужно разместить фильтр в другом месте, например в левой или правой колонке, то делаем так:\r\n</p>\r\n[phtml]\r\n<?php $this->SetViewTarget(\'html_smart_filter\'); ?>\r\n<div class=\"smart-filter\">\r\n    <?php\r\n    $APPLICATION->IncludeComponent(\r\n        \'bitrix:catalog.smart.filter\',\r\n        \'\',\r\n        Array(\r\n            // параметры компонента\r\n        ),\r\n        $component\r\n    );\r\n    ?>\r\n</div>\r\n<?php $this->EndViewTarget(); ?>\r\n\r\n<div class=\"section-products\">\r\n    <?php\r\n    $APPLICATION->IncludeComponent(\r\n        \'bitrix:catalog.section\',\r\n        \'\',\r\n        Array(\r\n            // параметры компонента\r\n        ),\r\n        $component\r\n    );\r\n    ?>\r\n</div>\r\n[/phtml]\r\n<p>\r\nФильтр отработает и сформирует массив для фильтрации. Но вывода HTML-кода в месте вызова не будет. Этот вывод сформированного HTML-кода мы можем разместить в другом месте. Это может быть как выше, так и ниже места вызова компонента умного фильтра:\r\n</p>\r\n[phtml]\r\n<div class=\"left sidebar\">\r\n    <?php $APPLICATION->ShowViewContent(\'html_smart_filter\'); ?>\r\n</div>\r\n[/phtml]\r\n<div class=\"note\">\r\n<p>\r\nДля того, чтобы воспользоваться методами <code>SetViewTarget()</code> и <code>EndViewTarget()</code> из файла <code>component_epilog.php</code>, воспользоваться переменной <code>$this</code> не получится, т.к. в данном файле это уже объект класса <code>CBitrixComponent</code> (а не <code>CBitrixComponentTemplate</code>, как в файле <code>template.php</code>). В таком случае нужно делать так:\r\n<p>\r\n[phtml]\r\n<?php $this->__template->SetViewTarget(\'some_content\'); ?>\r\n    Some content here ...\r\n<?php $this->__template->EndViewTarget(); ?>\r\n[/phtml]\r\n</div>\r\n<p>\r\nЕсли нужно проделать похожую манипуляцию не в шаблоне компонента, а в шаблоне сайта, делаем так:\r\n</p>\r\n[phtml]\r\n<?php\r\n// здесь выводим контент с меткой «some_content», который будет сфорирован ниже\r\n$APPLICATION->ShowViewContent(\'some_content\');\r\n?>\r\n<p>\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit...\r\n</p>\r\n<?php\r\nob_start(); // включаем буферизацию вывода, все идет в отдельный буфер\r\n?>\r\nSome content here ...\r\n<?php\r\n// выключаем буферизацию и помечаем этот контент меткой «some_content»\r\n$APPLICATION->AddViewContent(\'some_content\', ob_get_clean());\r\n?>\r\n[/phtml]','2018-08-15 12:39:31',1),(181,17,'Битрикс. Система обработки адресов','','','Apache, CMS, RegExp, SEO, URL, Web-разработка, Битрикс, ЧПУ, Шаблон','Обработка адресов (UrlRewrite) применяется для того, чтобы скрипт мог отвечать не только по своему физическому, но и по любому другому указаному адресу. Адрес, по которому будет отвечать скрипт, не должен физически существовать на сервере. Если такой адрес физически существует, система обработки адресов запущена не будет.','<p>\r\nОбработка адресов (UrlRewrite) применяется для того, чтобы скрипт мог отвечать не только по своему физическому, но и по любому другому указаному адресу. Например, можно задать настройки обработки адресов, чтобы скрипт в файле <code>/folder/index.php</code>, отвечающий по адресу\r\n</p>\r\n[code]\r\n/folder/index.php?id=15\r\n[/code]\r\n<p>\r\nотвечал также по адресу\r\n</p>\r\n[code]\r\n/folder/item/15/\r\n[/code]\r\n<p>\r\nАдрес, по которому будет отвечать скрипт, не должен физически существовать на сервере. Если такой адрес физически существует, то будет вызван скрипт по этому адресу. Система обработки адресов запущена в этом случае не будет.\r\n</p>\r\n\r\n<h2>Правила обработки</h2>\r\n<p>\r\nПравила обработки адресов настраиваются отдельно для каждого сайта и хранятся в корне сайта в файле <code>urlrewrite.php</code>. Файл содержит массив <code>$arUrlRewrite</code>, каждая запись которого является правилом обработки адреса. Файл <code>urlrewrite.php</code> имеет следующий вид:\r\n</p>\r\n[php]\r\n<?php\r\n$arUrlRewrite = array (\r\n    array (\r\n        \'CONDITION\' => \'#^/catalog/category/([^/]+?)/\\\\??(.*)#\',\r\n        \'RULE\' => \'SECTION_CODE=$1&$2\',\r\n        \'ID\' => \'bitrix:catalog.section\',\r\n        \'PATH\' => \'/catalog/section.php\',\r\n        \'SORT\' => 100,\r\n    ),\r\n    array (\r\n        \'CONDITION\' => \'#^/catalog/product/([^/]+?)/\\\\??(.*)#\',\r\n        \'RULE\' => \'ELEMENT_CODE=$1&$2\',\r\n        \'ID\' => \'bitrix:catalog.element\',\r\n        \'PATH\' => \'/catalog/element.php\',\r\n        \'SORT\' => 100,\r\n    ),\r\n);\r\n[/php]\r\n<p>\r\nКаждое правило должно содержать уникальное в рамках сайта условие выполнения правила. Условие выполнения записывается в ключ <code>CONDITION</code> массива и является шаблоном регулярного выражения. Например, условие:\r\n</p>\r\n[php]\r\n\'CONDITION\' => \'#^/index/([0-9]+)/([0-9]+)/#\'\r\n[/php]\r\n<p>\r\nуказывает, что данное правило должно применяться для всех адресов, которые начинаются с подстрок вида:\r\n</p>\r\n[code]\r\n/index/<число>/<число>/\r\n[/code]\r\n<p>\r\nПравило может содержать адрес физически существующего скрипта, который будет подключен при выполнении условия. Этот адрес записывается в ключ <code>PATH</code>. Например, если в системе обработки адресов зарегистрировано правило:\r\n</p>\r\n[php]\r\narray(\r\n    \'CONDITION\' => \'#^/gallery/#\',\r\n    \'PATH\' => \'/users/images/index.php\',\r\n)\r\n[/php]\r\n<p>\r\nи пользователь запросил URL\r\n</p>\r\n[code]\r\n/gallery/images\r\n[/code]\r\n<p>\r\nкоторого физически не существует, то система обработки адресов подключит скрипт:\r\n</p>\r\n[code]\r\n/users/images/index.php\r\n[/code]\r\n<p>\r\nПравило может содержать строку замены, которая записывается в ключ <code>RULE</code>. Если строка замены установлена, то адрес реально существующего подключаемого скрипта формируется заменой регулярным выражением условия выполнения (шаблона выражения) на конкатенацию физического пути (ключ <code>PATH</code>) и строки замены (ключ <code>RULE</code>). Например, если в системе обработки адресов зарегистрировано правило:\r\n</p>\r\n[php]\r\narray(\r\n    \'CONDITION\' => \'#^/forum/([0-9]+)/([0-9]+)/#\',\r\n    \'RULE\' => \'mode=read&CID=$1&GID=$2\',\r\n    \'PATH\' => \'/forum/index.php\',\r\n)\r\n[/php]\r\n<p>\r\nи пользователем запрошена страница:\r\n</p>\r\n[code]\r\n/forum/17/23/\r\n[/code]\r\n<p>\r\nто для формирования адреса скрипта, который будет подключен, выполнится код:\r\n</p>\r\n[php]\r\n$url = preg_replace(\r\n    \'#^/index/([0-9]+)/([0-9]+)/#\',\r\n    \'/forum/index.php?mode=read&CID=$1&GID=$2\',\r\n    \'/index/17/23/\'\r\n);\r\n[/php]\r\n<p>\r\nи будет подключен скрипт:\r\n</p>\r\n[code]\r\n/forum/index.php?mode=read&CID=17&GID=23\r\n[/code]\r\n<p>\r\nПравило может содержать имя компонента, который создал это правило. Это имя записывается в ключ <code>ID</code>. При автоматическом пересоздании файла правил <code>urlrewrite.php</code> с помощью средств административной части сайта пересоздаются только правила, у которых заполнен ключ <code>ID</code>.\r\n</p>\r\n\r\n<h2>Подключение системы обработки адресов</h2>\r\n<p>\r\nПеред началом использования система обработки адресов должна быть подключена на сайте. Для этого необходимо:\r\n</p>\r\n<p>\r\n<ul>\r\n  <li>\r\n  если на веб-сервере настроена обработка ошибки 404 (например, для Apache установлена директива <code>ErrorDocument 404 /404.php</code>), то надо изменить файл <code>404.php</code> в корне сервера, вставив в самое начало:\r\n[php]\r\ninclude_once $_SERVER[\'DOCUMENT_ROOT\'].\'/bitrix/modules/main/include/urlrewrite.php\';\r\n[/php]\r\n  </li>\r\n  <li>\r\n  если для Apache используеся модуль <code>mod_rewrite</code>, то в <code>.htaccess</code> надо указать:\r\n  [apache]\r\n<IfModule mod_rewrite.c>\r\n    RewriteEngine On\r\n    RewriteCond %{REQUEST_FILENAME} !-f\r\n    RewriteCond %{REQUEST_FILENAME} !-l\r\n    RewriteCond %{REQUEST_FILENAME} !-d\r\n    RewriteCond %{REQUEST_FILENAME} !/bitrix/urlrewrite.php$\r\n    RewriteRule ^(.*)$ /bitrix/urlrewrite.php [L]\r\n</IfModule>\r\n[/apache]\r\n  </li>\r\n</ul>','2018-08-20 18:00:36',1),(182,5,'Работа с объектом FormData','','','AJAX, FormData, JavaScript, POST, Web-разработка, XmlHttpRequest, jQuery, Форма','Объект FormData предназначен для кодирования данных, которые необходимо отправить на сервер посредством технологии AJAX (XmlHttpRequest). Для кодирования данных метод <code>FormData</code> использует формат multipart/form-data. Это означает то, что можно подготовить для отправки по AJAX не только текстовые данные, но и файлы.','<p>\r\nОбъект FormData предназначен для кодирования данных, которые необходимо отправить на сервер посредством технологии AJAX (<code>XmlHttpRequest</code>). Для кодирования данных метод <code>FormData</code> использует формат <code>multipart/form-data</code>. Это означает то, что можно подготовить для отправки по AJAX не только текстовые данные, но и файлы (<code>input</code> с атрибутом <code>type=\"file\"</code>).\r\n</p>\r\n<div class=\"note\">\r\nПередачу на сервер данных, находящихся в объекте <code>FormData</code>, необходимо осуществлять посредством метода POST.\r\n</div>\r\n<p>\r\nПредставить себе объект <code>FormData</code> можно как набор пар «ключ-значение». Другими словами, как некоторую коллекцию элементов, в которой каждый из них представлен в виде ключа и значения (массива значений).\r\n</p>\r\n<p>\r\nРабота с объектом <code>FormData</code> начинается с его создания:\r\n</p>\r\n[js]\r\n// создание объекта FormData\r\nvar formData = new FormData();\r\n[/js]\r\n<p>\r\nПри создании объекта <code>FormData</code> ему можно в качестве параметра указать DOM-форму. В этом случае в объект FormData автоматически добавятся все поля (поле:значение) этой формы.\r\n</p>\r\n[js]\r\n// создание объекта FormData и добавление в него всех полей формы\r\nvar formData = new FormData(document.forms.subscribe);\r\n[/js]\r\n<p>\r\nПосле создания объекта <code>FormData</code> можно использовать его методы. Один из наиболее используемых методов — это <code>append()</code>. Этот метод добавляет в объект <code>FormData</code> новую порцию данных (ключ-значение). При этом, если указанного ключа нет в объекте, то данный метод добавит в <code>FormData</code> новый элемент «ключ-значение».\r\n</p>\r\n[js]\r\nformData.append(\'key\', \'some value\');\r\n[/js]\r\n<p>\r\nВ противном случае, если указанный ключ есть уже у объекта <code>FormData</code>, то данный метод запишет его значение в качестве следующего значения этого ключа. После этого с указанным ключом уже будет связано несколько значений (массив значений).\r\n</p>\r\n[js]\r\nformData.append(\'key\', \'other value\'); // \'key\': [\'some value\', \'other value\']\r\n[/js]\r\n<p>\r\nДругой метод для добавления данных в объект <code>FormData</code> – это <code>set()</code>. Отличается от <code>append()</code> только тем, что не добавляет ещё одно значение для ключа (если оно уже есть). Он просто изменяет текущее значение.\r\n</p>\r\n[js]\r\nformData.set(\'key\',\'another value\'); // \'key\': \'another value\'\r\n[/js]\r\n<p>\r\nДля удаления данных из объекта <code>FormData</code> предназначен метод <code>delete()</code>. Он убирает элемент из объекта <code>FormData</code> по имени ключа.\r\n</p>\r\n[js]\r\nformData.delete(\'key\');\r\n[/js]\r\n<p>\r\nМетод <code>has()</code> позволяет поверить в объекте <code>FormData</code> существования указанного ключа.\r\n</p>\r\n[js]\r\n// вернёт true, если в FormData есть элемент с ключом\r\n// key; в противном случае он вернёт значение false\r\nformData.has(\'key\');\r\n[/js]\r\n<p> \r\nЕсли необходимо узнать значение, связанное с ключом, то можно воспользоваться методом <code>get()</code>. Если с ключом связано несколько значений, то данный метод вернёт первое из набора. Кроме метода <code>get()</code>, есть ещё метод <code>getAll()</code>. Он позволяет получить массив значений, связанных с указанным ключом.\r\n</p>\r\n[js]\r\n// возвращает первое значение, связанное с ключом key\r\nformData.get(\'key\');\r\n// возвращает массив значений, связанных с ключом key \r\nformData.getAll(\'key\');\r\n[/js]\r\n\r\n<h2>Отправка данных формы</h2>\r\n<p>\r\nРассмотрим простой AJAX пример, в котором разберём, как применять объект <code>FormData</code> для кодирования данных формы. Данный пример будет выполнять следующие основные действия:\r\n</p>\r\n<ul>\r\n  <li>отправлять HTML форму на сервер методом POST (подготавливать данные для отправки запроса будем с помощью объекта FormData);</li>\r\n  <li>обрабатывать данные формы на сервере посредством php и формировать на основании них ответ в формате JSON;</li>\r\n  <li>получать ответ от сервера и выводить его после некоторой обработки посредством JavaScript на страницу.</li>\r\n</ul>\r\n<p>\r\nРазработку этого примера начнём с создания HTML формы и контейнера для вывода результата.\r\n</p>\r\n[html]\r\n<!doctype html>\r\n<html>\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <title>FormData</title>\r\n    <script src=\"jquery-2.1.1.min.js\"></script>\r\n    <script src=\"script.js\" charset=\"UTF-8\"></script>\r\n</head>\r\n<body>\r\n    <div id=\"result\"></div>\r\n\r\n    <form action=\"handler.php\" method=\"POST\" id=\"message\">\r\n        <div>\r\n            <span>Имя</span>\r\n            <input type=\"text\" name=\"name\" value=\"\">\r\n        </div>\r\n        <div>\r\n            <span>Сообщение</span>\r\n            <textarea name=\"message\"></textarea>\r\n        </div>\r\n        <button type=\"submit\">Отправить</button>\r\n    </form>\r\n</body>\r\n</html>\r\n[/html]\r\nPHP сценарий, который будет формировать ответ клиенту в формате JSON. Для создания ответа будем использовать ключи <code>name</code> и <code>message</code> суперглобального массива <code>$_POST</code>.\r\n</p>\r\n[php]\r\n<?php\r\n$result = array();\r\n$result[\'name\'] = \'Не заполнено поле name!\';\r\n$result[\'message\'] = \'Не заполнено поле message!\';\r\n\r\nif (!empty($_POST[\'name\'])) {\r\n    $result[\'name\'] = trim($_POST[\'name\']);\r\n}\r\nif (!empty($_POST[\'message\'])) {\r\n    $result[\'message\'] = trim($_POST[\'message\']);\r\n}\r\n\r\necho json_encode($result);\r\n[/php]\r\n<p>\r\nСценарий на JavaScript, который будет кодировать данные HTML формы, отправлять её на сервер (<code>XMLHttpRequest</code>), получать ответ с сервера и отображать его на странице в виде маркированного списка.\r\n</p>\r\n[js]\r\n// после загрузки DOM модели\r\ndocument.addEventListener(\'DOMContentLoaded\', function() {\r\n    // получим форму с id = \"message\"\r\n    var message = document.getElementById(\'message\');\r\n    // при возникновении у формы события submit\r\n    message.addEventListener(\'submit\', function(e) {\r\n        // создадим объект FormData и добавим в него данные из формы\r\n        var formData = new FormData(message);\r\n        // создадим объект XHR\r\n        var request = new XMLHttpRequest();\r\n        // инициализирум запрос\r\n        request.open(\'POST\', \'handler.php\');\r\n        // при изменении состояния запроса        \r\n        request.addEventListener(\'readystatechange\', function() {\r\n            // если запрос завершился и код ответа сервера OK (200), то\r\n            if (this.readyState == 4 && this.status == 200) {\r\n                // разбираем строку json, который вернул сервер и помещаем её в переменную data\r\n                var data = JSON.parse(this.responseText);\r\n                // создаём переменную, в которую будем складывать результат работы\r\n                var output = \'<ul>\';\r\n                // переберём объект data\r\n                for (var key in data) {\r\n                  output += \'<li>\' + key + \' : \' + data[key] + \'</li>\';\r\n                }\r\n                // добавим к переменной закрывающий тег ul\r\n                output += \'</ul>\';\r\n                // выведем в элемент (id=\"result\") значение переменной output\r\n                document.getElementById(\'result\').innerHTML = output;\r\n            }\r\n        });\r\n        // отправляем запрос на сервер\r\n        request.send(formData);\r\n        // отменяем отправку формы стандартным способом\r\n        e.preventDefault();\r\n    });\r\n});\r\n[/js]\r\n<p>\r\n<img src=\"/files/blog/182/1.jpg\" alt=\"\" />\r\n</p>\r\n\r\n<h2>Отправка формы с использованием jQuery</h2>\r\n<p>\r\nОбъект <code>FormData</code> можно также использовать в методе <code>$.ajax()</code> библиотеки jQuery. Для этого методу <code>$.ajax()</code> необходимо установить следующие параметры:\r\n</p>\r\n<ul>\r\n  <li><code>processData: false,</code></li>\r\n  <li><code>contentType: false,</code></li>\r\n</ul>\r\n<p>\r\nПараметр <code>processData</code> со значением <code>false</code> предотвратит автоматическое преобразование данных <code>FormData</code> в строку запроса. А параметр <code>contentType</code> со значением <code>false</code> запретит jQuery устанавливать заголовок <code>Content-Type</code> и оставит это действие объекту <code>XMLHttpRequest</code>. Установка этих параметров позволит предотвратить преобразование данных, закодированных объектом <code>FormData</code> и установку неверного заголовка (<code>application/x-www-form-urlencoded</code>).\r\n</p>\r\n<p>\r\nПерепишем представленный выше код JavaScript с помощью методов библиотеки jQuery:\r\n</p>\r\n[js]\r\n$(document).ready(function() {\r\n    // при нажатии на кнопку «Отправить»\r\n    $(\'#message\').submit(function(e) {\r\n        // создадим объект FormData и добавим в него данные из формы;\r\n        // обратите внимание, передаем конструктору DOM-объект формы\r\n        var formData = new FormData($(\'#message\')[0]); \r\n        // url — адрес скрипта, на который будет отправлен запрос\r\n        // data — данные, которые необходимо отправить на сервер  \r\n        // processData — отменить обработку данных\r\n        // contentType — не устанавливать заголовок Content-Type \r\n        // type — тип запроса\r\n        // dataType — тип данных ответа сервера\r\n        // success — функция, которая будет выполнена после удачного запроса\r\n        $.ajax({\r\n            url: \'handler.php\',\r\n            data: formData,\r\n            processData: false,\r\n            contentType: false,\r\n            type: \'POST\',\r\n            dataType: \'JSON\',\r\n            success: function(data) {\r\n                var output = \'<ul>\';\r\n                $.each(data, function(key, value) {\r\n                    output += \'<li>\' + key + \' : \' + value + \'</li>\';\r\n                });\r\n                output += \'</ul>\';\r\n                $(\'#result\').html(output);\r\n            }\r\n        });\r\n        // отменяем отправку формы стандартным способом\r\n        e.preventDefault();\r\n    });\r\n});\r\n[/js]\r\n\r\n<h2>Отправка файлов на сервер</h2>\r\n<p>\r\nРассмотрим ещё один пример, в котором объект <code>FormData</code> будем использовать для отправки файла на сервер.\r\n</p>\r\n[html]\r\n<!doctype html>\r\n<html>\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <title>FormData</title>\r\n    <script src=\"jquery-2.1.1.min.js\"></script>\r\n    <script src=\"script.js\" charset=\"UTF-8\"></script>\r\n</head>\r\n<body>\r\n    <div id=\"result\"></div>\r\n    \r\n    <div>\r\n        Выберите файл\r\n        <input type=\"file\" id=\"file\">\r\n    </div>\r\n    <button id=\"button\">Загрузить</button>\r\n</body>\r\n</html>\r\n[/html]\r\n<p>\r\nСценарий php, выполняющий сохранение загруженного файла.\r\n</p>\r\n[php]\r\n<?php\r\n// переменная для хранения результата\r\n$result = \'Файл не был загружен на сервер\';\r\n// если файл был успешно загружен\r\nif ($_FILES[\'file\'][\'error\'] == UPLOAD_ERR_OK) {\r\n    // получаем расширение исходного файла\r\n    $ext = strtolower(pathinfo($_FILES[\'file\'][\'name\'], PATHINFO_EXTENSION));\r\n    // получаем уникальное имя под которым будет сохранён файл \r\n    $name = md5(uniqid(\'\', true)).\'.\'.$ext;\r\n    // перемещает файл из временного хранилища в указанную директорию\r\n    if (move_uploaded_file($_FILES[\'file\'][\'tmp_name\'], \'uploads/\'.$name)) {\r\n        // записываем в переменную $result ответ\r\n        $result = \'Файл загружен и доступен по адресу uploads/\'.$name;\r\n    } else {\r\n        // записываем в переменную $result сообщение о том, что произошла ошибка\r\n        $result = \'Ошибка при загрузке файла на сервер\';\r\n    }\r\n}\r\n// возвращаем результат (ответ сервера)\r\necho $result;\r\n[/php]\r\n<p>\r\nJavaScript сценарий, который отправляет файл на сервер, получает от него ответ и выводит его на странице.\r\n</p>\r\n[js]\r\n// после загрузки DOM модели\r\ndocument.addEventListener(\'DOMContentLoaded\', function() {\r\n    // при нажатию на кнопку upload-image\r\n    document.getElementById(\'button\').addEventListener(\'click\', function() {\r\n        // элемент, содержащий файл выбранный пользователем\r\n        var file = document.getElementById(\'file\');\r\n        // элемент для вывода результата\r\n        var result = document.getElementById(\'result\');\r\n        // если элемент содержит выбранный файл\r\n        if (file.files.length) {\r\n            // создаём объект formData\r\n            var formData = new FormData();\r\n            // добавляем в formData файл\r\n            formData.append(\'file\', file.files[0]);\r\n            // создаём объект XMLHttpRequest\r\n            var request = new XMLHttpRequest();\r\n            // инициализирум запрос\r\n            request.open(\'POST\', \'handler.php\');\r\n            // при изменении состояния запроса        \r\n            request.addEventListener(\'readystatechange\', function() {\r\n                // если запрос завершился и код ответа сервера OK (200), то\r\n                if (this.readyState == 4 && this.status == 200) {\r\n                    // помещаем в элемент result результат ответа сервера\r\n                    result.innerHTML = this.responseText;\r\n                }\r\n            });\r\n            // отправляем запрос\r\n            request.send(formData);\r\n        } else {\r\n            result.innerHTML = \'Не выбран файл для загрузки!\';\r\n        }\r\n    });\r\n});\r\n[/js]\r\n<p>\r\n<img src=\"/files/blog/182/2.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nJavaScript сценарий, переработанный с использованием методов бибилиотеки jQuery.\r\n</p>\r\n[js]\r\n$(document).ready(function() {\r\n    // при нажатии на кнопку «Отправить»\r\n    $(\'#button\').click(function() {\r\n        // элемент, с помощью которого пользователь выбирает файл\r\n        var file = $(\'#file\');\r\n        // элемент, в который выведим ответ сервера\r\n        var result = $(\'#result\');\r\n        // если файл выбран, то\r\n        if (file.prop(\'files\').length) {\r\n            // создаём объект FormData\r\n            var formData = new FormData();\r\n            // добавляем в объект FormData файл \r\n            formData.append(\'file\', file.prop(\'files\')[0]);\r\n            // url — адрес, содержащий php сценарий, который будет обрабатывать запрос\r\n            // processData — параметр, с помощью которого отключим преобразование данных в строку запроса\r\n            // contentType — параметр, с помощью которого отключим установление типа контента jQuery\r\n            // type — параметр, с помощью которого установим POST в качестве метода отправки запроса\r\n            // success — функция, которая будет выполнена после удачного запроса\r\n            $.ajax({\r\n                url: \'handler.php\',\r\n                data: formData,\r\n                processData: false,\r\n                contentType: false,\r\n                type: \'POST\',\r\n                success: function(data) {\r\n                    result.html(data);\r\n                }\r\n            });\r\n        } else {\r\n            result.html(\'Не выбран файл для загрузки!\');\r\n        }\r\n    });\r\n});\r\n[/js]','2018-08-10 18:04:48',1),(183,17,'Битрикс. Типы цен и наценки','','','CMS, Web-разработка, Битрикс, ИнтернетМагазин, КаталогТоваров, Наценки, Пользователь, ПраваДоступа, ТипыЦен','Для работы интернет-магазина необходимо установить цены, с которыми он будет работать. Если позволяет редакция продукта, то в каталоге можно использовать несколько типов цен, но при этом один из типов цен является базовым. Базовая цена — это цена, относительной которой рассчитываются все остальные цены системы.','<p>\r\nДля работы интернет-магазина необходимо установить цены, с которыми он будет работать. Если позволяет редакция продукта, то в каталоге можно использовать несколько типов цен, но при этом один из типов цен является базовым. Базовая цена — это цена, относительной которой рассчитываются все остальные цены системы.\r\n</p>\r\n\r\n<h2>Типы цен</h2>\r\n<p>\r\nПо умолчанию в системе уже доступна <strong>Розничная цена</strong>, она же назначена и <strong>базовой</strong>. Давайте создадим еще два типа цен: для постоянных клиентов и оптовых покупателей. Но для начала надо создать две группы пользователей, потому что типы цен привязываются к группам.\r\n</p>\r\n<p>\r\nВ панели управления переходим в «<em>Настройки • Пользователи • Группы пользователей</em>» и создаем две новые группы:\r\n</p>\r\n<ul>\r\n  <li>Постоянные покупатели</li>\r\n  <li>Оптовые покупатели</li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/183/1.jpg\" class=\"zoom\"><img src=\"/files/blog/183/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nУправление типами цен осуществляется на странице «<em>Магазин • Настройки • Цены • Типы цен</em>»:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/183/2.jpg\" class=\"zoom\"><img src=\"/files/blog/183/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nСоздаем два новых типа цен:\r\n</p>\r\n<ul>\r\n  <li>Постоянный покупатель, код <code>REGULAR_BUYER</code></li>\r\n  <li>Оптовый покупатель, код <code>WHOLESALE_BUYER</code></li>\r\n</ul>\r\n<p>\r\nОбязательно указываем группы пользователей, которые имеют право на просмотр этой цены и на покупку по этой цене:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/183/3.jpg\" class=\"zoom\"><img src=\"/files/blog/183/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТеперь при редактировании товара можно кроме розничной цены задать еще и цену для постоянных клиентов и для оптовых покупателей:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/183/4.jpg\" class=\"zoom\"><img src=\"/files/blog/183/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<h2>Наценки</h2>\r\nНаценки — заранее установленная величина в относительном выражении, на которую уменьшается или увеличивается цена товара. Наценки применяются к базовой цене при расчете других типов цен товара (базовую цену сменить невозможно). Каждая цена будет считаться по формуле: \r\n[code]\r\n[Цена]=[Базовая цена]+[Базовая цена]*[Наценка в процентах/100]\r\n[/code]\r\n<p>\r\nНаценка может быть представлена как положительной, так и отрицательной величиной.\r\n</p>\r\n<p>\r\nПереходим на страницу «<em>Магазин • Настройки • Цены • Наценки</em>» и создаем две наценки:\r\n</p>\r\n<ul>\r\n  <li>Постоянный покупатель, наценка <code>-10%</code></li>\r\n  <li>Оптовый покупатель, наценка <code>-20%</code></code></li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/183/5.jpg\" class=\"zoom\"><img src=\"/files/blog/183/5.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПри редактировании наценки можно отметить checkbox «Пересчитать цены»:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/183/6.jpg\" class=\"zoom\"><img src=\"/files/blog/183/6.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПосле этого произойдёт автоматическое изменение цены для всех товаров, у которых применена эта наценка:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/183/7.jpg\" class=\"zoom\"><img src=\"/files/blog/183/7.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<h2>Примеры кода</h2>\r\n[php]\r\n// получаем тип цен с идентификатором $ID, включая языкозависимые параметры\r\n$result = CCatalogGroup::GetByID($ID);\r\nif ($result[\'CAN_ACCESS\'] == \'Y\') {\r\n    echo \'Вы можете видеть цены типа \'.$result[\'NAME_LANG\'].\'<br/>\';\r\n}\r\nif ($result[\'CAN_BUY\'] == \'Y\') {\r\n    echo \'Вы можете покупать товары по ценам типа \'.$result[\'NAME_LANG\'].\'<br/>\';\r\n}\r\n[/php]\r\n[php]\r\n// получаем типы цен с внутренним именем RETAIL\r\n$result = CCatalogGroup::GetList(\r\n    array(\'SORT\' => \'ASC\'),\r\n    array(\'NAME\' => \'RETAIL\')\r\n);\r\nwhile ($arPriceType = $result->Fetch()) {\r\n    echo $arPriceType[\'NAME_LANG\'].\' - \'.$arPriceType[\'CAN_ACCESS\'].\'<br/>\';\r\n}\r\n[/php]\r\n[php]\r\n// получаем цену типа $PRICE_TYPE_ID для товара с идентификатором $PRODUCT_ID\r\n$result = CPrice::GetList(\r\n    array(),\r\n    array(\r\n        \'PRODUCT_ID\' => $PRODUCT_ID,\r\n        \'CATALOG_GROUP_ID\' => $PRICE_TYPE_ID\r\n    )\r\n);\r\nif ($price = $result->Fetch()) {\r\n    echo CurrencyFormat($price[\'PRICE\'], $price[\'CURRENCY\']);\r\n} else {\r\n    echo \'Цена не найдена!\';\r\n}\r\n[/php]\r\n<p>\r\nПример получения цены товара, в зависимости от того, аввторизован пользователь или нет. И если авторизован — какой группе он принадлежит (постоянный покупатель или оптовый покупатель):\r\n</p>\r\n[php]\r\n/*\r\n * Определяемся, какую цену товара будем показывать\r\n */\r\n$productPrice = CurrencyFormat(0.0, \'RUB\');\r\n// это идентификатор типа цен BASE (розничная цена)\r\n$PRICE_TYPE_ID = PRICE_TYPE_BASE;\r\n// если пользователь авторизован, он может принадлежать группе «Постоянные покупатели»\r\n// или «Оптовые покупатели», а для таких пользователей надо показать цену со скидкой\r\nif ($USER->IsAuthorized()) {\r\n    // массив групп, к которым принадлежит авторизованный пользователь\r\n    $arGroups = $USER->GetUserGroupArray();\r\n    // если пользователь принадлежит группе «Постоянные покупатели»\r\n    if (in_array(CATALOG_GROUP_REGULAR_BUYER, $arGroups)) {\r\n        $PRICE_TYPE_ID = PRICE_TYPE_REGULAR_BUYER;\r\n    }\r\n    // если пользователь принадлежит группе «Оптовые покупатели»\r\n    if (in_array(CATALOG_GROUP_WHOLESALE_BUYER, $arGroups)) {\r\n        $PRICE_TYPE_ID = PRICE_TYPE_WHOLESALE_BUYER;\r\n    }\r\n}\r\n// получаем цену товара: розничную, для постоянного покупателя или\r\n// для оптового покупателя — в зависимости от $PRICE_TYPE_ID \r\n$result = CPrice::GetList(\r\n    array(),\r\n    array(\r\n        \'PRODUCT_ID\' => $PRODUCT_ID, // идентификатор товара\r\n        \'CATALOG_GROUP_ID\' => $PRICE_TYPE_ID  // идентификатор типа цены\r\n    )\r\n);\r\nif ($temp = $result->Fetch()) {\r\n    $productPrice = CurrencyFormat($temp[\'PRICE\'], $temp[\'CURRENCY\']);\r\n}\r\n[/php]\r\n<p>\r\nВ коде выше использованы пять констант, которые определены в файле <code>init.php</code>:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/php_interface/init.php\r\n */\r\n\r\ndefine(\'DEFAULT_TEMPLATE_PATH\', \'/local/templates/.default\');\r\n\r\n// Идентификатор группы пользователей «Постоянные покупатели»\r\ndefine(\'CATALOG_GROUP_REGULAR_BUYER\', 9);\r\n// Идентификатор группы пользователей «Оптовые покупатели»\r\ndefine(\'CATALOG_GROUP_WHOLESALE_BUYER\', 10);\r\n// Идентификатор типа цен «Базовый»\r\ndefine(\'PRICE_TYPE_BASE\', 1);\r\n// Идентификатор типа цен «Постоянные покупатели»\r\ndefine(\'PRICE_TYPE_REGULAR_BUYER\', 2);\r\n// Идентификатор группы пользователей «Оптовые покупатели»\r\ndefine(\'PRICE_TYPE_WHOLESALE_BUYER\', 3);\r\n\r\nfunction debug($data) {\r\n    echo \'<pre>\' . print_r($data, true) . \'</pre>\';\r\n}\r\n[/php]\r\n\r\n<h2>База данных</h2>\r\n[mysql]\r\n--\r\n-- Структура таблицы `b_catalog_group`\r\n--\r\n\r\nCREATE TABLE `b_catalog_group` (\r\n  `ID` int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n  `NAME` varchar(100) COLLATE utf8_unicode_ci NOT NULL,\r\n  `BASE` char(1) COLLATE utf8_unicode_ci NOT NULL DEFAULT \'N\',\r\n  `SORT` int(11) NOT NULL DEFAULT \'100\',\r\n  `XML_ID` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,\r\n  `TIMESTAMP_X` datetime DEFAULT NULL,\r\n  `MODIFIED_BY` int(18) DEFAULT NULL,\r\n  `DATE_CREATE` datetime DEFAULT NULL,\r\n  `CREATED_BY` int(18) DEFAULT NULL\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\n--\r\n-- Дамп данных таблицы `b_catalog_group`\r\n--\r\n\r\nINSERT INTO `b_catalog_group`\r\n(`ID`, `NAME`, `BASE`, `SORT`, `XML_ID`, `TIMESTAMP_X`, `MODIFIED_BY`, `DATE_CREATE`, `CREATED_BY`)\r\nVALUES\r\n(1, \'BASE\', \'Y\', 100, \'BASE\', \'2018-08-18 09:16:48\', 1, \'2018-08-18 09:12:58\', 1),\r\n(2, \'REGULAR_BUYER\', \'N\', 100, \'\', \'2018-08-24 16:17:27\', 1, \'2018-08-24 15:36:32\', 1),\r\n(3, \'WHOLESALE_BUYER\', \'N\', 100, \'\', \'2018-08-24 16:17:43\', 1, \'2018-08-24 15:45:09\', 1);\r\n[/mysql]\r\n<ul>\r\n  <li><code>ID</code> — уникальный индентификатор</li>\r\n  <li><code>NAME</code> — внутреннее имя цены</code>\r\n  <li><code>BASE</code> — указывает на то, является ли этот тип цен базовым</li>\r\n  <li><code>SORT</code> — число для сортировки</li>\r\n  <li><code>XML_ID</code> — идентификатор из 1С:Предприятие</li>\r\n</ul>\r\n[mysql]\r\n--\r\n-- Структура таблицы `b_catalog_price`\r\n--\r\n\r\nCREATE TABLE `b_catalog_price` (\r\n  `ID` int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n  `PRODUCT_ID` int(11) NOT NULL,\r\n  `EXTRA_ID` int(11) DEFAULT NULL,\r\n  `CATALOG_GROUP_ID` int(11) NOT NULL,\r\n  `PRICE` decimal(18,2) NOT NULL,\r\n  `CURRENCY` char(3) COLLATE utf8_unicode_ci NOT NULL,\r\n  `TIMESTAMP_X` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n  `QUANTITY_FROM` int(11) DEFAULT NULL,\r\n  `QUANTITY_TO` int(11) DEFAULT NULL,\r\n  `TMP_ID` varchar(40) COLLATE utf8_unicode_ci DEFAULT NULL,\r\n  `PRICE_SCALE` decimal(26,12) DEFAULT NULL\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\n--\r\n-- Дамп данных таблицы `b_catalog_price`\r\n--\r\n\r\nINSERT INTO `b_catalog_price`\r\n(`ID`, `PRODUCT_ID`, `EXTRA_ID`, `CATALOG_GROUP_ID`, `PRICE`, `CURRENCY`,\r\n`TIMESTAMP_X`, `QUANTITY_FROM`, `QUANTITY_TO`, `TMP_ID`, `PRICE_SCALE`)\r\nVALUES\r\n(314, 317, NULL, 1, \'1000.00\', \'RUB\', \'2018-08-18 09:24:19\', NULL, NULL, NULL, \'1000.000000000000\'),\r\n(315, 318, NULL, 1, \'2000.00\', \'RUB\', \'2018-08-18 09:25:24\', NULL, NULL, NULL, \'2000.000000000000\'),\r\n(316, 319, NULL, 1, \'3000.00\', \'RUB\', \'2018-08-18 09:25:59\', NULL, NULL, NULL, \'3000.000000000000\'),\r\n(317, 320, NULL, 1, \'4000.00\', \'RUB\', \'2018-08-18 09:26:36\', NULL, NULL, NULL, \'4000.000000000000\'),\r\n(318, 321, NULL, 1, \'5000.00\', \'RUB\', \'2018-08-18 09:27:03\', NULL, NULL, NULL, \'5000.000000000000\'),\r\n(319, 322, NULL, 1, \'1000.00\', \'RUB\', \'2018-08-18 09:27:37\', NULL, NULL, NULL, \'1000.000000000000\'),\r\n(320, 323, NULL, 1, \'2000.00\', \'RUB\', \'2018-08-18 09:28:12\', NULL, NULL, NULL, \'2000.000000000000\'),\r\n(321, 324, NULL, 1, \'3000.00\', \'RUB\', \'2018-08-18 09:28:48\', NULL, NULL, NULL, \'3000.000000000000\'),\r\n(322, 325, NULL, 1, \'4000.00\', \'RUB\', \'2018-08-18 09:29:17\', NULL, NULL, NULL, \'4000.000000000000\'),\r\n(323, 326, NULL, 1, \'5000.00\', \'RUB\', \'2018-08-18 09:29:44\', NULL, NULL, NULL, \'5000.000000000000\'),\r\n(324, 327, NULL, 1, \'1000.00\', \'RUB\', \'2018-08-18 09:30:17\', NULL, NULL, NULL, \'1000.000000000000\'),\r\n(325, 328, NULL, 1, \'2000.00\', \'RUB\', \'2018-08-18 09:30:44\', NULL, NULL, NULL, \'2000.000000000000\'),\r\n(326, 329, NULL, 1, \'3000.00\', \'RUB\', \'2018-08-18 09:31:14\', NULL, NULL, NULL, \'3000.000000000000\'),\r\n(327, 330, NULL, 1, \'4000.00\', \'RUB\', \'2018-08-18 09:31:42\', NULL, NULL, NULL, \'4000.000000000000\'),\r\n(328, 331, NULL, 1, \'5000.00\', \'RUB\', \'2018-08-18 09:32:05\', NULL, NULL, NULL, \'5000.000000000000\'),\r\n(329, 332, NULL, 1, \'1000.00\', \'RUB\', \'2018-08-18 09:45:36\', NULL, NULL, NULL, \'1000.000000000000\'),\r\n(330, 333, NULL, 1, \'2000.00\', \'RUB\', \'2018-08-18 09:46:03\', NULL, NULL, NULL, \'2000.000000000000\'),\r\n(331, 334, NULL, 1, \'3000.00\', \'RUB\', \'2018-08-18 09:46:29\', NULL, NULL, NULL, \'3000.000000000000\'),\r\n(332, 335, NULL, 1, \'4000.00\', \'RUB\', \'2018-08-18 09:46:55\', NULL, NULL, NULL, \'4000.000000000000\'),\r\n(333, 336, NULL, 1, \'4000.00\', \'RUB\', \'2018-08-18 09:47:21\', NULL, NULL, NULL, \'4000.000000000000\'),\r\n(334, 337, NULL, 1, \'1000.00\', \'RUB\', \'2018-08-18 09:47:59\', NULL, NULL, NULL, \'1000.000000000000\'),\r\n(335, 338, NULL, 1, \'1000.00\', \'RUB\', \'2018-08-18 09:48:25\', NULL, NULL, NULL, \'1000.000000000000\'),\r\n(336, 339, NULL, 1, \'3000.00\', \'RUB\', \'2018-08-18 09:48:49\', NULL, NULL, NULL, \'3000.000000000000\'),\r\n(337, 340, NULL, 1, \'4000.00\', \'RUB\', \'2018-08-18 09:49:13\', NULL, NULL, NULL, \'4000.000000000000\'),\r\n(338, 341, NULL, 1, \'5000.00\', \'RUB\', \'2018-08-18 09:49:40\', NULL, NULL, NULL, \'5000.000000000000\'),\r\n(339, 342, NULL, 1, \'1000.00\', \'RUB\', \'2018-08-18 09:50:13\', NULL, NULL, NULL, \'1000.000000000000\'),\r\n(340, 343, NULL, 1, \'2000.00\', \'RUB\', \'2018-08-18 09:50:43\', NULL, NULL, NULL, \'2000.000000000000\'),\r\n(341, 344, NULL, 1, \'3000.00\', \'RUB\', \'2018-08-18 09:51:12\', NULL, NULL, NULL, \'3000.000000000000\'),\r\n(342, 345, NULL, 1, \'4000.00\', \'RUB\', \'2018-08-18 09:51:43\', NULL, NULL, NULL, \'4000.000000000000\'),\r\n(343, 346, NULL, 1, \'5000.00\', \'RUB\', \'2018-08-18 09:52:13\', NULL, NULL, NULL, \'5000.000000000000\'),\r\n(344, 331, 1, 2, \'4500.00\', \'RUB\', \'2018-08-24 13:53:00\', NULL, NULL, NULL, \'4500.000000000000\'),\r\n(345, 331, 2, 3, \'4000.00\', \'RUB\', \'2018-08-24 13:53:00\', NULL, NULL, NULL, \'4000.000000000000\'),\r\n(346, 330, 1, 2, \'3600.00\', \'RUB\', \'2018-08-24 13:53:14\', NULL, NULL, NULL, \'3600.000000000000\'),\r\n(347, 330, 2, 3, \'3200.00\', \'RUB\', \'2018-08-24 13:53:14\', NULL, NULL, NULL, \'3200.000000000000\'),\r\n(348, 329, 1, 2, \'2700.00\', \'RUB\', \'2018-08-24 13:53:29\', NULL, NULL, NULL, \'2700.000000000000\'),\r\n(349, 329, 2, 3, \'2400.00\', \'RUB\', \'2018-08-24 13:53:29\', NULL, NULL, NULL, \'2400.000000000000\'),\r\n(350, 328, 1, 2, \'1800.00\', \'RUB\', \'2018-08-24 13:53:50\', NULL, NULL, NULL, \'1800.000000000000\'),\r\n(351, 328, 2, 3, \'1600.00\', \'RUB\', \'2018-08-24 13:53:50\', NULL, NULL, NULL, \'1600.000000000000\'),\r\n(352, 327, 1, 2, \'900.00\', \'RUB\', \'2018-08-24 13:54:03\', NULL, NULL, NULL, \'900.000000000000\'),\r\n(353, 327, 2, 3, \'800.00\', \'RUB\', \'2018-08-24 13:54:03\', NULL, NULL, NULL, \'800.000000000000\'),\r\n(354, 321, 1, 2, \'4500.00\', \'RUB\', \'2018-08-24 13:54:20\', NULL, NULL, NULL, \'4500.000000000000\'),\r\n(355, 321, 2, 3, \'4000.00\', \'RUB\', \'2018-08-24 13:54:20\', NULL, NULL, NULL, \'4000.000000000000\'),\r\n(356, 320, 1, 2, \'3600.00\', \'RUB\', \'2018-08-24 13:54:34\', NULL, NULL, NULL, \'3600.000000000000\'),\r\n(357, 320, 2, 3, \'3200.00\', \'RUB\', \'2018-08-24 13:54:34\', NULL, NULL, NULL, \'3200.000000000000\'),\r\n(358, 319, 1, 2, \'2700.00\', \'RUB\', \'2018-08-24 13:54:47\', NULL, NULL, NULL, \'2700.000000000000\'),\r\n(359, 319, 2, 3, \'2400.00\', \'RUB\', \'2018-08-24 13:54:47\', NULL, NULL, NULL, \'2400.000000000000\'),\r\n(360, 318, 1, 2, \'1800.00\', \'RUB\', \'2018-08-24 13:55:00\', NULL, NULL, NULL, \'1800.000000000000\'),\r\n(361, 318, 2, 3, \'1600.00\', \'RUB\', \'2018-08-24 13:55:00\', NULL, NULL, NULL, \'1600.000000000000\'),\r\n(362, 317, 1, 2, \'900.00\', \'RUB\', \'2018-08-24 13:55:12\', NULL, NULL, NULL, \'900.000000000000\'),\r\n(363, 317, 2, 3, \'800.00\', \'RUB\', \'2018-08-24 13:55:12\', NULL, NULL, NULL, \'800.000000000000\'),\r\n(364, 326, 1, 2, \'4500.00\', \'RUB\', \'2018-08-24 13:55:38\', NULL, NULL, NULL, \'4500.000000000000\'),\r\n(365, 326, 2, 3, \'4000.00\', \'RUB\', \'2018-08-24 13:55:38\', NULL, NULL, NULL, \'4000.000000000000\'),\r\n(366, 325, 1, 2, \'3600.00\', \'RUB\', \'2018-08-24 13:55:48\', NULL, NULL, NULL, \'3600.000000000000\'),\r\n(367, 325, 2, 3, \'3200.00\', \'RUB\', \'2018-08-24 13:55:48\', NULL, NULL, NULL, \'3200.000000000000\'),\r\n(368, 324, 1, 2, \'2700.00\', \'RUB\', \'2018-08-24 13:56:01\', NULL, NULL, NULL, \'2700.000000000000\'),\r\n(369, 324, 2, 3, \'2400.00\', \'RUB\', \'2018-08-24 13:56:01\', NULL, NULL, NULL, \'2400.000000000000\'),\r\n(370, 323, 1, 2, \'1800.00\', \'RUB\', \'2018-08-24 13:56:17\', NULL, NULL, NULL, \'1800.000000000000\'),\r\n(371, 323, 2, 3, \'1600.00\', \'RUB\', \'2018-08-24 13:56:17\', NULL, NULL, NULL, \'1600.000000000000\'),\r\n(372, 322, 1, 2, \'900.00\', \'RUB\', \'2018-08-24 13:56:30\', NULL, NULL, NULL, \'900.000000000000\'),\r\n(373, 322, 2, 3, \'800.00\', \'RUB\', \'2018-08-24 13:56:30\', NULL, NULL, NULL, \'800.000000000000\'),\r\n(374, 336, 1, 2, \'3600.00\', \'RUB\', \'2018-08-24 13:56:49\', NULL, NULL, NULL, \'3600.000000000000\'),\r\n(375, 336, 2, 3, \'3200.00\', \'RUB\', \'2018-08-24 13:56:49\', NULL, NULL, NULL, \'3200.000000000000\'),\r\n(376, 335, 1, 2, \'3600.00\', \'RUB\', \'2018-08-24 13:57:00\', NULL, NULL, NULL, \'3600.000000000000\'),\r\n(377, 335, 2, 3, \'3200.00\', \'RUB\', \'2018-08-24 13:57:00\', NULL, NULL, NULL, \'3200.000000000000\'),\r\n(378, 334, 1, 2, \'2700.00\', \'RUB\', \'2018-08-24 13:57:13\', NULL, NULL, NULL, \'2700.000000000000\'),\r\n(379, 334, 2, 3, \'2400.00\', \'RUB\', \'2018-08-24 13:57:13\', NULL, NULL, NULL, \'2400.000000000000\'),\r\n(380, 333, 1, 2, \'1800.00\', \'RUB\', \'2018-08-24 13:57:25\', NULL, NULL, NULL, \'1800.000000000000\'),\r\n(381, 333, 2, 3, \'1600.00\', \'RUB\', \'2018-08-24 13:57:25\', NULL, NULL, NULL, \'1600.000000000000\'),\r\n(382, 332, 1, 2, \'900.00\', \'RUB\', \'2018-08-24 13:57:37\', NULL, NULL, NULL, \'900.000000000000\'),\r\n(383, 332, 2, 3, \'800.00\', \'RUB\', \'2018-08-24 13:57:37\', NULL, NULL, NULL, \'800.000000000000\'),\r\n(384, 341, 1, 2, \'4500.00\', \'RUB\', \'2018-08-24 13:57:56\', NULL, NULL, NULL, \'4500.000000000000\'),\r\n(385, 341, 2, 3, \'4000.00\', \'RUB\', \'2018-08-24 13:57:56\', NULL, NULL, NULL, \'4000.000000000000\'),\r\n(386, 340, 1, 2, \'3600.00\', \'RUB\', \'2018-08-24 13:58:09\', NULL, NULL, NULL, \'3600.000000000000\'),\r\n(387, 340, 2, 3, \'3200.00\', \'RUB\', \'2018-08-24 13:58:09\', NULL, NULL, NULL, \'3200.000000000000\'),\r\n(388, 339, 1, 2, \'2700.00\', \'RUB\', \'2018-08-24 13:58:23\', NULL, NULL, NULL, \'2700.000000000000\'),\r\n(389, 339, 2, 3, \'2400.00\', \'RUB\', \'2018-08-24 13:58:23\', NULL, NULL, NULL, \'2400.000000000000\'),\r\n(390, 338, 1, 2, \'900.00\', \'RUB\', \'2018-08-24 13:58:35\', NULL, NULL, NULL, \'900.000000000000\'),\r\n(391, 338, 2, 3, \'800.00\', \'RUB\', \'2018-08-24 13:58:35\', NULL, NULL, NULL, \'800.000000000000\'),\r\n(392, 337, 1, 2, \'900.00\', \'RUB\', \'2018-08-24 13:58:47\', NULL, NULL, NULL, \'900.000000000000\'),\r\n(393, 337, 2, 3, \'800.00\', \'RUB\', \'2018-08-24 13:58:47\', NULL, NULL, NULL, \'800.000000000000\'),\r\n(394, 346, 1, 2, \'4500.00\', \'RUB\', \'2018-08-24 13:59:02\', NULL, NULL, NULL, \'4500.000000000000\'),\r\n(395, 346, 2, 3, \'4000.00\', \'RUB\', \'2018-08-24 13:59:02\', NULL, NULL, NULL, \'4000.000000000000\'),\r\n(396, 345, 1, 2, \'3600.00\', \'RUB\', \'2018-08-24 13:59:14\', NULL, NULL, NULL, \'3600.000000000000\'),\r\n(397, 345, 2, 3, \'3200.00\', \'RUB\', \'2018-08-24 13:59:14\', NULL, NULL, NULL, \'3200.000000000000\'),\r\n(398, 344, 1, 2, \'2700.00\', \'RUB\', \'2018-08-24 13:59:27\', NULL, NULL, NULL, \'2700.000000000000\'),\r\n(399, 344, 2, 3, \'2400.00\', \'RUB\', \'2018-08-24 13:59:27\', NULL, NULL, NULL, \'2400.000000000000\'),\r\n(400, 343, 1, 2, \'1800.00\', \'RUB\', \'2018-08-24 13:59:40\', NULL, NULL, NULL, \'1800.000000000000\'),\r\n(401, 343, 2, 3, \'1600.00\', \'RUB\', \'2018-08-24 13:59:40\', NULL, NULL, NULL, \'1600.000000000000\'),\r\n(402, 342, 1, 2, \'900.00\', \'RUB\', \'2018-08-24 13:59:59\', NULL, NULL, NULL, \'900.000000000000\'),\r\n(403, 342, 2, 3, \'800.00\', \'RUB\', \'2018-08-24 13:59:59\', NULL, NULL, NULL, \'800.000000000000\');\r\n\r\n--\r\n-- Индексы таблицы `b_catalog_price`\r\n--\r\n\r\nALTER TABLE `b_catalog_price`\r\n  ADD KEY `IXS_CAT_PRICE_PID` (`PRODUCT_ID`,`CATALOG_GROUP_ID`),\r\n  ADD KEY `IXS_CAT_PRICE_GID` (`CATALOG_GROUP_ID`),\r\n  ADD KEY `IXS_CAT_PRICE_SCALE` (`PRICE_SCALE`);\r\n[/mysql]\r\n<ul>\r\n  <li><code>ID</code> — уникальный индентификатор</li>\r\n  <li><code>PRODUCT_ID</code> — идентификатор товара</li>\r\n  <li><code>EXTRA_ID</code> — идентификатор наценки</li>\r\n  <li><code>CATALOG_GROUP_ID</code> — идентификатор типа цен</li>\r\n  <li><code>PRICE</code> — цена</li>\r\n  <li><code>CURRENCY</code> — валюта</li>\r\n</ul>\r\n[mysql]\r\n--\r\n-- Структура таблицы `b_catalog_extra`\r\n--\r\n\r\nCREATE TABLE `b_catalog_extra` (\r\n  `ID` int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n  `NAME` varchar(50) COLLATE utf8_unicode_ci NOT NULL,\r\n  `PERCENTAGE` decimal(18,2) NOT NULL\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\n--\r\n-- Дамп данных таблицы `b_catalog_extra`\r\n--\r\n\r\nINSERT INTO `b_catalog_extra` (`ID`, `NAME`, `PERCENTAGE`) VALUES\r\n(1, \'Постоянный покупатель\', \'-10.00\'),\r\n(2, \'Оптовый покупатель\', \'-20.00\');\r\n[/mysql]','2018-08-24 16:33:12',1),(184,17,'Битрикс. Что такое FUSER_ID','','','CMS, FUSER_ID, Web-разработка, Битрикс, ИдентификаторПокупателя, ИнтернетМагазин, КаталогТоваров, Корзина, Пользователь','Идентификатор покупателя (так называемый FUSER_ID) уникальный для каждого посетителя, открывшего сайт. Он у него живет в cookie, даже если он еще не делал ничего. Он позволяет работать с корзиной не авторизованным пользователям. Корзина привязывается не к идентификатору пользователя сайта, а к идентификатору покупателя магазина.','<p>\r\nИдентификатор покупателя (так называемый <code>FUSER_ID</code>) уникальный для каждого посетителя, открывшего сайт. Он у него живет в <code>cookie</code>, даже если он еще не делал ничего. Для чего он нужен? В Битрикс реализован механизм, который позволяет работать с корзиной не авторизованным пользователям. Чтобы этот механизм работал, корзина привязывается не к идентификатору пользователя сайта (<code>USER_ID</code>), а к идентификатору покупателя магазина (<code>FUSER_ID</code>), который записывается в <code>cookie</code>. Рассмотрим несколько ситуаций:\r\n<p>\r\n\r\n<h3>Ситуация первая</h3>\r\n<p>\r\nВы не авторизованный пользователь, кладёте товар в корзину — создаётся новый <code>FUSER_ID</code>, пусть это <code>FUSER_XXX</code>, который записывается в базу данных и сохраняется в <code>cookie</code>. Затем вы авторизуетесь как «пользователь Иванов». Если к идентификатору «пользователь Иванов» не привязан никакой <code>FUSER_ID</code>, то он создаётся, привязывается к идентификатору «пользователь Иванов» (записывается в базу и в <code>cookie</code>), путь это будет <code>FUSER_YYY</code>. В это же время все товары не авторизованного пользователя переносятся в корзину авторизованного пользователя: \r\n</p>\r\n[code]\r\n[red]Товары покупателя FUSER_XXX[/red] ---> [grn]Товары покупателя FUSER_YYY[/grn]\r\n[/code]\r\n<p>\r\nСоответственно, теперь к <code>FUSER_XXX</code> не будет привязано ни одного товара и <code>FUSER_XXX</code> удаляется из базы и из <code>cookie</code>.\r\n</p>\r\n\r\n<h3>Ситуация вторая</h3>\r\n<p>\r\nВы авторизованный «пользователь Иванов», вашей корзине есть товары, которые привязаны к <code>FUSER_YYY</code>. Вы решили разлогиниться. В этот момент вы становитесь не авторизованным пользователем и <code>FUSER_ID</code> из <code>cookie</code> удаляется и записывается <strong>новый</strong>, корзина пуста, т.к. именно по <code>FUSER_ID</code> осуществляется выборка товаров в корзине.\r\n</p>\r\n\r\n<h3>Ситуация третья</h3>\r\n<p>\r\nВы авторизованный «пользователь Иванов», в вашей корзине есть товары, которые привязаны к <code>FUSER_YYY</code>. Вы не собираетесь разлогиниваться, но получается так, что закончилось время жизни сессии — вы становитесь не авторизованным пользователем. Из куков не удаляется <code>FUSER_ID</code>, он остаётся таким же равным <code>FUSER_YYY</code>, т.е. получается, что вы не авторизованный пользователь с <code>FUSER_ID</code> «пользователь Иванов» в <code>cookie</code>, поэтому в корзине присутствуют товары «пользователь Иванов».\r\n</p>\r\n<p>\r\nЭто нормальная ситуация. Согласитесь, пользователю будет не очень приятно, если он набрал 50 товаров в корзину, время сессии закончилось и его товары из корзины пропали.\r\n</p>\r\n<p>\r\nТеперь представим, что за этот же компьютер садится другой пользователь, который авторизуется под аккаунтом «пользователь Петров», идентификатор покупателя <code>FUSER_ZZZ</code>. И тут возникает «первая ситуация», перенос товаров от <code>FUSER_YYY</code> к <code>FUSER_ZZZ</code>.\r\n</p>\r\n<p>\r\nВ итоге, если «пользователь Иванов», авторизуется снова (на другом компьютере или в другом браузере), то его корзина будет пуста. Т.е. «пользователь Петров» приобрёл корзину «пользователь Иванов». Если «пользователь Иванов» и «пользователь Петров», работают за разными компьютерами, то ситуации переноса корзины от одного пользователя другому никогда не произойдёт, соответственно проблему у покупателей быть не должно. \r\n</p>\r\n<div class=\"post-scriptum\">\r\n<code>FUSER_ID</code> — это идентификатор покупателя, а <code>USER_ID</code> — это идентификатор пользователя сайта, это разные сущности.\r\n</div>','2018-08-25 11:08:36',1),(185,17,'Битрикс. Создание простого компонента. Часть 1','','','$arParams, $arResult, .description.php, .parameters.php, CMS, Web-разработка, Битрикс, Компонент, ШаблонКомпонента, ЭлементИнфоблока, $arComponentDescription, $arComponentParameters','Давайте создадим простой компонент, который умеет выводить элемент каталога (товар) по его идентификатору. В первую очередь нам нужно свое пространство имен, например demo. Для этого создаем папку /bitrix/components/demo, а внутри нее делаем папку компонента catalog.element. И в ней, в свою очередь, создаем следующие папки и файлы…','<p>\r\nДавайте создадим простой компонент, который умеет выводить элемент каталога (товар) по его идентификатору. В первую очередь нужно создать свое пространство имен, например <code>demo</code>. Для этого создаем папку <code>/bitrix/components/demo</code>, а внутри нее делаем папку компонента <code>catalog.element</code>. И в ней, в свою очередь, создаем следующие папки и файлы:\r\n</p>\r\n<ul>\r\n  <li>файл <code>component.php</code></li>\r\n  <li>файл <code>.description.php</code></li>\r\n  <li>файл <code>.parameters.php</code></li>\r\n  <li>папка <code>templates</code></li>\r\n</ul>\r\n[code]\r\n[bitrix]\r\n    [components]\r\n        [bitrix]\r\n            [advertising.banner]\r\n            ..........\r\n        [demo]\r\n            [catalog.element]\r\n                [templates]\r\n                    [.default]\r\n                        [grn]template.php\r\n                component.php\r\n                .description.php\r\n                .parameters.php[/grn]\r\n[/code]\r\n<p>\r\nВ файле <code>component.php</code> размещаем код, получающий из базы данных элемент инфоблока по идентификатору:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл bitrix/components/demo/catalog.element/component.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n// массив результата работы компонента\r\n$arResult = array();\r\nif (CModule::IncludeModule(\'iblock\')) {\r\n    // получаем из базы данных элемент инфоблока по идентификатору;\r\n    // идентификатор получаем из входных параметров компонента\r\n    $PRODUCT_ID = (int)$arParams[\'PRODUCT_ID\'];\r\n    $result = CIBlockElement::GetByID($PRODUCT_ID);\r\n    if ($product = $result->GetNext()) {\r\n        $arResult[\'GENERAL\'] = $product;\r\n    }\r\n}\r\n// подключаем шаблон компонента\r\n$this->IncludeComponentTemplate();\r\n[/php]\r\n<p>\r\nВ файле <code>.description.php</code> задаем имя и описание компонента и задаем расположение компонента в визуальном редакторе:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл bitrix/components/demo/catalog.element/.description.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n$arComponentDescription = array(\r\n    \'NAME\' => \'Товар каталога\',\r\n    \'DESCRIPTION\' => \'Выводит товар каталога\',\r\n    \'PATH\' => array(\r\n        \'ID\' => \'demo\',\r\n        \'NAME\' => \'Мои компоненты\',\r\n        \'CHILD\' => array(\r\n            \'ID\' => \'demo_catalog\',\r\n            \'NAME\' => \'Каталог товаров\'\r\n        )\r\n    ),\r\n    \'ICON\' => \'/images/icon.gif\'\r\n);\r\n[/php]\r\n<p>\r\nКлючи массива <code>$arComponentDescription</code>:\r\n</p>\r\n<ul>\r\n  <li><code>NAME</code> — название компонента;</li>\r\n  <li><code>DESCRIPTION</code> — описание компонента;</li>\r\n  <li><code>ICON</code> — путь к иконке компонента относительно папки компонента;</li>\r\n  <li><code>PATH</code> — расположение компонента в виртуальном дереве компонента в визуальном редакторе. Значением этого элемента должен быть массив, имеющий ключи:\r\n    <ul>\r\n      <li><code>ID</code> — код ветки дерева</li>\r\n      <li><code>NAME</code> — название ветки дерева</li>\r\n      <li><code>CHILD</code> — подчиненная ветка. В элементе с ключем <code>CHILD</code> может быть задана подчиненная ветка дерева с той же структурой, что и родительская ветка. Названия первого уровня <code>content</code> (контент), <code>service</code> (сервисы), <code>communication</code> (общение), <code>e-store</code> (магазин), <code>utility</code> (служебные) стандартизованы и их задавать не следует. Если ключ <code>PATH</code> не задан, то компонент не будет присутствовать в визуальном редакторе.</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n[php]\r\n<?php\r\n/*\r\n * Файл bitrix/components/demo/catalog.element/.parameters.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n$arComponentParameters = array(\r\n    \'GROUPS\' => array(),\r\n    \'PARAMETERS\' => array(\r\n        \'PRODUCT_ID\' => array(\r\n            \'PARENT\' => \'BASE\', // код группы, если отсутствует, подразумевается ADDITIONAL_SETTINGS\r\n            \'NAME\' => \'Идентификатор товара\', // название параметра на текущем языке\r\n            \'TYPE\' => \'STRING\', // тип элемента управления, в котором будет устанавливаться параметр\r\n            \'MULTIPLE\' => \'N\',  // одиночное/множественное значение (N/Y)\r\n            \'DEFAULT\' => \'346\', // значение по умолчанию\r\n            \'REFRESH\' => \'Y\',   // перегружать настройки или нет после выбора (N/Y)\r\n        ),\r\n    ),\r\n);\r\n[/php]\r\n<p>\r\nПараметры в визуальном параметре группируются, ключ <code>GROUPS</code> задает массив групп параметров компонента. Имеется предопределенный набор групп:\r\n</p>\r\n<table class=\"data-table\">       \r\n    <tr>\r\n        <th>Код</td>\r\n        <th>Сортировка</th>\r\n        <th>Название</th>\r\n        <th>Описание</th>\r\n    </tr>\r\n    <tr>\r\n        <td><code>BASE</code></td>\r\n        <td>100</td>\r\n        <td>Основные параметры</td> \r\n        <td>Базовые параметры для работы компонента</td>\r\n    </tr>\r\n    <tr>\r\n        <td><code>DATA_SOURCE</code></td>\r\n        <td>200</td>\r\n        <td>Источник данных</td>\r\n        <td>Параметры, указывающие, откуда выбирать данные для компонента (к примеру, для компонент модуля Инфоблоки это тип и <code>ID</code> инфоблока).</td>\r\n    </tr>                                            \r\n    <tr>\r\n        <td><code>VISUAL</code></td>\r\n        <td>300</td>\r\n        <td>Настройки внешнего вида</td>\r\n        <td>Сюда предполагается размещать параметры, отвечающие за внешний вид.</td>\r\n    </tr>                                  \r\n    <tr>\r\n        <td><code>USER_CONSENT</code></td>\r\n        <td>350</td>\r\n        <td>Согласие пользователя</td>\r\n        <td>Настрйока параметров на получение согласия пользователя, согласно законодательству РФ.</td>\r\n    </tr>\r\n    <tr>\r\n        <td><code>URL_TEMPLATES</code></td>\r\n        <td>400</td>\r\n        <td>Шаблоны ссылок</td>\r\n        <td>Служебная</td>\r\n    </tr>                                 \r\n    <tr>\r\n        <td><code>SEF_MODE</code></td>\r\n        <td>500</td>\r\n        <td>Управление адресами страниц</td>\r\n        <td>Группа для всех параметров, связанных с использованием ЧПУ.</td>\r\n    </tr>    \r\n    <tr>\r\n        <td><code>AJAX_SETTINGS</code></code></td>\r\n        <td>550</td>\r\n        <td>Управление режимом AJAX</td>\r\n        <td> Все, что касается использования AJAX.</td>\r\n    </tr>                                \r\n    <tr>\r\n        <td><code>CACHE_SETTINGS</code></td>\r\n        <td>600</td>\r\n        <td>Настройки кеширования</td>\r\n        <td>Появляется при указании параметра <code>CACHE_TIME</code>.</td>\r\n    </tr>\r\n    <tr>\r\n        <td><code>ADDITIONAL_SETTINGS</code></td>\r\n        <td>700</td>\r\n        <td>Дополнительные настройки</td>\r\n        <td>Эта группа появляется, например, при указании параметра <code>SET_TITLE</code>.</td>\r\n    </tr>\r\n</table>\r\n<p>\r\nКлюч <code>PARAMETERS</code> задает массив параметров компонента. У нас единственный параметр, который задает идентификатор элемента инфоблока.\r\n</p>\r\n<p>\r\nИ наконец, файл шаблона компонента, который отвечает за показ элемента инфоблока:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл bitrix/components/demo/catalog.element/templates/.default/template.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n?>\r\n\r\n<h1><?= $arResult[\'GENERAL\'][\'NAME\']; ?></h1>\r\n\r\n<?php if (!empty($arResult[\'GENERAL\'][\'DETAIL_TEXT\'])): ?>\r\n    <div class=\"description\">\r\n    <?= $arResult[\'GENERAL\'][\'DETAIL_TEXT\']; ?>   \r\n    </div>\r\n<?php endif; ?>\r\n\r\n<?php if (!empty($arResult[\'GENERAL\'][\'DETAIL_PICTURE\'])): ?>\r\n    <?php $image = CFile::GetPath($arResult[\'GENERAL\'][\'DETAIL_PICTURE\']); ?>\r\n    <img src=\"<?= $image; ?>\" alt=\"\" />\r\n<?php endif; ?>\r\n[/phtml]\r\n<p>\r\nВ принципе, компонент готов. Давайте создадим раздел сайта <code>demo</code> и откроем страницу <code>/demo/index.php</code> в визуальном редакторе:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/185/1.jpg\" class=\"zoom\"><img src=\"/files/blog/185/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПосле размещения компонента на странице появится форма параметров компонента:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/185/2.jpg\" class=\"zoom\"><img src=\"/files/blog/185/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nА файл <code>/demo/index.php</code> будет содержать код вызова компонента:\r\n</p>\r\n[phtml]\r\n<?php require $_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\"; ?>\r\n\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n	\"demo:catalog.element\",\r\n	\"\",\r\n	Array(\r\n		\"PRODUCT_ID\" => \"346\"\r\n    )\r\n);\r\n?>\r\n\r\n<?php require $_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\"; ?>\r\n[/phtml]','2018-08-26 10:02:01',1),(186,17,'Битрикс. Создание простого компонента. Часть 2','','','$arParams, $arResult, .description.php, .parameters.php, CMS, Web-разработка, Битрикс, Компонент, ШаблонКомпонента, ЭлементИнфоблока','Создадим еще один компонент, который выводит на странице случайный элемент инфоблока. В настройках можно выбрать тип инфоблока, сам инфоблок(и) и раздел инфоблока, из которого будет выбран случайный элемент. Практической ценности не имеет, сделан исключительно в целях изучения Битрикс.','<p>\r\nКомпонент выводит на странице случайный элемент инфоблока. В настройках можно выбрать тип инфоблока, сам инфоблок(и) и раздел инфоблока, из которого будет выбран случайный элемент.\r\n</p>\r\n<div class=\"note\">\r\nКомпонент практической ценности не имеет, сделан исключительно в целях изучения Битрикс.\r\n</div>\r\n<p>\r\nОписание компонента:\r\n[php]\r\n<?php\r\n/*\r\n * Файл bitrix/components/demo/element.random/.description.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$arComponentDescription = array(\r\n    \'NAME\' => \'Случайный элемент\',\r\n    \'DESCRIPTION\' => \'Выводит случайный элемент выбранного инфоблока\',\r\n    \'PATH\' => array(\r\n        \'ID\' => \'demo\',\r\n        \'NAME\' => \'Мои компоненты\',\r\n        \'CHILD\' => array(\r\n            \'ID\' => \'demo_infoblock\',\r\n            \'NAME\' => \'Инфоблоки\'\r\n        )\r\n    ),\r\n    \'ICON\' => \'/images/icon.gif\'\r\n);\r\n[/php]\r\n<p>\r\nНастройки компонента:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл bitrix/components/demo/element.random/.parameters.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n// проверяем, установлен ли модуль «Информационные блоки»; если да — то подключаем его\r\nif (!CModule::IncludeModule(\'iblock\'))\r\n    return;\r\n\r\n/*\r\n * получаем массив всех типов инфоблоков — для возможности выбора\r\n */\r\n$arInfoBlockTypes = CIBlockParameters::GetIBlockTypes();\r\n\r\n/*\r\n * получаем массив инфоблоков — для возможности выбора; фильтруем их по\r\n * выбранному типу и по активности\r\n */\r\n$arInfoBlocks = array(\r\n    \'-\' => \'(любой)\',\r\n);\r\n$result = CIBlock::GetList(\r\n    array(\'SORT\' => \'ASC\'),\r\n    array(\r\n        \'TYPE\' => $arCurrentValues[\'IBLOCK_TYPE\'],\r\n        \'ACTIVE\' => \'Y\'\r\n    )\r\n);\r\nwhile ($iblock = $result->Fetch()) {\r\n    $arInfoBlocks[$iblock[\'ID\']] = \'[\'.$iblock[\'ID\'].\'] \'.$iblock[\'NAME\'];\r\n}\r\n\r\n/*\r\n * получаем массив разделов инфоблока (инфоблоков) — для возможности выбора\r\n */\r\n$arInfoBlockSections = array(\r\n    \'-\' => \'(любой)\',\r\n);\r\nif (!empty($arCurrentValues[\'IBLOCKS\'])) {\r\n    $result = CIBlockSection::GetList(\r\n        array(\'SORT\' => \'ASC\'),\r\n        array(\r\n            \'IBLOCK_TYPE\' => $arCurrentValues[\'IBLOCK_TYPE\'], // тип выбранного инфоблока\r\n            \'IBLOCK_ID\' => $arCurrentValues[\'IBLOCKS\'], // выбранные инфоблоки\r\n            \'IBLOCK_ACTIVE\' => \'Y\', // активные инфоблоки\r\n            \'SECTION_ID\' => false, // только корневые разделы\r\n            \'ACTIVE\' => \'Y\' // активные разделы\r\n        )\r\n    );\r\n    while ($section = $result->Fetch()) {\r\n        $arInfoBlockSections[$section[\'ID\']] = \'[\'.$section[\'ID\'].\'] \'.$section[\'NAME\'];\r\n    }\r\n}\r\n\r\n/*\r\n * настройки компонента\r\n */\r\n$arComponentParameters = array(\r\n    \'GROUPS\' => array(), // используем предопределенные группы\r\n    \'PARAMETERS\' => array(\r\n        \'IBLOCK_TYPE\' => array( // выбор типа инфоблока\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Выберите тип инфоблока\',\r\n            \'TYPE\' => \'LIST\',\r\n            \'VALUES\' => $arInfoBlockTypes,\r\n            \'REFRESH\' => \'Y\',\r\n        ),\r\n        \'IBLOCKS\' => array( // выбор самого инфоблока\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Выберите инфоблок(и)\',\r\n            \'TYPE\' => \'LIST\',\r\n            \'VALUES\' => $arInfoBlocks,\r\n            \'MULTIPLE\'=>\'Y\',\r\n            \'REFRESH\' => \'Y\',\r\n        ),\r\n        \'PARENT_SECTION\' => array(  // выбор раздела инфоблока\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Выберите раздел(ы) инфоблока\',\r\n            \'TYPE\' => \'LIST\',\r\n            \'VALUES\' => $arInfoBlockSections,\r\n            \'MULTIPLE\'=>\'Y\',\r\n            \'REFRESH\' => \'Y\',\r\n        ),\r\n        \'CACHE_TIME\'  =>  array(\'DEFAULT\' => 180),\r\n        \'CACHE_GROUPS\' => array(\r\n            \'PARENT\' => \'CACHE_SETTINGS\',\r\n            \'NAME\' => \'Учитывать права доступа\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n    ),\r\n);\r\n[/php]\r\n<div class=\"note\">\r\n<p>\r\nСуществуют особые параметры, которые стандартизованы и которые нет необходимости описывать полностью. Достаточно указать, что они есть. Например,\r\n</p>\r\n[php]\r\n\"SET_TITLE\" => array(),\r\n\"CACHE_TIME\" => array(),\r\n[/php]\r\n<p>\r\nПервый из указанных параметров указывает, следует ли компоненту установить заголовок страницы, а второй — все настройки, связанные с кешированием.\r\n</p>\r\n</div>\r\n<p>\r\nИсходный код компонента:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл bitrix/components/demo/element.random/component.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var CBitrixComponent $this */\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @var string $componentPath */\r\n/** @var string $componentName */\r\n/** @var string $componentTemplate */\r\n/** @global CDatabase $DB */\r\n/** @global CUser $USER */\r\n/** @global CMain $APPLICATION */\r\n\r\nif (!isset($arParams[\'CACHE_TIME\']))\r\n    $arParams[\'CACHE_TIME\'] = 180;\r\n\r\nif (!is_array($arParams[\'IBLOCKS\']))\r\n    $arParams[\'IBLOCKS\'] = array($arParams[\'IBLOCKS\']);\r\n\r\n// определяем, из каких инфоблоков будем получать случайный элемент:\r\n// перебираем все инфоблоки, переданные в параметрах вызова компонента\r\n$arInfoBlockFilter = array();\r\nforeach ($arParams[\'IBLOCKS\'] as $IBLOCK_ID) {\r\n    $IBLOCK_ID = (int)$IBLOCK_ID;\r\n    if ($IBLOCK_ID > 0)\r\n        $arInfoBlockFilter[] = $IBLOCK_ID;\r\n}\r\n\r\n// если в вызове компонента не был указано, из каких инфоблоков получать\r\n// случаный элемент, значит нужно выбирать из всех, которые принадлежат\r\n// выбранному типу инфоблоков\r\nif (empty($arInfoBlockFilter)) {\r\n    // подключаем модуль «Информационные блоки»\r\n    if (!CModule::IncludeModule(\'iblock\')) {\r\n        ShowError(\'Модуль «Информационные блоки» не установлен\');\r\n        return;\r\n    }\r\n    $result = CIBlock::GetList(\r\n        array(), // сортировка не важна\r\n        array(\r\n            \'TYPE\' => $arParams[\'IBLOCK_TYPE\'], // тип инфоблока\r\n            \'LID\' => SITE_ID, // идентификатор текущего сайта\r\n            \'ACTIVE\' => \'Y\', // только активные инфоблоки\r\n        )\r\n    );\r\n    if ($iblock = $result->Fetch())\r\n        $arInfoBlockFilter[] = $iblock[\'ID\'];\r\n}\r\n\r\nunset($arParams[\'IBLOCK_TYPE\']);\r\n$arParams[\'IBLOCKS\'] = $arInfoBlockFilter;\r\n\r\nif (!empty($arInfoBlockFilter)\r\n    && $this->StartResultCache(false, ($arParams[\'CACHE_GROUPS\']===\'N\'? false: $USER->GetGroups()))) {\r\n    // подключаем модуль «Информационные блоки»\r\n    if (!CModule::IncludeModule(\'iblock\')) {\r\n        $this->AbortResultCache();\r\n        ShowError(\'Модуль «Информационные блоки» не установлен\');\r\n        return;\r\n    }\r\n    // какие поля выбираем\r\n    $arSelect = array(\r\n        \'ID\',\r\n        \'IBLOCK_ID\',\r\n        \'NAME\',\r\n        \'PREVIEW_PICTURE\',\r\n        \'PREVIEW_TEXT\',\r\n        \'PREVIEW_TEXT_TYPE\',\r\n        \'DETAIL_PICTURE\',\r\n        \'DETAIL_TEXT\',\r\n        \'DETAIL_TEXT_TYPE\'\r\n    );\r\n    // условия выборки элемента\r\n    $arFilter = array(\r\n        \'IBLOCK_ID\' => $arParams[\'IBLOCKS\'], // из каких инфоблоков\r\n        \'ACTIVE_DATE\' => \'Y\', // фильтр по датам активности\r\n        \'ACTIVE\' => \'Y\',  // только активные элементы\r\n        \'CHECK_PERMISSIONS\' => \'Y\', // с контролем доступа\r\n    );\r\n    if (is_array($arParams[\'PARENT_SECTION\'])) { // список с возможностью выбора нескольких элементов\r\n        if (!empty($arParams[\'PARENT_SECTION\'])) {\r\n            $arFilter[\'SECTION_ID\'] = $arParams[\'PARENT_SECTION\'];\r\n            $arFilter[\'INCLUDE_SUBSECTIONS\'] = \'Y\';\r\n        }\r\n    } else { // список или текстовое поле, когда можно задать единственный элемент\r\n        $arParams[\'PARENT_SECTION\'] = (int)$arParams[\'PARENT_SECTION\'];\r\n        if ($arParams[\'PARENT_SECTION\']) {\r\n            $arFilter[\'SECTION_ID\'] = $arParams[\'PARENT_SECTION\'];\r\n            $arFilter[\'INCLUDE_SUBSECTIONS\'] = \'Y\';\r\n        }\r\n    }\r\n    // случайная сортировка\r\n    $arSort = array(\r\n        \'RAND\'=>\'ASC\',\r\n    );\r\n    /*\r\n     * выбираем случайный элемент\r\n     */\r\n    $rsIBlockElement = CIBlockElement::GetList($arSort, $arFilter, false, false, $arSelect);\r\n    if ($arResult = $rsIBlockElement->GetNext()) {\r\n        // получаем подробную информацию о картинке по ее идентификатору\r\n        $arResult[\'PICTURE\'] = CFile::GetFileArray($arResult[\'DETAIL_PICTURE\']);\r\n\r\n        // получаем SEO-свойства выбранного элемента\r\n        $ipropValues = new \\Bitrix\\Iblock\\InheritedProperty\\ElementValues($arResult[\'IBLOCK_ID\'], $arResult[\'ID\']);\r\n        $arResult[\'IPROPERTY_VALUES\'] = $ipropValues->getValues();\r\n\r\n        if ($arResult[\'PICTURE\']) {\r\n            // атрибут alt тега img\r\n            $arResult[\'PICTURE\'][\'ALT\'] = $arResult[\'IPROPERTY_VALUES\'][\'ELEMENT_PREVIEW_PICTURE_FILE_ALT\'];\r\n            if ($arResult[\'PICTURE\'][\'ALT\'] == \'\') {\r\n                $arResult[\'PICTURE\'][\'ALT\'] = $arResult[\'NAME\'];\r\n            }\r\n            // атрибут title тега img\r\n            $arResult[\'PICTURE\'][\'TITLE\'] = $arResult[\'IPROPERTY_VALUES\'][\'ELEMENT_PREVIEW_PICTURE_FILE_TITLE\'];\r\n            if ($arResult[\'PICTURE\'][\'TITLE\'] == \'\') {\r\n                $arResult[\'PICTURE\'][\'TITLE\'] = $arResult[\'NAME\'];\r\n            }\r\n        }\r\n        $this->SetResultCacheKeys(array());\r\n        $this->IncludeComponentTemplate();\r\n    } else {\r\n        $this->AbortResultCache();\r\n    }\r\n}\r\n[/php]\r\n<div class=\"note\">\r\n[php]\r\nbool CBitrixComponent::StartResultCache(\r\n   int cacheTime,\r\n   string additionalCacheID,\r\n   string cachePath\r\n)\r\n[/php]\r\n<p>\r\nМетод поддержки внутреннего кеширования компонента. Возвращает <code>true</code> в случае, если кеш недействителен, или <code>false</code> в противном случае.\r\n</p>\r\n<p>\r\nЕсли кеш действителен, метод отправляет на экран его содержимое, заполняет <code>$arResult</code> и возвращает <code>false</code>. Если кеш недействителен, метод возвращает <code>true</code>, кеширование завершается и кеш сохраняется при вызове методов\r\n</p>\r\n<ul>\r\n  <li><code>CBitrixComponent::IncludeComponentTemplate()</code></li>\r\n  <li>или</li>\r\n  <li><code>CBitrixComponent::ShowComponentTemplate()</code></li>\r\n</ul>\r\n<p>\r\nсразу после подключения шаблона компонента.\r\n</p>\r\n<p>\r\nПараметры\r\n</p>\r\n<ul>\r\n  <li><code>cacheTime</code> — Время кеширования в секундах. Если этот параметр равен <code>false</code>, то время кеширования берется из входного параметра <code>$arParams[\'CACHE_TIME\']</code>. Необязательный.</li>\r\n  <li><code>additionalCacheID</code> — Кеш зависит от текущего сайта (<code>SITE_ID</code>), имени компонента, имени шаблона, входных параметров <code>$arParams</code>. Если кеш должен зависеть от каких-либо дополнительных параметров, то их необходимо передать сюда в виде строки. По умолчанию параметр равен <code>false</code>, т.е. кеш зависит только от текущего сайта <code>SITE_ID</code>, имени компонента, имени шаблона и входных параметров <code>$arParams</code>. Необязательный.</li>\r\n  <li><code>cachePath</code> — Путь к файлу кеша относительно папки кешей. Необязательный.</li>\r\n<ul>\r\n</div>\r\n<p>\r\nШаблон компонента:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл bitrix/components/demo/element.random/templates/template.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n$frame = $this->createFrame()->begin(\'Загрузка\');\r\n?>\r\n\r\n<h1><?= $arResult[\'NAME\']; ?></h1>\r\n<?php if (!empty($arResult[\'PICTURE\'])): ?>\r\n    <img src=\'<?= $arResult[\'PICTURE\'][\'SRC\']; ?>\'\r\n         width=\'<?= $arResult[\'PICTURE\'][\'WIDTH\']; ?>\'\r\n         height=\'<?= $arResult[\'PICTURE\'][\'HEIGHT\']; ?>\'\r\n         alt=\'<?= $arResult[\'PICTURE\'][\'ALT\']; ?>\'\r\n         title=\'<?= $arResult[\'PICTURE\'][\'TITLE\']; ?>\' /> \r\n<?php endif; ?>\r\n\r\n<?php if (!empty($arResult[\'DETAIL_TEXT\'])): ?>\r\n    <div class=\"description\">\r\n        <?php\r\n        if ($arResult[\'DETAIL_TEXT_TYPE\'] == \'text\') {\r\n            $arResult[\'DETAIL_TEXT\'] = nl2br($arResult[\'DETAIL_TEXT\']);\r\n        }\r\n        echo $arResult[\'DETAIL_TEXT\'];\r\n        ?>\r\n    </div>\r\n<?php endif; ?>\r\n    \r\n<?php\r\n$frame->end();\r\n?>\r\n[/phtml]\r\n<p>\r\nМассив <code>$arResult</code>, доступный в шаблоне:\r\n</p>\r\n[code]\r\nArray\r\n(\r\n    [ID] => 347\r\n    [~ID] => 347\r\n    [IBLOCK_ID] => 5\r\n    [~IBLOCK_ID] => 5\r\n    [NAME] => Английский бульдог\r\n    [~NAME] => Английский бульдог\r\n    [PREVIEW_PICTURE] => 1006\r\n    [~PREVIEW_PICTURE] => 1006\r\n    [PREVIEW_TEXT] => По названию понятно, что бульдог был предназначен для травли быков...\r\n    [~PREVIEW_TEXT] => По названию понятно, что бульдог был предназначен для травли быков...\r\n    [PREVIEW_TEXT_TYPE] => text\r\n    [~PREVIEW_TEXT_TYPE] => text\r\n    [DETAIL_PICTURE] => 1007\r\n    [~DETAIL_PICTURE] => 1007\r\n    [DETAIL_TEXT] => <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>\r\n                     <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>\r\n                     <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>\r\n    [~DETAIL_TEXT] => <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>\r\n                      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>\r\n                      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>\r\n    [DETAIL_TEXT_TYPE] => html\r\n    [~DETAIL_TEXT_TYPE] => html\r\n\r\n    [grn][PICTURE] => Array\r\n        (\r\n            [ID] => 1007\r\n            [TIMESTAMP_X] => 30.08.2018 14:23:03\r\n            [MODULE_ID] => iblock\r\n            [HEIGHT] => 500\r\n            [WIDTH] => 500\r\n            [FILE_SIZE] => 102647\r\n            [CONTENT_TYPE] => image/jpeg\r\n            [SUBDIR] => iblock/417\r\n            [FILE_NAME] => 41701ec78018ae45bfdc4bccbdf3b397.jpg\r\n            [ORIGINAL_NAME] => АнглийскийБульдог.jpg\r\n            [DESCRIPTION] => \r\n            [HANDLER_ID] => \r\n            [EXTERNAL_ID] => f950b21aca61a9752a11bedf642e00ce\r\n            [~src] => \r\n            [SRC] => /upload/iblock/417/41701ec78018ae45bfdc4bccbdf3b397.jpg\r\n            [ALT] => Английский бульдог. Породы собак\r\n            [TITLE] => Английский бульдог. Породы собак\r\n        )[/grn]\r\n\r\n    [red][IPROPERTY_VALUES] => Array\r\n        (\r\n            [ELEMENT_META_KEYWORDS] => английский бульдог, породы собак\r\n            [ELEMENT_META_DESCRIPTION] => Английский бульдог. Породы собак\r\n            [ELEMENT_PREVIEW_PICTURE_FILE_ALT] => Английский бульдог. Породы собак\r\n            [ELEMENT_PREVIEW_PICTURE_FILE_TITLE] => Английский бульдог. Породы собак\r\n            [ELEMENT_DETAIL_PICTURE_FILE_ALT] => Английский бульдог. Породы собак\r\n            [ELEMENT_DETAIL_PICTURE_FILE_TITLE] => Английский бульдог. Породы собак\r\n            [SECTION_META_KEYWORDS] => Домашние животные, породы собак\r\n            [SECTION_META_DESCRIPTION] => Домашние животные. Породы собак.\r\n        )[/red]\r\n\r\n)\r\n[/code]\r\n<p>\r\nПример вызова компонента:\r\n</p>\r\n[phtml]\r\n<?php require $_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\"; ?>\r\n\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"demo:element.random\", \r\n    \"\", \r\n    array(\r\n        \"CACHE_GROUPS\" => \"Y\",\r\n        \"CACHE_TIME\" => \"180\",\r\n        \"CACHE_TYPE\" => \"A\",\r\n        \"IBLOCKS\" => array(\r\n            0 => \"5\",\r\n        ),\r\n        \"IBLOCK_TYPE\" => \"content\",\r\n        \"PARENT_SECTION\" => array(\r\n            0 => \"28\",\r\n        ),\r\n        \"COMPONENT_TEMPLATE\" => \".default\"\r\n    ),\r\n    false\r\n);\r\n?>\r\n\r\n<?php require $_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\"; ?>\r\n[/phtml]\r\n<p>\r\n<a href=\"/files/blog/186/1.jpg\" class=\"zoom\"><img src=\"/files/blog/186/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/186/2.jpg\" class=\"zoom\"><img src=\"/files/blog/186/2.jpg\" alt=\"\" /></a>\r\n</p>','2018-08-28 15:12:24',1),(187,17,'Битрикс. Узелки на память','','','','Узелки на память: подключение CMS, корневые разделы инфоблока','<h3>Подключение CMS</h3>\r\n[php]\r\n// если нужен запуск только из командной строки\r\nif (php_sapi_name() !== \'cli\') die(\'Access denied\');\r\n \r\ndefine(\'LANGUAGE_ID\', \'s1\');\r\ndefine(\'NO_KEEP_STATISTIC\', true);\r\ndefine(\'NOT_CHECK_PERMISSIONS\', true);\r\nrequire $_SERVER[\'DOCUMENT_ROOT\'].\'/bitrix/modules/main/include/prolog_before.php\';\r\n[/php]\r\n\r\n<h3>Корневые разделы инфоблока</h3>\r\n[php]\r\n$arSelect = array(\r\n    \'ID\',\r\n    \'IBLOCK_ID\',\r\n    \'NAME\',\r\n    \'PICTURE\',\r\n    \'DESCRIPTION\',\r\n    \'DESCRIPTION_TYPE\',\r\n    \'SECTION_PAGE_URL\'\r\n);\r\n$arFilter = array(\r\n    \'IBLOCK_ID\' => $arParams[\'IBLOCK_ID\'],\r\n    \'SECTION_ID\' => false, // корневые разделы\r\n    \'ACTIVE\' => \'Y\',  // только активные разделы\r\n    \'CHECK_PERMISSIONS\' => \'Y\', // с контролем доступа\r\n);\r\n$result = CIBlockSection::GetList(\r\n    Array(\'SORT\' => \'ASC\'),\r\n    $arFilter,\r\n    false,\r\n    $arSelect,\r\n    false\r\n);\r\n$arRootSections = array();\r\nwhile ($item = $result->GetNext()) {\r\n    $arRootSections[] = $item;\r\n}\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [0] => Array\r\n        (\r\n            [ID] => 28\r\n            [IBLOCK_ID] => 5\r\n            [NAME] => Породы собак\r\n            [PICTURE] => 1018\r\n            [DESCRIPTION] => Более 20 тысяч лет назад первобытный человек...\r\n            [DESCRIPTION_TYPE] => text\r\n            [SECTION_PAGE_URL] => /articles/porody-sobak/\r\n            [CODE] => porody-sobak\r\n            [IBLOCK_TYPE_ID] => content\r\n            [IBLOCK_CODE] => articles\r\n            [IBLOCK_EXTERNAL_ID] => \r\n            [GLOBAL_ACTIVE] => Y\r\n            [SORT] => 500\r\n        )\r\n    [1] => Array\r\n        (\r\n            [ID] => 29\r\n            [IBLOCK_ID] => 5\r\n            [NAME] => Породы кошек\r\n            [PICTURE] => 1016\r\n            [DESCRIPTION] => Быть может, кошка и не лучший друг человека... \r\n            [DESCRIPTION_TYPE] => text\r\n            [SECTION_PAGE_URL] => /articles/porody-koshek/\r\n            [CODE] => porody-koshek\r\n            [IBLOCK_TYPE_ID] => content\r\n            [IBLOCK_CODE] => articles\r\n            [IBLOCK_EXTERNAL_ID] => \r\n            [GLOBAL_ACTIVE] => Y\r\n            [SORT] => 500\r\n        )\r\n)\r\n[/code]\r\n\r\n<h3>Принадлежит ли пользователь группе</h3>\r\n[php]\r\n// для любого пользователя\r\nif (in_array($group_id, CUser::GetUserGroup($user_id))) {\r\n    echo \'Пользователь принадлежит группе\';\r\n}\r\n\r\n// для текущего пользователя\r\nif (in_array($group_id, $USER->GetUserGroupArray())) {\r\n    echo \'Пользователь принадлежит группе\';\r\n}\r\n[/php]','2018-08-31 13:53:13',0),(188,17,'Битрикс. Работа с шаблонами SEO','','','CMS, SEO, Web-разработка, Битрикс, Инфоблок, РазделИнфоблока, Шаблон, ЭлементИнфоблока','Шаблоны SEO данных можно задавать как для всего инфоблока (т.е. для всех его разделов и элементов), так и для конкретных разделов, или элементов нужного раздела. Настройка может быть сделана для всего инфоблока, а потом для конкретного раздела/элемента переопределена на свою персональную.','<p>\r\nШаблоны SEO данных можно задавать как для всего инфоблока (т.е. для всех его разделов и элементов), так и для конкретных разделов, или элементов нужного раздела. Настройка может быть сделана для всего инфоблока, а потом для конкретного раздела/элемента переопределена на свою персональную. Все эти настройки выполняются на закладке SEO формы создания/редактирования соответственно инфоблока, раздела или элемента.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/188/1.jpg\" class=\"zoom\" title=\"SEO шаблоны инфоблока\"><img src=\"/files/blog/188/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/188/2.jpg\" class=\"zoom\" title=\"SEO шаблоны раздела инфоблока\"><img src=\"/files/blog/188/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/188/3.jpg\" class=\"zoom\" title=\"SEO шаблоны элемента инфоблока\"><img src=\"/files/blog/188/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nСодержимое закладки SEO для инфоблока и для раздела полностью идентично. В ней задаются шаблоны заголовков, ключевых слов, описаний для разделов и для элементов, а также шаблоны тегов для изображений разделов и элементов. На закладке SEO формы редактирования элементов присутствуют только те настройки, которые касаются самих элементов и их изображений.\r\n</p>\r\n<p>\r\nКроме текста можно использовать специальные конструкции в фигурных скобках:\r\n</p>\r\n<ul>\r\n  <li><code>{=this.Code}</code> — символьный код раздела/элемента</li>\r\n  <li><code>{=iblock.PreviewText}</code> — описание инфоблока</li>\r\n  <li><code>{=this.sections.name}</code> — названия родительских разделов</li>\r\n  <li><code>{=this.property.COLOR}</code>  — свойство инфоблока</li>\r\n  <li><code>{=lower this.Name}</code> — приведет значение к нижнему регистру</li>\r\n  <li><code>{=concat this.sections.name \" / \"}</code> — названия родительских разделов будут соединены с помощью слэша</li>\r\n</ul>\r\n<p>\r\nПример посложнее:\r\n</p>\r\n[code]\r\nКупить [red]{=this.Name} {=concat [/red][grn]{=distinct this.catalog.sku.property.color \", \"}[/grn][red]}[/red] по низким\r\nценам. От [red]{=min this.catalog.sku.price.BASE}[/red] до [red]{=max this.catalog.sku.price.BASE}[/red]\r\n[/code]\r\n[code]\r\nКупить платье синее, зеленое, черное по низким ценам. От 1000 руб. до 2000 руб. \r\n[/code]\r\n\r\n<h2>Работа с шаблонами SEO свойств инфоблоков</h2>\r\n<p>\r\nПолучить SEO шаблоны для инфоблока с идентификатором <code>$iblockId</code>:\r\n</p>\r\n[php]\r\n$ipropIblockTemplates = new \\Bitrix\\Iblock\\InheritedProperty\\IblockTemplates($iblockId);\r\n$templates = $ipropIblockTemplates->findTemplates();\r\nprint_r($templates);\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [grn][SECTION_META_KEYWORDS] => Array\r\n        (\r\n            [ID] => 37\r\n            [CODE] => SECTION_META_KEYWORDS\r\n            [TEMPLATE] => {=lower this.Name} {=lower iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => N\r\n        )\r\n    [SECTION_META_DESCRIPTION] => Array\r\n        (\r\n            [ID] => 38\r\n            [CODE] => SECTION_META_DESCRIPTION\r\n            [TEMPLATE] => {=this.Name}. {=iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => N\r\n        )\r\n    [SECTION_META_TITLE] => Array\r\n        (\r\n            [ID] => 41\r\n            [CODE] => SECTION_META_TITLE\r\n            [TEMPLATE] => {=this.Name}. {=iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => N\r\n        )[/grn]\r\n    [red][ELEMENT_META_TITLE] => Array\r\n        (\r\n            [ID] => 42\r\n            [CODE] => ELEMENT_META_TITLE\r\n            [TEMPLATE] => {=this.Name}. {=parent.Name}. {=iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => N\r\n        )\r\n    [ELEMENT_META_DESCRIPTION] => Array\r\n        (\r\n            [ID] => 43\r\n            [CODE] => ELEMENT_META_DESCRIPTION\r\n            [TEMPLATE] => {=this.Name}. {=parent.Name}. {=iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => N\r\n        )\r\n    [ELEMENT_META_KEYWORDS] => Array\r\n        (\r\n            [ID] => 45\r\n            [CODE] => ELEMENT_META_KEYWORDS\r\n            [TEMPLATE] => {=lower this.Name} {=lower parent.Name} {=lower iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => N\r\n        )[/red]\r\n)\r\n[/code]\r\n<p>\r\nПолучить SEO шаблоны для раздела с идентификатором <code>$iblockSectionId</code>:\r\n</p>\r\n[php]\r\n$ipropSectionTemplates = new \\Bitrix\\Iblock\\InheritedProperty\\SectionTemplates($iblockId, $iblockSectionId);\r\n$templates = $ipropSectionTemplates->findTemplates();\r\nprint_r($templates);\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [grn][SECTION_META_KEYWORDS] => Array\r\n        (\r\n            [ID] => 37\r\n            [CODE] => SECTION_META_KEYWORDS\r\n            [TEMPLATE] => {=lower this.Name} {=lower iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => Y\r\n        )\r\n    [SECTION_META_DESCRIPTION] => Array\r\n        (\r\n            [ID] => 38\r\n            [CODE] => SECTION_META_DESCRIPTION\r\n            [TEMPLATE] => {=this.Name}. {=iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => Y\r\n        )\r\n    [SECTION_META_TITLE] => Array\r\n        (\r\n            [ID] => 41\r\n            [CODE] => SECTION_META_TITLE\r\n            [TEMPLATE] => {=this.Name}. {=iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => Y\r\n        )[/grn]\r\n    [red][ELEMENT_META_TITLE] => Array\r\n        (\r\n            [ID] => 42\r\n            [CODE] => ELEMENT_META_TITLE\r\n            [TEMPLATE] => {=this.Name}. {=parent.Name}. {=iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => Y\r\n        )\r\n    [ELEMENT_META_DESCRIPTION] => Array\r\n        (\r\n            [ID] => 43\r\n            [CODE] => ELEMENT_META_DESCRIPTION\r\n            [TEMPLATE] => {=this.Name}. {=parent.Name}. {=iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => Y\r\n        )\r\n    [ELEMENT_META_KEYWORDS] => Array\r\n        (\r\n            [ID] => 45\r\n            [CODE] => ELEMENT_META_KEYWORDS\r\n            [TEMPLATE] => {=lower this.Name} {=lower parent.Name} {=lower iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => Y\r\n        )[/red]\r\n)\r\n[/code]\r\n<p>\r\nПолучить SEO шаблоны для элемента с идентификатором <code>$iblockElementId</code>:\r\n<p>\r\n[php]\r\n$ipropElementTemplates = new \\Bitrix\\Iblock\\InheritedProperty\\ElementTemplates($iblockId, $iblockElementId);\r\n$templates = $ipropElementTemplates->findTemplates();\r\nprint_r($templates);\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [grn][SECTION_META_KEYWORDS] => Array\r\n        (\r\n            [ID] => 37\r\n            [CODE] => SECTION_META_KEYWORDS\r\n            [TEMPLATE] => {=lower this.Name} {=lower iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => Y\r\n        )\r\n    [SECTION_META_DESCRIPTION] => Array\r\n        (\r\n            [ID] => 38\r\n            [CODE] => SECTION_META_DESCRIPTION\r\n            [TEMPLATE] => {=this.Name}. {=iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => Y\r\n        )\r\n    [SECTION_META_TITLE] => Array\r\n        (\r\n            [ID] => 41\r\n            [CODE] => SECTION_META_TITLE\r\n            [TEMPLATE] => {=this.Name}. {=iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => Y\r\n        )[/grn]\r\n    [red][ELEMENT_META_TITLE] => Array\r\n        (\r\n            [ID] => 42\r\n            [CODE] => ELEMENT_META_TITLE\r\n            [TEMPLATE] => {=this.Name}. {=parent.Name}. {=iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => Y\r\n        )\r\n    [ELEMENT_META_DESCRIPTION] => Array\r\n        (\r\n            [ID] => 43\r\n            [CODE] => ELEMENT_META_DESCRIPTION\r\n            [TEMPLATE] => {=this.Name}. {=parent.Name}. {=iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => Y\r\n        )\r\n    [ELEMENT_META_KEYWORDS] => Array\r\n        (\r\n            [ID] => 45\r\n            [CODE] => ELEMENT_META_KEYWORDS\r\n            [TEMPLATE] => {=lower this.Name} {=lower parent.Name} {=lower iblock.PreviewText}\r\n            [ENTITY_TYPE] => B\r\n            [ENTITY_ID] => 5\r\n            [INHERITED] => Y\r\n        )[/red]\r\n)\r\n[/code]\r\n<p>\r\nИзменить SEO шаблоны для инфоблока с идентификатором <code>$iblockId</code>:\r\n</p>\r\n[php]\r\n$ipropIblockTemplates = new \\Bitrix\\Iblock\\InheritedProperty\\IblockTemplates($iblockId);\r\n$templates = $ipropIblockTemplates->findTemplates();\r\n$newTemplates = array(\r\n    \'SECTION_META_TITLE\' => $templates[\'SECTION_META_TITLE\'][\'TEMPLATE\'].\" дополнительный текст - {=this.Name}\"\r\n);\r\n$ipropIblockTemplates->set($newTemplates);\r\n[/php]\r\n<p>\r\nИзменить SEO шаблоны для раздела с идентификатором <code>$iblockSectionId</code>:\r\n</p>\r\n[php]\r\n$ipropSectionTemplates = new \\Bitrix\\Iblock\\InheritedProperty\\SectionTemplates($iblockId, $iblockSectionId);\r\n$templates = $ipropSectionTemplates->findTemplates();\r\n$newTemplates = array(\r\n    \'SECTION_META_TITLE\' => $templates[\'SECTION_META_TITLE\'][\'TEMPLATE\'].\" дополнительный текст - {=this.Name}\"\r\n);\r\n$ipropSectionTemplates->set($newTemplates);\r\n[/php]\r\n<p>\r\nИзменить SEO шаблоны для элемента с идентификатором <code>$iblockElementId</code>:\r\n<p>\r\n[php]\r\n$ipropElementTemplates = new \\Bitrix\\Iblock\\InheritedProperty\\ElementTemplates($iblockId, $iblockElementId);\r\n$templates = $ipropElementTemplates->findTemplates();\r\n$newTemplates = array(\r\n    \'ELEMENT_META_TITLE\' => $templates[\'ELEMENT_META_TITLE\'][\'TEMPLATE\'].\" дополнительный текст - {=this.Name}\"\r\n);\r\n$ipropElementTemplates->set($newTemplates);\r\n[/php]\r\n<p>\r\nУдалить SEO шаблоны для инфоблока с идентификатором <code>$iblockId</code>:\r\n<p>\r\n[php]\r\n$ipropIblockTemplates = new \\Bitrix\\Iblock\\InheritedProperty\\IblockTemplates($iblockId);\r\n$ipropIblockTemplates->delete();\r\n[/php]\r\n<p>\r\nУдалить SEO шаблоны для раздела с идентификатором <code>$iblockSectionId</code>:\r\n</p>\r\n[php]\r\n$ipropSectionTemplates = new \\Bitrix\\Iblock\\InheritedProperty\\SectionTemplates($iblockId, $iblockSectionId);\r\n$ipropSectionTemplates->delete();\r\n[/php]\r\n<p>\r\nУдалить SEO шаблоны для элемента с идентификатором <code>$iblockElementId</code>:\r\n</p>\r\n[php]\r\n$ipropElementTemplates = new \\Bitrix\\Iblock\\InheritedProperty\\ElementTemplates($iblockId, $iblockElementId);\r\n$ipropElementTemplates->delete();\r\n[/php]\r\n\r\n<h2>Работа со значениями SEO свойств инфоблоков</h2>\r\n<p>\r\nПолучение значений SEO для инфоблока с идентификатором <code>$iblockId</code>:\r\n</p>\r\n[php]\r\n$ipropIblockValues = new \\Bitrix\\Iblock\\InheritedProperty\\IblockValues($iblockId);\r\nprint_r($ipropIblockValues->getValues());\r\n[/php]\r\n<p>\r\nПолучить значения SEO для раздела с идентификатором <code>$iblockSectionId</code>:\r\n</p>\r\n[php]\r\n$ipropSectionValues = new \\Bitrix\\Iblock\\InheritedProperty\\SectionValues($iblockId, $iblockSectionId);\r\nprint_r($ipropSectionValues->getValues());\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [grn][SECTION_META_KEYWORDS] => породы собак статьи о домашних животных\r\n    [SECTION_META_DESCRIPTION] => Породы собак. Статьи о домашних животных\r\n    [SECTION_META_TITLE] => Породы собак. Статьи о домашних животных[/grn]\r\n    [red][ELEMENT_META_TITLE] => Породы собак. Статьи. Статьи о домашних животных\r\n    [ELEMENT_META_DESCRIPTION] => Породы собак. Статьи. Статьи о домашних животных\r\n    [ELEMENT_META_KEYWORDS] => породы собак статьи статьи о домашних животных[/red]\r\n)\r\n[/code]\r\n<p>\r\nПолучить значения SEO для элемента с идентификатором <code>$iblockElementId</code>:\r\n</p>\r\n[php]\r\n$ipropElementValues = new \\Bitrix\\Iblock\\InheritedProperty\\ElementValues($iblockId, $iblockElementId);\r\nprint_r($ipropElementValues->getValues());\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [grn][SECTION_META_KEYWORDS] => афганская борзая статьи о домашних животных\r\n    [SECTION_META_DESCRIPTION] => Афганская борзая. Статьи о домашних животных\r\n    [SECTION_META_TITLE] => Афганская борзая. Статьи о домашних животных[/grn]\r\n    [red][ELEMENT_META_TITLE] => Афганская борзая. Породы собак. Статьи о домашних животных\r\n    [ELEMENT_META_DESCRIPTION] => Афганская борзая. Породы собак. Статьи о домашних животных\r\n    [ELEMENT_META_KEYWORDS] => афганская борзая породы собак статьи о домашних животных[/red]\r\n)\r\n[/code]\r\n<p>\r\nСбросить кэш SEO для инфоблока с идентификатором в переменной <code>$iblockId</code>:\r\n</p>\r\n[php]\r\n$ipropIblockValues = new \\Bitrix\\Iblock\\InheritedProperty\\IblockValues($iblockId);\r\n$ipropIblockValues->clearValues();\r\n[/php]\r\n<p>\r\nСбросить кэш SEO для раздела инфоблока с идентификатором в переменной <code>$iblockSectionId</code>:\r\n</p>\r\n[php]\r\n$ipropSectionValues = new \\Bitrix\\Iblock\\InheritedProperty\\IblockSectionValues($iblockId, $iblockSectionId);\r\n$ipropSectionValues->clearValues();\r\n[/php]\r\n<p>\r\nСбросить кэш SEO для элемента инфоблока с идентификатором в переменной <code>$iblockElementId</code>:\r\n</p>\r\n[php]\r\n$ipropElementValues = new \\Bitrix\\Iblock\\InheritedProperty\\IblockElementValues($iblockId, $iblockElementId);\r\n$ipropElementValues->clearValues();\r\n[/php]','2018-09-01 15:13:08',1),(189,11,'Модуль mod_rewrite сервера Apache','','','.htaccess, Apache, RegExp, SEO, URL, Web-разработка, ЧПУ, Шаблон','Модуль mod_rewrite веб сервера Apache используется для преобразования URL адресов. С его помощью можно настраивать редиректы, изменять URL адреса, блокировать доступ и т.д. По умолчанию этот модуль выключен, для того что бы его включить, в .htaccess необходимо добавить следующие директивы…','<p>\r\nМодуль <code>mod_rewrite</code> веб сервера Apache используется для преобразования URL адресов. С его помощью можно настраивать редиректы, изменять URL адреса, блокировать доступ и т.д. По умолчанию этот модуль выключен, для того что бы его включить, в <code>.htaccess</code> необходимо добавить следующие директивы:\r\n</p>\r\n[apache]\r\nRewriteEngine On\r\nRewriteBase /\r\n[/apache]\r\n<ul>\r\n  <li><code>RewriteEngine On</code> — директива включает модуль.</li>\r\n  <li><code>RewriteBase</code> — указывает путь от корня сайта до файла <code>.htaccess</code>. Если <code>.htaccess</code> лежит в корне, то указывать этот параметр нужно как в примере, если во внутреннем каталоге, то указываем путь к этому каталогу, например <code>/images/</code>.</li>\r\n</ul>\r\n<div class=\"note\">\r\n<p>\r\nЕсли <code>.htaccess</code> лежит в корне, то директиву <code>RewriteBase</code> можно опустить.\r\n</p>\r\n</div>\r\n<p>\r\nРабота модуля основана на наборе правил и условий, согласно которым производится преобразование. При получении запроса, Apache передает в <code>mod_rewrite</code> путь к файлу начиная от того места, где находится файл <code>.htaccess</code>, остальная часть пути обрезается. Если поступил запрос\r\n</p>\r\n[code]\r\nhttp://server.com/some/path/file.html\r\n[/code]\r\n<p>\r\nа <code>.htaccess</code> лежит в корне, то в <code>mod_rewrite</code> попадет <code>some/path/file.html</code> (без слеша в начале). Если <code>.htaccess</code> лежит в директории <code>/some/</code>, то в <code>mod_rewrite</code> попадет <code>path/file.html</code>.\r\n</p>\r\n<p>\r\nДалее <code>mod_rewrite</code> анализирует правила в <code>.htaccess</code> и действует согласно этих правил. Стоит знать, что <code>mod_rewrite</code> работает не со ссылками и не с URL адресами, а с обычными строками. То есть адрес, который нужно преобразовать, передается <code>mod_rewrite</code> как обычная строка, и эту строку можно преобразовать как угодно. Для построения правил используются две директивы, <code>RewriteCond</code> и <code>RewriteRule</code>.\r\n</p>\r\n<ul>\r\n  <li><strong>Директива</strong> <code>RewriteCond</code> — здесь определяются условия, при которых сработает правило преобразования <code>RewriteRule</code>. Если условие в <code>RewriteCond</code> выполнено, выполняется правило в <code>RewriteRule</code>. Таких условий перед правилом <code>RewriteRule</code> может быть неограниченное количество. <code>RewriteCond</code> не является обязательной директивой для создания правила преобразования и может отсутствовать.</li>\r\n</ul>\r\n<ul>\r\n  <li><strong>Директива</strong> <code>RewriteRule</code> — здесь уже указывается само правило для преобразования, которое для конкретного преобразования должно быть единственным.</li>\r\n</ul>\r\n\r\n<h2>Директива RewriteRule</h2>\r\n<p>\r\nСинтаксис директивы <code>RewriteRule</code>:\r\n</p>\r\n[code]\r\nRewriteRule [red]Шаблон[/red] [grn]Подстановка[/grn] [Флаги]\r\n[/code]\r\n<ul>\r\n  <li><code>Шаблон</code> — условие, выполнение которого запускает исполнение правила;</li>\r\n  <li><code>Подстановка</code> — правило изменения (преобразования) URL;</li>\r\n  <li><code>[Флаги]</code> — дополняют преобразование URL.</li>\r\n</ul>\r\n<p>\r\nПримеры:\r\n<p>\r\n[apache]\r\n# Преобразуем URL www.serever.com/articles/123/ в\r\n# URL www.serever.com/index.php?show=article&id=123\r\nRewriteRule ^articles/(\\d+)/$ index.php?show=article&id=$1 [L]\r\n[/apache]\r\n[apache]\r\n# Запрет посещений веб-сайта для робота поисковой системы\r\n# Google (при вызове возвращает ошибку 403 Forbidden)\r\nRewriteCond %{USER_AGENT} Googlebot\r\nRewriteRule .* - [F]\r\n[/apache]\r\n<p>\r\nДефис вместо <code>Подстановка</code> означает, что преобразование URL не требуется.\r\n</p>\r\n[apache]\r\n# Исправление ошибки при наборе адреса веб-страницы пользователем\r\nRewriteRule ^(.*)\\.htm$ $1.html [R=301]\r\n[/apache]\r\n\r\n<p>Некоторые флаги <code>RewriteRule</code>:</p>\r\n<ul>\r\n  <li><code>[NC]</code> — Это делает <code>Шаблон</code> нечуствительным к регистру, когда <code>Шаблон</code> применяется к текущему URL.</li>\r\n  <li><code>[QSA]</code> — Добавить строку запроса из исходного URL к строке запроса, созданной правилами перезаписи.</li>\r\n  <li><code>[L]</code> — Остановить процесс преобразования на этом месте и не применять больше никаких правил преобразований.</li>\r\n  <li><code>[N]</code> — Перезапустить процесс преобразований (начав с первого правила). В этом случае URL снова сопоставляется неким условиям, но не оригинальный URL, а URL вышедший из последнего правила преобразования.</li>\r\n  <li><code>[F]</code> — Сервер возвращает браузеру ошибку с кодом 403.</li>\r\n  <li><code>[R]</code> — Редирект с кодом ответа браузеру 302 (временно перемещен).</li>\r\n  <li><code>[R=code]</code> — Редирект с кодом ответа браузеру <code>code</code>.</li>\r\n</ul>\r\n\r\n<div class=\"note\">\r\n<h3>Флаг QSA (Query String Append)</h3>\r\n<p>\r\nСтрокой запроса является часть запрашиваемого адреса, которая следует после символа знак вопроса. К примеру, в запросе\r\n</p>\r\n[code]\r\n/some/path/index.php?[red]param=value[/red]\r\n[/code]\r\n<p>\r\nстрокой запроса является выделенная красным часть.\r\n</p>\r\n<p>\r\nКогда заменяющий URI (полученный после применения правил перезаписи) содержит строку запроса, поведение по умолчанию <code>RewriteRule</code> — отбросить исходную строку запроса и заменить её сгенерированной новой. Использование флага <code>[QSA]</code> приводит к объединению строк запроса.\r\n</p>\r\n[apache]\r\n# Преобразуем URL www.serever.com/articles/123/ в\r\n# URL www.serever.com/index.php?show=article&id=123\r\nRewriteRule ^articles/(\\d+)/$ /index.php?show=article&id=$1 [QSA,L]\r\n[/apache]\r\n<p>\r\nС флагом <code>[QSA]</code>, запрос\r\n</p>\r\n[code]\r\n/articles/123/?param=value\r\n[/code]\r\n<p>\r\nбудет преобразован в\r\n</p>\r\n[code]\r\n/index.php?show=article&id=123&[red]param=value[/red]\r\n[/code]\r\n<p>\r\nБез флага <code>[QSA]</code>, этот же самый запрос будет преобразован в\r\n</p>\r\n[code]\r\n/index.php?show=article&id=123\r\n[/code]\r\n<p>\r\nТо есть, существующая строка запроса будет отброшена.\r\n</p>\r\n</div>\r\n\r\n<h2>Директива RewriteCond</h2>\r\n<p>\r\nСинтаксис директивы <code>RewriteCond</code>:\r\n</p>\r\n[code]\r\nRewriteCond [red]СравниваемаяСтрока[/red] [grn]Условие[/grn] [Флаги]\r\n[/code]\r\n<ul>\r\n  <li><code>СравниваемаяСтрока</code> — строка, которая будет проверятся на соответствие выражению, указанному в параметре <code>Условие</code>.</li>\r\n  <li><code>Условие</code> — это логическое выражение, по которому проверяется параметр <code>СравниваемаяСтрока</code>. Часто в <code>Условие</code> применяют регулярные выражения.</li>\r\n  <li><code>[Флаги]</code> — позволяют задать дополнительные опции, например, можно установить логику объединения правил <code>RewriteCond</code> через логическое <strong>И</strong> <code>[AND]</code> (по умолчанию) или через логическое <strong>ИЛИ</strong> <code>[OR]</code>. Или, будет ли сравнение в условии <code>RewriteCond</code> выполнятся с учетом регистра или без учета регистра.</li>\r\n</ul>\r\n<p>\r\nПример нескольких директив <code>RewriteCond</code>, объединенных через логическое <strong>И</strong> <code>[AND]</code> (по умолчанию):\r\n</p>\r\n[apache]\r\n# одна точка входа, все запросы (кроме файлов и директорий) на /index.php\r\nRewriteCond $1 !=favicon.ico\r\nRewriteCond %{REQUEST_FILENAME} !-f\r\nRewriteCond %{REQUEST_FILENAME} !-d\r\nRewriteRule (.*) index.php\r\n[/apache]\r\n<p>\r\nНесмотря на то, что директива <code>RewriteCond</code> стоит выше, чем правило <code>RewriteRule</code>, <code>mod_rewrite</code> сначала проверяет строку на соответствие с шаблоном в <code>RewriteRule</code>, и если строка совпадает с шаблоном, он смотрит на указанные выше условия в <code>RewriteCond</code>. Если условия тоже совпадают, происходит преобразование согласно правилу <code>RewriteRule</code>.\r\n</p>\r\n<p>\r\n<code>СравниваемаяСтрока</code> может, к примеру, содержать часть или весь URL. Подставить в параметр <code>СравниваемаяСтрока</code> часть URL можно при помощи переменных подстановки (<code>$1</code>, <code>$2</code>, <code>$3</code>), которые были созданы в соответствующем <code>RewriteRule</code>. Также параметр <code>СравниваемаяСтрока</code> может содержать различные переменные из окружения сервера Apache: <code>%{REQUEST_URI}</code>, <code>%{HTTP_HOST}</code>, <code>%{QUERY_STRING}</code> и т.д.\r\n</p>\r\n<p>\r\nУсловие может содержать специальные символы:\r\n</p>\r\n<ul>\r\n  <li><code>-d</code> — проверка, что директория существует;</li>\r\n  <li><code>-f</code> — проверка, что файл существует.</li>\r\n</ul>\r\n<p>\r\nДополнительно, перед условием, допускается использование логических символов:\r\n</p>\r\n<ul>\r\n  <li><code>!Условие</code> — инвертирование значения, т.е. сравниваемая строка должна не соответствовать шаблону условия;</li>\r\n  <li><code>=Условие</code> — <code>Условие</code> считается простой строкой и лексически сравнивается с <code>СравниваемаяСтрока</code>. Истинно, если эти две строки полностью одинаковы (символ в символ). Если <code>Условие</code> имеет вид <code>\"\"</code> — это сравнивает <code>СравниваемаяСтрока</code> с пустой строкой.</li>\r\n</ul>\r\n<p>Некоторые флаги <code>RewriteCond</code>:</p>\r\n<ul>\r\n  <li><code>[NC]</code> (от <code>No Case</code>) — Регистр не имеет значения, как в <code>СравниваемаяСтрока</code> так и в <code>Условие</code>. Этот флаг эффективен только для сравнений между <code>СравниваемаяСтрока</code> и <code>Условие</code>, он не работает при проверках в файловой системе.</li>\r\n  <li><code>[OR]</code> — Логическое <strong>ИЛИ</strong>. Используется, когда перед директивой <code>RewriteRule</code> находится несколько директив <code>RewriteCond</code> и правило в <code>RewriteRule</code> должно быть выполнено при совпадении <em>любого</em> <code>RewriteCond</code>.​</li>\r\n  <li><code>[AND]</code> — Логическое <strong>И</strong>. Используется, когда перед директивой <code>RewriteRule</code> находится несколько директив <code>RewriteCond</code> и правило в <code>RewriteRule</code> должно быть выполнено при совпадении <em>всех</em> <code>RewriteCond</code>. Этот флаг используется по умолчанию, так что его можно опускать.</li>\r\n</ul>\r\n\r\n<div class=\"note\">\r\n<h3>Регулярные выражения</h3>\r\n<h4>Текст</h4>\r\n<ul>\r\n  <li><code>.</code> — Любой одиночный символ</li>\r\n  <li><code>[chars]</code> — Класс символов: один из символов</li>\r\n  <li><code>[^chars]</code> — Класс символов: ни один из символов</li>\r\n  <li><code>(text1|text2)</code> — Альтернатива: <code>text1</code> или <code>text2</code></li>\r\n</ul>\r\n<h4>Кванторы</h4>\r\n<ul>\r\n  <li><code>?</code> — 0 или 1 из предшествующего текста</li>\r\n  <li><code>*</code> — 0 или больше из предшествующего текста</li>\r\n  <li><code>+</code> — 1 или больше из предшествующего текста</li>\r\n</ul>\r\n<h4>Группировка</h4>\r\n<ul>\r\n  <li><code>(text)</code> — Группировка текста (для установки границ альтернативы или для создания переменных <code>$1</code>, <code>$2</code>, <code>$3</code> или <code>%1</code>, <code>%2</code>, <code>%3</code>)</li>\r\n</ul>\r\n<h4>Маркеры</h4>\r\n</h4>\r\n  <li><code>^</code> — Маркер начала строки</li>\r\n  <li><code>$</code> — Маркер конца строки</li>\r\n</h4>\r\n<h4>Экранирование</h4>\r\n<ul>\r\n  <li><code>\\char</code> — экранирование конкретного символа (к примеру, для указания символов <code>.[]()</code> и т.д.)</li>\r\n</ul>\r\n</div>\r\n\r\n<h2>Переменные окружения сервера</h2>\r\n<p>\r\nЕсли запрашивается документ:\r\n</p>\r\n[code]\r\nhttp://www.host16.ru/some/path/index.php?param=value\r\n[/code]\r\n<p>\r\nто переменные окружения сервера будут:\r\n</p>\r\n<table class=\"data-table\">\r\n<tr>\r\n  <th>Переменная</th>\r\n  <th>Описание</th>\r\n  <th>Значение</th<\r\n<tr>\r\n<tr>\r\n  <td><code>DOCUMENT_ROOT</code></td>\r\n  <td>Путь к корневой папке сайта. Зависит от операционной системы сервера и используемого программного обеспечения.</td>\r\n  <td><code>D:/work/localhost16/www</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>HTTP_ACCEPT</code></td>\r\n  <td>Типы файлов, которые способен принять браузер. В качестве значения возвращается список поддерживаемых MIME-типов разделенных между собой запятой.</td>\r\n  <td><code>text/html, application/xhtml+xml, application/xml;q=0.9, image/webp, image/apng, */*;q=0.8</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>HTTP_HOST</code></td>\r\n  <td>Доменное имя сайта. Переменная вернёт тот адрес сайта, который указан в адресной строке браузера.</td>\r\n  <td><code>www.host16.ru</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>HTTP_REFERER</code></td>\r\n  <td>Адрес страницы, с которой пользователь перешел на данный сайт, он еще называется реферер.</td>\r\n  <td></td>\r\n</tr>\r\n<tr>\r\n  <td><code>HTTP_USER_AGENT</code></td>\r\n  <td>Идентификатор используемого браузера и операционной системы. В качестве значения возвращается строка, содержащая ключевые слова.</td>\r\n  <td><code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>QUERY_STRING</code></td>\r\n  <td>Запрос, который указан в адресной строке после вопросительного знака.</td>\r\n  <td><code>param=value</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>REMOTE_ADDR</code></td>\r\n  <td>IP-адрес посетителя сайта</td>\r\n  <td><code>127.0.0.1</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>REQUEST_FILENAME</code></td>\r\n  <td>Полный путь в файловой системе сервера к файлу или скрипту. По факту содержит те же данные, что и <code>SCRIPT_FILENAME</code>.</td>\r\n  <td><code>D:/work/localhost16/www/some/path/index.php</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>REQUEST_METHOD</code></td>\r\n  <td>Метод отправки данных на сервер, по умолчанию применяется метод GET.</td>\r\n  <td><code>GET</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>REQUEST_URI</code></td>\r\n  <td>Адрес запрашиваемого документа, отсчёт ведётся от корня сайта.</td>\r\n  <td><code>/some/path/index.php?param=value</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>SERVER_PROTOCOL</code></td>\r\n  <td>Протокол для получения и отправки данных.</td>\r\n  <td><code>HTTP/1.1</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>SCRIPT_NAME</code></td>\r\n  <td>Путь к текущему исполняемому скрипту.</td>\r\n  <td><code>/some/path/index.php</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>SCRIPT_FILENAME</code></td>\r\n  <td>Абсолютный путь к исполняемому скрипту.</td>\r\n  <td><code>D:/work/localhost16/www/some/path/index.php</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>SERVER_NAME</code></td>\r\n  <td>Имя сервера.</td>\r\n  <td><code>www.host16.ru</code></td>\r\n</tr>\r\n<tr>\r\n  <td><code>THE_REQUEST</code></td>\r\n  <td>Полная строка HTTP запроса, отправленная браузером серверу. Она не включает какие-либо дополнительные заголовки, отправляемые браузером.</td>\r\n  <td><code>GET /some/path/index.php?param=value HTTP/1.1</code></td>\r\n</tr>\r\n</table>\r\n\r\n<h2>Переменные подстановки RewriteCond и RewriteRule</h2>\r\n<p>\r\nЕсли в директивах <code>RewriteCond</code> и/или <code>RewriteRule</code> часть символов заключить в круглые скобки, то можно обращаться к содержимому в этих скобках через переменные <code>$1</code>, <code>$2</code>, <code>$3</code> и/или <code>%1</code>, <code>%2</code>, <code>%3</code>:\r\n</p>\r\n<ul>\r\n  <li><code>$n</code> — позволяет использовать группу символов из шаблона директивы <code>RewriteRule</code>;</li>\r\n  <li><code>%n</code> — позволяет использовать группу символов из шаблона директивы <code>RewriteCond</code>.</li>\r\n</ul>\r\n[apache]\r\n# Редирект с адреса с www на адрес без www\r\nRewriteCond %{HTTP_HOST} ^www\\.server\\.com$ [NC]\r\nRewriteRule ^(.*)$ http://server.com/$1 [R=301,L]\r\n[/apache]\r\n[apache]\r\n# Редирект с адреса с www на адрес без www\r\nRewriteCond %{HTTP_HOST} ^www\\.(.*) [NC]\r\nRewriteRule ^(.*)$ http://%1/$1 [R=301,L]\r\n[/apache]\r\n[apache]\r\n# Редирект с адреса без www на адрес с www\r\nRewriteCond %{HTTP_HOST} ^server\\.com$ [NC]\r\nRewriteRule ^(.*)$ http://www.server.com/$1 [R=301,L]\r\n[/apache]\r\n[apache]\r\n# Редирект с адреса без www на адрес с www\r\nRewriteCond %{HTTP_HOST} !^www\\.(.*) [NC]\r\nRewriteRule ^(.*)$ http://www.%1/$1 [R=301,L]\r\n[/apache]\r\n\r\n<h2>Примеры</h2>\r\n[apache]\r\n# запретить использование ссылок на изображения другими сайтами\r\nRewriteCond %{HTTP_REFERER} !^$\r\nRewriteCond %{HTTP_REFERER} !^http://(www\\.)?server\\.com/.*$ [NC]\r\nRewriteRule .+\\.(gif|jpe?g|png)$ - [F]\r\n[/apache]\r\n[apache]\r\n# перенаправление с HTTP на HTTPS\r\nRewriteCond %{HTTPS} =off\r\nRewriteRule (.*) https://%{SERVER_NAME}/$1 [R=301,L]\r\n[/apache]\r\n[apache]\r\n# перенаправление с HTTP на HTTPS\r\nRewriteCond %{SERVER_PORT} !=443\r\nRewriteRule .* https://%{SERVER_NAME}%{REQUEST_URI} [R=301,L]\r\n[/apache]\r\n[apache]\r\n# запрет доступа к файлу .htaccess\r\nRewriteRule ^\\.htaccess$ - [F]\r\n[/apache]\r\n[apache]\r\n# запрет доступа к сайту поисковому роботу EmailSiphon\r\nRewriteCond %{HTTP_USER_AGENT} ^EmailSiphon\r\nRewriteRule .* - [F]\r\n[/apache]\r\n[apache]\r\n# запрет доступа к сайту с ip-адреса 212.37.64.10\r\nRewriteCond %{REMOTE_ADDR} ^212.37.64.10$ \r\nRewriteRule .* - [F]\r\n[/apache]\r\n[apache]\r\n# редирект страниц со слэшем в конце на страницы без слэша,\r\n# чтобы исключить дублирвание; например /about/ => /about\r\nRewriteCond %{REQUEST_FILENAME} !-d\r\nRewriteCond %{REQUEST_URI} ^(.+)/$\r\nRewriteRule ^(.+)/$ $1 [R=301,L]\r\n[/apache]\r\n[apache]\r\n# редирект страниц без слэша в конце на страницы со слэшом,\r\n# чтобы исключить дублирвание; например /about => /about/\r\nRewriteCond %{REQUEST_FILENAME} !-f\r\nRewriteCond %{REQUEST_URI} !(.*)/$\r\nRewriteRule ^(.*[^/])$ $1/ [R=301,L]\r\n[/apache]','2018-08-17 16:35:52',1),(190,17,'Битрикс. Штатные средства отладки','','','CMS, Web-разработка, Битрикс, Запрос, НовоеЯдро, Отладка, Переменная','В новом ядре D7 появились достаточно удобные встроенные возможности диагностики выполнения кода. Они представлены в пространстве имён Bitrix\\Main\\Diag. 1. Вывод содержимого переменной на экран с помощью Debug::dump(). 2. Дамп содержимого переменной в файл с помощью Debug::dumpToFile() или Debug::writeToFile().','<p>\r\nВ новом ядре D7 появились достаточно удобные встроенные возможности диагностики выполнения кода. Они представлены в пространстве имён <code>Bitrix\\Main\\Diag</code>.\r\n</p>\r\n\r\n<h2>Вывод содержимого переменной на экран</h2>\r\n[php]\r\nBitrix\\Main\\Diag\\Debug::dump($var, $varName = \'\', $return = false);\r\n[/php]\r\n<p>\r\nФактически это надстройка для функции <code>var_dump()</code>:\r\n</p>\r\n[php]\r\n$a = array(\r\n    \'key1\' => \'value1\',\r\n    \'key2\' => \'value2\',\r\n);\r\nBitrix\\Main\\Diag\\Debug::dump($a);\r\n[/php]\r\n[php]\r\narray(2) {\r\n  [\"key1\"]=>\r\n  string(6) \"value1\"\r\n  [\"key2\"]=>\r\n  string(6) \"value2\"\r\n}\r\n[/php]\r\n<p>\r\nЕсли вторым аргументом передать строку с названием переменной, то оно будет выведено перед содержимым переменной:\r\n</p>\r\n[php]\r\n$a = array(\r\n    \'key1\' => \'value1\',\r\n    \'key2\' => \'value2\',\r\n);\r\nBitrix\\Main\\Diag\\Debug::dump($a, \'a\');\r\n[/php]\r\n[php]\r\na:\r\narray(2) {\r\n  [\"key1\"]=>\r\n  string(6) \"value1\"\r\n  [\"key2\"]=>\r\n  string(6) \"value2\"\r\n}\r\n[/php]\r\n<p>\r\nЕсли третий аргумент установлен в <code>true</code>, то метод вернет содержимое переменной вместо вывода на экран.\r\n</p>\r\n\r\n<h2>Запись содержимого переменной в файл</h2>\r\n[php]\r\nBitrix\\Main\\Diag\\Debug::dumpToFile($var, $varName = \'\', $fileName = \'\');\r\n[/php]\r\n[php]\r\nBitrix\\Main\\Diag\\Debug::writeToFile($var, $varName = \'\', $fileName = \'\');\r\n[/php]\r\n<p>\r\nДанные методы позволяют записать содержимое переменной в лог-файл. Путь к файлу относительно корня сайта передается третьим аргументом <code>$fileName</code>, по-умолчанию методы пишут в файл <code>__bx_log.log</code> в корне сервера.\r\n</p>\r\n<p>\r\nМетод <code>dumpToFile()</code> пишет в файл результат работы метода <code>Debug::dump()</code>, т.е. в формате функции <code>var_dump()</code>. Метод <code>writeToFile()</code> пишет либо просто значение переменной, либо результат функции <code>print_r()</code>, если переменная является массивом.\r\n</p>\r\n\r\n<h2>Замер времени выполнения кода</h2>\r\n[php]\r\nBitrix\\Main\\Diag\\Debug::startTimeLabel(\'SomeLabel\');\r\n// ...некоторые действия...\r\nBitrix\\Main\\Diag\\Debug::endTimeLabel(\'SomeLabel\');\r\n// далее можно использовать другие метки на других кусках кода\r\nBitrix\\Main\\Diag\\Debug::dump(Bitrix\\Main\\Diag\\Debug::getTimeLabels()); \r\n[/php]\r\n[php]\r\narray(1) {\r\n  [\"SomeLabel\"]=>\r\n  array(2) {\r\n    [\"start\"]=>\r\n    float(1536585978.9713)\r\n    [\"time\"]=>\r\n    float(0.0065689086914062)\r\n  }\r\n}\r\n[/php]\r\n<ul>\r\n  <li><code>start</code> — время (<code>unix timestamp</code> с микросекундами) первого вызова <code>startTimeLabel</code>;</li>\r\n  <li><code>time</code> — время между <code>startTimeLabel</code> и <code>endTimeLabel</code> в секундах. Если было несколько замеров с одним названием, то время суммируется.</li>\r\n</ul>\r\n<p>\r\nПолучение текущей метки времени:\r\n</p>\r\n[php]\r\nBitrix\\Main\\Diag\\Helper::getCurrentMicrotime();\r\n[/php]\r\n<p>\r\nПолучение стэка вызова функций:\r\n</p>\r\n[php]\r\nBitrix\\Main\\Diag\\Helper::getBackTrace($limit = 0, $options = null);\r\n[/php]\r\n\r\n<h2>Отладка SQL-запросов</h2>\r\n<p>\r\nВ ядре D7 для отслеживания SQL-запросов используется так называемый SQL-трекер. При использовании трекера при каждом запросе к БД в трекер записывается запрос и время начала и окончания.\r\n</p>\r\n[php]\r\n$connection = Bitrix\\Main\\Application::getConnection();\r\n$tracker = $connection->startTracker();\r\n// ...код с выполнением SQL-запросов...\r\n$connection->stopTracker();\r\n[/php]\r\n<p>\r\nПосле вызова <code>startTracker()</code> и до вызова <code>stopTracker()</code> все запросы будут отслеживаться. Каждый запрос представлен объектом класса <code>Bitrix\\Main\\Diag\\SqlTrackerQuery</code>, коллекцию которых можно получить так:\r\n</p>\r\n[php]\r\nforeach ($tracker->getQueries() as $query) {\r\n    var_dump($query->getSql());   // Текст запроса\r\n    var_dump($query->getTrace()); // Стек вызовов функций\r\n    var_dump($query->getTime());  // Время выполнения запроса\r\n}\r\n[/php]\r\n<p>\r\nЧтобы очистить данные в трекере и начать новое отслеживание, нужно вызвать <code>startTracker()</code> с аргументом <code>true</code>:\r\n</p>\r\n[php]\r\n$tracker = $connection->startTracker(true);\r\n[/php]\r\n<p>\r\nПример отслеживания запросов при получении элементов инфоблока:\r\n</p>\r\n[php]\r\nBitrix\\Main\\Loader::includeModule(\'iblock\');\r\n\r\n$connection = Bitrix\\Main\\Application::getConnection();\r\n$tracker = $connection->startTracker();\r\n\r\n// выполняем запрос к базе данных\r\n$query = Bitrix\\Iblock\\ElementTable::getList(\r\n    array(\r\n        \'select\' => array(\'ID\', \'NAME\'),\r\n        \'filter\' => array(\'IBLOCK_ID\' => 5),\r\n    )\r\n);\r\n\r\n$connection->stopTracker();\r\n\r\n// записываем в лог результаты выполнения запроса\r\nforeach ($tracker->getQueries() as $query) {\r\n    Bitrix\\Main\\Diag\\Debug::writeToFile(\r\n        Bitrix\\Main\\Diag\\Debug::dump($query->getSql(), \'query\', true)\r\n    );\r\n    Bitrix\\Main\\Diag\\Debug::writeToFile(\r\n        Bitrix\\Main\\Diag\\Debug::dump($query->getTime(), \'time\', true)\r\n    );\r\n}\r\n[/php]\r\n<p>\r\nВ лог будет записана информация:\r\n</p>\r\n[php]\r\nquery=string(156)\r\n\"SELECT \r\n    `iblock_element`.`ID` AS `ID`,\r\n    `iblock_element`.`NAME` AS `NAME`\r\nFROM \r\n    `b_iblock_element` `iblock_element` \r\nWHERE\r\n    `iblock_element`.`IBLOCK_ID` = 5\"\r\n\r\ntime=float(0.0017309188842773)\r\n[/php]\r\n<div class=\"note\">\r\nОбратите внимание, что этот трекер не отслеживает запросы, сделанные через старое ядро.\r\n</div>','2018-09-10 16:48:02',1),(191,11,'Утилита командной строки CURL','','','CLI, CURL, Cookie, FTP, GET, HTTP, Linux, POST, URL, Web-разработка, Windows, Форма','CURL — утилита командной строки для Linux или Windows, поддерживает работу с протоколами: FTP, FTPS, HTTP, HTTPS, TFTP, SCP, SFTP, Telnet, DICT, LDAP, POP3, IMAP и SMTP. Она отлично подходит для имитации действий пользователя на страницах сайтов и других операций с URL адресами.','<p>\r\nCURL — утилита командной строки для Linux или Windows, поддерживает работу с протоколами: FTP, FTPS, HTTP, HTTPS, TFTP, SCP, SFTP, Telnet, DICT, LDAP, POP3, IMAP и SMTP. Она отлично подходит для имитации действий пользователя на страницах сайтов и других операций с URL адресами. Поддержка CURL добавлена в множество различных языков программирования и платформ.\r\n</p>\r\n<p>\r\nДля начала скачаем саму утилиту, для этого переходим на официальный сай утилиты, в раздел <a href=\"https://curl.haxx.se/download.html\">Download</a>. После скачивания архива для своей платформы (у меня это Windows 64 bit), распаковываем архив. Чтобы иметь возможность работать с HTTPS и FTPS, устанавливаем сертификат безопасности <code>url-ca-bundle.crt</code>, который находится в папке <code>curl/bin</code>.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/191/1.jpg\" class=\"zoom\"><img src=\"/files/blog/191/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<p>\r\nЗапускаем командную строку, переходим в директорию <code>curl/bin</code> и пытаемся скачать главную страницу Google:\r\n</p>\r\n[cli]\r\n> cd C:/curl/bin\r\n> curl google.com\r\n<HTML><HEAD><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\r\n<TITLE>301 Moved</TITLE></HEAD><BODY>\r\n<H1>301 Moved</H1>\r\nThe document has moved\r\n<A HREF=\"http://www.google.com/\">here</A>.\r\n</BODY></HTML>\r\n[/cli]\r\n\r\n<h2>Следовать за редиректами</h2>\r\n<p>\r\nСервер Google сообщает, что страница <code>google.com</code> перемещена (301 Moved Permanently), и теперь надо запрашивать страницу <code>www.google.com</code>. С помощью опции <code>-L</code> укажем CURL следовать редиректам:\r\n</p>\r\n[cli]\r\n> curl -L google.com\r\n<!doctype html>\r\n<html itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"ru\">\r\n<head>\r\n<meta content=\"Поиск информации в интернете: веб страницы, картинки, видео и многое другое.\" name=\"description\">\r\n<meta content=\"noodp\" name=\"robots\">\r\n<meta content=\"/images/branding/googleg/1x/googleg_standard_color_128dp.png\" itemprop=\"image\">\r\n<meta content=\"origin\" name=\"referrer\">\r\n<title>Google</title>\r\n..........\r\n[/cli]\r\n\r\n<h2>Сохранить вывод в файл</h2>\r\n<p>\r\nЧтобы сохранить вывод в файл, надо использовать опции <code>-o</code> или <code>-O</code>:\r\n</p>\r\n<ul>\r\n  <li><code>-o</code> (<code>o</code> нижнего регистра) — результат будет сохранён в файле, заданном в командной строке;</li>\r\n  <li><code>-O</code> (<code>O</code> верхнего регистра) — имя файла будет взято из URL и будет использовано для сохранения полученных данных.</li>\r\n</ul>\r\n<p>\r\nСохраняем страницу Google в файл <code>google.html</code>:\r\n</p>\r\n[cli]\r\n> curl -L -o google.html google.com\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100   219  100   219    0     0   2329      0 --:--:-- --:--:-- --:--:--  2329\r\n100 14206    0 14206    0     0  69980      0 --:--:-- --:--:-- --:--:-- 69980\r\n[/cli]\r\n<p>\r\nСохраняем документ <code>gettext.html</code> в файл <code>gettext.html</code>:\r\n</p>\r\n[cli]\r\n> curl -O http://www.gnu.org/software/gettext/manual/gettext.html\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100 1375k  100 1375k    0     0   800k      0  0:00:01  0:00:01 --:--:--  800k\r\n[/cli]\r\n\r\n<h2>Загрузить файл, только если он изменён</h2>\r\n<p>\r\nОпция <code>-z</code> позволяет получить файлы, только если они были изменены после определённого времени. Это будет работать и для FTP и для HTTP. Например, файл <code>archive.zip</code> будет получен, если он изменялся после 20 августа 2018 года:\r\n</p>\r\n[cli]\r\n> curl -z 20-Aug-18 http://www.example.com/archive.zip\r\n[/cli]\r\n<p>\r\nКоманда ниже загрузит файл <code>archive.zip</code>, если он изменялся до 20 августа 2018 года:\r\n</p>\r\n[cli]\r\n> curl -z -20-Aug-18 http://www.example.com/archive.zip\r\n[/cli]\r\n\r\n<h2>Прохождение аутентификации HTTP</h2>\r\n<p>\r\nОпция <code>-u</code> позволяет указать данные пользователя (имя и пароль) для прохождения базовой аутентификаци (Basic HTTP Authentication):\r\n</p>\r\n[cli]\r\n> curl -u evgeniy:qwerty -O http://www.example.com/archive.zip\r\n[/cli]\r\n\r\n<h2>Получение и отправка cookie</h2>\r\n<p>\r\nCookie используются сайтами для хранения некой информации на стороне пользователя. Сервер сохраняет cookie на стороне клиента (т.е. в браузере), отправляя заголовки:\r\n</p>\r\n[code]\r\nSet-Cookie: PHPSESSID=svn7eb593i8d2gv471rs94og58; path=/\r\nSet-Cookie: visitor=fa867bd917ad0d715830a6a88c816033; expires=Mon, 16-Sep-2019 08:20:53 GMT; Max-Age=31536000; path=/\r\nSet-Cookie: lastvisit=1537086053; path=/\r\n[/code]\r\n<p>\r\nА браузер, в свою очередь, отправляет полученные cookie обратно на сервер при каждом запросе. Разумеется, тоже в заголовках:\r\n</p>\r\n[code]\r\nCookie: PHPSESSID=svn7eb593i8d2gv471rs94og58; visitor=fa867bd917ad0d715830a6a88c816033; lastvisit=1537086053\r\n[/code]\r\n<p>\r\nПередать cookie на сервер, как будто они были ранее получены от сервера: \r\n</p>\r\n[cli]\r\n> curl -b lastvisit=1537086053 http://www.example.com/\r\n[/cli]\r\n<p>\r\nЧтобы сохранить полученные сookie в файл:\r\n</p>\r\n[cli]\r\n> curl -c cookie.txt http://www.example.com/\r\n[/cli]\r\n<p>\r\nЗатем можно отправить сохраненные в файле cookie обратно:\r\n</p>\r\n[cli]\r\n> curl -b cookie.txt http://www.example.com/catalog/\r\n[/cli]\r\n<p>\r\nФайл <code>cookie.txt</code> имеет вид:\r\n</p>\r\n[code]\r\n# Netscape HTTP Cookie File\r\n# https://curl.haxx.se/docs/http-cookies.html\r\n# This file was generated by libcurl! Edit at your own risk.\r\n\r\nwww.example.com    FALSE    /    FALSE    0             lastvisit        1537085301\r\nwww.example.com    FALSE    /    FALSE    1568621304    visitor          60f7c17ba4b5d77975dfd020f06ac8ca\r\nwww.example.com    FALSE    /    FALSE    0             PHPSESSID        p23cr2d14rlgj5kls58kd7l6a6\r\n[/code]\r\n\r\n<h2>Получение и отправка заголовков</h2>\r\n<p>\r\nПо умолчанию, заголовки ответа сервера не показываются. Но это можно исправить:\r\n</p>\r\n[cli]\r\n> curl -i google.com\r\n[grn]HTTP/1.1 301 Moved Permanently\r\nLocation: http://www.google.com/\r\nContent-Type: text/html; charset=UTF-8\r\nDate: Sun, 16 Sep 2018 08:28:18 GMT\r\nExpires: Tue, 16 Oct 2018 08:28:18 GMT\r\nCache-Control: public, max-age=2592000\r\nServer: gws\r\nContent-Length: 219\r\nX-XSS-Protection: 1; mode=block\r\nX-Frame-Options: SAMEORIGIN[/grn]\r\n\r\n<HTML><HEAD><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\r\n<TITLE>301 Moved</TITLE></HEAD><BODY>\r\n<H1>301 Moved</H1>\r\nThe document has moved\r\n<A HREF=\"http://www.google.com/\">here</A>.\r\n</BODY></HTML>\r\n[/cli]\r\n\r\n<p>\r\nЕсли содержимое страницы не нужно, а интересны только заголовки (будет отправлен <code>HEAD</code> запрос):\r\n</p>\r\n[cli]\r\n> curl -I http://www.example.com/\r\nHTTP/1.1 200 OK\r\nDate: Sun, 16 Sep 2018 08:20:52 GMT\r\nServer: Apache/2.4.34 (Win64) mod_fcgid/2.3.9\r\nX-Powered-By: PHP/7.1.10\r\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nPragma: no-cache\r\nSet-Cookie: PHPSESSID=svn7eb593i8d2gv471rs94og58; path=/\r\nSet-Cookie: visitor=fa867bd917ad0d715830a6a88c816033; expires=Mon, 16-Sep-2019 08:20:53 GMT; Max-Age=31536000; path=/\r\nSet-Cookie: lastvisit=1537086053; path=/\r\nContent-Length: 132217\r\nContent-Type: text/html; charset=utf-8\r\n[/cli]\r\n<p>\r\nПосмотреть, какие заголовки отправляет CURL при запросе, можно с помощью опции <code>-v</code>, которая выводит более подробную информацию:\r\n</p>\r\n[cli]\r\n> curl -v google.com\r\n[/cli]\r\n<ul>\r\n  <li>Строка, начинающаяся с <code>&gt;</code> означает заголовок, отправленный серверу</li>\r\n  <li>Строка, начинающаяся с <code>&lt;</code> означает заголовок, полученный от сервера</li>\r\n  <li>Строка, начинающаяся с <code>*</code> означает дополнительные данные от CURL</li>\r\n</ul>\r\n[code]\r\n* Rebuilt URL to: http://google.com/\r\n*   Trying 173.194.32.206...\r\n* TCP_NODELAY set\r\n* Connected to google.com (173.194.32.206) port 80 (#0)\r\n[/code]\r\n[code]\r\n[red]> GET / HTTP/1.1\r\n> Host: google.com\r\n> User-Agent: curl/7.61.1\r\n> Accept: */*\r\n>[/red]\r\n[grn]< HTTP/1.1 301 Moved Permanently\r\n< Location: http://www.google.com/\r\n< Content-Type: text/html; charset=UTF-8\r\n< Date: Mon, 17 Sep 2018 15:11:49 GMT\r\n< Expires: Wed, 17 Oct 2018 15:11:49 GMT\r\n< Cache-Control: public, max-age=2592000\r\n< Server: gws\r\n< Content-Length: 219\r\n< X-XSS-Protection: 1; mode=block\r\n< X-Frame-Options: SAMEORIGIN\r\n<[/grn]\r\n<HTML><HEAD><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\r\n<TITLE>301 Moved</TITLE></HEAD><BODY>\r\n<H1>301 Moved</H1>\r\nThe document has moved\r\n<A HREF=\"http://www.google.com/\">here</A>.\r\n</BODY></HTML>\r\n[/code]\r\n[code]\r\n* Connection #0 to host google.com left intact\r\n[/code]\r\n<div class=\"note\">\r\nЕсли этой информации недостаточно, можно использовать опции <code>--trace</code> или <code>--trace-ascii</code>.\r\n</div>\r\n<p>\r\nА вот так можно отправить свой заголовок:\r\n</p>\r\n[cli]\r\n> curl -H \"User-Agent: Mozilla/5.0\" http://www.example.com/\r\n[/cli]\r\n\r\n<h2>Отправка данных методом POST</h2>\r\n<p>\r\nКоманда ниже отправляет POST запрос на сервер аналогично тому, как пользователь, заполнив HTML форму, нажал бы кнопку «Отправить». Данные будут отправлены в формате <code>application/x-www-form-urlencoded</code>.\r\n[cli]\r\n> curl -d \"key1=value1&key2=value2\" http://www.example.com\r\n[/cli]\r\n[cli]\r\n> curl --data \"key1=value1&key2=value2\" http://www.example.com\r\n[/cli]\r\n<p>\r\nПараметр <code>--data</code> аналогичен <code>--data-ascii</code>, для отправки двоичных данных необходимо использовать параметр <code>--data-binary</code>. Для URL-кодирования полей формы нужно использовать <code>--data-urlencode</code>.\r\n</p>\r\n[cli]\r\n> curl --data-urlencode \"name=Василий\" --data-urlencode \"surname=Пупкин\" http://www.example.com\r\n[/cli]\r\n<p>\r\nЕсли значение опции <code>--data</code> начинается с <code>@</code>, то после него должно быть имя файла с данными (или дефис — тогда будут использованы данные из стандартного ввода). Пример получения данных из файла для отправки POST-запроса:\r\n</p>\r\n[cli]\r\n> curl --data @data.txt http://www.example.com\r\n[/cli]\r\n<p>\r\nСодержимое файла <code>data.txt</code>:\r\n</p>\r\n[code]\r\nkey1=value1&key2=value2\r\n[/code]\r\n<p>\r\nМассив <code>$_POST</code>, который будет содержать данные этого запроса:\r\n</p>\r\n[code]\r\nArray\r\n(\r\n    [key1] => value1\r\n    [key2] => value2\r\n)\r\n[/code]\r\n<p>\r\nПример URL-кодирования данных из файла перед отправкой POST-запроса:\r\n</p>\r\n[cli]\r\n> curl --data-urlencode name@username.txt http://www.example.com\r\n[/cli]\r\n<p>\r\nСодержимое файла <code>username.txt</code>:\r\n</p>\r\n[code]\r\nИванов Иван Иванович\r\n[/code]\r\n<p>\r\nМассив <code>$_POST</code>, который будет содержать данные этого запроса:\r\n</p>\r\n[code]\r\nArray\r\n(\r\n    [name] = Иванов Иван Иванович\r\n)\r\n[/code]\r\n\r\n<h2>Загрузка файлов методом POST</h2>\r\n<p>\r\nДля HTTP запроса типа POST существует два варианта передачи полей из HTML форм, а именно, используя алгоритм <code>application/x-www-form-urlencoded</code> и <code>multipart/form-data</code>. Алгоритм первого типа создавался давным-давно, когда в языке HTML еще не предусматривали возможность передачи файлов через HTML формы.\r\n</p>\r\n<p>\r\nСо временем возникла необходимость через формы отсылать еще и файлы. Тогда консорциум W3C взялся за доработку формата POST запроса, в результате чего появился документ RFC 1867. Форма, которая позволяет пользователю загрузить файл, используя алгоритм <code>multipart/form-data</code>, выглядит примерно так: \r\n</p>\r\n[html]\r\n<form action=\"/upload.php\" method=\"POST\" enctype=\"multipart/form-data\">\r\n    <input type=\"file\" name=\"upload\">\r\n    <input type=\"submit\" name=\"submit\" value=\"OK\">\r\n</form>\r\n[/html]\r\n<p>\r\nЧтобы отправить на сервер данные такой формы:\r\n</p>\r\n[cli]\r\n> curl -F upload=@image.jpg -F submit=OK http://www.example.com/upload.php\r\n[/cli]\r\n<p>\r\nСкрипт <code>upload.php</code>, который принимает данные формы:\r\n</p>\r\n[php]\r\n<?php\r\nprint_r($_POST);\r\nprint_r($_FILES);\r\nmove_uploaded_file($_FILES[\'upload\'][\'tmp_name\'], \'image.jpg\');\r\n[/php]\r\n<p>\r\nОтвет сервера:\r\n</p>\r\n[code]\r\nArray\r\n(\r\n    [submit] => OK\r\n)\r\nArray\r\n(\r\n    [upload] => Array\r\n        (\r\n            [name] => image.jpg\r\n            [type] => image/jpeg\r\n            [tmp_name] => D:\\work\\temp\\phpB02F.tmp\r\n            [error] => 0\r\n            [size] => 2897\r\n        )\r\n)\r\n[/code]\r\n\r\n<h2>Работа по протоколу FTP</h2>\r\n<p>\r\nСкачать файл с FTP-сервера:\r\n</p>\r\n[cli]\r\n> curl -u username:password -O ftp://example.com/file.zip\r\n[/cli]\r\n<p>\r\nЕсли заданный FTP путь является директорией, то по умолчанию будет выведен список файлов в ней:\r\n</p>\r\n[cli]\r\n> curl -u username:password -O ftp://example.com/public_html/\r\n[/cli]\r\n<p>\r\nВыгрузить файл на FTP-сервер\r\n</p>\r\n[cli]\r\n> curl -u username:password -T file.zip ftp://example.com/\r\n[/cli]\r\n<p>\r\nПолучить вывод из стандартного ввода и сохранить содержимое на сервере под именем <code>data.txt</code>:\r\n</p>\r\n[cli]\r\n> curl -u username:password -T - ftp://example.com/data.txt\r\n[/cli]\r\n\r\n<h4>Дополнительно:</h4>\r\n<ul>\r\n  <li><a href=\"http://osxh.ru/terminal/command/curl\">Утилита curl. Обмен данными с сервером</a></li>\r\n  <li><a href=\"https://blog.regolit.com/2013/12/16/using-curl-for-http\">Пользуемся curl для отладки HTTP</a></li>\r\n</ul>','2018-08-22 11:10:40',1),(192,5,'LocalStorage и SessionStorage','','','Cookie, JSON, JavaScript, Web-разработка, localStorage, sessionStorage','LocalStorage представляет собой хранилище, которое позволяет браузерам сохранять данные на компьютере пользователя, подобно файлам cookie. В отличие от cookie, информация не отправляется на сервер при каждом запросе и можно хранить гораздо больший объем данных.','<p>\r\n<code>LocalStorage</code> представляет собой хранилище, которое позволяет браузерам сохранять данные на компьютере пользователя, подобно файлам <code>cookie</code>. В отличие от <code>cookie</code>, информация не отправляется на сервер при каждом запросе и можно хранить гораздо больший объем данных.\r\n</p>\r\n<p>\r\nЕсли говорить языком JavaScript, то <code>localStorage</code> это свойство глобального объекта браузера (<code>window</code>). К нему можно обращаться как <code>window.localStorage</code> или просто <code>localStorage</code>.\r\n</p>\r\n<p>\r\n<code>LocalStorage</code> имеет достаточно простой API. Достаточно знать четыре его метода:\r\n</p>\r\n[js]\r\n// сохранение значения\r\nlocalStorage.setItem(\"Ключ\", \"Значение\")\r\n[/js]\r\n[js]\r\n// получение значения\r\nlocalStorage.getItem(\"Ключ\")\r\n[/js]\r\n[js]\r\n// удаление значения\r\nlocalStorage.removeItem(\"Ключ\")\r\n[/js]\r\n[js]\r\n// очистка всего хранилища\r\nlocalStorage.clear()\r\n[/js]\r\n<p>\r\nК сожалению, <code>localStorage</code> поддерживает сохранение только строковых данных, но не объектов JavaScript. Тем не менее, объекты можно сериализовать и сохранить в виде строк.\r\n</p>\r\n[js]\r\n// создадим какой-то объект\r\nvar data = { \'foo\': \'bar\', \'array\': [1, 2, 3] }\r\nconsole.dir(data)\r\n\r\n// сериализуем его, теперь sData имеет строковое значение\r\nvar sData = JSON.stringify(data)\r\n\r\n// запишем сериализованный объект в localStorage с ключом data\r\nlocalStorage.setItem(\'data\', sData)\r\n\r\n// хранилище вернёт сериализованный объект\r\nconsole.log(localStorage.getItem(\'data\'))\r\n\r\n// получим сериализованный объект и преобразуем\r\n// к обычному объекту JavaScript\r\nvar sameData = JSON.parse(localStorage.getItem(\'data\'))\r\nconsole.dir(sameData)\r\n[/js]\r\n<p>\r\n<a href=\"/files/blog/192/1.jpg\" class=\"zoom\"><img src=\"/files/blog/192/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nБраузеры выделяют 5 Мб под <code>localStorage</code> и в случае превышения — получите исключение <code>QUOTA_EXCEEDED_ERR</code>. Кстати, c его помощью можно проверять есть ли в вашем хранилище еще место.\r\n</p>\r\n[js]\r\ntry {\r\n    localStorage.setItem(\'Ключ\', \'Значение\');\r\n} catch (e) {\r\n    if (e == QUOTA_EXCEEDED_ERR) {\r\n        alert(\'Превышен лимит\');\r\n    }\r\n}\r\n[/js]\r\n<p>\r\nКроме <code>localStorage</code>, доступен еще объект <code>sessionStorage</code>, который имеет те же методы. <code>SessionStorage</code> отличается от <code>localStorage</code> только тем, что хранит информацию лишь в течение одного сеанса, пока пользователь не закрыл страницу в браузере. В то время как <code>localStorage</code> хранит информацию постоянно, пока она не будет удалена либо пользователем, либо с помощью JavaScript — каких-либо явных ограничений по времени нет.\r\n</p>','2018-08-30 10:18:50',1),(193,17,'Битрикс. Создание комплексного компонента. Часть 1','','','CMS, Web-разработка, Битрикс, Инфоблок, Компонент, РазделИнфоблока, ШаблонКомпонента, ЭлементИнфоблока','Комплексный компонент служит для организации целого раздела сайта (форум, каталог). Для вывода данных он подключает простые компоненты. По сути, является контроллером простых компонентов. Комплексный компонент определяет на основании HTTP запроса страницу, которую требуется показать, и подключает шаблон этой страницы.','<p>\r\nКомплексный компонент служит для организации целого раздела сайта (форум, каталог). Для вывода данных он подключает простые компоненты. По сути, является контроллером простых компонентов. Комплексный компонент определяет на основании HTTP запроса страницу, которую требуется показать, и подключает шаблон этой страницы.\r\n</p>\r\n<p>\r\nДавайте создадим три простых компонента и объединим их в комплексный. Этот комплексный компонент будет уметь показывать содержимое инфоблока. Инфоблок включает в себя элементы и разделы. Значит, наш комплексный компонент должен уметь:\r\n</p>\r\n<ul>\r\n  <li>показывать элемент инфоблока, простой компонент <code>demo:iblock.element</code></li>\r\n  <li>показывать раздел инфоблока, простой компонент <code>demo:iblock.section</code></li>\r\n  <li>показывать главную страницу инфоблока, простой компонент <code>demo:iblock.popular</code></li>\r\n</ul>\r\n<p>\r\nСоздадим внути папки <code>/local/</code> такую структуру:\r\n</p>\r\n[code]\r\n[local]\r\n    [components]\r\n        [demo]\r\n            [red][iblock][/red]\r\n            [grn][iblock.element]\r\n            [iblock.section]\r\n            [iblock.popular][/grn]\r\n[/code]\r\n[code]\r\n[red][iblock]\r\n    [templates]\r\n        [.default]\r\n            [demo]\r\n                [iblock.element]\r\n                    [.default]\r\n                        template.php\r\n                        style.css\r\n                [iblock.section]\r\n                    [.default]\r\n                        template.php\r\n                        style.css\r\n                [iblock.popular]\r\n                    [.default]\r\n                        template.php\r\n                        style.css\r\n            element.php\r\n            section.php\r\n            popular.php\r\n    .description.php\r\n    .parameters.php\r\n    component.php[/red]\r\n[/code]\r\n[code]\r\n[grn][iblock.element]\r\n    [templates]\r\n        [.default]\r\n            template.php\r\n            style.css\r\n    .description.php\r\n    .parameters.php\r\n    component.php[/grn]\r\n[/code]\r\n[code]\r\n[grn][iblock.section]\r\n    [templates]\r\n        [.default]\r\n            template.php\r\n            style.css\r\n    .description.php\r\n    .parameters.php\r\n    component.php[/grn]\r\n[/code]\r\n[code]\r\n[grn][iblock.popular]\r\n    [templates]\r\n        [.default]\r\n            template.php\r\n            style.css\r\n    .description.php\r\n    .parameters.php\r\n    component.php[/grn]\r\n[/code]\r\n<div class=\"note\">\r\nЧтобы немного упростить задачу, я здесь пропустил папку <code>lang</code>. Так что, если нужен комплексный компонент «по фен-шуй» — сделайте это сами. Лично я сомневаюсь, что Битрикс со своим г…но-кодом когда-нибудь выйдет на международный уровень.\r\n</div>\r\n<p>\r\nКрасным цветом выделено все, что относится к комплексному компоненту, а зеленым выделены три простых компонента.\r\n</p>\r\n\r\n<h2>Простой компонент demo:iblock.element</h2>\r\n<p>\r\nВыводит детальную информацию об элементе инфоблока: заголовок, детальную картинку, количество просмотров, детальное описание. В браузере это выглядит примерно так:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/193/1.jpg\" class=\"zoom\"><img src=\"/files/blog/193/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.element/.description.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$arComponentDescription = array(\r\n    \'NAME\' => \'Элемент инфоблока\', // название компонента\r\n    \'DESCRIPTION\' => \'Выводит детальную страницу элемента инфоблока\',\r\n    \'ICON\' => \'/images/icon.gif\', // иконка компонента относительно папки компонента\r\n    \'CACHE_PATH\' => \'Y\', // показывать кнопку очистки кеша\r\n    \'SORT\' => 30, // порядок сортировки в визуальном редакторе\r\n    \'COMPLEX\' => \'N\', // признак комплексного компонента\r\n    \'PATH\' => array( // расположение компонента в визуальном редакторе\r\n        \'ID\' => \'demo\', // идентификатор верхнего уровеня в редакторе\r\n        \'NAME\' => \'Мои компоненты\', // название верхнего уровня в редакторе\r\n        \'CHILD\' => array( // второй уровень в визуальном редакторе\r\n            \'ID\' => \'demo_iblock\', // идентификатор второго уровня в редакторе\r\n            \'NAME\' => \'Информационный блок\' // название второго уровня в редакторе\r\n        )\r\n    )\r\n);\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.element/.parameters.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n// проверяем, установлен ли модуль «Информационные блоки»; если да — то подключаем его\r\nif (!CModule::IncludeModule(\'iblock\')) {\r\n    return;\r\n}\r\n\r\n/*\r\n * Получаем массив всех типов инфоблоков — для возможности выбора\r\n */\r\n$arIBlockType = CIBlockParameters::GetIBlockTypes();\r\n\r\n/*\r\n * Получаем массив инфоблоков — для возможности выбора; фильтруем их по\r\n * выбранному типу и по активности\r\n */\r\n$arInfoBlocks = array();\r\n$arFilter = array(\'ACTIVE\' => \'Y\');\r\n// если уже выбран тип инфоблока, выбираем инфоблоки только этого типа\r\nif (!empty($arCurrentValues[\'IBLOCK_TYPE\'])) {\r\n    $arFilter[\'TYPE\'] = $arCurrentValues[\'IBLOCK_TYPE\'];\r\n}\r\n$rsIBlock = CIBlock::GetList(\r\n    array(\'SORT\' => \'ASC\'),\r\n    $arFilter\r\n);\r\nwhile ($iblock = $rsIBlock->Fetch()) {\r\n    $arInfoBlocks[$iblock[\'ID\']] = \'[\'.$iblock[\'ID\'].\'] \'.$iblock[\'NAME\'];\r\n}\r\n\r\n/*\r\n * Настройки компонента\r\n */\r\n$arComponentParameters = array(\r\n    \'GROUPS\' => array( // кроме групп по умолчанию, добавляем свою группу настроек\r\n        \'SEO_SETTINGS\' => array(\r\n            \'NAME\' => \'Настройки SEO\',\r\n            \'SORT\' => 800\r\n        ),\r\n    ),\r\n    \'PARAMETERS\' => array(\r\n        // выбор типа инфоблока\r\n        \'IBLOCK_TYPE\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Выберите тип инфоблока\',\r\n            \'TYPE\' => \'LIST\',\r\n            \'VALUES\' => $arIBlockType,\r\n            \'REFRESH\' => \'Y\',\r\n        ),\r\n        // выбор самого инфоблока\r\n        \'IBLOCK_ID\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Выберите инфоблок\',\r\n            \'TYPE\' => \'LIST\',\r\n            \'VALUES\' => $arInfoBlocks,\r\n        ),\r\n\r\n        // идентификатор элемента получать из $_REQUEST[\"ELEMENT_ID\"]\r\n        \'ELEMENT_ID\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Идентификатор элемента\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'={$_REQUEST[\"ELEMENT_ID\"]}\',\r\n        ),\r\n        // символьный код элемента получать из $_REQUEST[\"ELEMENT_CODE\"]\r\n        \'ELEMENT_CODE\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Символьный код элемента\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'={$_REQUEST[\"ELEMENT_CODE\"]}\',\r\n        ),\r\n\r\n        // использовать символьный код вместо ID; если отмечен этот checkbox,\r\n        // в визуальном редакторе надо будет обязательно изменить SECTION_URL\r\n        // и ELEMENT_URL, чтобы вместо #SECTION_ID# и #ELEMENT_ID# в шаблонах\r\n        // ссылок использовались #SECTION_CODE# и #ELEMENT_CODE#\r\n        \'USE_CODE_INSTEAD_ID\' => array(\r\n            \'PARENT\' => \'URL_TEMPLATES\',\r\n            \'NAME\' => \'Использовать символьный код вместо ID\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'N\',\r\n        ),\r\n        // шаблон ссылки на страницу раздела\r\n        \'SECTION_URL\' => array(\r\n            \'PARENT\' => \'URL_TEMPLATES\',\r\n            \'NAME\' => \'URL, ведущий на страницу с содержимым раздела\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'category/id/#SECTION_ID#/\'\r\n        ),\r\n        // шаблон ссылки на страницу элемента\r\n        \'ELEMENT_URL\' => array(\r\n            \'PARENT\' => \'URL_TEMPLATES\',\r\n            \'NAME\' => \'URL, ведущий на страницу с содержимым элемента\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'item/id/#ELEMENT_ID#/\'\r\n        ),\r\n\r\n        // SEO-настройки\r\n        \'SET_PAGE_TITLE\' => array(\r\n            \'PARENT\' => \'SEO_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать заголовок страницы\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'SET_BROWSER_TITLE\' => array(\r\n            \'PARENT\' => \'SEO_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать заголовок окна браузера\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'SET_META_KEYWORDS\' => array(\r\n            \'PARENT\' => \'SEO_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать мета-тег keywords\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'SET_META_DESCRIPTION\' => array(\r\n            \'PARENT\' => \'SEO_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать мета-тег description\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n\r\n        // включать раздел в цепочку навигации?\r\n        \'ADD_SECTIONS_CHAIN\' => Array(\r\n            \'PARENT\' => \'ADDITIONAL_SETTINGS\',\r\n            \'NAME\' => \'Включать раздел в цепочку навигации\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n\r\n        // настройки кэширования\r\n        \'CACHE_TIME\'  =>  array(\'DEFAULT\'=>3600),\r\n        \'CACHE_GROUPS\' => array(\r\n            \'PARENT\' => \'CACHE_SETTINGS\',\r\n            \'NAME\' => \'Учитывать права доступа\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n    ),\r\n);\r\n\r\n// добавляем еще одну настройку — на случай, если элемент инфоблока не найден\r\nCIBlockParameters::Add404Settings($arComponentParameters, $arCurrentValues);\r\n[/php]\r\n\r\n<div class=\"note\">\r\nОбратите внимание на параметр <code>USE_CODE_INSTEAD_ID</code>. Если он не задан, элемент инфоблока будет получен по идентификатору. В противном случае — по символьному коду. Это сделано для того, чтобы избежать дублирования, когда одна и та же страница доступна по двум адресам. Внимательно следите за значением этого параметра, чтобы не получить 404 Not Found.\r\n</div>\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.element/component.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var CBitrixComponent $this */\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @var string $componentPath */\r\n/** @var string $componentName */\r\n/** @var string $componentTemplate */\r\n/** @global CDatabase $DB */\r\n/** @global CUser $USER */\r\n/** @global CMain $APPLICATION */\r\n\r\nif (!CModule::IncludeModule(\'iblock\')) {\r\n    ShowError(\'Модуль «Информационные блоки» не установлен\');\r\n    return;\r\n}\r\n\r\nif (!isset($arParams[\'CACHE_TIME\'])) {\r\n    $arParams[\'CACHE_TIME\'] = 3600;\r\n}\r\n\r\n// тип инфоблока\r\n$arParams[\'IBLOCK_TYPE\'] = trim($arParams[\'IBLOCK_TYPE\']);\r\n// идентификатор инфоблока\r\n$arParams[\'IBLOCK_ID\'] = intval($arParams[\'IBLOCK_ID\']);\r\n\r\n// добавить раздел в цепочку навигации\r\n$arParams[\'ADD_SECTIONS_CHAIN\'] = $arParams[\'ADD_SECTIONS_CHAIN\'] == \'Y\';\r\n\r\n// если получено некорректное значение идентификатора элемента или символьного\r\n// кода элемента инфоблока, показываем страницу 404 Not Found\r\n$notFound = false;\r\nif ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') {\r\n    // символьный код элемента инфоблока\r\n    $arParams[\'ELEMENT_CODE\'] = empty($arParams[\'ELEMENT_CODE\']) ? \'\' : trim($arParams[\'ELEMENT_CODE\']);\r\n    if (empty($arParams[\'ELEMENT_CODE\'])) {\r\n        $notFound = true;\r\n    }\r\n} else {\r\n    // идентификатор элемента инфоблока\r\n    $arParams[\'ELEMENT_ID\'] = empty($arParams[\'ELEMENT_ID\']) ? 0 : intval($arParams[\'ELEMENT_ID\']);\r\n    if (empty($arParams[\'ELEMENT_ID\'])) {\r\n        $notFound = true;\r\n    }\r\n}\r\nif ($notFound) {\r\n    \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n        trim($arParams[\'MESSAGE_404\']) ?: \'Элемент инфоблока не найден\',\r\n        true,\r\n        $arParams[\'SET_STATUS_404\'] === \'Y\',\r\n        $arParams[\'SHOW_404\'] === \'Y\',\r\n        $arParams[\'FILE_404\']\r\n    );\r\n    return;\r\n}\r\n\r\n// шаблон ссылки на страницу с содержимым раздела\r\n$arParams[\'SECTION_URL\'] = trim($arParams[\'SECTION_URL\']);\r\n// шаблон ссылки на страницу с содержимым элемента\r\n$arParams[\'ELEMENT_URL\'] = trim($arParams[\'ELEMENT_URL\']);\r\n\r\nif ($this->StartResultCache(false, ($arParams[\'CACHE_GROUPS\']===\'N\' ? false: $USER->GetGroups()))) {\r\n\r\n    if ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') { // работаем с символьным кодом элемента\r\n        $ELEMENT_ID = CIBlockFindTools::GetElementID( // получаем идентификатор по символьному коду\r\n            0,                         // идентификатор элемента мы не знаем\r\n            $arParams[\'ELEMENT_CODE\'], // символьный код элемента\r\n            false,                     // идентификатор раздела\r\n            false,                     // символьный код раздела\r\n            array(\r\n                \'IBLOCK_ACTIVE\' => \'Y\',\r\n                \'IBLOCK_ID\' => $arParams[\'IBLOCK_ID\'],\r\n                \'ACTIVE\' => \'Y\',\r\n                \'ACTIVE_DATE\' => \'Y\',\r\n                \'SECTION_GLOBAL_ACTIVE\' => \'Y\',\r\n                \'CHECK_PERMISSIONS\' => \'Y\',\r\n            )\r\n        );\r\n    } else { // работаем с идентификатором элемента\r\n        $ELEMENT_ID = $arParams[\'ELEMENT_ID\'];\r\n    }\r\n\r\n    if ($ELEMENT_ID) {\r\n        // какие поля элемента инфоблока выбираем\r\n        $arSelect = array(\r\n            \'ID\',                // идентификатор элемента\r\n            \'CODE\',              // символьный код элемента\r\n            \'IBLOCK_ID\',         // идентификатор инфоблока\r\n            \'IBLOCK_SECTION_ID\', // идентификатор раздела элемента\r\n            \'SECTION_PAGE_URL\',  // URL страницы раздела элемента\r\n            \'NAME\',              // название этого элемента\r\n            \'DETAIL_PICTURE\',    // детальная картинка элемента\r\n            \'DETAIL_TEXT\',       // детальное описание элемента\r\n            \'DETAIL_PAGE_URL\',   // URL страницы этого элемента\r\n            \'SHOW_COUNTER\'       // количество просмотров элемента\r\n        );\r\n        // условия выборки элемента инфоблока\r\n        $arFilter = array(\r\n            \'IBLOCK_ID\' => $arParams[\'IBLOCK_ID\'],\r\n            \'IBLOCK_ACTIVE\' => \'Y\',\r\n            \'ID\' => $ELEMENT_ID,\r\n            \'ACTIVE\' => \'Y\',                // выбираем только активные элементы\r\n            \'ACTIVE_DATE\' => \'Y\',           // фильтр по датам активности\r\n            \'SECTION_GLOBAL_ACTIVE\' => \'Y\', // фильтр по активности всех родителей\r\n            \'CHECK_PERMISSIONS\' => \'Y\',     // проверка прав доступа\r\n        );\r\n        if ($arParams[\'SECTION_ID\']) {\r\n            $arFilter[\'SECTION_ID\'] = $arParams[\'SECTION_ID\'];\r\n        } elseif ($arParams[\'SECTION_CODE\']) {\r\n            $arFilter[\'SECTION_CODE\'] = $arParams[\'SECTION_CODE\'];\r\n        }\r\n\r\n        // выполняем запрос к базе данных\r\n        $rsElement = CIBlockElement::GetList(\r\n            array(),   // сортировка\r\n            $arFilter, // фильтр\r\n            false,     // группировка\r\n            false,     // постраничная навигация\r\n            $arSelect  // поля\r\n        );\r\n\r\n        // устанавливаем шаблоны путей для раздела и элемента, вместо тех,\r\n        // которые указаны в настройках информационного блока\r\n        $rsElement->SetUrlTemplates($arParams[\'ELEMENT_URL\'], $arParams[\'SECTION_URL\']);\r\n\r\n        if ($arResult = $rsElement->GetNext()) {\r\n\r\n            /*\r\n             * Добавляем в массив arResult дополнительные элементы, которые могут потребоваться в шаблоне\r\n             */\r\n\r\n            // получаем SEO-свойства выбранного элемента\r\n            $ipropValues = new \\Bitrix\\Iblock\\InheritedProperty\\ElementValues(\r\n                $arResult[\'IBLOCK_ID\'],\r\n                $arResult[\'ID\']\r\n            );\r\n            $arResult[\'IPROPERTY_VALUES\'] = $ipropValues->getValues();\r\n\r\n            if (isset($arResult[\'DETAIL_PICTURE\'])) { // получаем данные картинки элемента\r\n                $arResult[\'DETAIL_PICTURE\'] =\r\n                    (0 < $arResult[\'DETAIL_PICTURE\'] ? CFile::GetFileArray($arResult[\'DETAIL_PICTURE\']) : false);\r\n                if ($arResult[\'DETAIL_PICTURE\']) {\r\n                    $arResult[\'DETAIL_PICTURE\'][\'ALT\'] =\r\n                        $arResult[\'IPROPERTY_VALUES\'][\'ELEMENT_DETAIL_PICTURE_FILE_ALT\'];\r\n                    if ($arResult[\'DETAIL_PICTURE\'][\'ALT\'] == \'\') {\r\n                        $arResult[\'DETAIL_PICTURE\'][\'ALT\'] = $arResult[\'NAME\'];\r\n                    }\r\n                    $arResult[\'DETAIL_PICTURE\'][\'TITLE\'] =\r\n                        $arResult[\'IPROPERTY_VALUES\'][\'ELEMENT_DETAIL_PICTURE_FILE_TITLE\'];\r\n                    if ($arResult[\'DETAIL_PICTURE\'][\'TITLE\'] == \'\') {\r\n                        $arResult[\'DETAIL_PICTURE\'][\'TITLE\'] = $arResult[\'NAME\'];\r\n                    }\r\n                }\r\n            }\r\n\r\n            // получаем данные о разделе инфоблока\r\n            $arSectionFilter = array(\r\n                \'IBLOCK_ID\' => $arResult[\'IBLOCK_ID\'],\r\n                \'ID\' => $arResult[\'IBLOCK_SECTION_ID\'],\r\n                \'ACTIVE\' => \'Y\',\r\n            );\r\n            // выполняем запрос к базе данных\r\n            $rsSection = CIBlockSection::GetList(array(), $arSectionFilter);\r\n\r\n            // устанавливаем шаблон пути для раздела, вместо того,\r\n            // который указан в настройках информационного блока\r\n            $rsSection->SetUrlTemplates(\'\', $arParams[\'SECTION_URL\']);\r\n\r\n            if ($arResult[\'SECTION\'] = $rsSection->GetNext()) {\r\n                // путь к элементу от корня\r\n                $arResult[\'SECTION\'][\'PATH\'] = array();\r\n                $rsPath = CIBlockSection::GetNavChain(\r\n                    $arResult[\'SECTION\'][\'IBLOCK_ID\'],\r\n                    $arResult[\'SECTION\'][\'ID\'],\r\n                    array(\r\n                        \'ID\',\r\n                        \'NAME\',\r\n                        \'SECTION_PAGE_URL\'\r\n                    )\r\n                );\r\n                $rsPath->SetUrlTemplates(\'\', $arParams[\'SECTION_URL\']);\r\n                while ($arPath = $rsPath->GetNext()) {\r\n                    $arResult[\'SECTION\'][\'PATH\'][] = $arPath;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    if (isset($arResult[\'ID\'])) {\r\n        $this->SetResultCacheKeys(\r\n            array(\r\n                \'ID\',\r\n                \'NAME\',\r\n                \'SECTION\',\r\n                \'IPROPERTY_VALUES\',\r\n            )\r\n        );\r\n        $this->IncludeComponentTemplate();\r\n    } else {\r\n        $this->AbortResultCache();\r\n        \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n            trim($arParams[\'MESSAGE_404\']) ?: \'Элемент инфоблока не найден\',\r\n            true,\r\n            $arParams[\'SET_STATUS_404\'] === \'Y\',\r\n            $arParams[\'SHOW_404\'] === \'Y\',\r\n            $arParams[\'FILE_404\']\r\n        );\r\n    }\r\n}\r\n\r\n// кэш не затронет все действия ниже, здесь работаем уже с другим $arResult\r\nif (isset($arResult[\'ID\'])) {\r\n\r\n    // счетчик просмотров элемента\r\n    CIBlockElement::CounterInc($arResult[\'ID\']);\r\n\r\n    if ($arParams[\'SET_PAGE_TITLE\']) { // установить заголовок страницы?\r\n        if ($arResult[\'IPROPERTY_VALUES\'][\'ELEMENT_PAGE_TITLE\'] != \'\') {\r\n            $APPLICATION->SetTitle($arResult[\'IPROPERTY_VALUES\'][\'ELEMENT_PAGE_TITLE\']);\r\n        } else {\r\n            $APPLICATION->SetTitle($arResult[\'NAME\']);\r\n        }\r\n    }\r\n    if ($arParams[\'SET_BROWSER_TITLE\']) { // установить заголовок окна браузера?\r\n        if ($arResult[\'IPROPERTY_VALUES\'][\'ELEMENT_META_TITLE\'] != \'\') {\r\n            $APPLICATION->SetPageProperty(\'title\', $arResult[\'IPROPERTY_VALUES\'][\'ELEMENT_META_TITLE\']);\r\n        } else {\r\n            $APPLICATION->SetPageProperty(\'title\', $arResult[\'NAME\']);\r\n        }\r\n    }\r\n    // установить мета-тег keywords?\r\n    if ($arParams[\'SET_META_KEYWORDS\'] && $arResult[\'IPROPERTY_VALUES\'][\'ELEMENT_META_KEYWORDS\'] != \'\') {\r\n        $APPLICATION->SetPageProperty(\'keywords\', $arResult[\'IPROPERTY_VALUES\'][\'ELEMENT_META_KEYWORDS\']);\r\n    }\r\n    // установить мета-тег description?\r\n    if ($arParams[\'SET_META_DESCRIPTION\'] && $arResult[\'IPROPERTY_VALUES\'][\'ELEMENT_META_DESCRIPTION\'] != \'\') {\r\n        $APPLICATION->SetPageProperty(\'description\', $arResult[\'IPROPERTY_VALUES\'][\'ELEMENT_META_DESCRIPTION\']);\r\n    }\r\n\r\n    // добавить раздел в цепочку навигации?\r\n    if ($arParams[\'ADD_SECTIONS_CHAIN\'] && !empty($arResult[\'SECTION\'][\'PATH\'])) {\r\n        foreach ($arResult[\'SECTION\'][\'PATH\'] as $arPath) {\r\n            $APPLICATION->AddChainItem($arPath[\'NAME\'], $arPath[\'~SECTION_PAGE_URL\']);\r\n        }\r\n    }\r\n\r\n    return $arResult[\'ID\'];\r\n}\r\n[/php]\r\n\r\n<div class=\"note\">\r\n[php]\r\nbool CBitrixComponent::StartResultCache(\r\n   int cacheTime,\r\n   string additionalCacheID,\r\n   string cachePath\r\n)\r\n[/php]\r\n<p>\r\nМетод поддержки внутреннего кеширования компонента. Возвращает <code>true</code> в случае, если кеш недействителен, или <code>false</code> в противном случае.\r\n</p>\r\n<p>\r\nЕсли кеш действителен, метод отправляет на экран его содержимое, заполняет <code>$arResult</code> и возвращает <code>false</code>. Если кеш недействителен, метод возвращает <code>true</code>, кеширование завершается и кеш сохраняется при вызове методов\r\n</p>\r\n<ul>\r\n  <li><code>CBitrixComponent::IncludeComponentTemplate()</code></li>\r\n  <li>или</li>\r\n  <li><code>CBitrixComponent::ShowComponentTemplate()</code></li>\r\n</ul>\r\n<p>\r\nсразу после подключения шаблона компонента.\r\n</p>\r\n<p>\r\nПараметры\r\n</p>\r\n<ul>\r\n  <li><code>cacheTime</code> — Время кеширования в секундах. Если этот параметр равен <code>false</code>, то время кеширования берется из входного параметра <code>$arParams[\'CACHE_TIME\']</code>. Необязательный.</li>\r\n  <li><code>additionalCacheID</code> — Кеш зависит от текущего сайта (<code>SITE_ID</code>), имени компонента, имени шаблона, входных параметров <code>$arParams</code>. Если кеш должен зависеть от каких-либо дополнительных параметров, то их необходимо передать сюда в виде строки. По умолчанию параметр равен <code>false</code>, т.е. кеш зависит только от текущего сайта <code>SITE_ID</code>, имени компонента, имени шаблона и входных параметров <code>$arParams</code>. Необязательный.</li>\r\n  <li><code>cachePath</code> — Путь к файлу кеша относительно папки кешей. Необязательный.</li>\r\n<ul>\r\n</div>\r\n\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.element/templates/.default/template.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<h1><?php $APPLICATION->ShowTitle(false); /* Выводим «Заголовок страницы» */ ?></h1>\r\n\r\n<article id=\"iblock-element\">\r\n\r\n    <?php if (!empty($arResult[\'DETAIL_PICTURE\'])): ?>\r\n        <img src=\"<?= $arResult[\'DETAIL_PICTURE\'][\'SRC\']; ?>\"\r\n            alt=\"<?= $arResult[\'DETAIL_PICTURE\'][\'ALT\']; ?>\"\r\n            title=\"<?= $arResult[\'DETAIL_PICTURE\'][\'TITLE\']; ?>\" />\r\n    <?php endif; ?>\r\n\r\n    <p>Количество просмотров: <?= $arResult[\'SHOW_COUNTER\'] ? $arResult[\'SHOW_COUNTER\'] : 0; ?></p>\r\n\r\n    <?php if (!empty($arResult[\'DETAIL_TEXT\'])): ?>\r\n        <div>\r\n        <?= $arResult[\'DETAIL_TEXT\']; ?>\r\n        </div>\r\n    <?php endif; ?>\r\n    \r\n    <p><a href=\"<?= $arResult[\'SECTION\'][\'SECTION_PAGE_URL\']; ?>\">Назад в раздел</a></p>\r\n\r\n</article>\r\n[/phtml]\r\n\r\n[css]\r\n/*\r\n * Файл local/components/demo/iblock.element/templates/.default/style.css\r\n */\r\n#iblock-element {\r\n\r\n}\r\n[/css]\r\n\r\n<p>\r\nСоздадим раздел <code>/demo/</code> и разместим на странице <code>/demo/index.php</code> вызов компонента:\r\n</p>\r\n[phtml]\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Статьи о домашних животных\");\r\n?>\r\n\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"demo:iblock.element\",\r\n    \"\",\r\n    Array(\r\n        \"ADD_SECTIONS_CHAIN\" => \"Y\",\r\n        \"CACHE_GROUPS\" => \"Y\",\r\n        \"CACHE_TIME\" => \"3600\",\r\n        \"CACHE_TYPE\" => \"A\",\r\n        \"ELEMENT_CODE\" => $_REQUEST[\"ELEMENT_CODE\"],\r\n        \"ELEMENT_ID\" => $_REQUEST[\"ELEMENT_ID\"],\r\n        \"ELEMENT_URL\" => \"item/id/#ELEMENT_ID#/\",\r\n        \"FILE_404\" => \"\",\r\n        \"IBLOCK_ID\" => \"5\",\r\n        \"IBLOCK_TYPE\" => \"content\",\r\n        \"MESSAGE_404\" => \"\",\r\n        \"SECTION_URL\" => \"category/id/#SECTION_ID#/\",\r\n        \"SET_BROWSER_TITLE\" => \"Y\",\r\n        \"SET_META_DESCRIPTION\" => \"Y\",\r\n        \"SET_META_KEYWORDS\" => \"Y\",\r\n        \"SET_PAGE_TITLE\" => \"Y\",\r\n        \"SET_STATUS_404\" => \"Y\",\r\n        \"SHOW_404\" => \"Y\",\r\n        \"USE_CODE_INSTEAD_ID\" => \"N\"\r\n    )\r\n);\r\n?>\r\n\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\");\r\n?>\r\n[/phtml]','2018-09-17 13:48:30',1);
INSERT INTO `blog_posts` VALUES (194,17,'Битрикс. Создание комплексного компонента. Часть 2','','','CMS, Web-разработка, Битрикс, Инфоблок, Компонент, РазделИнфоблока, ШаблонКомпонента, ЭлементИнфоблока','Следующий простой компонент, который мы создадим, умеет выводить раздел инфоблока. А именно — показывать список подразделов текущего раздела и список элементов этого раздела. Подразделы и элементы отсортированы по коду сортировки, который задается в панели управления. В браузере это выглядит примерно так…','<p>\r\nСледующий простой компонент, который мы создадим, умеет выводить раздел инфоблока. А именно — показывать список подразделов текущего раздела и список элементов этого раздела. Подразделы и элементы отсортированы по коду сортировки, который задается в панели управления.\r\n</p>\r\n\r\n<h2>Простой компонент demo:iblock.section</h2>\r\nВ браузере это выглядит примерно так:\r\n<p>\r\n<a href=\"/files/blog/194/1.jpg\" class=\"zoom\"><img src=\"/files/blog/194/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.section/.description.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$arComponentDescription = array(\r\n    \'NAME\' => \'Раздел инфоблока\', // название компонента\r\n    \'DESCRIPTION\' => \'Выводит список элементов раздела инфоблока\',\r\n    \'ICON\' => \'/images/icon.gif\', // иконка компонента относительно папки компонента\r\n    \'CACHE_PATH\' => \'Y\', // показывать кнопку очистки кеша\r\n    \'SORT\' => 20, // порядок сортировки в визуальном редакторе\r\n    \'COMPLEX\' => \'N\', // признак комплексного компонента\r\n    \'PATH\' => array( // расположение компонента в визуальном редакторе\r\n        \'ID\' => \'demo\', // идентификатор верхнего уровеня в редакторе\r\n        \'NAME\' => \'Мои компоненты\', // название верхнего уровня в редакторе\r\n        \'CHILD\' => array( // второй уровень в визуальном редакторе\r\n            \'ID\' => \'demo_iblock\', // идентификатор второго уровня в редакторе\r\n            \'NAME\' => \'Информационный блок\' // название второго уровня в редакторе\r\n        )\r\n    )\r\n);\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.section/.parameters.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n// проверяем, установлен ли модуль «Информационные блоки»; если да — то подключаем его\r\nif (!CModule::IncludeModule(\'iblock\')) {\r\n    return;\r\n}\r\n\r\n/*\r\n * Получаем массив всех типов инфоблоков — для возможности выбора\r\n */\r\n$arIBlockType = CIBlockParameters::GetIBlockTypes();\r\n\r\n/*\r\n * Получаем массив инфоблоков — для возможности выбора; фильтруем их по\r\n * выбранному типу и по активности\r\n */\r\n$arInfoBlocks = array();\r\n$arFilter = array(\'ACTIVE\' => \'Y\');\r\n// если уже выбран тип инфоблока, выбираем инфоблоки только этого типа\r\nif (!empty($arCurrentValues[\'IBLOCK_TYPE\'])) {\r\n    $arFilter[\'TYPE\'] = $arCurrentValues[\'IBLOCK_TYPE\'];\r\n}\r\n$rsIBlock = CIBlock::GetList(\r\n    array(\'SORT\' => \'ASC\'),\r\n    $arFilter\r\n);\r\nwhile($iblock = $rsIBlock->Fetch()) {\r\n    $arInfoBlocks[$iblock[\'ID\']] = \'[\'.$iblock[\'ID\'].\'] \'.$iblock[\'NAME\'];\r\n}\r\n\r\n/*\r\n * Настройки компонента\r\n */\r\n$arComponentParameters = array(\r\n    \'GROUPS\' => array( // кроме групп по умолчанию, добавляем свою группу настроек\r\n        \'SEO_SETTINGS\' => array(\r\n            \'NAME\' => \'Настройки SEO\',\r\n            \'SORT\' => 800\r\n        ),\r\n    ),\r\n    \'PARAMETERS\' => array(\r\n        // выбор типа инфоблока\r\n        \'IBLOCK_TYPE\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Выберите тип инфоблока\',\r\n            \'TYPE\' => \'LIST\',\r\n            \'VALUES\' => $arIBlockType,\r\n            \'REFRESH\' => \'Y\',\r\n        ),\r\n        // выбор самого инфоблока\r\n        \'IBLOCK_ID\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Выберите инфоблок\',\r\n            \'TYPE\' => \'LIST\',\r\n            \'VALUES\' => $arInfoBlocks,\r\n            \'REFRESH\' => \'Y\',\r\n        ),\r\n\r\n        // идентификатор раздела получать из $_REQUEST[\"SECTION_ID\"]\r\n        \'SECTION_ID\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Идентификатор раздела\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'={$_REQUEST[\"SECTION_ID\"]}\',\r\n        ),\r\n        // символьный код раздела получать из $_REQUEST[\"SECTION_CODE\"]\r\n        \'SECTION_CODE\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Символьный код раздела\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'={$_REQUEST[\"SECTION_CODE\"]}\',\r\n        ),\r\n        \'ELEMENT_COUNT\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Количество элементов на странице\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'3\',\r\n        ),\r\n\r\n        // использовать символьный код вместо ID; если отмечен этот checkbox,\r\n        // в визуальном редакторе надо будет обязательно изменить SECTION_URL\r\n        // и ELEMENT_URL, чтобы вместо #SECTION_ID# и #ELEMENT_ID# в шаблонах\r\n        // ссылок использовались #SECTION_CODE# и #ELEMENT_CODE#\r\n        \'USE_CODE_INSTEAD_ID\' => array(\r\n            \'PARENT\' => \'URL_TEMPLATES\',\r\n            \'NAME\' => \'Использовать символьный код вместо ID\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'N\',\r\n        ),\r\n        // шаблон ссылки на страницу раздела\r\n        \'SECTION_URL\' => array(\r\n            \'PARENT\' => \'URL_TEMPLATES\',\r\n            \'NAME\' => \'URL, ведущий на страницу с содержимым раздела\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'category/id/#SECTION_ID#/\'\r\n        ),\r\n        // шаблон ссылки на страницу элемента\r\n        \'ELEMENT_URL\' => array(\r\n            \'PARENT\' => \'URL_TEMPLATES\',\r\n            \'NAME\' => \'URL, ведущий на страницу с содержимым элемента\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'item/id/#ELEMENT_ID#/\'\r\n        ),\r\n\r\n        // настройки SEO\r\n        \'SET_PAGE_TITLE\' => array(\r\n            \'PARENT\' => \'SEO_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать заголовок страницы\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'SET_BROWSER_TITLE\' => array(\r\n            \'PARENT\' => \'SEO_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать заголовок окна браузера\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'SET_META_KEYWORDS\' => array(\r\n            \'PARENT\' => \'SEO_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать мета-тег keywords\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'SET_META_DESCRIPTION\' => array(\r\n            \'PARENT\' => \'SEO_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать мета-тег description\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n\r\n        // включать раздел в цепочку навигации?\r\n        \'ADD_SECTIONS_CHAIN\' => Array(\r\n            \'PARENT\' => \'ADDITIONAL_SETTINGS\',\r\n            \'NAME\' => \'Включать раздел в цепочку навигации\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n\r\n        // настройки кэширования\r\n        \'CACHE_TIME\'  =>  array(\'DEFAULT\' => 3600),\r\n        \'CACHE_GROUPS\' => array(\r\n            \'PARENT\' => \'CACHE_SETTINGS\',\r\n            \'NAME\' => \'Учитывать права доступа\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n    ),\r\n);\r\n\r\n// настройка постраничной навигации\r\nCIBlockParameters::AddPagerSettings(\r\n    $arComponentParameters,\r\n    \'Элементы\', // $pager_title\r\n    true,       // $bDescNumbering\r\n    true,       // $bShowAllParam\r\n    true,       // $bBaseLink\r\n    $arCurrentValues[\'PAGER_BASE_LINK_ENABLE\']===\'Y\' // $bBaseLinkEnabled\r\n);\r\n\r\n// добавляем еще одну настройку — на случай, если раздел инфоблока не найден\r\nCIBlockParameters::Add404Settings($arComponentParameters, $arCurrentValues);\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.section/component.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var CBitrixComponent $this */\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @var string $componentPath */\r\n/** @var string $componentName */\r\n/** @var string $componentTemplate */\r\n/** @global CDatabase $DB */\r\n/** @global CUser $USER */\r\n/** @global CMain $APPLICATION */\r\n\r\nif (!CModule::IncludeModule(\'iblock\')) {\r\n    ShowError(\'Модуль «Информационные блоки» не установлен\');\r\n    return;\r\n}\r\n\r\n// запрещаем сохранение в сессии номера последней страницы \r\n// при стандартной постраничной навигации\r\nCPageOption::SetOptionString(\'main\', \'nav_page_in_session\', \'N\');\r\n\r\nif (!isset($arParams[\'CACHE_TIME\'])) {\r\n    $arParams[\'CACHE_TIME\'] = 3600;\r\n}\r\n\r\n// тип инфоблока\r\n$arParams[\'IBLOCK_TYPE\'] = trim($arParams[\'IBLOCK_TYPE\']);\r\n// идентификатор инфоблока\r\n$arParams[\'IBLOCK_ID\'] = intval($arParams[\'IBLOCK_ID\']);\r\n\r\n$notFound = false;\r\nif ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') {\r\n    // символьный код раздела инфоблока\r\n    $arParams[\'SECTION_CODE\'] = empty($arParams[\'SECTION_CODE\']) ? \'\' : trim($arParams[\'SECTION_CODE\']);\r\n    if (empty($arParams[\'SECTION_CODE\'])) {\r\n        $notFound = true;\r\n    }\r\n} else {\r\n    // идентификатор раздела инфоблока\r\n    $arParams[\'SECTION_ID\'] = empty($arParams[\'SECTION_ID\']) ? 0 : intval($arParams[\'SECTION_ID\']);\r\n    if (empty($arParams[\'SECTION_ID\'])) {\r\n        $notFound = true;\r\n    }\r\n}\r\n\r\n// если получено некорректное значение идентификатора раздела или символьного\r\n// кода раздела инфоблока, показываем страницу 404 Not Found\r\nif ($notFound) {\r\n    \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n        trim($arParams[\'MESSAGE_404\']) ?: \'Раздел инфоблока не найден\'\r\n        ,true\r\n        ,$arParams[\'SET_STATUS_404\'] === \'Y\'\r\n        ,$arParams[\'SHOW_404\'] === \'Y\'\r\n        ,$arParams[\'FILE_404\']\r\n    );\r\n    return;\r\n}\r\n\r\n// шаблон ссылки на страницу с содержимым раздела\r\n$arParams[\'SECTION_URL\'] = trim($arParams[\'SECTION_URL\']);\r\n// шаблон ссылки на страницу с содержимым элемента\r\n$arParams[\'ELEMENT_URL\'] = trim($arParams[\'ELEMENT_URL\']);\r\n\r\n// количество элементов на страницу\r\n$arParams[\'ELEMENT_COUNT\'] = intval($arParams[\'ELEMENT_COUNT\']);\r\nif ($arParams[\'ELEMENT_COUNT\'] <= 0) {\r\n    $arParams[\'ELEMENT_COUNT\'] = 3;\r\n}\r\n\r\n$arParams[\'ADD_SECTIONS_CHAIN\'] = $arParams[\'ADD_SECTIONS_CHAIN\'] == \'Y\';\r\n\r\n// настройки постраничной навигации\r\n$arParams[\'DISPLAY_TOP_PAGER\'] = $arParams[\'DISPLAY_TOP_PAGER\']==\'Y\';\r\n$arParams[\'DISPLAY_BOTTOM_PAGER\'] = $arParams[\'DISPLAY_BOTTOM_PAGER\']!=\'N\';\r\n$arParams[\'PAGER_TITLE\'] = trim($arParams[\'PAGER_TITLE\']);\r\n$arParams[\'PAGER_SHOW_ALWAYS\'] = $arParams[\'PAGER_SHOW_ALWAYS\']!=\'N\';\r\n$arParams[\'PAGER_TEMPLATE\'] = trim($arParams[\'PAGER_TEMPLATE\']);\r\n$arParams[\'PAGER_DESC_NUMBERING\'] = $arParams[\'PAGER_DESC_NUMBERING\']==\'Y\';\r\n$arParams[\'PAGER_DESC_NUMBERING_CACHE_TIME\'] = intval($arParams[\'PAGER_DESC_NUMBERING_CACHE_TIME\']);\r\n$arParams[\'PAGER_SHOW_ALL\'] = $arParams[\'PAGER_SHOW_ALL\']!==\'N\';\r\n\r\n$arNavParams = array(\r\n    \'nPageSize\' => $arParams[\'ELEMENT_COUNT\'],\r\n    \'bDescPageNumbering\' => $arParams[\'PAGER_DESC_NUMBERING\'],\r\n    \'bShowAll\' => $arParams[\'PAGER_SHOW_ALL\'],\r\n);\r\n$arNavigation = CDBResult::GetNavParams($arNavParams);\r\nif($arNavigation[\'PAGEN\']==0 && $arParams[\'PAGER_DESC_NUMBERING_CACHE_TIME\'] > 0) {\r\n    $arParams[\'CACHE_TIME\'] = $arParams[\'PAGER_DESC_NUMBERING_CACHE_TIME\'];\r\n}\r\n\r\nif (empty($arParams[\'PAGER_PARAMS_NAME\']) || !preg_match(\'/^[A-Za-z_][A-Za-z01-9_]*$/\', $arParams[\'PAGER_PARAMS_NAME\'])) {\r\n    $pagerParameters = array();\r\n} else {\r\n    $pagerParameters = $GLOBALS[$arParams[\'PAGER_PARAMS_NAME\']];\r\n    if (!is_array($pagerParameters)) {\r\n        $pagerParameters = array();\r\n    }\r\n}\r\n\r\n$cacheDependence = array($arParams[\'CACHE_GROUPS\']===\'N\' ? false: $USER->GetGroups(), $arNavigation, $pagerParameters);\r\nif ($this->StartResultCache(false, $cacheDependence)) {\r\n\r\n    /*\r\n     * Получаем информацию о разделе инфоблока\r\n     */\r\n     \r\n    // какие поля раздела инфоблока выбираем\r\n    $arSelect = array(\r\n        \'ID\',\r\n        \'NAME\',\r\n        \'DETAIL_PICTURE\',\r\n        \'DESCRIPTION\',\r\n        \'DESCRIPTION_TYPE\',\r\n    );\r\n\r\n    // условия выборки раздела инфоблока\r\n    $arFilter = array(\r\n        \'IBLOCK_ID\' => $arParams[\'IBLOCK_ID\'],\r\n        \'IBLOCK_ACTIVE\' => \'Y\',\r\n        \'ACTIVE\' => \'Y\',\r\n        \'GLOBAL_ACTIVE\' => \'Y\',\r\n    );\r\n\r\n    if (strlen($arParams[\'SECTION_CODE\']) > 0) { // выбираем раздел по символьному коду\r\n        $arFilter[\'=CODE\'] = $arParams[\'SECTION_CODE\'];\r\n    } else { // выбираем раздел по идентификатору\r\n        $arFilter[\'ID\'] = $arParams[\'SECTION_ID\'];\r\n    }\r\n\r\n    // выполняем запрос к базе данных\r\n    $rsSection = CIBlockSection::GetList(array(), $arFilter, false, $arSelect);\r\n    // устанавливаем шаблон пути для раздела, вместо того,\r\n    // который указан в настройках информационного блока\r\n    $rsSection->SetUrlTemplates(\'\', $arParams[\'SECTION_URL\']);\r\n    $arResult = $rsSection->GetNext();\r\n\r\n    if ($arResult) {\r\n        // путь к разделу от корня\r\n        $arResult[\'PATH\'] = array();\r\n        if ($arParams[\'ADD_SECTIONS_CHAIN\']) {\r\n            $rsPath = CIBlockSection::GetNavChain($arResult[\'IBLOCK_ID\'], $arResult[\'ID\']);\r\n            $rsPath->SetUrlTemplates(\'\', $arParams[\'SECTION_URL\']);\r\n            while ($arPath = $rsPath->GetNext()) {\r\n                $arResult[\'PATH\'][] = $arPath;\r\n            }\r\n        }\r\n        // картинка раздела\r\n        if ($arResult[\'DETAIL_PICTURE\'] > 0) {\r\n            $arResult[\'DETAIL_PICTURE\'] = CFile::GetFileArray($arResult[\'DETAIL_PICTURE\']);\r\n        } else {\r\n            $arResult[\'DETAIL_PICTURE\'] = false;\r\n        }\r\n        // получаем SEO-свойства раздела\r\n        $ipropValues = new \\Bitrix\\Iblock\\InheritedProperty\\SectionValues(\r\n            $arParams[\'IBLOCK_ID\'],\r\n            $arResult[\'ID\']\r\n        );\r\n        $arResult[\'IPROPERTY_VALUES\'] = $ipropValues->getValues();\r\n        if ($arResult[\'DETAIL_PICTURE\']) {\r\n            $arResult[\'DETAIL_PICTURE\'][\'ALT\'] =\r\n                $arResult[\'IPROPERTY_VALUES\'][\'SECTION_DETAIL_PICTURE_FILE_ALT\'];\r\n            if ($arResult[\'DETAIL_PICTURE\'][\'ALT\'] == \'\') {\r\n                $arResult[\'DETAIL_PICTURE\'][\'ALT\'] = $arResult[\'NAME\'];\r\n            }\r\n            $arResult[\'DETAIL_PICTURE\'][\'TITLE\'] =\r\n                $arResult[\'IPROPERTY_VALUES\'][\'[SECTION_DETAIL_PICTURE_FILE_TITLE\'];\r\n            if ($arResult[\'DETAIL_PICTURE\'][\'TITLE\'] == \'\') {\r\n                $arResult[\'DETAIL_PICTURE\'][\'TITLE\'] = $arResult[\'NAME\'];\r\n            }\r\n        }\r\n\r\n        /*\r\n         * Получаем подразделы этого раздела инфоблока\r\n         */\r\n\r\n        // какие поля подразделов выбираем\r\n        $arSelect = array(\r\n            \'ID\',\r\n            \'NAME\',\r\n            \'PICTURE\',\r\n            \'DESCRIPTION\',\r\n            \'DESCRIPTION_TYPE\',\r\n            \'SECTION_PAGE_URL\'\r\n        );\r\n        // условия выборки подразделов\r\n        $arFilter = array(\r\n            \'IBLOCK_ID\' => $arParams[\'IBLOCK_ID\'], // идентификатор инфоблока\r\n            \'IBLOCK_ACTIVE\' => \'Y\',                // инфоблок должен быть активен\r\n            \'SECTION_ID\' => $arResult[\'ID\'],       // подразделы этого раздела\r\n            \'ACTIVE\' => \'Y\',                       // только активные разделы\r\n            \'CHECK_PERMISSIONS\' => \'Y\',            // проверять права доступа\r\n        );\r\n        // сортировка подразделов\r\n        $arSort = array(\r\n            \'SORT\' => \'ASC\',\r\n        );\r\n        // выполняем запрос к базе данных\r\n        $rsSections = CIBlockSection::GetList($arSort, $arFilter, false, $arSelect);\r\n        // устанавливаем шаблон пути для подразделов, вместо того,\r\n        // который указан в настройках информационного блока\r\n        $rsSections->SetUrlTemplates(\'\', $arParams[\'SECTION_URL\']);\r\n\r\n        while ($arSection = $rsSections->GetNext()) {\r\n            if (0 < $arSection[\'PICTURE\']) {\r\n                $arSection[\'PREVIEW_PICTURE\'] = CFile::GetFileArray($arSection[\'PICTURE\']);\r\n            } else {\r\n                $arSection[\'PREVIEW_PICTURE\'] = false;\r\n            }\r\n            unset($arSection[\'PICTURE\']);\r\n            \r\n            // получаем SEO-свойства очередного подраздела\r\n            $ipropValues = new \\Bitrix\\Iblock\\InheritedProperty\\SectionValues(\r\n                $arParams[\'IBLOCK_ID\'],\r\n                $arSection[\'ID\']\r\n            );\r\n            $arSection[\'IPROPERTY_VALUES\'] = $ipropValues->getValues();\r\n\r\n            if ($arSection[\'PREVIEW_PICTURE\']) {\r\n                $arSection[\'PREVIEW_PICTURE\'][\'ALT\'] =\r\n                    $arSection[\'IPROPERTY_VALUES\'][\'SECTION_PICTURE_FILE_ALT\'];\r\n                if ($arSection[\'PREVIEW_PICTURE\'][\'ALT\'] == \'\') {\r\n                    $arSection[\'PREVIEW_PICTURE\'][\'ALT\'] = $arSection[\'NAME\'];\r\n                }\r\n                $arSection[\'PREVIEW_PICTURE\'][\'TITLE\'] =\r\n                    $arSection[\'IPROPERTY_VALUES\'][\'[SECTION_PICTURE_FILE_TITLE\'];\r\n                if ($arSection[\'PREVIEW_PICTURE\'][\'TITLE\'] == \'\') {\r\n                    $arSection[\'PREVIEW_PICTURE\'][\'TITLE\'] = $arSection[\'NAME\'];\r\n                }\r\n            }\r\n\r\n            $arResult[\'CHILD_SECTIONS\'][] = $arSection;\r\n        }\r\n\r\n        /*\r\n         * Получаем элементы этого раздела инфоблока\r\n         */\r\n\r\n        // какие поля элементов выбираем\r\n        $arSelect = array(\r\n            \'ID\',\r\n            \'CODE\',\r\n            \'IBLOCK_ID\',\r\n            \'NAME\',\r\n            \'PREVIEW_PICTURE\',\r\n            \'DETAIL_PAGE_URL\',\r\n            \'PREVIEW_TEXT\',\r\n            \'PREVIEW_TEXT_TYPE\',\r\n            \'SHOW_COUNTER\'\r\n        );\r\n        // условия выборки элементов инфоблока\r\n        $arFilter = array(\r\n            \'IBLOCK_ID\' => $arParams[\'IBLOCK_ID\'],\r\n            \'IBLOCK_ACTIVE\' => \'Y\',\r\n            \'SECTION_ID\' => $arResult[\'ID\'],\r\n            \'INCLUDE_SUBSECTIONS\' => \'Y\',\r\n            \'ACTIVE\' => \'Y\',\r\n            \'ACTIVE_DATE\' => \'Y\',\r\n            \'CHECK_PERMISSIONS\' => \'Y\'\r\n        );\r\n        // сортировка элементов\r\n        $arSort = array(\r\n            \'SORT\' => \'ASC\'\r\n        );\r\n        // выполняем запрос к базе данных\r\n        $rsElements = CIBlockElement::GetList($arSort, $arFilter, false, $arNavParams, $arSelect);\r\n\r\n        // устанавливаем шаблоны путей для раздела и элемента, вместо тех, которые\r\n        // указаны в настройках информационного блока или были установлены ранее\r\n        $rsElements->SetUrlTemplates($arParams[\'ELEMENT_URL\'], $arParams[\'SECTION_URL\']);\r\n\r\n        $arResult[\'ITEMS\'] = array();\r\n        while ($arItem = $rsElements->GetNext()) {\r\n\r\n            // получаем SEO-свойства очередного элемента\r\n            $ipropValues = new \\Bitrix\\Iblock\\InheritedProperty\\ElementValues(\r\n                $arItem[\'IBLOCK_ID\'],\r\n                $arItem[\'ID\']\r\n            );\r\n            $arItem[\'IPROPERTY_VALUES\'] = $ipropValues->getValues();\r\n\r\n            $arItem[\'PREVIEW_PICTURE\'] =\r\n                (0 < $arItem[\'PREVIEW_PICTURE\'] ? CFile::GetFileArray($arItem[\'PREVIEW_PICTURE\']) : false);\r\n            if ($arItem[\'PREVIEW_PICTURE\']) {\r\n                $arItem[\'PREVIEW_PICTURE\'][\'ALT\'] =\r\n                    $arItem[\'IPROPERTY_VALUES\'][\'ELEMENT_PREVIEW_PICTURE_FILE_ALT\'];\r\n                if ($arItem[\'PREVIEW_PICTURE\'][\'ALT\'] == \'\') {\r\n                    $arItem[\'PREVIEW_PICTURE\'][\'ALT\'] = $arItem[\'NAME\'];\r\n                }\r\n                $arItem[\'PREVIEW_PICTURE\'][\'TITLE\'] =\r\n                    $arItem[\'IPROPERTY_VALUES\'][\'ELEMENT_PREVIEW_PICTURE_FILE_TITLE\'];\r\n                if ($arItem[\'PREVIEW_PICTURE\'][\'TITLE\'] == \'\') {\r\n                    $arItem[\'PREVIEW_PICTURE\'][\'TITLE\'] = $arItem[\'NAME\'];\r\n                }\r\n            }\r\n\r\n            $arResult[\'ITEMS\'][] = $arItem;\r\n        }\r\n\r\n        /*\r\n         * Постраничная навигация\r\n         */\r\n        $navComponentParameters = array();\r\n        if ($arParams[\'PAGER_BASE_LINK_ENABLE\'] === \'Y\') {\r\n            $pagerBaseLink = trim($arParams[\'PAGER_BASE_LINK\']);\r\n            if ($pagerBaseLink === \'\') {\r\n                $pagerBaseLink = $arResult[\'~SECTION_PAGE_URL\'];\r\n            }\r\n\r\n            if ($pagerParameters && isset($pagerParameters[\'BASE_LINK\'])) {\r\n                $pagerBaseLink = $pagerParameters[\'BASE_LINK\'];\r\n                unset($pagerParameters[\'BASE_LINK\']);\r\n            }\r\n\r\n            $navComponentParameters[\'BASE_LINK\'] = CHTTP::urlAddParams(\r\n                $pagerBaseLink,\r\n                $pagerParameters,\r\n                array(\'encode\' => true)\r\n            );\r\n        }\r\n\r\n        $arResult[\'NAV_STRING\'] = $rsElements->GetPageNavStringEx(\r\n            $navComponentObject,\r\n            $arParams[\'PAGER_TITLE\'],\r\n            $arParams[\'PAGER_TEMPLATE\'],\r\n            $arParams[\'PAGER_SHOW_ALWAYS\'],\r\n            $this,\r\n            $navComponentParameters\r\n        );\r\n        $arResult[\'NAV_CACHED_DATA\'] = $navComponentObject->GetTemplateCachedData();\r\n        $arResult[\'NAV_RESULT\'] = $rsElements;\r\n\r\n        $this->SetResultCacheKeys(\r\n            array(\r\n                \'ID\',\r\n                \'IBLOCK_ID\',\r\n                \'NAME\',\r\n                \'PATH\',\r\n                \'IPROPERTY_VALUES\',\r\n            )\r\n        );\r\n        $this->IncludeComponentTemplate();\r\n    } else { // если раздел инфоблока не найден\r\n        $this->AbortResultCache();\r\n        \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n            trim($arParams[\'MESSAGE_404\']) ?: \'Раздел инфоблока не найден\'\r\n            ,true\r\n            ,$arParams[\'SET_STATUS_404\'] === \'Y\'\r\n            ,$arParams[\'SHOW_404\'] === \'Y\'\r\n            ,$arParams[\'FILE_404\']\r\n        );\r\n    }\r\n}\r\n\r\n// кэш не затронет все действия ниже, здесь работаем уже с другим $arResult\r\nif (isset($arResult[\'ID\'])) {\r\n    if ($arParams[\'SET_PAGE_TITLE\']) { // устанавливить заголовок страницы?\r\n        if ($arResult[\'IPROPERTY_VALUES\'][\'SECTION_PAGE_TITLE\'] != \'\') {\r\n            $APPLICATION->SetTitle($arResult[\'IPROPERTY_VALUES\'][\'SECTION_PAGE_TITLE\']);\r\n        } else {\r\n            $APPLICATION->SetTitle($arResult[\'NAME\']);\r\n        }\r\n    }\r\n    if ($arParams[\'SET_BROWSER_TITLE\']) { // устанавить заголовок окна браузера?\r\n        if ($arResult[\'IPROPERTY_VALUES\'][\'SECTION_META_TITLE\'] != \'\') {\r\n            $APPLICATION->SetPageProperty(\'title\', $arResult[\'IPROPERTY_VALUES\'][\'SECTION_META_TITLE\']);\r\n        } else {\r\n            $APPLICATION->SetPageProperty(\'title\', $arResult[\'NAME\']);\r\n        }\r\n    }\r\n    // установить мета-тег keywords?\r\n    if ($arParams[\'SET_META_KEYWORDS\'] && $arResult[\'IPROPERTY_VALUES\'][\'SECTION_META_KEYWORDS\'] != \'\') {\r\n        $APPLICATION->SetPageProperty(\'keywords\', $arResult[\'IPROPERTY_VALUES\'][\'SECTION_META_KEYWORDS\']);\r\n    }\r\n    if ($arParams[\'SET_META_DESCRIPTION\'] && $arResult[\'IPROPERTY_VALUES\'][\'SECTION_META_DESCRIPTION\'] != \'\') {\r\n        $APPLICATION->SetPageProperty(\'description\', $arResult[\'IPROPERTY_VALUES\'][\'SECTION_META_DESCRIPTION\']);\r\n    }\r\n\r\n    if ($arParams[\'ADD_SECTIONS_CHAIN\']) { // добавить раздел в цепочку навигации?\r\n        foreach($arResult[\'PATH\'] as $arPath) {\r\n            $APPLICATION->AddChainItem($arPath[\'NAME\'], $arPath[\'~SECTION_PAGE_URL\']);\r\n        }\r\n    }\r\n}\r\n[/php]\r\n\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.section/templates/.default/template.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<h1><?php $APPLICATION->ShowTitle(false); /* Выводим «Заголовок страницы» */ ?></h1>\r\n\r\n<?php if (!empty($arResult[\'CHILD_SECTIONS\'])): ?>\r\n    <div id=\"iblock-child-sections\">\r\n        <?php foreach ($arResult[\'CHILD_SECTIONS\'] as $arSection): /* подразделы текущего раздела */ ?>\r\n            <article>\r\n                <a href=\"<?= $arSection[\'SECTION_PAGE_URL\']; ?>\">\r\n                    <img src=\"<?= $arSection[\'PREVIEW_PICTURE\'][\'SRC\']; ?>\"\r\n                         alt=\"<?= $arSection[\'PREVIEW_PICTURE\'][\'ALT\']; ?>\"\r\n                         title=\"<?= $arSection[\'PREVIEW_PICTURE\'][\'TITLE\']; ?>\" />\r\n                </a>\r\n                <h2><a href=\"<?= $arSection[\'SECTION_PAGE_URL\']; ?>\"><?= $arSection[\'NAME\']; ?></a></h2>\r\n                <?php if (!empty($arSection[\'DESCRIPTION\'])): ?>\r\n                    <p><?= $arSection[\'DESCRIPTION\']; ?></p>\r\n                <?php endif; ?>\r\n            </article>\r\n        <?php endforeach; ?>\r\n    </div>\r\n<?php endif; ?>\r\n\r\n<div id=\"iblock-section-items\">\r\n    <?php if ($arParams[\'DISPLAY_TOP_PAGER\']): ?>\r\n        <div class=\"pager\">\r\n        <?= $arResult[\'NAV_STRING\']; ?>\r\n        </div>\r\n    <?php endif; ?>\r\n\r\n    <section>\r\n    <?php foreach ($arResult[\'ITEMS\'] as $arItem): ?>\r\n        <article>\r\n            <a href=\"<?= $arSection[\'DETAIL_PAGE_URL\']; ?>\">\r\n                <img src=\"<?= $arItem[\'PREVIEW_PICTURE\'][\'SRC\']; ?>\"\r\n                     alt=\"<?= $arItem[\'PREVIEW_PICTURE\'][\'ALT\']; ?>\"\r\n                     title=\"<?= $arItem[\'PREVIEW_PICTURE\'][\'TITLE\']; ?>\" />\r\n            </a>\r\n            <h3><a href=\"<?= $arItem[\'DETAIL_PAGE_URL\']; ?>\"><?= $arItem[\'NAME\']; ?></a></h3>\r\n            <?php if (!empty($arItem[\'PREVIEW_TEXT\'])): ?>\r\n                <p><?= $arItem[\'PREVIEW_TEXT\']; ?></p>\r\n            <?php endif; ?>\r\n            <span>Количество просмотров: <?= $arItem[\'SHOW_COUNTER\'] ? $arItem[\'SHOW_COUNTER\'] : 0; ?></span>\r\n        </article>\r\n    <?php endforeach; ?>\r\n    </section>\r\n\r\n    <?php if ($arParams[\'DISPLAY_BOTTOM_PAGER\']): ?>\r\n        <div class=\"pager\">\r\n        <?= $arResult[\'NAV_STRING\']; ?>\r\n        </div>\r\n    <?php endif; ?>\r\n</div>\r\n[/phtml]\r\n\r\n[css]\r\n/*\r\n * Файл local/components/demo/iblock.section/templates/.default/style.css\r\n */\r\n#iblock-child-sections {\r\n\r\n}\r\n    #iblock-child-sections > article {\r\n        border: 1px solid #d1d1d1;\r\n        padding: 10px;\r\n        border-radius: 10px;\r\n        overflow: hidden;\r\n        margin-bottom: 15px;\r\n        background: #f5f5f5;\r\n    }\r\n        #iblock-child-sections > article > h2 {\r\n            margin: -5px 0 5px 120px !important;\r\n        }\r\n        #iblock-child-sections > article > p {\r\n            margin: 5px 0 0 120px !important;\r\n        }\r\n        #iblock-child-sections > article > a > img {\r\n            width: 100px;\r\n            height: 100px;\r\n            float: left;\r\n        }\r\n\r\n#iblock-section-items {\r\n    margin-top: 40px;\r\n}\r\n    #iblock-section-items > section {\r\n        \r\n    }\r\n        #iblock-section-items > section > article {\r\n            border-bottom: 1px dashed #395985;\r\n            padding: 15px 0 15px 0;\r\n            overflow: hidden;\r\n        }\r\n        #iblock-section-items > section > article:first-child {\r\n            border-top: 1px dashed #395985;\r\n        }\r\n            #iblock-section-items > section > article > a > img {\r\n                width: 140px;\r\n                height: 140px;\r\n                float: left;\r\n            }\r\n                #iblock-section-items > section > article > h3 {\r\n                    margin-top: 0;\r\n                }\r\n                #iblock-section-items > section > article > p {\r\n\r\n                }\r\n                #iblock-section-items > section > article > span {\r\n                    display: block;\r\n                    font-size: 12px;\r\n                    color: #999;\r\n                }\r\n                #iblock-section-items > section > article > h3,\r\n                #iblock-section-items > section > article > p,\r\n                #iblock-section-items > section > article > span {\r\n                    margin-left: 150px;\r\n                }\r\n[/css]\r\n\r\n<p>\r\nПример вызова компонента:\r\n</p>\r\n[phtml]\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Статьи о домашних животных\");\r\n?>\r\n\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"demo:iblock.section\",\r\n    \"\",\r\n    Array(\r\n        \"ADD_SECTIONS_CHAIN\" => \"Y\",\r\n        \"CACHE_GROUPS\" => \"Y\",\r\n        \"CACHE_TIME\" => \"3600\",\r\n        \"CACHE_TYPE\" => \"A\",\r\n        \"DISPLAY_BOTTOM_PAGER\" => \"Y\",\r\n        \"DISPLAY_TOP_PAGER\" => \"N\",\r\n        \"ELEMENT_COUNT\" => \"3\",\r\n        \"ELEMENT_URL\" => \"item/id/#ELEMENT_ID#/\",\r\n        \"IBLOCK_ID\" => \"5\",\r\n        \"IBLOCK_TYPE\" => \"content\",\r\n        \"MESSAGE_404\" => \"\",\r\n        \"PAGER_BASE_LINK_ENABLE\" => \"N\",\r\n        \"PAGER_DESC_NUMBERING\" => \"N\",\r\n        \"PAGER_DESC_NUMBERING_CACHE_TIME\" => \"36000\",\r\n        \"PAGER_SHOW_ALL\" => \"N\",\r\n        \"PAGER_SHOW_ALWAYS\" => \"N\",\r\n        \"PAGER_TEMPLATE\" => \".default\",\r\n        \"PAGER_TITLE\" => \"Элементы\",\r\n        \"SECTION_CODE\" => $_REQUEST[\"SECTION_CODE\"],\r\n        \"SECTION_ID\" => $_REQUEST[\"SECTION_ID\"],\r\n        \"SECTION_URL\" => \"category/id/#SECTION_ID#/\",\r\n        \"SET_BROWSER_TITLE\" => \"Y\",\r\n        \"SET_META_DESCRIPTION\" => \"Y\",\r\n        \"SET_META_KEYWORDS\" => \"Y\",\r\n        \"SET_PAGE_TITLE\" => \"Y\",\r\n        \"SET_STATUS_404\" => \"Y\",\r\n        \"SHOW_404\" => \"N\",\r\n        \"USE_CODE_INSTEAD_ID\" => \"N\"\r\n    )\r\n);\r\n?>\r\n\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\");\r\n?>\r\n[/phtml]\r\n\r\n<h2>Простой компонент demo:iblock.popular</h2>\r\n<p>\r\nПоследний простой компонент, который нам потребуется для создания комплексного компонета, умеет выводить корневые разделы инфоблока и популярные элементы. Из каких разделов выбирать популярные элементы — задается в настройках. Популярность определяется по количеству просмотров того или иного элемента. В браузере это выглядит примерно так:\r\n<p>\r\n<a href=\"/files/blog/194/2.jpg\" class=\"zoom\"><img src=\"/files/blog/194/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.popular/.description.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$arComponentDescription = array(\r\n    \'NAME\' => \'Популярные элементы\', // название компонента\r\n    \'DESCRIPTION\' => \'Выводит корневые разделы и популярные элементы в каждом разделе\',\r\n    \'ICON\' => \'/images/icon.gif\', // иконка компонента относительно папки компонента\r\n    \'CACHE_PATH\' => \'Y\', // показывать кнопку очистки кеша\r\n    \'SORT\' => 10, // порядок сортировки в визуальном редакторе\r\n    \'COMPLEX\' => \'N\', // признак комплексного компонента\r\n    \'PATH\' => array( // расположение компонента в визуальном редакторе\r\n        \'ID\' => \'demo\', // идентификатор верхнего уровеня в редакторе\r\n        \'NAME\' => \'Мои компоненты\', // название верхнего уровня в редакторе\r\n        \'CHILD\' => array( // второй уровень в визуальном редакторе\r\n            \'ID\' => \'demo_iblock\', // идентификатор второго уровня в редакторе\r\n            \'NAME\' => \'Информационный блок\' // название второго уровня в редакторе\r\n        )\r\n    )\r\n);\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.popular/.parameters.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n// проверяем, установлен ли модуль «Информационные блоки»; если да — то подключаем его\r\nif (!CModule::IncludeModule(\'iblock\')) {\r\n    return;\r\n}\r\n\r\n/*\r\n * Получаем массив всех типов инфоблоков — для возможности выбора\r\n */\r\n$arIBlockType = CIBlockParameters::GetIBlockTypes();\r\n\r\n/*\r\n * Получаем массив инфоблоков — для возможности выбора; фильтруем их по\r\n * выбранному типу и по активности\r\n */\r\n$arInfoBlocks = array();\r\n$arFilter = array(\'ACTIVE\' => \'Y\');\r\n// если уже выбран тип инфоблока, выбираем инфоблоки только этого типа\r\nif (!empty($arCurrentValues[\'IBLOCK_TYPE\'])) {\r\n    $arFilter[\'TYPE\'] = $arCurrentValues[\'IBLOCK_TYPE\'];\r\n}\r\n$rsIBlock = CIBlock::GetList(\r\n    array(\'SORT\' => \'ASC\'),\r\n    $arFilter\r\n);\r\nwhile($iblock = $rsIBlock->Fetch()) {\r\n    $arInfoBlocks[$iblock[\'ID\']] = \'[\'.$iblock[\'ID\'].\'] \'.$iblock[\'NAME\'];\r\n}\r\n\r\n/*\r\n * Получаем массив разделов инфоблока, из которых надо получать\r\n * популярные элементы — для возможности выбора\r\n */\r\n$arInfoBlockSections = array(\r\n    \'-\' => \'[=Выберите=]\',\r\n);\r\n$arFilter = array(\r\n    \'SECTION_ID\' => false, // только корневые разделы\r\n    \'ACTIVE\' => \'Y\' // только активные разделы\r\n);\r\n// если уже выбран тип инфоблока, выбираем разделы, принадлежащие инфоблокам выбранного типа\r\nif (!empty($arCurrentValues[\'IBLOCK_TYPE\'])) {\r\n    $arFilter[\'IBLOCK_TYPE\'] = $arCurrentValues[\'IBLOCK_TYPE\'];\r\n}\r\n// если уже выбран инфоблок, выбираем разделы только этого инфоблока\r\nif (!empty($arCurrentValues[\'IBLOCK_ID\'])) {\r\n    $arFilter[\'IBLOCK_ID\'] = $arCurrentValues[\'IBLOCK_ID\'];\r\n}\r\n$result = CIBlockSection::GetList(\r\n    array(\'SORT\' => \'ASC\'),\r\n    $arFilter\r\n);\r\nwhile ($section = $result->Fetch()) {\r\n    $arInfoBlockSections[$section[\'ID\']] = \'[\'.$section[\'ID\'].\'] \'.$section[\'NAME\'];\r\n}\r\n\r\n/*\r\n * Настройки компонента\r\n */\r\n$arComponentParameters = array(\r\n    \'GROUPS\' => array( // кроме групп по умолчанию, добавляем свою группу настроек\r\n        \'SEO_SETTINGS\' => array(\r\n            \'NAME\' => \'Настройки SEO\',\r\n            \'SORT\' => 800\r\n        ),\r\n    ),\r\n    \'PARAMETERS\' => array(\r\n        // выбор типа инфоблока\r\n        \'IBLOCK_TYPE\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Выберите тип инфоблока\',\r\n            \'TYPE\' => \'LIST\',\r\n            \'VALUES\' => $arIBlockType,\r\n            \'REFRESH\' => \'Y\',\r\n        ),\r\n        // выбор самого инфоблока\r\n        \'IBLOCK_ID\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Выберите инфоблок\',\r\n            \'TYPE\' => \'LIST\',\r\n            \'VALUES\' => $arInfoBlocks,\r\n            \'REFRESH\' => \'Y\',\r\n        ),\r\n        // показывать корневые разделы инфоблока?\r\n        \'ROOT_SECTIONS\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Показывать корневые разделы\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        // выбор разделов инфоблока, откуда будем получать популярные элементы\r\n        \'POPULAR_SECTIONS\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Выберите разделы инфоблока для выборки популярных элементов\',\r\n            \'TYPE\' => \'LIST\',\r\n            \'VALUES\' => $arInfoBlockSections,\r\n            \'MULTIPLE\'=>\'Y\',\r\n            \'REFRESH\' => \'Y\',\r\n        ),\r\n        // максимальное количество популярных элементов в разделе\r\n        \'ELEMENT_COUNT\' => array(\r\n            \'PARENT\' => \'DASE\',\r\n            \'NAME\' => \'Максимальное количество элементов в разделе\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'3\',\r\n        ),\r\n\r\n        // использовать символьный код вместо ID; если отмечен этот checkbox,\r\n        // в визуальном редакторе надо будет обязательно изменить SECTION_URL\r\n        // и ELEMENT_URL, чтобы вместо #SECTION_ID# и #ELEMENT_ID# в шаблонах\r\n        // ссылок использовались #SECTION_CODE# и #ELEMENT_CODE#\r\n        \'USE_CODE_INSTEAD_ID\' => array(\r\n            \'PARENT\' => \'URL_TEMPLATES\',\r\n            \'NAME\' => \'Использовать символьный код вместо ID\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'N\',\r\n        ),\r\n        // шаблон ссылки на страницу раздела\r\n        \'SECTION_URL\' => array(\r\n            \'PARENT\' => \'URL_TEMPLATES\',\r\n            \'NAME\' => \'URL, ведущий на страницу с содержимым раздела\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'category/id/#SECTION_ID#/\'\r\n        ),\r\n        // шаблон ссылки на страницу элемента\r\n        \'ELEMENT_URL\' => array(\r\n            \'PARENT\' => \'URL_TEMPLATES\',\r\n            \'NAME\' => \'URL, ведущий на страницу с содержимым элемента\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'item/id/#ELEMENT_ID#/\'\r\n        ),\r\n\r\n        // настройки SEO\r\n        \'SET_PAGE_TITLE\' => array(\r\n            \'PARENT\' => \'SEO_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать заголовок страницы из названия инфоблока\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'SET_BROWSER_TITLE\' => array(\r\n            \'PARENT\' => \'SEO_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать заголовок окна браузера из названия инфоблока\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n\r\n        // настройки кэширования\r\n        \'CACHE_TIME\'  =>  array(\'DEFAULT\'=>3600),\r\n        \'CACHE_GROUPS\' => array(\r\n            \'PARENT\' => \'CACHE_SETTINGS\',\r\n            \'NAME\' => \'Учитывать права доступа\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n    ),\r\n);\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.popular/component.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var CBitrixComponent $this */\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @var string $componentPath */\r\n/** @var string $componentName */\r\n/** @var string $componentTemplate */\r\n/** @global CDatabase $DB */\r\n/** @global CUser $USER */\r\n/** @global CMain $APPLICATION */\r\n\r\nif (!CModule::IncludeModule(\'iblock\')) {\r\n    ShowError(\'Модуль «Информационные блоки» не установлен\');\r\n    return;\r\n}\r\n\r\nif (!isset($arParams[\'CACHE_TIME\'])) {\r\n    $arParams[\'CACHE_TIME\'] = 3600;\r\n}\r\n\r\n// тип инфоблока, из которого будем получать популярные элементы\r\n$arParams[\'IBLOCK_TYPE\'] = trim($arParams[\'IBLOCK_TYPE\']);\r\n// инфоблок, из которого будем получать популярные элементы\r\n$arParams[\'IBLOCK_ID\'] = intval($arParams[\'IBLOCK_ID\']);\r\n\r\n// максимальное кол-во разделов, из которых будем получать популярные элементы\r\n$arParams[\'SECTION_COUNT\'] = intval($arParams[\'SECTION_COUNT\']);\r\nif ($arParams[\'SECTION_COUNT\'] <= 0) {\r\n    $arParams[\'SECTION_COUNT\'] = 5;\r\n}\r\n\r\n// максимальное количество популярных элементов в каждом разделе\r\n$arParams[\'ELEMENT_COUNT\'] = intval($arParams[\'ELEMENT_COUNT\']);\r\nif($arParams[\'ELEMENT_COUNT\'] <= 0) {\r\n    $arParams[\'ELEMENT_COUNT\'] = 3;\r\n}\r\n\r\n$arParams[\'SECTION_URL\'] = trim($arParams[\'SECTION_URL\']);\r\n$arParams[\'ELEMENT_URL\'] = trim($arParams[\'ELEMENT_URL\']);\r\n\r\n// получаем данные об инфоблоке\r\n$rsIblock = CIBlock::GetByID($arParams[\'IBLOCK_ID\']);\r\n$arResult[\'IBLOCK\'] = $rsIblock ->GetNext();\r\n\r\n$arResult[\'POPULAR_SECTIONS\'] = array();\r\n\r\nif ($this->StartResultCache(false, ($arParams[\'CACHE_GROUPS\']===\'N\'? false: $USER->GetGroups()))) {\r\n\r\n    /*\r\n     * Получаем корневые разделы инфоблока, если это задано в настройках\r\n     */\r\n    if ($arParams[\'ROOT_SECTIONS\'] == \'Y\') {\r\n        // какие поля коневых разделов инфоблока выбираем\r\n        $arSelect = array(\r\n            \'ID\',\r\n            \'NAME\',\r\n            \'PICTURE\',\r\n            \'DESCRIPTION\',\r\n            \'DESCRIPTION_TYPE\',\r\n            \'SECTION_PAGE_URL\'\r\n        );\r\n        // условия выборки корневых разделов инфоблока\r\n        $arFilter = array(\r\n            \'IBLOCK_ID\' => $arParams[\'IBLOCK_ID\'], // идентификатор инфоблока\r\n            \'IBLOCK_ACTIVE\' => \'Y\',                // инфоблок должен быть активен\r\n            \'SECTION_ID\' => false,                 // получаем корневые разделы\r\n            \'ACTIVE\' => \'Y\',                       // только активные разделы\r\n            \'CHECK_PERMISSIONS\' => \'Y\',            // проверять права доступа\r\n        );\r\n        // сортировка\r\n        $arSort = array(\r\n            \'SORT\' => \'ASC\',\r\n        );\r\n\r\n        // выполняем запрос к базе данных\r\n        $rsSections = CIBlockSection::GetList($arSort, $arFilter, false, $arSelect);\r\n        // устанавливаем шаблон пути для корневых разделов, вместо того,\r\n        // который указан в настройках информационного блока\r\n        $rsSections->SetUrlTemplates(\'\', $arParams[\'SECTION_URL\']);\r\n\r\n        while ($arSection = $rsSections->GetNext()) {\r\n            if (0 < $arSection[\'PICTURE\']) {\r\n                $arSection[\'PREVIEW_PICTURE\'] = CFile::GetFileArray($arSection[\'PICTURE\']);\r\n            } else {\r\n                $arSection[\'PREVIEW_PICTURE\'] = false;\r\n            }\r\n            unset($arSection[\'PICTURE\']);\r\n\r\n            // получаем SEO-свойства очередного раздела\r\n            $ipropValues = new \\Bitrix\\Iblock\\InheritedProperty\\SectionValues(\r\n                $arParams[\'IBLOCK_ID\'],\r\n                $arSection[\'ID\']\r\n            );\r\n            $arSection[\'IPROPERTY_VALUES\'] = $ipropValues->getValues();\r\n\r\n            if ($arSection[\'PREVIEW_PICTURE\']) {\r\n                $arSection[\'PREVIEW_PICTURE\'][\'ALT\'] =\r\n                    $arSection[\'IPROPERTY_VALUES\'][\'SECTION_PICTURE_FILE_ALT\'];\r\n                if ($arSection[\'PREVIEW_PICTURE\'][\'ALT\'] == \'\') {\r\n                    $arSection[\'PREVIEW_PICTURE\'][\'ALT\'] = $arSection[\'NAME\'];\r\n                }\r\n                $arSection[\'PREVIEW_PICTURE\'][\'TITLE\'] =\r\n                    $arSection[\'IPROPERTY_VALUES\'][\'[SECTION_PICTURE_FILE_TITLE\'];\r\n                if ($arSection[\'PREVIEW_PICTURE\'][\'TITLE\'] == \'\') {\r\n                    $arSection[\'PREVIEW_PICTURE\'][\'TITLE\'] = $arSection[\'NAME\'];\r\n                }\r\n            }\r\n\r\n            $arResult[\'ROOT_SECTIONS\'][] = $arSection;\r\n        }\r\n    }\r\n    \r\n    /*\r\n     * Получаем разделы инфоблока, откуда будем получать популярные элементы\r\n     */\r\n\r\n    // какие поля разделов инфоблока выбираем\r\n    $arSelect = array(\r\n        \'ID\',\r\n        \'NAME\',\r\n        \'SECTION_PAGE_URL\'\r\n    );\r\n    // условия выборки разделов инфоблока\r\n    $arFilter = array(\r\n        \'IBLOCK_ID\' => $arParams[\'IBLOCK_ID\'], // идентификатор инфоблока\r\n        \'IBLOCK_ACTIVE\' => \'Y\',                // ифоблок должен быть активен\r\n        \'SECTION_ID\' => false,                 // только корневые разделы\r\n        \'ACTIVE\' => \'Y\',                       // только активные разделы\r\n        \'CHECK_PERMISSIONS\' => \'Y\',            // проверять права доступа\r\n    );\r\n    // если в настройках указаны разделы инфоблока, из которых надо\r\n    // показывать популярные элемента, то уточняем условия выборки\r\n    if (!empty($arParams[\'POPULAR_SECTIONS\'])) {\r\n        $arFilter[\'ID\'] = $arParams[\'POPULAR_SECTIONS\'];\r\n    }\r\n    // сортировка\r\n    $arSort = array(\r\n        \'SORT\' => \'ASC\',\r\n    );\r\n\r\n    // выполняем запрос к базе данных\r\n    $rsSections = CIBlockSection::GetList($arSort, $arFilter, false, $arSelect);\r\n\r\n    // устанавливаем шаблон пути для разделов, вместо того,\r\n    // который указан в настройках информационного блока\r\n    $rsSections->SetUrlTemplates(\'\', $arParams[\'SECTION_URL\']);\r\n\r\n    // какие поля популярных элементов инфоблока выбираем\r\n    $arSelect = array(\r\n        \'ID\',\r\n        \'CODE\',\r\n        \'IBLOCK_ID\',\r\n        \'NAME\',\r\n        \'PREVIEW_PICTURE\',\r\n        \'DETAIL_PAGE_URL\',\r\n        \'PREVIEW_TEXT_TYPE\',\r\n        \'PREVIEW_TEXT\',\r\n        \'SHOW_COUNTER\'\r\n    );\r\n\r\n    // условия выборки популярных элементов инфоблока\r\n    $arFilter = array(\r\n        \'ACTIVE\' => \'Y\',                       // только активные разделы\r\n        \'IBLOCK_ID\' => $arParams[\'IBLOCK_ID\'], // идентификатор инфоблока\r\n        \'ACTIVE_DATE\' => \'Y\',                  // фильтр по датам активности\r\n        \'INCLUDE_SUBSECTIONS\' => \'Y\',          // включая подразделы текущего раздела\r\n        \'CHECK_PERMISSIONS\' => \'Y\',            // проверять права доступа\r\n    );\r\n\r\n    // сортировка популярных элементов\r\n    $arSort = array(\r\n        \'SHOW_COUNTER\' => \'DESC\',\r\n    );\r\n\r\n    /*\r\n     * Перебираем в цикле разделы и для каждого получаем популярные элементы\r\n     */\r\n\r\n    while ($arSection = $rsSections->GetNext()) {\r\n\r\n        $arSection[\'ITEMS\'] = array();\r\n\r\n        // выбираем элементы текущего раздела\r\n        $arFilter[\'SECTION_ID\'] = $arSection[\'ID\'];\r\n\r\n        // выполняем запрос к базе данных\r\n        $rsElements = CIBlockElement::GetList(\r\n            $arSort,\r\n            $arFilter,\r\n            false,\r\n            array(\'nTopCount\' => $arParams[\'ELEMENT_COUNT\']),\r\n            $arSelect\r\n        );\r\n\r\n        // устанавливаем шаблон пути для элемента, вместо того,\r\n        // который указан в настройках информационного блока\r\n        $rsElements->SetUrlTemplates($arParams[\'ELEMENT_URL\']);\r\n\r\n        while($arElement = $rsElements->GetNext()) {\r\n\r\n            // получаем SEO-свойства выбранного элемента\r\n            $ipropValues = new Bitrix\\Iblock\\InheritedProperty\\ElementValues(\r\n                $arElement[\'IBLOCK_ID\'],\r\n                $arElement[\'ID\']\r\n            );\r\n            $arElement[\'IPROPERTY_VALUES\'] = $ipropValues->getValues();\r\n\r\n            if (0 < $arElement[\'PREVIEW_PICTURE\']) {\r\n                $arElement[\'PREVIEW_PICTURE\'] = CFile::GetFileArray($arElement[\'PREVIEW_PICTURE\']);\r\n            } else {\r\n                $arElement[\'PREVIEW_PICTURE\'] = false;\r\n            }\r\n            if ($arElement[\'PREVIEW_PICTURE\']) {\r\n                $arElement[\'PREVIEW_PICTURE\'][\'ALT\'] =\r\n                    $arElement[\'IPROPERTY_VALUES\'][\'ELEMENT_PREVIEW_PICTURE_FILE_ALT\'];\r\n                if ($arElement[\'PREVIEW_PICTURE\'][\'ALT\'] == \'\') {\r\n                    $arElement[\'PREVIEW_PICTURE\'][\'ALT\'] = $arElement[\'NAME\'];\r\n                }\r\n                $arElement[\'PREVIEW_PICTURE\'][\'TITLE\'] =\r\n                    $arElement[\'IPROPERTY_VALUES\'][\'ELEMENT_PREVIEW_PICTURE_FILE_TITLE\'];\r\n                if ($arElement[\'PREVIEW_PICTURE\'][\'TITLE\'] == \'\') {\r\n                    $arElement[\'PREVIEW_PICTURE\'][\'TITLE\'] = $arElement[\'NAME\'];\r\n                }\r\n            }\r\n\r\n            $arSection[\'ITEMS\'][] = $arElement;\r\n        }\r\n\r\n        $arResult[\'POPULAR_SECTIONS\'][] = $arSection;\r\n    }\r\n\r\n    $this->SetResultCacheKeys(\r\n        array(\r\n            \'IBLOCK\',\r\n        )\r\n    );\r\n    $this->IncludeComponentTemplate();\r\n\r\n}\r\n\r\n// устанавливаем заголовок окна браузера из названия инфоблока\r\nif ($arParams[\'SET_BROWSER_TITLE\']) {\r\n    $APPLICATION->SetPageProperty(\'title\', $arResult[\'IBLOCK\'][\'NAME\']);\r\n}\r\n// устанавливаем заголовок страницы из названия инфоблока\r\nif ($arParams[\'SET_PAGE_TITLE\']) {\r\n    $APPLICATION->SetTitle($arResult[\'IBLOCK\'][\'NAME\']);\r\n}\r\n[/php]\r\n\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.popular/templates/.default/template.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<h1><?php $APPLICATION->ShowTitle(false); /* Выводим «Заголовок страницы» */ ?></h1>\r\n\r\n<?php if (!empty($arResult[\'ROOT_SECTIONS\'])): ?>\r\n    <div id=\"iblock-root-sections\">\r\n        <?php foreach ($arResult[\'ROOT_SECTIONS\'] as $arSection): /* корневые разделы инфоблока */ ?>\r\n            <article>\r\n                <a href=\"<?= $arSection[\'SECTION_PAGE_URL\']; ?>\">\r\n                    <img src=\"<?= $arSection[\'PREVIEW_PICTURE\'][\'SRC\']; ?>\"\r\n                         alt=\"<?= $arSection[\'PREVIEW_PICTURE\'][\'ALT\']; ?>\"\r\n                         title=\"<?= $arSection[\'PREVIEW_PICTURE\'][\'TITLE\']; ?>\" />\r\n                </a>\r\n                <h2><a href=\"<?= $arSection[\'SECTION_PAGE_URL\']; ?>\"><?= $arSection[\'NAME\']; ?></a></h2>\r\n                <?php if (!empty($arSection[\'DESCRIPTION\'])): ?>\r\n                    <p><?= $arSection[\'DESCRIPTION\']; ?></p>\r\n                <?php endif; ?>\r\n            </article>\r\n        <?php endforeach; ?>\r\n    </div>\r\n<?php endif; ?>\r\n\r\n<h2>Самое популярное</h2>\r\n\r\n<div id=\"iblock-popular-items\">\r\n    <?php foreach ($arResult[\'POPULAR_SECTIONS\'] as $arSection): /* популярные разделы инфоблока */ ?>\r\n        <section>\r\n            <h3><a href=\"<?= $arSection[\'SECTION_PAGE_URL\']; ?>\"><?= $arSection[\'NAME\']; ?></a></h3>\r\n            <?php foreach ($arSection[\'ITEMS\'] as $arItem): /* популярные элементы для каждого раздела */ ?>\r\n                <article>\r\n                    <a href=\"<?= $arItem[\'DETAIL_PAGE_URL\']; ?>\">\r\n                        <img src=\"<?= $arItem[\'PREVIEW_PICTURE\'][\'SRC\']; ?>\"\r\n                             alt=\"<?= $arItem[\'PREVIEW_PICTURE\'][\'ALT\']; ?>\"\r\n                             title=\"<?= $arItem[\'PREVIEW_PICTURE\'][\'TITLE\']; ?>\" />\r\n                    </a>\r\n                    <h4><a href=\"<?= $arItem[\'DETAIL_PAGE_URL\']; ?>\"><?= $arItem[\'NAME\']; ?></a></h4>\r\n                    <p>Просмотров: <?= $arItem[\'SHOW_COUNTER\'] ? $arItem[\'SHOW_COUNTER\'] : 0; ?></p>\r\n                </article>\r\n            <?php endforeach; ?>\r\n        </section>\r\n    <?php endforeach; ?>\r\n</div>\r\n[/phtml]\r\n\r\n[css]\r\n/*\r\n * Файл local/components/demo/iblock.popular/templates/.default/style.css\r\n */\r\n#iblock-root-sections {\r\n\r\n}\r\n    #iblock-root-sections > article {\r\n        border: 1px solid #d1d1d1;\r\n        padding: 10px;\r\n        border-radius: 10px;\r\n        overflow: hidden;\r\n        margin-bottom: 15px;\r\n        background: #f5f5f5;\r\n    }\r\n        #iblock-root-sections > article > h2 {\r\n            margin: -5px 0 5px 120px;\r\n        }\r\n        #iblock-root-sections > article > p {\r\n            margin: 5px 0 0 120px;\r\n        }\r\n        #iblock-root-sections > article > a > img {\r\n            width: 100px;\r\n            height: 100px;\r\n            float: left;\r\n        }\r\n\r\n#iblock-popular-items {\r\n\r\n}\r\n    #iblock-popular-items > section {\r\n        border: 1px solid #d1d1d1;\r\n        padding: 10px;\r\n        border-radius: 10px;\r\n        overflow: hidden;\r\n        margin-bottom: 15px;\r\n        overflow: hidden;\r\n        background: #f5f5f5;\r\n    }\r\n    #iblock-popular-items > section > h3 {\r\n        margin: 0 0 7px 0;\r\n        font-size: 18px;\r\n    }\r\n    #iblock-popular-items > section > article {\r\n        float: left;\r\n        width: 24%;\r\n        box-sizing: border-box;\r\n        border: 1px solid #d1d1d1;\r\n        padding: 10px;\r\n        border-radius: 10px;\r\n        background: #fff;\r\n        margin-right: 1.33333%;\r\n    }\r\n    #iblock-popular-items > section > article:last-child {\r\n        margin-right: 0;\r\n    }\r\n        #iblock-popular-items > section > article > h4 {\r\n            margin: 5px 0 5px 0;\r\n            font-size: 14px;\r\n            min-height: 30px;\r\n            line-height: 15px;\r\n        }\r\n        #iblock-popular-items > section > article > p {\r\n            margin: 0;\r\n            font-size: 12px;\r\n            color: #999;\r\n        }\r\n[/css]\r\n\r\n<p>\r\nПример вызова компонента:\r\n</p>\r\n[phtml]\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Статьи о домашних животных\");\r\n?>\r\n\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"demo:iblock.popular\",\r\n    \"\",\r\n    Array(\r\n        \"CACHE_GROUPS\" => \"Y\",\r\n        \"CACHE_TIME\" => \"3600\",\r\n        \"CACHE_TYPE\" => \"A\",\r\n        \"ELEMENT_COUNT\" => \"3\",\r\n        \"ELEMENT_URL\" => \"item/id/#ELEMENT_ID#/\",\r\n        \"IBLOCK_ID\" => \"5\",\r\n        \"IBLOCK_TYPE\" => \"content\",\r\n        \"POPULAR_SECTIONS\" => array(),\r\n        \"ROOT_SECTIONS\" => \"Y\",\r\n        \"SECTION_URL\" => \"category/id/#SECTION_ID#/\",\r\n        \"SET_BROWSER_TITLE\" => \"Y\",\r\n        \"SET_PAGE_TITLE\" => \"Y\",\r\n        \"USE_CODE_INSTEAD_ID\" => \"N\"\r\n    )\r\n);\r\n?>\r\n\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\");\r\n?>\r\n[/phtml]','2018-09-19 14:41:31',1),(195,17,'Битрикс. Создание комплексного компонента. Часть 3','','','CMS, Web-разработка, Битрикс, Инфоблок, Компонент, РазделИнфоблока, ШаблонКомпонента, ЭлементИнфоблока','Все три простых компонента готовы, можно приступать к созданию комплексного компонента. Этот компонент будет уметь решать все три задачи, которые простые компоненты решали поодиночке: выводить главную страницу (корневые разделы + популярные элементы), раздел инфоблока (подразделы + список элементов) и детальную страницу элемента.','<p>\r\nВсе три простых компонента готовы, можно приступать к созданию комплексного компонента. Этот компонент будет уметь решать все три задачи, которые простые компоненты решали поодиночке: выводить главную страницу (корневые разделы + популярные элементы), раздел инфоблока (подразделы + список элементов) и детальную страницу элемента.\r\n</p>\r\n\r\n<h2>Комплексный компонент demo:iblock</h2>\r\n\r\n[code]\r\n[local]\r\n    [components]\r\n        [demo]\r\n            [red][iblock][/red]\r\n            [grn][iblock.detail]\r\n            [iblock.section]\r\n            [iblock.popular][/grn]\r\n[/code]\r\n\r\n[code]\r\n[red][iblock]\r\n    [templates]\r\n        [.default]\r\n            [demo]\r\n                [iblock.detail]\r\n                    [.default]\r\n                        template.php\r\n                        style.css\r\n                [iblock.section]\r\n                    [.default]\r\n                        template.php\r\n                        style.css\r\n                [iblock.popular]\r\n                    [.default]\r\n                        template.php\r\n                        style.css\r\n            element.php\r\n            section.php\r\n            popular.php\r\n    .description.php\r\n    .parameters.php\r\n    component.php[/red]\r\n[/code]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock/.description.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$arComponentDescription = array(\r\n    \'NAME\' => \'Инфоблок (комплексный)\', // название компонента\r\n    \'DESCRIPTION\' => \'Универсальный компонент для информационного блока\',\r\n    \'ICON\' => \'/images/icon.gif\', // иконка компонента относительно папки компонента\r\n    \'CACHE_PATH\' => \'Y\', // показывать кнопку очистки кеша\r\n    \'SORT\' => 40, // порядок сортировки в визуальном редакторе\r\n    \'COMPLEX\' => \'Y\', // признак комплексного компонента\r\n    \'PATH\' => array( // расположение компонента в визуальном редакторе\r\n        \'ID\' => \'demo\', // идентификатор верхнего уровеня в редакторе\r\n        \'NAME\' => \'Мои компоненты\', // название верхнего уровня в редакторе\r\n        \'CHILD\' => array( // второй уровень в визуальном редакторе\r\n            \'ID\' => \'demo_iblock\', // идентификатор второго уровня в редакторе\r\n            \'NAME\' => \'Информационный блок\' // название второго уровня в редакторе\r\n        )\r\n    )\r\n);\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock/.parameters.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n// проверяем, установлен ли модуль «Информационные блоки»; если да — то подключаем его\r\nif (!CModule::IncludeModule(\'iblock\')) {\r\n    return;\r\n}\r\n\r\n/*\r\n * Получаем массив всех типов инфоблоков — для возможности выбора\r\n */\r\n$arInfoBlockTypes = CIBlockParameters::GetIBlockTypes();\r\n\r\n/*\r\n * Получаем массив инфоблоков — для возможности выбора; фильтруем их по\r\n * выбранному типу и по активности\r\n */\r\n$arInfoBlocks = array();\r\n$arFilter = array(\'ACTIVE\' => \'Y\');\r\n// если уже выбран тип инфоблока, выбираем инфоблоки только этого типа\r\nif (!empty($arCurrentValues[\'IBLOCK_TYPE\'])) {\r\n    $arFilter[\'TYPE\'] = $arCurrentValues[\'IBLOCK_TYPE\'];\r\n}\r\n$rsIBlock = CIBlock::GetList(\r\n    array(\'SORT\' => \'ASC\'),\r\n    $arFilter\r\n);\r\nwhile($iblock = $rsIBlock->Fetch()) {\r\n    $arInfoBlocks[$iblock[\'ID\']] = \'[\'.$iblock[\'ID\'].\'] \'.$iblock[\'NAME\'];\r\n}\r\n\r\n/*\r\n * Получаем массив разделов инфоблока, из которых надо получать\r\n * популярные элементы — для возможности выбора\r\n */\r\n$arInfoBlockSections = array(\r\n    \'-\' => \'[=Выберите=]\',\r\n);\r\n$arFilter = array(\r\n    \'SECTION_ID\' => false, // только корневые разделы\r\n    \'ACTIVE\' => \'Y\' // только активные разделы\r\n);\r\n// если уже выбран тип инфоблока, выбираем разделы, принадлежащие инфоблокам выбранного типа\r\nif (!empty($arCurrentValues[\'IBLOCK_TYPE\'])) {\r\n    $arFilter[\'IBLOCK_TYPE\'] = $arCurrentValues[\'IBLOCK_TYPE\'];\r\n}\r\n// если уже выбран инфоблок, выбираем разделы только этого инфоблока\r\nif (!empty($arCurrentValues[\'IBLOCK_ID\'])) {\r\n    $arFilter[\'IBLOCK_ID\'] = $arCurrentValues[\'IBLOCK_ID\'];\r\n}\r\n$result = CIBlockSection::GetList(\r\n    array(\'SORT\' => \'ASC\'),\r\n    $arFilter\r\n);\r\nwhile ($section = $result->Fetch()) {\r\n    $arInfoBlockSections[$section[\'ID\']] = \'[\'.$section[\'ID\'].\'] \'.$section[\'NAME\'];\r\n}\r\n\r\n/*\r\n * Настройки комлексного компонента\r\n */\r\n$arComponentParameters = array( // кроме групп по умолчанию, добавляем свои группы настроек\r\n    \'GROUPS\' => array(\r\n        \'POPULAR_SETTINGS\' => array(\r\n            \'NAME\' => \'Настройки главной страницы\',\r\n            \'SORT\' => 800\r\n        ),\r\n        \'SECTION_SETTINGS\' => array(\r\n            \'NAME\' => \'Настройки страницы раздела\',\r\n            \'SORT\' => 900\r\n        ),\r\n        \'ELEMENT_SETTINGS\' => array(\r\n            \'NAME\' => \'Настройки страницы элемента\',\r\n            \'SORT\' => 1000\r\n        ),\r\n    ),\r\n    /*\r\n     * Группы параметров компонента:\r\n     * 1. Основные параметры компонента (BASE)\r\n     * 2. Параметры главной страницы (POPULAR_SETTINGS)\r\n     * 3. Параметры страницы раздела (SECTION_SETTINGS)\r\n     * 4. Параметры страницы элемента (DETAIL_SETTINGS)\r\n     */\r\n    \'PARAMETERS\' => array(\r\n\r\n        /*\r\n         * 1. Основные параметры компонента\r\n         */\r\n        \'IBLOCK_TYPE\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Тип инфоблока\',\r\n            \'TYPE\' => \'LIST\',\r\n            \'VALUES\' => $arInfoBlockTypes,\r\n            \'REFRESH\' => \'Y\',\r\n        ),\r\n        \'IBLOCK_ID\' => array(\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Инфоблок\',\r\n            \'TYPE\' => \'LIST\',\r\n            \'VALUES\' => $arInfoBlocks,\r\n            \'REFRESH\' => \'Y\',\r\n        ),\r\n        // использовать символьный код вместо ID; если отмечен этот checkbox, в\r\n        // визуальном редакторе надо будет обязательно изменить шаблоны ссылок\r\n        // при включенном режиме поддержки ЧПУ, чтобы вместо #SECTION_ID# и\r\n        // #ELEMENT_ID# использовались #SECTION_CODE# и #ELEMENT_CODE#\r\n        \'USE_CODE_INSTEAD_ID\' => array(\r\n            \'PARENT\' => \'URL_TEMPLATES\',\r\n            \'NAME\' => \'Использовать символьный код вместо ID\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'N\',\r\n        ),\r\n\r\n        /*\r\n         * 2. Параметры главной страницы\r\n         */\r\n        // показывать корневые разделы инфоблока?\r\n        \'POPULAR_ROOT_SECTIONS\' => array(\r\n            \'PARENT\' => \'POPULAR_SETTINGS\',\r\n            \'NAME\' => \'Показывать корневые разделы\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        // выбор разделов инфоблока, откуда будем получать популярные элементы\r\n        \'POPULAR_SECTIONS\' => array(\r\n            \'PARENT\' => \'POPULAR_SETTINGS\',\r\n            \'NAME\' => \'Выберите разделы инфоблока\',\r\n            \'TYPE\' => \'LIST\',\r\n            \'VALUES\' => $arInfoBlockSections,\r\n            \'MULTIPLE\'=>\'Y\',\r\n            \'REFRESH\' => \'Y\',\r\n        ),\r\n        // максимальное количество популярных элементов в разделе\r\n        \'POPULAR_ELEMENT_COUNT\' => array(\r\n            \'PARENT\' => \'POPULAR_SETTINGS\',\r\n            \'NAME\' => \'Максимальное количество элементов в разделе\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'3\',\r\n        ),\r\n        \'POPULAR_SET_PAGE_TITLE\' => array(\r\n            \'PARENT\' => \'POPULAR_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать заголовок страницы из названия инфоблока\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'POPULAR_SET_BROWSER_TITLE\' => array(\r\n            \'PARENT\' => \'POPULAR_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать заголовок окна браузера из названия инфоблока\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n\r\n        /*\r\n         * 3. Параметры страницы раздела\r\n         */\r\n        \'SECTION_ELEMENT_COUNT\' => array(\r\n            \'PARENT\' => \'SECTION_SETTINGS\',\r\n            \'NAME\' => \'Количество элементов на странице\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'3\',\r\n        ),\r\n        \'SECTION_SET_PAGE_TITLE\' => array(\r\n            \'PARENT\' => \'SECTION_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать заголовок страницы для раздела\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'SECTION_SET_BROWSER_TITLE\' => array(\r\n            \'PARENT\' => \'SECTION_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать заголовок окна браузера для раздела\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'SECTION_SET_META_KEYWORDS\' => array(\r\n            \'PARENT\' => \'SECTION_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать мета-тег keywords для раздела\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'SECTION_SET_META_DESCRIPTION\' => array(\r\n            \'PARENT\' => \'SECTION_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать мета-тег description для раздела\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n\r\n        /*\r\n         * 4. Параметры страницы элемента\r\n         */\r\n        \'ELEMENT_SET_PAGE_TITLE\' => array(\r\n            \'PARENT\' => \'ELEMENT_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать заголовок страницы для элемента\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'ELEMENT_SET_BROWSER_TITLE\' => array(\r\n            \'PARENT\' => \'ELEMENT_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать заголовок окна браузера для элемента\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'ELEMENT_SET_META_KEYWORDS\' => array(\r\n            \'PARENT\' => \'ELEMENT_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать мета-тег keywords для элемента\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n        \'ELEMENT_SET_META_DESCRIPTION\' => array(\r\n            \'PARENT\' => \'ELEMENT_SETTINGS\',\r\n            \'NAME\' => \'Устанавливать мета-тег description для элемента\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n\r\n        /*\r\n         * Это отдельный блок настроек, который задает работу\r\n         * в обычном режиме (без ЧПУ) и в режиме ЧПУ\r\n         */\r\n        \'VARIABLE_ALIASES\' => array( // это для работы в режиме без ЧПУ\r\n            \'SECTION_ID\' => array(\'NAME\' => \'Идентификатор раздела\'),\r\n            \'SECTION_CODE\' => array(\'NAME\' => \'Символьный код раздела\'),\r\n            \'ELEMENT_ID\' => array(\'NAME\' => \'Идентификатор элемента\'),\r\n            \'ELEMENT_CODE\' => array(\'NAME\' => \'Символьный код элемента\'),\r\n        ),\r\n        \'SEF_MODE\' => array( // это для работы в режиме ЧПУ\r\n            \'popular\' => array(\r\n                \'NAME\' => \'Главная страница\',\r\n                \'DEFAULT\' => \'\',\r\n            ),\r\n            \'section\' => array(\r\n                \'NAME\' => \'Страница раздела\',\r\n                \'DEFAULT\' => \'category/id/#SECTION_ID#/\',\r\n            ),\r\n            \'element\' => array(\r\n                \'NAME\' => \'Страница элемента\',\r\n                \'DEFAULT\' => \'item/id/#ELEMENT_ID#/\',\r\n            ),\r\n        ),\r\n\r\n        /*\r\n         * Настройки кэширования\r\n         */\r\n        \'CACHE_TIME\'  =>  array(\'DEFAULT\' => 3600),\r\n        \'CACHE_GROUPS\' => array( // учитываться права доступа при кешировании?\r\n            \'PARENT\' => \'CACHE_SETTINGS\',\r\n            \'NAME\' => \'Учитывать права доступа\',\r\n            \'TYPE\' => \'CHECKBOX\',\r\n            \'DEFAULT\' => \'Y\',\r\n        ),\r\n    ),\r\n);\r\n\r\n// настройка постраничной навигации\r\nCIBlockParameters::AddPagerSettings(\r\n    $arComponentParameters,\r\n    \'Элементы\', // $pager_title\r\n    true,       // $bDescNumbering\r\n    true,       // $bShowAllParam\r\n    true,       // $bBaseLink\r\n    $arCurrentValues[\'PAGER_BASE_LINK_ENABLE\']===\'Y\' // $bBaseLinkEnabled\r\n);\r\n\r\n// настройки на случай, если раздел или элемент не найдены, 404 Not Found\r\nCIBlockParameters::Add404Settings($arComponentParameters, $arCurrentValues);\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock/component.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var CBitrixComponent $this */\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @var string $componentPath */\r\n/** @var string $componentName */\r\n/** @var string $componentTemplate */\r\n/** @global CDatabase $DB */\r\n/** @global CUser $USER */\r\n/** @global CMain $APPLICATION */\r\n\r\nif ($arParams[\'SEF_MODE\'] == \'Y\') {\r\n    /*\r\n     * Если включен режим поддержки ЧПУ\r\n     */\r\n\r\n    // В этой переменной будем накапливать значения истинных переменных\r\n    $arVariables = array();\r\n\r\n    // Определим код шаблона, которому соответствует текущая запрошения страница\r\n    $componentPage = CComponentEngine::ParseComponentPath(\r\n        $arParams[\'SEF_FOLDER\'],\r\n        $arParams[\'SEF_URL_TEMPLATES\'], \r\n        $arVariables\r\n    );\r\n\r\n    // Метод выше не обрабатывает случай, когда шаблон пути равен пустой строке,\r\n    // (например \'popular\' => \'\'), поэтому делаем это сами\r\n    if ($componentPage === false && parse_url($_SERVER[\'REQUEST_URI\'], PHP_URL_PATH) == $arParams[\'SEF_FOLDER\']) {\r\n        $componentPage = \'popular\';\r\n    }\r\n\r\n    // Если определить файл шаблона не удалось, показываем  страницу 404 Not Found\r\n    if (empty($componentPage)) {\r\n        \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n            trim($arParams[\'MESSAGE_404\']) ?: \'Элемент или раздел инфоблока не найден\',\r\n            true,\r\n            $arParams[\'SET_STATUS_404\'] === \'Y\',\r\n            $arParams[\'SHOW_404\'] === \'Y\',\r\n            $arParams[\'FILE_404\']\r\n        );\r\n        return;\r\n    }\r\n\r\n    /*\r\n     * Обрабытываем ситуацию, когда переданы некорректные параметры SECTION_ID, SECTION_CODE, ELEMENT_ID,\r\n     * ELEMENT_CODE и показываем страницу 404 Not Found\r\n     */\r\n    $notFound = false;\r\n    // недопустимое значение идентификатора элемента\r\n    if ($componentPage == \'element\') {\r\n        if ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') { // если используются символьные коды\r\n            if ( ! (isset($arVariables[\'ELEMENT_CODE\']) && strlen($arVariables[\'ELEMENT_CODE\']) > 0)) {\r\n                $notFound = true;\r\n            }\r\n        } else { // если используются идентификаторы\r\n            if ( ! (isset($arVariables[\'ELEMENT_ID\']) && ctype_digit($arVariables[\'ELEMENT_ID\']))) {\r\n                $notFound = true;\r\n            }\r\n        }\r\n    }\r\n    // недопустимое значение идентификатора раздела\r\n    if ($componentPage == \'section\') {\r\n        if ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') { // если используются символьные коды\r\n            if ( ! (isset($arVariables[\'SECTION_CODE\']) && strlen($arVariables[\'SECTION_CODE\']) > 0)) {\r\n                $notFound = true;\r\n            }\r\n        } else { // если используются идентификаторы\r\n            if ( ! (isset($arVariables[\'SECTION_ID\']) && ctype_digit($arVariables[\'SECTION_ID\']))) {\r\n                $notFound = true;\r\n            }\r\n        }\r\n    }\r\n    // показываем страницу 404 Not Found\r\n    if ($notFound) {\r\n        \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n            trim($arParams[\'MESSAGE_404\']) ?: \'Элемент или раздел инфоблока не найден\',\r\n            true,\r\n            $arParams[\'SET_STATUS_404\'] === \'Y\',\r\n            $arParams[\'SHOW_404\'] === \'Y\',\r\n            $arParams[\'FILE_404\']\r\n        );\r\n        return;\r\n    }\r\n\r\n    /*\r\n     * Метод служит для поддержки псевдонимов переменных в комплексных компонентах. Восстанавливает\r\n     * истинные переменные из $_REQUEST на основании их псевдонимов из $arParams[\'VARIABLE_ALIASES\'].\r\n     */\r\n    CComponentEngine::InitComponentVariables(\r\n        $componentPage,\r\n        null,\r\n        $arParams[\'VARIABLE_ALIASES\'],\r\n        $arVariables\r\n    );\r\n\r\n    $arResult[\'VARIABLES\'] = $arVariables;\r\n    $arResult[\'FOLDER\'] = $arParams[\'SEF_FOLDER\'];\r\n    $arResult[\'SECTION_URL\'] = $arParams[\'SEF_FOLDER\'].$arParams[\'SEF_URL_TEMPLATES\'][\'section\'];\r\n    $arResult[\'ELEMENT_URL\'] = $arParams[\'SEF_FOLDER\'].$arParams[\'SEF_URL_TEMPLATES\'][\'element\'];\r\n\r\n} else {\r\n    /*\r\n     * Если не включен режим поддержки ЧПУ\r\n     */\r\n\r\n    // В этой переменной будем накапливать значения истинных переменных\r\n    $arVariables = array();\r\n\r\n    // Восстановим переменные, которые пришли в параметрах запроса и запишем их в $arVariables\r\n    CComponentEngine::InitComponentVariables(\r\n        false,\r\n        null,\r\n        $arParams[\'VARIABLE_ALIASES\'],\r\n        $arVariables\r\n    );\r\n\r\n    /*\r\n     * Теперь на основании истинных переменных $arVariables можно определить, какую страницу\r\n     * шаблона компонента нужно показать\r\n     */\r\n    $componentPage = \'\';\r\n    if (isset($arVariables[\'ELEMENT_ID\']) && intval($arVariables[\'ELEMENT_ID\']) > 0)\r\n        $componentPage = \'element\'; // элемент инфоблока по идентификатору\r\n    elseif (isset($arVariables[\'ELEMENT_CODE\']) && strlen($arVariables[\'ELEMENT_CODE\']) > 0)\r\n        $componentPage = \'element\'; // элемент инфоблока по символьному коду\r\n    elseif (isset($arVariables[\'SECTION_ID\']) && intval($arVariables[\'SECTION_ID\']) > 0)\r\n        $componentPage = \'section\'; // раздел инфоблока по идентификатору\r\n    elseif (isset($arVariables[\'SECTION_CODE\']) && strlen($arVariables[\'SECTION_CODE\']) > 0)\r\n        $componentPage = \'section\'; // раздел инфоблока по символьному коду\r\n    else\r\n        $componentPage = \'popular\'; // главная страница компонента\r\n\r\n    /*\r\n     * Обрабытываем ситуацию, когда переданы некорректные параметры и показываем 404 Not Found\r\n     */\r\n    $notFound = false;\r\n    // недопустимое значение идентификатора элемента\r\n    if ($componentPage == \'element\') {\r\n        if ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') { // если используются символьные коды\r\n            if (!(isset($arVariables[\'ELEMENT_CODE\']) && strlen($arVariables[\'ELEMENT_CODE\']) > 0)) {\r\n                $notFound = true;\r\n            }\r\n        } else { // если используются идентификаторы\r\n            if (!(isset($arVariables[\'ELEMENT_ID\']) && ctype_digit($arVariables[\'ELEMENT_ID\']))) {\r\n                $notFound = true;\r\n            }\r\n        }\r\n    }\r\n    // недопустимое значение идентификатора раздела\r\n    if ($componentPage == \'section\') {\r\n        if ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') { // если используются символьные коды\r\n            if (!(isset($arVariables[\'SECTION_CODE\']) && strlen($arVariables[\'SECTION_CODE\']) > 0)) {\r\n                $notFound = true;\r\n            }\r\n        } else { // если используются идентификаторы\r\n            if (!(isset($arVariables[\'SECTION_ID\']) && ctype_digit($arVariables[\'SECTION_ID\']))) {\r\n                $notFound = true;\r\n            }\r\n        }\r\n    }\r\n    // показываем страницу 404 Not Found\r\n    if ($notFound) {\r\n        \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n            trim($arParams[\'MESSAGE_404\']) ?: \'Элемент или раздел инфоблока не найден\',\r\n            true,\r\n            $arParams[\'SET_STATUS_404\'] === \'Y\',\r\n            $arParams[\'SHOW_404\'] === \'Y\',\r\n            $arParams[\'FILE_404\']\r\n        );\r\n        return;\r\n    }\r\n\r\n    $arResult[\'VARIABLES\'] = $arVariables;\r\n    $arResult[\'FOLDER\'] = \'\';\r\n    if ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') { // если используются символьные коды\r\n        $arResult[\'SECTION_URL\'] =\r\n            $APPLICATION->GetCurPage().\'?\'.$arParams[\'VARIABLE_ALIASES\'][\'SECTION_CODE\'].\'=#SECTION_CODE#\';\r\n        $arResult[\'ELEMENT_URL\'] =\r\n            $APPLICATION->GetCurPage().\'?\'.$arParams[\'VARIABLE_ALIASES\'][\'ELEMENT_CODE\'].\'=#ELEMENT_CODE#\';\r\n    } else { // если используются идентификаторы\r\n        $arResult[\'SECTION_URL\'] =\r\n            $APPLICATION->GetCurPage().\'?\'.$arParams[\'VARIABLE_ALIASES\'][\'SECTION_ID\'].\'=#SECTION_ID#\';\r\n        $arResult[\'ELEMENT_URL\'] =\r\n            $APPLICATION->GetCurPage().\'?\'.$arParams[\'VARIABLE_ALIASES\'][\'ELEMENT_ID\'].\'=#ELEMENT_ID#\';\r\n    }\r\n\r\n}\r\n\r\n$this->IncludeComponentTemplate($componentPage);\r\n[/php]\r\n\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/element.php\r\n */\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.element\',\r\n    \'\',\r\n    Array(\r\n        \'IBLOCK_TYPE\' => $arParams[\'IBLOCK_TYPE\'],                // тип инфоблока\r\n        \'IBLOCK_ID\' => $arParams[\'IBLOCK_ID\'],                    // идентификатор инфоблока\r\n\r\n        //  использовать символьные коды вместо идентификаторов?\r\n        \'USE_CODE_INSTEAD_ID\' => $arParams[\'USE_CODE_INSTEAD_ID\'],\r\n        // включать раздел в цепочку навигации?\r\n        \'ADD_SECTIONS_CHAIN\' => $arParams[\'ADD_SECTIONS_CHAIN\'],\r\n\r\n        \'ELEMENT_ID\' => $arResult[\'VARIABLES\'][\'ELEMENT_ID\'],     // идентификатор элемента инфоблока\r\n        \'ELEMENT_CODE\' => $arResult[\'VARIABLES\'][\'ELEMENT_CODE\'], // символьный код элемента инфоблока\r\n\r\n        // настройки SEO\r\n        \'SET_PAGE_TITLE\' => $arParams[\'ELEMENT_SET_PAGE_TITLE\'],\r\n        \'SET_BROWSER_TITLE\' => $arParams[\'ELEMENT_SET_BROWSER_TITLE\'],\r\n        \'SET_META_KEYWORDS\' => $arParams[\'ELEMENT_SET_META_KEYWORDS\'],\r\n        \'SET_META_DESCRIPTION\' => $arParams[\'ELEMENT_SET_META_DESCRIPTION\'],\r\n\r\n        // URL, ведущий на страницу с содержимым раздела\r\n        \'SECTION_URL\' => $arResult[\'SECTION_URL\'],\r\n        // URL, ведущий на страницу с содержимым элемента\r\n        \'ELEMENT_URL\' => $arResult[\'ELEMENT_URL\'],\r\n\r\n        // настройки кэширования\r\n        \'CACHE_TYPE\' => $arParams[\'CACHE_TYPE\'],\r\n        \'CACHE_TIME\' => $arParams[\'CACHE_TIME\'],\r\n        \'CACHE_GROUPS\' => $arParams[\'CACHE_GROUPS\'],\r\n        \r\n        // настройки страницы 404 Not Found\r\n        \'MESSAGE_404\' => $arParams[\'MESSAGE_404\'],\r\n        \'SET_STATUS_404\' => $arParams[\'SET_STATUS_404\'],\r\n        \'SHOW_404\' => $arParams[\'SHOW_404\'],\r\n        \'FILE_404\' => $arParams[\'FILE_404\'],\r\n    ),\r\n    $component\r\n);\r\n?>\r\n[/phtml]\r\n\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/section.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.section\',\r\n    \'\',\r\n    Array(\r\n        \'IBLOCK_TYPE\' => $arParams[\'IBLOCK_TYPE\'],                 // тип инфоблока\r\n        \'IBLOCK_ID\' => $arParams[\'IBLOCK_ID\'],                     // идентификатор инфоблока\r\n\r\n        //  использовать символьные коды вместо идентификаторов?\r\n        \'USE_CODE_INSTEAD_ID\' => $arParams[\'USE_CODE_INSTEAD_ID\'],\r\n        // включать раздел в цепочку навигации?\r\n        \'ADD_SECTIONS_CHAIN\' => $arParams[\'ADD_SECTIONS_CHAIN\'],\r\n\r\n        \'SECTION_ID\' => $arResult[\'VARIABLES\'][\'SECTION_ID\'],      // идентификатор раздела инфоблока\r\n        \'SECTION_CODE\' => $arResult[\'VARIABLES\'][\'SECTION_CODE\'],  // символьный код раздела инфоблока\r\n\r\n        // количество элементов на странице\r\n        \'ELEMENT_COUNT\' => $arResult[\'VARIABLES\'][\'ELEMENT_COUNT\'] ?: $arParams[\'SECTION_ELEMENT_COUNT\'],\r\n\r\n        // настройки SEO\r\n        \'SET_PAGE_TITLE\' => $arParams[\'SECTION_SET_PAGE_TITLE\'],\r\n        \'SET_BROWSER_TITLE\' => $arParams[\'SECTION_SET_BROWSER_TITLE\'],\r\n        \'SET_META_KEYWORDS\' => $arParams[\'SECTION_SET_META_KEYWORDS\'],\r\n        \'SET_META_DESCRIPTION\' => $arParams[\'SECTION_SET_META_DESCRIPTION\'],\r\n\r\n        // URL, ведущий на страницу с содержимым раздела\r\n        \'SECTION_URL\' => $arResult[\'SECTION_URL\'],\r\n        // URL, ведущий на страницу с содержимым элемента\r\n        \'ELEMENT_URL\' => $arResult[\'ELEMENT_URL\'],\r\n\r\n        // настройки кэширования\r\n        \'CACHE_TYPE\' => $arParams[\'CACHE_TYPE\'],\r\n        \'CACHE_TIME\' => $arParams[\'CACHE_TIME\'],\r\n        \'CACHE_GROUPS\' => $arParams[\'CACHE_GROUPS\'],\r\n\r\n        // настройки постраничной навигации\r\n        \'DISPLAY_TOP_PAGER\' => $arParams[\'DISPLAY_TOP_PAGER\'],\r\n        \'DISPLAY_BOTTOM_PAGER\' => $arParams[\'DISPLAY_BOTTOM_PAGER\'],\r\n        \'PAGER_TITLE\' => $arParams[\'PAGER_TITLE\'],\r\n        \'PAGER_SHOW_ALWAYS\' => $arParams[\'PAGER_SHOW_ALWAYS\'],\r\n        \'PAGER_TEMPLATE\' => $arParams[\'PAGER_TEMPLATE\'],\r\n        \'PAGER_DESC_NUMBERING\' => $arParams[\'PAGER_DESC_NUMBERING\'],\r\n        \'PAGER_DESC_NUMBERING_CACHE_TIME\' => $arParams[\'PAGER_DESC_NUMBERING_CACHE_TIME\'],\r\n        \'PAGER_SHOW_ALL\' => $arParams[\'PAGER_SHOW_ALL\'],\r\n        \'PAGER_BASE_LINK_ENABLE\' => $arParams[\'PAGER_BASE_LINK_ENABLE\'],\r\n        \'PAGER_BASE_LINK\' => $arParams[\'PAGER_BASE_LINK\'],\r\n        \'PAGER_PARAMS_NAME\' => $arParams[\'PAGER_PARAMS_NAME\'],\r\n\r\n        // настройки страницы 404 Not Found\r\n        \'MESSAGE_404\' => $arParams[\'MESSAGE_404\'],\r\n        \'SET_STATUS_404\' => $arParams[\'SET_STATUS_404\'],\r\n        \'SHOW_404\' => $arParams[\'SHOW_404\'],\r\n        \'FILE_404\' => $arParams[\'FILE_404\'],\r\n    ),\r\n    $component\r\n);\r\n?>\r\n[/phtml]\r\n\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/popular.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/** @var array $arParams */\r\n/** @var array $arResult */\r\n/** @global CMain $APPLICATION */\r\n/** @global CUser $USER */\r\n/** @global CDatabase $DB */\r\n/** @var CBitrixComponentTemplate $this */\r\n/** @var string $templateName */\r\n/** @var string $templateFile */\r\n/** @var string $templateFolder */\r\n/** @var string $componentPath */\r\n/** @var CBitrixComponent $component */\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.popular\',\r\n    \'\',\r\n    Array(\r\n        \'IBLOCK_TYPE\' => $arParams[\'IBLOCK_TYPE\'],             // тип инфоблока\r\n        \'IBLOCK_ID\' => $arParams[\'IBLOCK_ID\'],                 // идентификатор инфоблока\r\n\r\n        //  использовать символьные коды вместо идентификаторов\r\n        \'USE_CODE_INSTEAD_ID\' => $arParams[\'USE_CODE_INSTEAD_ID\'],\r\n\r\n        \'ROOT_SECTIONS\' => $arParams[\'POPULAR_ROOT_SECTIONS\'], // показывать корневые разделы?\r\n        \'POPULAR_SECTIONS\' => $arParams[\'POPULAR_SECTIONS\'],   // из каких разделов выбирать популярные элементы\r\n        \'ELEMENT_COUNT\' => $arParams[\'POPULAR_ELEMENT_COUNT\'], // макс. кол-во популярных элементов в разделе\r\n\r\n        // устанавливать заголовок страницы из названия инфоблока?\r\n        \'SET_PAGE_TITLE\' => $arParams[\'POPULAR_SET_PAGE_TITLE\'],\r\n        // устанавливать заголовок окна браузера из названия инфоблока?\r\n        \'SET_BROWSER_TITLE\' => $arParams[\'POPULAR_SET_BROWSER_TITLE\'],\r\n\r\n        // URL, ведущий на страницу с содержимым раздела\r\n        \'SECTION_URL\' => $arResult[\'SECTION_URL\'],\r\n        // URL, ведущий на страницу с содержимым элемента\r\n        \'ELEMENT_URL\' => $arResult[\'ELEMENT_URL\'],\r\n\r\n        // настройки кэширования\r\n        \'CACHE_TYPE\' => $arParams[\'CACHE_TYPE\'],\r\n        \'CACHE_TIME\' => $arParams[\'CACHE_TIME\'],\r\n        \'CACHE_GROUPS\' => $arParams[\'CACHE_GROUPS\'],\r\n    ),\r\n    $component\r\n);\r\n?>\r\n[/phtml]\r\n\r\n<p>\r\nСодержимое остальных файлов не отличается от тех, что уже были рассмотрены ранее. Я лишь добавил в заголовки строку <code>[Комплексный]</code>, чтобы было понятно, что используется шаблон комплексного компонента. Если бы этих шаблонов не было, то были бы задействованы шаблоны простых компонентов:\r\n</p>\r\n<ul>\r\n  <li>файл <code>local/components/demo/iblock/templates/.default/demo/iblock.detail/.default/template.php</code> является копией <code>local/components/demo/iblock.detail/templates/.default/template.php</code></li>\r\n  <li>файл <code>local/components/demo/iblock/templates/.default/demo/iblock.section/.default/template.php</code> является копией <code>local/components/demo/iblock.section/templates/.default/template.php</code></li>\r\n  <li>файл <code>local/components/demo/iblock/templates/.default/demo/iblock.popular/.default/template.php</code> является копией <code>local/components/demo/iblock.popular/templates/.default/template.php</code></li>\r\n</ul>\r\n<ul>\r\n  <li>файл <code>local/components/demo/iblock/templates/.default/demo/iblock.detail/.default/style.css</code> является копией <code>local/components/demo/iblock.detail/templates/.default/style.css</code></li>\r\n  <li>файл <code>local/components/demo/iblock/templates/.default/demo/iblock.section/.default/style.css</code> является копией <code>local/components/demo/iblock.section/templates/.default/style.css</code></li>\r\n  <li>файл <code>local/components/demo/iblock/templates/.default/demo/iblock.popular/.default/style.css</code> является копией <code>local/components/demo/iblock.popular/templates/.default/style.css</code></li>\r\n</ul>\r\n<p>\r\nЭти копии как раз и нужны, чтобы настраивать комплексный компонент под свои нужды, не затрагивая шаблоны и стили простых компонентов в их «родных» папках. Для этих же целей предназначены файлы <code>result_modifier.php</code> и <code>component_epilog.php</code>. Можно изменить результаты работы простых компонентов здесь (массив <code>$arResult</code>) и изменить здесь же представление в браузере (редактируя копии файлов <code>template.php</code> и <code>style.css</code>). При этом результат работы простых компонентов, когда они используются «сами по себе», и представление этих результатов в браузере останутся без изменений.\r\n</p>\r\n<p>\r\nДавайте для примера изменим результат работы компонента <code>demo:iblock.popular</code> и добавим в массив <code>$arResult</code> информацию о подразделах корневых разделов. Сейчас массив <code>$arResult</code> выглядит так:\r\n</p>\r\n[code]\r\nArray\r\n(\r\n    [IBLOCK] => Array\r\n        (\r\n            [ID] => 5\r\n            [IBLOCK_TYPE_ID] => content\r\n            [CODE] => articles\r\n            [NAME] => Статьи о домашних животных\r\n            ..........\r\n        )\r\n    [grn][ROOT_SECTIONS] => Array\r\n        (\r\n            [0] => Array\r\n                (\r\n                    [ID] => 28\r\n                    [NAME] => Породы собак\r\n                    [SECTION_PAGE_URL] => /demo/category/id/28/\r\n                    [CODE] => porody-sobak\r\n                    [IBLOCK_TYPE_ID] => content\r\n                    [IBLOCK_ID] => 5\r\n                    [IBLOCK_CODE] => articles\r\n                    ..........\r\n                )\r\n            [1] => Array\r\n                (\r\n                    [ID] => 29\r\n                    [NAME] => Породы кошек\r\n                    [SECTION_PAGE_URL] => /demo/category/id/29/\r\n                    [CODE] => porody-koshek\r\n                    [IBLOCK_TYPE_ID] => content\r\n                    [IBLOCK_ID] => 5\r\n                    [IBLOCK_CODE] => articles\r\n                    ..........\r\n                )\r\n        )[/grn]\r\n    [POPULAR_SECTIONS] => Array\r\n        (\r\n            [0] => Array\r\n                (\r\n                    [ID] => 28\r\n                    [NAME] => Породы собак\r\n                    [SECTION_PAGE_URL] => /demo/category/id/28/\r\n                    [CODE] => porody-sobak\r\n                    [IBLOCK_TYPE_ID] => content\r\n                    [IBLOCK_ID] => 5\r\n                    [IBLOCK_CODE] => articles\r\n                    ..........\r\n                    [ITEMS] => Array\r\n                        (\r\n                            ..........\r\n                        )\r\n                )\r\n            [1] => Array\r\n                (\r\n                    [ID] => 29\r\n                    [NAME] => Породы кошек\r\n                    [SECTION_PAGE_URL] => /demo/category/id/29/\r\n                    [CODE] => porody-koshek\r\n                    [IBLOCK_TYPE_ID] => content\r\n                    [IBLOCK_ID] => 5\r\n                    [IBLOCK_CODE] => articles\r\n                    ..........\r\n                    [ITEMS] => Array\r\n                        (\r\n                            ..........\r\n                        )\r\n                )\r\n        )\r\n)\r\n[/code]\r\n<p>\r\nСоздаем файл <code>result_modifier.php</code> следующего содержания:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/demo/iblock.popular/.default/result_modifier.php\r\n */\r\n\r\n/*\r\n * выбираем подразделы корневых разделов инфоблока\r\n */\r\nif (empty($arResult[\'ROOT_SECTIONS\'])) {\r\n    return;\r\n}\r\n\r\n// какие поля подразделов выбираем\r\n$arSelect = array(\r\n    \'ID\',\r\n    \'NAME\',\r\n    \'SECTION_PAGE_URL\'\r\n);\r\n// условия выборки подразделов\r\n$arFilter = array(\r\n    \'IBLOCK_ID\' => $arResult[\'ID\'], // идентификатор инфоблока\r\n    \'IBLOCK_ACTIVE\' => \'Y\',         // инфоблок должен быть активен\r\n    \'ACTIVE\' => \'Y\',                // только активные подразделы\r\n    \'CHECK_PERMISSIONS\' => \'Y\',     // проверять права доступа\r\n);\r\n// сортировка\r\n$arSort = array(\r\n    \'SORT\' => \'ASC\',\r\n);\r\n// перебираем все корневые разделы, для каждого получаем подразделы\r\nforeach ($arResult[\'ROOT_SECTIONS\'] as &$arRoot) {\r\n    $arFilter[\'SECTION_ID\'] = $arRoot[\'ID\'];\r\n    $rsChilds = CIBlockSection::GetList($arSort, $arFilter, false, $arSelect);\r\n    // устанавливаем шаблон пути для подразделов, вместо того,\r\n    // который указан в настройках информационного блока\r\n    $rsChilds->SetUrlTemplates(\'\', $arParams[\'SECTION_URL\']);\r\n    while ($arChild = $rsChilds->GetNext()) {\r\n        $arRoot[\'CHILD_SECTIONS\'][] = $arChild;\r\n    }\r\n}\r\nunset($arRoot);\r\n[/php]\r\n<p>\r\nТеперь массив <code>$arResult</code> выглядит так:\r\n</p>\r\n[code]\r\nArray\r\n(\r\n    [IBLOCK] => Array\r\n        (\r\n            [ID] => 5\r\n            [IBLOCK_TYPE_ID] => content\r\n            [CODE] => articles\r\n            [NAME] => Статьи о домашних животных\r\n            ..........\r\n        )\r\n    [grn][ROOT_SECTIONS] => Array\r\n        (\r\n            [0] => Array\r\n                (\r\n                    [ID] => 28\r\n                    [NAME] => Породы собак\r\n                    [SECTION_PAGE_URL] => /demo/category/id/28/\r\n                    [CODE] => porody-sobak\r\n                    [IBLOCK_TYPE_ID] => content\r\n                    [IBLOCK_ID] => 5\r\n                    [IBLOCK_CODE] => articles\r\n                    ..........\r\n                    [red][CHILD_SECTIONS] => Array\r\n                        (\r\n                            [0] => Array\r\n                                (\r\n                                    [ID] => 30\r\n                                    [NAME] => Служебные породы\r\n                                    [SECTION_PAGE_URL] => /demo/category/id/30/\r\n                                    [CODE] => sluzhebnye-porody\r\n                                    [IBLOCK_TYPE_ID] => content\r\n                                    [IBLOCK_ID] => 5\r\n                                    [IBLOCK_CODE] => articles\r\n                                    ..........\r\n                                )\r\n                            [1] => Array\r\n                                (\r\n                                    [ID] => 31\r\n                                    [NAME] => Декоративные породы\r\n                                    [SECTION_PAGE_URL] => /demo/category/id/31/\r\n                                    [CODE] => dekorativnye-porody\r\n                                    [IBLOCK_TYPE_ID] => content\r\n                                    [IBLOCK_ID] => 5\r\n                                    [IBLOCK_CODE] => articles\r\n                                    ..........\r\n                                )\r\n                        )[/red]\r\n                )\r\n            [1] => Array\r\n                (\r\n                    [ID] => 29\r\n                    [NAME] => Породы кошек\r\n                    [SECTION_PAGE_URL] => /demo/category/id/29/\r\n                    [CODE] => porody-koshek\r\n                    [IBLOCK_TYPE_ID] => content\r\n                    [IBLOCK_ID] => 5\r\n                    [IBLOCK_CODE] => articles\r\n                    ..........\r\n                )\r\n        )[/grn]\r\n    [POPULAR_SECTIONS] => Array\r\n        (\r\n            [0] => Array\r\n                (\r\n                    [ID] => 28\r\n                    [NAME] => Породы собак\r\n                    [SECTION_PAGE_URL] => /demo/category/id/28/\r\n                    [CODE] => porody-sobak\r\n                    [IBLOCK_TYPE_ID] => content\r\n                    [IBLOCK_ID] => 5\r\n                    [IBLOCK_CODE] => articles\r\n                    ..........\r\n                    [ITEMS] => Array\r\n                        (\r\n                            ..........\r\n                        )\r\n                )\r\n            [1] => Array\r\n                (\r\n                    [ID] => 29\r\n                    [NAME] => Породы кошек\r\n                    [SECTION_PAGE_URL] => /demo/category/id/29/\r\n                    [CODE] => porody-koshek\r\n                    [IBLOCK_TYPE_ID] => content\r\n                    [IBLOCK_ID] => 5\r\n                    [IBLOCK_CODE] => articles\r\n                    ..........\r\n                    [ITEMS] => Array\r\n                        (\r\n                            ..........\r\n                        )\r\n                )\r\n        )\r\n)\r\n[/code]\r\n\r\n<p>\r\nПример вызова комплексного компонента:\r\n</p>\r\n[phtml]\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Статьи о домашних животных\");\r\n?>\r\n\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"demo:iblock\",\r\n    \"\",\r\n    Array(\r\n        \"ADD_SECTIONS_CHAIN\" => \"Y\",\r\n        \"CACHE_GROUPS\" => \"Y\",\r\n        \"CACHE_TIME\" => \"3600\",\r\n        \"CACHE_TYPE\" => \"A\",\r\n        \"DETAIL_SET_BROWSER_TITLE\" => \"Y\",\r\n        \"DETAIL_SET_META_DESCRIPTION\" => \"Y\",\r\n        \"DETAIL_SET_META_KEYWORDS\" => \"Y\",\r\n        \"DETAIL_SET_PAGE_TITLE\" => \"Y\",\r\n        \"DISPLAY_BOTTOM_PAGER\" => \"Y\",\r\n        \"DISPLAY_TOP_PAGER\" => \"N\",\r\n        \"FILE_404\" => \"\",\r\n        \"IBLOCK_ID\" => \"5\",\r\n        \"IBLOCK_TYPE\" => \"content\",\r\n        \"MESSAGE_404\" => \"\",\r\n        \"PAGER_BASE_LINK_ENABLE\" => \"N\",\r\n        \"PAGER_DESC_NUMBERING\" => \"N\",\r\n        \"PAGER_DESC_NUMBERING_CACHE_TIME\" => \"36000\",\r\n        \"PAGER_SHOW_ALL\" => \"N\",\r\n        \"PAGER_SHOW_ALWAYS\" => \"N\",\r\n        \"PAGER_TEMPLATE\" => \".default\",\r\n        \"PAGER_TITLE\" => \"Элементы\",\r\n        \"POPULAR_ELEMENT_COUNT\" => \"4\",\r\n        \"POPULAR_ROOT_SECTIONS\" => \"Y\",\r\n        \"POPULAR_SECTIONS\" => array(),\r\n        \"POPULAR_SET_BROWSER_TITLE\" => \"Y\",\r\n        \"POPULAR_SET_PAGE_TITLE\" => \"Y\",\r\n        \"SECTION_ELEMENT_COUNT\" => \"3\",\r\n        \"SECTION_SET_BROWSER_TITLE\" => \"Y\",\r\n        \"SECTION_SET_META_DESCRIPTION\" => \"Y\",\r\n        \"SECTION_SET_META_KEYWORDS\" => \"Y\",\r\n        \"SECTION_SET_PAGE_TITLE\" => \"Y\",\r\n        \"SEF_FOLDER\" => \"/demo/\",\r\n        \"SEF_MODE\" => \"Y\",\r\n        \"SEF_URL_TEMPLATES\" => array(\r\n            \"element\"=>\"item/id/#ELEMENT_ID#/\",\r\n            \"popular\"=>\"\",\r\n            \"section\"=>\"category/id/#SECTION_ID#/\"\r\n        ),\r\n        \"SET_STATUS_404\" => \"Y\",\r\n        \"SHOW_404\" => \"Y\"\r\n    )\r\n);\r\n?>\r\n\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\");\r\n?>\r\n[/phtml]\r\n<p>\r\nВ браузере наш компонент будет выглядеть примерно так:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/195/1.jpg\" class=\"zoom\"><img src=\"/files/blog/195/1.jpg\" alt=\"\" /></a>\r\n</p>','2018-09-21 13:18:38',1),(196,17,'Битрикс. Создание комплексного компонента. Часть 4','','','CMS, Web-разработка, Битрикс, Инфоблок, Компонент, РазделИнфоблока, ШаблонКомпонента, ЭлементИнфоблока','Исходный код нативных компонентов содержит множество переменных, назначение которых не всегда понятно. К сожалению, разработчики Битрикс не пишут комментариев, да и документация оставляет желать много лучшего. Очень часто после прочтения документации появляется больше вопросов, чем ответов.','<p>\r\nИсходный код нативных компонентов содержит множество переменных, назначение которых не всегда понятно. К сожалению, разработчики Битрикс не пишут комментариев, да и документация оставляет желать много лучшего. Очень часто после прочтения документации появляется больше вопросов, чем ответов. Здесь я постарался подробно разобрать назначение тех переменных, которые могут встретиться при чтении кода.\r\n</p>\r\n<p>\r\nЧтобы упростить задачу, я разделил файл <code>component.php</code> на два файла поменьше. Один подключается, когда включен режим поддержки ЧПУ, а второй — когда выключен.\r\n</p>\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock/component.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\nif (!CModule::IncludeModule(\'iblock\')) {\r\n    return;\r\n}\r\n\r\nif ($arParams[\'SEF_MODE\'] == \'Y\') {\r\n    require \'support-sef-url.php\'; // включен режим поддержки ЧПУ\r\n} else {\r\n    require \'without-sef-url.php\'; // не включен режим поддержки ЧПУ\r\n}\r\n[/php]\r\n\r\n<p>\r\n<strong>Файл</strong> <code>local/components/demo/iblock/without-sef-url.php</code>:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock/without-sef-url.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/*\r\n * Если не включен режим поддержки ЧПУ\r\n */\r\n\r\n/*\r\n * В этой переменной будем накапливать значения истинных переменных, восстанавливая их из псевдонимов.\r\n */\r\n$arVariables = array();\r\n[/php]\r\n[php]\r\n/*\r\n * Массив имен переменных, которые компонент может получать из запроса. Все переменные, перечисленные\r\n * в этом массиве, будут добавлены в $arVariables, если они есть в массиве $_REQUEST. Нам есть смысл\r\n * добавить в этот массив переменную ACTION, которая нам нужна, чтобы знать — какой простой компонент\r\n * нужно подключать. \r\n */\r\n$arComponentVariables = array(\'ACTION\');\r\n[/php]\r\n<div class=\"note\">\r\n<p>\r\nВозможно, есть смысл еще добавить в этот массив переменные <code>ELEMENT_ID</code>, <code>ELEMENT_CODE</code>, <code>SECTION_ID</code>, <code>SECTION_CODE</code> — чтобы они гарантированно попали в <code>$arVariables</code>. Наш комплексный компонент сохранит работоспособность, если по каким-то причинам <code>$arVariableAliases</code> окажется пустым, см. ниже по коду вызов <code>CComponentEngine::InitComponentVariables()</code>.\r\n</p>\r\n[php]\r\n$arComponentVariables = array(\r\n    \'ELEMENT_ID\',\r\n    \'ELEMENT_CODE\',\r\n    \'SECTION_ID\',\r\n    \'SECTION_CODE\',\r\n    \'ACTION\'\r\n);\r\n[/php]\r\n</div>\r\n[php]\r\n/*\r\n * Массив $arDefaultVariableAliases предназначен для задания псевдонимов «по-умолчанию» переменных в\r\n * режиме не ЧПУ. В случае, если необходимо, чтобы в HTTP запросе (в адресе страницы) переменная называлась\r\n * по другому, можно задать псевдоним этой переменной, а при работе компонента восстанавливать значение\r\n * переменной из псевдонима. Следует помнить, что псевдонимы «по-умолчанию» будут перезаписаны значениями\r\n * из массива $arParams[\'VARIABLE_ALIASES\'].\r\n */\r\n$arDefaultVariableAliases = array();\r\n[/php]\r\n<div class=\"note\">\r\n<p>\r\nВозможно, есть смысл еще добавить в этот массив переменные <code>ELEMENT_ID</code>, <code>ELEMENT_CODE</code>, <code>SECTION_ID</code>, <code>SECTION_CODE</code> — чтобы они гарантированно попали в <code>$arVariables</code>. Наш комплексный компонент сохранит работоспособность, если по каким-то причинам <code>$arParams[\'VARIABLE_ALIASES\']</code> окажется пустым.\r\n</p>\r\n[php]\r\n$arDefaultVariableAliases = array(\r\n    \'ELEMENT_ID\' => \'ELEMENT_ID\',\r\n    \'ELEMENT_CODE\' => \'ELEMENT_CODE\',\r\n    \'SECTION_ID\' => \'SECTION_ID\',\r\n    \'SECTION_CODE\' => \'SECTION_CODE\',\r\n);\r\n[/php]\r\n<p>\r\nПравда, я не очень понимаю, по каким причинам <code>$arParams[\'VARIABLE_ALIASES\']</code> мог бы оказаться пустым.\r\n</p>\r\n</div>\r\n<div class=\"note\">\r\n<p>\r\nЕсли в визуальном редакторе не задавать псевдонимы переменных, будет сформирован такой вызов компонента:\r\n</p>\r\n[php]\r\n$APPLICATION->IncludeComponent(\r\n    \"demo:iblock\",\r\n    \"\",\r\n    array(\r\n        /*...*/\r\n        \"VARIABLE_ALIASES\" => array(\r\n            \"ELEMENT_ID\" => \"ELEMENT_ID\",\r\n            \"ELEMENT_CODE\" => \"ELEMENT_CODE\",\r\n            \"SECTION_ID\" => \"SECTION_ID\"\r\n            \"SECTION_CODE\" => \"SECTION_CODE\",\r\n        )\r\n        /*...*/\r\n    )\r\n);\r\n[/php]\r\n<p>\r\nЕсли в визуальном редакторе задать псевдонимы для переменных, то вызов будет таким:\r\n</p>\r\n[php]\r\n$APPLICATION->IncludeComponent(\r\n    \"demo:iblock\",\r\n    \"\",\r\n    array(\r\n        /*...*/\r\n        \"VARIABLE_ALIASES\" => array(\r\n            \"ELEMENT_ID\" => \"EID\",\r\n            \"ELEMENT_CODE\" => \"ECODE\",\r\n            \"SECTION_ID\" => \"SID\",\r\n            \"SECTION_CODE\" => \"SCODE\",\r\n        )\r\n        /*...*/\r\n    )\r\n);\r\n[/php]\r\n</div>\r\n\r\n[php]\r\n/*\r\n * Соберем массив псевдонимов переменных из массива псевдонимов «по-умолчанию» $arDefaultVariableAliases и\r\n * массива, переданого во входных параметрах $arParams[\'VARIABLE_ALIASES\'] По сути, происходит следующее\r\n * $arVariableAliases = array_merge($arDefaultVariableAliases, $arParams[\'VARIABLE_ALIASES\']);\r\n */\r\n$arVariableAliases = CComponentEngine::MakeComponentVariableAliases(\r\n    $arDefaultVariableAliases,    // массив псевдонимов переменных по умолчанию\r\n    $arParams[\'VARIABLE_ALIASES\'] // массив псевдонимов из входных параметров\r\n);\r\n[/php]\r\n[php]\r\n/*\r\n * Добавим в $arVariables переменные из $_REQUEST, которые есть в $arComponentVariables и в $arVariableAliases.\r\n * Переменные из $arComponentVariables просто добавляются в $arVariables, если они есть в $_REQUEST. Переменные\r\n * $arVariableAliases добавляютcя под своими реальными именами, если в $_REQUEST есть соответствующий псевдоним.\r\n */\r\nCComponentEngine::InitComponentVariables(\r\n    false,                 // в режиме не ЧПУ всегда false\r\n    $arComponentVariables, // массив имен переменных, которые компонент может получать из запроса\r\n    $arVariableAliases,    // массив псевдонимов переменных\r\n    $arVariables           // массив, в котором возвращаются восстановленные переменные\r\n);\r\n[/php]\r\n\r\n<div class=\"note\">\r\n<p>\r\nЧто происходит внутри <code>CComponentEngine::InitComponentVariables()</code>:\r\n</p>\r\n[php]\r\n// Если не существует $arVariables[\'ELEMENT_ID\'], но существуют $arVariableAliases[\'ELEMENT_ID\'] = \'EID\' и\r\n// $_REQUEST[\'EID\'] — в массив $arVariables добавляется элемент $arVariables[\'ELEMENT_ID\'] = $_REQUEST[\'EID\']\r\nforeach ($arVariableAliases as $variableName => $aliasName) {\r\n    if (!array_key_exists($variableName, $arVariables)) {\r\n        if (is_string($aliasName) && array_key_exists($aliasName, $_REQUEST)) {\r\n            $arVariables[$variableName] = $_REQUEST[$aliasName];\r\n        }\r\n    }\r\n}\r\n[/php]\r\n[php]\r\n// Если не существует $arVariables[\'ELEMENT_ID\'], но существуют $arComponentVariables[\'ELEMENT_ID\'] и $_REQUEST[\'ELEMENT_ID\'],\r\n// то в массив $arVariables добавляется элемент $arVariables[\'ELEMENT_ID\'] = $_REQUEST[\'ELEMENT_ID\']\r\nif ($arComponentVariables && is_array($arComponentVariables)) {\r\n    for ($i = 0; $i < count($arComponentVariables); $i++) {\r\n        if (!array_key_exists($arComponentVariables[$i], $arVariables) && array_key_exists($arComponentVariables[$i], $_REQUEST)) {\r\n            $arVariables[$arComponentVariables[$i]] = $_REQUEST[$arComponentVariables[$i]];\r\n        }\r\n    }\r\n}\r\n[/php]\r\n</div>\r\n\r\n[php]\r\n/*\r\n * Теперь определяем, какую страницу шаблона компонента нужно показать\r\n */\r\n$componentPage = \'popular\';\r\nif (isset($arVariables[\'ACTION\']) && $arVariables[\'ACTION\'] == \'element\') {\r\n    $componentPage = \'element\'; // элемент инфоблока\r\n}\r\nif (isset($arVariables[\'ACTION\']) && $arVariables[\'ACTION\'] == \'section\') {\r\n    $componentPage = \'section\'; // раздел инфоблока\r\n}\r\n[/php]\r\n[php]\r\n/*\r\n * Обрабытываем ситуацию, когда переданы некорректные параметры SECTION_ID, SECTION_CODE, ELEMENT_ID,\r\n * ELEMENT_CODE и показываем страницу 404 Not Found\r\n */\r\n$notFound = false;\r\n// недопустимое значение идентификатора элемента\r\nif ($componentPage == \'element\') {\r\n    if ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') { // если используются символьные коды\r\n        if ( ! (isset($arVariables[\'ELEMENT_CODE\']) && strlen($arVariables[\'ELEMENT_CODE\']) > 0)) {\r\n            $notFound = true;\r\n        }\r\n    } else { // если используются идентификаторы\r\n        if ( ! (isset($arVariables[\'ELEMENT_ID\']) && ctype_digit($arVariables[\'ELEMENT_ID\']))) {\r\n            $notFound = true;\r\n        }\r\n    }\r\n}\r\n// недопустимое значение идентификатора раздела\r\nif ($componentPage == \'section\') {\r\n    if ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') { // если используются символьные коды\r\n        if ( ! (isset($arVariables[\'SECTION_CODE\']) && strlen($arVariables[\'SECTION_CODE\']) > 0)) {\r\n            $notFound = true;\r\n        }\r\n    } else { // если используются идентификаторы\r\n        if ( ! (isset($arVariables[\'SECTION_ID\']) && ctype_digit($arVariables[\'SECTION_ID\']))) {\r\n            $notFound = true;\r\n        }\r\n    }\r\n}\r\n// показываем страницу 404 Not Found\r\nif ($notFound) {\r\n    \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n        trim($arParams[\'MESSAGE_404\']) ?: \'Элемент или раздел инфоблока не найден\',\r\n        true,\r\n        $arParams[\'SET_STATUS_404\'] === \'Y\',\r\n        $arParams[\'SHOW_404\'] === \'Y\',\r\n        $arParams[\'FILE_404\']\r\n    );\r\n    return;\r\n}\r\n[/php]\r\n[php]\r\n$arResult[\'VARIABLES\'] = $arVariables;\r\n$arResult[\'FOLDER\'] = \'\';\r\nif ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') { // если используются символьные коды\r\n    $arResult[\'SECTION_URL\'] =\r\n        $APPLICATION->GetCurPage().\'?ACTION=section\'.\'&\'.$arVariableAliases[\'SECTION_CODE\'].\'=#SECTION_CODE#\';\r\n    $arResult[\'ELEMENT_URL\'] =\r\n        $APPLICATION->GetCurPage().\'?ACTION=element\'.\'&\'.$arVariableAliases[\'ELEMENT_CODE\'].\'=#ELEMENT_CODE#\';\r\n} else { // если используются идентификаторы\r\n    $arResult[\'SECTION_URL\'] = \r\n        $APPLICATION->GetCurPage().\'?ACTION=section\'.\'&\'.$arVariableAliases[\'SECTION_ID\'].\'=#SECTION_ID#\';\r\n    $arResult[\'ELEMENT_URL\'] =\r\n        $APPLICATION->GetCurPage().\'?ACTION=element\'.\'&\'.$arVariableAliases[\'ELEMENT_ID\'].\'=#ELEMENT_ID#\';\r\n}\r\n\r\n$this->IncludeComponentTemplate($componentPage);\r\n[/php]\r\n\r\n<p>\r\n<strong>Файл</strong> <code>local/components/demo/iblock/support-sef-url.php</code>:\r\n</p>\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock/support-sef-url.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n/*\r\n * Если включен режим поддержки ЧПУ\r\n */\r\n\r\n/*\r\n * В этой переменной будем накапливать значения истинных переменных, восстанавливая их из шаблонов\r\n * путей и из псевдонимов.\r\n */\r\n$arVariables = array();\r\n[/php]\r\n[php]\r\n/*\r\n * Массив имен переменных, которые компонент может получать из запроса. Все переменные, перечисленные\r\n * в этом массиве, будут добавлены в $arVariables, если они есть в массиве $_REQUEST.\r\n */\r\n$arComponentVariables = array();\r\n[/php]\r\n<div class=\"note\">\r\n<p>\r\nКроме переменных <code>ELEMENT_ID</code>, <code>ELEMENT_CODE</code>, <code>SECTION_ID</code>, <code>SECTION_CODE</code> могут быть переданы дополнительные переменные, например\r\n</p>\r\n[code]\r\nserver.com/demo/category/id/28/?sort=date&dir=desc\r\n[/code]\r\n<p>\r\nПеременная <code>SECTION_ID</code> будет получена из сопоставления шаблона <code>category/id/#SECTION_ID#/</code>. Но здесь для страницы раздела инфоблока переданы параметры сортировки списка элементов: по дате, по убыванию. Наш простой компонент <code>demo:iblock.section</code> этого делать не умеет, но это не трудно реализовать. В массиве <code>$arComponentVariables</code> мы должны описать эти переменные:\r\n[php]\r\n$arComponentVariables = array(\r\n    \'sort\',\r\n    \'dir\'\r\n);\r\n[/php]\r\n<p>\r\nчтобы они были добавлены в <code>$arVariables</code> и переданы дальше простому компоненту примерно так:\r\n</p>\r\n</p>\r\n[php]\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.section\',\r\n    \'\',\r\n    Array(\r\n        /*...*/\r\n        // по какому полю сортировать элементы\r\n        \'ELEMENT_SORT_FIELD\' => $arResult[\'VARIABLES\'][\'sort\'],\r\n        // направление сортировки — по возрастанию или убыванию\r\n        \'ELEMENT_SIRT_DIR\' => $arResult[\'VARIABLES\'][\'dir\'],\r\n        /*...*/\r\n    ),\r\n    $component\r\n);\r\n[/php]\r\n</div>\r\n[php]\r\n/*\r\n * Массив $arDefaultVariableAliases404 предназначен для задания псевдонимов переменных «по-умолчанию»\r\n * в режиме ЧПУ. В случае, если необходимо, чтобы в HTTP запросе (в адресе страницы) переменная называлась\r\n * по другому, можно задать псевдоним этой переменной, а при работе компонента восстанавливать значение\r\n * переменной из псевдонима. Следует помнить, что псевдонимы «по-умолчанию» будут перезаписаны значениями\r\n * из массива $arParams[\'VARIABLE_ALIASES\'].\r\n */\r\n$arDefaultVariableAliases404 = array();\r\n[/php]\r\n<div class=\"note\">\r\n<p>\r\nЧтобы продемонстрировать использование массива <code>$arDefaultVariableAliases404</code>, добавим в него элемент <code>ELEMENT_COUNT</code>, который позволяет передать количество элементов инфоблока на странице при постраничной навигации:\r\n</p>\r\n[php]\r\n$arDefaultVariableAliases404 = array(\r\n    \'section\' => array(\r\n        \'ELEMENT_COUNT\' => \'count\',\r\n    ),\r\n);\r\n[/php]\r\n<p>\r\nВ итоге, после вызова <code>CComponentEngine::InitComponentVariables()</code> ниже по коду, в массив <code>$arVariables</code> будет добавлена переменная <code>ELEMENT_COUNT</code>, значение которой буде получено из <code>$_REQUEST[\'count\']</code>. Мы можем передать эту перемнную простому компоненту:\r\n</p>\r\n[php]\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/section.php\r\n */\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.section\',\r\n    \'\',\r\n    array(\r\n        /*...*/\r\n        \'ELEMENT_COUNT\' => $arResult[\'VARIABLES\'][\'ELEMENT_COUNT\'] ?: $arParams[\'SECTION_ELEMENT_COUNT\'],\r\n        /*...*/\r\n    ),\r\n    $component\r\n);\r\n[/php]\r\n</div>\r\n[php]\r\n/*\r\n * Массив шаблонов путей «по-умолчанию» для работы в ЧПУ-режиме. Задает имена файлов шаблонов, которые\r\n * будут запущены в работу, если совпадет шаблон пути. Эти шаблоны путей будут перезаписаны значениями\r\n * из массива $arParams[\"SEF_URL_TEMPLATES\"]. Массив $arDefaultUrlTemplates404 нужен исключительно на\r\n * тот случай, если по каким-либо причинам массив $arParams[\"SEF_URL_TEMPLATES\"] окажется пустым.\r\n */\r\nif ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') { // если используются символьные коды\r\n    $arDefaultUrlTemplates404 = array(\r\n        \'popular\' => \'\',\r\n        \'section\' => \'category/code/#SECTION_CODE#/\',\r\n        \'element\' => \'item/code/#ELEMENT_CODE#/\',\r\n    );\r\n} else { // если используются идентификаторы\r\n    $arDefaultUrlTemplates404 = array(\r\n        \'popular\' => \'\',\r\n        \'section\' => \'category/id/#SECTION_ID#/\',\r\n        \'element\' => \'item/id/#ELEMENT_ID#/\',\r\n    );\r\n}\r\n[/php]\r\n[php]\r\n/*\r\n * Определим, каким в итоге будет массив шаблонов путей. По факту, происходит слияние массивов\r\n * $arUrlTemplates = array_merge($arDefaultUrlTemplates404, $arParams[\'SEF_URL_TEMPLATES\'])\r\n */\r\n$arUrlTemplates = CComponentEngine::MakeComponentUrlTemplates(\r\n    $arDefaultUrlTemplates404,\r\n    $arParams[\'SEF_URL_TEMPLATES\']\r\n);\r\n[/php]\r\n[php]\r\n/*\r\n * Соберем массив псевдонимов переменных из массива псевдонимов «по-умолчанию» $arDefaultVariableAliases404\r\n * и массива, переданого во входных параметрах $arParams[\'VARIABLE_ALIASES\']. По сути, происходит слияние\r\n * массивов $arVariableAliases = array_merge($arDefaultVariableAliases, $arParams[\'VARIABLE_ALIASES\']);\r\n */\r\n$arVariableAliases = CComponentEngine::MakeComponentVariableAliases(\r\n    $arDefaultVariableAliases404,\r\n    $arParams[\'VARIABLE_ALIASES\']\r\n);\r\n[/php]\r\n[php]\r\n/*\r\n * Определим файл шаблона (popular, section, element), который нужно подключить. Заодно получим значения\r\n * 1. SECTION_ID или SECTION_CODE, если запрошена страница раздела инфоблока\r\n * 2. ELEMENT_ID или ELEMENT_CODE, если запрошена страница элемента инфоблока\r\n * Переменная $arVariables передается по ссылке, поэтому на выходе будет содержать значения переменных:\r\n * server.com/demo/category/id/28/ ---> $arVariables = array(SECTION_ID => 28)\r\n * server.com/demo/item/id/97/ ---> $arVariables = array(ELEMENT_ID => 97)\r\n */\r\n$componentPage = CComponentEngine::ParseComponentPath(\r\n    $arParams[\'SEF_FOLDER\'],\r\n    $arUrlTemplates, \r\n    $arVariables\r\n);\r\n[/php]\r\n[php]\r\n/*\r\n * Метод CComponentEngine::ParseComponentPath() не обрабатывает случай, когда шаблон пути равен пустой\r\n * строке, например \'popular\' => \'\'. Поэтому делаем это сами\r\n */\r\nif ($componentPage === false && parse_url($_SERVER[\'REQUEST_URI\'], PHP_URL_PATH) == $arParams[\'SEF_FOLDER\']) {\r\n    $componentPage = \'popular\';\r\n}\r\n[/php]\r\n[php]\r\n// Если определить файл шаблона не удалось, показываем  страницу 404 Not Found\r\nif (empty($componentPage)) {\r\n    \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n        trim($arParams[\'MESSAGE_404\']) ?: \'Элемент или раздел инфоблока не найден\',\r\n        true,\r\n        $arParams[\'SET_STATUS_404\'] === \'Y\',\r\n        $arParams[\'SHOW_404\'] === \'Y\',\r\n        $arParams[\'FILE_404\']\r\n    );\r\n    return;\r\n}\r\n[/php]\r\n[php]\r\n/*\r\n * Обрабытываем ситуацию, когда переданы некорректные параметры SECTION_ID, SECTION_CODE, ELEMENT_ID,\r\n * ELEMENT_CODE и показываем страницу 404 Not Found\r\n */\r\n$notFound = false;\r\n// недопустимое значение идентификатора элемента\r\nif ($componentPage == \'element\') {\r\n    if ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') { // если используются символьные коды\r\n        if ( ! (isset($arVariables[\'ELEMENT_CODE\']) && strlen($arVariables[\'ELEMENT_CODE\']) > 0)) {\r\n            $notFound = true;\r\n        }\r\n    } else { // если используются идентификаторы\r\n        if ( ! (isset($arVariables[\'ELEMENT_ID\']) && ctype_digit($arVariables[\'ELEMENT_ID\']))) {\r\n            $notFound = true;\r\n        }\r\n    }\r\n}\r\n// недопустимое значение идентификатора раздела\r\nif ($componentPage == \'section\') {\r\n    if ($arParams[\'USE_CODE_INSTEAD_ID\'] == \'Y\') { // если используются символьные коды\r\n        if ( ! (isset($arVariables[\'SECTION_CODE\']) && strlen($arVariables[\'SECTION_CODE\']) > 0)) {\r\n            $notFound = true;\r\n        }\r\n    } else { // если используются идентификаторы\r\n        if ( ! (isset($arVariables[\'SECTION_ID\']) && ctype_digit($arVariables[\'SECTION_ID\']))) {\r\n            $notFound = true;\r\n        }\r\n    }\r\n}\r\n// показываем страницу 404 Not Found\r\nif ($notFound) {\r\n    \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n        trim($arParams[\'MESSAGE_404\']) ?: \'Элемент или раздел инфоблока не найден\',\r\n        true,\r\n        $arParams[\'SET_STATUS_404\'] === \'Y\',\r\n        $arParams[\'SHOW_404\'] === \'Y\',\r\n        $arParams[\'FILE_404\']\r\n    );\r\n    return;\r\n}\r\n[/php]\r\n[php]\r\n/*\r\n * Добавим в $arVariables переменные из $_REQUEST, которые есть в $arComponentVariables и в $arVariableAliases.\r\n * Переменные из $arComponentVariables просто добавляются в $arVariables, если они есть в $_REQUEST. Переменные\r\n * $arVariableAliases добавляютcя под своими реальными именами, если в $_REQUEST есть соответствующий псевдоним.\r\n */\r\nCComponentEngine::InitComponentVariables(\r\n    $componentPage,\r\n    $arComponentVariables,\r\n    $arVariableAliases,\r\n    $arVariables\r\n);\r\n[/php]\r\n<div class=\"note\">\r\n<p>\r\nЕсли были заданы значения переменных <code>$arComponentVariables</code> и <code>$arDefaultVariableAliases404</code>\r\n</p>\r\n[php]\r\n$arComponentVariables = array(\r\n    \'sort\',\r\n    \'dir\'\r\n);\r\n[/php]\r\n[php]\r\n$arDefaultVariableAliases404 = array(\r\n    \'section\' => array(\r\n        \'ELEMENT_COUNT\' => \'count\',\r\n    ),\r\n);\r\n[/php]\r\n<p>\r\nи была запрошена страница\r\n</p>\r\n[code]\r\nserver.com/demo/category/id/28/?count=3&sort=date&dir=desc\r\n[/code]\r\n<p>\r\nто перемнная <code>$arVariables</code> будет такой:\r\n</p>\r\n[php]\r\n$arVariables = array (\r\n    \'SECTION_ID\' => 28,\r\n    \'ELEMENT_COUNT\' => 3,\r\n    \'sort\' => \'date\',\r\n    \'dir\' => \'desc\'\r\n);\r\n[/php]\r\n</div>\r\n[php]\r\n$arResult[\'VARIABLES\'] = $arVariables;\r\n$arResult[\'FOLDER\'] = $arParams[\'SEF_FOLDER\'];\r\n$arResult[\'SECTION_URL\'] = $arParams[\'SEF_FOLDER\'].$arParams[\'SEF_URL_TEMPLATES\'][\'section\'];\r\n$arResult[\'ELEMENT_URL\'] = $arParams[\'SEF_FOLDER\'].$arParams[\'SEF_URL_TEMPLATES\'][\'element\'];\r\n\r\n$this->IncludeComponentTemplate($componentPage);\r\n[/php]\r\n<div class=\"note\">\r\nОбратите внимание, что при размещении комплексного компонента в режиме ЧПУ на странице <code>/test/index.php</code>, файл <code>urlrewrite.php</code> в корне сервера будет перезаписан и в нем появится запись:\r\n</p>\r\n[php]\r\n<?php\r\n$arUrlRewrite = array(\r\n    0 => \r\n    array (\r\n        \'CONDITION\' => \'#^/test/#\',\r\n        \'RULE\' => \'\',\r\n        \'ID\' => \'demo:iblock\',\r\n        \'PATH\' => \'/test/index.php\',\r\n        \'SORT\' => 100,\r\n    ),\r\n);\r\n[/php]\r\n<p>\r\nКогда мы будем обращаться по адресам\r\n</p>\r\n[code]\r\n/test/category/id/28/\r\n/test/item/id/347/\r\n[/code]\r\n<p>\r\nкоторые физически не существуют, но соответствуют шаблону <code>#^/test/#</code> — отвечать на обращения будет скрипт <code>/test/index.php</code>, который содержит вызов комплексного компонента <code>demo:iblock</code>.\r\n</p>\r\n</div>\r\n\r\n<h2>Вместо заключения</h2>\r\n<p>\r\nПосле разбора того, как работает комплексный компонент, все равно остались вопросы:\r\n</p>\r\n<h3>В режиме без поддержки ЧПУ</h3>\r\n<p>\r\n<strong>1. Зачем нужна переменная</strong> <code>$arDefaultVariableAliases</code>, если она перезаписывается значениями из <code>$arParams[\'VARIABLE_ALIASES\']</code>? Если только исключить из файла настроек компонента <code>VARIABLE_ALIASES</code> и использовать <code>$arDefaultVariableAliases</code>, тем самым жестко прописав псевдонимы переменных в <code>component.php</code>. Но тогда изменить это может только программист, а администратор сайта никак на это повлиять не сможет.\r\n</p>\r\n<p>\r\n<strong>2. Зачем нужна переменная</strong> <code>$arComponentVariables</code>, которая сообщает, какие переменные из <code>$_REQUEST</code> должны попасть в <code>$arVariables</code>. Зачем вообще нужно эти переменные сначала помещать в массив <code>$arVariables</code>, чтобы потом передать их простым компонентам:\r\n</p>\r\n[php]\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/section.php\r\n */\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.section\',\r\n    \'\',\r\n    array(\r\n        /*...*/\r\n        \'ELEMENT_COUNT\' => $arResult[\'VARIABLES\'][\'count\'],\r\n        /*...*/\r\n    )\r\n);\r\n[/php]\r\n<p>\r\nВедь можно просто в <code>local/components/demo/iblock/templates/.default/section.php</code> написать\r\n</p>\r\n[php]\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/section.php\r\n */\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.section\',\r\n    \'\',\r\n    array(\r\n        /*...*/\r\n        \'ELEMENT_COUNT\' => $_REQUEST[\'count\'],\r\n        /*...*/\r\n    )\r\n);\r\n[/php]\r\n\r\n<p>\r\n<strong>3. С псевдонимами переменных</strong> тоже не очень понятно. Зачем вообще было огород городить? Сейчас мы делаем так\r\n</p>\r\n[php]\r\n/*\r\n * Файл local/components/demo/iblock/.parameters.php\r\n */\r\n$arComponentParameters = array(\r\n    \'GROUPS\' => array(/*...*/),\r\n    \'PARAMETERS\' => array(\r\n        /*...*/\r\n        \'VARIABLE_ALIASES\' => array(\r\n            \'SECTION_ID\' => array(\'NAME\' => \'Идентификатор раздела\'),\r\n            \'SECTION_CODE\' => array(\'NAME\' => \'Символьный код раздела\'),\r\n            \'ELEMENT_ID\' => array(\'NAME\' => \'Идентификатор элемента\'),\r\n            \'ELEMENT_CODE\' => array(\'NAME\' => \'Символьный код элемента\'),\r\n        ),\r\n        /*...*/\r\n    )\r\n);\r\n[/php]\r\n<p>\r\nЕсли мы зададим псевдонимы <code>SID</code>, <code>SCODE</code>, <code>EID</code>, <code>ECODE</code>, после нажатия кнопки «Сохранить» в визуальном редакторе, Битрикс сформирует вызов компонента\r\n<p>\r\n[phtml]\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Статьи о домашних животных\");\r\n?>\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"demo:iblock\",\r\n    \"\",\r\n    array(\r\n        /*...*/\r\n        \"VARIABLE_ALIASES\" => array(\r\n            \"ELEMENT_CODE\" => \"ECODE\",\r\n            \"ELEMENT_ID\" => \"EID\",\r\n            \"SECTION_CODE\" => \"SCODE\",\r\n            \"SECTION_ID\" => \"SID\"\r\n        ),\r\n        /*...*/\r\n    )\r\n);\r\n?>\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\");\r\n?>\r\n[/phtml]\r\n<p>\r\nДальше мы восстанавливаем истинные переменные, чтобы передать их при вызове простых компонентов:\r\n</p>\r\n[php]\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/element.php\r\n */\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.element\',\r\n    \'\',\r\n    array(\r\n        /*...*/\r\n        \'ELEMENT_ID\' => $arResult[\'VARIABLES\'][\'ELEMENT_ID\'],     // идентификатор элемента инфоблока\r\n        \'ELEMENT_CODE\' => $arResult[\'VARIABLES\'][\'ELEMENT_CODE\'], // символьный код элемента инфоблока\r\n        /*...*/\r\n    ),\r\n    $component\r\n);\r\n[/php]\r\n[php]\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/section.php\r\n */\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.section\',\r\n    \'\',\r\n    array(\r\n        /*...*/\r\n        \'SECTION_ID\' => $arResult[\'VARIABLES\'][\'SECTION_ID\'],     // идентификатор раздела инфоблока\r\n        \'SECTION_CODE\' => $arResult[\'VARIABLES\'][\'SECTION_CODE\'], // символьный код раздела инфоблока\r\n        /*...*/\r\n    ),\r\n    $component\r\n);\r\n[/php]\r\n<p>\r\nНо если мы удалим <code>VARIABLE_ALIASES</code> из <code>$arComponentParameters[\'PARAMETERS\']</code>, а вместо этого добавим\r\n</p>\r\n[php]\r\n/*\r\n * Файл local/components/demo/iblock/.parameters.php\r\n */\r\n$arComponentParameters = array(\r\n    \'GROUPS\' => array(/*...*/),\r\n    \'PARAMETERS\' => array(\r\n        /*...*/\r\n        \'SECTION_ID\' => array( // идентификатор раздела\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Идентификатор раздела\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'={$_REQUEST[\"SID\"]}\',\r\n        ),\r\n        \'SECTION_CODE\' => array( // символьный код раздела\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Символьный код раздела\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'={$_REQUEST[\"SCODE\"]}\',\r\n        ),\r\n        \'ELEMENT_ID\' => array( // идентификатор элемента\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Идентификатор элемента\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'={$_REQUEST[\"EID\"]}\',\r\n        ),\r\n        \'ELEMENT_CODE\' => array( // символьный код элемента\r\n            \'PARENT\' => \'BASE\',\r\n            \'NAME\' => \'Символьный код элемента\',\r\n            \'TYPE\' => \'STRING\',\r\n            \'DEFAULT\' => \'={$_REQUEST[\"ECODE\"]}\',\r\n        ),\r\n        /*...*/\r\n    )\r\n);\r\n[/php]\r\n<p>\r\nпосле нажатия кнопки «Сохранить» в визуальном редакторе, Битрикс сформирует такой вызов компонента\r\n</p>\r\n[phtml]\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Статьи о домашних животных\");\r\n?>\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"demo:iblock\",\r\n    \"\",\r\n    array(\r\n        /*...*/\r\n        \"ELEMENT_ID\" => $_REQUEST[\"EID\"],\r\n        \"ELEMENT_CODE\" => $_REQUEST[\"ECODE\"],\r\n        \"SECTION_CODE\" => $_REQUEST[\"SCODE\"],\r\n        \"SECTION_ID\" => $_REQUEST[\"SID\"],\r\n        /*...*/\r\n    )\r\n);\r\n?>\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\");\r\n?>\r\n[/phtml]\r\n<p>\r\nТо тем самым получим соответствие\r\n</p>\r\n[php]\r\n$arParams[\'SECTION_ID\'] = $_REQUEST[\'SID\']\r\n$arParams[\'SECTION_CODE\'] = $_REQUEST[\'SCODE\']\r\n$arParams[\'ELEMENT_ID\'] = $_REQUEST[\'EID\']\r\n$arParams[\'ELEMENT_CODE\'] = $_REQUEST[\'ECODE\']\r\n[/php]\r\n<p>\r\nА при вызове простых компонетов напишем:\r\n</p>\r\n[php]\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/element.php\r\n */\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.element\',\r\n    \'\',\r\n    array(\r\n        /*...*/\r\n        \'ELEMENT_ID\' => $arParams[\'ELEMENT_ID\'],     // идентификатор элемента инфоблока\r\n        \'ELEMENT_CODE\' => $arParams[\'ELEMENT_CODE\'], // символьный код элемента инфоблока\r\n        /*...*/\r\n    ),\r\n    $component\r\n);\r\n[/php]\r\n[php]\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/section.php\r\n */\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.section\',\r\n    \'\',\r\n    array(\r\n        /*...*/\r\n        \'SECTION_ID\' => $arParams[\'SECTION_ID\'],     // идентификатор раздела инфоблока\r\n        \'SECTION_CODE\' => $arParams[\'SECTION_CODE\'], // символьный код раздела инфоблока\r\n        /*...*/\r\n    ),\r\n    $component\r\n);\r\n[/php]\r\n\r\n<h3>В режиме с поддержкой ЧПУ</h3>\r\n<p>\r\n<strong>1. Зачем нужна переменная</strong> <code>$arDefaultVariableAliases404</code>? В режиме поддержки ЧПУ псевдонимы переменных через визуальный редактор вовсе передать нельзя, они не попадают в код вызова компонента. Определяя эту переменную, мы «зашиваем» в код компонента псевдонимы, которые администратор сайта не сможет переопределить. Только программист сможет дописать в код вызова компонента параметр <code>VARIABLE_ALIASES</code>.\r\n</p>\r\n<p>\r\n<strong>2. Зачем нужна переменная</strong> <code>$arComponentVariables</code> — та же проблема, что и для режима без поддержки ЧПУ. Зачем наводить тень на плетень с передачей значений из <code>$_REQUEST</code> в <code>$arVariables</code>, а потом с передачей значений из <code>$arVariables</code> в простой компонент? Сейчас мы делаем так\r\n</p>\r\n[php]\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/section.php\r\n */\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.section\',\r\n    \'\',\r\n    array(\r\n        /*...*/\r\n        \'ELEMENT_COUNT\' => $arResult[\'VARIABLES\'][\'count\'],\r\n        /*...*/\r\n    )\r\n);\r\n[/php]\r\n<p>\r\nА можно просто в <code>local/components/demo/iblock/templates/.default/section.php</code> написать\r\n</p>\r\n[php]\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/section.php\r\n */\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.section\',\r\n    \'\',\r\n    array(\r\n        /*...*/\r\n        \'ELEMENT_COUNT\' => $_REQUEST[\'count\'],\r\n        /*...*/\r\n    )\r\n);\r\n[/php]\r\n<p>\r\n<strong>3. С псевдонимами переменных</strong> еще более непонятно, чем в режиме без ЧПУ. Визуальный редактор при включении режима ЧПУ формирует вызов компонента вообще без параметра <code>VARIABLE_ALIASES</code>:\r\n</p>\r\n[php]\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Статьи о домашних животных\");\r\n?>\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"demo:iblock\",\r\n    \"\",\r\n    array(\r\n        /*...*/\r\n        \"SEF_MODE\" => \"Y\",\r\n        \"SEF_URL_TEMPLATES\" => array(\r\n            \"element\"=>\"item/id/#ELEMENT_ID#/\",\r\n            \"section\"=>\"category/id/#SECTION_ID#/\",\r\n            \"popular\"=>\"\",\r\n        ),\r\n        /*...*/\r\n    )\r\n);\r\n?>\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\");\r\n?>\r\n[/php]\r\n<p>\r\nПотому что переменные мы получаем из шаблона пути <code>SEF_URL_TEMPLATES</code>. «Восстановить» мы можем только переменные из <code>QUERY_STRING</code>, если запрошена страница типа\r\n</p>\r\n[code]\r\nhttp://server.com/test/category/id/28/?count=3\r\n[/code]\r\n<p>\r\nЗдесь из шаблона пути будет получена переменная <code>SECTION_ID=28</code>. Хитрыми манипуляциями мы можем из <code>$_REQUEST[\'count\']</code> сделать <code>$arVariables[\'ELEMENT_COUNT\']</code>, чтобы в дальнейшем передать эту переменную простому компоненту:\r\n</p>\r\n[php]\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/section.php\r\n */\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.section\',\r\n    \'\',\r\n    array(\r\n        /*...*/\r\n        \'ELEMENT_COUNT\' => $arResult[\'VARIABLES\'][\'ELEMENT_COUNT\'] ?: $arParams[\'SECTION_ELEMENT_COUNT\'],\r\n        /*...*/\r\n    )\r\n);\r\n[/php]\r\n<p>\r\nА могли бы сделать просто, не связываясь с псевдонимами\r\n</p>\r\n[php]\r\n/*\r\n * Файл local/components/demo/iblock/templates/.default/section.php\r\n */\r\n$APPLICATION->IncludeComponent(\r\n    \'demo:iblock.section\',\r\n    \'\',\r\n    array(\r\n        /*...*/\r\n        \'ELEMENT_COUNT\' => $_REQUEST[\'count\'] ?: $arParams[\'SECTION_ELEMENT_COUNT\'],\r\n        /*...*/\r\n    )\r\n);\r\n[/php]\r\n<p>\r\n<strong>4. Зачем нужна переменная</strong> <code>$arDefaultUrlTemplates404</code>, если она перезаписывается значениями из <code>$arParams[\'SEF_URL_TEMPLATES\']</code>? Если только в настройках компонента вовсе убрать возможность влиять на шаблоны URL, а прописывать их в <code>component.php</code>. Но тогда изменить это сможет только программист, а администратор сайта никак на это повлиять не сможет.\r\n</p>\r\n\r\n<div class=\"post-scriptum\">\r\n<p>\r\nВся эта тема с псевдонимами переменных выглядит надуманной. Мне представляется, что это последствия неправильного решения когда-то давным-давно. И теперь это сохраняется в компонентах скорее по привычке, чем по необходимости.\r\n</p>\r\n<p>\r\nИ в этом весь Битрикс — бессмысленный и беспощадный. Код, написанный 10-15-20 лет назад, бездумно копируется из одного компонета в другой. Хотя без большинства переменных, о которых я написал в заключении, можно обойтись. И это бы сильно упростило код, сделало его более прозрачным для программиста.\r\n</p>\r\n</div>\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"/files/blog/196/demo.zip\">Скачать исходный код компонента</a></li>\r\n</ul>','2018-09-29 13:39:46',1),(197,17,'Битрикс. Аналоги стандартных PHP-функций','','','BX_UTF, JSON, Json::decode, Json::encode, PHP, String::htmlEncode, ToLower, ToUpper, Web-разработка, htmlspecialcharsbx, Битрикс, Кодировка, Константа, Функция','В Битрикс есть много аналогов стандартных функций php, которые, на первый взгляд, могут показаться излишними. Но, как правило, все такие функции имеют какие-то важные отличия. Многие из них сделаны для обеспечения совместимости между серверами с различными настройками, в т.ч. для обеспечения безотказной работы в разных кодировках.','<p>\r\nВ Битрикс есть много аналогов стандартных функций php, которые, на первый взгляд, могут показаться излишними. Но, как правило, ничего не делается без причины, и все такие функции имеют какие-то важные отличия. Многие из них сделаны для обеспечения совместимости между серверами с различными настройками, в т.ч. для обеспечения безотказной работы в разных кодировках. И, если на рядовом сайте бывает проще и надежнее использовать стандартные функции, то при написании модулей их использование часто может спасти от серьезных ошибок на конфигурациях, отличных от вашей тестовой. \r\n</p>\r\n\r\n<h3>Функция htmlspecialchars()</h3>\r\n<p>\r\nАналоги в Битрикс:\r\n</p>\r\n[php]\r\n\\Bitrix\\Main\\Text\\String::htmlEncode()\r\n[/php]\r\n[php]\r\nhtmlspecialcharsbx()\r\n[/php]\r\n<p>\r\nФункция <code>htmlspecialchars()</code> предназначена для преобразования специальных символов (<code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&quot;</code>) в HTML-сущности (<code>&amp;amp;</code>, <code>&amp;lt;</code>, <code>&amp;gt;</code>, <code>&amp;quot;</code>). После этого эти спец.символы можно использовать в HTML-коде, они больше не будут иметь особого значения. С выходом PHP версии 5.4 изменилось значение по умолчанию третьего параметра. Дефолтным значением стала кодировка UTF-8.\r\n</p>\r\n<p>\r\nДля Битрикс это стало проблемой по той причине, что если передавать строку с нелатинскими символами в иной кодировке, не передавая параметр кодировки, то функция возвращала пустую строку. Проблема ощутимая, т.к. в системе данная функция используется довольно часто. Поэтому была добавлена новая функция <code>htmlspecialcharsbx()</code> в главный модуль начиная с версии 11.5.9. Новая функция работает на основе все той же <code>htmlspecialchars()</code>:\r\n</p>\r\n[php]\r\nfunction htmlspecialcharsbx($string, $flags = ENT_COMPAT){\r\n    return htmlspecialchars($string, $flags, (defined(\"BX_UTF\") ? \"UTF-8\" : \"ISO-8859-1\"));\r\n}\r\n[/php]\r\n[php]\r\nclass String {\r\n    public static function htmlEncode($string, $flags = ENT_COMPAT) {\r\n        return htmlspecialchars($string, $flags, (defined(\"BX_UTF\") ? \"UTF-8\" : \"ISO-8859-1\"));\r\n    }\r\n}\r\n[/php]\r\n<p>\r\nТаким образом, если константа <code>BX_UTF</code> была определена перед обращением к функции, то будет использоваться кодировка UTF-8, в противном случае — ISO-8859-1.\r\n\r\n<h3>Функции json_encode() и json_decode()</h3>\r\n<p>\r\nАналоги в Битрикс:\r\n</p>\r\n[php]\r\n\\Bitrix\\Main\\Web\\Json::encode()\r\n[/php]\r\n[php]\r\n\\Bitrix\\Main\\Web\\Json::decode()\r\n[/php]\r\n<p>\r\nФункции <code>json_encode()</code> и <code>json_decode()</code> пребразуют массив PHP в строку json-формата и обратно, работают только с кодировкой UTF-8. Заставить их работать с кодировкой windows-1251 — не самая легкая задача. Методы <code>Json::encode()</code> и <code>Json::decode()</code> решают данную проблему. А т.к. сейчас большинство сайтов работают на технологии AJAX, при написании модулей они позволят отказаться от изобретения велосипеда. \r\n</p>\r\n\r\n<h3>Функции strtoupper() и strtolower()</h3>\r\n<p>\r\nАналоги в Битрикс:\r\n</p>\r\n[php]\r\nToUpper()\r\n[/php]\r\n[php]\r\nToLower()\r\n[/php]\r\n<p>\r\nФункции <code>strtoupper()</code> и <code>strtolower()</code> преобразуют строку к верхнему или нижнему регистру соответственно, но не работают с русским текстом в кодировке UTF-8. А функции Битрикс <code>ToUpper()</code> и <code>ToLower()</code> — работают.\r\n</p>','2018-10-03 18:00:17',1),(198,11,'Утилита командной строки Wget','','','CLI, Cookie, FTP, HTTP, HTTPS, Linux, POST, Web-разработка, Windows, wget, Форма','GNU Wget — консольная программа для загрузки файлов по сети. Поддерживает протоколы HTTP, FTP и HTTPS, а также работу через HTTP прокси-сервер. Программа включена почти во все дистрибутивы Linux. Утилита разрабатывалась для медленных соединений, поэтому она поддерживает докачку файлов при обрыве соединения.','<p>\r\nGNU Wget — консольная программа для загрузки файлов по сети. Поддерживает протоколы HTTP, FTP и HTTPS, а также работу через HTTP прокси-сервер. Программа включена почти во все дистрибутивы Linux. Утилита разрабатывалась для медленных соединений, поэтому она поддерживает докачку файлов при обрыве соединения.\r\n</p>\r\n<p>\r\nДля работы с Wget под Windows, переходим по <a href=\"https://eternallybored.org/misc/wget/\">ссылке</a> и скачиваем файл <code>wget.exe</code>. Создаем директорию <code>C:\\Program Files\\Wget-Win64</code> и размещаем в ней скачанный файл. Для удобства работы добавляем в переменную окружения <code>PATH</code> путь до исполняемого файла.\r\n</p>\r\n<p>\r\nДавайте попробуем что-нибудь скачать, скажем дистрибутив Apache под Windows:\r\n</p>\r\n[cli]\r\n> wget https://home.apache.org/~steffenal/VC15/binaries/httpd-2.4.35-win64-VC15.zip\r\n--2018-09-14 10:34:09--  https://home.apache.org/~steffenal/VC15/binaries/httpd-2.4.35-win64-VC15.zip\r\nResolving home.apache.org (home.apache.org)... 163.172.16.173\r\nConnecting to home.apache.org (home.apache.org)|163.172.16.173|:443... connected.\r\nHTTP request sent, awaiting response... 200 OK\r\nLength: 17856960 (17M) [application/zip]\r\nSaving to: \'httpd-2.4.35-win64-VC15.zip\'\r\n\r\nhttpd-2.4.35-win64-VC15.zip   100%[=================================================>]  17,03M  8,50MB/s    in 2,0s\r\n\r\n2018-09-14 10:34:12 (8,50 MB/s) - \'httpd-2.4.35-win64-VC15.zip\' saved [17856960/17856960]\r\n[/cli]\r\n<p>\r\nЕсли утилита ругается на сертификаты при скачивании по HTTPS, нужно использовать дополнительную опцию <code>--no-check-certificate</code>.\r\n\r\n<h2>Примеры</h2>\r\n<p>\r\nЗагрузка всех URL, указанных в файле (каждая ссылка с новой строки):\r\n<p>\r\n[cli]\r\n> wget -i download.txt\r\n[/cli]\r\n<p>\r\nСкачивание файлов в указанный каталог:\r\n</p>\r\n[cli]\r\n> wget -P /path/for/save ftp://ftp.example.org/image.iso\r\n[/cli]\r\n<p>\r\nСкачивание файла <code>file.zip</code> и сохранение под именем <code>archive.zip</code>:\r\n</p>\r\n[cli]\r\n> wget -O archive.zip http://example.com/file.zip\r\n[/cli]\r\n<p>\r\nПродолжить загрузку ранее не полностью загруженного файла:\r\n</p>\r\n[cli]\r\n> wget -c http://example.org/image.iso\r\n[/cli]\r\n<p>\r\nВывод заголовков HTTP серверов и ответов FTP серверов:\r\n</p>\r\n[cli]\r\n> wget -S http://example.org/\r\n[/cli]\r\n<p>\r\nСкачать содержимое каталога <code>archive</code> и всех его подкаталогов, при этом не поднимаясь по иерархии каталогов выше:\r\n</p>\r\n[cli]\r\n> wget -r --no-parent http://example.org/some/archive/\r\n[/cli]\r\n<p>\r\nИспользование имени пользователя и пароля на FTP/HTTP:\r\n</p>\r\n[cli]\r\n> wget --user=login --password=password ftp://ftp.example.org/image.iso\r\n[/cli]\r\n[cli]\r\n> wget ftp://login:password@ftp.example.org/image.iso\r\n[/cli]\r\n<p>\r\nОтправить POST-запрос в формате <code>application/x-www-form-urlencoded</code>:\r\n</p>\r\n[cli]\r\n> wget --post-data=\"user=evgeniy&password=qwerty\" http://example.org/auth/\r\n[/cli]\r\n<p>\r\nСохранение <code>cookie</code> в файл <code>cookie.txt</code> для дальнейшей отправки серверу:\r\n[cli]\r\n> wget --save-cookie cookie.txt http://example.org/\r\n[/cli]\r\n<p>\r\nСохраненный файл <code>cookie.txt</code>:\r\n</p>\r\n[code]\r\n# HTTP cookie file.\r\n# Generated by Wget on 2018-09-14 11:40:37.\r\n# Edit at your own risk.\r\n\r\nexample.org    FALSE    /    FALSE    1570196437    visitor    71f61d2a01de1394f60120c691a52c56\r\n[/code]\r\n<p>\r\nОтправка <code>cookie</code>, сохраненных ранее в файле <code>cookie.txt</code>:\r\n</p>\r\n[cli]\r\n> wget --load-cookie cookie.txt http://example.org/\r\n[/cli]\r\n<p>\r\nОтправка заголовков:\r\n</p>\r\n[cli]\r\n> wget --header=\"Accept-Language: ru-RU,ru;q=0.9\" --header=\"Cookie: PHPSESSID=.....\" http://example.org/\r\n[/cli]\r\n<p>\r\nСправка по утилите:\r\n</p>\r\n[cli]\r\n> wget -h\r\nGNU Wget 1.11.4, программа для загрузки файлов из сети в автономном режиме.\r\nИспользование: wget [ОПЦИЯ]... [URL]...\r\n[/cli]\r\n[code]\r\n[grn]Запуск:[/grn]\r\n  -V,  --version          вывод версии Wget и выход.\r\n  -h,  --help             вывод этой справки.\r\n  -b,  --background       после запуска перейти в фоновый режим.\r\n  -e,  --execute=КОМАНДА  выполнить команду в стиле .wgetrc.\r\n\r\n[grn]Журналирование и входной файл:[/grn]\r\n  -o,  --output-file=ФАЙЛ    записывать сообщения в ФАЙЛ.\r\n  -a,  --append-output=ФАЙЛ  дописывать сообщения в конец ФАЙЛА.\r\n  -d,  --debug               вывод большого количества отладочной информации.\r\n  -q,  --quiet               молча (без выходных данных).\r\n  -v,  --verbose             подробный вывод (по умолчанию).\r\n  -nv, --no-verbose          отключение подробного режима, но не полностью.\r\n  -i,  --input-file=ФАЙЛ     загрузка URL-ов, найденных в ФАЙЛЕ.\r\n  -F,  --force-html          считать, что входной файл - HTML.\r\n  -B,  --base=URL            добавление URL в начало относительных ссылок в файле -F -i.\r\n\r\n[grn]Загрузка:[/grn]\r\n  -t,  --tries=ЧИСЛО              установить ЧИСЛО повторных попыток (0 без ограничения).\r\n       --retry-connrefused        повторять, даже если в подключении отказано.\r\n  -O,  --output-document=ФАЙЛ     записывать документы в ФАЙЛ.\r\n  -nc, --no-clobber               пропускать загрузки, которые приведут к загрузке уже существующих файлов.\r\n  -c,  --continue                 возобновить загрузку частично загруженного файла.\r\n       --progress=ТИП             выбрать тип индикатора выполнения.\r\n  -N,  --timestamping             не загружать повторно файлы, только если они не новее, чем локальные.\r\n  -S,  --server-response          вывод ответа сервера.\r\n       --spider                   ничего не загружать.\r\n  -T,  --timeout=СЕКУНДЫ          установка значений всех тайм-аутов в СЕКУНДЫ.\r\n       --dns-timeout=СЕК          установка тайм-аута поиска в DNS в СЕК.\r\n       --connect-timeout=СЕК      установка тайм-аута подключения в СЕК.\r\n       --read-timeout=СЕК         установка тайм-аута чтения в СЕК.\r\n  -w,  --wait=СЕКУНДЫ             пауза в СЕКУНДАХ между загрузками.\r\n       --waitretry=СЕКУНДЫ        пауза в 1..СЕКУНДЫ между повторными попытками загрузки.\r\n       --random-wait              пауза в 0...2*WAIT секунд между загрузками.\r\n       --no-proxy                 явно выключить прокси.\r\n  -Q,  --quota=ЧИСЛО              установить величину квоты загрузки в ЧИСЛО.\r\n       --bind-address=АДРЕС       привязка к АДРЕСУ (имя хоста или IP) локального хоста.\r\n       --limit-rate=СКОРОСТЬ      ограничение СКОРОСТИ загрузки.\r\n       --no-dns-cache             отключение кэширования поисковых DNS-запросов.\r\n       --restrict-file-names=ОС   ограничение на символы в именах файлов, использование которых допускает ОС.\r\n       --ignore-case              игнорировать регистр при сопоставлении файлов и/или каталогов.\r\n  -4,  --inet4-only               подключаться только к адресам IPv4.\r\n  -6,  --inet6-only               подключаться только к адресам IPv6.\r\n       --prefer-family=СЕМЕЙСТВО  подключаться сначала к адресам указанного семейства, может быть IPv6, IPv4 или ничего.\r\n       --user=ПОЛЬЗОВАТЕЛЬ        установить и ftp- и http-пользователя в ПОЛЬЗОВАТЕЛЬ.\r\n       --password=ПАРОЛЬ          установить и ftp- и http-пароль в ПАРОЛЬ.\r\n\r\n[grn]Каталоги:[/grn]\r\n  -nd, --no-directories            не создавать каталоги.\r\n  -x,  --force-directories         принудительно создавать каталоги.\r\n  -nH, --no-host-directories       не создавать каталоги как на хосте.\r\n       --protocol-directories      использовать имя протокола в каталогах.\r\n  -P,  --directory-prefix=ПРЕФИКС  сохранять файлы в ПРЕФИКС/...\r\n       --cut-dirs=ЧИСЛО            игнорировать ЧИСЛО компонентов удалённого каталога.\r\n\r\n[grn]Опции HTTP:[/grn]\r\n       --http-user=ПОЛЬЗОВАТЕЛЬ   установить http-пользователя в ПОЛЬЗОВАТЕЛЬ.\r\n       --http-password=ПАРОЛЬ     установить http-пароль в ПАРОЛЬ.\r\n       --no-cache                 отвергать кэшированные сервером данные.\r\n  -E,  --html-extension           сохранять HTML-документы с расширением .html.\r\n       --ignore-length            игнорировать поле заголовка Content-Length.\r\n       --header=СТРОКА            вставить СТРОКУ между заголовками.\r\n       --max-redirect             максимально допустимое число перенаправлений на страницу.\r\n       --proxy-user=ПОЛЬЗОВАТЕЛЬ  установить ПОЛЬЗОВАТЕЛЯ в качестве имени пользователя для прокси.\r\n       --proxy-password=ПАРОЛЬ    установить ПАРОЛЬ в качестве пароля для прокси.\r\n\r\n       --referer=URL           включить в HTTP-запрос заголовок Referer: URL.\r\n       --save-headers          сохранять HTTP-заголовки в файл.\r\n  -U,  --user-agent=АГЕНТ      идентифицировать себя как АГЕНТ вместо Wget/ВЕРСИЯ.\r\n       --no-http-keep-alive    отключить поддержание активности HTTP (постоянные подключения).\r\n       --no-cookies            не использовать кукисы.\r\n       --load-cookies=ФАЙЛ     загрузить кукисы из ФАЙЛА перед сеансом.\r\n       --save-cookies=ФАЙЛ     сохранить кукисы в ФАЙЛ после сеанса.\r\n       --keep-session-cookies  загрузить и сохранить кукисы сеанса (непостоянные).\r\n       --post-data=СТРОКА      использовать метод POST; отправка СТРОКИ в качестве данных.\r\n       --post-file=ФАЙЛ        использовать метод POST; отправка содержимого ФАЙЛА.\r\n       --content-disposition   Учитывать заголовок Content-Disposition при выборе имён для\r\n                               локальных файлов (ЭКСПЕРИМЕНТАЛЬНЫЙ).\r\n       --auth-no-challenge     Отправить базовые данные аутентификации HTTP\r\n                               не дожидаясь ответа от сервера.\r\n\r\n[grn]Опции HTTPS (SSL/TLS):[/grn]\r\n       --secure-protocol=ПР    выбор безопасного протокола: auto, SSLv2, SSLv3 или TLSv1.\r\n       --no-check-certificate  не проверять сертификат сервера.\r\n       --certificate=FILE      файл сертификата пользователя.\r\n       --certificate-type=ТИП  тип сертификата пользователя: PEM или DER.\r\n       --private-key=ФАЙЛ      файл секретного ключа.\r\n       --private-key-type=ТИП  тип секретного ключа: PEM или DER.\r\n       --ca-certificate=ФАЙЛ   файл с набором CA.\r\n       --ca-directory=КАТ      каталог, в котором хранится список CA.\r\n       --random-file=ФАЙЛ      файл со случайными данными для SSL PRNG.\r\n       --egd-file=ФАЙЛ         файл, определяющий сокет EGD со случайными данными.\r\n\r\n[grn]Опции FTP:[/grn]\r\n       --ftp-user=ПОЛЬЗОВАТЕЛЬ  установить ftp-пользователя в ПОЛЬЗОВАТЕЛЬ.\r\n       --ftp-password=ПАРОЛЬ    установить ftp-пароль в ПАРОЛЬ.\r\n       --no-remove-listing      не удалять файлы файлы .listing.\r\n       --no-glob                выключить маски для имён файлов FTP.\r\n       --no-passive-ftp         отключить \"пассивный\" режим передачи.\r\n       --retr-symlinks          при рекурсии загружать файлы по ссылкам (не каталоги).\r\n       --preserve-permissions   сохранять права доступа удалённых файлов.\r\n\r\n[grn]Рекурсивная загрузка:[/grn]\r\n  -r,  --recursive         включение рекурсивной загрузки.\r\n  -l,  --level=ЧИСЛО       глубина рекурсии (inf и 0 - бесконечность).\r\n       --delete-after      удалять локальные файлы после загрузки.\r\n  -k,  --convert-links     делать ссылки локальными в загруженном HTML.\r\n  -K,  --backup-converted  перед преобразованием файла X делать резервную копию X.orig.\r\n  -m,  --mirror            короткая опция, эквивалентная -N -r -l inf --no-remove-listing.\r\n  -p,  --page-requisites   загрузить все изображения и проч., необходимые для отображения HTML-страницы.\r\n       --strict-comments   включить строгую (SGML) обработку комментариев HTML.\r\n\r\n[grn]Разрешения/запреты при рекурсии:[/grn]\r\n  -A,  --accept=СПИСОК               список разрешённых расширений, разделённых запятыми.\r\n  -R,  --reject=СПИСОК               список запрещённых расширений, разделённых запятыми.\r\n  -D,  --domains=СПИСОК              список разрешённых доменов, разделённых запятыми.\r\n       --exclude-domains=СПИСОК      список запрещённых доменов, разделённых запятыми.\r\n       --follow-ftp                  следовать по ссылкам FTP в HTML-документах.\r\n       --follow-tags=СПИСОК          список используемых тегов HTML, разделённых запятыми.\r\n       --ignore-tags=СПИСОК          список игнорируемых тегов HTML, разделённых запятыми.\r\n  -H,  --span-hosts                  заходить на чужие хосты при рекурсии.\r\n  -L,  --relative                    следовать только по относительным ссылкам.\r\n  -I,  --include-directories=СПИСОК  список разрешённых каталогов.\r\n  -X,  --exclude-directories=СПИСОК  список исключаемых каталогов.\r\n  -np, --no-parent                   не подниматься в родительский каталог.\r\n[/code]\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"https://htmlweb.ru/other/wget.php\">WGet — программа для загрузки файлов</a></li>\r\n</ul>','2018-09-14 12:58:44',1),(203,17,'Битрикс. Хлебные крошки','','','CMS, Web-разработка, Битрикс, Иерархия, Навигация, РазделСайта, СтраницаСайта, ХлебныеКрошки, ШаблонСайта, chain_template.php, $sChainTemplate, AddChainItem, ShowNavChain, GetNavChain, NOT_SHOW_NAV_CHAIN, $sChainProlog, $sChainBody, $sChainEpilog, $strChain, НавигационнаяЦепочка','Цепочка навигации — последовательный список ссылок на разделы и страницы сайта, который показывает уровень «погружения» текущей страницы в структуру сайта. Значения, подставляемые в навигационную цепочку, могут быть заданы как для каждого раздела, так и для отдельного документа.','<p>\r\nЦепочка навигации — последовательный список ссылок на разделы и страницы сайта, который показывает уровень «погружения» текущей страницы в структуру сайта. Значения, подставляемые в навигационную цепочку, могут быть заданы как для каждого раздела, так и для отдельного документа.\r\n</p>\r\n<p>\r\nПо умолчанию в Битрикс используется механизм управления названиями пунктов навигационной цепочки через свойства разделов. Заголовок раздела сайта задается в служебном файле <code>.section.php</code>, который находится в соответствующем разделе. В данном файле могут быть использованы следующие переменные:\r\n</p>\r\n<ul>\r\n  <li><code>$sSectionName</code> — заголовок раздела;</li>\r\n  <li><code>$sChainTemplate</code> — <strong>абсолютный путь</strong> к шаблону навигационной цепочки (данная переменная используется крайне редко)</li>\r\n</ul>\r\n[php]\r\n<?php\r\n$sSectionName = \"Торговый Дом Аврора\";\r\n$arDirProperties = array(\r\n    \"keywords\" => \"поставка и монтаж холодильного оборудования, холодильные камеры, камеры шоковой заморозки\",\r\n    \"description\" => \"Поставка и монтаж холодильного оборудования, холодильные камеры для магазинов и супермаркетов.\",\r\n    \"title\" => \"Поставка и монтаж холодильного оборудования супермаркетов\",\r\n    \"robots\" => \"index, follow\"\r\n);\r\n$sChainTemplate = $_SERVER[\'DOCUMENT_ROOT\'].\'/some/path/chain_template.php\';\r\n[/php]\r\n\r\n<div class=\"note\">\r\n<p>\r\nДля того, чтобы ссылка на какой-либо раздел не выводилась в навигационной цепочке сайта, нужно удалить название раздела из поля «Заголовок» в визуальном редакторе или отредактировать файл <code>.section.php</code>:\r\n</p>\r\n[php]\r\n<?php\r\n$sSectionName = \"\";\r\n$arDirProperties = array(/*...*/);\r\n[/php]\r\n</div>\r\n\r\n<h2>Управление навигационной цепочкой</h2>\r\n<p>\r\nС помощью метода <code>AddChainItem()</code> в цепочку навигации могут быть добавлены дополнительные пункты. Первым параметром задается название, которое будет показано в навигационной цепочке, вторым параметром задается ссылка для перехода:\r\n</p>\r\n[php]\r\n$APPLICATION->AddChainItem(\'Форум «Отзывы»\', \'/forum/list.php?FID=3\');\r\n[/php]\r\n<p>\r\nНекоторые пункты навигационной цепочки могут не содержать ссылки на какой-либо раздел или документ сайта, т.е. могут быть представлены в виде обычного текста (например, название текущей страницы). Такие пункты создаются путем добавления в шаблон показа навигационной цепочки следующего кода:\r\n</p>\r\n[php]\r\nif (strlen($LINK) > 0) {\r\n    $sChainBody = \'<a href=\"\'.$LINK.\'\">\'.htmlspecialchars($TITLE).\'</a>&nbsp;/ \';\r\n} else {\r\n    $sChainBody = \'<span>\'.htmlspecialchars($TITLE).\'</span>\';\r\n}\r\n[/php]\r\n<p>\r\nЧтобы выводить в навигационную цепочку название текущей страницы, необходимо вставить вызов метода <code>AddChainItem()</code> в файле <code>footer.php</code>, т.е. после вывода содержимого рабочей области.\r\n</p>\r\n[php]\r\n$APPLICATION->AddChainItem($APPLICATION->GetTitle());\r\n[/php]\r\n\r\n<div class=\"note\">\r\nОтдельные компоненты могут также добавлять в навигационную цепочку заголовок текущей страницы сайта, заголовок текущей новости или название товара каталога. Так, например, комплексный компонент <code>bitrix:news</code> последовательно добавляет в навигационную цепочку названия разделов инфоблока по мере погружения вглубь по уровням, если это установлено в его настройках.\r\n</div>\r\n\r\n<h2>Показ навигационной цепочки</h2>\r\n<p>\r\nПоказ навигационной цепочки выполняется с помощью метода <code>ShowNavChain()</code> в шаблоне сайта, в коде страницы или в коде отдельных компонентов. Метод использует технологию отложенных функций, позволяющую добавлять пункты в навигационную цепочку уже после того, как был выведен пролог сайта. \r\n<p>\r\n[php]\r\n$APPLICATION->ShowNavChain();\r\n[/php]\r\n\r\n<div class=\"note\">\r\n<p>\r\nОтложенные функции — технология, позволяющая задавать заголовок страницы, пункты навигационной цепочки, CSS стили, дополнительные кнопки в панель управления, мета-теги и т.п. с помощью функций, используемых непосредственно в теле страницы. Соответствующие результаты работы этих функций выводятся в прологе, то есть выше по коду, чем они были заданы.\r\n</p>\r\n<p>\r\nТехнология была создана в первую очередь для использования в компонентах, которые, как правило, выводятся в теле страницы, но при этом внутри них могут быть заданы заголовок страницы, добавлен пункт в навигационную цепочку, добавлена кнопка в панель управления и так далее. Отложенные функции нельзя использовать в файлах шаблона компонента <code>template.php</code> и <code>result_modifier.php</code> (так как результаты их выполнения кешируются).\r\n</p>\r\n</div>\r\n\r\n<p>\r\nПоказ навигационной цепочки может быть отключен на определенных страницах или в определенном разделе сайта. Управление отображением навигационной цепочки также осуществляется с помощью свойств страницы (раздела). Для этого необходимо:\r\n</p>\r\n<ul>\r\n  <li>На странице настроек модуля «Управление структурой», секция «Настройки для сайтов», создать свойство для страниц «Не показывать навигационную цепочку» с кодом <code>not_show_nav_chain</code></li>\r\n  <li>Если навигационная цепочка не должна отображаться на определенной странице или страницах какого-либо раздела, то для этой страницы или раздела нужно установить значение данного свойства равным <code>Y</code></li>\r\n</ul>\r\n<p>\r\nКроме того, значение свойства «Не показывать навигационную цепочку» может быть задано непосредственно в коде страницы с помощью метода <code>SetPageProperty()</code>: \r\n</p>\r\n[php]\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\".....\");\r\n$APPLICATION->SetPageProperty(\"description\", \".....\");\r\n$APPLICATION->SetPageProperty(\"keywords\", \".....\");\r\n// не показывать навигационную цепочку\r\n$APPLICATION->SetPageProperty(\"NOT_SHOW_NAV_CHAIN\", \"Y\");\r\n[/php]\r\n\r\n<h2>Управление шаблоном навигационной цепочки</h2>\r\n<p>\r\nАлгоритм построения цепочки навигации и формирования ее внешнего вида:\r\n</p>\r\n<ul>\r\n<li>\r\nСбор пунктов навигационной цепочки ведется начиная от корня сайта и заканчивая текущим разделом. Для каждого очередного раздела подключается файл <code>.section.php</code>. Если в данном файле будет инициализирована переменная <code>$sChainTemplate</code>, то ее значение будет использовано в качестве пути к шаблону навигационной цепочки. В процессе перебора разделов, каждое последующее значение этой переменной перетирает предыдущее.\r\n</li>\r\n<li>\r\nЕсли после сбора пунктов навигационной цепочки путь к шаблону не определён, то проверяется существование файла\r\n[code]\r\n/local/templates/текущий_шаблон/chain_template.php\r\n[/code]\r\nЕсли такой файл существует, то путь к нему и принимается за путь к шаблону навигационной цепочки, в противном случае используется значение по умолчанию\r\n[code]\r\n/local/templates/.default/chain_template.php\r\n[/code]\r\n</li>\r\n</ul>\r\n<p>\r\nШаблон навигационной цепочки при ее выводе будет подключаться каждый раз на очередном пункте цепочки. Поэтому основная его задача — обеспечить внешний вид только одного пункта цепочки.\r\n</p>\r\n<p>\r\nОсновными переменными, используемыми в шаблоне, являются:\r\n</p>\r\n<ul>\r\n  <li><code>$sChainProlog</code> — HTML код выводимый перед навигационной цепочкой</li>\r\n  <li><code>$sChainBody</code> — HTML код определяющий внешний вид одного пункта навигационной цепочки</li>\r\n  <li><code>$sChainEpilog</code> — HTML код выводимый после навигационной цепочки</li>\r\n  <li><code>$strChain</code> — HTML код всей навигационной цепочки собранный к моменту подключения шаблона</li>\r\n</ul>\r\n<p>\r\nВышепредставленные переменные будут хранить в себе HTML-код, который определит внешний вид навигационной цепочки. Также в шаблоне будут доступны следующие дополнительные переменные:\r\n</p>\r\n<ul>\r\n  <li><code>$TITLE</code> — заголовок очередного пункта навигационной цепочки</li>\r\n  <li><code>$LINK</code> — ссылка на очередном пункте навигационной цепочки</li>\r\n  <li><code>$arCHAIN</code> — копия массива элементов навигационной цепочки</li>\r\n  <li><code>$arCHAIN_LINK</code> — ссылка на массив элементов навигационной цепочки</li>\r\n  <li><code>$ITEM_COUNT</code> — количество элементов массива навигационной цепочки</li>\r\n  <li><code>$ITEM_INDEX</code> — порядковый номер очередного пункта навигационной цепочки</li>\r\n</ul>\r\n<p>\r\nПример файла шаблона навигационной цепочки <code>chain_template.php</code>:\r\n</p>\r\n[php]\r\n<?php\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$sChainProlog = \'<nav class=\"breadcrumbs\">\';\r\nif (strlen($LINK) > 0 && $arChain[count($arCHAIN)-1][\'LINK\'] != $LINK) {\r\n    // если указана ссылка, то выводим ссылку\r\n    $sChainBody = \'<a href=\"\'.$LINK.\'\">\'.htmlspecialchars($TITLE).\'</a>&nbsp;/ \';\r\n} else {\r\n    // если ссылка пустая, то выводим текст\r\n    $sChainBody = \'<span>\'.htmlspecialchars($TITLE).\'</span>\';\r\n}\r\n$sChainEpilog = \'</nav>\';\r\n[/php]','2018-10-15 14:04:37',1),(199,11,'Как работает SSL-сертификат','','','HTTP, HTTPS, HandShake, SSL, TLS, Web-разработка, Безопасность, Браузер, Клиент, Ключ, Протокол, Сервер, Сертификат, Шифрование','Любое действие в интернете — это обмен данными. Каждый раз, когда вы открываете любимый сайт, ваш компьютер отправляет запрос к нужному серверу и получает от него ответ. Обмен данными происходит по протоколу HTTP. Этот протокол не только устанавливает правила обмена информацией, но и служит транспортом для передачи данных.','<p>\r\nЛюбое действие в интернете — это обмен данными. Каждый раз, когда вы открываете любимый сайт, ваш компьютер отправляет запрос к нужному серверу и получает от него ответ. Обмен данными происходит по протоколу HTTP. Этот протокол не только устанавливает правила обмена информацией, но и служит транспортом для передачи данных.\r\n</p>\r\n<p>\r\nПри всём удобстве и популярности HTTP у него есть один недостаток: данные передаются в открытом виде и никак не защищены. На пути из точки «А» в точку «Б» информация в интернете проходит через промежуточные узлов, и, если хоть один из них находится под контролем злоумышленника, данные могут перехватить. Для установки безопасного соединения используется протокол HTTPS с поддержкой шифрования.\r\n</p>\r\n<p>\r\nВ некоторых сервисах, например, в электронных платёжных системах, защита данных исключительно важна, поэтому в них используется только HTTPS. Этот протокол также очень часто применяется и в других сервисах, которые обрабатывают приватную информацию, в том числе любые персональные данные.\r\n</p>\r\n<p>\r\nЗащиту данных в HTTPS обеспечивает криптографический протокол SSL/TLS, который шифрует передаваемую информацию. По сути этот протокол является обёрткой для HTTP. Он обеспечивает шифрование данных и делает их недоступными для просмотра посторонними. Протокол SSL/TLS хорош тем, что позволяет двум незнакомым между собой участникам сети установить защищённое соединение через незащищённый канал.\r\n</p>\r\n\r\n<h2>Принцип работы SSL-шифрования</h2>\r\n<p>\r\nВ основе любого метода шифрования лежит ключ. Ключ — это способ зашифровать или расшифровать сообщение. В работе SSL-сертификата участвуют три ключа: публичный, приватный, сеансовый.\r\n</p>\r\n<ul>\r\n  <li><strong>Публичный ключ</strong> зашифровывает сообщение. Браузер использует его, когда нужно отправить пользовательские данные серверу. Например, после того как вы ввели данные банковской карты и нажали «Оплатить». Этот ключ виден всем, браузер прикрепляет его к сообщению.</li>\r\n  <li><strong>Приватный ключ</strong> расшифровывает сообщение. Его использует сервер, когда получает сообщение от браузера. Этот ключ хранится на сервере и никогда не передаётся вместе с сообщением.</li>\r\n  <li><strong>Сеансовый ключ</strong> одновременно зашифровывает и расшифровывает сообщения. Браузер генерирует его на время, которое пользователь проводит на сайте. Стоит пользователю закрыть вкладку, сеанс закончится и ключ перестанет работать.</li>\r\n</ul>\r\n<p>\r\nПубличный и приватный ключи генерируются один раз при создании запроса на выпуск сертификата. Поэтому приватный ключ нужно хранить осторожно. Если ключ попадёт в руки другому человеку, он сможет расшифровывать сообщения, а вам придётся переустанавливать сертификат.\r\n</p>\r\n<ul>\r\n  <li>Шифрование с двумя разными ключами называют <em>асимметричным</em>. Использовать такой метод более безопасно, но медленно. Поэтому браузер и сервер используют его один раз: чтобы создать сеансовый ключ.</li>\r\n  <li>Шифрование с одним ключом называют <em>симметричным</em>. Этот метод удобен, но не так безопасен. Поэтому браузер и делает уникальный ключ для каждого сеанса вместо того, чтобы хранить его на сервере.</li>\r\n</ul>\r\n\r\n<h2>Как браузер и сервер устанавливают безопасное соединение</h2>\r\n<p>\r\nБраузер и сервер устанавливают SSL-соединение каждый раз, когда пользователь заходит на сайт. Это занимает несколько секунд во время загрузки сайта. По-английски процесс называется handshake (рукопожатие).\r\n</p>\r\n<p>\r\nКогда вы вводите адрес сайта в браузере, он спрашивает у сервера, установлен ли для сайта сертификат. В ответ сервер отправляет общую информацию об SSL-сертификате и публичный ключ. Браузер сверяет информацию со списком авторизованных центров сертификации. Такой список есть во всех популярных браузерах. Если всё в порядке, браузер генерирует сеансовый ключ, зашифровывает его публичным ключом и отправляет на сервер. Сервер расшифровывает сообщение и сохраняет сеансовый ключ. После этого между браузером и сайтом устанавливается безопасное соединение через протокол HTTPS.\r\n</p>','2018-10-01 18:14:14',1),(200,11,'HTTP cookie','','','Cookie, HTTP, HTTPS, JavaScript, PHP, Web-разработка, expire, httponly, localStorage, php.ini, secure, sessionStorage, setcookie','HTTP cookie — это небольшой фрагмент данных, отправляемый сервером браузеру пользователя, который тот должен сохранить и отсылать обратно с каждым новым запросом этому серверу. Это, в частности, позволяет узнать, с одного ли браузера пришли оба запроса (например, для аутентификации пользователя).','<p>\r\nHTTP cookie — это небольшой фрагмент данных, отправляемый сервером браузеру пользователя, который тот должен сохранить и отсылать обратно с каждым новым запросом этому серверу. Это, в частности, позволяет узнать, с одного ли браузера пришли оба запроса (например, для аутентификации пользователя). Они запоминают информацию о состоянии для протокола HTTP, который сам по себе этого делать не умеет.\r\n</p>\r\n<p>\r\nCookie используются, главным образом, для:\r\n</p>\r\n<ul>\r\n    <li>Управления сеансом (логины, корзины для интернет-магазинов)</li>\r\n    <li>Персонализации (пользовательские предпочтения)</li>\r\n    <li>Мониторинга (отслеживания поведения пользователя)</li>\r\n</ul>\r\n<p>\r\nДо недавнего времени cookie принято было использовать в качестве хранилища информации на стороне пользователя. Но из-за того, что cookie пересылаются с каждым запросом, они могут сильно снижать производительность (особенно в мобильных устройствах). Теперь качестве хранилищ данных на стороне пользователя вместо них можно использовать localStorage, sessionStorage и IndexedDB.\r\n</p>\r\n\r\n<h2>Создание cookie</h2>\r\n<p>\r\nПолучив HTTP-запрос, вместе с ответом сервер может отправить заголовок <code>Set-Cookie</code>. Cookie запоминаются браузером и посылаются серверу с каждым новым запросом. Можно задать срок действия cookie, а также срок его жизни, после которого cookie не будет отправляться. Также можно указать ограничения на путь и домен, то есть указать, в течении какого времени и к какому сайту оно отсылается.\r\n</p>\r\n\r\n<h2>Заголовки Set-Cookie и Cookie</h2>\r\n<p>\r\nЗаголовок <code>Set-Cookie</code> используется для отправки cookie с сервера на клиентское приложение (браузер). Этот заголовок с сервера дает клиенту указание сохранить cookie.\r\n</p>\r\n[code]\r\nSet-Cookie: <имя-cookie>=<значение-cookie>\r\n[/code]\r\n[code]\r\nHTTP/1.1 200 OK\r\nDate: Sun, 07 Oct 2018 13:31:17 GMT\r\nServer: Apache/2.4.34 (Win64) mod_fcgid/2.3.9\r\nX-Powered-By: PHP/7.1.10\r\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nPragma: no-cache\r\n[red]Set-Cookie: PHPSESSID=m2iut9i59p73ld1c5q9j49c6t0; path=/\r\nSet-Cookie: visitor=0d3749f09d222bea3b8f163937eb9bf1; Max-Age=31536000; path=/\r\nSet-Cookie: lastvisit=1538919655; path=/[/red]\r\nVary: Accept-Encoding\r\nContent-Encoding: gzip\r\nKeep-Alive: timeout=5, max=100\r\nConnection: Keep-Alive\r\nTransfer-Encoding: chunked\r\nContent-Type: text/html; charset=utf-8\r\n\r\n[grn]<!DOCTYPE html>\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"ru\" lang=\"ru\">\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n..........[/grn]\r\n[/code]\r\n<p>\r\nТеперь, с каждым новым запросом к серверу, при помощи заголовка <code>Cookie</code> браузер будет возвращать серверу все сохраненные ранее cookies:\r\n</p>\r\n[code]\r\nGET /catalog HTTP/1.1\r\nHost: www.server.com\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3\r\nAccept-Encoding: gzip, deflate\r\nReferer: http://www.server.com/\r\n[red]Cookie: PHPSESSID=m2iut9i59p73ld1c5q9j49c6t0; visitor=0d3749f09d222bea3b8f163937eb9bf1; lastvisit=1538919655[/red]\r\nConnection: keep-alive\r\nUpgrade-Insecure-Requests: 1\r\n[/code]\r\n\r\n<h2>Сессионные, постоянные и безопасные cookie</h2>\r\n<p>\r\n<strong>Сессионные cookie</strong>, установка которых выглядит так:\r\n</p>\r\n[code]\r\nSet-Cookie: lastvisit=1538919655\r\n[/code]\r\n<p>\r\nудаляются при закрытии клиента, то есть существуют только на протяжении текущего сеанса, поскольку атрибуты <code>Expires</code> или <code>Max-Age</code> для них не задаются.\r\n</p>\r\n<p>\r\n\r\n<p>\r\n<strong>Постоянные cookie</strong> удаляются не с закрытием клиента, а при наступлении определенной даты (атрибут <code>Expires</code>) или после определенного интервала времени (атрибут <code>Max-Age</code>):\r\n</p>\r\n[code]\r\nSet-Cookie: visitor=0d3749f09d222bea3b8f163937eb9bf1; [red]Max-Age=31536000[/red]\r\n[/code]\r\n[code]\r\nSet-Cookie: visitor=0d3749f09d222bea3b8f163937eb9bf1; [red]expires=Mon, 07-Oct-2019 13:44:02 GMT[/red]\r\n[/code]\r\n\r\n<p>\r\n<strong>Безопасные cookie</strong> отсылаются на сервер только если запрос выполняется по протоколу SSL и HTTPS. Начиная с Chrome 52 и Firefox 52, незащищенные сайты (HTTP) не могут создавать куки с флагом <code>secure</code>.\r\n</p>\r\n[code]\r\nSet-Cookie: PHPSESSID=m2iut9i59p73ld1c5q9j49c6t0; [red]Secure[/red]\r\n[/code]\r\n\r\n<p>\r\n<strong>HhtpOnly cookie</strong> не доступны из JavaScript через свойство <code>document.cookie</code> и через <code>XMLHttpRequest</code>, что помогает избежать межсайтового скриптинга (XSS). Рекомендуется устанавливать этот флаг для тех cookie, к которым не требуется обращаться через JavaScript. В частности, если куки используются только для поддержки сеанса, то в JavaScript они не нужны, так что в этом случае следует устанавливать флаг <code>HttpOnly</code>:\r\n</p>\r\n[code]\r\nSet-Cookie: PHPSESSID=m2iut9i59p73ld1c5q9j49c6t0; Secure; [red]HttpOnly[/red]\r\n[/code]\r\n\r\n<h2>Область видимости cookie</h2>\r\n<p>\r\nДирективы <code>domain</code> и <code>dath</code> определяют область видимости куки, то есть те URL, к которым куки могут отсылаться.\r\n</p>\r\n<ul>\r\n  <li>Атрибут <code>domain</code> указывает хосты, к которым отсылаться куки. Если он не задан, то по умолчанию берется доменная часть документа (но без поддоменов). Если домен указан явно, то поддомены всегда включены. Например, если задано <code>domain=server.com</code>, то куки включены и в поддоменах, например, в <code>blog.server.com</code>.</li>\r\n  <li>Атрибут <code>path</code> указывает URL, который должен быть в запрашиваемом ресурсе на момент отправки заголовка. Символ «/» интерпретируется как разделитель разделов, подразделы также включаются. Если задано <code>path=/docs</code>, то подходят и такие пути, как <code>/docs</code>, <code>/docs/web</code>, <code>/docs/web/http</code>.</li>\r\n</ul>\r\n\r\n<h2>Работа с cookie из JavaScript</h2>\r\n<p>\r\nКуки можно создавать через JavaScript при помощи свойства <code>document.cookie</code>. Если флаг <code>HttpOnly</code> не установлен, то и доступ к существующим cookies можно получить через JavaScript.\r\n</p>\r\n[js]\r\n// получить cookie\r\nconsole.log(document.cookie);\r\n[/js]\r\n[code]\r\nPHPSESSID=m2iut9i59p73ld1c5q9j49c6t0; visitor=0d3749f09d222bea3b8f163937eb9bf1; lastvisit=1538919655\r\n[/code]\r\n[js]\r\n// установить cookie\r\ndocument.cookie = \"some_name=some_value\";\r\nconsole.log(document.cookie);\r\n[/js]\r\n[code]\r\nPHPSESSID=m2iut9i59p73ld1c5q9j49c6t0; visitor=0d3749f09d222bea3b8f163937eb9bf1; lastvisit=1538919655; [red]some_name=some_value[/red]\r\n[/code]\r\n\r\n<h4>Функция getCookie()</h4>\r\n<p>\r\nСледующая функция возвращает cookie с именем <code>name</code>:\r\n</p>\r\n[js]\r\n// возвращает cookie с именем name, если есть, если нет, то undefined\r\nfunction getCookie(name) {\r\n    var matches = document.cookie.match(\r\n        new RegExp(\"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, \'\\\\$1\') + \"=([^;]*)\")\r\n    );\r\n    return matches ? decodeURIComponent(matches[1]) : undefined;\r\n}\r\n[/js]\r\n\r\n<h4>Функция setCookie()</h4>\r\n[js]\r\nfunction setCookie(name, value, options) {\r\n    options = options || {};\r\n\r\n    var expires = options.expires;\r\n\r\n    if (typeof expires == \"number\" && expires) {\r\n        var d = new Date();\r\n        d.setTime(d.getTime() + expires * 1000);\r\n        expires = options.expires = d;\r\n    }\r\n    if (expires && expires.toUTCString) {\r\n        options.expires = expires.toUTCString();\r\n    }\r\n\r\n    value = encodeURIComponent(value);\r\n\r\n    var updatedCookie = name + \"=\" + value;\r\n\r\n    for (var propName in options) {\r\n        updatedCookie += \"; \" + propName;\r\n        var propValue = options[propName];\r\n        if (propValue !== true) {\r\n            updatedCookie += \"=\" + propValue;\r\n        }\r\n    }\r\n\r\n    document.cookie = updatedCookie;\r\n}\r\n[/js]\r\n\r\n<h4>Функция deleteCookie()</h4>\r\n[js]\r\nfunction deleteCookie(name) {\r\n    // удаляем вызовом setCookie() с датой в прошлом\r\n    setCookie(\r\n        name,\r\n        \"\",\r\n        {expires: -1}\r\n    )\r\n}\r\n[/js]\r\n\r\n<h2>Работа с cookie из PHP</h2>\r\n<p>\r\nДля сохранения cookie в браузере пользователя используется функция <code>setcookie()</code>:\r\n</p>\r\n[php]\r\nbool setcookie(\r\n    string $name,\r\n    string $value,\r\n    int $expire, \r\n    string $path,\r\n    string $domain,\r\n    bool $secure,\r\n    bool $httponly\r\n);\r\n[/php]\r\n<p>\r\nМожет принимать следующие параметры:\r\n</p>\r\n<ul>\r\n  <li><code>name</code>: имя cookie, которое будет использоваться для доступа к его значению.</li>\r\n  <li><code>value</code>: значение или содержимое cookie — любой алфавитно-цифровой текст не более 4 кБайт.</li>\r\n  <li><code>expire</code> (необязательный параметр): срок действия, после которого cookie уничтожаются. Если данный параметр не установлен или равен 0, то уничтожение cookie происходит после закрытия браузера.</li>\r\n  <li><code>path</code> (необязательный параметр): путь к каталогу на сервере, для которого будут доступны cookie. Если задать «/», cookie будут доступны для всего сайта. Если задать, например, <code>/docs</code>, cookie будут доступны из этого каталога и всех его подкаталогов (<code>/docs/web</code>, <code>/docs/web/http</code>). По умолчанию значением является текущий каталог, в котором устанавливаются cookie.</li>\r\n  <li><code>domain</code> (необязательный параметр): задает домен, для которого будут доступны cookie. Если это домен второго уровня, например, <code>server.com</code>, то cookie доступны для всего сайта <code>server.com</code>, в том числе и для его поддоменов типа <code>blog.server.com</code>. Если задан поддомен <code>blog.server.com</code>, то cookie доступны только внутри этого поддомена.</li>\r\n  <li><code>secure</code> (необязательный параметр): указывает на то, что значение cookie должно передаваться по протоколу HTTPS. Если задано <code>true</code>, cookie от клиента будет передано на сервер, только если установлено защищенное соединение. По умолчанию параметр равен <code>false</code>.</li>\r\n  <li><code>httponly</code> (необязательный параметр): если равно <code>true</code>, cookie будут доступны только через HTTP протокол. То есть cookie в этом случае не будут доступны из JavaScript. По умолчанию параметр равен <code>false</code>.</li>\r\n</ul>\r\n<p>\r\nЧтобы получить cookie, можно использовать глобальный массив <code>$_COOKIE</code>. Для удаления cookie достаточно в качестве срока действия указать какое-либо время в прошлом:\r\n</p>\r\n[php]\r\nsetcookie(\'lastvisit\', \'\', time() - 3600);\r\n[/php]\r\n\r\n<div class=\"note\">\r\n<p>\r\nЧтобы к идентификатору сессии <code>PHPSESSID</code> не было доступа из JavaScript, нужно отредактировать файл <code>php.ini</code>:\r\n</p>\r\n[ini]\r\n; Name of the session (used as cookie name).\r\n; http://php.net/session.name\r\nsession.name = PHPSESSID\r\n\r\n; Whether or not to add the httpOnly flag to the cookie, which makes\r\n; it inaccessible to browser scripting languages such as JavaScript.\r\n; http://php.net/session.cookie-httponly\r\nsession.cookie_httponly = 1\r\n[/ini]\r\n<p>\r\nМожно также использовать функцию <code>ini_set()</code>, чтобы установит флаг <code>HttpOnly</code> уже во время выполнения приложения:\r\n</p>\r\n[php]\r\nini_set(\'session.cookie_httponly\', 1);\r\nsession_start();\r\n[/php]\r\n<p>\r\nЕще одни способ изменить флаг <code>HttpOnly</code> — вызов функции <code>session_set_cookie_params()</code> перед <code>session_start()</code>:\r\n</p>\r\n[php]\r\nsession_set_cookie_params(/*...*/);\r\nsession_start();\r\n[/php]\r\n</div>\r\n\r\n<div class=\"note\">\r\n<p>\r\nУстановить флаг <code>Secure</code> для <code>PHPSESSID</code> из <code>php.ini</code>:\r\n</p>\r\n[ini]\r\n; http://php.net/session.cookie-secure\r\nsession.cookie_secure = 1\r\n[/ini]\r\n<p>\r\nУстановить флаг во время работы приложения:\r\n</p>\r\n[php]\r\nini_set(\'session.cookie_secure\', 1);\r\nsession_start();\r\n[/php]\r\n[php]\r\nsession_set_cookie_params(/*...*/);\r\nsession_start();\r\n[/php]\r\n</div>','2018-10-07 17:08:49',1),(201,5,'Передача данных между вкладками браузера','','','JavaScript, Web-разработка, localStorage, Вкладка, Событие','Весьма распространенная ситуация, когда у пользователя в браузере открыты несколько страниц одного сайта в разных вкладках. Соответственно, может возникнуть ситуация, когда необходимо синхронизировать данные между этими страницами. Удобнее всего отслеживать событие storage объекта window, которое происходит в момент…','<p>\r\nВесьма распространенная ситуация, когда у пользователя в браузере открыты несколько страниц одного сайта в разных вкладках. Соответственно, может возникнуть ситуация, когда необходимо синхронизировать данные между этими страницами. Удобнее всего отслеживать событие <code>storage</code> объекта <code>window</code>, которое происходит в момент добавления, изменения или удаления элемента из <code>localStorage</code>.\r\n</p>\r\n<p>\r\nРассмотрим пример скрипта, который синхронизирует заполнение полей формы, открытой в разных вкладках браузера:\r\n</p>\r\n[html]\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n<title>Передача данных между вкладками браузера</title>\r\n<script type=\"text/javascript\" src=\"synch.js\"></script>\r\n</head>\r\n<body>\r\n    <form>\r\n        <div>\r\n            Имя <input type=\"text\" name=\"name\" id=\"name\" value=\"\" />\r\n        </div>\r\n        <div>\r\n            Почта <input type=\"text\" name=\"email\" id=\"email\" value=\"\" />\r\n        </div>\r\n        <div>\r\n            Сообщение <textarea name=\"message\" id=\"message\"></textarea>\r\n        </div>\r\n        <div>\r\n            <input type=\"submit\" name=\"submit\" value=\"Отправить\" />\r\n        </div>\r\n    </form>\r\n</body>\r\n</html>\r\n\r\n[/html]\r\n\r\n[js]\r\ndocument.addEventListener(\'DOMContentLoaded\', function() {\r\n    var name = document.getElementById(\'name\');\r\n    var email = document.getElementById(\'email\');\r\n    var message = document.getElementById(\'message\');\r\n\r\n    name.addEventListener(\'input\', function(e) {\r\n        localStorage.setItem(name.id, name.value);\r\n    });\r\n    email.addEventListener(\'input\', function(e) {\r\n        localStorage.setItem(email.id, email.value);\r\n    });\r\n    message.addEventListener(\'input\', function(e) {\r\n        localStorage.setItem(message.id, message.value);\r\n    });\r\n\r\n    window.addEventListener(\'storage\', function(event) {\r\n        /*\r\n        console.log(event.key);      // имя ключа, сохраненного в localStorage\r\n        console.log(event.oldValue); // значение ключа до изменения\r\n        console.log(event.newValue); // значение ключа после изменения\r\n        */\r\n        if (event.key == name.id) {\r\n            name.value = event.newValue;\r\n            return;\r\n        }\r\n        if (event.key == email.id) {\r\n            email.value = event.newValue;\r\n            return;\r\n        }\r\n        if (event.key == message.id) {\r\n            message.value = event.newValue;\r\n            return;\r\n        }\r\n    });\r\n});\r\n[/js]','2018-10-08 15:29:53',1),(202,6,'WebSocket сервер на PHP','','','HandShake, JavaScript, PHP, Server, Socket, Web-разработка, WebSocket, Клиент, Протокол, Сервер, Сокет','Протокол WebSocket предназначен для решения разных задач и снятия ограничений обмена данными между браузером и сервером. Он позволяет пересылать любые данные, на любой домен, безопасно и почти без лишнего сетевого трафика. Для установления соединения WebSocket клиент и сервер используют протокол, похожий на HTTP.','<p>\r\nПротокол WebSocket предназначен для решения разных задач и снятия ограничений обмена данными между браузером и сервером. Он позволяет пересылать любые данные, на любой домен, безопасно и почти без лишнего сетевого трафика. Для установления соединения WebSocket клиент и сервер используют протокол, похожий на HTTP. Клиент формирует особый HTTP-запрос, на который сервер отвечает определенным образом.\r\n</p>\r\n\r\n<h2>Простой сокет-сервер</h2>\r\n<p>\r\nВ первую очередь надо в файле <code>php.ini</code> расскомментировать строку, позволяющую работать с сокетами и перезапустить сервер:\r\n</p>\r\n[ini]\r\nextension = php_sockets.dll\r\n[/ini]\r\n<p>\r\nВот как выглядит простейший сокет-сервер:\r\n</p>\r\n[php]\r\n<?php\r\nfunction SocketServer($limit = 0) {\r\n    $starttime = time();\r\n    echo \'SERVER START\' . PHP_EOL;\r\n\r\n    echo \'Socket create...\' . PHP_EOL;\r\n    $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\r\n\r\n    if (false === $socket) {\r\n        die(\'Error: \' . socket_strerror(socket_last_error()) . PHP_EOL);\r\n    }\r\n\r\n    echo \'Socket bind...\' . PHP_EOL;\r\n    $bind = socket_bind($socket, \'127.0.0.1\', 7777); // привязываем к ip и порту\r\n    if (false === $bind) {\r\n        die(\'Error: \' . socket_strerror(socket_last_error()) . PHP_EOL);\r\n    }\r\n\r\n    echo \'Set options...\' . PHP_EOL;\r\n    // разрешаем использовать один порт для нескольких соединений\r\n    $option = socket_set_option($socket, SOL_SOCKET, SO_REUSEADDR, 1);\r\n    if (false === $option) {\r\n        die(\'Error: \' . socket_strerror(socket_last_error()) . PHP_EOL);\r\n    }\r\n\r\n    echo \'Listening socket...\' . PHP_EOL;\r\n    $listen = socket_listen($socket); // слушаем сокет\r\n    if (false === $listen) {\r\n        die(\'Error: \' . socket_strerror(socket_last_error()) . PHP_EOL);\r\n    }\r\n\r\n    while (true) { // бесконечный цикл ожидания подключений\r\n        echo \'Waiting for connections...\' . PHP_EOL;\r\n        $connect = socket_accept($socket); // зависаем, пока не получим ответа\r\n        if ($connect !== false) {\r\n            echo \'Client connected...\' . PHP_EOL;\r\n            echo \'Send message to client...\' . PHP_EOL;\r\n            socket_write($connect, \'Hello, Client!\');\r\n        } else {\r\n            echo \'Error: \' . socket_strerror(socket_last_error()) . PHP_EOL;\r\n            usleep(1000);\r\n        }\r\n\r\n        // останавливаем сервер после $limit секунд\r\n        if ($limit && (time() - $starttime > $limit)) {\r\n            echo \'Closing connection...\' . PHP_EOL;\r\n            socket_close($socket);\r\n            echo \'SERVER STOP\' . PHP_EOL;\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\nerror_reporting(E_ALL); // выводим все ошибки и предупреждения\r\nset_time_limit(0);      // бесконечное время работы скрипта\r\nob_implicit_flush();    // включаем вывод без буферизации\r\n\r\n// Запускаем сервер в работу, завершение работы через 60 секунд\r\nSocketServer(60);\r\n[/php]\r\n<p>\r\nЗапустим его в работу:\r\n</p>\r\n[cli]\r\n> php.exe -f simple.php\r\nSERVER START\r\nSocket create...\r\nSocket bind...\r\nSet option...\r\nListening socket...\r\nWaiting for connections...\r\n[/cli]\r\n<p>\r\n<a href=\"/files/blog/202/1.jpg\" class=\"zoom\"><img src=\"/files/blog/202/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nПопробуем пообщаться с сервером с помощью <code>telnet</code>:\r\n</p>\r\n[cli]\r\n> telnet\r\n[/cli]\r\n<p>\r\nПолучив приглашение <code>telnet</code>, даем команду:\r\n[cli]\r\n> open 127.0.0.1 7777\r\n[/cli]\r\n<p>\r\n<a href=\"/files/blog/202/2.jpg\" class=\"zoom\"><img src=\"/files/blog/202/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nИ видим сообщение от сервера:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/202/3.jpg\" class=\"zoom\"><img src=\"/files/blog/202/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nНаш сервер в другом окне тоже встрепенулся:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/202/4.jpg\" class=\"zoom\"><img src=\"/files/blog/202/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<h2>WebSocket сервер</h2>\r\n<p>\r\nПротокол WebSocket работает над TCP. Это означает, что при соединении браузер отправляет по HTTP специальные заголовки, спрашивая: «Поддерживает ли сервер WebSocket?». Если сервер в ответных заголовках отвечает «Да, поддерживаю», то дальше HTTP прекращается и общение идёт на специальном протоколе WebSocket, который уже не имеет с HTTP ничего общего.\r\n</p>\r\n[code]\r\nGET /chat HTTP/1.1\r\nHost: websocket.server.com\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nOrigin: http://www.example.com\r\nSec-WebSocket-Key: Iv8io/9s+lYFgZWcXczP8Q==\r\nSec-WebSocket-Version: 13\r\n[/code]\r\n<p>\r\nЗдесь <code>GET</code> и <code>Host</code> — стандартные HTTP-заголовки, а <code>Upgrade</code> и <code>Connection</code> указывают, что браузер хочет перейти на WebSocket.\r\n</p>\r\n<p>\r\nСервер может проанализировать эти заголовки и решить, разрешает ли он WebSocket с данного домена <code>Origin</code>. Ответ сервера, если он понимает и разрешает WebSocket-подключение:\r\n</p>\r\n[code]\r\nHTTP/1.1 101 Switching Protocols\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: hsBlbuDTkk24srzEOTBUlZAlC2g=\r\n[/code]\r\n\r\n<p>\r\nДля тестирования работы сервера нам нужен клиент:\r\n</p>\r\n[html]\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Простой WebSocket клиент</title>\r\n    <link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\" />\r\n    <script src=\"socket.js\" type=\"text/javascript\"></script>\r\n</head>\r\n<body>\r\n    <div>\r\n        <span>Сервер</span>\r\n        <input id=\"server\" type=\"text\" value=\"\" />\r\n    </div>\r\n    <div>\r\n        <input id=\"connect\" type=\"button\" value=\"Установить соединение\" />\r\n        <input id=\"disconnect\" type=\"button\" value=\"Разорвать соединение\" />\r\n    </div>\r\n    <div>\r\n        <span>Сообщение</span>\r\n        <input id=\"message\" type=\"text\" value=\"\" />\r\n        <input id=\"send-msg\" type=\"button\" value=\"Отправить сообщение\" />\r\n    </div>\r\n    <div>\r\n        <span>Информация</span>\r\n        <div id=\"socket-info\"></div>\r\n    </div>\r\n</body>\r\n</html>\r\n[/html]\r\n\r\n[js]\r\nwindow.addEventListener(\'DOMContentLoaded\', function () {\r\n\r\n    var socket;\r\n\r\n    // показать сообщение в #socket-info\r\n    function showMessage(message) {\r\n        var div = document.createElement(\'div\');\r\n        div.appendChild(document.createTextNode(message));\r\n        document.getElementById(\'socket-info\').appendChild(div);\r\n    }\r\n\r\n    /*\r\n     * Установить соединение с сервером и назначить обработчики событий\r\n     */\r\n    document.getElementById(\'connect\').onclick = function () {\r\n        // новое соединение открываем, если старое соединение закрыто\r\n        if (socket === undefined || socket.readyState !== 1) {\r\n            socket = new WebSocket(document.getElementById(\'server\').value);\r\n        } else {\r\n            showMessage(\'Надо закрыть уже имеющееся соединение\');\r\n        }\r\n\r\n        /*\r\n         * четыре функции обратного вызова: одна при получении данных и три – при изменениях в состоянии соединения\r\n         */\r\n        socket.onmessage = function (event) { // при получении данных от сервера\r\n            showMessage(\'Получено сообщение от сервера: \' + event.data);\r\n        }\r\n        socket.onopen = function () { // при установке соединения с сервером\r\n            showMessage(\'Соединение с сервером установлено\');\r\n        }\r\n        socket.onerror = function(error) { // если произошла какая-то ошибка\r\n            showMessage(\'Произошла ошибка: \' + error.message);\r\n        };\r\n        socket.onclose = function(event) { // при закрытии соединения с сервером\r\n            showMessage(\'Соединение с сервером закрыто\');\r\n            if (event.wasClean) {\r\n                showMessage(\'Соединение закрыто чисто\');\r\n            } else {\r\n                showMessage(\'Обрыв соединения\'); // например, «убит» процесс сервера\r\n            }\r\n            showMessage(\'Код: \' + event.code + \', причина: \' + event.reason);\r\n        };\r\n    };\r\n\r\n    /*\r\n     * Отправка сообщения серверу\r\n     */\r\n    document.getElementById(\'send-msg\').onclick = function () {\r\n        if (socket !== undefined && socket.readyState === 1) {\r\n            var message = document.getElementById(\'message\').value;\r\n            socket.send(message);\r\n            showMessage(\'Отправлено сообщение серверу: \' + message);\r\n        } else {\r\n            showMessage(\'Невозможно отправить сообщение, нет соединения\');\r\n        }\r\n    };\r\n\r\n    /*\r\n     * Закрыть соединение с сервером\r\n     */\r\n    document.getElementById(\'disconnect\').onclick = function () {\r\n        if (socket !== undefined && socket.readyState === 1) {\r\n            socket.close();\r\n        } else {\r\n            showMessage(\'Соединение с сервером уже было закрыто\');\r\n        }\r\n    };\r\n\r\n});\r\n[/js]\r\n[css]\r\nbody > div {\r\n    margin-bottom: 15px;\r\n    overflow: hidden;\r\n}\r\nspan {\r\n    display: block;\r\n    margin-bottom: 2px;\r\n}\r\ninput {\r\n    padding: 5px;\r\n    box-sizing: border-box;\r\n}\r\ninput[type=\"text\"] {\r\n    width: 100%;\r\n}\r\ninput[type=\"button\"] {\r\n    width: 25%;\r\n    float: left;\r\n    margin-top: 5px;\r\n    margin-right: 5px;\r\n}\r\ndiv#socket-info {\r\n    padding: 5px;\r\n    border: 1px solid #ddd;\r\n}\r\n[/css]\r\n<p>\r\nПроверим его в работе. Открываем HTML-страницу в браузере и заполняем первое поле «Сервер»:\r\n</p>\r\n[code]\r\nws://echo.websocket.org\r\n[/code]\r\n<p>\r\nЭто гарантированно работающий WebSocket echo-сервер, которые отправляет все сообщения обратно. Жмем кнопку «Установить соединение», набираем текст сообщения в поле «Сообщение», жмем кнопку «Отправить сообщение»:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/202/5.jpg\" class=\"zoom\"><img src=\"/files/blog/202/5.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nА теперь код WebSocket сервера на PHP:\r\n</p>\r\n[php]\r\n<?php\r\n/**\r\n * Класс WebSocket сервера\r\n */\r\nclass WebSocketServer {\r\n\r\n    /**\r\n     * Функция вызывается, когда получено сообщение от клиента\r\n     */\r\n    public $handler;\r\n\r\n    /**\r\n     * IP адрес сервера\r\n     */\r\n    private $ip;\r\n    /**\r\n     * Порт сервера\r\n     */\r\n    private $port;\r\n    /**\r\n     * Сокет для принятия новых соединений, прослушивает указанный порт\r\n     */\r\n    private $connection;\r\n    /**\r\n     * Для хранения всех подключений, принятых слушающим сокетом\r\n     */\r\n    private $connects;\r\n\r\n    /**\r\n     * Ограничение по времени работы сервера\r\n     */\r\n    private $timeLimit = 0;\r\n    /**\r\n     * Время начала работы сервера\r\n     */\r\n    private $startTime;\r\n    /**\r\n     * Выводить сообщения в консоль?\r\n     */\r\n    private $verbose = false;\r\n    /**\r\n     * Записывать сообщения в log-файл?\r\n     */\r\n    private $logging = false;\r\n    /**\r\n     * Имя log-файла\r\n     */\r\n    private $logFile = \'ws-log.txt\';\r\n    /**\r\n     * Ресурс log-файла\r\n     */\r\n    private $resource;\r\n\r\n\r\n    public function __construct($ip = \'127.0.0.1\', $port = 7777) {\r\n        $this->ip = $ip;\r\n        $this->port = $port;\r\n\r\n        // эта функция вызывается, когда получено сообщение от клиента;\r\n        // при создании экземпляра класса должна быть переопределена\r\n        $this->handler = function($connection, $data) {\r\n            $message = \'[\' . date(\'r\') . \'] Получено сообщение от клиента: \' . $data . PHP_EOL;\r\n            if ($this->verbose) {\r\n                echo $message;\r\n            }\r\n            if ($this->logging) {\r\n                fwrite($this->resource, $message);\r\n            }\r\n        };\r\n    }\r\n\r\n    public function __destruct() {\r\n        if (is_resource($this->connection)) {\r\n            $this->stopServer();\r\n        }\r\n        if ($this->logging) {\r\n            fclose($this->resource);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Дополнительные настройки для отладки\r\n     */\r\n    public function settings($timeLimit = 0, $verbose = false, $logging = false, $logFile = \'ws-log.txt\') {\r\n        $this->timeLimit = $timeLimit;\r\n        $this->verbose = $verbose;\r\n        $this->logging = $logging;\r\n        $this->logFile = $logFile;\r\n        if ($this->logging) {\r\n            $this->resource = fopen($this->logFile, \'a\');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Выводит сообщение в консоль и/или записывает в лог-файл\r\n     */\r\n    private function debug($message) {\r\n        $message = \'[\' . date(\'r\') . \'] \' . $message . PHP_EOL;\r\n        if ($this->verbose) {\r\n            echo $message;\r\n        }\r\n        if ($this->logging) {\r\n            fwrite($this->resource, $message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Отправляет сообщение клиенту\r\n     */\r\n    public static function response($connect, $data) {\r\n        socket_write($connect, self::encode($data));\r\n    }\r\n\r\n    /**\r\n     * Запускает сервер в работу\r\n     */\r\n    public function startServer() {\r\n\r\n        $this->debug(\'Try start server...\');\r\n\r\n        $this->connection = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\r\n\r\n        if (false === $this->connection) {\r\n            $this->debug(\'Error socket_create(): \' . socket_strerror(socket_last_error()));\r\n            return;\r\n        }\r\n\r\n        $bind = socket_bind($this->connection, $this->ip, $this->port); // привязываем к ip и порту\r\n        if (false === $bind) {\r\n            $this->debug(\'Error socket_bind(): \' . socket_strerror(socket_last_error()));\r\n            return;\r\n        }\r\n\r\n        // разрешаем использовать один порт для нескольких соединений\r\n        $option = socket_set_option($this->connection, SOL_SOCKET, SO_REUSEADDR, 1);\r\n        if (false === $option) {\r\n            $this->debug(\'Error socket_set_option(): \' . socket_strerror(socket_last_error()));\r\n            return;\r\n        }\r\n\r\n        $listen = socket_listen($this->connection); // слушаем сокет\r\n        if (false === $listen) {\r\n            $this->debug(\'Error socket_listen(): \' . socket_strerror(socket_last_error()));\r\n            return;\r\n        }\r\n\r\n        $this->debug(\'Server is running...\');\r\n\r\n        $this->connects = array($this->connection);\r\n        $this->startTime = time();\r\n\r\n        while (true) {\r\n\r\n            $this->debug(\'Waiting for connections...\');\r\n\r\n            // создаем копию массива, так что массив $this->connects не будет изменен функцией socket_select()\r\n            $read = $this->connects;\r\n            $write = $except = null;\r\n\r\n            /*\r\n             * Сокет $this->connection только прослушивает порт на предмет новых соединений. Как только поступило\r\n             * новое соединение, мы создаем новый ресурс сокета с помощью socket_accept() и помещаем его в массив\r\n             * $this->connects для дальнейшего чтения из него.\r\n             */\r\n\r\n            if ( ! socket_select($read, $write, $except, null)) { // ожидаем сокеты, доступные для чтения (без таймаута)\r\n                break;\r\n            }\r\n\r\n            // если слушающий сокет есть в массиве чтения, значит было новое соединение\r\n            if (in_array($this->connection, $read)) {\r\n                // принимаем новое соединение и производим рукопожатие\r\n                if (($connect = socket_accept($this->connection)) && $this->handshake($connect)) {\r\n                    $this->debug(\'New connection accepted\');\r\n                    $this->connects[] = $connect; // добавляем его в список необходимых для обработки\r\n                }\r\n                // удаляем слушающий сокет из массива для чтения\r\n                unset($read[ array_search($this->connection, $read) ]);\r\n            }\r\n\r\n            foreach ($read as $connect) { // обрабатываем все соединения, в которых есть данные для чтения\r\n                $data = socket_read($connect, 100000);\r\n                $decoded = self::decode($data);\r\n                // если клиент не прислал данных или хочет разорвать соединение\r\n                if (false === $decoded || \'close\' === $decoded[\'type\']) {\r\n                    $this->debug(\'Connection closing\');\r\n                    socket_write($connect, self::encode(\'  Closed on client demand\', \'close\'));\r\n                    socket_shutdown($connect);\r\n                    socket_close($connect);\r\n                    unset($this->connects[ array_search($connect, $this->connects) ]);\r\n                    $this->debug(\'Closed successfully\');\r\n                    continue;\r\n                }\r\n                // получено сообщение от клиента, вызываем пользовательскую\r\n                // функцию, чтобы обработать полученные данные\r\n                if (is_callable($this->handler)) {\r\n                    call_user_func($this->handler, $connect, $decoded[\'payload\']);\r\n                }\r\n            }\r\n\r\n            // если истекло ограничение по времени, останавливаем сервер\r\n            if ($this->timeLimit && time() - $this->startTime > $this->timeLimit) {\r\n                $this->debug(\'Time limit. Stopping server.\');\r\n                $this->stopServer();\r\n                return;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Останавливает работу сервера\r\n     */\r\n    public function stopServer() {\r\n        // закрываем слушающий сокет\r\n        socket_close($this->connection);\r\n        if (!empty($this->connects)) { // отправляем все клиентам сообщение о разрыве соединения\r\n            foreach ($this->connects as $connect) {\r\n                if (is_resource($connect)) {\r\n                    socket_write($connect, self::encode(\'  Closed on server demand\', \'close\'));\r\n                    socket_shutdown($connect);\r\n                    socket_close($connect);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Для кодирования сообщений перед отправкой клиенту\r\n     */\r\n    private static function encode($payload, $type = \'text\', $masked = false) {\r\n        $frameHead = array();\r\n        $payloadLength = strlen($payload);\r\n\r\n        switch ($type) {\r\n            case \'text\':\r\n                // first byte indicates FIN, Text-Frame (10000001):\r\n                $frameHead[0] = 129;\r\n                break;\r\n            case \'close\':\r\n                // first byte indicates FIN, Close Frame(10001000):\r\n                $frameHead[0] = 136;\r\n                break;\r\n            case \'ping\':\r\n                // first byte indicates FIN, Ping frame (10001001):\r\n                $frameHead[0] = 137;\r\n                break;\r\n            case \'pong\':\r\n                // first byte indicates FIN, Pong frame (10001010):\r\n                $frameHead[0] = 138;\r\n                break;\r\n        }\r\n\r\n        // set mask and payload length (using 1, 3 or 9 bytes)\r\n        if ($payloadLength > 65535) {\r\n            $payloadLengthBin = str_split(sprintf(\'%064b\', $payloadLength), 8);\r\n            $frameHead[1] = ($masked === true) ? 255 : 127;\r\n            for ($i = 0; $i < 8; $i++) {\r\n                $frameHead[$i + 2] = bindec($payloadLengthBin[$i]);\r\n            }\r\n            // most significant bit MUST be 0\r\n            if ($frameHead[2] > 127) {\r\n                return array(\'type\' => \'\', \'payload\' => \'\', \'error\' => \'frame too large (1004)\');\r\n            }\r\n        } elseif ($payloadLength > 125) {\r\n            $payloadLengthBin = str_split(sprintf(\'%016b\', $payloadLength), 8);\r\n            $frameHead[1] = ($masked === true) ? 254 : 126;\r\n            $frameHead[2] = bindec($payloadLengthBin[0]);\r\n            $frameHead[3] = bindec($payloadLengthBin[1]);\r\n        } else {\r\n            $frameHead[1] = ($masked === true) ? $payloadLength + 128 : $payloadLength;\r\n        }\r\n\r\n        // convert frame-head to string:\r\n        foreach (array_keys($frameHead) as $i) {\r\n            $frameHead[$i] = chr($frameHead[$i]);\r\n        }\r\n        if ($masked === true) {\r\n            // generate a random mask:\r\n            $mask = array();\r\n            for ($i = 0; $i < 4; $i++) {\r\n                $mask[$i] = chr(rand(0, 255));\r\n            }\r\n            $frameHead = array_merge($frameHead, $mask);\r\n        }\r\n        $frame = implode(\'\', $frameHead);\r\n\r\n        // append payload to frame:\r\n        for ($i = 0; $i < $payloadLength; $i++) {\r\n            $frame .= ($masked === true) ? $payload[$i] ^ $mask[$i % 4] : $payload[$i];\r\n        }\r\n\r\n        return $frame;\r\n    }\r\n\r\n    /**\r\n     * Для декодирования сообщений, полученных от клиента\r\n     */\r\n    private static function decode($data) {\r\n        if ( ! strlen($data)) {\r\n            return false;\r\n        }\r\n\r\n        $unmaskedPayload = \'\';\r\n        $decodedData = array();\r\n\r\n        // estimate frame type:\r\n        $firstByteBinary = sprintf(\'%08b\', ord($data[0]));\r\n        $secondByteBinary = sprintf(\'%08b\', ord($data[1]));\r\n        $opcode = bindec(substr($firstByteBinary, 4, 4));\r\n        $isMasked = ($secondByteBinary[0] == \'1\') ? true : false;\r\n        $payloadLength = ord($data[1]) & 127;\r\n\r\n        // unmasked frame is received:\r\n        if (!$isMasked) {\r\n            return array(\'type\' => \'\', \'payload\' => \'\', \'error\' => \'protocol error (1002)\');\r\n        }\r\n\r\n        switch ($opcode) {\r\n            // text frame:\r\n            case 1:\r\n                $decodedData[\'type\'] = \'text\';\r\n                break;\r\n            case 2:\r\n                $decodedData[\'type\'] = \'binary\';\r\n                break;\r\n            // connection close frame:\r\n            case 8:\r\n                $decodedData[\'type\'] = \'close\';\r\n                break;\r\n            // ping frame:\r\n            case 9:\r\n                $decodedData[\'type\'] = \'ping\';\r\n                break;\r\n            // pong frame:\r\n            case 10:\r\n                $decodedData[\'type\'] = \'pong\';\r\n                break;\r\n            default:\r\n                return array(\'type\' => \'\', \'payload\' => \'\', \'error\' => \'unknown opcode (1003)\');\r\n        }\r\n\r\n        if ($payloadLength === 126) {\r\n            $mask = substr($data, 4, 4);\r\n            $payloadOffset = 8;\r\n            $dataLength = bindec(sprintf(\'%08b\', ord($data[2])) . sprintf(\'%08b\', ord($data[3]))) + $payloadOffset;\r\n        } elseif ($payloadLength === 127) {\r\n            $mask = substr($data, 10, 4);\r\n            $payloadOffset = 14;\r\n            $tmp = \'\';\r\n            for ($i = 0; $i < 8; $i++) {\r\n                $tmp .= sprintf(\'%08b\', ord($data[$i + 2]));\r\n            }\r\n            $dataLength = bindec($tmp) + $payloadOffset;\r\n            unset($tmp);\r\n        } else {\r\n            $mask = substr($data, 2, 4);\r\n            $payloadOffset = 6;\r\n            $dataLength = $payloadLength + $payloadOffset;\r\n        }\r\n\r\n        /**\r\n         * We have to check for large frames here. socket_recv cuts at 1024 bytes\r\n         * so if websocket-frame is > 1024 bytes we have to wait until whole\r\n         * data is transferd.\r\n         */\r\n        if (strlen($data) < $dataLength) {\r\n            return false;\r\n        }\r\n\r\n        if ($isMasked) {\r\n            for ($i = $payloadOffset; $i < $dataLength; $i++) {\r\n                $j = $i - $payloadOffset;\r\n                if (isset($data[$i])) {\r\n                    $unmaskedPayload .= $data[$i] ^ $mask[$j % 4];\r\n                }\r\n            }\r\n            $decodedData[\'payload\'] = $unmaskedPayload;\r\n        } else {\r\n            $payloadOffset = $payloadOffset - 4;\r\n            $decodedData[\'payload\'] = substr($data, $payloadOffset);\r\n        }\r\n\r\n        return $decodedData;\r\n    }\r\n\r\n    /**\r\n     * «Рукопожатие», т.е. отправка заголовков согласно протоколу WebSocket\r\n     */\r\n    private function handshake($connect) {\r\n\r\n        $info = array();\r\n\r\n        $data = socket_read($connect, 1000);\r\n        $lines = explode(\"\\r\\n\", $data);\r\n        foreach ($lines as $i => $line) {\r\n            if ($i) {\r\n                if (preg_match(\'/\\A(\\S+): (.*)\\z/\', $line, $matches)) {\r\n                    $info[$matches[1]] = $matches[2];\r\n                }\r\n            } else {\r\n                $header = explode(\' \', $line);\r\n                $info[\'method\'] = $header[0];\r\n                $info[\'uri\'] = $header[1];\r\n            }\r\n            if (empty(trim($line))) break;\r\n        }\r\n\r\n        // получаем адрес клиента\r\n        $ip = $port = null;\r\n        if ( ! socket_getpeername($connect, $ip, $port)) {\r\n            return false;\r\n        }\r\n        $info[\'ip\'] = $ip;\r\n        $info[\'port\'] = $port;\r\n\r\n        if (empty($info[\'Sec-WebSocket-Key\'])) {\r\n            return false;\r\n        }\r\n\r\n        // отправляем заголовок согласно протоколу вебсокета\r\n        $SecWebSocketAccept = \r\n            base64_encode(pack(\'H*\', sha1($info[\'Sec-WebSocket-Key\'] . \'258EAFA5-E914-47DA-95CA-C5AB0DC85B11\')));\r\n        $upgrade = \"HTTP/1.1 101 Web Socket Protocol Handshake\\r\\n\" .\r\n                   \"Upgrade: websocket\\r\\n\" .\r\n                   \"Connection: Upgrade\\r\\n\" .\r\n                   \"Sec-WebSocket-Accept:\".$SecWebSocketAccept.\"\\r\\n\\r\\n\";\r\n        socket_write($connect, $upgrade);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n}\r\n[/php]\r\n<p>\r\nДля тестирования напишем небольшой PHP-скрипт, который запускает в работу сервер и все сообщения клиента отправляет обратно (echo-сервер):\r\n</p>\r\n[php]\r\n<?php \r\nerror_reporting(E_ALL);\r\nset_time_limit(0);\r\nob_implicit_flush();\r\n\r\nrequire \'WebSocketServer.class.php\';\r\n\r\n$server = new WebSocketServer(\'127.0.0.1\', 7777);\r\n// максимальное время работы 100 секунд, выводить сообщения в консоль\r\n$server->settings(100, true);\r\n\r\n// эта функция вызывается, когда получено сообщение от клиента\r\n$server->handler = function($connect, $data) {\r\n    // полученные от клиента данные отправляем обратно\r\n    WebSocketServer::response($connect, $data);\r\n};\r\n\r\n$server->startServer();\r\n[/php]\r\n<p>\r\nЗапускаем скрипт в работу:\r\n</p>\r\n[cli]\r\n> php.exe -f echo-server.php\r\n[Fri, 12 Oct 2018 15:08:13 +0300] Try start server...\r\n[Fri, 12 Oct 2018 15:08:13 +0300] Server is running...\r\n[Fri, 12 Oct 2018 15:08:13 +0300] Waiting for connections...\r\n[/cli]\r\n<p>\r\n<a href=\"/files/blog/202/6.jpg\" class=\"zoom\"><img src=\"/files/blog/202/6.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЕще один пример использования сервера — клиент отправляет команды, а сервер их выполняет:\r\n</p>\r\n[php]\r\n<?php \r\nerror_reporting(E_ALL);\r\nset_time_limit(0);\r\nob_implicit_flush();\r\n\r\nrequire \'WebSocketServer.class.php\';\r\n\r\n$server = new WebSocketServer(\'127.0.0.1\', 7777);\r\n// максимальное время работы 100 секунд, выводить сообщения в консоль\r\n$server->settings(100, true);\r\n\r\n// эта функция вызывается, когда получено сообщение от клиента\r\n$server->handler = function($connect, $data) {\r\n    // анализируем поступившую команду и даем ответ\r\n    if ( ! in_array($data, array(\'date\', \'time\', \'country\', \'city\'))) {\r\n        WebSocketServer::response($connect, \'Неизвестная команда\');\r\n        return;\r\n    }\r\n    switch ($data) {\r\n        case \'date\'   : $response = date(\'d.m.Y\'); break;\r\n        case \'time\'   : $response = date(\'H:i:s\'); break;\r\n        case \'country\': $response = \'Россия\';      break;\r\n        case \'city\'   : $response = \'Москва\';      break;\r\n    }\r\n    WebSocketServer::response($connect, $response);\r\n};\r\n\r\n$server->startServer();\r\n[/php]\r\n\r\n<div class=\"post-scriptum\">\r\n<p>\r\nАльтернативная реализация WebSocket сервера с использованием функций для работы с потоками:\r\n</p>\r\n[php]\r\n<?php\r\n/**\r\n * Класс WebSocket сервера\r\n */\r\nclass WebSocketServer {\r\n\r\n    /**\r\n     * Функция вызывается, когда получено сообщение от клиента\r\n     */\r\n    public $handler;\r\n\r\n    /**\r\n     * IP адрес сервера\r\n     */\r\n    private $ip;\r\n    /**\r\n     * Порт сервера\r\n     */\r\n    private $port;\r\n    /**\r\n     * Для хранения слушающего сокета потока\r\n     */\r\n    private $connection;\r\n    /**\r\n     * Для хранения всех подключений\r\n     */\r\n    private $connects;\r\n\r\n    /**\r\n     * Ограничение по времени работы сервера\r\n     */\r\n    private $timeLimit = 0;\r\n    /**\r\n     * Время начала работы сервера\r\n     */\r\n    private $startTime;\r\n    /**\r\n     * Выводить сообщения в консоль?\r\n     */\r\n    private $verbose = false;\r\n    /**\r\n     * Записывать сообщения в log-файл?\r\n     */\r\n    private $logging = false;\r\n    /**\r\n     * Имя log-файла\r\n     */\r\n    private $logFile = \'ws-log.txt\';\r\n    /**\r\n     * Ресурс log-файла\r\n     */\r\n    private $resource;\r\n\r\n\r\n    public function __construct($ip = \'127.0.0.1\', $port = 7777) {\r\n        $this->ip = $ip;\r\n        $this->port = $port;\r\n\r\n        // эта функция вызывается, когда получено сообщение от клиента;\r\n        // при создании экземпляра класса должна быть переопределена\r\n        $this->handler = function($connection, $data) {\r\n            $message = \'[\' . date(\'r\') . \'] Получено сообщение от клиента: \' . $data . PHP_EOL;\r\n            if ($this->verbose) {\r\n                echo $message;\r\n            }\r\n            if ($this->logging) {\r\n                fwrite($this->resource, $message);\r\n            }\r\n        };\r\n    }\r\n\r\n    public function __destruct() {\r\n        if (is_resource($this->connection)) {\r\n            $this->stopServer();\r\n        }\r\n        if ($this->logging) {\r\n            fclose($this->resource);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Дополнительные настройки для отладки\r\n     */\r\n    public function settings($timeLimit = 0, $verbose = false, $logging = false, $logFile = \'ws-log.txt\') {\r\n        $this->timeLimit = $timeLimit;\r\n        $this->verbose = $verbose;\r\n        $this->logging = $logging;\r\n        $this->logFile = $logFile;\r\n        if ($this->logging) {\r\n            $this->resource = fopen($this->logFile, \'a\');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Выводит сообщение в консоль или записывает в лог-файл\r\n     */\r\n    private function debug($message) {\r\n        $message = \'[\' . date(\'r\') . \'] \' . $message . PHP_EOL;\r\n        if ($this->verbose) {\r\n            echo $message;\r\n        }\r\n        if ($this->logging) {\r\n            fwrite($this->resource, $message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Отправляет сообщение клиенту\r\n     */\r\n    public static function response($connect, $data) {\r\n        fwrite($connect, self::encode($data));\r\n    }\r\n\r\n    /**\r\n     * Запускает сервер в работу\r\n     */\r\n    public function startServer() {\r\n        \r\n        $this->debug(\'Try start server...\');\r\n\r\n        $this->connection = stream_socket_server(\'tcp://\' . $this->ip . \':\' . $this->port, $errno, $errstr);\r\n        \r\n        if ( ! $this->connection) {\r\n            $this->debug(\'Cannot start server: \' .$errstr. \'(\' .$errno. \')\');\r\n            return false;\r\n        }\r\n\r\n        $this->debug(\'Server is running...\');\r\n\r\n        $this->connects = array();\r\n        $this->startTime = time();\r\n\r\n        while (true) {\r\n\r\n            $this->debug(\'Waiting for connections...\');\r\n\r\n            // формируем массив прослушиваемых сокетов\r\n            $read = $this->connects;\r\n            $read[] = $this->connection;\r\n            $write = $except = null;\r\n\r\n            if ( ! stream_select($read, $write, $except, null)) { // ожидаем сокеты доступные для чтения (без таймаута)\r\n                break;\r\n            }\r\n\r\n            if (in_array($this->connection, $read)) { // есть новое соединение\r\n                // принимаем новое соединение и производим рукопожатие\r\n                if (($connect = stream_socket_accept($this->connection, -1)) && $this->handshake($connect)) {\r\n                    $this->debug(\'New connection accepted\');\r\n                    $this->connects[] = $connect; // добавляем его в список необходимых для обработки\r\n                }\r\n                unset($read[ array_search($this->connection, $read) ]);\r\n            }\r\n\r\n            foreach ($read as $connect) { // обрабатываем все соединения\r\n                $data = fread($connect, 100000);\r\n                $decoded = self::decode($data);\r\n                // если клиент не прислал данных или хочет разорвать соединение\r\n                if (false === $decoded || \'close\' === $decoded[\'type\']) {\r\n                    $this->debug(\'Connection closing\');\r\n                    fwrite($connect, self::encode(\'  Closed on client demand\', \'close\'));\r\n                    fclose($connect);\r\n                    unset($this->connects[ array_search($connect, $this->connects) ]);\r\n                    $this->debug(\'Closed successfully\');\r\n                    continue;\r\n                }\r\n                // получено сообщение от клиента, вызываем пользовательскую\r\n                // функцию, чтобы обработать полученные данные\r\n                if (is_callable($this->handler)) {\r\n                    call_user_func($this->handler, $connect, $decoded[\'payload\']);\r\n                }\r\n            }\r\n\r\n            // если истекло ограничение по времени, останавливаем сервер\r\n            if ($this->timeLimit && time() - $this->startTime > $this->timeLimit) {\r\n                $this->debug(\'Time limit. Stopping server.\');\r\n                $this->stopServer();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Останавливает работу сервера\r\n     */\r\n    public function stopServer() {\r\n        fclose($this->connection); // закрываем слушающий сокет\r\n        if (!empty($this->connects)) { // отправляем все клиентам сообщение о разрыве соединения\r\n            foreach ($this->connects as $connect) {\r\n                if (is_resource($connect)) {\r\n                    fwrite($connect, self::encode(\'  Closed on server demand\', \'close\'));\r\n                    fclose($connect);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Для кодирования сообщений перед отправкой клиенту\r\n     */\r\n    private static function encode($payload, $type = \'text\', $masked = false) {\r\n        $frameHead = array();\r\n        $payloadLength = strlen($payload);\r\n\r\n        switch ($type) {\r\n            case \'text\':\r\n                // first byte indicates FIN, Text-Frame (10000001):\r\n                $frameHead[0] = 129;\r\n                break;\r\n            case \'close\':\r\n                // first byte indicates FIN, Close Frame(10001000):\r\n                $frameHead[0] = 136;\r\n                break;\r\n            case \'ping\':\r\n                // first byte indicates FIN, Ping frame (10001001):\r\n                $frameHead[0] = 137;\r\n                break;\r\n            case \'pong\':\r\n                // first byte indicates FIN, Pong frame (10001010):\r\n                $frameHead[0] = 138;\r\n                break;\r\n        }\r\n\r\n        // set mask and payload length (using 1, 3 or 9 bytes)\r\n        if ($payloadLength > 65535) {\r\n            $payloadLengthBin = str_split(sprintf(\'%064b\', $payloadLength), 8);\r\n            $frameHead[1] = ($masked === true) ? 255 : 127;\r\n            for ($i = 0; $i < 8; $i++) {\r\n                $frameHead[$i + 2] = bindec($payloadLengthBin[$i]);\r\n            }\r\n            // most significant bit MUST be 0\r\n            if ($frameHead[2] > 127) {\r\n                return array(\'type\' => \'\', \'payload\' => \'\', \'error\' => \'frame too large (1004)\');\r\n            }\r\n        } elseif ($payloadLength > 125) {\r\n            $payloadLengthBin = str_split(sprintf(\'%016b\', $payloadLength), 8);\r\n            $frameHead[1] = ($masked === true) ? 254 : 126;\r\n            $frameHead[2] = bindec($payloadLengthBin[0]);\r\n            $frameHead[3] = bindec($payloadLengthBin[1]);\r\n        } else {\r\n            $frameHead[1] = ($masked === true) ? $payloadLength + 128 : $payloadLength;\r\n        }\r\n\r\n        // convert frame-head to string:\r\n        foreach (array_keys($frameHead) as $i) {\r\n            $frameHead[$i] = chr($frameHead[$i]);\r\n        }\r\n        if ($masked === true) {\r\n            // generate a random mask:\r\n            $mask = array();\r\n            for ($i = 0; $i < 4; $i++) {\r\n                $mask[$i] = chr(rand(0, 255));\r\n            }\r\n            $frameHead = array_merge($frameHead, $mask);\r\n        }\r\n        $frame = implode(\'\', $frameHead);\r\n\r\n        // append payload to frame:\r\n        for ($i = 0; $i < $payloadLength; $i++) {\r\n            $frame .= ($masked === true) ? $payload[$i] ^ $mask[$i % 4] : $payload[$i];\r\n        }\r\n\r\n        return $frame;\r\n    }\r\n\r\n    /**\r\n     * Для декодирования сообщений, полученных от клиента\r\n     */\r\n    private static function decode($data) {\r\n        if ( ! strlen($data)) {\r\n            return false;\r\n        }\r\n\r\n        $unmaskedPayload = \'\';\r\n        $decodedData = array();\r\n\r\n        // estimate frame type:\r\n        $firstByteBinary = sprintf(\'%08b\', ord($data[0]));\r\n        $secondByteBinary = sprintf(\'%08b\', ord($data[1]));\r\n        $opcode = bindec(substr($firstByteBinary, 4, 4));\r\n        $isMasked = ($secondByteBinary[0] == \'1\') ? true : false;\r\n        $payloadLength = ord($data[1]) & 127;\r\n\r\n        // unmasked frame is received:\r\n        if (!$isMasked) {\r\n            return array(\'type\' => \'\', \'payload\' => \'\', \'error\' => \'protocol error (1002)\');\r\n        }\r\n\r\n        switch ($opcode) {\r\n            // text frame:\r\n            case 1:\r\n                $decodedData[\'type\'] = \'text\';\r\n                break;\r\n            case 2:\r\n                $decodedData[\'type\'] = \'binary\';\r\n                break;\r\n            // connection close frame:\r\n            case 8:\r\n                $decodedData[\'type\'] = \'close\';\r\n                break;\r\n            // ping frame:\r\n            case 9:\r\n                $decodedData[\'type\'] = \'ping\';\r\n                break;\r\n            // pong frame:\r\n            case 10:\r\n                $decodedData[\'type\'] = \'pong\';\r\n                break;\r\n            default:\r\n                return array(\'type\' => \'\', \'payload\' => \'\', \'error\' => \'unknown opcode (1003)\');\r\n        }\r\n\r\n        if ($payloadLength === 126) {\r\n            $mask = substr($data, 4, 4);\r\n            $payloadOffset = 8;\r\n            $dataLength = bindec(sprintf(\'%08b\', ord($data[2])) . sprintf(\'%08b\', ord($data[3]))) + $payloadOffset;\r\n        } elseif ($payloadLength === 127) {\r\n            $mask = substr($data, 10, 4);\r\n            $payloadOffset = 14;\r\n            $tmp = \'\';\r\n            for ($i = 0; $i < 8; $i++) {\r\n                $tmp .= sprintf(\'%08b\', ord($data[$i + 2]));\r\n            }\r\n            $dataLength = bindec($tmp) + $payloadOffset;\r\n            unset($tmp);\r\n        } else {\r\n            $mask = substr($data, 2, 4);\r\n            $payloadOffset = 6;\r\n            $dataLength = $payloadLength + $payloadOffset;\r\n        }\r\n\r\n        /**\r\n         * We have to check for large frames here. socket_recv cuts at 1024 bytes\r\n         * so if websocket-frame is > 1024 bytes we have to wait until whole\r\n         * data is transferd.\r\n         */\r\n        if (strlen($data) < $dataLength) {\r\n            return false;\r\n        }\r\n\r\n        if ($isMasked) {\r\n            for ($i = $payloadOffset; $i < $dataLength; $i++) {\r\n                $j = $i - $payloadOffset;\r\n                if (isset($data[$i])) {\r\n                    $unmaskedPayload .= $data[$i] ^ $mask[$j % 4];\r\n                }\r\n            }\r\n            $decodedData[\'payload\'] = $unmaskedPayload;\r\n        } else {\r\n            $payloadOffset = $payloadOffset - 4;\r\n            $decodedData[\'payload\'] = substr($data, $payloadOffset);\r\n        }\r\n\r\n        return $decodedData;\r\n    }\r\n\r\n    /**\r\n     * «Рукопожатие», т.е. отправка заголовков согласно протоколу WebSocket\r\n     */\r\n    private function handshake($connect) {\r\n        $info = array();\r\n\r\n        $line = fgets($connect);\r\n        $header = explode(\' \', $line);\r\n        $info[\'method\'] = $header[0];\r\n        $info[\'uri\'] = $header[1];\r\n\r\n        // считываем заголовки из соединения\r\n        while ($line = rtrim(fgets($connect))) {\r\n            if (preg_match(\'/\\A(\\S+): (.*)\\z/\', $line, $matches)) {\r\n                $info[$matches[1]] = $matches[2];\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // получаем адрес клиента\r\n        $address = explode(\':\', stream_socket_get_name($connect, true));\r\n        $info[\'ip\'] = $address[0];\r\n        $info[\'port\'] = $address[1];\r\n\r\n        if (empty($info[\'Sec-WebSocket-Key\'])) {\r\n            return false;\r\n        }\r\n\r\n        // отправляем заголовок согласно протоколу вебсокета\r\n        $SecWebSocketAccept = \r\n            base64_encode(pack(\'H*\', sha1($info[\'Sec-WebSocket-Key\'] . \'258EAFA5-E914-47DA-95CA-C5AB0DC85B11\')));\r\n        $upgrade = \"HTTP/1.1 101 Web Socket Protocol Handshake\\r\\n\" .\r\n                   \"Upgrade: websocket\\r\\n\" .\r\n                   \"Connection: Upgrade\\r\\n\" .\r\n                   \"Sec-WebSocket-Accept:\".$SecWebSocketAccept.\"\\r\\n\\r\\n\";\r\n        fwrite($connect, $upgrade);\r\n\r\n        return $info;\r\n    }\r\n\r\n}\r\n[/php]\r\n</div>\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"https://github.com/tokmakov/WebSocketServer\">Исходные коды сервера на GITHUB.COM</a></li>\r\n  <li><a href=\"https://learn.javascript.ru/websockets\">Описание WebSocket на сайте JAVASCRIPT.RU</a></li>\r\n</ul>','2018-10-10 18:53:31',1),(204,17,'Битрикс. Пользовательские поля раздела инфоблока','','','CMS, Web-разработка, Битрикс, Инфоблок, ПользовательскиеСвойства, РазделИнфоблока, result_modifier.php, component_epilog.php, SetResultCacheKeys','Битрикс позволяет создавать пользовательские свойства для элементов инфоблока и пользовательские поля для разделов инфоблока, кроме тех, что доступны изначально. Давайте создадим два пользовательских поля для разделов инфоблока и посмотрим, как их можно получить, чтобы в дальнейшем использовать в шаблоне.','<p>\r\nБитрикс позволяет создавать пользовательские свойства для элементов инфоблока и пользовательские поля для разделов инфоблока, кроме тех, что доступны изначально. Давайте создадим два пользовательских поля для разделов инфоблока и посмотрим, как их можно получить, чтобы в дальнейшем использовать в шаблоне.\r\n</p>\r\n<p>\r\nЭто будут свойства для хранения мета-тегов <code>description</code> и <code>keywords</code>. В панели управления переходим на страницу управления разделами и элементами инфоблока\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/204/1.jpg\" class=\"zoom\"><img src=\"/files/blog/204/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nИ вызываем форму редактирования какого-нибудь раздела. Переходим на вкладку «Доп.поля»:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/204/2.jpg\" class=\"zoom\"><img src=\"/files/blog/204/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nСоздаем два поля:\r\n</p>\r\n<ul>\r\n  <li><code>UF_SECT_DESCR</code> — для хранения мета-тега <code>description</code></li>\r\n  <li><code>UF_SECT_KEYWRD</code> — для хранения мета-тега <code>keywords</code></li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/204/3.jpg\" class=\"zoom\"><img src=\"/files/blog/204/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/204/4.jpg\" class=\"zoom\"><img src=\"/files/blog/204/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЧтобы получить пользовательские поля в коде компонента:\r\n</p>\r\n[php]\r\n/*...*/\r\nif ($this->StartResultCache(false, $cacheDependence)) {\r\n    // какие поля раздела инфоблока выбираем\r\n    $arSelect = array(\r\n        \'ID\',\r\n        \'NAME\',\r\n        \'DESCRIPTION\',\r\n        \'UF_*\' // получаем пользовательские поля\r\n    );\r\n\r\n    // условия выборки раздела инфоблока\r\n    $arFilter = array(\r\n        \'IBLOCK_ID\' => $arParams[\'IBLOCK_ID\'],\r\n        \'ACTIVE\' => \'Y\',\r\n        \'ID\' => $arParams[\'SECTION_ID\']\r\n    );\r\n\r\n    // выполняем запрос к базе данных\r\n    $rsSection = CIBlockSection::GetList(array(), $arFilter, false, $arSelect);\r\n    // устанавливаем шаблон пути для раздела, вместо того,\r\n    // который указан в настройках информационного блока\r\n    $rsSection->SetUrlTemplates(\'\', $arParams[\'SECTION_URL\']);\r\n    $arResult = $rsSection->GetNext();\r\n    \r\n    if (isset($arResult[\'ID\'])) { // данные получены успешно?\r\n        /*...*/\r\n        $this->SetResultCacheKeys(\r\n            array(\r\n                \'ID\',\r\n                \'UF_SECT_DESCR\',\r\n                \'UF_SECT_KEYWRD\'\r\n            )\r\n        );\r\n        $this->IncludeComponentTemplate();\r\n    } else { // какие-то проблемы\r\n        $this->AbortResultCache();\r\n        \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n            trim($arParams[\'MESSAGE_404\']) ?: \'Раздел инфоблока не найден\',\r\n            true,\r\n            $arParams[\'SET_STATUS_404\'] === \'Y\',\r\n            $arParams[\'SHOW_404\'] === \'Y\',\r\n            $arParams[\'FILE_404\']\r\n        );\r\n    }\r\n}\r\n/*...*/\r\n[/php]\r\n<p>\r\nТеперь можем установить значения мета-тегов для страницы раздела инфоблока — либо ниже по коду компонента:\r\n<p>\r\n[php]\r\n/*...*/\r\nif ($this->StartResultCache(false, $cacheDependence)) {\r\n    /*\r\n     * Здесь код, который получает данные о разделе инфоблока из базы данных\r\n     */\r\n\r\n    if (isset($arResult[\'ID\'])) { // данные получены успешно?\r\n        /*...*/\r\n        $this->SetResultCacheKeys(\r\n            array(\r\n                \'ID\',\r\n                \'UF_SECT_DESCR\',\r\n                \'UF_SECT_KEYWRD\'\r\n            )\r\n        );\r\n        $this->IncludeComponentTemplate();\r\n    } else { // какие-то проблемы\r\n        $this->AbortResultCache();\r\n        \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n            trim($arParams[\'MESSAGE_404\']) ?: \'Раздел инфоблока не найден\',\r\n            true,\r\n            $arParams[\'SET_STATUS_404\'] === \'Y\',\r\n            $arParams[\'SHOW_404\'] === \'Y\',\r\n            $arParams[\'FILE_404\']\r\n        );\r\n    }\r\n}\r\n\r\n// кэш не затронет все действия ниже, здесь работаем уже с другим $arResult\r\nif (isset($arResult[\'ID\'])) {\r\n    // устанавливаем мета-теги с помощью отложенной функции\r\n    $GLOBALS[\'APPLICATION\']->SetPageProperty(\'description\', $arResult[\'UF_SECT_DESCR\']);\r\n    $GLOBALS[\'APPLICATION\']->SetPageProperty(\'keywords\', $arResult[\'UF_SECT_KEYWRD\']);\r\n}\r\n[/php]\r\n<p>\r\nлибо в файле <code>component_epilog.php</code>, который никогда не кешируется:\r\n</p>\r\n[php]\r\n<?php\r\nif (!defined(\"B_PROLOG_INCLUDED\") || B_PROLOG_INCLUDED!==true) die();\r\n\r\n// устанавливаем мета-теги с помощью отложенной функции\r\n$GLOBALS[\'APPLICATION\']->SetPageProperty(\'description\', $arResult[\'UF_SECT_DESCR\']);\r\n$GLOBALS[\'APPLICATION\']->SetPageProperty(\'keywords\', $arResult[\'UF_SECT_KEYWRD\']);\r\n[/php]\r\n\r\n<div class=\"note\">\r\n<p>\r\nОтложенные функции — технология, позволяющая задавать заголовок страницы, пункты навигационной цепочки, CSS стили, дополнительные кнопки в панель управления, мета-теги и т.п. с помощью функций, используемых непосредственно в теле страницы. Соответствующие результаты работы этих функций выводятся в прологе, то есть выше по коду, чем они были заданы.\r\n</p>\r\n<p>\r\nТехнология была создана в первую очередь для использования в компонентах, которые, как правило, выводятся в теле страницы, но при этом внутри них могут быть заданы заголовок страницы, добавлен пункт в навигационную цепочку, добавлена кнопка в панель управления и так далее. Отложенные функции нельзя использовать в файлах шаблона компонента <code>template.php</code> и <code>result_modifier.php</code> (так как результаты их выполнения кешируются).\r\n</p>\r\n</div>\r\n\r\n<p>\r\nОбратите внимание, что нативные компоненты Битрикс могут сами устанавливать мета-теги <code>descriptoin</code> и <code>keywords</code>. И тем самым переопределять значения, установленные в <code>component_epilog.php</code>. Вот типичный код нативного компонента:\r\n</p>\r\n[php]\r\n/*...*/\r\nif ($this->StartResultCache(false, $cacheDependence)) {\r\n    /*...*/\r\n    $this->SetResultCacheKeys(\r\n        array(\r\n            \'ID\',\r\n            \'IBLOCK_ID\',\r\n            \'NAME\',\r\n            \'PATH\',\r\n            \'IPROPERTY_VALUES\'\r\n        )\r\n    );\r\n    // подключаем шаблон компонента\r\n    $this->IncludeComponentTemplate();\r\n}\r\n\r\n// этот код отработает уже после кода component_epilog.php\r\nif (isset($arResult[\'ID\'])) {\r\n    /*...*/\r\n    // установить мета-тег keywords?\r\n    if ($arParams[\'SET_META_KEYWORDS\'] == \'Y\' && $arResult[\'IPROPERTY_VALUES\'][\'SECTION_META_KEYWORDS\'] != \'\') {\r\n        $APPLICATION->SetPageProperty(\'keywords\', $arResult[\'IPROPERTY_VALUES\'][\'SECTION_META_KEYWORDS\']);\r\n    }\r\n    // установить мета-тег description?\r\n    if ($arParams[\'SET_META_DESCRIPTION\'] == \'Y\' && $arResult[\'IPROPERTY_VALUES\'][\'SECTION_META_DESCRIPTION\'] != \'\') {\r\n        $APPLICATION->SetPageProperty(\'description\', $arResult[\'IPROPERTY_VALUES\'][\'SECTION_META_DESCRIPTION\']);\r\n    }\r\n    /*...*/\r\n}\r\n[/php]\r\n\r\n<h2>Пользовательские поля других объектов</h2>\r\n<p>\r\nПользовательское поле — инструмент, позволяющий добавлять к объектам системы поля, не предусмотренные штатным функционалом. Пользовательские поля могут создаваться в неограниченном количестве для каждого объекта. При выборе того или иного типа пользовательского поля становятся доступными дополнительные поля настройки для соответствующего типа.\r\n</p>\r\n\r\n<div class=\"note\">\r\nНеобходимо отличать <strong>Пользовательские поля</strong> в модулях Битрикс и свойства, используемые в рамках инфоблоков, хотя для обозначения этих сущностей используется один термин — пользовательские свойства. Пользовательское поле — сущность более универсальная, так как их можно задать для разных объектов системы (в отличие от свойств элементов инфоблока). Но более ограниченная по возможностям, так как имеет небольшое число типов данных.\r\n</div>\r\n\r\n<p>\r\nПрименение пользовательских полей в Битрикс в привязке к тем или иным модулям, задаётся с помощью объектов, которые необходимо указать при создании поля. Не все модули имеют объекты для пользовательских полей по умолчанию. Разработчик может создавать собственные объекты, но надо понимать, что в методах <code>GetList()</code> поддерживаются только системные объекты:\r\n</p>\r\n\r\n<table class=\"data-table\">\r\n    <tr>\r\n        <th colspan=\"3\">Штатные объекты пользовательских полей</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Модуль</th>\r\n        <th>Объект</th>\r\n        <th>Описание</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Главный модуль</td>\r\n        <td><code>USER</code></td>\r\n        <td>для пользователя</td>\r\n    </tr>\r\n    <tr>\r\n        <td rowspan=\"3\">Блоги</td>\r\n        <td><code>BLOG_BLOG</code></td>\r\n        <td>для блога</td>\r\n    </tr>\r\n    <tr>\r\n        <td><code>BLOG_POST</code></td>\r\n        <td>для сообщения в блоге</td>\r\n    </tr>\r\n    <tr>\r\n        <td><code>BLOG_COMMENT</code></td>\r\n        <td>для комментария сообщения</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Задачи</td>\r\n        <td><code>TASKS_TASK</code></td>\r\n        <td>для задач</td>\r\n    </tr>\r\n    <tr>\r\n        <td rowspan=\"2\">Информационные блоки</td>\r\n        <td><code>IBLOCK_N_SECTION</code></td>\r\n        <td>для секций инфоблока с <code>ID=N</code></td>\r\n    </tr>\r\n    <tr>\r\n        <td><code>IBLOCK_N</code></td>\r\n        <td>Для инфоблока с <code>ID=N</code></td>\r\n    </tr>\r\n    <tr>\r\n        <td>Календарь</td>\r\n        <td><code>CALENDAR_EVENT</code></td>\r\n        <td>для событий календаря</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Обучение</td>\r\n        <td><code>LEARN_ATTEMPT</code></td>\r\n        <td>для попыток теста</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Социальная сеть</td>\r\n        <td><code>SONET_GROUP</code></td>\r\n        <td>для групп соцсети</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Библиотека документов</td>\r\n        <td><code>WEBDAV</code></td>\r\n        <td>для библиотек документов</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Форум</td>\r\n        <td><code>FORUM_MESSAGE</code></td>\r\n        <td>для сообщений форума</td> \r\n    </tr>\r\n    <tr>\r\n        <td>Highload-блоки</td>\r\n        <td><code>HLBLOCK_N</code></td>\r\n        <td>для highload-блока с <code>ID=N</code></td>\r\n    </tr>\r\n</table>','2018-10-17 17:13:15',1),(206,5,'Отслеживание активности вкладки браузера','','','JavaScript, PageVisibilityAPI, Web-разработка, pause, play, video, visibilityState, visibilitychange, Браузер, Видео, Вкладка, Событие','С недавнего времени в новых браузерах появилось Page Visibility API, которое позволяет узнать, находится ли страница в активной вкладке браузера. Свойство visibilityState объекта document может принимать значение visible, hidden или prerender. C visible и hidden все понятно, а prerender означает, что страница находится в состоянии отрисовки.','<p>\r\nС недавнего времени в новых браузерах появилось <code>Page Visibility API</code>, которое позволяет узнать, находится ли страница в активной вкладке браузера. Свойство <code>visibilityState</code> объекта <code>document</code> может принимать значение <code>visible</code>, <code>hidden</code> или <code>prerender</code>. C <code>visible</code> и <code>hidden</code> все понятно, а <code>prerender</code> означает, что содержимое страницы в настоящее время находится в состоянии отрисовки.\r\n</p>\r\n<p>\r\nКогда значение этого свойства изменяется, возникает событие <code>visibilitychange</code>:\r\n</p>\r\n[js]\r\ndocument.addEventListener(\"visibilitychange\", function() {\r\n    console.log(document.visibilityState);\r\n    console.log(document.hidden);\r\n});\r\n[/js]\r\n<p>\r\nКак нетрудно догадаться, свойство <code>hidden</code> объекта <code>document</code> принимает значение <code>true</code>, если документ не видно вообще. Как правило, это означает, что документ свернули. Если свойство имеет значение <code>false</code> — любая часть документа открыта.\r\n</p>\r\n\r\n<h2>Приостановка воспроизведения видео</h2>\r\n<p>\r\nКод, который приостанавливает видео, когда происходит переключение на другую вкладку и воспроизводит снова, когда происходит возврат:\r\n</p>\r\n[html]\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n    <title>Page Visibility API</title>\r\n    <script type=\"text/javascript\">\r\n    document.addEventListener(\'DOMContentLoaded\', function() {\r\n        var videoElement = document.getElementById(\'videoElement\');\r\n        // отслеживаем активность вкладки браузера\r\n        document.addEventListener(\'visibilitychange\', function() {\r\n            if (document.hidden) { // ставим видео на паузу\r\n                videoElement.pause();\r\n            } else { // продолжаем воспроизведение\r\n                videoElement.play();\r\n            }\r\n        });\r\n        // для наглядности изменим title при переключении вкладки\r\n        videoElement.addEventListener(\'pause\', function() {\r\n            document.title = \'Видео на паузе\';\r\n        });\r\n        videoElement.addEventListener(\'play\', function() {\r\n            document.title = \'Воспроизведение\'; \r\n        });\r\n    });\r\n    </script>\r\n</head>\r\n<body>\r\n    <h1>Page Visibility API</h1>\r\n    <video id=\"videoElement\" controls poster=\"thumbnail.jpg\">\r\n        <source src=\".....\" type=\"video/mp4\">\r\n        <source src=\".....\" type=\"video/webm\">\r\n        <p>Проблемы с воспроизведением видео, попробуйте другой браузер.</p>\r\n    </video>\r\n</body>\r\n</html>\r\n[/html]','2018-10-22 17:47:40',1),(205,17,'Битрикс. Пользовательские свойства элемента инфоблока','','','CMS, Web-разработка, Битрикс, Инфоблок, ПользовательскиеСвойства, ЭлементИнфоблока','Информационный блок — модуль, позволяющий публиковать различные типы информации: товары, новости, статьи, фотографии. Поскольку нельзя заранее сказать, какие свойства потребуются для описания элемента инфоблока — в Битрикс предусмотрено создание пользовательских свойств, кроме предопределенных.','<p>\r\nИнформационный блок — модуль, позволяющий публиковать различные типы информации: товары, новости, статьи, фотографии. Поскольку нельзя заранее сказать, какие свойства потребуются для описания элемента инфоблока — в Битрикс предусмотрено создание пользовательских свойств, кроме предопределенных.\r\n</p>\r\n<p>\r\nДавайте создадим пять пользовательских свойств разного типа и посмотрим, как их в дальнейшем получить из БД и вывести в шаблоне. В панели управления переходим на страницу добавления/редактирования инфоблока, вкладка «Свойства» и добавляем свойства\r\n</p>\r\n<ul>\r\n  <li><code>AUTHOR</code> — автор публикации, тип «Строка»</li>\r\n  <li><code>RATING</code> — рейтинг публикации, тип «Список»</li>\r\n  <li><code>GALLERY</code> — прикрепленные изображения, тип «Файл»</li>\r\n  <li><code>UPDATE</code> — дата обновления, тип «Дата»</li>\r\n  <li><code>NOTE</code> — примечание к публикации, тип «HTML/Текст»</li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/205/1.jpg\" class=\"zoom\"><img src=\"/files/blog/205/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nТеперь на странице добавления/редактирования элемента инфоблока мы можем задать значения этих свойств:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/205/2.jpg\" class=\"zoom\"><img src=\"/files/blog/205/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nНативные компоненты Битрикс в настройках позволяют указать, какие пользовательские свойства должны быть доступны в шаблоне. Мы сделаем это сами:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.element/component.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\nif (!CModule::IncludeModule(\'iblock\')) {\r\n    ShowError(\'Модуль «Информационные блоки» не установлен\');\r\n    return;\r\n}\r\n\r\n/*...*/\r\n\r\nif ($this->StartResultCache(false, ($arParams[\'CACHE_GROUPS\']===\'N\' ? false: $USER->GetGroups()))) {\r\n\r\n    // какие поля элемента инфоблока выбираем\r\n    $arSelect = array(\r\n        \'ID\',         // идентификатор элемента\r\n        \'NAME\',       // название этого элемента\r\n        /*...*/\r\n        \'PROPERTY_*\', // пользовательские свойства\r\n    );\r\n    // условия выборки элемента инфоблока\r\n    $arFilter = array(\r\n        /*...*/\r\n    );\r\n\r\n    // выполняем запрос к базе данных\r\n    $rsElement = CIBlockElement::GetList(\r\n        array(),   // сортировка\r\n        $arFilter, // фильтр\r\n        false,     // группировка\r\n        false,     // постраничная навигация\r\n        $arSelect  // поля\r\n    );\r\n\r\n    // устанавливаем шаблоны путей для раздела и элемента\r\n    $rsElement->SetUrlTemplates($arParams[\'ELEMENT_URL\'], $arParams[\'SECTION_URL\']);\r\n\r\n    if ($obElement = $rsElement->GetNextElement()) {\r\n\r\n        $arResult = $obElement->GetFields();\r\n\r\n        // пользовательские свойства\r\n        $arResult[\'PROPERTIES\'] = $obElement->GetProperties();\r\n\r\n        // получаем значения пользовательских свойст в удобном для отображения виде\r\n        foreach ($arResult[\'PROPERTIES\'] as $code => $data) {\r\n            $arResult[\'DISPLAY_PROPERTIES\'][$code] = CIBlockFormatProperties::GetDisplayValue($arResult, $data, \'\');\r\n        }\r\n\r\n        /*\r\n         * Добавляем в массив arResult дополнительные элементы, которые могут потребоваться в шаблоне\r\n         */\r\n\r\n        /*...*/\r\n    }\r\n    \r\n    if (isset($arResult[\'ID\'])) {\r\n        $this->SetResultCacheKeys(\r\n            /*...*/\r\n        );\r\n        $this->IncludeComponentTemplate();\r\n    } else {\r\n        $this->AbortResultCache();\r\n        \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n             /*...*/\r\n        );\r\n    }\r\n\r\n}\r\n[/php]\r\n<p>\r\nТеперь массив <code>$arResult</code> имеет вид:\r\n</p>\r\n[code]\r\nArray\r\n(\r\n    [ID] => 349\r\n    [CODE] => afganskaya-borzaya\r\n    [IBLOCK_ID] => 5\r\n    [IBLOCK_SECTION_ID] => 28\r\n    [NAME] => Афганская борзая\r\n    [DETAIL_PICTURE] => 1011\r\n    [DETAIL_TEXT] => Lorem ipsum dolor sit amet, consectetur adipiscing elit...\r\n    [DETAIL_PAGE_URL] => /demo/item/id/349/\r\n    [IBLOCK_TYPE_ID] => content\r\n    [IBLOCK_CODE] => articles\r\n    [SECTION_PAGE_URL] => /demo/category/id/28/\r\n    ..........\r\n    [red][PROPERTIES] => Array\r\n        (\r\n            [AUTHOR] => Array\r\n                (\r\n                    [ID] => 47\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Автор\r\n                    [CODE] => AUTHOR\r\n                    [PROPERTY_TYPE] => S\r\n                    [PROPERTY_VALUE_ID] => 1\r\n                    [VALUE] => Сергей Иванов\r\n                    ..........\r\n                )\r\n            [RATING] => Array\r\n                (\r\n                    [ID] => 48\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Оценка\r\n                    [CODE] => RATING\r\n                    [PROPERTY_TYPE] => L \r\n                    [PROPERTY_VALUE_ID] => 2\r\n                    [VALUE] => Интересно\r\n                    ..........\r\n                )\r\n            [GALLERY] => Array\r\n                (\r\n                    [ID] => 49\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Галерея\r\n                    [CODE] => GALLERY\r\n                    [PROPERTY_TYPE] => F\r\n                    [FILE_TYPE] => jpg, gif, bmp, png, jpeg\r\n                    [PROPERTY_VALUE_ID] => Array\r\n                        (\r\n                            [0] => 3\r\n                            [1] => 4\r\n                            [2] => 5\r\n                        )\r\n                    [VALUE] => Array\r\n                        (\r\n                            [0] => 1034\r\n                            [1] => 1035\r\n                            [2] => 1036\r\n                        )\r\n                    ..........\r\n                )\r\n            [UPDATE] => Array\r\n                (\r\n                    [ID] => 50\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Дата обновления\r\n                    [CODE] => UPDATE\r\n                    [PROPERTY_TYPE] => S\r\n                    [PROPERTY_VALUE_ID] => 6\r\n                    [VALUE] => 19.10.2018\r\n                    ..........\r\n                )\r\n            [NOTE] => Array\r\n                (\r\n                    [ID] => 51\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Примечание\r\n                    [CODE] => NOTE\r\n                    [PROPERTY_TYPE] => S\r\n                    [PROPERTY_VALUE_ID] => 7\r\n                    [VALUE] => Array\r\n                        (\r\n                            [TEXT] => Примечание к публикации...\r\n                            [TYPE] => TEXT\r\n                        )\r\n                    ..........\r\n                )\r\n        )[/red]\r\n   [grn][DISPLAY_PROPERTIES] => Array\r\n        (\r\n            [AUTHOR] => Array\r\n                (\r\n                    [ID] => 47\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Автор\r\n                    [CODE] => AUTHOR\r\n                    [PROPERTY_TYPE] => S \r\n                    [PROPERTY_VALUE_ID] => 1\r\n                    [VALUE] => Сергей Иванов \r\n                    [DISPLAY_VALUE] => Сергей Иванов\r\n                    ..........\r\n                )\r\n            [RATING] => Array\r\n                (\r\n                    [ID] => 48\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Оценка\r\n                    [CODE] => RATING\r\n                    [PROPERTY_TYPE] => L\r\n                    [PROPERTY_VALUE_ID] => 2\r\n                    [VALUE] => Интересно\r\n                    [DISPLAY_VALUE] => Интересно\r\n                    ..........\r\n                )\r\n            [GALLERY] => Array\r\n                (\r\n                    [ID] => 49\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Галерея\r\n                    [CODE] => GALLERY\r\n                    [PROPERTY_TYPE] => F \r\n                    [FILE_TYPE] => jpg, gif, bmp, png, jpeg \r\n                    [PROPERTY_VALUE_ID] => Array\r\n                        (\r\n                            [0] => 3\r\n                            [1] => 4\r\n                            [2] => 5\r\n                        )\r\n                    [VALUE] => Array\r\n                        (\r\n                            [0] => 1034\r\n                            [1] => 1035\r\n                            [2] => 1036\r\n                        )\r\n                    [FILE_VALUE] => Array\r\n                        (\r\n                            [0] => Array\r\n                                (\r\n                                    [ID] => 1034\r\n                                    [MODULE_ID] => iblock\r\n                                    [HEIGHT] => 300\r\n                                    [WIDTH] => 400\r\n                                    [FILE_SIZE] => 33085\r\n                                    [CONTENT_TYPE] => image/jpeg \r\n                                    [SRC] => /upload/iblock/ef1/ef1a80087669d483faa9c3db3441985a.jpg\r\n                                    ..........\r\n                                )\r\n                            [1] => Array\r\n                                (\r\n                                    [ID] => 1035\r\n                                    [MODULE_ID] => iblock\r\n                                    [HEIGHT] => 300\r\n                                    [WIDTH] => 400\r\n                                    [FILE_SIZE] => 45306\r\n                                    [CONTENT_TYPE] => image/jpeg\r\n                                    [SRC] => /upload/iblock/b96/b96bb594c3bc5580a972f993e05f7317.jpg\r\n                                    ..........\r\n                                )\r\n                            [2] => Array\r\n                                (\r\n                                    [ID] => 1036\r\n                                    [MODULE_ID] => iblock\r\n                                    [HEIGHT] => 300\r\n                                    [WIDTH] => 400\r\n                                    [FILE_SIZE] => 24919\r\n                                    [CONTENT_TYPE] => image/jpeg \r\n                                    [SRC] => /upload/iblock/18c/18ca914388b75729618a412afd3f464b.jpg\r\n                                    ..........\r\n                                )\r\n                        )\r\n                )\r\n            [UPDATE] => Array\r\n                (\r\n                    [ID] => 50\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Дата обновления\r\n                    [CODE] => UPDATE\r\n                    [PROPERTY_TYPE] => S\r\n                    [PROPERTY_VALUE_ID] => 6\r\n                    [VALUE] => 19.10.2018\r\n                    [DISPLAY_VALUE] => 19.10.2018\r\n                    ..........\r\n                )\r\n            [NOTE] => Array\r\n                (\r\n                    [ID] => 51\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Примечание\r\n                    [CODE] => NOTE\r\n                    [PROPERTY_TYPE] => S\r\n                    [PROPERTY_VALUE_ID] => 7\r\n                    [VALUE] => Array\r\n                        (\r\n                            [TEXT] => Примечание к публикации...\r\n                            [TYPE] => TEXT\r\n                        )\r\n                    [DISPLAY_VALUE] => Примечание к публикации...\r\n                    ..........\r\n                )\r\n        )[/grn]\r\n)\r\n[/code]\r\n<p>\r\nВсе готово, можем показать пользовательские свойства в шаблоне:\r\n</p>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/components/demo/iblock.element/templates/.default/template.php\r\n */\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n$this->setFrameMode(true);\r\n?>\r\n\r\n<h1><?php $APPLICATION->ShowTitle(false); /* Выводим «Заголовок страницы» */ ?></h1>\r\n\r\n<article id=\"iblock-element\">\r\n\r\n    <?php if (!empty($arResult[\'DETAIL_PICTURE\'])): /* детальная картинка элемента инфоблока */ ?>\r\n        <img src=\"<?= $arResult[\'DETAIL_PICTURE\'][\'SRC\']; ?>\"\r\n             alt=\"<?= $arResult[\'DETAIL_PICTURE\'][\'ALT\']; ?>\"\r\n             title=\"<?= $arResult[\'DETAIL_PICTURE\'][\'TITLE\']; ?>\" />\r\n    <?php endif; ?>\r\n\r\n    <?php if (!empty($arResult[\'DETAIL_TEXT\'])): /* детальная информация об элементе инфоблока */ ?>\r\n        <div id=\"iblock-element-detail\">\r\n        <?= $arResult[\'DETAIL_TEXT\']; ?>\r\n        </div>\r\n    <?php endif; ?>\r\n\r\n    <?php if (!empty($arResult[\'DISPLAY_PROPERTIES\'][\'GALLERY\'][\'FILE_VALUE\'])): /* галерея для элемента инфоблока */ ?>\r\n        <div id=\"iblock-element-gallery\">\r\n        <?php foreach ($arResult[\'DISPLAY_PROPERTIES\'][\'GALLERY\'][\'FILE_VALUE\'] as $item): ?>\r\n            <a href=\"<?= $item[\'SRC\']; ?>\"><img src=\"<?= $item[\'SRC\']; ?>\" alt=\"\" /></a>\r\n        <?php endforeach; ?>\r\n        </div>\r\n    <?php endif; ?>\r\n\r\n    <?php if (!empty($arResult[\'PROPERTIES\'][\'NOTE\'][\'VALUE\'][\'TEXT\'])): /* примечание к элементу инфоблока */ ?>\r\n        <div id=\"iblock-element-note\">\r\n            <h3>Примечание</h3>\r\n            <div>\r\n            <?php if ($arResult[\'PROPERTIES\'][\'NOTE\'][\'VALUE\'][\'TYPE\'] == \'HTML\'): ?>\r\n                <?= $arResult[\'PROPERTIES\'][\'NOTE\'][\'VALUE\'][\'TEXT\']; ?>\r\n            <?php else: ?>\r\n                <?= nl2br($arResult[\'PROPERTIES\'][\'NOTE\'][\'VALUE\'][\'TEXT\']); ?>\r\n            <?php endif; ?>\r\n            </div>\r\n        </div>\r\n    <?php endif; ?>\r\n    \r\n    <p>Автор публикации: <?= $arResult[\'PROPERTIES\'][\'AUTHOR\'][\'VALUE\']; /* автор публикации */ ?></p>\r\n    <p>Оценка читателей: <?= $arResult[\'PROPERTIES\'][\'RATING\'][\'VALUE\']; /* рейтинг публикации */ ?></p>\r\n    <p>Количество просмотров: <?= $arResult[\'SHOW_COUNTER\'] ? $arResult[\'SHOW_COUNTER\'] : 0; ?></p>\r\n    <p><a href=\"<?= $arResult[\'SECTION\'][\'SECTION_PAGE_URL\']; ?>\">Назад в раздел</a></p>\r\n\r\n</article>\r\n[/phtml]','2018-10-19 12:23:24',1),(207,17,'Битрикс. Создание своего модуля. Часть 1','','','CMS, OnBeforeEndBufferContent, Web-разработка, doInstall, doUninstall, step.php, unstep.php, version.php, Битрикс, Модуль, Прокрутка, Событие, Установка, registerAutoloadClasses, registerModule, unRegisterModule, registerEventHandler, unRegisterEventHandler, CopyDirFiles, deleteDirectory','Наш модуль после установки добавляет на страницы сайта кнопку плавной прокрутки страницы вверх. Какие файлы и папки могут и должны быть, можно изучить в соответствующем разделе документации Битрикс. Модуль разместим в директории local/modules и создадим такую файловую структуру…','<p>\r\nНаш модуль после установки добавляет на страницы сайта кнопку плавной прокрутки страницы вверх. Какие файлы и папки могут и должны быть, можно изучить в соответствующем <a href=\"https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=43&LESSON_ID=2823\">разделе документации</a> Битрикс. Модуль разместим в директории <code>local/modules</code> и создадим такую файловую структуру:\r\n</p>\r\n[code]\r\n[red][scrollup][/red]\r\n    [grn][install]\r\n        [assets]\r\n            [scripts][/grn]\r\n                script.js\r\n            [grn][styles][/grn]\r\n                style.css\r\n        index.php\r\n        step.php\r\n        unstep.php\r\n        version.php\r\n    [grn][lang]\r\n        [ru]\r\n            [install][/grn]\r\n                index.php\r\n            options.php\r\n    [grn][lib][/grn]\r\n        Main.php\r\n    include.php\r\n    options.php\r\n[/code]\r\n<p>\r\nКак видите, внутри <code>local/modules/scrollup</code> у нас:\r\n</p>\r\n<ul>\r\n  <li><code>install</code> — набор скриптов для установки и удаления модуля;</li>\r\n  <li><code>lang</code> — набор языковых файлов модуля;</li>\r\n  <li><code>lib</code> — набор файлов, в которых реализуется логика решения;</li>\r\n  <li><code>include.php</code> — файл, подключаемый при вызове модуля в коде;</li>\r\n  <li><code>options.php</code> — страница настроек, подключаемая в административной части.</li>\r\n</ul>\r\n<p>\r\nРассмотрим подробнее папку <code>install</code>:\r\n</p>\r\n<ul>\r\n  <li><code>assets</code> — содержит JavaScript и CSS кнопки, которые будут подключаться в пользовательской части;</li>\r\n  <li><code>index.php</code> — файл, в котором содержится описание модуля и реализуется его установка и удаление;</li>\r\n  <li><code>step.php</code> и <code>unset.php</code> — соответственно шаги установки и удаления, их может быть несколько;</li>\r\n  <li><code>version.php</code> — файл содержит версию и время обновления нашего модуля.</li>\r\n</ul>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/modules/scrollup/install/version.php\r\n */\r\n\r\n$arModuleVersion = array(\r\n    \'VERSION\'      => \'1.0.0\',\r\n    \'VERSION_DATE\' => \'2018-10-20 11:00:00\'\r\n);\r\n[/php]\r\n<p>\r\nТеперь нам нужно написать класс, в котором будет реализована установка и удаление модуля. Имя класса должно совпадать с директорией модуля и являться наследником от <code>CModule</code>. Метод <code>doInstall()</code> вызывается при установке модуля из панели управления, метод <code>doUninstall()</code> — при деинсталляции модуля. Метод <code>doInstall()</code> подключает файл <code>step.php</code>, а метод <code>doUninstall()</code> — файл <code>unstep.php</code>\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/modules/scrollup/install/index.php\r\n */\r\n\r\nuse Bitrix\\Main\\Localization\\Loc;\r\nuse Bitrix\\Main\\ModuleManager;\r\nuse Bitrix\\Main\\Config\\Option;\r\nuse Bitrix\\Main\\EventManager;\r\nuse Bitrix\\Main\\Application;\r\nuse Bitrix\\Main\\IO\\Directory;\r\n\r\nLoc::loadMessages(__FILE__);\r\n\r\nclass scrollup extends CModule {\r\n\r\n    public function __construct() {\r\n        if (is_file(__DIR__.\'/version.php\')) {\r\n            include_once(__DIR__.\'/version.php\');\r\n            $this->MODULE_ID           = get_class($this);\r\n            $this->MODULE_VERSION      = $arModuleVersion[\'VERSION\'];\r\n            $this->MODULE_VERSION_DATE = $arModuleVersion[\'VERSION_DATE\'];\r\n            $this->MODULE_NAME         = Loc::getMessage(\'SCROLLUP_NAME\');\r\n            $this->MODULE_DESCRIPTION  = Loc::getMessage(\'SCROLLUP_DESCRIPTION\');\r\n        } else {\r\n            CAdminMessage::showMessage(\r\n                Loc::getMessage(\'SCROLLUP_FILE_NOT_FOUND\').\' version.php\'\r\n            );\r\n        }\r\n    }\r\n    \r\n    public function doInstall() {\r\n\r\n        global $APPLICATION;\r\n\r\n        // мы используем функционал нового ядра D7 — поддерживает ли его система?\r\n        if (CheckVersion(ModuleManager::getVersion(\'main\'), \'14.00.00\')) {\r\n            // копируем файлы, необходимые для работы модуля\r\n            $this->installFiles();\r\n            // создаем таблицы БД, необходимые для работы модуля\r\n            $this->installDB();\r\n            // регистрируем модуль в системе\r\n            ModuleManager::registerModule($this->MODULE_ID);\r\n            // регистрируем обработчики событий\r\n            $this->installEvents();\r\n        } else {\r\n            CAdminMessage::showMessage(\r\n                Loc::getMessage(\'SCROLLUP_INSTALL_ERROR\')\r\n            );\r\n            return;\r\n        }\r\n\r\n        $APPLICATION->includeAdminFile(\r\n            Loc::getMessage(\'SCROLLUP_INSTALL_TITLE\').\' «\'.Loc::getMessage(\'SCROLLUP_NAME\').\'»\',\r\n            __DIR__.\'/step.php\'\r\n        );\r\n    }\r\n    \r\n    public function installFiles() {\r\n        // копируем js-файлы, необходимые для работы модуля\r\n        CopyDirFiles(\r\n            __DIR__.\'/assets/scripts\',\r\n            Application::getDocumentRoot().\'/bitrix/js/\'.$this->MODULE_ID.\'/\',\r\n            true,\r\n            true\r\n        );\r\n        // копируем css-файлы, необходимые для работы модуля\r\n        CopyDirFiles(\r\n            __DIR__.\'/assets/styles\',\r\n            Application::getDocumentRoot().\'/bitrix/css/\'.$this->MODULE_ID.\'/\',\r\n            true,\r\n            true\r\n        );\r\n    }\r\n    \r\n    public function installDB() {\r\n        return;\r\n    }\r\n\r\n    public function installEvents() {\r\n        // перед выводом буферизированного контента добавим свой HTML код,\r\n        // в котором сохраним настройки для нашей кнопки прокрутки наверх\r\n        EventManager::getInstance()->registerEventHandler(\r\n            \'main\',\r\n            \'OnBeforeEndBufferContent\',\r\n            $this->MODULE_ID,\r\n            \'ScrollUp\\\\Main\',\r\n            \'appendJavaScriptAndCSS\'\r\n        );\r\n    }\r\n\r\n    public function doUninstall() {\r\n\r\n        global $APPLICATION;\r\n\r\n        $this->uninstallFiles();\r\n        $this->uninstallDB();\r\n        $this->uninstallEvents();\r\n\r\n        ModuleManager::unRegisterModule($this->MODULE_ID);\r\n\r\n        $APPLICATION->includeAdminFile(\r\n            Loc::getMessage(\'SCROLLUP_UNINSTALL_TITLE\').\' «\'.Loc::getMessage(\'SCROLLUP_NAME\').\'»\',\r\n            __DIR__.\'/unstep.php\'\r\n        );\r\n\r\n    }\r\n\r\n    public function uninstallFiles() {\r\n        // удаляем js-файлы\r\n        Directory::deleteDirectory(\r\n            Application::getDocumentRoot().\'/bitrix/js/\'.$this->MODULE_ID\r\n        );\r\n        // удаляем css-файлы\r\n        Directory::deleteDirectory(\r\n            Application::getDocumentRoot().\'/bitrix/css/\'.$this->MODULE_ID\r\n        );\r\n        // удаляем настройки нашего модуля\r\n        Option::delete($this->MODULE_ID);\r\n    }\r\n    \r\n    public function uninstallDB() {\r\n        return;\r\n    }\r\n    \r\n    public function uninstallEvents() {\r\n        // удаляем наш обработчик события\r\n        EventManager::getInstance()->unRegisterEventHandler(\r\n            \'main\',\r\n            \'OnBeforeEndBufferContent\',\r\n            $this->MODULE_ID,\r\n            \'ScrollUp\\\\Main\',\r\n            \'appendJavaScriptAndCSS\'\r\n        );\r\n    }\r\n\r\n}\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/modules/scrollup/lang/ru/install/index.php\r\n */\r\n\r\n$MESS[\'SCROLLUP_NAME\']              = \'Кнопка «Наверх»\';\r\n$MESS[\'SCROLLUP_DESCRIPTION\']       = \'Добавляет на сайт кнопку плавной прокрутки наверх.\';\r\n\r\n$MESS[\'SCROLLUP_FILE_NOT_FOUND\']    = \'Не найден файл\';\r\n$MESS[\'SCROLLUP_INSTALL_TITLE\']     = \'Установка модуля\';\r\n$MESS[\'SCROLLUP_INSTALL_ERROR\']     = \'Версия главного модуля ниже 14, обновите систему.\';\r\n$MESS[\'SCROLLUP_INSTALL_SUCCESS\']   = \'Модуль успешно установлен\';\r\n$MESS[\'SCROLLUP_INSTALL_FAILED\']    = \'Ошибка при установке модуля\';\r\n\r\n$MESS[\'SCROLLUP_UNINSTALL_TITLE\']   = \'Удаление модуля\';\r\n$MESS[\'SCROLLUP_UNINSTALL_SUCCESS\'] = \'Модуль успешно удален\';\r\n$MESS[\'SCROLLUP_UNINSTALL_FAILED\']  = \'Ошибка при удалении модуля\';\r\n\r\n$MESS[\'SCROLLUP_RETURN_MODULES\']    = \'Вернуться в список модулей\';\r\n[/php]\r\n\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/modules/scrollup/install/step.php\r\n */\r\n\r\nuse Bitrix\\Main\\Localization\\Loc;\r\n\r\nLoc::loadMessages(__FILE__);\r\n\r\nif (!check_bitrix_sessid()) {\r\n    return;\r\n}\r\n\r\nif ($errorException = $APPLICATION->getException()) {\r\n    // ошибка при установке модуля\r\n    CAdminMessage::showMessage(\r\n        Loc::getMessage(\'SCROLLUP_INSTALL_FAILED\').\': \'.$errorException->GetString()\r\n    );\r\n} else {\r\n    // модуль успешно установлен\r\n    CAdminMessage::showNote(\r\n        Loc::getMessage(\'SCROLLUP_INSTALL_SUCCESS\')\r\n    );\r\n}\r\n?>\r\n\r\n<form action=\"<?= $APPLICATION->getCurPage(); ?>\"> <!-- Кнопка возврата к списку модулей -->\r\n    <input type=\"hidden\" name=\"lang\" value=\"<?= LANGUAGE_ID; ?>\" />\r\n    <input type=\"submit\" value=\"<?= Loc::getMessage(\'SCROLLUP_RETURN_MODULES\'); ?>\">\r\n</form>\r\n[/phtml]\r\n\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/modules/scrollup/install/unstep.php\r\n */\r\n\r\nuse Bitrix\\Main\\Localization\\Loc;\r\n\r\nLoc::loadMessages(__FILE__);\r\n\r\nif (!check_bitrix_sessid()){\r\n    return;\r\n}\r\n\r\nif ($errorException = $APPLICATION->getException()) {\r\n    // ошибка при удалении модуля\r\n    CAdminMessage::showMessage(\r\n        Loc::getMessage(\'SCROLLUP_UNINSTALL_FAILED\').\': \'.$errorException->GetString()\r\n    );\r\n} else {\r\n    // модуль успешно удален\r\n    CAdminMessage:showNote(\r\n        Loc::getMessage(\'SCROLLUP_UNINSTALL_SUCCESS\')\r\n    );\r\n}\r\n?>\r\n\r\n<form action=\"<?= $APPLICATION->getCurPage(); ?>\"> <!-- Кнопка возврата к списку модулей -->\r\n    <input type=\"hidden\" name=\"lang\" value=\"<?= LANGUAGE_ID; ?>\" />\r\n    <input type=\"submit\" value=\"<?= Loc::getMessage(\'SCROLLUP_RETURN_MODULES\'); ?>\">\r\n</form>\r\n[/phtml]\r\n<p>\r\nТеперь в панели управления на странице «<em>Настройки • Настройки продукта • Модули</em>» мы видим наш модуль:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/207/1.jpg\" class=\"zoom\"><img src=\"/files/blog/207/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nИ можем установить его:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/207/2.jpg\" class=\"zoom\"><img src=\"/files/blog/207/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nСоздадим страницу настроек для модуля. Через панель управления контент менеджер сможет:\r\n</p>\r\n<ul>\r\n  <li>Включать/выключать модуль;</li>\r\n  <li>Подключать библиотеку jQuery, если она еще не подключена;</li>\r\n  <li>Изменять ширину/высоту/радиус и цвет кнопки;</li>\r\n  <li>Менять положение кнопки и скорость анимации.</li>\r\n</ul>\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/modules/scrollup/options.php\r\n */\r\n\r\nuse Bitrix\\Main\\Localization\\Loc;\r\nuse Bitrix\\Main\\HttpApplication;\r\nuse Bitrix\\Main\\Loader;\r\nuse Bitrix\\Main\\Config\\Option;\r\n\r\nLoc::loadMessages(__FILE__);\r\n\r\n// получаем идентификатор модуля\r\n$request = HttpApplication::getInstance()->getContext()->getRequest();\r\n$module_id = htmlspecialchars($request[\'mid\'] != \'\' ? $request[\'mid\'] : $request[\'id\']);\r\n// подключаем наш модуль\r\nLoader::includeModule($module_id);\r\n\r\n/*\r\n * Параметры модуля со значениями по умолчанию\r\n */\r\n$aTabs = array(\r\n    array(\r\n        /*\r\n         * Первая вкладка «Основные настройки»\r\n         */\r\n        \'DIV\'     => \'edit1\',\r\n        \'TAB\'     => Loc::getMessage(\'SCROLLUP_OPTIONS_TAB_GENERAL\'),\r\n        \'TITLE\'   => Loc::getMessage(\'SCROLLUP_OPTIONS_TAB_GENERAL\'),\r\n        \'OPTIONS\' => array(\r\n            array(\r\n                \'switch_on\',                                   // имя элемента формы\r\n                Loc::getMessage(\'SCROLLUP_OPTIONS_SWITCH_ON\'), // поясняющий текст — «Включить прокрутку»\r\n                \'Y\',                                           // значение по умолчанию «да»\r\n                array(\'checkbox\')                              // тип элемента формы — checkbox\r\n            ),\r\n            array(\r\n                \'jquery_on\',                                   // имя элемента формы\r\n                Loc::getMessage(\'SCROLLUP_OPTIONS_JQUERY_ON\'), // поясняющий текст — «Подключить jQuery»\r\n                \'N\',                                           // значение по умолчанию «нет»\r\n                array(\'checkbox\')                              // тип элемента формы — checkbox\r\n            ),\r\n        )\r\n    ),\r\n    array(\r\n        /*\r\n         * Вторая вкладка «Дополнительные настройки»\r\n         */\r\n        \'DIV\'     => \'edit2\',\r\n        \'TAB\'     => Loc::getMessage(\'SCROLLUP_OPTIONS_TAB_ADDITIONAL\'),\r\n        \'TITLE\'   => Loc::getMessage(\'SCROLLUP_OPTIONS_TAB_ADDITIONAL\'),\r\n        \'OPTIONS\' => array(\r\n            /*\r\n             * секция «Внешний вид»\r\n             */\r\n            Loc::getMessage(\'SCROLLUP_OPTIONS_SECTION_VIEW\'),\r\n            array(\r\n                \'width\',                                    // имя элемента формы\r\n                Loc::getMessage(\'SCROLLUP_OPTIONS_WIDTH\'),  // поясняющий текст — «Ширина (пикселей)»\r\n                \'50\',                                       // значение по умолчанию 50px\r\n                array(\'text\', 5)                            // тип элемента формы — input type=\"text\", ширина 5 симв.\r\n            ),\r\n            array(\r\n                \'height\',                                   // имя элемента формы\r\n                Loc::getMessage(\'SCROLLUP_OPTIONS_HEIGHT\'), // поясняющий текст — «Высота (пикселей)»\r\n                \'50\',                                       // значение по умолчанию 50px\r\n                array(\'text\', 5)                            // тип элемента формы — input type=\"text\", ширина 5 симв.\r\n            ),\r\n            array(\r\n                \'radius\',                                   // имя элемента формы\r\n                Loc::getMessage(\'SCROLLUP_OPTIONS_RADIUS\'), // поясняющий текст — «Радиус (пикселей)»\r\n                \'50\',                                       // значение по умолчанию 50px\r\n                array(\'text\', 5)                            // тип элемента формы — input type=\"text\", ширина 5 симв.\r\n            ),\r\n            array(\r\n                \'color\',                                    // имя элемента формы\r\n                Loc::getMessage(\'SCROLLUP_OPTIONS_COLOR\'),  // поясняющий текст — «Цвет фона»\r\n                \'#bf3030\',                                  // значение по умолчанию #bf3030\r\n                array(\'text\', 5)                            // тип элемента формы — input type=\"text\", ширина 5 симв.\r\n            ),\r\n            /*\r\n             * секция «Положение на странице»\r\n             */\r\n            Loc::getMessage(\'SCROLLUP_OPTIONS_SECTION_LAYOUT\'),\r\n            array(\r\n                \'side\',                                       // имя элемента формы\r\n                Loc::getMessage(\'SCROLLUP_OPTIONS_POSITION\'), // поясняющий текст — «Положение кнопки»\r\n                \'left\',                                       // значение по умолчанию «left»\r\n                array(\r\n                    \'selectbox\',                              // тип элемента формы — <select>\r\n                    array(\r\n                        \'left\'  => Loc::getMessage(\'SCROLLUP_OPTIONS_SIDE_LEFT\'),\r\n                        \'right\' => Loc::getMessage(\'SCROLLUP_OPTIONS_SIDE_RIGHT\')\r\n                    )\r\n                )\r\n            ),\r\n            array(\r\n                \'indent_bottom\',                                   // имя элемента формы\r\n                Loc::getMessage(\'SCROLLUP_OPTIONS_INDENT_BOTTOM\'), // поясняющий текст — «Отступ снизу (пикселей)»\r\n                \'10\',                                              // значение по умолчанию 10px\r\n                array(\'text\', 5)                                   // тип элемента формы — input type=\"text\"\r\n            ),\r\n            array(\r\n                \'indent_side\',                                     // имя элемента формы\r\n                Loc::getMessage(\'SCROLLUP_OPTIONS_INDENT_SIDE\'),   // поясняющий текст — «Отступ сбоку (пикселей)»\r\n                \'10\',                                              // значение по умолчанию 10px\r\n                array(\'text\', 5)                                   // тип элемента формы — input type=\"text\"\r\n            ),\r\n            /*\r\n             * секция «Поведение»\r\n             */\r\n            Loc::getMessage(\'SCROLLUP_OPTIONS_SECTION_ACTION\'),\r\n            array(\r\n                \'speed\',                                   // имя элемента формы\r\n                Loc::getMessage(\'SCROLLUP_OPTIONS_SPEED\'), // поясняющий текст — «Скорость прокрутки»\r\n                \'normal\',                                  // значение по умолчанию «normal»\r\n                array(\r\n                    \'selectbox\',                           // тип элемента формы — <select>\r\n                    array(\r\n                        \'slow\'   => Loc::getMessage(\'SCROLLUP_OPTIONS_SPEED_SLOW\'),\r\n                        \'normal\' => Loc::getMessage(\'SCROLLUP_OPTIONS_SPEED_NORMAL\'),\r\n                        \'fast\'   => Loc::getMessage(\'SCROLLUP_OPTIONS_SPEED_FAST\')\r\n                    )\r\n                )\r\n            )\r\n        )\r\n    )\r\n);\r\n\r\n/*\r\n * Создаем форму для редактирвания параметров модуля\r\n */\r\n$tabControl = new CAdminTabControl(\r\n    \'tabControl\',\r\n    $aTabs\r\n);\r\n\r\n$tabControl->begin();\r\n?>\r\n<form action=\"<?= $APPLICATION->getCurPage(); ?>?mid=<?=$module_id; ?>&lang=<?= LANGUAGE_ID; ?>\" method=\"post\">\r\n    <?= bitrix_sessid_post(); ?>\r\n    <?php\r\n    foreach ($aTabs as $aTab) { // цикл по вкладкам\r\n        if ($aTab[\'OPTIONS\']) {\r\n            $tabControl->beginNextTab();\r\n            __AdmSettingsDrawList($module_id, $aTab[\'OPTIONS\']);\r\n        }\r\n    }\r\n    $tabControl->buttons();\r\n    ?>\r\n    <input type=\"submit\" name=\"apply\" \r\n           value=\"<?= Loc::GetMessage(\'SCROLLUP_OPTIONS_INPUT_APPLY\'); ?>\" class=\"adm-btn-save\" />\r\n    <input type=\"submit\" name=\"default\"\r\n           value=\"<?= Loc::GetMessage(\'SCROLLUP_OPTIONS_INPUT_DEFAULT\'); ?>\" />\r\n</form>\r\n\r\n<?php\r\n$tabControl->end();\r\n\r\n/*\r\n * Обрабатываем данные после отправки формы\r\n */\r\nif ($request->isPost() && check_bitrix_sessid()) {\r\n\r\n    foreach ($aTabs as $aTab) { // цикл по вкладкам\r\n        foreach ($aTab[\'OPTIONS\'] as $arOption) {\r\n            if (!is_array($arOption)) { // если это название секции\r\n                continue;\r\n            }\r\n            if ($arOption[\'note\']) { // если это примечание\r\n                continue;\r\n            }\r\n            if ($request[\'apply\']) { // сохраняем введенные настройки\r\n                $optionValue = $request->getPost($arOption[0]);\r\n                if ($arOption[0] == \'switch_on\') {\r\n                    if ($optionValue == \'\') {\r\n                        $optionValue = \'N\';\r\n                    }\r\n                }\r\n                if ($arOption[0] == \'jquery_on\') {\r\n                    if ($optionValue == \'\') {\r\n                        $optionValue = \'N\';\r\n                    }\r\n                }\r\n                Option::set($module_id, $arOption[0], is_array($optionValue) ? implode(\',\', $optionValue) : $optionValue);\r\n            } elseif ($request[\'default\']) { // устанавливаем по умолчанию\r\n                Option::set($module_id, $arOption[0], $arOption[2]);\r\n            }\r\n        }\r\n    }\r\n\r\n    LocalRedirect($APPLICATION->getCurPage().\'?mid=\'.$module_id.\'&lang=\'.LANGUAGE_ID);\r\n\r\n}\r\n?>\r\n[/phtml]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/modules/scrollup/lang/ru/options.php\r\n */\r\n\r\n$MESS[\'SCROLLUP_OPTIONS_TAB_GENERAL\']    = \'Основные настройки\'; // Первая вкладка «Основные настройки»\r\n$MESS[\'SCROLLUP_OPTIONS_SWITCH_ON\']      = \'Включить прокрутку\';\r\n$MESS[\'SCROLLUP_OPTIONS_JQUERY_ON\']      = \'Подключить jQuery\';\r\n\r\n$MESS[\'SCROLLUP_OPTIONS_TAB_ADDITIONAL\'] = \'Дополнительные настройки\'; // Вторая вкладка «Дополнительные настройки»\r\n$MESS[\'SCROLLUP_OPTIONS_SECTION_VIEW\']   = \'Внешний вид\'; // секция «Внешний вид»\r\n$MESS[\'SCROLLUP_OPTIONS_WIDTH\']          = \'Ширина (пикселей)\';\r\n$MESS[\'SCROLLUP_OPTIONS_HEIGHT\']         = \'Высота (пикселей)\';\r\n$MESS[\'SCROLLUP_OPTIONS_RADIUS\']         = \'Радиус (пикселей)\';\r\n$MESS[\'SCROLLUP_OPTIONS_COLOR\']          = \'Цвет фона\';\r\n$MESS[\'SCROLLUP_OPTIONS_SECTION_LAYOUT\'] = \'Положение на странице\'; // секция «Положение на странице»\r\n$MESS[\'SCROLLUP_OPTIONS_POSITION\']       = \'Положение кнопки\';\r\n$MESS[\'SCROLLUP_OPTIONS_SIDE_LEFT\']      = \'Слева\';\r\n$MESS[\'SCROLLUP_OPTIONS_SIDE_RIGHT\']     = \'Справа\';\r\n$MESS[\'SCROLLUP_OPTIONS_INDENT_BOTTOM\']  = \'Отступ снизу (пикселей)\';\r\n$MESS[\'SCROLLUP_OPTIONS_INDENT_SIDE\']    = \'Отступ сбоку (пикселей)\';\r\n$MESS[\'SCROLLUP_OPTIONS_SECTION_ACTION\'] = \'Поведение\'; // секция «Поведение»\r\n$MESS[\'SCROLLUP_OPTIONS_SPEED\']          = \'Скорость прокрутки\';\r\n$MESS[\'SCROLLUP_OPTIONS_SPEED_SLOW\']     = \'Низкая\';\r\n$MESS[\'SCROLLUP_OPTIONS_SPEED_NORMAL\']   = \'Средняя\';\r\n$MESS[\'SCROLLUP_OPTIONS_SPEED_FAST\']     = \'Высокая\';\r\n\r\n$MESS[\'SCROLLUP_OPTIONS_INPUT_APPLY\']    = \'Сохранить настройки\';\r\n$MESS[\'SCROLLUP_OPTIONS_INPUT_DEFAULT\']  = \'Установить по умолчанию\';\r\n[/php]\r\n<p>\r\nСтраница настроек модуля теперь выглядит так:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/207/3.jpg\" class=\"zoom\"><img src=\"/files/blog/207/3.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/207/4.jpg\" class=\"zoom\"><img src=\"/files/blog/207/4.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<p>\r\nКогда мы описывали код установки модуля, мы привязались к событию <code>OnBeforeEndBufferContent</code> и указали метод <code>appendJavaScriptAndCSS()</code> класса <code>Main</code> как обработчик. Теперь настало время его написать:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/modules/scrollup/lib/Main.php\r\n */\r\n\r\nnamespace ScrollUp;\r\n\r\nuse Bitrix\\Main\\Config\\Option;\r\nuse Bitrix\\Main\\Page\\Asset;\r\n\r\nclass Main {\r\n\r\n    public function appendJavaScriptAndCSS() {\r\n\r\n        // прокрутка будет работать только в публичной части\r\n        if (!defined(\'ADMIN_SECTION\') && ADMIN_SECTION !== true) {\r\n            $module_id = pathinfo(dirname(__DIR__))[\'basename\'];\r\n            $options = json_encode(\r\n                array(\r\n                    \'switch_on\'     => Option::get($module_id, \'switch_on\', \'Y\'),\r\n                    \'width\'         => Option::get($module_id, \'width\', \'50\'),\r\n                    \'height\'        => Option::get($module_id, \'height\', \'50\'),\r\n                    \'radius\'        => Option::get($module_id, \'radius\', \'50\'),\r\n                    \'color\'         => Option::get($module_id, \'color\', \'#bf3030\'),\r\n                    \'side\'          => Option::get($module_id, \'side\', \'left\'),\r\n                    \'indent_bottom\' => Option::get($module_id, \'indent_bottom\', \'10\'),\r\n                    \'indent_side\'   => Option::get($module_id, \'indent_side\', \'10\'),\r\n                    \'speed\'         => Option::get($module_id, \'speed\', \'normal\')\r\n                )\r\n            );\r\n            Asset::getInstance()->addCss(\'/bitrix/css/\'.$module_id.\'/style.css\');\r\n            // подключить библиотеку jQuery?\r\n            if (Option::get($module_id, \'jquery_on\', \'N\') == \'Y\') {\r\n                \\CJSCore::init(array(\'jquery2\'));\r\n            }\r\n            Asset::getInstance()->addString(\r\n                \"<script id=\'\".$module_id.\"-params\' data-params=\'\".$options.\"\'></script>\",\r\n                true\r\n            );\r\n            Asset::getInstance()->addJs(\'/bitrix/js/\'.$module_id.\'/script.js\');\r\n            \r\n        }\r\n    }\r\n\r\n}\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/modules/scrollup/include.php\r\n */\r\n\r\nBitrix\\Main\\Loader::registerAutoloadClasses(\r\n    \'scrollup\',\r\n    array(\r\n        \'ScrollUp\\\\Main\' => \'lib/Main.php\',\r\n    )\r\n);\r\n[/php]\r\n<p>\r\nОсталось только написать js-код для прокрутки страницы наверх и задать css-стили для кнопки:\r\n</p>\r\n[js]\r\n/*\r\n * Файл local/modules/scrollup/install/assets/scripts/script.js\r\n */\r\n\r\n$(function() {\r\n\r\n    var params = $(\'#scrollup-params\').data().params;\r\n\r\n    if (params.switch_on == \'Y\') {\r\n\r\n        var style  = \'width: \' + params.width + \'px;\';\r\n            style += \'height: \' + params.height + \'px;\';\r\n            style += \'border-radius: \' + params.radius + \'px;\';\r\n            style += \'background-color: \' + params.color + \';\';\r\n            style += \'bottom: \' + params.indent_bottom + \'px;\';\r\n            style += params.side + \': \' + params.indent_side + \'px;\';\r\n\r\n        var speed = 600;\r\n        if (params.speed == \'slow\') {\r\n            speed = 300;\r\n        } else if (params.speed == \'fast\'){\r\n            speed = 1000;\r\n        };\r\n\r\n        $(\'body\').append(\'<div id=\"scrollup-button\" style=\"\' + style +\'\"></div>\');\r\n\r\n        var button = $(\'#scrollup-button\');\r\n        $(window).on(\'load\', function() {\r\n            if ($(this).scrollTop() > 300) {\r\n                button.fadeIn(600);\r\n            }\r\n        });\r\n\r\n        $(window).on(\'scroll\', function() {\r\n            if ($(this).scrollTop() > 300) {\r\n                button.fadeIn(600);\r\n            } else {\r\n                button.fadeOut(600);\r\n            };\r\n        });\r\n\r\n        button.on(\'click\', function() {\r\n            $(\'html, body\').animate({\r\n                scrollTop: 0\r\n            }, speed);\r\n        });\r\n\r\n    };\r\n\r\n});\r\n[/js]\r\n\r\n[css]\r\n/*\r\n * Файл local/modules/scrollup/install/assets/styles/style.css\r\n */\r\n\r\n#scrollup-button {\r\n    position: fixed;\r\n    cursor: pointer;\r\n    display: none;\r\n}\r\n#scrollup-button:before {\r\n    content: \"\";\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 15px solid transparent;\r\n    border-right: 15px solid transparent;\r\n    border-bottom: 25px solid #fff;\r\n    margin: 9px auto 0;\r\n    display: block;\r\n}\r\n[/css]\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"/files/blog/207/scrollup.zip\">Скачать модуль scrollup</a></li>\r\n</ul>','2018-10-24 14:01:34',1),(208,17,'Битрикс. Создание своего модуля. Часть 2','','','CMS, Web-разработка, doInstall, doUninstall, step.php, unstep.php, version.php, Битрикс, Инфоблок, Компонент, Модуль, Установка, registerAutoloadClasses, registerModule, unRegisterModule, CopyDirFiles, deleteDirectory','Давайте создадим еще один модуль, который будет устанавливать в систему несколько компонентов — три простых и один комплексный. Больше никаких задач модуль решать не будет, поэтому его код будут очень простым. Сами компоненты предназначены для работы с инфоблоками…','<p>\r\nДавайте создадим еще один модуль, который будет устанавливать в систему несколько компонентов — три простых и один комплексный. Больше никаких задач модуль решать не будет, поэтому его код будут очень простым. Сами компоненты предназначены для работы с инфоблоками:\r\n</p>\r\n<ul>\r\n  <li>простой компонент <code>infoblock:iblock.element</code> умеет показывать элемент инфоблока;</li>\r\n  <li>простой компонент <code>infoblock:iblock.section</code> умеет показывать раздел инфоблока;</li>\r\n  <li>простой компонент <code>infoblock:iblock.popular</code> умееет показывать коневые разделы инфоблока + популярные элементы;</li>\r\n  <li>комплексный компонент <code>infoblock:iblock</code> объединяет эти простые компоненты.</li> \r\n</ul>\r\n<p>\r\nФайловая структура модуля будет такой:\r\n</p>\r\n[code]\r\n[red][infoblock][/red]\r\n    [grn][install]\r\n        [assets]\r\n            [components]\r\n                [iblock]\r\n                [iblock.element]\r\n                [iblock.popular]\r\n                [iblock.section][/grn]\r\n        index.php\r\n        step.php\r\n        unstep.php\r\n        version.php\r\n    [grn][lang]\r\n        [ru]\r\n            [install][/grn]\r\n                index.php\r\n[/code]\r\n<p>\r\nПри установке модуля происходит копирование содержимого директории\r\n<p>\r\n[code]local/modules/infoblock/install/assets/componenets[/code]\r\n<p>\r\nв директорию\r\n</p>\r\n[code]local/components/infoblock[/code]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/modules/infoblock/install/version.php\r\n */\r\n\r\n$arModuleVersion = array(\r\n    \'VERSION\'      => \'1.0.0\',\r\n    \'VERSION_DATE\' => \'2018-10-26 14:00:00\'\r\n);\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/modules/infoblock/install/index.php\r\n */\r\n\r\nuse Bitrix\\Main\\Localization\\Loc;\r\nuse Bitrix\\Main\\ModuleManager;\r\nuse Bitrix\\Main\\Config\\Option;\r\nuse Bitrix\\Main\\Application;\r\nuse Bitrix\\Main\\IO\\Directory;\r\n\r\nLoc::loadMessages(__FILE__);\r\n\r\nclass infoblock extends CModule {\r\n\r\n    public function __construct() {\r\n        if (is_file(__DIR__.\'/version.php\')){\r\n            include_once(__DIR__.\'/version.php\');\r\n            $this->MODULE_ID           = get_class($this);\r\n            $this->MODULE_VERSION      = $arModuleVersion[\'VERSION\'];\r\n            $this->MODULE_VERSION_DATE = $arModuleVersion[\'VERSION_DATE\'];\r\n            $this->MODULE_NAME         = Loc::getMessage(\'INFOBLOCK_NAME\');\r\n            $this->MODULE_DESCRIPTION  = Loc::getMessage(\'INFOBLOCK_DESCRIPTION\');\r\n        } else {\r\n            CAdminMessage::showMessage(\r\n                Loc::getMessage(\'INFOBLOCK_FILE_NOT_FOUND\').\' version.php\'\r\n            );\r\n        }\r\n    }\r\n    \r\n    public function doInstall() {\r\n\r\n        global $APPLICATION;\r\n\r\n        // мы используем функционал нового ядра D7 — поддерживает ли его система?\r\n        if (CheckVersion(ModuleManager::getVersion(\'main\'), \'14.00.00\')) {\r\n            // копируем файлы, необходимые для работы модуля\r\n            $this->installFiles();\r\n            // регистрируем модуль в системе\r\n            ModuleManager::registerModule($this->MODULE_ID);\r\n        } else {\r\n            CAdminMessage::showMessage(\r\n                Loc::getMessage(\'INFOBLOCK_INSTALL_ERROR\')\r\n            );\r\n            return;\r\n        }\r\n\r\n        $APPLICATION->includeAdminFile(\r\n            Loc::getMessage(\'INFOBLOCK_INSTALL_TITLE\').\' «\'.Loc::getMessage(\'INFOBLOCK_NAME\').\'»\',\r\n            __DIR__.\'/step.php\'\r\n        );\r\n    }\r\n    \r\n    public function installFiles() {\r\n        // копируем файлы компонентов, которые устанавливаем вместе с модулем;\r\n        // пространством имен для компонентов будет имя модуля, т.е. infoblock\r\n        CopyDirFiles(\r\n            __DIR__.\'/assets/components\',\r\n            Application::getDocumentRoot().\'/local/components/\'.$this->MODULE_ID.\'/\',\r\n            true,\r\n            true\r\n        );\r\n    }\r\n\r\n    public function doUninstall() {\r\n\r\n        global $APPLICATION;\r\n\r\n        $this->unInstallFiles();\r\n        ModuleManager::unRegisterModule($this->MODULE_ID);\r\n        $APPLICATION->includeAdminFile(\r\n            Loc::getMessage(\'INFOBLOCK_UNINSTALL_TITLE\').\' «\'.Loc::getMessage(\'INFOBLOCK_NAME\').\'»\',\r\n            __DIR__.\'/unstep.php\'\r\n        );\r\n    }\r\n\r\n    public function unInstallFiles() {\r\n        // удаляем файлы компонента, который установили вместе с модулем\r\n        Directory::deleteDirectory(\r\n            Application::getDocumentRoot().\'/local/components/\'.$this->MODULE_ID\r\n        );\r\n        // удаляем настройки нашего модуля\r\n        Option::delete($this->MODULE_ID);\r\n    }\r\n\r\n}\r\n[/php]\r\n\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/modules/infoblock/install/step.php\r\n */\r\nuse Bitrix\\Main\\Localization\\Loc;\r\n\r\nLoc::loadMessages(__FILE__);\r\n\r\nif (!check_bitrix_sessid()) {\r\n    return;\r\n}\r\n\r\nif ($errorException = $APPLICATION->getException()) {\r\n    // ошибка при установке модуля\r\n    CAdminMessage::showMessage(\r\n        Loc::getMessage(\'INFOBLOCK_INSTALL_FAILED\').\': \'.$errorException->GetString()\r\n    );\r\n} else {\r\n    // модуль успешно установлен\r\n    CAdminMessage::showNote(\r\n        Loc::getMessage(\'INFOBLOCK_INSTALL_SUCCESS\')\r\n    );\r\n}\r\n?>\r\n\r\n<form action=\"<?= $APPLICATION->getCurPage(); ?>\"> <!-- Кнопка возврата к списку модулей -->\r\n    <input type=\"hidden\" name=\"lang\" value=\"<?= LANGUAGE_ID; ?>\" />\r\n    <input type=\"submit\" value=\"<?= Loc::getMessage(\'INFOBLOCK_RETURN_MODULES\'); ?>\">\r\n</form>\r\n[/phtml]\r\n\r\n[phtml]\r\n<?php\r\n/*\r\n * Файл local/modules/infoblock/install/unstep.php\r\n */\r\n\r\nuse Bitrix\\Main\\Localization\\Loc;\r\n\r\nLoc::loadMessages(__FILE__);\r\n\r\nif (!check_bitrix_sessid()){\r\n    return;\r\n}\r\n\r\nif ($errorException = $APPLICATION->getException()) {\r\n    // ошибка при удалении модуля\r\n    CAdminMessage::showMessage(\r\n        Loc::getMessage(\'INFOBLOCK_UNINSTALL_FAILED\').\': \'.$errorException->GetString()\r\n    );\r\n} else {\r\n    // модуль успешно удален\r\n    CAdminMessage::showNote(\r\n        Loc::getMessage(\'INFOBLOCK_UNINSTALL_SUCCESS\')\r\n    );\r\n}\r\n?>\r\n\r\n<form action=\"<?= $APPLICATION->getCurPage(); ?>\"> <!-- Кнопка возврата к списку модулей -->\r\n    <input type=\"hidden\" name=\"lang\" value=\"<?= LANGUAGE_ID; ?>\" />\r\n    <input type=\"submit\" value=\"<?= Loc::getMessage(\'INFOBLOCK_RETURN_MODULES\'); ?>\">\r\n</form>\r\n[/phtml]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/modules/infoblock/lang/ru/install/index.php\r\n */\r\n\r\n$MESS[\'INFOBLOCK_NAME\']              = \'Компонент «Инфоблок»\';\r\n$MESS[\'INFOBLOCK_DESCRIPTION\']       = \'Устанавливает универсальный компонент для работы с инфоблоками\';\r\n\r\n$MESS[\'INFOBLOCK_FILE_NOT_FOUND\']    = \'Не найден файл\';\r\n$MESS[\'INFOBLOCK_INSTALL_TITLE\']     = \'Установка модуля\';\r\n$MESS[\'INFOBLOCK_INSTALL_ERROR\']     = \'Версия главного модуля ниже 14, обновите систему.\';\r\n$MESS[\'INFOBLOCK_INSTALL_SUCCESS\']   = \'Модуль успешно установлен\';\r\n$MESS[\'INFOBLOCK_INSTALL_FAILED\']    = \'Ошибка при установке модуля\';\r\n\r\n$MESS[\'INFOBLOCK_UNINSTALL_TITLE\']   = \'Удаление модуля\';\r\n$MESS[\'INFOBLOCK_UNINSTALL_SUCCESS\'] = \'Модуль успешно удален\';\r\n$MESS[\'INFOBLOCK_UNINSTALL_FAILED\']  = \'Ошибка при удалении модуля\';\r\n\r\n$MESS[\'INFOBLOCK_RETURN_MODULES\']    = \'Вернуться в список модулей\';\r\n[/php]\r\n\r\n<p>\r\nПосле установки модуля мы можем использовать эти компоненты в работе:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/208/1.jpg\" class=\"zoom\"><img src=\"/files/blog/208/1.jpg\" alt=\"\" /></a>\r\n</p>\r\n[phtml]\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/header.php\");\r\n$APPLICATION->SetTitle(\"Статьи о домашних животных\");\r\n?>\r\n<?php\r\n$APPLICATION->IncludeComponent(\r\n    \"infoblock:iblock\",\r\n    \"\",\r\n    Array(\r\n        \"ADD_SECTIONS_CHAIN\" => \"Y\",\r\n        \"CACHE_GROUPS\" => \"Y\",\r\n        \"CACHE_TIME\" => \"3600\",\r\n        \"CACHE_TYPE\" => \"A\",\r\n        \"DISPLAY_BOTTOM_PAGER\" => \"Y\",\r\n        \"DISPLAY_TOP_PAGER\" => \"N\",\r\n        \"ELEMENT_SET_BROWSER_TITLE\" => \"Y\",\r\n        \"ELEMENT_SET_META_DESCRIPTION\" => \"Y\",\r\n        \"ELEMENT_SET_META_KEYWORDS\" => \"Y\",\r\n        \"ELEMENT_SET_PAGE_TITLE\" => \"Y\",\r\n        \"IBLOCK_ID\" => \"5\",\r\n        \"IBLOCK_TYPE\" => \"content\",\r\n        \"MESSAGE_404\" => \"\",\r\n        \"PAGER_BASE_LINK_ENABLE\" => \"N\",\r\n        \"PAGER_DESC_NUMBERING\" => \"N\",\r\n        \"PAGER_DESC_NUMBERING_CACHE_TIME\" => \"36000\",\r\n        \"PAGER_SHOW_ALL\" => \"N\",\r\n        \"PAGER_SHOW_ALWAYS\" => \"N\",\r\n        \"PAGER_TEMPLATE\" => \".default\",\r\n        \"PAGER_TITLE\" => \"Элементы\",\r\n        \"POPULAR_ELEMENT_COUNT\" => \"4\",\r\n        \"POPULAR_ROOT_SECTIONS\" => \"Y\",\r\n        \"POPULAR_SECTIONS\" => array(),\r\n        \"POPULAR_SET_BROWSER_TITLE\" => \"Y\",\r\n        \"POPULAR_SET_PAGE_TITLE\" => \"Y\",\r\n        \"SECTION_ELEMENT_COUNT\" => \"3\",\r\n        \"SECTION_SET_BROWSER_TITLE\" => \"Y\",\r\n        \"SECTION_SET_META_DESCRIPTION\" => \"Y\",\r\n        \"SECTION_SET_META_KEYWORDS\" => \"Y\",\r\n        \"SECTION_SET_PAGE_TITLE\" => \"Y\",\r\n        \"SEF_MODE\" => \"N\",\r\n        \"SET_STATUS_404\" => \"N\",\r\n        \"SHOW_404\" => \"N\",\r\n        \"USE_CODE_INSTEAD_ID\" => \"N\",\r\n        \"VARIABLE_ALIASES\" => Array(\r\n            \"ELEMENT_CODE\"=>\"ELEMENT_CODE\",\r\n            \"ELEMENT_ID\"=>\"ELEMENT_ID\",\r\n            \"SECTION_CODE\"=>\"SECTION_CODE\",\r\n            \"SECTION_ID\"=>\"SECTION_ID\"\r\n        )\r\n    )\r\n);\r\n?>\r\n<?php\r\nrequire($_SERVER[\"DOCUMENT_ROOT\"].\"/bitrix/footer.php\");\r\n?>\r\n[/phtml]\r\n<p>\r\n<a href=\"/files/blog/208/2.jpg\" class=\"zoom\"><img src=\"/files/blog/208/2.jpg\" alt=\"\" /></a>\r\n</p>\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"/files/blog/208/infoblock.zip\">Скачать модуль infoblock</a></li>\r\n</ul>','2018-10-26 16:32:02',1),(209,17,'Битрикс. Создание своего модля. Часть 3','','','','Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.','Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.','2018-10-27 12:19:01',0),(210,17,'Битрикс. ORM в новом ядре','','','CMS, DataManager, ElementTable, IblockTable, JOIN, ORM, SQL, SectionTable, Web-разработка, getEntity, query, registerRuntimeField, setFilter, setGroup, setLimit, setOrder, setSelect, table, БазаДанных, Битрикс, Запрос, Инфоблок, НовоеЯдро, Сущность, Таблица','Реализация ORM в ядре D7 призвана абстрагировать разработчика от механики работы с таблицами на уровне запросов к БД, введя понятие сущности и поля сущности. Сущность — это таблица, поля сущности — столбцы или «ссылки» на другие сущности, а DataManager — система управления данными.','<p>\r\nРеализация ORM в ядре D7 призвана абстрагировать разработчика от механики работы с таблицами на уровне запросов к БД, введя понятие сущности и поля сущности. Сущность — это таблица, поля сущности — столбцы или «ссылки» на другие сущности, а <code>DataManager</code> — система управления данными. Для каждой сущности нужно создать описание, например:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл /bitrix/modules/iblock/lib/element.php\r\n */\r\n\r\nnamespace Bitrix\\Iblock;\r\n\r\nuse Bitrix\\Main,\r\n    Bitrix\\Main\\Localization\\Loc;\r\nLoc::loadMessages(__FILE__);\r\n\r\n/**\r\n * Class ElementTable\r\n * \r\n * Fields:\r\n * ID int mandatory\r\n * TIMESTAMP_X datetime optional\r\n * MODIFIED_BY int optional\r\n * DATE_CREATE datetime optional\r\n * CREATED_BY int optional\r\n * IBLOCK_ID int mandatory\r\n * IBLOCK_SECTION_ID int optional\r\n * ACTIVE bool optional default \'Y\'\r\n * ACTIVE_FROM datetime optional\r\n * ACTIVE_TO datetime optional\r\n * SORT int optional default 500\r\n * NAME string(255) mandatory\r\n * PREVIEW_PICTURE int optional\r\n * PREVIEW_TEXT string optional\r\n * PREVIEW_TEXT_TYPE enum (\'text\', \'html\') optional default \'text\'\r\n * DETAIL_PICTURE int optional\r\n * DETAIL_TEXT string optional\r\n * DETAIL_TEXT_TYPE enum (\'text\', \'html\') optional default \'text\'\r\n * SEARCHABLE_CONTENT string optional\r\n * WF_STATUS_ID int optional default 1\r\n * WF_PARENT_ELEMENT_ID int optional\r\n * WF_NEW string(1) optional\r\n * WF_LOCKED_BY int optional\r\n * WF_DATE_LOCK datetime optional\r\n * WF_COMMENTS string optional\r\n * IN_SECTIONS bool optional default \'N\'\r\n * XML_ID string(255) optional\r\n * CODE string(255) optional\r\n * TAGS string(255) optional\r\n * TMP_ID string(40) optional\r\n * WF_LAST_HISTORY_ID int optional\r\n * SHOW_COUNTER int optional\r\n * SHOW_COUNTER_START datetime optional\r\n * PREVIEW_PICTURE reference to {@link \\Bitrix\\File\\FileTable}\r\n * DETAIL_PICTURE reference to {@link \\Bitrix\\File\\FileTable}\r\n * IBLOCK reference to {@link \\Bitrix\\Iblock\\IblockTable}\r\n * WF_PARENT_ELEMENT reference to {@link \\Bitrix\\Iblock\\IblockElementTable}\r\n * IBLOCK_SECTION reference to {@link \\Bitrix\\Iblock\\IblockSectionTable}\r\n * MODIFIED_BY reference to {@link \\Bitrix\\User\\UserTable}\r\n * CREATED_BY reference to {@link \\Bitrix\\User\\UserTable}\r\n * WF_LOCKED_BY reference to {@link \\Bitrix\\User\\UserTable}\r\n *\r\n * @package Bitrix\\Iblock\r\n **/\r\n\r\nclass ElementTable extends Main\\Entity\\DataManager\r\n{\r\n    /**\r\n     * Returns DB table name for entity.\r\n     *\r\n     * @return string\r\n     */\r\n    public static function getTableName()\r\n    {\r\n        return \'b_iblock_element\';\r\n    }\r\n\r\n    /**\r\n     * Returns entity map definition.\r\n     *\r\n     * @return array\r\n     */\r\n    public static function getMap()\r\n    {\r\n        return array(\r\n            \'ID\' => array( // Идентификатор\r\n                \'data_type\' => \'integer\',\r\n                \'primary\' => true,\r\n                \'autocomplete\' => true,\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_ID_FIELD\'),\r\n            ),\r\n            \'TIMESTAMP_X\' => array( // Дата изменения\r\n                \'data_type\' => \'datetime\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_TIMESTAMP_X_FIELD\'),\r\n            ),\r\n            \'MODIFIED_BY\' => array( // Кто изменил\r\n                \'data_type\' => \'integer\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_MODIFIED_BY_FIELD\'),\r\n            ),\r\n            \'DATE_CREATE\' => array( // Дата создания\r\n                \'data_type\' => \'datetime\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_DATE_CREATE_FIELD\'),\r\n            ),\r\n            \'CREATED_BY\' => array( // Кто создал\r\n                \'data_type\' => \'integer\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_CREATED_BY_FIELD\'),\r\n            ),\r\n            \'IBLOCK_ID\' => array( // Идентификатор инфоблока\r\n                \'data_type\' => \'integer\',\r\n                \'required\' => true,\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_IBLOCK_ID_FIELD\'),\r\n            ),\r\n            \'IBLOCK_SECTION_ID\' => array( // Основной раздел\r\n                \'data_type\' => \'integer\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_IBLOCK_SECTION_ID_FIELD\'),\r\n            ),\r\n            \'ACTIVE\' => array( // Активность\r\n                \'data_type\' => \'boolean\',\r\n                \'values\' => array(\'N\', \'Y\'),\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_ACTIVE_FIELD\'),\r\n            ),\r\n            \'ACTIVE_FROM\' => array( // Дата начала активности\r\n                \'data_type\' => \'datetime\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_ACTIVE_FROM_FIELD\'),\r\n            ),\r\n            \'ACTIVE_TO\' => array( // Дата окончания активности\r\n                \'data_type\' => \'datetime\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_ACTIVE_TO_FIELD\'),\r\n            ),\r\n            \'SORT\' => array( // Индекс сортировки\r\n                \'data_type\' => \'integer\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_SORT_FIELD\'),\r\n            ),\r\n            \'NAME\' => array( // Наименование\r\n                \'data_type\' => \'string\',\r\n                \'required\' => true,\r\n                \'validation\' => array(__CLASS__, \'validateName\'),\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_NAME_FIELD\'),\r\n            ),\r\n            \'PREVIEW_PICTURE\' => array( // Картинка анонса\r\n                \'data_type\' => \'integer\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_PREVIEW_PICTURE_FIELD\'),\r\n            ),\r\n            \'PREVIEW_TEXT\' => array( // Описание для анонса\r\n                \'data_type\' => \'text\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_PREVIEW_TEXT_FIELD\'),\r\n            ),\r\n            \'PREVIEW_TEXT_TYPE\' => array( // Тип описания для анонса\r\n                \'data_type\' => \'enum\',\r\n                \'values\' => array(\'text\', \'html\'),\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_PREVIEW_TEXT_TYPE_FIELD\'),\r\n            ),\r\n            \'DETAIL_PICTURE\' => array( // Детальная картинка\r\n                \'data_type\' => \'integer\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_DETAIL_PICTURE_FIELD\'),\r\n            ),\r\n            \'DETAIL_TEXT\' => array( // Детальное описание\r\n                \'data_type\' => \'text\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_DETAIL_TEXT_FIELD\'),\r\n            ),\r\n            \'DETAIL_TEXT_TYPE\' => array( // Тип детального описания\r\n                \'data_type\' => \'enum\',\r\n                \'values\' => array(\'text\', \'html\'),\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_DETAIL_TEXT_TYPE_FIELD\'),\r\n            ),\r\n            \'SEARCHABLE_CONTENT\' => array( // Поисковый индекс\r\n                \'data_type\' => \'text\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_SEARCHABLE_CONTENT_FIELD\'),\r\n            ),\r\n            \'WF_STATUS_ID\' => array( // Статус в документообороте\r\n                \'data_type\' => \'integer\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_WF_STATUS_ID_FIELD\'),\r\n            ),\r\n            \'WF_PARENT_ELEMENT_ID\' => array( // Элемент-родитель\r\n                \'data_type\' => \'integer\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_WF_PARENT_ELEMENT_ID_FIELD\'),\r\n            ),\r\n            \'WF_NEW\' => array( // Флаг публикации черновика\r\n                \'data_type\' => \'string\',\r\n                \'validation\' => array(__CLASS__, \'validateWfNew\'),\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_WF_NEW_FIELD\'),\r\n            ),\r\n            \'WF_LOCKED_BY\' => array( // Кто заблокировал\r\n                \'data_type\' => \'integer\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_WF_LOCKED_BY_FIELD\'),\r\n            ),\r\n            \'WF_DATE_LOCK\' => array( // Дата блокировки\r\n                \'data_type\' => \'datetime\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_WF_DATE_LOCK_FIELD\'),\r\n            ),\r\n            \'WF_COMMENTS\' => array( // Комментарий документооборота\r\n                \'data_type\' => \'text\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_WF_COMMENTS_FIELD\'),\r\n            ),\r\n            \'IN_SECTIONS\' => array( // Входит в разделы инфоблока\r\n                \'data_type\' => \'boolean\',\r\n                \'values\' => array(\'N\', \'Y\'),\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_IN_SECTIONS_FIELD\'),\r\n            ),\r\n            \'XML_ID\' => array( // Внешний код\r\n                \'data_type\' => \'string\',\r\n                \'validation\' => array(__CLASS__, \'validateXmlId\'),\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_XML_ID_FIELD\'),\r\n            ),\r\n            \'CODE\' => array( // Символьный код\r\n                \'data_type\' => \'string\',\r\n                \'validation\' => array(__CLASS__, \'validateCode\'),\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_CODE_FIELD\'),\r\n            ),\r\n            \'TAGS\' => array( // Теги\r\n                \'data_type\' => \'string\',\r\n                \'validation\' => array(__CLASS__, \'validateTags\'),\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_TAGS_FIELD\'),\r\n            ),\r\n            \'TMP_ID\' => array( // Временный код\r\n                \'data_type\' => \'string\',\r\n                \'validation\' => array(__CLASS__, \'validateTmpId\'),\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_TMP_ID_FIELD\'),\r\n            ),\r\n            \'WF_LAST_HISTORY_ID\' => array(\r\n                \'data_type\' => \'integer\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_WF_LAST_HISTORY_ID_FIELD\'),\r\n            ),\r\n            \'SHOW_COUNTER\' => array( // Количество показов\r\n                \'data_type\' => \'integer\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_SHOW_COUNTER_FIELD\'),\r\n            ),\r\n            \'SHOW_COUNTER_START\' => array( // Дата первого показа\r\n                \'data_type\' => \'datetime\',\r\n                \'title\' => Loc::getMessage(\'ELEMENT_ENTITY_SHOW_COUNTER_START_FIELD\'),\r\n            ),\r\n            \'PREVIEW_PICTURE\' => array(\r\n                \'data_type\' => \'Bitrix\\File\\File\',\r\n                \'reference\' => array(\'=this.PREVIEW_PICTURE\' => \'ref.ID\'),\r\n            ),\r\n            \'DETAIL_PICTURE\' => array(\r\n                \'data_type\' => \'Bitrix\\File\\File\',\r\n                \'reference\' => array(\'=this.DETAIL_PICTURE\' => \'ref.ID\'),\r\n            ),\r\n            \'IBLOCK\' => array(\r\n                \'data_type\' => \'Bitrix\\Iblock\\Iblock\',\r\n                \'reference\' => array(\'=this.IBLOCK_ID\' => \'ref.ID\'),\r\n            ),\r\n            \'WF_PARENT_ELEMENT\' => array(\r\n                \'data_type\' => \'Bitrix\\Iblock\\IblockElement\',\r\n                \'reference\' => array(\'=this.WF_PARENT_ELEMENT_ID\' => \'ref.ID\'),\r\n            ),\r\n            \'IBLOCK_SECTION\' => array(\r\n                \'data_type\' => \'Bitrix\\Iblock\\IblockSection\',\r\n                \'reference\' => array(\'=this.IBLOCK_SECTION_ID\' => \'ref.ID\'),\r\n            ),\r\n            \'MODIFIED_BY\' => array(\r\n                \'data_type\' => \'Bitrix\\User\\User\',\r\n                \'reference\' => array(\'=this.MODIFIED_BY\' => \'ref.ID\'),\r\n            ),\r\n            \'CREATED_BY\' => array(\r\n                \'data_type\' => \'Bitrix\\User\\User\',\r\n                \'reference\' => array(\'=this.CREATED_BY\' => \'ref.ID\'),\r\n            ),\r\n            \'WF_LOCKED_BY\' => array(\r\n                \'data_type\' => \'Bitrix\\User\\User\',\r\n                \'reference\' => array(\'=this.WF_LOCKED_BY\' => \'ref.ID\'),\r\n            ),\r\n        );\r\n    }\r\n    /**\r\n     * Returns validators for NAME field.\r\n     *\r\n     * @return array\r\n     */\r\n    public static function validateName()\r\n    {\r\n        return array(\r\n            new Main\\Entity\\Validator\\Length(null, 255),\r\n        );\r\n    }\r\n    /**\r\n     * Returns validators for WF_NEW field.\r\n     *\r\n     * @return array\r\n     */\r\n    public static function validateWfNew()\r\n    {\r\n        return array(\r\n            new Main\\Entity\\Validator\\Length(null, 1),\r\n        );\r\n    }\r\n    /**\r\n     * Returns validators for XML_ID field.\r\n     *\r\n     * @return array\r\n     */\r\n    public static function validateXmlId()\r\n    {\r\n        return array(\r\n            new Main\\Entity\\Validator\\Length(null, 255),\r\n        );\r\n    }\r\n    /**\r\n     * Returns validators for CODE field.\r\n     *\r\n     * @return array\r\n     */\r\n    public static function validateCode()\r\n    {\r\n        return array(\r\n            new Main\\Entity\\Validator\\Length(null, 255),\r\n        );\r\n    }\r\n    /**\r\n     * Returns validators for TAGS field.\r\n     *\r\n     * @return array\r\n     */\r\n    public static function validateTags()\r\n    {\r\n        return array(\r\n            new Main\\Entity\\Validator\\Length(null, 255),\r\n        );\r\n    }\r\n    /**\r\n     * Returns validators for TMP_ID field.\r\n     *\r\n     * @return array\r\n     */\r\n    public static function validateTmpId()\r\n    {\r\n        return array(\r\n            new Main\\Entity\\Validator\\Length(null, 40),\r\n        );\r\n    }\r\n}\r\n[/php]\r\n\r\n<p>\r\nКласс описывает таблицу БД <code>b_iblock_element</code>, которая хранит элементы инфоблоков:\r\n</p>\r\n[mysql]\r\n--\r\n-- Структура таблицы `b_iblock_element`\r\n--\r\n\r\nCREATE TABLE `b_iblock_element` (\r\n  `ID` int(11) NOT NULL,\r\n  `TIMESTAMP_X` datetime DEFAULT NULL,\r\n  `MODIFIED_BY` int(18) DEFAULT NULL,\r\n  `DATE_CREATE` datetime DEFAULT NULL,\r\n  `CREATED_BY` int(18) DEFAULT NULL,\r\n  `IBLOCK_ID` int(11) NOT NULL DEFAULT \'0\',\r\n  `IBLOCK_SECTION_ID` int(11) DEFAULT NULL,\r\n  `ACTIVE` char(1) COLLATE utf8_unicode_ci NOT NULL DEFAULT \'Y\',\r\n  `ACTIVE_FROM` datetime DEFAULT NULL,\r\n  `ACTIVE_TO` datetime DEFAULT NULL,\r\n  `SORT` int(11) NOT NULL DEFAULT \'500\',\r\n  `NAME` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n  `PREVIEW_PICTURE` int(18) DEFAULT NULL,\r\n  `PREVIEW_TEXT` text COLLATE utf8_unicode_ci,\r\n  `PREVIEW_TEXT_TYPE` varchar(4) COLLATE utf8_unicode_ci NOT NULL DEFAULT \'text\',\r\n  `DETAIL_PICTURE` int(18) DEFAULT NULL,\r\n  `DETAIL_TEXT` longtext COLLATE utf8_unicode_ci,\r\n  `DETAIL_TEXT_TYPE` varchar(4) COLLATE utf8_unicode_ci NOT NULL DEFAULT \'text\',\r\n  `SEARCHABLE_CONTENT` text COLLATE utf8_unicode_ci,\r\n  `WF_STATUS_ID` int(18) DEFAULT \'1\',\r\n  `WF_PARENT_ELEMENT_ID` int(11) DEFAULT NULL,\r\n  `WF_NEW` char(1) COLLATE utf8_unicode_ci DEFAULT NULL,\r\n  `WF_LOCKED_BY` int(18) DEFAULT NULL,\r\n  `WF_DATE_LOCK` datetime DEFAULT NULL,\r\n  `WF_COMMENTS` text COLLATE utf8_unicode_ci,\r\n  `IN_SECTIONS` char(1) COLLATE utf8_unicode_ci NOT NULL DEFAULT \'N\',\r\n  `XML_ID` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,\r\n  `CODE` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,\r\n  `TAGS` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,\r\n  `TMP_ID` varchar(40) COLLATE utf8_unicode_ci DEFAULT NULL,\r\n  `WF_LAST_HISTORY_ID` int(11) DEFAULT NULL,\r\n  `SHOW_COUNTER` int(18) DEFAULT NULL,\r\n  `SHOW_COUNTER_START` datetime DEFAULT NULL\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\n--\r\n-- Индексы таблицы `b_iblock_element`\r\n--\r\n\r\nALTER TABLE `b_iblock_element`\r\n  ADD PRIMARY KEY (`ID`),\r\n  ADD KEY `ix_iblock_element_1` (`IBLOCK_ID`,`IBLOCK_SECTION_ID`),\r\n  ADD KEY `ix_iblock_element_4` (`IBLOCK_ID`,`XML_ID`,`WF_PARENT_ELEMENT_ID`),\r\n  ADD KEY `ix_iblock_element_3` (`WF_PARENT_ELEMENT_ID`),\r\n  ADD KEY `ix_iblock_element_code` (`IBLOCK_ID`,`CODE`);\r\n\r\n--\r\n-- AUTO_INCREMENT для таблицы `b_iblock_element`\r\n--\r\n\r\nALTER TABLE `b_iblock_element`\r\n  MODIFY `ID` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=357;\r\nCOMMIT;\r\n[/mysql]\r\n\r\n<p>\r\nВ методе <code>getMap()</code> перечислены все поля таблицы, включая описание связей с другими сущностями. Таким образом указано отношение столбца <code>IBLOCK_ID</code> текущей таблицы и столбца <code>ID</code> сущности <code>Iblock</code>. В дальнейшем по reference-полям возможно выбирать поля связанных сущностей и использовать их в фильтрах.\r\n</p>\r\n[php]\r\n\'IBLOCK\' => array(\r\n    \'data_type\' => \'Bitrix\\Iblock\\Iblock\',\r\n    \'reference\' => array(\'=this.IBLOCK_ID\' => \'ref.ID\'),\r\n)\r\n[/php]\r\n\r\n<div class=\"note\">\r\n</p>\r\nАвтоматически сгенерировать класс с описанием любой таблицы можно на странице «<em>Настройки • Производительность • Таблицы</em>», добавив параметр <code>orm=y</code> в адрес:\r\n</p>\r\n[code]\r\n/bitrix/admin/perfmon_tables.php?lang=ru&orm=y\r\n[/code]\r\n</div>\r\n\r\n<h2>Выполнение запросов</h2>\r\n<p>\r\nТренироваться будем на таблицах типов инфоблока, самих инфоблоков, элементов и разделов. Для них описаны сущности <code>TypeTable</code>, <code>IblockTable</code>, <code>ElementTable</code> и <code>SectionTable</code>, их можно посмотреть в исходниках модуля <code>iblock</code>.\r\n</p>\r\n\r\n<h3>Пример № 1</h3>\r\n<p>\r\nВыбираем элементы инфоблока с идентификатором 5:\r\n</p>\r\n[php]\r\nBitrix\\Main\\Loader::includeModule(\'iblock\');\r\n\r\n// создаем объект Query, в качестве параметра передаем объект сущности (элемент инфоблока)\r\n$query = new Bitrix\\Main\\Entity\\Query(\r\n    Bitrix\\Iblock\\ElementTable::getEntity()\r\n);\r\n// выбираем идентификатор элемента, символьный код и наименование\r\n$query->setSelect(array(\'ID\', \'CODE\', \'NAME\'))\r\n      // идентификатор инфоблока равен 5\r\n      ->setFilter(array(\'IBLOCK_ID\' => 5))\r\n      // сортируем элементы по идентификатору, по возрастанию\r\n      ->setOrder(array(\'ID\' => \'ASC\'))\r\n      // выбираем только три элемента\r\n      ->setLimit(3);\r\n// посмотрим, какой запрос был сформирован\r\necho $query->getQuery();\r\n// выполняем запрос\r\n$result = $query->exec();\r\n// выводим результат\r\nwhile ($row = $result->fetch()) {\r\n    debug($row);\r\n}\r\n[/php]\r\n\r\n[mysql]\r\nSELECT\r\n    `iblock_element`.`ID` AS `ID`,\r\n    `iblock_element`.`CODE` AS `CODE`,\r\n    `iblock_element`.`NAME` AS `NAME`\r\nFROM\r\n    `b_iblock_element` `iblock_element`\r\nWHERE\r\n    `iblock_element`.`IBLOCK_ID` = 5\r\nORDER BY\r\n    `ID` ASC\r\nLIMIT\r\n    0, 3\r\n[/mysql]\r\n\r\n[code]\r\nArray\r\n(\r\n    [ID] => 347\r\n    [CODE] => angliyskiy-buldog\r\n    [NAME] => Английский бульдог\r\n)\r\nArray\r\n(\r\n    [ID] => 348\r\n    [CODE] => dalmatin\r\n    [NAME] => Далматин\r\n)\r\nArray\r\n(\r\n    [ID] => 349\r\n    [CODE] => afganskaya-borzaya\r\n    [NAME] => Афганская борзая\r\n)\r\n[/code]\r\n<p>\r\nСписок методов <code>Bitrix\\Main\\Entity\\Query</code>:\r\n</p>\r\n<ul>\r\n  <li><code>setSelect()</code>, <code>setGroup()</code> — устанавливает массив с именами полей</li>\r\n  <li><code>addSelect()</code>, <code>addGroup()</code> — добавляет имя поля</li>\r\n  <li><code>getSelect()</code>, <code>getGroup()</code> — возвращает массив с именами полей</li>\r\n</ul>\r\n<ul>\r\n  <li><code>setFilter()</code> — устанавливает одно- или многомерный массив с описанием фильтра</li>\r\n  <li><code>addFilter()</code> — добавляет один параметр фильтра со значением</li>\r\n  <li><code>getFilter()</code> — возвращает текущее описание фильтра</li>\r\n</ul>\r\n<ul>\r\n  <li><code>setOrder()</code> — устанавливает массив с именами полей и порядком сортировки</li>\r\n  <li><code>addOrder()</code> — добавляет одно поле с порядком сортировки</li>\r\n  <li><code>getOrder()</code> — возвращает текущее описание сортировки</li>\r\n</ul>\r\n<ul>\r\n  <li><code>setLimit()</code>, <code>setOffset()</code> — устанавливает значение</li>\r\n  <li><code>getLimit()</code>, <code>getOffset()</code> — возвращает текущее значение</li>\r\n</ul>\r\n<ul>\r\n  <li><code>registerRuntimeField()</code> — регистрирует новое временное поле для исходной сущности</li>\r\n</ul>\r\n\r\n<h3>Пример № 2</h3>\r\n<p>\r\nЧерез сущность «элемент» можно выбирать или ставить условия на поля связанной сущности «инфоблок». Связанная таблица по умолчанию присоединяется с помощью <code>LEFT JOIN</code>. Вспомним reference-поле <code>IBLOCK</code> в описании <code>ElementTable</code> и выберем данные самого инфоблока вместе с элементами инфоблока:\r\n</p>\r\n[php]\r\nBitrix\\Main\\Loader::includeModule(\'iblock\');\r\n\r\n// создаем объект Query, в качестве параметра передаем объект сущности (элемент инфоблока)\r\n$query = new Bitrix\\Main\\Entity\\Query(\r\n    Bitrix\\Iblock\\ElementTable::getEntity()\r\n);\r\n$query->setSelect(array(\'ID\', \'CODE\', \'NAME\', \'IBLOCK.ID\', \'IBLOCK.CODE\', \'IBLOCK.NAME\'))\r\n      ->setFilter(array(\'IBLOCK.ID\' => 5))\r\n      // так тоже можно\r\n      // ->setFilter(array(\'IBLOCK_ID\' => 5))\r\n      ->setOrder(array(\'ID\' => \'ASC\'))\r\n      ->setLimit(3);\r\n// посмотрим, какой запрос был сформирован\r\necho $query->getQuery();\r\n// выполняем запрос\r\n$result = $query->exec();\r\n// выводим результат\r\nwhile ($row = $result->fetch()) {\r\n    debug($row);\r\n}\r\n[/php]\r\n\r\n[mysql]\r\nSELECT\r\n    `iblock_element`.`ID` AS `ID`,\r\n    `iblock_element`.`CODE` AS `CODE`,\r\n    `iblock_element`.`NAME` AS `NAME`,\r\n    `iblock_element_iblock`.`ID` AS `IBLOCK_ELEMENT_IBLOCK_ID`,\r\n    `iblock_element_iblock`.`CODE` AS `IBLOCK_ELEMENT_IBLOCK_CODE`,\r\n    `iblock_element_iblock`.`NAME` AS `IBLOCK_ELEMENT_IBLOCK_NAME`\r\nFROM\r\n    `b_iblock_element` `iblock_element` LEFT JOIN `b_iblock` `iblock_element_iblock`\r\n    ON `iblock_element`.`IBLOCK_ID` = `iblock_element_iblock`.`ID`\r\nWHERE\r\n    `iblock_element_iblock`.`ID` = 5\r\nORDER BY\r\n    `ID` ASC\r\nLIMIT\r\n    0, 3\r\n[/mysql]\r\n\r\n[code]\r\nArray\r\n(\r\n    [ID] => 347\r\n    [CODE] => angliyskiy-buldog\r\n    [NAME] => Английский бульдог\r\n    [IBLOCK_ELEMENT_IBLOCK_ID] => 5\r\n    [IBLOCK_ELEMENT_IBLOCK_CODE] => articles\r\n    [IBLOCK_ELEMENT_IBLOCK_NAME] => Статьи о домашних животных\r\n)\r\nArray\r\n(\r\n    [ID] => 348\r\n    [CODE] => dalmatin\r\n    [NAME] => Далматин\r\n    [IBLOCK_ELEMENT_IBLOCK_ID] => 5\r\n    [IBLOCK_ELEMENT_IBLOCK_CODE] => articles\r\n    [IBLOCK_ELEMENT_IBLOCK_NAME] => Статьи о домашних животных\r\n)\r\nArray\r\n(\r\n    [ID] => 349\r\n    [CODE] => afganskaya-borzaya\r\n    [NAME] => Афганская борзая\r\n    [IBLOCK_ELEMENT_IBLOCK_ID] => 5\r\n    [IBLOCK_ELEMENT_IBLOCK_CODE] => articles\r\n    [IBLOCK_ELEMENT_IBLOCK_NAME] => Статьи о домашних животных\r\n)\r\n[/code]\r\n\r\n<h3>Пример № 3</h3>\r\n<p>\r\nВ запросах можно использовать агрегатные функции MySQL. Для это служит метод <code>registerRuntimeField()</code>, регистрирующий новое поле на время выполнения запроса. Посмотрим, сколько активных элементов в инфоблоке:\r\n</p>\r\n\r\n[php]\r\nBitrix\\Main\\Loader::includeModule(\'iblock\');\r\n\r\n// создаем объект Query, в качестве параметра передаем объект сущности (элемент инфоблока)\r\n$query = new Bitrix\\Main\\Entity\\Query(\r\n    Bitrix\\Iblock\\ElementTable::getEntity()\r\n);\r\n$query->registerRuntimeField(\r\n    \'ACTIVE_ELEMENTS\',\r\n    array(\r\n        // тип вычисляемого поля\r\n        \'data_type\' => \'string\',\r\n        // агрегатная функция (COUNT, MAX, MIN, SUM, AVG) и поле для подстановки\r\n        \'expression\' => array(\'GROUP_CONCAT(%s)\', \'NAME\')\r\n    )\r\n);\r\n$query->setSelect(array(\'IBLOCK.NAME\', \'ACTIVE_ELEMENTS\'));\r\n$query->setFilter(array(\'IBLOCK.ID\' => 5, \'=ACTIVE\' => \'Y\'));\r\n// посмотрим, какой запрос был сформирован\r\necho $query->getQuery();\r\n// выполняем запрос\r\n$result = $query->exec();\r\n// выводим результат\r\nwhile ($row = $result->fetch()) {\r\n    debug($row);\r\n}\r\n[/php]\r\n\r\n[mysql]\r\nSELECT\r\n    `iblock_element_iblock`.`NAME` AS `IBLOCK_ELEMENT_IBLOCK_NAME`,\r\n    GROUP_CONCAT(`iblock_element`.`NAME`) AS `ACTIVE_ELEMENTS`\r\nFROM\r\n    `b_iblock_element` `iblock_element` LEFT JOIN `b_iblock` `iblock_element_iblock`\r\n    ON `iblock_element`.`IBLOCK_ID` = `iblock_element_iblock`.`ID`\r\nWHERE\r\n    `iblock_element_iblock`.`ID` = 5 AND `iblock_element`.`ACTIVE` = \'Y\'\r\nGROUP BY\r\n    `iblock_element_iblock`.`NAME`\r\n[/mysql]\r\n\r\n[code]\r\nArray\r\n(\r\n    [IBLOCK_ELEMENT_IBLOCK_NAME] => Статьи о домашних животных\r\n    [ACTIVE_ELEMENTS] => Английский бульдог,Далматин,Афганская борзая,Абиссинская кошка,Сиамская \r\n                         кошка,Американский бобтейл,Британская короткошерстная,Лабрадор,Лайка\r\n)\r\n[/code]\r\n\r\n<h3>Пример № 4</h3>\r\n<p>\r\nВыбираем разделы инфоблока с идентифкатором 5 и подсчитываем количество элементов в каждом; учитываем только активные разделы и элементы:\r\n</p>\r\n[php]\r\nBitrix\\Main\\Loader::includeModule(\'iblock\');\r\n\r\n// создаем объект Query, в качестве параметра передаем объект сущности (элемент инфоблока)\r\n$query = new Bitrix\\Main\\Entity\\Query(\r\n    Bitrix\\Iblock\\ElementTable::getEntity()\r\n);\r\n$query->registerRuntimeField(\r\n    \'ELEMENT_COUNT\',\r\n    array(\r\n        // тип вычисляемого поля\r\n        \'data_type\' => \'integer\',\r\n        // агрегатная функция (COUNT, MAX, MIN, SUM, AVG) и поле для подстановки\r\n        \'expression\' => array(\'COUNT(%s)\', \'NAME\')\r\n    )\r\n);\r\n$query->registerRuntimeField(\r\n    \'ELEMENT_LIST\',\r\n    array(\r\n        // тип вычисляемого поля\r\n        \'data_type\' => \'string\',\r\n        // агрегатная функция (COUNT, MAX, MIN, SUM, AVG) и поле для подстановки\r\n        \'expression\' => array(\'GROUP_CONCAT(%s)\', \'NAME\')\r\n    )\r\n);\r\n$query->setSelect(array(\'IBLOCK_SECTION.NAME\', \'ELEMENT_COUNT\', \'ELEMENT_LIST\'));\r\n// учитываем только активные разделы и активные элементы\r\n$query->setFilter(array(\'=ACTIVE\' => \'Y\', \'=IBLOCK_SECTION.ACTIVE\' => \'Y\'));\r\n// выбираем только разделы инфоблока с идентификатором 5\r\n$query->addFilter(\'IBLOCK.ID\', 5);\r\n// посмотрим, какой запрос был сформирован\r\necho $query->getQuery();\r\n// выполняем запрос\r\n$result = $query->exec();\r\n// выводим результат\r\nwhile ($row = $result->fetch()) {\r\n    debug($row);\r\n}\r\n[/php]\r\n\r\n[mysql]\r\nSELECT\r\n    `iblock_element_iblock_section`.`NAME` AS `IBLOCK_ELEMENT_IBLOCK_SECTION_NAME`,\r\n    COUNT(`iblock_element`.`NAME`) AS `ELEMENT_COUNT`,\r\n    GROUP_CONCAT(`iblock_element`.`NAME`) AS `ELEMENT_LIST`\r\nFROM\r\n    `b_iblock_element` `iblock_element`\r\n    LEFT JOIN `b_iblock_section` `iblock_element_iblock_section`\r\n    ON `iblock_element`.`IBLOCK_SECTION_ID` = `iblock_element_iblock_section`.`ID`\r\n    LEFT JOIN `b_iblock` `iblock_element_iblock`\r\n    ON `iblock_element`.`IBLOCK_ID` = `iblock_element_iblock`.`ID`\r\nWHERE\r\n    `iblock_element`.`ACTIVE` = \'Y\' AND\r\n    `iblock_element_iblock_section`.`ACTIVE` = \'Y\' AND\r\n    `iblock_element_iblock`.`ID` = 5\r\nGROUP BY\r\n    `iblock_element_iblock_section`.`NAME`\r\n[/mysql]\r\n\r\n[code]\r\nArray\r\n(\r\n    [IBLOCK_ELEMENT_IBLOCK_SECTION_NAME] => Породы кошек\r\n    [ELEMENT_COUNT] => 4\r\n    [ELEMENT_LIST] => Абиссинская кошка,Сиамская кошка,Американский бобтейл,Британская короткошерстная\r\n)\r\nArray\r\n(\r\n    [IBLOCK_ELEMENT_IBLOCK_SECTION_NAME] => Породы собак\r\n    [ELEMENT_COUNT] => 3\r\n    [ELEMENT_LIST] => Английский бульдог,Далматин,Афганская борзая\r\n)\r\nArray\r\n(\r\n    [IBLOCK_ELEMENT_IBLOCK_SECTION_NAME] => Служебные породы\r\n    [ELEMENT_COUNT] => 2\r\n    [ELEMENT_LIST] => Лабрадор,Лайка\r\n)\r\n[/code]\r\n<p>\r\nДобавим еще одно условие, чтобы выбирать только разделы, содержащие более трех элементов:\r\n</p>\r\n[php]\r\n$query->addFilter(\'>ELEMENT_COUNT\', 3);\r\n[/php]\r\n[mysql]\r\nSELECT\r\n    `iblock_element_iblock_section`.`NAME` AS `IBLOCK_ELEMENT_IBLOCK_SECTION_NAME`,\r\n    COUNT(`iblock_element`.`NAME`) AS `ELEMENT_COUNT`,\r\n    GROUP_CONCAT(`iblock_element`.`NAME`) AS `ELEMENT_LIST`\r\nFROM\r\n    `b_iblock_element` `iblock_element`\r\n    LEFT JOIN `b_iblock_section` `iblock_element_iblock_section`\r\n    ON `iblock_element`.`IBLOCK_SECTION_ID` = `iblock_element_iblock_section`.`ID`\r\n    LEFT JOIN `b_iblock` `iblock_element_iblock`\r\n    ON `iblock_element`.`IBLOCK_ID` = `iblock_element_iblock`.`ID`\r\nWHERE\r\n    `iblock_element`.`ACTIVE` = \'Y\' AND\r\n    `iblock_element_iblock_section`.`ACTIVE` = \'Y\' AND\r\n    `iblock_element_iblock`.`ID` = 5\r\nGROUP BY\r\n    `iblock_element_iblock_section`.`NAME`\r\nHAVING\r\n    COUNT(`iblock_element`.`NAME`) > 3\r\n[/mysql]\r\n[code]\r\nArray\r\n(\r\n    [IBLOCK_ELEMENT_IBLOCK_SECTION_NAME] => Породы кошек\r\n    [ELEMENT_COUNT] => 4\r\n    [ELEMENT_LIST] => Абиссинская кошка,Сиамская кошка,Американский бобтейл,Британская короткошерстная\r\n)\r\n[/code]\r\n\r\n<h3>Пример № 5</h3>\r\n<p>\r\nRuntime-поле может быть не только вычисляемым значением, но и ссылкой на другую сущность. Т.е. в методе <code>getMap()</code> можно не описывать связь, а сформировать ее прямо в запросе. Например, создадим объект <code>Query</code> для сущности <code>IblockTable</code>, свяжем ее с <code>ElementTable</code> и выберем элемент с <code>ID=349</code>:\r\n</p>\r\n[php]\r\nBitrix\\Main\\Loader::includeModule(\'iblock\');\r\n\r\n// создаем объект Query, в качестве параметра передаем объект сущности (инфоблок)\r\n$query = new Bitrix\\Main\\Entity\\Query(\r\n    Bitrix\\Iblock\\IblockTable::getEntity()\r\n);\r\n$query->registerRuntimeField( // поле element как ссылка на таблицу b_iblock_element\r\n    \'element\',\r\n    array(\r\n        // тип — сущность ElementTable\r\n        \'data_type\' => \'Bitrix\\Iblock\\ElementTable\',\r\n        // this.ID относится к таблице, относительно которой строится\r\n        // запрос, т.е. b_iblock.ID = b_iblock_element.IBLOCK_ID\r\n        \'reference\' => array(\'=this.ID\' => \'ref.IBLOCK_ID\'),\r\n    )\r\n);\r\n// выбираем название элемента, символьный код, краткое описание, кол-во просмотров и название инфоблока\r\n$query->setSelect(array(\'element.NAME\', \'element.CODE\', \'element.PREVIEW_TEXT\', \'element.SHOW_COUNTER\',  \'NAME\'));\r\n// выбираем только элемент с идентификатором 349\r\n$query->setFilter(array(\'element.ID\' => 349));\r\n// посмотрим, какой запрос был сформирован\r\necho $query->getQuery();\r\n// выполняем запрос\r\n$result = $query->exec();\r\n// выводим результат\r\nwhile ($row = $result->fetch()) {\r\n    debug($row);\r\n}\r\n[/php]\r\n\r\n[mysql]\r\nSELECT\r\n    `iblock_iblock_element`.`NAME` AS `IBLOCK_IBLOCK_element_NAME`,\r\n    `iblock_iblock_element`.`CODE` AS `IBLOCK_IBLOCK_element_CODE`,\r\n    `iblock_iblock_element`.`PREVIEW_TEXT` AS `IBLOCK_IBLOCK_element_PREVIEW_TEXT`,\r\n    `iblock_iblock_element`.`SHOW_COUNTER` AS `IBLOCK_IBLOCK_element_SHOW_COUNTER`,\r\n    `iblock_iblock`.`NAME` AS `NAME`\r\nFROM\r\n    `b_iblock` `iblock_iblock` LEFT JOIN `b_iblock_element` `iblock_iblock_element`\r\n    ON `iblock_iblock`.`ID` = `iblock_iblock_element`.`IBLOCK_ID`\r\nWHERE\r\n    `iblock_iblock_element`.`ID` = 349\r\n[/mysql]\r\n\r\n[code]\r\nArray\r\n(\r\n    [IBLOCK_IBLOCK_element_NAME] => Афганская борзая\r\n    [IBLOCK_IBLOCK_element_CODE] => afganskaya-borzaya\r\n    [IBLOCK_IBLOCK_element_PREVIEW_TEXT] => Изящная красавица с длинной развевающейся на бегу шелковистой шерстью...\r\n    [IBLOCK_IBLOCK_element_SHOW_COUNTER] => 10\r\n    [NAME] => Статьи о домашних животных\r\n)\r\n[/code]\r\n\r\n<h3>Пример № 6</h3>\r\n<p>\r\nВ определении runtime-reference-поля можно указывать тип соединения (<code>LEFT</code>, <code>RIGHT</code>, <code>INNER</code>), а в фильтре использовать сложную логику, как в <code>CIblockElement::GetList()</code>:\r\n</p>\r\n[php]\r\nBitrix\\Main\\Loader::includeModule(\'iblock\');\r\n\r\n// создаем объект Query, в качестве параметра передаем объект сущности (инфоблок)\r\n$query = new Bitrix\\Main\\Entity\\Query(\r\n    Bitrix\\Iblock\\IblockTable::getEntity()\r\n);\r\n// поле element как ссылка на таблицу b_iblock_element\r\n$query->registerRuntimeField(\r\n    \'element\',\r\n    array(\r\n        // тип — сущность ElementTable\r\n        \'data_type\' => \'Bitrix\\Iblock\\ElementTable\',\r\n        // this.ID относится к таблице, относительно которой строится\r\n        // запрос, т.е. b_iblock.ID = b_iblock_element.IBLOCK_ID\r\n        \'reference\' => array(\'=this.ID\' => \'ref.IBLOCK_ID\'),\r\n        // тип соединения INNER JOIN\r\n        \'join_type\' => \'INNER\'\r\n    )\r\n);\r\n// поле type как ссылка на таблицу b_iblock_type\r\n$query->registerRuntimeField(\r\n    \'type\',\r\n    array(\r\n        \'data_type\' => \'Bitrix\\Iblock\\TypeTable\',\r\n        \'reference\' => array(\'=this.IBLOCK_TYPE_ID\' => \'ref.ID\'),\r\n        \'join_type\' => \'INNER\'\r\n    )\r\n);\r\n// выбираем название инфоблока, символьный код инфоблока, название элемента,\r\n// символьный код элемента и идентификатор типа инфоблока\r\n$query->setSelect(array(\'NAME\', \'CODE\', \'element.NAME\', \'element.CODE\', \'type.ID\'));\r\n// выбираем элементы с идентификаторами 348 или 349\r\n$query->setFilter(\r\n    array(\r\n        \'LOGIC\' => \'OR\',\r\n        array(\'element.ID\' => 348),\r\n        array(\'element.ID\' => 349),\r\n    )\r\n);\r\n// посмотрим, какой запрос был сформирован\r\necho $query->getQuery();\r\n// выполняем запрос\r\n$result = $query->exec();\r\n// выводим результат\r\nwhile ($row = $result->fetch()) {\r\n    debug($row);\r\n}\r\n[/php]\r\n\r\n[mysql]\r\nSELECT\r\n    `iblock_iblock`.`NAME` AS `NAME`,\r\n    `iblock_iblock`.`CODE` AS `CODE`,\r\n    `iblock_iblock_element`.`NAME` AS `IBLOCK_IBLOCK_element_NAME`,\r\n    `iblock_iblock_element`.`CODE` AS `IBLOCK_IBLOCK_element_CODE`,\r\n    `iblock_iblock_type`.`ID` AS `IBLOCK_IBLOCK_type_ID`\r\nFROM\r\n    `b_iblock` `iblock_iblock`\r\n    INNER JOIN `b_iblock_element` `iblock_iblock_element`\r\n    ON `iblock_iblock`.`ID` = `iblock_iblock_element`.`IBLOCK_ID`\r\n    INNER JOIN `b_iblock_type` `iblock_iblock_type`\r\n    ON `iblock_iblock`.`IBLOCK_TYPE_ID` = `iblock_iblock_type`.`ID`\r\nWHERE\r\n    (`iblock_iblock_element`.`ID` = 348) OR (`iblock_iblock_element`.`ID` = 349)\r\n[/mysql]\r\n\r\n[code]\r\nArray\r\n(\r\n    [NAME] => Статьи о домашних животных\r\n    [CODE] => articles\r\n    [IBLOCK_IBLOCK_element_NAME] => Далматин\r\n    [IBLOCK_IBLOCK_element_CODE] => dalmatin\r\n    [IBLOCK_IBLOCK_type_ID] => content\r\n)\r\nArray\r\n(\r\n    [NAME] => Статьи о домашних животных\r\n    [CODE] => articles\r\n    [IBLOCK_IBLOCK_element_NAME] => Афганская борзая\r\n    [IBLOCK_IBLOCK_element_CODE] => afganskaya-borzaya\r\n    [IBLOCK_IBLOCK_type_ID] => content\r\n)\r\n[/code]\r\n\r\n<h3>Пример № 7</h3>\r\n<p>\r\nПолучаем пользовательские свойства элементов инфоблока с идентификатором 5:\r\n</p>\r\n[php]\r\nBitrix\\Main\\Loader::includeModule(\'iblock\');\r\n\r\n// создаем объект Query, в качестве параметра передаем объект сущности (свойства)\r\n$query = new Bitrix\\Main\\Entity\\Query(\r\n    Bitrix\\Iblock\\PropertyTable::getEntity()\r\n);\r\n$query->setSelect(array(\'ID\', \'NAME\', \'CODE\', \'PROPERTY_TYPE\'));\r\n$query->setFilter(array(\'IBLOCK_ID\' => 5));\r\n// посмотрим, какой запрос был сформирован\r\necho $query->getQuery();\r\n// выполняем запрос\r\n$result = $query->exec();\r\n// выводим результат\r\nwhile ($row = $result->fetch()) {\r\n    debug($row);\r\n}\r\n[/php]\r\n\r\n[mysql]\r\nSELECT\r\n    `iblock_property`.`ID` AS `ID`,\r\n    `iblock_property`.`NAME` AS `NAME`,\r\n    `iblock_property`.`CODE` AS `CODE`,\r\n    `iblock_property`.`PROPERTY_TYPE` AS `PROPERTY_TYPE`\r\nFROM\r\n    `b_iblock_property` `iblock_property`\r\nWHERE\r\n    `iblock_property`.`IBLOCK_ID` = 5\r\n[/mysql]\r\n\r\n[code]\r\nArray\r\n(\r\n    [ID] => 47\r\n    [NAME] => Автор\r\n    [CODE] => AUTHOR\r\n    [PROPERTY_TYPE] => S\r\n)\r\nArray\r\n(\r\n    [ID] => 48\r\n    [NAME] => Оценка\r\n    [CODE] => RATING\r\n    [PROPERTY_TYPE] => L\r\n)\r\nArray\r\n(\r\n    [ID] => 49\r\n    [NAME] => Галерея\r\n    [CODE] => GALLERY\r\n    [PROPERTY_TYPE] => F\r\n)\r\nArray\r\n(\r\n    [ID] => 51\r\n    [NAME] => Примечание\r\n    [CODE] => NOTE\r\n    [PROPERTY_TYPE] => S\r\n)\r\n[/code]','2018-10-27 13:08:40',1),(211,17,'Битрикс. Работа с базой данных','','','CMS, БазаДанных, Битрикс, Запрос, НовоеЯдро','Битрикс позволяет работать с базой данных на низком уровне, но это необходимо в небольшом числе случаев. Предпочтительно работать через ORM, которая позволяет программировать только на уровне бизнес-логики. Итак, сначала надо получить соединение с базой данных…','<p>\r\nБитрикс позволяет работать с базой данных на низком уровне, но это необходимо в небольшом числе случаев. Предпочтительно работать через ORM, которая позволяет программировать только на уровне бизнес-логики. Итак, сначала надо получить соединение с базой данных:\r\n</p>\r\n[php]\r\n// Получить соединение с основной базой данных\r\n$connection = Bitrix\\Main\\Application::getConnection();\r\n// Подключение к дополнительной базе данных\r\n$connection = Bitrix\\Main\\Application::getConnection(\'additional\');\r\n[/php]\r\n[php]\r\n/*\r\n * Файл bitrix/.settings.php\r\n */\r\nreturn array (\r\n    /*...*/\r\n    \'connections\' => array (\r\n        \'value\' => array (\r\n            \'default\' => array ( // основная база данных\r\n                \'className\' => \'\\\\Bitrix\\\\Main\\\\DB\\\\MysqliConnection\',\r\n                \'host\' => \'localhost\',\r\n                \'database\' => \'bitrix3\', // имя базы данных\r\n                \'login\' => \'bitrix3\',    // имя пользователя БД\r\n                \'password\' => \'.....\',   // пароль пользователя БД\r\n                \'options\' => 2.0,\r\n            ),\r\n            \'additional\' => array ( // дополнительная база данных\r\n                \'className\' => \'\\\\Bitrix\\\\Main\\\\DB\\\\MysqliConnection\',\r\n                \'host\' => \'localhost\',\r\n                \'database\' => \'bitrix4\', // имя базы данных\r\n                \'login\' => \'bitrix4\',    // имя пользователя БД\r\n                \'password\' => \'.....\',   // пароль пользователя БД\r\n                \'options\' => 2.0,\r\n            ),\r\n        ),\r\n        \'readonly\' => true,\r\n    ),\r\n    /*..*/\r\n);\r\n[/php]\r\n\r\n<p>\r\nЗапрос к базе данных с получением результата:\r\n</p>\r\n[php]\r\n$connection = Bitrix\\Main\\Application::getConnection();\r\n\r\n// Подготовка строки для использования в sql-запросе\r\n$login = \'admin\';\r\n$sqlHelper = $connection->getSqlHelper();\r\n$data = $sqlHelper->forSql($login, 50);\r\n\r\n$query = \"SELECT `NAME`, `LAST_NAME`, `EMAIL` FROM `b_user` WHERE `LOGIN` = \'\".$data.\"\'\";\r\n$result = $connection->query($query);\r\n\r\nif ($user = $result->fetch()) {\r\n    debug($user);\r\n}\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [NAME] => Сергей\r\n    [LAST_NAME] => Иванов\r\n    [EMAIL] => ivanov.s@host14.ru\r\n)\r\n[/code]\r\n\r\n<p>\r\nСкалярный запрос (возвращает не набор данных, а конкретное значение):\r\n</p>\r\n[php]\r\n$query = \"SELECT COUNT(`ID`) FROM `b_user` WHERE 1\";\r\n$count = $connection->queryScalar($query);\r\n[/php]\r\n\r\n<p>\r\nЗапрос без получения результата:\r\n</p>\r\n[php]\r\n$connection->queryExecute(\"INSERT INTO `some_table` (`NAME`, `SORT`) VALUES (\'Название\', 100)\");\r\n[/php]\r\n\r\n<p>Удалить таблицу:</p>\r\n[php]\r\n$connection->dropTable($tableName);\r\n[/php]\r\n\r\n<p>Очистить таблицу:</p>\r\n[php]\r\n$connection->truncateTable($tableName);\r\n[/php]\r\n\r\n<p>Проверить существование таблицы:</p>\r\n[php]\r\n$connection->isTableExists($tableName);\r\n[/php]\r\n\r\n<p>Переименовать таблицу:</p>\r\n[php]\r\n$connection->renameTable($oldName, $newName);\r\n[/php]\r\n\r\n<p>Получить поля таблицы:</p>\r\n[php]\r\n$connection->getTableFields($tableName);\r\n[/php]\r\n\r\n<p>Удалить колонку в таблице:</p>\r\n[php]\r\n$connection->dropColumn($tableName, $columnName);\r\n[/php]\r\n\r\n<p>Создать первичный ключ:</p>\r\n[php]\r\n$connection->createPrimaryIndex($tableName, $columnNames);\r\n[/php]\r\n\r\n<p>Создать индекс:</p>\r\n[php]\r\n$connection->createIndex($tableName, $indexName, $columnNames);\r\n[/php]\r\n\r\n<p>\r\nПодробнее можно посмотреть в <a href=\"https://dev.1c-bitrix.ru/api_d7/bitrix/main/db/connection/index.php\">документации Битрикс</a>.\r\n</p>','2018-10-30 09:47:35',1),(212,17,'Битрикс. Пользователи и группы','','','CMS, DataManager, GroupTable, ORM, UserGroupTable, UserTable, Web-разработка, add, delete, getActiveUsersCount, getList, getUserGroupIds, БазаДанных, Битрикс, Группа, НовоеЯдро, Пользователь, ПраваДоступа, Таблица','Посмотрим, как можно получать информацию по пользователям, группам пользователей, привязкам пользователей к группам, используя новое ядро и ORM. Сначала ознакомимся с исходным кодом классов UserTable (пользователи), GroupTable (группы пользователей) и UserGroupTable (связь между пользователями и группами).','<p>\r\nПосмотрим, как можно получать информацию по пользователям, группам пользователей, привязкам пользователей к группам, используя новое ядро и ORM. Сначала познакомимся с классами <code>UserTable</code> (пользователи), <code>GroupTable</code> (группы пользователей) и <code>UserGroupTable</code> (связь между пользователями и группами).\r\n</p>\r\n\r\n<h3>Классы UserTable, GroupTable и UserGroupTable</h3>\r\n[php]\r\n<?php\r\n/**\r\n * Bitrix Framework\r\n * @package bitrix\r\n * @subpackage main\r\n * @copyright 2001-2018 Bitrix\r\n */\r\nnamespace Bitrix\\Main;\r\n\r\nuse Bitrix\\Main\\DB\\SqlExpression;\r\nuse Bitrix\\Main\\Entity;\r\nuse Bitrix\\Main\\Localization\\Loc;\r\nuse Bitrix\\Main\\Search\\MapBuilder;\r\n\r\nLoc::loadMessages(__FILE__);\r\n\r\nclass UserTable extends Entity\\DataManager\r\n{\r\n    public static function getTableName()\r\n    {\r\n        return \'b_user\';\r\n    }\r\n\r\n    public static function getUfId()\r\n    {\r\n        return \'USER\';\r\n    }\r\n\r\n    public static function getMap()\r\n    {\r\n        $connection = Application::getConnection();\r\n        $helper = $connection->getSqlHelper();\r\n\r\n        return array(\r\n            \'ID\' => array(\r\n                \'data_type\' => \'integer\',\r\n                \'primary\' => true,\r\n                \'autocomplete\' => true,\r\n            ),\r\n            \'LOGIN\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PASSWORD\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'EMAIL\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'ACTIVE\' => array(\r\n                \'data_type\' => \'boolean\',\r\n                \'values\' => array(\'N\',\'Y\')\r\n            ),\r\n            \'DATE_REGISTER\' => array(\r\n                \'data_type\' => \'datetime\'\r\n            ),\r\n            \'DATE_REG_SHORT\' => array(\r\n                \'data_type\' => \'datetime\',\r\n                \'expression\' => array(\r\n                    $helper->getDatetimeToDateFunction(\'%s\'), \'DATE_REGISTER\'\r\n                )\r\n            ),\r\n            \'LAST_LOGIN\' => array(\r\n                \'data_type\' => \'datetime\'\r\n            ),\r\n            \'LAST_LOGIN_SHORT\' => array(\r\n                \'data_type\' => \'datetime\',\r\n                \'expression\' => array(\r\n                    $helper->getDatetimeToDateFunction(\'%s\'), \'LAST_LOGIN\'\r\n                )\r\n            ),\r\n            \'LAST_ACTIVITY_DATE\' => array(\r\n                \'data_type\' => \'datetime\'\r\n            ),\r\n            \'TIMESTAMP_X\' => array(\r\n                \'data_type\' => \'datetime\'\r\n            ),\r\n            \'NAME\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'SECOND_NAME\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'LAST_NAME\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'TITLE\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'EXTERNAL_AUTH_ID\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'XML_ID\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'BX_USER_ID\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'CONFIRM_CODE\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'LID\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'LANGUAGE_ID\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'TIME_ZONE_OFFSET\' => array(\r\n                \'data_type\' => \'integer\'\r\n            ),\r\n            \'PERSONAL_PROFESSION\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PERSONAL_PHONE\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PERSONAL_MOBILE\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PERSONAL_WWW\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PERSONAL_ICQ\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PERSONAL_FAX\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PERSONAL_PAGER\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PERSONAL_STREET\' => array(\r\n                \'data_type\' => \'text\'\r\n            ),\r\n            \'PERSONAL_MAILBOX\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PERSONAL_CITY\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PERSONAL_STATE\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PERSONAL_ZIP\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PERSONAL_COUNTRY\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PERSONAL_BIRTHDAY\' => array(\r\n                \'data_type\' => \'date\'\r\n            ),\r\n            \'PERSONAL_GENDER\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'PERSONAL_PHOTO\' => array(\r\n                \'data_type\' => \'integer\'\r\n            ),\r\n            \'PERSONAL_NOTES\' => array(\r\n                \'data_type\' => \'text\'\r\n            ),\r\n            \'WORK_COMPANY\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'WORK_DEPARTMENT\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'WORK_PHONE\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'WORK_POSITION\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'WORK_WWW\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'WORK_FAX\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'WORK_PAGER\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'WORK_STREET\' => array(\r\n                \'data_type\' => \'text\'\r\n            ),\r\n            \'WORK_MAILBOX\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'WORK_CITY\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'WORK_STATE\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'WORK_ZIP\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'WORK_COUNTRY\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'WORK_PROFILE\' => array(\r\n                \'data_type\' => \'text\'\r\n            ),\r\n            \'WORK_LOGO\' => array(\r\n                \'data_type\' => \'integer\'\r\n            ),\r\n            \'WORK_NOTES\' => array(\r\n                \'data_type\' => \'text\'\r\n            ),\r\n            \'ADMIN_NOTES\' => array(\r\n                \'data_type\' => \'text\'\r\n            ),\r\n            \'SHORT_NAME\' => array(\r\n                \'data_type\' => \'string\',\r\n                \'expression\' => array(\r\n                    $helper->getConcatFunction(\"%s\",\"\' \'\", \"UPPER(\".$helper->getSubstrFunction(\"%s\", 1, 1).\")\", \"\'.\'\"),\r\n                    \'LAST_NAME\', \'NAME\'\r\n                )\r\n            ),\r\n            \'IS_ONLINE\' => array(\r\n                \'data_type\' => \'boolean\',\r\n                \'values\' => array(\'N\', \'Y\'),\r\n                \'expression\' => array(\r\n                    \'CASE WHEN %s > \'.$helper->addSecondsToDateTime(\'(-\'.self::getSecondsForLimitOnline().\')\').\' THEN \\\'Y\\\' ELSE \\\'N\\\' END\',\r\n                    \'LAST_ACTIVITY_DATE\',\r\n                )\r\n            ),\r\n            \'IS_REAL_USER\' => array(\r\n                \'data_type\' => \'boolean\',\r\n                \'values\' => array(\'N\', \'Y\'),\r\n                \'expression\' => array(\r\n                    \'CASE WHEN %s IN (\"\'.join(\'\", \"\', static::getExternalUserTypes()).\'\") THEN \\\'N\\\' ELSE \\\'Y\\\' END\',\r\n                    \'EXTERNAL_AUTH_ID\',\r\n                )\r\n            ),\r\n            \'INDEX\' => array(\r\n                \'data_type\' => \'Bitrix\\Main\\UserIndex\',\r\n                \'reference\' => array(\'=this.ID\' => \'ref.USER_ID\'),\r\n                \'join_type\' => \'INNER\',\r\n            ),\r\n            (new Entity\\ReferenceField(\r\n                \'COUNTER\',\r\n                \\Bitrix\\Main\\UserCounterTable::class,\r\n                Entity\\Query\\Join::on(\'this.ID\', \'ref.USER_ID\')->where(\'ref.CODE\', \'tasks_effective\')\r\n            ))\r\n        );\r\n    }\r\n\r\n    public static function getSecondsForLimitOnline()\r\n    {\r\n        $seconds = intval(ini_get(\"session.gc_maxlifetime\"));\r\n\r\n        if ($seconds == 0)\r\n        {\r\n            $seconds = 1440;\r\n        }\r\n        else if ($seconds < 120)\r\n        {\r\n            $seconds = 120;\r\n        }\r\n\r\n        return intval($seconds);\r\n    }\r\n\r\n    public static function getActiveUsersCount()\r\n    {\r\n        if (ModuleManager::isModuleInstalled(\"intranet\"))\r\n        {\r\n            $sql = \"SELECT COUNT(U.ID) \".\r\n                \"FROM b_user U \".\r\n                \"WHERE U.ACTIVE = \'Y\' \".\r\n                \"   AND U.LAST_LOGIN IS NOT NULL \".\r\n                \"   AND EXISTS(\".\r\n                \"       SELECT \'x\' \".\r\n                \"       FROM b_utm_user UF, b_user_field F \".\r\n                \"       WHERE F.ENTITY_ID = \'USER\' \".\r\n                \"           AND F.FIELD_NAME = \'UF_DEPARTMENT\' \".\r\n                \"           AND UF.FIELD_ID = F.ID \".\r\n                \"           AND UF.VALUE_ID = U.ID \".\r\n                \"           AND UF.VALUE_INT IS NOT NULL \".\r\n                \"           AND UF.VALUE_INT <> 0\".\r\n                \"   )\";\r\n        }\r\n        else\r\n        {\r\n            $sql = \"SELECT COUNT(ID) \".\r\n                \"FROM b_user \".\r\n                \"WHERE ACTIVE = \'Y\' \".\r\n                \"   AND LAST_LOGIN IS NOT NULL\";\r\n        }\r\n\r\n        $connection = Application::getConnection();\r\n        return $connection->queryScalar($sql);\r\n    }\r\n\r\n    public static function getUserGroupIds($userId)\r\n    {\r\n        $groups = array();\r\n\r\n        // anonymous groups\r\n        $result = GroupTable::getList(array(\r\n            \'select\' => array(\'ID\'),\r\n            \'filter\' => array(\r\n                \'=ANONYMOUS\' => \'Y\',\r\n                \'=ACTIVE\' => \'Y\'\r\n            )\r\n        ));\r\n\r\n        while ($row = $result->fetch())\r\n        {\r\n            $groups[] = $row[\'ID\'];\r\n        }\r\n\r\n        if(!in_array(2, $groups))\r\n            $groups[] = 2;\r\n\r\n        if($userId > 0)\r\n        {\r\n            // private groups\r\n            $nowTimeExpression = new SqlExpression(\r\n                static::getEntity()->getConnection()->getSqlHelper()->getCurrentDateTimeFunction()\r\n            );\r\n\r\n            $result = GroupTable::getList(array(\r\n                \'select\' => array(\'ID\'),\r\n                \'filter\' => array(\r\n                    \'=UserGroup:GROUP.USER_ID\' => $userId,\r\n                    \'=ACTIVE\' => \'Y\',\r\n                    array(\r\n                        \'LOGIC\' => \'OR\',\r\n                        \'=UserGroup:GROUP.DATE_ACTIVE_FROM\' => null,\r\n                        \'<=UserGroup:GROUP.DATE_ACTIVE_FROM\' => $nowTimeExpression,\r\n                    ),\r\n                    array(\r\n                        \'LOGIC\' => \'OR\',\r\n                        \'=UserGroup:GROUP.DATE_ACTIVE_TO\' => null,\r\n                        \'>=UserGroup:GROUP.DATE_ACTIVE_TO\' => $nowTimeExpression,\r\n                    ),\r\n                    array(\r\n                        \'LOGIC\' => \'OR\',\r\n                        \'!=ANONYMOUS\' => \'Y\',\r\n                        \'=ANONYMOUS\' => null\r\n                    )\r\n                )\r\n            ));\r\n\r\n            while ($row = $result->fetch())\r\n            {\r\n                $groups[] = $row[\'ID\'];\r\n            }\r\n        }\r\n\r\n        sort($groups);\r\n\r\n        return $groups;\r\n    }\r\n\r\n    public static function getExternalUserTypes()\r\n    {\r\n        static $types = array(\"bot\", \"email\", \"controller\", \"replica\", \"imconnector\", \"sale\");\r\n        return $types;\r\n    }\r\n\r\n    public static function indexRecord($id)\r\n    {\r\n        $id = intval($id);\r\n        if($id == 0)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        $intranetInstalled = ModuleManager::isModuleInstalled(\'intranet\');\r\n\r\n        $select = array(\'ID\', \'NAME\', \'SECOND_NAME\', \'LAST_NAME\', \'WORK_POSITION\', \'LOGIN\', \'EMAIL\');\r\n        if ($intranetInstalled)\r\n        {\r\n            $select[] = \'UF_DEPARTMENT\';\r\n        }\r\n\r\n        $record = parent::getList(array(\r\n            \'select\' => $select,\r\n            \'filter\' => array(\'=ID\' => $id)\r\n        ))->fetch();\r\n\r\n        if(!is_array($record))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        $record[\'UF_DEPARTMENT_NAMES\'] = array();\r\n        if ($intranetInstalled)\r\n        {\r\n            $departmentNames = UserUtils::getDepartmentNames($record[\'UF_DEPARTMENT\']);\r\n            foreach ($departmentNames as $departmentName)\r\n            {\r\n                $record[\'UF_DEPARTMENT_NAMES\'][] = $departmentName[\'NAME\'];\r\n            }\r\n        }\r\n\r\n        $departmentName = isset($record[\'UF_DEPARTMENT_NAMES\'][0])? $record[\'UF_DEPARTMENT_NAMES\'][0]: \'\';\r\n        $searchDepartmentContent = implode(\' \', $record[\'UF_DEPARTMENT_NAMES\']);\r\n\r\n        UserIndexTable::merge(array(\r\n            \'USER_ID\' => $id,\r\n            \'NAME\' => (string)$record[\'NAME\'],\r\n            \'SECOND_NAME\' => (string)$record[\'SECOND_NAME\'],\r\n            \'LAST_NAME\' => (string)$record[\'LAST_NAME\'],\r\n            \'WORK_POSITION\' => (string)$record[\'WORK_POSITION\'],\r\n            \'UF_DEPARTMENT_NAME\' => (string)$departmentName,\r\n            \'SEARCH_USER_CONTENT\' => self::generateSearchUserContent($record),\r\n            \'SEARCH_ADMIN_CONTENT\' => self::generateSearchAdminContent($record),\r\n            \'SEARCH_DEPARTMENT_CONTENT\' => MapBuilder::create()->addText($searchDepartmentContent)->build(),\r\n        ));\r\n\r\n        return true;\r\n    }\r\n\r\n    public static function deleteIndexRecord($id)\r\n    {\r\n        UserIndexTable::delete($id);\r\n    }\r\n\r\n    private static function generateSearchUserContent(array $fields)\r\n    {\r\n        $result = MapBuilder::create()\r\n            ->addInteger($fields[\'ID\'])\r\n            ->addText($fields[\'NAME\'])\r\n            ->addText($fields[\'SECOND_NAME\'])\r\n            ->addText($fields[\'LAST_NAME\'])\r\n            ->addText($fields[\'WORK_POSITION\'])\r\n            ->addText(implode(\' \', $fields[\'UF_DEPARTMENT_NAMES\']))\r\n            ->build();\r\n\r\n        return $result;\r\n    }\r\n\r\n    private static function generateSearchAdminContent(array $fields)\r\n    {\r\n        $result = MapBuilder::create()\r\n            ->addInteger($fields[\'ID\'])\r\n            ->addText($fields[\'NAME\'])\r\n            ->addText($fields[\'SECOND_NAME\'])\r\n            ->addText($fields[\'LAST_NAME\'])\r\n            ->addEmail($fields[\'EMAIL\'])\r\n            ->addText($fields[\'WORK_POSITION\'])\r\n            ->addText($fields[\'LOGIN\'])\r\n            ->build();\r\n\r\n        return $result;\r\n    }\r\n\r\n    public static function add(array $data)\r\n    {\r\n        throw new NotImplementedException(\"Use CUser class.\");\r\n    }\r\n\r\n    public static function update($primary, array $data)\r\n    {\r\n        throw new NotImplementedException(\"Use CUser class.\");\r\n    }\r\n\r\n    public static function delete($primary)\r\n    {\r\n        throw new NotImplementedException(\"Use CUser class.\");\r\n    }\r\n\r\n    public static function onAfterAdd(Entity\\Event $event)\r\n    {\r\n        $id = $event->getParameter(\"id\");\r\n        static::indexRecord($id);\r\n        return new Entity\\EventResult();\r\n    }\r\n\r\n    public static function onAfterUpdate(Entity\\Event $event)\r\n    {\r\n        $primary = $event->getParameter(\"id\");\r\n        $id = $primary[\"ID\"];\r\n        static::indexRecord($id);\r\n        return new Entity\\EventResult();\r\n    }\r\n\r\n    public static function onAfterDelete(Entity\\Event $event)\r\n    {\r\n        $primary = $event->getParameter(\"id\");\r\n        $id = $primary[\"ID\"];\r\n        static::deleteIndexRecord($id);\r\n        return new Entity\\EventResult();\r\n    }\r\n}\r\n[/php]\r\n[php]\r\n<?php\r\n/**\r\n * Bitrix Framework\r\n * @package bitrix\r\n * @subpackage main\r\n * @copyright 2001-2014 Bitrix\r\n */\r\nnamespace Bitrix\\Main;\r\n\r\nuse Bitrix\\Main\\Entity;\r\n\r\nclass GroupTable extends Entity\\DataManager\r\n{\r\n    public static function getTableName()\r\n    {\r\n        return \'b_group\';\r\n    }\r\n\r\n    public static function getMap()\r\n    {\r\n        return array(\r\n            \'ID\' => array(\r\n                \'data_type\' => \'integer\',\r\n                \'primary\' => true,\r\n                \'autocomplete\' => true,\r\n            ),\r\n            \'TIMESTAMP_X\' => array(\r\n                \'data_type\' => \'datetime\'\r\n            ),\r\n            \'ACTIVE\' => array(\r\n                \'data_type\' => \'boolean\',\r\n                \'values\' => array(\'N\', \'Y\')\r\n            ),\r\n            \'C_SORT\' => array(\r\n                \'data_type\' => \'integer\'\r\n            ),\r\n            \'ANONYMOUS\' => array(\r\n                \'data_type\' => \'boolean\',\r\n                \'values\' => array(\'N\', \'Y\')\r\n            ),\r\n            \'NAME\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'DESCRIPTION\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n            \'STRING_ID\' => array(\r\n                \'data_type\' => \'string\'\r\n            ),\r\n        );\r\n    }\r\n}\r\n[/php]\r\n[php]\r\n<?php\r\n/**\r\n * Bitrix Framework\r\n * @package bitrix\r\n * @subpackage main\r\n * @copyright 2001-2012 Bitrix\r\n */\r\nnamespace Bitrix\\Main;\r\n\r\nuse Bitrix\\Main\\Entity;\r\nuse Bitrix\\Main\\Localization\\Loc;\r\n\r\nLoc::loadMessages(__FILE__);\r\n\r\nclass UserGroupTable extends Entity\\DataManager\r\n{\r\n    public static function getTableName()\r\n    {\r\n        return \'b_user_group\';\r\n    }\r\n\r\n    public static function getMap()\r\n    {\r\n        return array(\r\n            \'USER_ID\' => array(\r\n                \'data_type\' => \'integer\',\r\n                \'primary\' => true\r\n            ),\r\n            \'USER\' => array(\r\n                \'data_type\' => \'User\',\r\n                \'reference\' => array(\'=this.USER_ID\' => \'ref.ID\')\r\n            ),\r\n            \'GROUP_ID\' => array(\r\n                \'data_type\' => \'integer\',\r\n                \'primary\' => true\r\n            ),\r\n            \'GROUP\' => array(\r\n                \'data_type\' => \'Group\',\r\n                \'reference\' => array(\'=this.GROUP_ID\' => \'ref.ID\')\r\n            ),\r\n            \'DATE_ACTIVE_FROM\' => array(\r\n                \'data_type\' => \'datetime\',\r\n            ),\r\n            \'DATE_ACTIVE_TO\' => array(\r\n                \'data_type\' => \'datetime\',\r\n            ),\r\n        );\r\n    }\r\n}\r\n[/php]\r\n\r\n<h3>Выборка групп пользователей</h3>\r\n<p>\r\nВыбираем все группы, кроме основной группы администраторов:\r\n</p>\r\n[php]\r\n$result = \\Bitrix\\Main\\GroupTable::getList(\r\n    array(\r\n        // выбераем название, идентификатор, символьный код, сортировку\r\n        \'select\' => array(\'NAME\', \'ID\', \'STRING_ID\', \'C_SORT\'),\r\n        // все группы, кроме основной группы администраторов\r\n        \'filter\' => array(\'!ID\' => \'1\')\r\n    )\r\n);\r\n\r\nwhile ($arGroup = $result->fetch()) {\r\n    print_r($arGroup);\r\n}\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [NAME] => Все пользователи (в том числе неавторизованные)\r\n    [ID] => 2\r\n    [STRING_ID] => \r\n    [C_SORT] => 2\r\n)\r\nArray\r\n(\r\n    [NAME] => Пользователи, имеющие право голосовать за рейтинг\r\n    [ID] => 3\r\n    [STRING_ID] => RATING_VOTE\r\n    [C_SORT] => 3\r\n)\r\nArray\r\n(\r\n    [NAME] => Пользователи имеющие право голосовать за авторитет\r\n    [ID] => 4\r\n    [STRING_ID] => RATING_VOTE_AUTHORITY\r\n    [C_SORT] => 4\r\n)\r\nArray\r\n(\r\n    [NAME] => Почтовые пользователи\r\n    [ID] => 5\r\n    [STRING_ID] => MAIL_INVITED\r\n    [C_SORT] => 201\r\n)\r\nArray\r\n(\r\n    [NAME] => Зарегистрированные пользователи\r\n    [ID] => 6\r\n    [STRING_ID] => REGISTERED_USERS\r\n    [C_SORT] => 3\r\n)\r\nArray\r\n(\r\n    [NAME] => Администраторы интернет-магазина\r\n    [ID] => 7\r\n    [STRING_ID] => sale_administrator\r\n    [C_SORT] => 200\r\n)\r\nArray\r\n(\r\n    [NAME] => Контент-редакторы\r\n    [ID] => 8\r\n    [STRING_ID] => content_editor\r\n    [C_SORT] => 300\r\n)\r\nArray\r\n(\r\n    [NAME] => Постоянные покупатели\r\n    [ID] => 9\r\n    [STRING_ID] => \r\n    [C_SORT] => 100\r\n)\r\nArray\r\n(\r\n    [NAME] => Оптовые покупатели\r\n    [ID] => 10\r\n    [STRING_ID] => \r\n    [C_SORT] => 100\r\n)\r\n[/code]\r\n\r\n<h3>Принадлежность пользователя к группам</h3>\r\n<p>\r\nВыбираем все активные группы текущего пользователя:\r\n</p>\r\n[php]\r\n$result = \\Bitrix\\Main\\UserGroupTable::getList(\r\n    array(\r\n        // выбираем все активные группы текущего пользователя\r\n        \'filter\' => array(\'USER_ID\' => $GLOBALS[\'USER\']->GetID(), \'GROUP.ACTIVE\' => \'Y\'),\r\n        // выбираем идентификатор группы символьный код группы и наименование группы\r\n        \'select\' => array(\'GROUP_ID\', \'GROUP_CODE\' => \'GROUP.STRING_ID\', \'GROUP_NAME\' => \'GROUP.NAME\'),\r\n        // сортируем в соответствии с сортировкой групп\r\n        \'order\' => array(\'GROUP.C_SORT\' => \'ASC\'),\r\n    )\r\n);\r\n\r\nwhile ($arGroup = $result->fetch()) {\r\n    print_r($arGroup);\r\n}\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [GROUP_ID] => 3\r\n    [GROUP_CODE] => RATING_VOTE\r\n    [GROUP_NAME] => Пользователи, имеющие право голосовать за рейтинг\r\n)\r\nArray\r\n(\r\n    [GROUP_ID] => 6\r\n    [GROUP_CODE] => REGISTERED_USERS\r\n    [GROUP_NAME] => Зарегистрированные пользователи\r\n)\r\nArray\r\n(\r\n    [GROUP_ID] => 4\r\n    [GROUP_CODE] => RATING_VOTE_AUTHORITY\r\n    [GROUP_NAME] => Пользователи имеющие право голосовать за авторитет\r\n)\r\n[/code]\r\n\r\n<p>\r\nВыбираем всех активных пользователей группы:\r\n</p>\r\n[php]\r\n$result = \\Bitrix\\Main\\UserGroupTable::getList(\r\n    array(\r\n        // выбираем всех активных пользователей группы ID=7 (администраторы интернет-магазина)\r\n        \'filter\' => array(\'GROUP_ID\' => 7, \'USER.ACTIVE\' => \'Y\'),\r\n        // выбираем идентификатор пользователя, имя, фамилию и e-mail\r\n        \'select\' => array(\r\n            \'USER_ID\',\r\n            \'NAME\'       => \'USER.NAME\',\r\n            \'LAST_NAME\'  => \'USER.LAST_NAME\',\r\n            \'USER_EMAIL\' => \'USER.EMAIL\'),\r\n        // сортируем по идентификатору пользователя\r\n        \'order\' => array(\'USER.ID\' => \'ASC\'),\r\n    )\r\n);\r\n\r\nwhile ($arUser = $result->fetch()) {\r\n    print_r($arUser);\r\n}\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [USER_ID] => 5\r\n    [NAME] => Сергей\r\n    [LAST_NAME] => Иванов\r\n    [USER_EMAIL] => ivanov.s@mail.ru\r\n)\r\n[/code]\r\n\r\n<p>\r\nТакже можно выбирать активные группы пользователя и с помощью <code>\\Bitrix\\Main\\GroupTable</code>. Код ниже учитывает временные рамки нахождения пользователя в группе:\r\n</p>\r\n[php]\r\n$nowTimeExpression = new \\Bitrix\\Main\\DB\\SqlExpression(\r\n    \\Bitrix\\Main\\UserTable::getEntity()->getConnection()->getSqlHelper()->getCurrentDateTimeFunction()\r\n);\r\n\r\n$result = \\Bitrix\\Main\\GroupTable::getList(\r\n    array(\r\n        \'select\' => array(\'ID\', \'NAME\', \'STRING_ID\'),\r\n        \'filter\' => array(\r\n            \'=UserGroup:GROUP.USER_ID\' => $GLOBALS[\'USER\']->GetID(),\r\n            \'=ACTIVE\' => \'Y\',\r\n            array(\r\n                \'LOGIC\' => \'OR\',\r\n                \'=UserGroup:GROUP.DATE_ACTIVE_FROM\' => null,\r\n                \'<=UserGroup:GROUP.DATE_ACTIVE_FROM\' => $nowTimeExpression,\r\n            ),\r\n            array(\r\n                \'LOGIC\' => \'OR\',\r\n                \'=UserGroup:GROUP.DATE_ACTIVE_TO\' => null,\r\n                \'>=UserGroup:GROUP.DATE_ACTIVE_TO\' => $nowTimeExpression,\r\n            ),\r\n            array(\r\n                \'LOGIC\' => \'OR\',\r\n                \'!=ANONYMOUS\' => \'Y\',\r\n                \'=ANONYMOUS\' => null\r\n            )\r\n        )\r\n    )\r\n);\r\n\r\nwhile($arGroup = $result->fetch()) {\r\n    print_r($arGroup);\r\n}\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [ID] => 3\r\n    [NAME] => Пользователи, имеющие право голосовать за рейтинг\r\n    [STRING_ID] => RATING_VOTE\r\n)\r\nArray\r\n(\r\n    [ID] => 4\r\n    [NAME] => Пользователи имеющие право голосовать за авторитет\r\n    [STRING_ID] => RATING_VOTE_AUTHORITY\r\n)\r\nArray\r\n(\r\n    [ID] => 6\r\n    [NAME] => Зарегистрированные пользователи\r\n    [STRING_ID] => REGISTERED_USERS\r\n)\r\n[/code]\r\n\r\n<h3>Выборка пользователей и информации о них</h3>\r\n<p>\r\nВыборка трех последних авторизовавшихся пользователей:\r\n</p>\r\n[php]\r\n$result = \\Bitrix\\Main\\UserTable::getList(\r\n    array(\r\n        // выбираем идентификатор и генерируемое поле SHORT_NAME\r\n        \'select\' => array(\'ID\', \'SHORT_NAME\'),\r\n        // все группы, кроме основной группы администраторов\r\n        \'filter\' => array(\'!ID\' => \'1\'),\r\n        // сортировка по времени последней авторизации\r\n        \'order\'  => array(\'LAST_LOGIN\' => \'DESC\'),\r\n        // только три последних пользователя\r\n        \'limit\'  => 3\r\n    )\r\n);\r\n\r\nwhile ($arUser = $result->fetch()) {\r\n    print_r($arUser);\r\n}\r\n[/php]\r\n\r\n<p>\r\nВыборка количества активных пользователей на сайте:\r\n</p>\r\n[php]\r\necho \\Bitrix\\Main\\UserTable::getActiveUsersCount();\r\n[/php]\r\n\r\n<p>\r\nПолучение массива идентификаторов активных групп пользователя:\r\n</p>\r\n[php]\r\nprint_r(\\Bitrix\\Main\\UserTable::getUserGroupIds($GLOBALS[\'USER\']->GetID()));\r\n[/php]\r\n\r\n<h3>Добавить пользователя в группу</h3>\r\n<p>\r\nДобавить пользователя с идентифкатором 2 в группу с идентификатором 7:\r\n</p>\r\n[php]\r\n\\Bitrix\\Main\\UserGroupTable::add(\r\n    array(\r\n        \'USER_ID\' => 2,\r\n        \'GROUP_ID\' => 7,\r\n    )\r\n);\r\n[/php]\r\n\r\n<h3>Удалить пользователя из группы</h3>\r\n<p>\r\nУдалить пользователя с идентифкатором 2 из группы с идентификатором 7:\r\n</p>\r\n[php]\r\n\\Bitrix\\Main\\UserGroupTable::delete(\r\n    array(\r\n        \'USER_ID\' => 2,\r\n        \'GROUP_ID\' => 7,\r\n    )\r\n);\r\n[/php]','2018-10-31 12:09:21',1),(213,17,'Битрикс. Работа с файловой системой','','','CMS, Web-разработка, Битрикс, Директория, Класс, Копировать, Удалить, Файл, IO\\Directory, IO\\File, IO\\Path, createDirectory, deleteDirectory, isDirectoryExists, getDocumentRoot, isFileExists, getFileContents, putFileContents, deleteFile, getDirectory','За работу с файловой системой в новом ядре отвечают классы пространства имен Bitrix\\Main\\IO. Позволяют создать, удалить, скопировать, переименовать директорию или файл, проверить существование директории/файла, прочитать список файлов директории, прочитать содержимое файла и записать данные в файл и много другое.','<p>\r\nЗа работу с файловой системой в новом ядре отвечают классы пространства имен <code>Bitrix\\Main\\IO</code> — <code>IO\\Directory</code>, <code>IO\\File</code> и <code>IO\\Path</code>. \r\n</p>\r\n[php]\r\nuse Bitrix\\Main\\IO,\r\n    Bitrix\\Main\\Application;\r\n[/php]\r\n\r\n<h2>Класс IO\\File</h2>\r\n[php]\r\n$file = new IO\\File(Application::getDocumentRoot().\'/file.txt\');\r\n[/php]\r\n<p>\r\nИнформация о файле:\r\n</p>\r\n[php]\r\n$isExist = $file->isExists(); // true, если файл существует\r\n\r\n$dir = $file->getDirectory();     // директория файла как объект IO\\Directory\r\n$dir = $file->getDirectoryName(); // директория файла в виде текста\r\n\r\n$fileName = $file->getName();           // имя файла\r\n$fileExt = $file->getExtension();       // расширение файла\r\n$fileSize = $file->getSize();           // размер файла в байтах\r\n$contentType = $file->getContentType(); // тип файла, Content-type\r\n\r\n$createdAt = $file->getCreationTime();      // дата создания, timestamp\r\n$accessAt = $file->getLastAccessTime();     // дата последнего доступа, timestamp\r\n$modifiedAt = $file->getModificationTime(); // дата модификации, timestamp\r\n\r\n$perms = $file->getPermissions(); // права на файл в виде десятичного числа\r\n$perms = substr(sprintf(\'%o\', $file->getPermissions()), -3); // права на файл в виде восьмеричного числа\r\n[/php]\r\n<p>\r\nДействия над файлами:\r\n</p>\r\n[php]\r\n$content = $file->getContents();    // получить содержание файла\r\n$file->putContents(\'some content\'); // записать содержимое в файл с заменой\r\n$file->putContents(\'other content\', IO\\File::APPEND); // дописать содержимое в конец файла\r\n$file->readFile();  // вывести содержимое файла\r\n\r\n$file->rename(Application::getDocumentRoot().\'/new-file.txt\'); // переместить/переименовать файл\r\n$file->delete();  // удалить файл\r\n[/php]\r\n<p>\r\nУ некоторых методов есть статические варианты:\r\n</p>\r\n[php]\r\n$path = Application::getDocumentRoot().\'/file.txt\';\r\nIO\\File::isFileExists($path); // проверить существование файла\r\n\r\nIO\\File::getFileContents($path); // получить содержание файла\r\nIO\\File::putFileContents($path, \'some content\'); // записать содержимое в файл с заменой\r\nIO\\File::putFileContents($path, \'other content\', self::APPEND); // дописать содержимое в конец файла\r\n\r\nIO\\File::deleteFile($path); // удалить файл\r\n[/php]\r\n\r\n<h2>Класс IO\\Directory</h2>\r\n[php]\r\n$dir = new IO\\Directory(Application::getDocumentRoot().\'/test/\');\r\n[/php]\r\n<p>\r\nЕсли директории не существует, её можно создать:\r\n</p>\r\n[php]\r\n$dir->create(); // создаёт директорию с указанным в конструкторе путём\r\n[/php]\r\n<p>\r\nИнформация о директории:\r\n</p>\r\n[php]\r\n$isExist = $dir->isExists(); // true, если директория существует\r\n\r\n$createdAt = $dir->getCreationTime();      // дата создания, timestamp\r\n$accessAt = $dir->getLastAccessTime();     // дата последнего доступа, timestamp\r\n$modifiedAt = $dir->getModificationTime(); // дата модификации, timestamp\r\n\r\n$perms = $dir->getPermissions(); // права на директорию в виде десятичного числа\r\n$perms = substr(sprintf(\'%o\', $dir->getPermissions()), -3); // права на директорию в виде восьмеричного числа\r\n[/php]\r\n<p>\r\nДействия над директориями:\r\n</p>\r\n[php]\r\n$childDir = $dir->createSubdirectory(\'child\'); // создает и возвращает вложенную директорию с указанным именем \r\n$dir->rename(Application::getDocumentRoot().\'/other-path/\'); // переместить/переименовать директорию\r\n$dir->delete(); // удалить директорию\r\n[/php]\r\n<p>\r\nПолучить массив файлов в директории:\r\n</p>\r\n[php]\r\n$files = $dir->getChildren(); // массив объектов IO\\File\r\n[/php]\r\n<p>\r\nУ некоторых методов есть статические варианты:\r\n</p>\r\n[php]\r\n$path = Application::getDocumentRoot().\'/some-dir/\';\r\nIO\\Directory::createDirectory($path);   // создать директорию\r\nIO\\Directory::deleteDirectory($path);   // удалить директорию\r\nIO\\Directory::isDirectoryExists($path); // проверить существование\r\n[/php]\r\n\r\n<h2>Класс IO\\Path</h2>\r\n[php]\r\n$path = Application::getDocumentRoot().\'/some-dir/some-file.ext\';\r\n$fileName = IO\\Path::getName($path);     // возвращает имя файла\r\n$fileDir = IO\\Path::getDirectory($path); // возвращает директорию файла (полный путь)\r\n$fileExt = IO\\Path::getExtension($path); // возвращает расширение файла\r\n[/php]\r\n\r\n<h2>Исходные коды</h2>\r\n[php]\r\n<?php\r\n/*\r\n * Файл bitrix/modules/main/lib/io/file.php\r\n */\r\n\r\nnamespace Bitrix\\Main\\IO;\r\n\r\nclass File extends FileEntry implements IFileStream\r\n{\r\n    const REWRITE = 0;\r\n    const APPEND = 1;\r\n\r\n    /** @var resource */\r\n    protected $filePointer;\r\n\r\n    public function __construct($path, $siteId = null)\r\n    {\r\n        parent::__construct($path, $siteId);\r\n    }\r\n\r\n    /**\r\n     * Opens the file and returns the file pointer.\r\n     *\r\n     * @param string $mode\r\n     * @return resource\r\n     * @throws FileOpenException\r\n     */\r\n    public function open($mode)\r\n    {\r\n        $this->filePointer = fopen($this->getPhysicalPath(), $mode.\"b\");\r\n        if (!$this->filePointer)\r\n        {\r\n            throw new FileOpenException($this->originalPath);\r\n        }\r\n        return $this->filePointer;\r\n    }\r\n\r\n    /**\r\n     * Closes the file.\r\n     *\r\n     * @throws FileNotOpenedException\r\n     */\r\n    public function close()\r\n    {\r\n        if(!$this->filePointer)\r\n        {\r\n            throw new FileNotOpenedException($this->originalPath);\r\n        }\r\n        fclose($this->filePointer);\r\n        $this->filePointer = null;\r\n    }\r\n\r\n    public function isExists()\r\n    {\r\n        $p = $this->getPhysicalPath();\r\n        return file_exists($p) && (is_file($p) || is_link($p));\r\n    }\r\n\r\n    public function getContents()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        return file_get_contents($this->getPhysicalPath());\r\n    }\r\n\r\n    public function putContents($data, $flags = self::REWRITE)\r\n    {\r\n        $dir = $this->getDirectory();\r\n        if (!$dir->isExists())\r\n            $dir->create();\r\n\r\n        if ($this->isExists() && !$this->isWritable())\r\n            $this->markWritable();\r\n\r\n        return $flags & self::APPEND\r\n            ? file_put_contents($this->getPhysicalPath(), $data, FILE_APPEND)\r\n            : file_put_contents($this->getPhysicalPath(), $data);\r\n    }\r\n\r\n    /**\r\n     * Returns the file size.\r\n     *\r\n     * @return float|int\r\n     * @throws FileNotFoundException\r\n     * @throws FileOpenException\r\n     */\r\n    public function getSize()\r\n    {\r\n        if (!$this->isExists())\r\n        {\r\n            throw new FileNotFoundException($this->originalPath);\r\n        }\r\n\r\n        static $supportLarge32 = null;\r\n        if($supportLarge32 === null)\r\n        {\r\n            $supportLarge32 = (\\Bitrix\\Main\\Config\\Configuration::getValue(\"large_files_32bit_support\") === true);\r\n        }\r\n\r\n        $size = 0;\r\n        if(PHP_INT_SIZE < 8 && $supportLarge32)\r\n        {\r\n            // 32bit\r\n            $this->open(FileStreamOpenMode::READ);\r\n\r\n            if(fseek($this->filePointer, 0, SEEK_END) === 0)\r\n            {\r\n                $size = 0.0;\r\n                $step = 0x7FFFFFFF;\r\n                while($step > 0)\r\n                {\r\n                    if (fseek($this->filePointer, -$step, SEEK_CUR) === 0)\r\n                    {\r\n                        $size += floatval($step);\r\n                    }\r\n                    else\r\n                    {\r\n                        $step >>= 1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            $this->close();\r\n        }\r\n        else\r\n        {\r\n            // 64bit\r\n            $size = filesize($this->getPhysicalPath());\r\n        }\r\n\r\n        return $size;\r\n    }\r\n\r\n    /**\r\n     * Seeks on the file pointer from the beginning (SEEK_SET only).\r\n     *\r\n     * @param int|float $position\r\n     * @return int\r\n     * @throws FileNotOpenedException\r\n     */\r\n    public function seek($position)\r\n    {\r\n        if(!$this->filePointer)\r\n        {\r\n            throw new FileNotOpenedException($this->originalPath);\r\n        }\r\n\r\n        if($position <= PHP_INT_MAX)\r\n        {\r\n            return fseek($this->filePointer, $position, SEEK_SET);\r\n        }\r\n        else\r\n        {\r\n            $res = fseek($this->filePointer, 0, SEEK_SET);\r\n            if($res === 0)\r\n            {\r\n                do\r\n                {\r\n                    $offset = ($position < PHP_INT_MAX? $position : PHP_INT_MAX);\r\n                    $res = fseek($this->filePointer, $offset, SEEK_CUR);\r\n                    if($res !== 0)\r\n                    {\r\n                        break;\r\n                    }\r\n                    $position -= PHP_INT_MAX;\r\n                }\r\n                while($position > 0);\r\n            }\r\n            return $res;\r\n        }\r\n    }\r\n\r\n    public function isWritable()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        return is_writable($this->getPhysicalPath());\r\n    }\r\n\r\n    public function isReadable()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        return is_readable($this->getPhysicalPath());\r\n    }\r\n\r\n    public function readFile()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        return readfile($this->getPhysicalPath());\r\n    }\r\n\r\n    public function getCreationTime()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        return filectime($this->getPhysicalPath());\r\n    }\r\n\r\n    public function getLastAccessTime()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        return fileatime($this->getPhysicalPath());\r\n    }\r\n\r\n    public function getModificationTime()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        return filemtime($this->getPhysicalPath());\r\n    }\r\n\r\n    public function markWritable()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        @chmod($this->getPhysicalPath(), BX_FILE_PERMISSIONS);\r\n    }\r\n\r\n    public function getPermissions()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        return fileperms($this->getPhysicalPath());\r\n    }\r\n\r\n    public function delete()\r\n    {\r\n        if ($this->isExists())\r\n            return unlink($this->getPhysicalPath());\r\n\r\n        return true;\r\n    }\r\n\r\n    public function getContentType()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        $finfo = \\finfo_open(FILEINFO_MIME_TYPE);\r\n        $contentType = \\finfo_file($finfo, $this->getPath());\r\n        \\finfo_close($finfo);\r\n\r\n        return $contentType;\r\n    }\r\n\r\n    public static function isFileExists($path)\r\n    {\r\n        $f = new self($path);\r\n        return $f->isExists();\r\n    }\r\n\r\n    public static function getFileContents($path)\r\n    {\r\n        $f = new self($path);\r\n        return $f->getContents();\r\n    }\r\n\r\n    public static function putFileContents($path, $data, $flags=self::REWRITE)\r\n    {\r\n        $f = new self($path);\r\n        return $f->putContents($data, $flags);\r\n    }\r\n\r\n    public static function deleteFile($path)\r\n    {\r\n        $f = new self($path);\r\n        return $f->delete();\r\n    }\r\n}\r\n[/php]\r\n[php]\r\n<?php\r\n/*\r\n * Файл bitrix/modules/main/lib/io/directory.php\r\n */\r\n\r\nnamespace Bitrix\\Main\\IO;\r\n\r\nclass Directory extends DirectoryEntry\r\n{\r\n    public function __construct($path, $siteId = null)\r\n    {\r\n        parent::__construct($path, $siteId);\r\n    }\r\n\r\n    public function isExists()\r\n    {\r\n        $p = $this->getPhysicalPath();\r\n        return file_exists($p) && is_dir($p);\r\n    }\r\n\r\n    public function delete()\r\n    {\r\n        return self::deleteInternal($this->getPhysicalPath());\r\n    }\r\n\r\n    private static function deleteInternal($path)\r\n    {\r\n        if (is_file($path) || is_link($path))\r\n        {\r\n            if (!@unlink($path))\r\n                throw new FileDeleteException($path);\r\n        }\r\n        elseif (is_dir($path))\r\n        {\r\n            if ($handle = opendir($path))\r\n            {\r\n                while (($file = readdir($handle)) !== false)\r\n                {\r\n                    if ($file == \".\" || $file == \"..\")\r\n                        continue;\r\n\r\n                    self::deleteInternal(Path::combine($path, $file));\r\n                }\r\n                closedir($handle);\r\n            }\r\n            if (!@rmdir($path))\r\n                throw new FileDeleteException($path);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return array|FileSystemEntry[]\r\n     * @throws FileNotFoundException\r\n     */\r\n    public function getChildren()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        $arResult = array();\r\n\r\n        if ($handle = opendir($this->getPhysicalPath()))\r\n        {\r\n            while (($file = readdir($handle)) !== false)\r\n            {\r\n                if ($file == \".\" || $file == \"..\")\r\n                    continue;\r\n\r\n                $pathLogical = Path::combine($this->path, Path::convertPhysicalToLogical($file));\r\n                $pathPhysical = Path::combine($this->getPhysicalPath(), $file);\r\n                if (is_dir($pathPhysical))\r\n                    $arResult[] = new Directory($pathLogical);\r\n                else\r\n                    $arResult[] = new File($pathLogical);\r\n            }\r\n            closedir($handle);\r\n        }\r\n\r\n        return $arResult;\r\n    }\r\n\r\n    /**\r\n     * @param $name\r\n     * @return Directory|DirectoryEntry\r\n     */\r\n    public function createSubdirectory($name)\r\n    {\r\n        $dir = new Directory(Path::combine($this->path, $name));\r\n        if (!$dir->isExists())\r\n            mkdir($dir->getPhysicalPath(), BX_DIR_PERMISSIONS, true);\r\n        return $dir;\r\n    }\r\n\r\n    public function getCreationTime()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        return filectime($this->getPhysicalPath());\r\n    }\r\n\r\n    public function getLastAccessTime()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        return fileatime($this->getPhysicalPath());\r\n    }\r\n\r\n    public function getModificationTime()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        return filemtime($this->getPhysicalPath());\r\n    }\r\n\r\n    public function markWritable()\r\n    {\r\n        if (!$this->isExists())\r\n            throw new FileNotFoundException($this->originalPath);\r\n\r\n        @chmod($this->getPhysicalPath(), BX_DIR_PERMISSIONS);\r\n    }\r\n\r\n    public function getPermissions()\r\n    {\r\n        return fileperms($this->getPhysicalPath());\r\n    }\r\n\r\n    /**\r\n     * @param $path\r\n     *\r\n     * @return Directory\r\n     */\r\n    public static function createDirectory($path)\r\n    {\r\n        $dir = new self($path);\r\n        $dir->create();\r\n\r\n        return $dir;\r\n    }\r\n\r\n    public static function deleteDirectory($path)\r\n    {\r\n        $dir = new self($path);\r\n        $dir->delete();\r\n    }\r\n\r\n    public static function isDirectoryExists($path)\r\n    {\r\n        $f = new self($path);\r\n        return $f->isExists();\r\n    }\r\n}\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/*\r\n * Файл bitrix/modules/main/lib/io/path.php\r\n */\r\n\r\nnamespace Bitrix\\Main\\IO;\r\n\r\nuse Bitrix\\Main;\r\nuse Bitrix\\Main\\Text;\r\n\r\nclass Path\r\n{\r\n    const DIRECTORY_SEPARATOR = \'/\';\r\n    const DIRECTORY_SEPARATOR_ALT = \'\\\\\';\r\n    const PATH_SEPARATOR = PATH_SEPARATOR;\r\n\r\n    const INVALID_FILENAME_CHARS = \"\\\\/:*?\\\"\'<>|~#&;\";\r\n\r\n    // the pattern should be quoted, \"|\" is allowed below as a delimiter\r\n    const INVALID_FILENAME_BYTES = \"\\xE2\\x80\\xAE\"; // Right-to-Left Override Unicode Character\r\n\r\n    protected static $physicalEncoding = \"\";\r\n    protected static $logicalEncoding = \"\";\r\n\r\n    protected static $directoryIndex = null;\r\n\r\n    public static function normalize($path)\r\n    {\r\n        if (!is_string($path) || ($path == \"\"))\r\n            return null;\r\n\r\n        // slashes does not matter for Windows\r\n        static $pattern = null, $tailPattern;\r\n        if (!$pattern)\r\n        {\r\n            if(strncasecmp(PHP_OS, \"WIN\", 3) == 0)\r\n            {\r\n                // windows\r\n                $pattern = \"\'[\\\\\\\\/]+\'\";\r\n                $tailPattern = \"\\0.\\\\/+ \";\r\n            }\r\n            else\r\n            {\r\n                // unix\r\n                $pattern = \"\'[/]+\'\";\r\n                $tailPattern = \"\\0/\";\r\n            }\r\n        }\r\n        $pathTmp = preg_replace($pattern, \"/\", $path);\r\n\r\n        if (strpos($pathTmp, \"\\0\") !== false)\r\n            throw new InvalidPathException($path);\r\n\r\n        if (preg_match(\"#(^|/)(\\\\.|\\\\.\\\\.)(/|\\$)#\", $pathTmp))\r\n        {\r\n            $arPathTmp = explode(\'/\', $pathTmp);\r\n            $arPathStack = array();\r\n            foreach ($arPathTmp as $i => $pathPart)\r\n            {\r\n                if ($pathPart === \'.\')\r\n                    continue;\r\n\r\n                if ($pathPart === \"..\")\r\n                {\r\n                    if (array_pop($arPathStack) === null)\r\n                        throw new InvalidPathException($path);\r\n                }\r\n                else\r\n                {\r\n                    array_push($arPathStack, $pathPart);\r\n                }\r\n            }\r\n            $pathTmp = implode(\"/\", $arPathStack);\r\n        }\r\n\r\n        $pathTmp = rtrim($pathTmp, $tailPattern);\r\n\r\n        if (substr($path, 0, 1) === \"/\" && substr($pathTmp, 0, 1) !== \"/\")\r\n            $pathTmp = \"/\".$pathTmp;\r\n\r\n        if ($pathTmp === \'\')\r\n            $pathTmp = \"/\";\r\n\r\n        return $pathTmp;\r\n    }\r\n\r\n    public static function getExtension($path)\r\n    {\r\n        $path = self::getName($path);\r\n        if ($path != \'\')\r\n        {\r\n            $pos = Text\\UtfSafeString::getLastPosition($path, \'.\');\r\n            if ($pos !== false)\r\n                return substr($path, $pos + 1);\r\n        }\r\n        return \'\';\r\n    }\r\n\r\n    public static function getName($path)\r\n    {\r\n        // $path = self::normalize($path);\r\n\r\n        $p = Text\\UtfSafeString::getLastPosition($path, self::DIRECTORY_SEPARATOR);\r\n        if ($p !== false)\r\n            return substr($path, $p + 1);\r\n\r\n        return $path;\r\n    }\r\n\r\n    public static function getDirectory($path)\r\n    {\r\n        return substr($path, 0, -strlen(self::getName($path)) - 1);\r\n    }\r\n\r\n    public static function convertLogicalToPhysical($path)\r\n    {\r\n        if (self::$physicalEncoding == \"\")\r\n            self::$physicalEncoding = self::getPhysicalEncoding();\r\n\r\n        if (self::$logicalEncoding == \"\")\r\n            self::$logicalEncoding = self::getLogicalEncoding();\r\n\r\n        if (self::$physicalEncoding == self::$logicalEncoding)\r\n            return $path;\r\n\r\n        return Text\\Encoding::convertEncoding($path, self::$logicalEncoding, self::$physicalEncoding);\r\n    }\r\n\r\n    public static function convertPhysicalToLogical($path)\r\n    {\r\n        if (self::$physicalEncoding == \"\")\r\n            self::$physicalEncoding = self::getPhysicalEncoding();\r\n\r\n        if (self::$logicalEncoding == \"\")\r\n            self::$logicalEncoding = self::getLogicalEncoding();\r\n\r\n        if (self::$physicalEncoding == self::$logicalEncoding)\r\n            return $path;\r\n\r\n        return Text\\Encoding::convertEncoding($path, self::$physicalEncoding, self::$logicalEncoding);\r\n    }\r\n\r\n    public static function convertLogicalToUri($path)\r\n    {\r\n        if (self::$logicalEncoding == \"\")\r\n            self::$logicalEncoding = self::getLogicalEncoding();\r\n\r\n        if (self::$directoryIndex == null)\r\n            self::$directoryIndex = self::getDirectoryIndexArray();\r\n\r\n        if (isset(self::$directoryIndex[self::getName($path)]))\r\n            $path = self::getDirectory($path).\"/\";\r\n\r\n        if (\'utf-8\' !== self::$logicalEncoding)\r\n            $path = Text\\Encoding::convertEncoding($path, self::$logicalEncoding, \'utf-8\');\r\n\r\n        return implode(\'/\', array_map(\"rawurlencode\", explode(\'/\', $path)));\r\n    }\r\n\r\n    public static function convertPhysicalToUri($path)\r\n    {\r\n        if (self::$physicalEncoding == \"\")\r\n            self::$physicalEncoding = self::getPhysicalEncoding();\r\n\r\n        if (self::$directoryIndex == null)\r\n            self::$directoryIndex = self::getDirectoryIndexArray();\r\n\r\n        if (isset(self::$directoryIndex[self::getName($path)]))\r\n            $path = self::getDirectory($path).\"/\";\r\n\r\n        if (\'utf-8\' !== self::$physicalEncoding)\r\n            $path = Text\\Encoding::convertEncoding($path, self::$physicalEncoding, \'utf-8\');\r\n\r\n        return implode(\'/\', array_map(\"rawurlencode\", explode(\'/\', $path)));\r\n    }\r\n\r\n    public static function convertUriToPhysical($path)\r\n    {\r\n        if (self::$physicalEncoding == \"\")\r\n            self::$physicalEncoding = self::getPhysicalEncoding();\r\n\r\n        if (self::$directoryIndex == null)\r\n            self::$directoryIndex = self::getDirectoryIndexArray();\r\n\r\n        $path = implode(\'/\', array_map(\"rawurldecode\", explode(\'/\', $path)));\r\n\r\n        if (\'utf-8\' !== self::$physicalEncoding)\r\n            $path = Text\\Encoding::convertEncoding($path, \'utf-8\', self::$physicalEncoding);\r\n\r\n        return $path;\r\n    }\r\n\r\n    protected static function getLogicalEncoding()\r\n    {\r\n        if (defined(\'BX_UTF\'))\r\n            $logicalEncoding = \"utf-8\";\r\n        elseif (defined(\"SITE_CHARSET\") && (strlen(SITE_CHARSET) > 0))\r\n            $logicalEncoding = SITE_CHARSET;\r\n        elseif (defined(\"LANG_CHARSET\") && (strlen(LANG_CHARSET) > 0))\r\n            $logicalEncoding = LANG_CHARSET;\r\n        elseif (defined(\"BX_DEFAULT_CHARSET\"))\r\n            $logicalEncoding = BX_DEFAULT_CHARSET;\r\n        else\r\n            $logicalEncoding = \"windows-1251\";\r\n\r\n        return strtolower($logicalEncoding);\r\n    }\r\n\r\n    protected static function getPhysicalEncoding()\r\n    {\r\n        $physicalEncoding = defined(\"BX_FILE_SYSTEM_ENCODING\") ? BX_FILE_SYSTEM_ENCODING : \"\";\r\n        if ($physicalEncoding == \"\")\r\n        {\r\n            if (strtoupper(substr(PHP_OS, 0, 3)) === \"WIN\")\r\n                $physicalEncoding = \"windows-1251\";\r\n            else\r\n                $physicalEncoding = \"utf-8\";\r\n        }\r\n        return strtolower($physicalEncoding);\r\n    }\r\n\r\n    public static function combine()\r\n    {\r\n        $numArgs = func_num_args();\r\n        if ($numArgs <= 0)\r\n            return \"\";\r\n\r\n        $arParts = array();\r\n        for ($i = 0; $i < $numArgs; $i++)\r\n        {\r\n            $arg = func_get_arg($i);\r\n            if (is_array($arg))\r\n            {\r\n                if (empty($arg))\r\n                    continue;\r\n\r\n                foreach ($arg as $v)\r\n                {\r\n                    if (!is_string($v) || $v == \"\")\r\n                        continue;\r\n                    $arParts[] = $v;\r\n                }\r\n            }\r\n            elseif (is_string($arg))\r\n            {\r\n                if ($arg == \"\")\r\n                    continue;\r\n\r\n                $arParts[] = $arg;\r\n            }\r\n        }\r\n\r\n        $result = \"\";\r\n        foreach ($arParts as $part)\r\n        {\r\n            if ($result !== \"\")\r\n                $result .= self::DIRECTORY_SEPARATOR;\r\n            $result .= $part;\r\n        }\r\n\r\n        $result = self::normalize($result);\r\n\r\n        return $result;\r\n    }\r\n\r\n    public static function convertRelativeToAbsolute($relativePath)\r\n    {\r\n        if (!is_string($relativePath))\r\n            throw new Main\\ArgumentTypeException(\"relativePath\", \"string\");\r\n        if ($relativePath == \"\")\r\n            throw new Main\\ArgumentNullException(\"relativePath\");\r\n\r\n        return self::combine($_SERVER[\"DOCUMENT_ROOT\"], $relativePath);\r\n    }\r\n\r\n    public static function convertSiteRelativeToAbsolute($relativePath, $site = null)\r\n    {\r\n        if (!is_string($relativePath) || $relativePath == \"\")\r\n            $site = SITE_ID;\r\n\r\n        $basePath = Main\\SiteTable::getDocumentRoot($site);\r\n\r\n        return self::combine($basePath, $relativePath);\r\n    }\r\n\r\n    protected static function validateCommon($path)\r\n    {\r\n        if (!is_string($path))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (trim($path) == \"\")\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (strpos($path, \"\\0\") !== false)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if(preg_match(\"#(\".self::INVALID_FILENAME_BYTES.\")#\", $path))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public static function validate($path)\r\n    {\r\n        if(!static::validateCommon($path))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        return (preg_match(\"#^([a-z]:)?/([^\\x01-\\x1F\".preg_quote(self::INVALID_FILENAME_CHARS, \"#\").\"]+/?)*$#isD\", $path) > 0);\r\n    }\r\n\r\n    public static function validateFilename($filename)\r\n    {\r\n        if(!static::validateCommon($filename))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        return (preg_match(\"#^[^\\x01-\\x1F\".preg_quote(self::INVALID_FILENAME_CHARS, \"#\").\"]+$#isD\", $filename) > 0);\r\n    }\r\n\r\n    /**\r\n     * @param string $filename\r\n     * @param callable $callback\r\n     * @return string\r\n     */\r\n    public static function replaceInvalidFilename($filename, $callback)\r\n    {\r\n        return preg_replace_callback(\r\n            \"#([\\x01-\\x1F\".preg_quote(self::INVALID_FILENAME_CHARS, \"#\").\"]|\".self::INVALID_FILENAME_BYTES.\")#\",\r\n            $callback,\r\n            $filename\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param string $filename\r\n     * @return string\r\n     */\r\n    public static function randomizeInvalidFilename($filename)\r\n    {\r\n        return static::replaceInvalidFilename($filename,\r\n            function()\r\n            {\r\n                return chr(rand(97, 122));\r\n            }\r\n        );\r\n    }\r\n\r\n    public static function isAbsolute($path)\r\n    {\r\n        return (substr($path, 0, 1) === \"/\") || preg_match(\"#^[a-z]:/#i\", $path);\r\n    }\r\n\r\n    protected static function getDirectoryIndexArray()\r\n    {\r\n        static $directoryIndexDefault = array(\r\n            \"index.php\" => 1,\r\n            \"index.html\" => 1,\r\n            \"index.htm\" => 1,\r\n            \"index.phtml\" => 1,\r\n            \"default.html\" => 1,\r\n            \"index.php3\" => 1\r\n        );\r\n\r\n        $directoryIndex = Main\\Config\\Configuration::getValue(\"directory_index\");\r\n        if ($directoryIndex !== null)\r\n            return $directoryIndex;\r\n\r\n        return $directoryIndexDefault;\r\n    }\r\n}\r\n[/php]','2018-11-02 13:38:32',1),(214,17,'Битрикс. Классы CPHPCache и Cache','','','CMS, Web-разработка, Битрикс, Класс, Кеширование, CPageCache, CPHPCache, Cache, StartDataCache, EndDataCache, AbortDataCache, InitCache, GetVars, createInstance, cleanDir, Старое ядро, Новое ядро','Кеширование позволяет уменьшить нагрузку на аппаратные ресурсы, таким образом влияя на время отклика сайта. Используется как в стандартных компонентах, так и в компонентах, разработанных под свои нужды. Результаты ресурсоемких, а так же редко обновляемых кусков кода заносятся в кеш, при повторном запросе результат выдается из кеша.','<p>\r\nКеширование позволяет уменьшить нагрузку на аппаратные ресурсы, таким образом влияя на время отклика сайта. Используется как в стандартных компонентах, так и в компонентах, разработанных под свои нужды. Результаты ресурсоемких, а так же редко обновляемых кусков кода заносятся в кеш, при повторном запросе результат выдается из кеша.\r\n</p>\r\n\r\n<h2>Старое ядро</h2>\r\n<p>\r\nВ старом ядре Битрикс для кеширования есть два класса — это <code>CPageCache</code> и <code>CPHPCache</code>. Первый служит для кеширования сформированного HTML-кода, второй — для кеширования HTML-кода и PHP-переменных. Файлы кеша записываются в каталог <code>/bitrix/cache/</code>.\r\n</p>\r\n\r\n<h3>Класс CPageCache</h3>\r\n\r\n[php]\r\n// подключаем модуль «Информационные блоки»\r\nif (!CModule::IncludeModule(\'iblock\')) {\r\n    ShowError(\'Модуль «Информационные блоки» не установлен\');\r\n}\r\n\r\n// тип инфоблока, откуда будем получать элемент инфоблока\r\n$iblockType = \'content\';\r\n// идентификатор инфоблока, откуда будем получать элемент\r\n$iblockId = 5;\r\n// идентификатор элемента инфоблока, который надо показать\r\n$elementId = 354;\r\n\r\n// создаем объект кеша\r\n$pageCache = new CPageCache();\r\n \r\n// время кеширования в секундах\r\n$cacheTime = 3600;\r\n \r\n// формируем идентификатор кеша в зависимости от всех параметров, \r\n// которые могут повлиять на результирующий HTML-код\r\n$cacheId = $iblockType.$elementId;\r\n// директороия для хранения файлов кеша\r\n$cacheDir = \'/some-cache-dir\';\r\n\r\n// начинаем буферизацию вывода\r\nif ($pageCache->StartDataCache($cacheTime, $cacheId, $cacheDir)) {\r\n\r\n    // выбираем из базы данных элемент инфоблока\r\n    if ($arElement = GetIBlockElement($elementId, $iblockType)) {\r\n        // выводим заголовок страницы\r\n        echo \'<h1>\'.$arElement[\'NAME\'].\'</h1>\', PHP_EOL;\r\n        // выводим картинку\r\n        echo CFile::ShowImage($arElement[\'DETAIL_PICTURE\'], 500, 500), PHP_EOL;\r\n        // выводим краткое описание\r\n        echo \'<p>\'.$arElement[\'PREVIEW_TEXT\'].\'</p>\';\r\n        // записываем буферизированный вывод в файл кеша\r\n        $pageCache->EndDataCache(); \r\n    } else {\r\n        $pageCache->AbortDataCache();\r\n        \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n            \'Страница не найдена\',\r\n            true,\r\n            true\r\n        );\r\n    }\r\n}\r\n[/php]\r\n<div class=\"note\">\r\nЗначение переменной <code>$cacheDir</code> начинается со слеша и им не заканчивается. При использовании в качестве кеша <code>memcached</code> это будет критичным при сбросе кеша.\r\n</div>\r\n<p>\r\nФайл кеша <code>/bitrix/cache/some-cache-dir/47/476bb6ea1797242d5401ed9ec02c831e.html</code> содержит в себе отметку времени (функция <code>time()</code>) — когда она станет меньше текущей, кеш уже не актуален:\r\n</p>\r\n[code]\r\nBX001541320265[red]001541320265[/red]<h1>Ангорская кошка</h1>\r\n<img src=\"/upload/iblock/57f/57f3872d827b2a94d61be9c999556d4b.jpg\" border=\"0\" alt=\"\" width=\"500\" height=\"500\" />\r\n<p>Ангорская кошка — порода домашних кошек, которая была создана европейскими и американскими селекционерами на\r\nоснове группы особей, вывезенных из Зоопарка Анкары в середине XX века. Турецкая ангора не только умна, но и\r\nчрезвычайно адаптивна, ласкова и игрива.</p>\r\n[/code]\r\n\r\n<h3>Класс CPHPCache</h3>\r\n<p>\r\nПример кеширования PHP-переменных:\r\n</p>\r\n[php]\r\n// подключаем модуль «Информационные блоки»\r\nif (!CModule::IncludeModule(\'iblock\')) {\r\n    ShowError(\'Модуль «Информационные блоки» не установлен\');\r\n}\r\n\r\n// тип инфоблока, откуда будем получать элемент инфоблока\r\n$iblockType = \'content\';\r\n// идентификатор инфоблока, откуда будем получать элемент\r\n$iblockId = 5;\r\n// идентификатор элемента инфоблока, который надо показать\r\n$elementId = 354;\r\n// если что-то пошло не так, эта переменная примет значение true\r\n$notFound = false;\r\n\r\n// создаем объект кеша\r\n$phpCache = new CPHPCache();\r\n \r\n// время кеширования в секундах\r\n$cacheTime = 3600; \r\n \r\n// формируем идентификатор кеша в зависимости от всех параметров,\r\n// которые могут повлиять на PHP-переменные\r\n$cacheId = $iblockType.$elementId;\r\n \r\n// если кеш есть и он еще актуален\r\nif ($phpCache->InitCache($cacheTime, $cacheId, \'/other-cache-dir\')) {\r\n    /*\r\n     * получаем закешированные переменные\r\n     */\r\n    $data = $phpCache->GetVars();\r\n    // данные об инфоблоке\r\n    $iblockName = $data[\'iblockName\'];\r\n    $listPageURL = $data[\'listPageURL\'];\r\n    // данные об элементе инфоблока\r\n    $elementName = $data[\'elementName\'];\r\n    $elementPicture = $data[\'elementPicture\'];\r\n    $elementPreview = $data[\'elementPreview\'];\r\n} else {\r\n    /*\r\n     * иначе обращаемся к базе\r\n     */\r\n    // данные об инфоблоке\r\n    $arIblock = GetIBlock($iblockId, $iblockType);\r\n    // данные об элементе инфоблока\r\n    $arElement = GetIBlockElement($elementId, $iblockType);\r\n    // если данные успешно получены\r\n    if ($arIblock && $arElement) {\r\n        $iblockName = $arIblock[\'NAME\'];\r\n        $listPageURL = $arIblock[\'LIST_PAGE_URL\'];\r\n        $elementName = $arElement[\'NAME\'];\r\n        $elementPicture = $arElement[\'DETAIL_PICTURE\'];\r\n        $elementPreview = $arElement[\'PREVIEW_TEXT\'];\r\n        // записываем полученные данные в кеш\r\n        $phpCache->StartDataCache();\r\n        $phpCache->EndDataCache(\r\n            array(\r\n                \'iblockName\'     => $iblockName,\r\n                \'listPageURL\'    => $listPageURL,\r\n                \'elementName\'    => $elementName,\r\n                \'elementPicture\' => $elementPicture,\r\n                \'elementPreview\' => $elementPreview\r\n            )\r\n        );\r\n    } else { // что-то пошло не так\r\n        $notFound = true;\r\n    }\r\n}\r\n\r\nif (!$notFound) { // все хорошо, все данные получены\r\n    // в заголовок страницы вставим название элемента\r\n    $APPLICATION->SetTitle($elementName);\r\n    // добавим пункт меню в навигационную цепочку\r\n    $APPLICATION->AddChainItem($iblockName, $listPageURL);\r\n     \r\n    // выводим хлебные крошки\r\n    $APPLICATION->ShowNavChain();\r\n    // выводим заголовок страницы\r\n    echo \'<h1>\'.$elementName.\'</h1>\', PHP_EOL;\r\n    // выводим картинку\r\n    echo CFile::ShowImage($elementPicture, 500, 500), PHP_EOL;\r\n    // выводим краткое описание\r\n    echo \'<p>\'.$elementPreview.\'</p>\';\r\n} else { // что-то пошло не так\r\n    \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n        \'Страница не найдена\',\r\n        true,\r\n        true\r\n    );\r\n}\r\n[/php]\r\n<p>\r\nФайл кеша <code>/bitrix/cache/other-cache-dir/47/476bb6ea1797242d5401ed9ec02c831e.php</code>:\r\n</p>\r\n[php]\r\n<?\r\nif ($INCLUDE_FROM_CACHE!=\'Y\') return false;\r\n$datecreate = \'001541323175\';\r\n$dateexpire = \'001541326775\';\r\n$ser_content = \'a:2:{s:7:\"CONTENT\";s:0:\"\";s:4:\"VARS\";a:5:{s:10:\"iblockName\";s:49:\"Статьи о домашних\r\nживотных\";s:11:\"listPageURL\";s:10:\"/articles/\";s:11:\"elementName\";s:29:\"Ангорская \r\nкошка\";s:14:\"elementPicture\";s:4:\"1025\";s:14:\"elementPreview\";s:473:\"Ангорская кошка — порода домашних\r\nкошек, которая была создана европейскими и американскими селекционерами на основе группы особей,\r\nвывезенных из Зоопарка Анкары в середине XX века. Турецкая ангора не только умна, но и чрезвычайно\r\nадаптивна, ласкова и игрива.\";}}\';\r\nreturn true;\r\n?>\r\n[/php]\r\n\r\n<p>\r\nЕще один пример — в кеш сохраняется HTML-код и PHP-переменные:\r\n</p>\r\n\r\n[php]\r\n// подключаем модуль «Информационные блоки»\r\nif (!CModule::IncludeModule(\'iblock\')) {\r\n    ShowError(\'Модуль «Информационные блоки» не установлен\');\r\n}\r\n\r\n// тип инфоблока, откуда будем получать элемент инфоблока\r\n$iblockType = \'content\';\r\n// идентификатор инфоблока, откуда будем получать элемент\r\n$iblockId = 5;\r\n// идентификатор элемента инфоблока, который надо показать\r\n$elementId = 354;\r\n\r\n// создаем объект кеша\r\n$phpCache = new CPHPCache();\r\n \r\n// время кеширования в секундах\r\n$cacheTime = 3600; \r\n \r\n// формируем идентификатор кеша в зависимости от всех параметров,\r\n// которые могут повлиять на HTML-код и PHP-переменные\r\n$cacheId = $iblockType.$elementId;\r\n \r\n// если кеш есть и он еще актуален\r\nif ($phpCache->InitCache($cacheTime, $cacheId, \'/other-cache-dir\')) {\r\n    // получаем закешированные переменные\r\n    $data = $phpCache->GetVars();\r\n    $iblockName = $data[\'iblockName\'];\r\n    $listPageURL = $data[\'listPageURL\'];\r\n} else {\r\n    // иначе обращаемся к базе\r\n    $data = GetIBlock($iblockId, $iblockType);\r\n    $iblockName = $data[\'NAME\'];\r\n    $listPageURL = $data[\'LIST_PAGE_URL\'];\r\n}\r\n \r\n// в заголовок страницы вставим название инфоблока\r\n$APPLICATION->SetTitle($iblockName);\r\n// добавим пункт меню в навигационную цепочку\r\n$APPLICATION->AddChainItem($iblockName, $listPageURL);\r\n// получаем HTML-код навигационной цепочки\r\n$navChain = $APPLICATION->GetNavChain();\r\n \r\n// начинаем буферизацию вывода\r\nif ($phpCache->StartDataCache()) {\r\n \r\n    // выбираем из базы данных элемент инфоблока\r\n    if ($arElement = GetIBlockElement($elementId, $iblockType)) {\r\n        // выводим хлебные крошки\r\n        echo $navChain, PHP_EOL;\r\n        // выводим заголовок страницы\r\n        echo \'<h1>\'.$arElement[\'NAME\'].\'</h1>\', PHP_EOL;\r\n        // выводим картинку\r\n        echo CFile::ShowImage($arElement[\'DETAIL_PICTURE\'], 500, 500), PHP_EOL;\r\n        // выводим краткое описание\r\n        echo \'<p>\'.$arElement[\'PREVIEW_TEXT\'].\'</p>\';\r\n        // записываем предварительно буферизированный вывод в файл кеша\r\n        // вместе с дополнительными переменными\r\n        $phpCache->EndDataCache(\r\n            array(\r\n                \'iblockName\' => $iblockName,\r\n                \'listPageURL\' => $listPageURL\r\n            )\r\n        );\r\n    } else {\r\n        $phpCache->AbortDataCache();\r\n        \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n            \'Страница не найдена\',\r\n            true,\r\n            true\r\n        );\r\n    }\r\n\r\n}\r\n[/php]\r\n<div class=\"note\">\r\n<p>\r\nВнутри HTML-кеша нельзя использовать отложенные функции. По той простой причине, что они просто не будут выполняться. Точнее говоря, функции будут выполнены один раз в момент создания файла кеша. А при всех последующих запросах будет выдано закешированное содержимое.\r\n</p>\r\n<p>\r\nВ коде выше функции <code>SetTitle()</code> и <code>AddChainItem()</code> вызываются за пределами HTML-кеша. Чтобы все-таки поместить цепочку навигации внутрь кеша, используется переменная <code>$navChain</code>.\r\n</p>\r\n</div>\r\n<p>\r\nФайл кеша <code>/bitrix/cache/other-cache-dir/47/476bb6ea1797242d5401ed9ec02c831e.php</code>:\r\n</p>\r\n[php]\r\n<?\r\nif ($INCLUDE_FROM_CACHE!=\'Y\') return false;\r\n$datecreate = \'001541406065\';\r\n$dateexpire = \'001541409665\';\r\n$ser_content = \'a:2:{s:7:\"CONTENT\";s:782:\"<nav class=\"breadcrumbs\"><a href=\"/\">Главная страница</a>&nbsp;/\r\n<span>Статьи о домашних животных</span></nav>\r\n<h1>Ангорская кошка</h1>\r\n<img src=\"/upload/iblock/57f/57f3872d827b2a94d61be9c999556d4b.jpg\" border=\"0\" alt=\"\" width=\"500\" height=\"500\" />\r\n<p>Ангорская кошка — порода домашних кошек, которая была создана европейскими и американскими селекционерами на\r\nоснове группы особей, вывезенных из Зоопарка Анкары в середине XX века. Турецкая ангора не только умна, но и\r\nчрезвычайно адаптивна, ласкова и игрива.</p>\";s:4:\"VARS\";a:2:{s:10:\"iblockName\";s:49:\"Статьи о домашних\r\nживотных\";s:11:\"listPageURL\";s:10:\"/articles/\";}}\';\r\nreturn true;\r\n?>\r\n[/php]\r\n\r\n<h2>Новое ядро</h2>\r\n<p>\r\nАналогом <code>CPHPCache</code> в новом ядре является класс <code>\\Bitrix\\Main\\Data\\Cache</code>. Основные различия в методах в том, что названия методов нового класса пишутся с прописной буквы в соответствии с новыми требования оформления кода. В остальном внешне изменений практически нет:\r\n</p>\r\n[php]\r\nuse \\Bitrix\\Main\\Data\\Cache,\r\n    \\Bitrix\\Main\\Loader,\r\n    \\Bitrix\\Iblock\\Component\\Tools;\r\n\r\n// подключаем модуль «Информационные блоки»\r\nif (!Loader::includeModule(\'iblock\')) {\r\n    ShowError(\'Модуль «Информационные блоки» не установлен\');\r\n}\r\n\r\n// тип инфоблока, откуда будем получать элемент инфоблока\r\n$iblockType = \'content\';\r\n// идентификатор инфоблока, откуда будем получать элемент\r\n$iblockId = 5;\r\n// идентификатор элемента инфоблока, который надо показать\r\n$elementId = 354;\r\n// если что-то пошло не так, эта переменная примет значение true\r\n$notFound = false;\r\n\r\n// получаем экземпляр класса\r\n$cache = Cache::createInstance();\r\n\r\n// время кеширования в секундах\r\n$cacheTime = 3600; \r\n// формируем идентификатор кеша\r\n$cacheId = $iblockType.$elementId;\r\n\r\nif ($cache->initCache($cacheTime, $cacheId, \'/another-cache-dir\')) {\r\n    /*\r\n     * получаем закешированные переменные\r\n     */\r\n    $data = $cache->getVars();\r\n    // данные об инфоблоке\r\n    $iblockName = $data[\'iblockName\'];\r\n    $listPageURL = $data[\'listPageURL\'];\r\n    // данные об элементе инфоблока\r\n    $elementName = $data[\'elementName\'];\r\n    $elementPicture = $data[\'elementPicture\'];\r\n    $elementPreview = $data[\'elementPreview\'];\r\n} elseif ($cache->startDataCache()) {\r\n    /*\r\n     * иначе обращаемся к базе\r\n     */\r\n    // данные об инфоблоке\r\n    $arIblock = GetIBlock($iblockId, $iblockType);\r\n    // данные об элементе инфоблока\r\n    $arElement = GetIBlockElement($elementId, $iblockType);\r\n    // если данные успешно получены\r\n    if ($arIblock && $arElement) {\r\n        $iblockName = $arIblock[\'NAME\'];\r\n        $listPageURL = $arIblock[\'LIST_PAGE_URL\'];\r\n        $elementName = $arElement[\'NAME\'];\r\n        $elementPicture = $arElement[\'DETAIL_PICTURE\'];\r\n        $elementPreview = $arElement[\'PREVIEW_TEXT\'];\r\n        // записываем полученные данные в кеш\r\n        $cache->endDataCache(\r\n            array(\r\n                \'iblockName\'     => $iblockName,\r\n                \'listPageURL\'    => $listPageURL,\r\n                \'elementName\'    => $elementName,\r\n                \'elementPicture\' => $elementPicture,\r\n                \'elementPreview\' => $elementPreview\r\n            )\r\n        );\r\n    } else { // что-то пошло не так\r\n        $cache->abortDataCache();\r\n        $notFound = true;\r\n    }\r\n}\r\n\r\nif (!$notFound) { // все хорошо, все данные получены\r\n    // в заголовок страницы вставим название элемента\r\n    $APPLICATION->SetTitle($iblockName);\r\n    // добавим пункт меню в навигационную цепочку\r\n    $APPLICATION->AddChainItem($iblockName, $listPageURL);\r\n     \r\n    // выводим хлебные крошки\r\n    $APPLICATION->ShowNavChain();\r\n    // выводим заголовок страницы\r\n    echo \'<h1>\'.$elementName.\'</h1>\', PHP_EOL;\r\n    // выводим картинку\r\n    echo CFile::ShowImage($elementPicture, 500, 500), PHP_EOL;\r\n    // выводим краткое описание\r\n    echo \'<p>\'.$elementPreview.\'</p>\';\r\n} else { // что-то пошло не так\r\n    Tools::process404(\r\n        \'Страница не найдена\',\r\n        true,\r\n        true\r\n    );\r\n}\r\n[/php]\r\n<p>\r\nФайл кеша <code>/bitrix/cache/another-cache-dir/47/476bb6ea1797242d5401ed9ec02c831e.php</code>:\r\n</p>\r\n[php]\r\n<?\r\nif ($INCLUDE_FROM_CACHE!=\'Y\') return false;\r\n$datecreate = \'001541325078\';\r\n$dateexpire = \'001541328678\';\r\n$ser_content = \'a:2:{s:7:\"CONTENT\";s:0:\"\";s:4:\"VARS\";a:5:{s:10:\"iblockName\";s:49:\"Статьи о домашних\r\nживотных\";s:11:\"listPageURL\";s:10:\"/articles/\";s:11:\"elementName\";s:29:\"Ангорская\r\nкошка\";s:14:\"elementPicture\";s:4:\"1025\";s:14:\"elementPreview\";s:473:\"Ангорская кошка — порода домашних\r\nкошек, которая была создана европейскими и американскими селекционерами на основе группы особей,\r\nвывезенных из Зоопарка Анкары в середине XX века. Турецкая ангора не только умна, но и чрезвычайно\r\nадаптивна, ласкова и игрива.\";}}\';\r\nreturn true;\r\n?>\r\n[/php]\r\n\r\n<p>\r\nОчистить кеш, сохраненный в директории <code>/bitrix/cache/another-cache-dir/</code> можно следующим образом:\r\n</p>\r\n[php]\r\n$cache = \\Bitrix\\Main\\Data\\Cache::createInstance();\r\n$cache->cleanDir(\'/another-cache-dir\');\r\n[/php]\r\n<p>\r\nОчистить весь кеш (т.е. все содержимое директории <code>/bitrix/cache/</code>):\r\n</p>\r\n[php]\r\n$cache = \\Bitrix\\Main\\Data\\Cache::createInstance();\r\n$cache->cleanDir();\r\n[/php]\r\n<p>\r\nЭтот код промаркирует директрии кеша на удаление:\r\n</p>\r\n[code]\r\n[bitrix]\r\n    [cache]\r\n        [red][another-cache-dir.~917285]\r\n        [other-cache-dir.~578322]\r\n        [some-cache-dir.~881386][/red]\r\n        ..........\r\n[/code]\r\n<p>\r\nВ конце названий всех директорий появится приписка из точки, тильды и длинного числа. После такой маркировки пути к файлам кеша изменятся, следовательно весь старый кеш сайта не будет восприниматься. Остаётся только все это удалить. И система сама это сделает: по агентам на хитах или кроне. Причём небольшими порциями, по несколько файлов за итерацию.\r\n</p>','2018-11-04 11:21:32',1),(215,17,'Битрикс. Управляемый кеш','','','CMS, Web-разработка, Битрикс, Кeширование, CACHE_MANAGER, CCacheManager, CPHPCache, InitCache, StartTagCache, RegisterTag, EndTagCache, ClearByTag, StartDataCache, EndDataCache, ElementTable::getList, Инфоблок, AddEventHandler, OnAfterIBlockElementAdd, OnAfterIBlockElementUpdate, OnAfterIBlockElementDelete, BX_COMP_MANAGED_CACHE, Событие','Кеш имеет определенный период жизни и какой-то идентификатор — нечто, что уникально идентифицирует именно эту совокупность данных. Пока период жизни кеша не истек — нужно обращаться к кешу, а после истечения срока жизни кеша нужно снова получить данные из БД и сохранить на указанный период.','<p>\r\nКеш имеет определенный период жизни и какой-то идентификатор — нечто, что уникально идентифицирует именно эту совокупность данных. Пока период жизни кеша не истек — нужно обращаться к кешу, а после истечения срока жизни кеша нужно снова получить данные из БД и сохранить на указанный период.\r\n</p>\r\n<p>\r\nСуть управляемого кеша в том, чтобы пометить какой-то кеш какой-то меткой и иметь возможность по тегу управлять этим кешем (в основном для очистки). Т.е. помимо идентификатора, кеш может быть идентифицирован и по тегу. Один и тот же кеш может иметь разные теги, а один и тот же тег может быть назначен разным кешам. Таким образом, имея какой-то тег, можно почистить все кеши, связанные с данным тегом.\r\n</p>\r\n<p>\r\nРабота с управляемым кешем состоит из 3-х операций:\r\n</p>\r\n<ul>\r\n  <li>Cвязь объекта кеша с директорией хранения кеша</li>\r\n  <li>Задание одного или нескольких тегов</li>\r\n  <li>Очистка кеша по тегу</li>\r\n</ul>\r\n<p>\r\nДля начала нужно включить механизм управляемого кеширования. Определяем в <code>dbconn.php</code> константу:\r\n</p>\r\n[php]\r\ndefine(\'BX_COMP_MANAGED_CACHE\', true);\r\n[/php]\r\n<p>\r\nИ проверим, что механизм теперь работает:\r\n</p>\r\n[php]\r\nif (defined(\'BX_COMP_MANAGED_CACHE\')) {\r\n    ShowNote(\'Управляемый кеш включен\');\r\n}  else {\r\n    ShowError(\'Управляемый кеш не включен\');\r\n}\r\n[/php]\r\n<p>\r\nЗа работу кеша отвечает глобальный объект <code>$CACHE_MANAGER</code>, который является экземпляром класса <code>CCacheManager</code>:\r\n</p>\r\n[php]\r\n// тип инфоблока, откуда будем получать элементы\r\n$iblockType = ARTICLES_IBLOCK_TYPE;\r\n// идентификатор инфоблока, откуда будем получать элементы\r\n$iblockId = ARTICLES_IBLOCK_ID;\r\n// символьный код инфоблока, откуда будем получать элементы\r\n$iblockCode = ARTICLES_IBLOCK_CODE;\r\n\r\n// условия выборки элементов инфоблока с помощью метода ElementTable::getList()\r\n$getListParams = array(\r\n    \'select\' => array(\'ID\', \'NAME\', \'CODE\', \'PREVIEW_TEXT\'),\r\n    \'filter\' => array(\'=IBLOCK_ID\' => $iblockId),\r\n    \'limit\'  => 3\r\n);\r\n// уникальный идентификатор кеша\r\n$cacheId = md5(\'\\\\Bitrix\\\\Iblock\\\\ElementTable::getList\' . serialize($getListParams));\r\n\r\n// время жизни кеша\r\n$cacheTime = 3600;\r\n// путь к директории кеша\r\n$cachePath = \'/iblock/\' . $iblockType . \'/\' . $iblockCode;\r\n// создаем объект кеша\r\n$phpCache = new CPHPCache();\r\n \r\nif (!$phpCache->InitCache($cacheTime, $cacheId, $cachePath)) {\r\n    /*\r\n     * Если кеш пустой или утратил актуальность, получаем данные из базы данных\r\n     */\r\n    // Получаем CACHE_MANAGER из $GLOBALS и привязываем его к нашей директории кеша\r\n    $GLOBALS[\'CACHE_MANAGER\']->StartTagCache($cachePath);\r\n    // Вешаем тег на текущий кеш. У нас тут будет выборка элементов инфоблока,\r\n    // поэтому имеет смысл зарегистрировать тег, зависящий от ID инфоблока\r\n    $GLOBALS[\'CACHE_MANAGER\']->RegisterTag(\'iblock_id_\' . $iblockId);\r\n\r\n    // Делаем выборку из базы данных элементов инфоблока\r\n    $result = \\Bitrix\\Iblock\\ElementTable::getList($getListParams);\r\n    while ($arItem = $result->fetch()) {\r\n        $arResult[\'ITEMS\'][] = $arItem;\r\n        // Можно пометить кеш тегами всех выбранных элементов инфоблока\r\n        $GLOBALS[\'CACHE_MANAGER\']->RegisterTag(\'article_id_\' . $arItem[\'ID\']);\r\n    }\r\n    // Можно повесить и какой-то другой (более понятный) тег с говорящим именем\r\n    $GLOBALS[\'CACHE_MANAGER\']->RegisterTag(\'iblock_code_\' . $iblockCode);\r\n\r\n    // Завершаем тегирование кеша\r\n    $GLOBALS[\'CACHE_MANAGER\']->EndTagCache();\r\n    // После чего сохраняем результат выборки в кеш\r\n    if ($phpCache->StartDataCache()) {\r\n        $phpCache->EndDataCache(array(\'dbResult\' => $arResult));\r\n    }\r\n} else {\r\n    /*\r\n     * Иначе, получаем данные из кеша\r\n     */\r\n    $arResult = $phpCache->GetVars();\r\n}\r\n[/php]\r\n<p>\r\nВыводим полученные данные:\r\n</p>\r\n[phtml]\r\n<section>\r\n<?php foreach ($arResult[\'ITEMS\'] as $arItem): ?>\r\n    <article>\r\n        <h3><?= $arItem[\'NAME\']; ?></h3>\r\n        <p><?= $arItem[\'PREVIEW_TEXT\']; ?></p>\r\n    </article>\r\n<?php endforeach; ?>\r\n<section>\r\n[/phtml]\r\n<p>\r\nФайл кеша <code>bitrix/cache/content/articles/7c/7cb8ee7684eef61a2bf9e6abb07aca9a.php</code>:\r\n</p>\r\n[php]\r\n<?\r\nif ($INCLUDE_FROM_CACHE!=\'Y\') return false;\r\n$datecreate = \'001541417904\';\r\n$dateexpire = \'001541421504\';\r\n$ser_content = \'a:2:{s:7:\"CONTENT\";s:0:\"\";s:4:\"VARS\";a:1:{s:8:\"dbResult\";a:1:{s:5:\"ITEMS\";a:3:{i:0;a:4:{s:2:\"ID\";\r\ns:3:\"347\";s:4:\"NAME\";s:35:\"Английский бульдог\";s:4:\"CODE\";s:17:\"angliyskiy-buldog\";s:12:\"PREVIEW_TEXT\";s:665:\"По\r\nназванию («bull» переводится «бык», «dog» — собака) понятно, что бульдог был предназначен для травли быков. Это\r\nзрелище со времён Рима было очень популярно в Европе вплоть до начала девятнадцатого столетия. По вышедшему в\r\nАнглии в 1835 году закону были запрещены все бои, в которых участвовали животные. В связи с этим количество\r\nбульдогов в стране резко сократилось.\";}i:1;a:4:{s:2:\"ID\";s:3:\"348\";s:4:\"NAME\";s:16:\"Далматин\";s:4:\"CODE\";\r\ns:8:\"dalmatin\";s:12:\"PREVIEW_TEXT\";s:566:\"О точном происхождении далматинов известно мало. Считается, что их\r\nродиной была Далмация, область Балканского полуострова, в честь которой, собственно, и была названа порода,\r\nсуществующая уже больше двух тысячелетий. Собаки, напоминающие далматинов, украшают древние египетские барельефы\r\nи греческие фрески.\";}i:2;a:4:{s:2:\"ID\";s:3:\"349\";s:4:\"NAME\";s:31:\"Афганская борзая\";s:4:\"CODE\";s:18:\r\n\"afganskaya-borzaya\";s:12:\"PREVIEW_TEXT\";s:565:\"Изящная красавица с длинной развевающейся на бегу шелковистой\r\nшерстью, афганская борзая, полна энергии и готова каждую минуту стремительно мчаться наперегонки с ветром. Наблюдая\r\nза её необычайно грациозными движениями, нетрудно представить себе такой элегантный силуэт на фоне бескрайней\r\nазиатской степи.\";}}}}}\';\r\nreturn true;\r\n?>\r\n[/php]\r\n\r\n<p>\r\nВ результате работы приведенного выше кода мы закешируем выборку элементов инфоблока. Сформированный кеш будет находиться в директории <code>bitrix/cache/content/articles</code>, и этот кеш будет помечен тегами <code>iblock_id_5</code> и <code>iblock_code_articles</code>, а также набором тегов, зависящих от идентификатора элемента, т.е. <code>article_id_347</code>, <code>article_id_348</code>, <code>article_id_349</code>.\r\n</p>\r\n<p>\r\nОсталось прикрутить возможность очистки данного кеша. В нашем примере кеш устаревает сразу же при изменении любого элемента инфоблока. Соответственно, при изменении, удалении или добавлении какого-либо элемента нам нужно кеш очищать. Для этого создадим обработчики для этих событий и будем очищать кеш по любому из ранее заданных тегов:\r\n</p>\r\n[php]\r\n<?php\r\n/*\r\n * Файл local/php_interface/init.php\r\n */\r\n\r\ndefine(\'ARTICLES_IBLOCK_TYPE\', \'content\');\r\ndefine(\'ARTICLES_IBLOCK_ID\', 5);\r\ndefine(\'ARTICLES_IBLOCK_CODE\', \'articles\');\r\n\r\n// регистрируем три обработчика событий\r\nAddEventHandler( // при добавлении элемента\r\n    \'iblock\',\r\n    \'OnAfterIBlockElementAdd\',\r\n    array(\r\n        \'IblockElementEventHandler\',\r\n        \'OnAfterIBlockElementAdd\'\r\n    )\r\n);\r\nAddEventHandler( // при изменении элемента\r\n    \'iblock\',\r\n    \'OnAfterIBlockElementUpdate\',\r\n    array(\r\n        \'IblockElementEventHandler\',\r\n        \'OnAfterIBlockElementUpdate\'\r\n    )\r\n);\r\nAddEventHandler( // при удалении элемента\r\n    \'iblock\',\r\n    \'OnAfterIBlockElementDelete\',\r\n    array(\r\n        \'IblockElementEventHandler\',\r\n        \'OnAfterIBlockElementDelete\'\r\n    )\r\n);\r\n\r\nclass IblockElementEventHandler {\r\n    // создаем обработчик события OnAfterIBlockElementAdd\r\n    function OnAfterIBlockElementAdd(&$arFields) {\r\n        \\Bitrix\\Main\\Diag\\Debug::writeToFile(\r\n            \'Добавлен новый элемент с идентификатором \' . $arFields[\'ID\']\r\n        );\r\n        if (defined(\'BX_COMP_MANAGED_CACHE\')) {\r\n            $GLOBALS[\'CACHE_MANAGER\']->ClearByTag(\'iblock_id_\' . ARTICLES_IBLOCK_ID);\r\n            // $GLOBALS[\'CACHE_MANAGER\']->ClearByTag(\'iblock_code_\' . ARTICLES_IBLOCK_CODE);\r\n        }\r\n    }\r\n    // создаем обработчик события OnAfterIBlockElementUpdate\r\n    function OnAfterIBlockElementUpdate(&$arFields) {\r\n        \\Bitrix\\Main\\Diag\\Debug::writeToFile(\r\n            \'Элемент с идентификатором \' . $arFields[\'ID\'] . \' был изменен\'\r\n        );\r\n        if (defined(\'BX_COMP_MANAGED_CACHE\')) {\r\n            $GLOBALS[\'CACHE_MANAGER\']->ClearByTag(\'iblock_id_\' . ARTICLES_IBLOCK_ID);\r\n            // $GLOBALS[\'CACHE_MANAGER\']->ClearByTag(\'iblock_code_\' . ARTICLES_IBLOCK_CODE);\r\n        }\r\n    }\r\n    // создаем обработчик события OnAfterIBlockElementDelete\r\n    function OnAfterIBlockElementDelete(&$arFields) {\r\n        \\Bitrix\\Main\\Diag\\Debug::writeToFile(\r\n            \'Удален элемент инфоблока с идентификатором \' . $arFields[\'ID\']\r\n        );\r\n        if (defined(\'BX_COMP_MANAGED_CACHE\')) {\r\n            $GLOBALS[\'CACHE_MANAGER\']->ClearByTag(\'iblock_id_\' . ARTICLES_IBLOCK_ID);\r\n            // $GLOBALS[\'CACHE_MANAGER\']->ClearByTag(\'iblock_code_\' . ARTICLES_IBLOCK_CODE);\r\n        }\r\n    }\r\n}\r\n[/php]\r\n\r\n<p>\r\nПривязка тега кеша к директории кеша хранится в таблице <code>b_cache_tag</code> базы данных. После создания кеша в ней будут такие записи:\r\n</p>\r\n[code]\r\n[grn]SITE_ID  CACHE_SALT  RELATIVE_PATH             TAG[/grn]\r\n[red]-------------------------------------------------------------------[/red]\r\nNULL     NULL        0:1541594962              **\r\ns1       /464        /iblock/content/articles  iblock_id_5\r\ns1       /464        /iblock/content/articles  iblock_code_articles\r\ns1       /464        /iblock/content/articles  article_id_347\r\ns1       /464        /iblock/content/articles  article_id_348\r\ns1       /464        /iblock/content/articles  article_id_349\r\n[/code]\r\n\r\n<p>\r\nЕсли мы зайдем теперь в панель управления и отредактируем (создадим, удалим) элемент инфоблока, директория хранения кеша будет переименована:\r\n</p>\r\n[code]/bitrix/cache/iblock/content/articles.~539735[/code]\r\n<p>\r\nА в таблице таблице <code>b_cache_tag</code> теперь будут записи:\r\n</p>\r\n[code]\r\n[grn]SITE_ID  CACHE_SALT  RELATIVE_PATH                                  TAG[/grn]\r\n[red]-----------------------------------------------------------------------[/red]\r\nNULL     NULL        2:1541595584                                   **\r\n*        *           /bitrix/cache/iblock/content/articles.~539735  *\r\n*        *           /bitrix/managed_cache/MYSQL/agents.~139166     *\r\n[/code]\r\n<p>\r\nВ файле лога <code>__bx_log.log</code> появятся записи:\r\n</p>\r\n[code]\r\nЭлемент с идентификатором 354 был изменен\r\nДобавлен новый элемент с идентификатором 357\r\nУдален элемент инфоблока с идентификатором 357\r\n[/code]\r\n\r\n<h2>Кеширование в нативных компонентах, использующих инфоблоки</h2>\r\n<p>\r\nУправляемый кеш обеспечивает обновление кеша нативных компонентов Битрикс, использующих инфоблоки. Реализация крайне проста — в ядре, внутри методов <code>CIBlockResult::Fetch()</code> и <code>CIBlockResult::GetNext()</code> (для элементов и разделов) спрятана регистрация тега вида\r\n</p>\r\n[php]\'iblock_id_\' . $res[\'IBLOCK_ID\'][/php]\r\n<p>\r\nСоответственно, если компоненте использует автокеширование, то при вызове <code>Fetch()</code> или <code>GetNext()</code> будет зарегистрирован кеш с идентификатором инфоблока. А уже внутри методов <code>Add()</code>, <code>Update()</code> и <code>Delete()</code> для разделов и элементов спрятаны вызовы очистки кешей, связанных с этим тегом.\r\n</p>\r\n<p>\r\nСоответственно, даже если компонент закеширован на год, то при обновлении элементов или разделов — кеш будет сброшен, и на сайте будут всегда актуальные данные.\r\n</p>','2018-11-05 14:03:28',1),(216,4,'CSS-переменные','','','CSS, Web-разработка, Переменная, ПользовательскиеСвойства, Функция, querySelector, getComputedStyle, getPropertyValue, CSS Custom Properties','Обычная практика при разработке сайта — составить набор фирменных цветов, которые будут использоваться, чтобы поддержать единый стиль. Увы, многократное использование этих цветов в CSS не только является рутинной работой, но ещё и создаёт пространство для возникновения ошибок.','<p>\r\nОбычная практика при разработке сайта — составить набор фирменных цветов, которые будут использоваться, чтобы поддержать единый стиль. Увы, многократное использование этих цветов в CSS не только является рутинной работой, но ещё и создаёт пространство для возникновения ошибок.\r\n</p>\r\n<P>\r\nИспользование пользовательских свойств CSS (CSS Custom Properties) приводит к уменьшению дублирования, повышению читабельности и большей гибкости. Пользовательские свойства часто еще называют CSS-переменные. Они не требуют никаких инструментов для работы, поскольку поддерживаются самим браузером.\r\n</p>\r\n\r\n<h2>Объявление переменной CSS</h2>\r\n<p>\r\nЧтобы объявить переменную, сначала нужно решить, в какой области должна быть эта переменная. Если нужно, чтобы она была доступна глобально, надо определить её в псевдоклассе <code>:root</code>, который соответствует корневому элементу в дереве документов. Переменная должна начинаться с двух дефисов:\r\n</p>\r\n[css]\r\n:root {\r\n    --main-color: #ff6f69;\r\n}\r\n[/css]\r\n<div class=\"note\">\r\nПсевдокласс <code>:root</code> находит корневой элемент дерева документа, т.е. <code>&lt;html&gt;</code> и идентичен селектору по тегу <code>html</code>, но его специфичность выше.\r\n</div>\r\n<p>\r\nДля получения доступа к переменной, нужно использовать функцию <code>var()</code> и передать имя переменной в качестве первого параметра.\r\n</p>\r\n[css]\r\n#title {\r\n    color: var(--main-color);\r\n}\r\n[/css]\r\n<p>\r\nФункция <code>var()</code> поддерживает второй параметр, который будет использоваться, если переменная, переданная первым параметром, не определена, например:\r\n</p>\r\n[css]\r\n#title {\r\n    color: var(--main-color, #000000);\r\n}\r\n[/css]\r\n<p>\r\nЕсли переменная <code>main-color</code> недоступна, то будет использован черный цвет (<code>#000000</code>).\r\n</p>\r\n\r\n<h2>Объявление локальной переменной</h2>\r\n<p>\r\nТакже можно создавать переменные с локальной областью видимости, которые будут доступны только для того элемента, в котором они были объявлены, включая его дочерние элементы.\r\n</p>\r\n<p>\r\nНапример, у нас есть окно с предупреждением, в котором используется определённый цвет, который больше нигде не используется. В этом случае лучше определить этот цвет в локальной области:\r\n</p>\r\n[css]\r\n.alert {\r\n    --alert-color: #ff6f69;\r\n}\r\n[/css]\r\n<p>\r\nТеперь эту переменную можно использовать в дочерних элементах:\r\n</p>\r\n[css]\r\n.alert p {\r\n    color: var(--alert-color);\r\n    border: 1px solid var(--alert-color);\r\n}\r\n[/css]\r\n\r\n<h2>Реализации адаптивности с использованием переменных</h2>\r\n<p>\r\nБольшое преимущество CSS-переменных заключается в том, что они имеют доступ к DOM. Чего нельзя сказать о LESS или SASS, поскольку их переменные вставляются в обычный CSS. На практике это означает, что можно, например, изменить переменные в зависимости от ширины экрана:\r\n</p>\r\n[css]\r\n:root {\r\n    --main-font-size: 16px;\r\n}\r\n\r\n@media all and (max-width: 600px) {\r\n    :root {\r\n        --main-font-size: 12px;\r\n    }\r\n}\r\n[/css]\r\n\r\n<h2>Доступ к переменным из JavaScript</h2>\r\n<p>\r\nДоступ к CSS-переменным с помощью JavaScript — это ещё одно преимущество того, что CSS-переменные являются частью DOM.\r\n</p>\r\n[js]\r\nvar rootElement = document.querySelector(\':root\');\r\nvar rootStyles = window.getComputedStyle(rootElement);\r\nvar mainColor = rootStyles.getPropertyValue(\'--main-color\');\r\n\r\nconsole.log(mainColor);\r\n[/js]','2018-11-01 10:48:10',1),(217,17,'Битрикс. Работа с инфоблоками в новом ядре','','','CMS, Web-разработка, Битрикс, Инфоблок, РазделИнфоблока, ЭлементИнфоблока, SectionTable::getList, ElementTable::getList, PropertyTable::getList, Section::compileEntityByIblock, CIBlockElement::GetProperty, CFile::GetFileArray','1. Получение списка разделов инфоблока. 2. Выборка разделов инфоблока с пользовательскими полями. 3. Выборка разделов инфоблока с сортировкой для построения дерева. 4. Получение списка элементов инфоблока. 5. Выборка элементов инфоблока вместе с пользовательскими свойствами. 6. Выборка пользовательских свойств элементов инфоблока.','<p>\r\nУзелки на пямять:\r\n</p>\r\n<ol>\r\n  <li>Получение списка разделов инфоблока</li>\r\n  <li>Выборка разделов инфоблока с пользовательскими полями</li>\r\n  <li>Выборка разделов инфоблока с сортировкой для построения дерева разделов</li>\r\n  <li>Получение списка элементов инфоблока</li>\r\n  <li>Выборка элементов инфоблока вместе с пользовательскими свойствами</li>\r\n  <li>Выборка пользовательских свойств элементов инфоблока</li>\r\n</ol>\r\n\r\n[php]\r\nuse \\Bitrix\\Main\\Loader;\r\nuse \\Bitrix\\Iblock\\SectionTable;\r\nuse \\Bitrix\\Iblock\\ElementTable;\r\nuse \\Bitrix\\Iblock\\PropertyTable;\r\n\r\nLoader::includeModule(\'iblock\');\r\n[/php]\r\n<p>\r\nПолучение списка корневых разделов инфоблока:\r\n</p>\r\n[php]\r\n$result = SectionTable::getList(\r\n    array(\r\n        \'select\' => array(\'ID\', \'NAME\', \'CODE\'),\r\n        \'filter\' => array(\'=IBLOCK_ID\' => 5, \'DEPTH_LEVEL\' => 1),\r\n    )\r\n);\r\nwhile ($row = $result->fetch()) {\r\n    debug($row);\r\n}\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [ID] => 28\r\n    [NAME] => Породы собак\r\n    [CODE] => porody-sobak\r\n)\r\nArray\r\n(\r\n    [ID] => 29\r\n    [NAME] => Породы кошек\r\n    [CODE] => porody-koshek\r\n)\r\n[/code]\r\n<p>\r\nСписок корневых разделов инфоблока с пользовательскими полями:\r\n</p>\r\n[php]\r\n$entity = \\Bitrix\\Iblock\\Model\\Section::compileEntityByIblock(5);\r\n// теперь $entity = \\Bitrix\\Iblock\\Section5Table\r\n$result = $entity::getList(\r\n    array(\r\n       \'select\' => array(\'ID\', \'NAME\', \'CODE\', \'UF_SECT_DESCR\', \'UF_SECT_KEYWRD\'),\r\n       \'filter\' => array(\'=IBLOCK_ID\' => 5, \'DEPTH_LEVEL\' => 1)\r\n    )\r\n);\r\nwhile ($row = $result->fetch()) {\r\n    debug($row);\r\n}\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [ID] => 28\r\n    [NAME] => Породы собак\r\n    [CODE] => porody-sobak\r\n    [UF_SECT_DESCR] => Породы собак с названиями и фотографиями. Подробные описания пород, полезные статьи...\r\n    [UF_SECT_KEYWRD] => породы собак фотографии описание повадки служебные бульдог овчарка борзая лайка далматин\r\n)\r\nArray\r\n(\r\n    [ID] => 29\r\n    [NAME] => Породы кошек\r\n    [CODE] => porody-koshek\r\n    [UF_SECT_DESCR] => Породы кошек с названиями и фотографиями. Подробные описания пород, полезные статьи...\r\n    [UF_SECT_KEYWRD] => породы кошек фотографии описание повадки ангорская абиссинская сиамская бобтейл персидская\r\n)\r\n[/code]\r\n<p>\r\nВыборка разделов инфоблока с сортировкой для построения дерева разделов:\r\n</p>\r\n[php]\r\n$result = SectionTable::getList(\r\n    array(\r\n        \'select\' =>  array(\r\n            \'ID\',\r\n            \'NAME\',\r\n            \'DEPTH_LEVEL\',\r\n        ),\r\n        \'filter\' => array(\r\n            \'IBLOCK_ID\' => 5,\r\n            \'ACTIVE\' => \'Y\',\r\n            \'GLOBAL_ACTIVE\' => \'Y\',\r\n        ),\r\n        \'order\' => array(\'LEFT_MARGIN\' => \'ASC\'), \r\n    )\r\n);\r\nwhile ($row = $result->fetch()) {\r\n    debug($row);\r\n}\r\n[/php]\r\n[code]\r\n[grn]Array\r\n(\r\n    [ID] => 29\r\n    [NAME] => Породы кошек\r\n    [DEPTH_LEVEL] => 1\r\n)[/grn]\r\nArray\r\n(\r\n    [ID] => 32\r\n    [NAME] => Длинношерстные\r\n    [DEPTH_LEVEL] => 2\r\n)\r\nArray\r\n(\r\n    [ID] => 33\r\n    [NAME] => Короткошерстные\r\n    [DEPTH_LEVEL] => 2\r\n)\r\n[grn]Array\r\n(\r\n    [ID] => 28\r\n    [NAME] => Породы собак\r\n    [DEPTH_LEVEL] => 1\r\n)[/grn]\r\nArray\r\n(\r\n    [ID] => 31\r\n    [NAME] => Декоративные породы\r\n    [DEPTH_LEVEL] => 2\r\n)\r\nArray\r\n(\r\n    [ID] => 30\r\n    [NAME] => Служебные породы\r\n    [DEPTH_LEVEL] => 2\r\n)\r\n[/code]\r\n\r\n<p>\r\nПолучение списка элементов инфоблока:\r\n</p>\r\n[php]\r\n$result = ElementTable::getList(\r\n    array(\r\n        \'select\' => array(\'ID\', \'NAME\', \'CODE\'),\r\n        \'filter\' => array(\'=IBLOCK_ID\' => 5, \'=IBLOCK_SECTION_ID\' => 28),\r\n    )\r\n);\r\nwhile ($row = $result->fetch()) {\r\n    debug($row);\r\n}\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [ID] => 347\r\n    [NAME] => Английский бульдог\r\n    [CODE] => angliyskiy-buldog\r\n)\r\nArray\r\n(\r\n    [ID] => 348\r\n    [NAME] => Далматин\r\n    [CODE] => dalmatin\r\n)\r\nArray\r\n(\r\n    [ID] => 349\r\n    [NAME] => Афганская борзая\r\n    [CODE] => afganskaya-borzaya\r\n)\r\n[/code]\r\n\r\n<p>\r\nКак получить элементы инфоблока вместе с пользовательскими свойствами, я еще не разобрался, поэтому пока что так:\r\n</p>\r\n[php]\r\n$dbElements = ElementTable::getList(\r\n    array(\r\n        \'select\' => array(\'ID\', \'NAME\', \'CODE\', \'IBLOCK_ID\'),\r\n        \'filter\' => array(\'=IBLOCK_ID\' => 5)\r\n    )\r\n);\r\nwhile ($arElement = $dbElements->fetch()) {\r\n    /*\r\n     * Для каждого элемента инфоблока получаем пользовательские свойства:\r\n     * 1. Автор, базовый тип Строка, код AUTHOR\r\n     * 2. Оценка, базовый тип Список, код RATING\r\n     * 3. Галерея, базовый тип Файл, множественное, код GALLERY\r\n     * 4. Дата обновления, пользовательский тип Дата, код UPDATE\r\n     * 5. Примечание, пользовательский тип HTML/текст, код NOTE\r\n     */\r\n\r\n    /*\r\n     * 1. Автор, базовый тип Строка, код AUTHOR\r\n     */\r\n    $dbProperties = CIBlockElement::GetProperty(\r\n        $arElement[\'IBLOCK_ID\'],\r\n        $arElement[\'ID\'],\r\n        array(),\r\n        array(\'CODE\' => \'AUTHOR\')\r\n    );\r\n    if ($arProperty = $dbProperties->Fetch()) {\r\n        $arElement[\'PROPERTIES\'][$arProperty[\'CODE\']] = $arProperty;\r\n    }\r\n     \r\n    /*\r\n     * 2. Оценка, базовый тип Список, код RATING\r\n     */\r\n    $dbProperties = CIBlockElement::GetProperty(\r\n        $arElement[\'IBLOCK_ID\'],\r\n        $arElement[\'ID\'],\r\n        array(),\r\n        array(\'CODE\' => \'RATING\')\r\n    );\r\n    if ($arProperty = $dbProperties->Fetch()) {\r\n        $arElement[\'PROPERTIES\'][$arProperty[\'CODE\']] = $arProperty;\r\n    }\r\n     \r\n    /*\r\n     * 3. Галерея, базовый тип Файл, множественное, код GALLERY\r\n     */\r\n    $dbProperties = CIBlockElement::GetProperty(\r\n        $arElement[\'IBLOCK_ID\'],\r\n        $arElement[\'ID\'],\r\n        array(),\r\n        array(\'CODE\' => \'GALLERY\')\r\n    );\r\n    // поскольку свойство множественное, значений будет несколько\r\n    $gallery = array();\r\n    while ($arProperty = $dbProperties->Fetch()) {\r\n        $gallery[] = CFile::GetFileArray($arProperty[\'VALUE\']);\r\n        $temp = $arProperty;\r\n    }\r\n    $arElement[\'PROPERTIES\'][$temp[\'CODE\']] = $temp;\r\n    $arElement[\'PROPERTIES\'][$temp[\'CODE\']][\'IMAGES\'] = $gallery;\r\n    \r\n    /*\r\n     * 4. Дата обновления, пользовательский тип Дата, код UPDATE\r\n     */\r\n    $dbProperties = CIBlockElement::GetProperty(\r\n        $arElement[\'IBLOCK_ID\'],\r\n        $arElement[\'ID\'],\r\n        array(),\r\n        array(\'CODE\' => \'UPDATE\')\r\n    );\r\n    if ($arProperty = $dbProperties->Fetch()) {\r\n        $arElement[\'PROPERTIES\'][$arProperty[\'CODE\']] = $arProperty;\r\n    }\r\n     \r\n    /*\r\n     * 5. Примечание, пользовательский тип HTML/текст, код NOTE\r\n     */\r\n    $dbProperties = CIBlockElement::GetProperty(\r\n        $arElement[\'IBLOCK_ID\'],\r\n        $arElement[\'ID\'],\r\n        array(),\r\n        array(\'CODE\' => \'NOTE\')\r\n    );\r\n    if ($arProperty = $dbProperties->Fetch()) {\r\n        $arElement[\'PROPERTIES\'][$arProperty[\'CODE\']] = $arProperty;\r\n    }\r\n\r\n    debug($arElement);\r\n}\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [ID] => 349\r\n    [NAME] => Афганская борзая\r\n    [CODE] => afganskaya-borzaya\r\n    [IBLOCK_ID] => 5\r\n    [grn][PROPERTIES] => Array\r\n        (\r\n            [AUTHOR] => Array\r\n                (\r\n                    [ID] => 47\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Автор\r\n                    [ACTIVE] => Y\r\n                    [CODE] => AUTHOR\r\n                    [PROPERTY_TYPE] => S\r\n                    [MULTIPLE] => N\r\n                    [USER_TYPE] =>  \r\n                    [PROPERTY_VALUE_ID] => 1\r\n                    [VALUE] => Сергей Иванов\r\n                    [DESCRIPTION] => \r\n                    ..........\r\n                )\r\n            [RATING] => Array\r\n                (\r\n                    [ID] => 48\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Оценка\r\n                    [ACTIVE] => Y\r\n                    [CODE] => RATING\r\n                    [MULTIPLE] => N\r\n                    [USER_TYPE] => \r\n                    [PROPERTY_VALUE_ID] => 9\r\n                    [VALUE] => 27\r\n                    [DESCRIPTION] => \r\n                    [VALUE_ENUM] => Интересно\r\n                    ..........\r\n                )\r\n            [GALLERY] => Array\r\n                (\r\n                    [ID] => 49\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Галерея\r\n                    [ACTIVE] => Y\r\n                    [CODE] => GALLERY\r\n                    [PROPERTY_TYPE] => F\r\n                    [MULTIPLE] => Y\r\n                    [FILE_TYPE] => jpg, gif, bmp, png, jpeg\r\n                    [USER_TYPE] =>  \r\n                    [PROPERTY_VALUE_ID] => 5\r\n                    [VALUE] => 1036\r\n                    [DESCRIPTION] => \r\n                    ..........\r\n                    [red][IMAGES] => Array\r\n                        (\r\n                            [0] => Array\r\n                                (\r\n                                    [ID] => 1034\r\n                                    [MODULE_ID] => iblock\r\n                                    [HEIGHT] => 300\r\n                                    [WIDTH] => 400\r\n                                    [FILE_SIZE] => 33085\r\n                                    [CONTENT_TYPE] => image/jpeg\r\n                                    [FILE_NAME] => ef1a80087669d483faa9c3db3441985a.jpg\r\n                                    [DESCRIPTION] => \r\n                                    [SRC] => /upload/iblock/ef1/ef1a80087669d483faa9c3db3441985a.jpg\r\n                                    ..........\r\n                                )\r\n                            [1] => Array\r\n                                (\r\n                                    [ID] => 1035\r\n                                    [MODULE_ID] => iblock\r\n                                    [HEIGHT] => 300\r\n                                    [WIDTH] => 400\r\n                                    [FILE_SIZE] => 45306\r\n                                    [CONTENT_TYPE] => image/jpeg\r\n                                    [FILE_NAME] => b96bb594c3bc5580a972f993e05f7317.jpg\r\n                                    [DESCRIPTION] => \r\n                                    [SRC] => /upload/iblock/b96/b96bb594c3bc5580a972f993e05f7317.jpg\r\n                                    ..........\r\n                                )\r\n                            [2] => Array\r\n                                (\r\n                                    [ID] => 1036\r\n                                    [MODULE_ID] => iblock\r\n                                    [HEIGHT] => 300\r\n                                    [WIDTH] => 400\r\n                                    [FILE_SIZE] => 24919\r\n                                    [CONTENT_TYPE] => image/jpeg\r\n                                    [FILE_NAME] => 18ca914388b75729618a412afd3f464b.jpg\r\n                                    [DESCRIPTION] =>  \r\n                                    [SRC] => /upload/iblock/18c/18ca914388b75729618a412afd3f464b.jpg\r\n                                    ..........\r\n                                )\r\n                        )[/red]\r\n                )\r\n            [UPDATE] => Array\r\n                (\r\n                    [ID] => 50\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Дата обновления\r\n                    [ACTIVE] => Y\r\n                    [CODE] => UPDATE \r\n                    [PROPERTY_TYPE] => S\r\n                    [MULTIPLE] => N\r\n                    [USER_TYPE] => Date\r\n                    [PROPERTY_VALUE_ID] => 6\r\n                    [VALUE] => 19.10.2018\r\n                    [DESCRIPTION] => \r\n                    ..........\r\n                )\r\n            [NOTE] => Array\r\n                (\r\n                    [ID] => 51\r\n                    [IBLOCK_ID] => 5\r\n                    [NAME] => Примечание\r\n                    [ACTIVE] => Y\r\n                    [CODE] => NOTE\r\n                    [DEFAULT_VALUE] => Array\r\n                        (\r\n                            [TYPE] => TEXT\r\n                            [TEXT] => \r\n                        )\r\n                    [PROPERTY_TYPE] => S\r\n                    [MULTIPLE] => N\r\n                    [USER_TYPE] => HTML\r\n                    [PROPERTY_VALUE_ID] => 7\r\n                    [VALUE] => Array\r\n                        (\r\n                            [TEXT] => Примечание к публикации, Примечание к публикации, Примечание к публикации...\r\n                            [TYPE] => TEXT\r\n                        )\r\n                    [DESCRIPTION] => \r\n                    ..........\r\n                )[/grn]\r\n        )\r\n)\r\n\r\nArray\r\n(\r\n    ..........\r\n)\r\n[/code]\r\n\r\n<p>\r\nВыборка пользовательских свойств элементов инфоблока:\r\n</p>\r\n[php]\r\n$result = PropertyTable::getList(\r\n    array(\r\n        \'select\' => array(\'ID\', \'NAME\', \'CODE\', \'PROPERTY_TYPE\'),\r\n        \'filter\' => array(\'IBLOCK_ID\' => 5)\r\n    )\r\n);\r\nwhile ($row = $result->fetch()) { \r\n    debug($row);\r\n}\r\n[/php]\r\n[code]\r\nArray\r\n(\r\n    [ID] => 47\r\n    [NAME] => Автор\r\n    [CODE] => AUTHOR\r\n    [PROPERTY_TYPE] => S\r\n)\r\nArray\r\n(\r\n    [ID] => 48\r\n    [NAME] => Оценка\r\n    [CODE] => RATING\r\n    [PROPERTY_TYPE] => L\r\n)\r\nArray\r\n(\r\n    [ID] => 49\r\n    [NAME] => Галерея\r\n    [CODE] => GALLERY\r\n    [PROPERTY_TYPE] => F\r\n)\r\nArray\r\n(\r\n    [ID] => 50\r\n    [NAME] => Дата обновления\r\n    [CODE] => UPDATE\r\n    [PROPERTY_TYPE] => S\r\n)\r\nArray\r\n(\r\n    [ID] => 51\r\n    [NAME] => Примечание\r\n    [CODE] => NOTE\r\n    [PROPERTY_TYPE] => S\r\n)\r\n[/code]\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"https://github.com/maximaster/tools.orm\">Расширение для работы с ORM для инфоблоков</a></li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/community/webdev/user/24164/blog/13322/\">ORM-обёртка для инфоблоков</a></li>\r\n  <li><a href=\"https://www.om-dev.ru/bitrix/getlist-d7/\">Фильтрация по пользовательским свойствам getList</a></li>\r\n  <li><a href=\"http://estrin.pw/bitrix-d7-snippets/s/iblock-sectiontable/\">Выборка разделов инфоблока</a></li>\r\n</ul>','2018-11-09 15:31:39',1),(218,17,'Битрикс. Таблицы БД для иноблоков','','','CMS, Web-разработка, БазаДанных, Битрикс, Инфоблок','Инфоблок — это сущность, объединяющая в себе несколько таблиц в базе данных. Он позволяет работать с базой данных, не задумываясь о структуре таблиц и взаимосвязях между ними, через специальное API. Давайте посмотрим, какие таблицы описывают сущность «инфоблок»…','<p>\r\nИнфоблок — это сущность, объединяющая в себе несколько таблиц в базе данных. Он позволяет работать с базой данных, не задумываясь о структуре таблиц и взаимосвязях между ними, через специальное API. Давайте посмотрим, какие таблицы описывают сущность «инфоблок»:\r\n</p>\r\n\r\n<h2>Информационные блоки</h2>\r\n\r\n<h4>Типы инфоблоков, таблица <code>b_iblock_type</code></h4>\r\n[code]\r\nID       SECTIONS  EDIT_FILE_BEFORE  EDIT_FILE_AFTER  IN_RSS  SORT\r\n------------------------------------------------------------------\r\ncatalog  Y                                            N       500\r\ncontent  Y                                            N       500\r\n[/code]\r\n\r\n<h4>Языковые параметры типов инфоблоков, таблица <code>b_iblock_type_lang</code></h4>\r\n[code]\r\nIBLOCK_TYPE_ID  LID  NAME     SECTION_NAME  ELEMENT_NAME\r\n--------------------------------------------------------\r\ncatalog         ru   Каталог  Категории     Товары\r\ncatalog         en   Catalog  Categories    Products\r\ncontent         ru   Контент  Категории     Статьи\r\ncontent         en   Content  Gategories    Articles\r\n[/code]\r\n\r\n<h4>Информационные блоки, таблица <code>b_iblock</code></h4>\r\n[code]\r\nID  TIMESTAMP_X          IBLOCK_TYPE_ID  LID  CODE      NAME                  ACTIVE  SORT  LIST_PAGE_URL              DETAIL_PAGE_URL                                   SECTION_PAGE_URL                                  CANONICAL_PAGE_URL  PICTURE  DESCRIPTION                     DESCRIPTION_TYPE  RSS_TTL  RSS_ACTIVE  RSS_FILE_ACTIVE  RSS_FILE_LIMIT  RSS_FILE_DAYS  RSS_YANDEX_ACTIVE  XML_ID  TMP_ID                            INDEX_ELEMENT  INDEX_SECTION  WORKFLOW  BIZPROC  SECTION_CHOOSER  LIST_MODE  RIGHTS_MODE  SECTION_PROPERTY  PROPERTY_INDEX  VERSION  LAST_CONV_ELEMENT  SOCNET_GROUP_ID  EDIT_FILE_BEFORE  EDIT_FILE_AFTER  SECTIONS_NAME  SECTION_NAME  ELEMENTS_NAME  ELEMENT_NAME\r\nr\n4   2018-08-20 14:11:22  catalog         s1   catalog   Каталог оборудования  Y       500   #SITE_DIR#/catalog/        #SITE_DIR#/catalog/product/#ELEMENT_CODE#/        #SITE_DIR#/catalog/category/#SECTION_CODE#/                           NULL     Каталог оборудования систем...  text              24       Y           N                NULL            NULL           N                  NULL    e804f63dea9578346692db2f88e1d3ca  Y              Y              N         N        L                           S            N                 N               1        0                  NULL                                                Разделы        Раздел        Элементы       Элемент\r\n5   2018-11-09 13:25:55  content         s1   articles  Статьи о домашних...  Y       500   #SITE_DIR#/#IBLOCK_CODE#/  #SITE_DIR#/#IBLOCK_CODE#/element/#ELEMENT_CODE#/  #SITE_DIR#/#IBLOCK_CODE#/section/#SECTION_CODE#/                      NULL     Статьи о домашних питомцах...   text              24       Y           N                NULL            NULL           N                  NULL    d5d45ed3ed5d93080fe02fa630d31bf0  Y              Y              N         N        L                           S            N                 N               1        0                  NULL                                                Разделы        Раздел        Элементы       Элемент\r\n[/code]\r\n\r\n<h4>Привязка инфоблоков к сайтам, таблица <code>b_iblock_site</code></h4>\r\n[code]\r\nIBLOCK_ID  SITE_ID\r\n------------------\r\n4          s1\r\n5          s1\r\n[/code]\r\n\r\n<h4>Права доступа к инфоблоку в стандартном режиме прав, таблица <code>b_iblock_group</code></h4>\r\n[code]\r\nIBLOCK_ID  GROUP_ID  PERMISSION\r\n-------------------------------\r\n4          1         X\r\n4          2         R\r\n5          1         X\r\n5          2         R\r\n[/code]\r\n\r\n<h4>Права доступа к инфоблоку в расширенном режиме прав, таблица <code>b_iblock_right</code></h4>\r\n[code]\r\nID  IBLOCK_ID  GROUP_CODE  ENTITY_TYPE  ENTITY_ID  DO_INHERIT  TASK_ID  OP_SREAD  OP_EREAD  XML_ID\r\n--------------------------------------------------------------------------------------------------\r\n[/code]\r\n\r\n<h2>Разделы инфоблоков</h2>\r\n\r\n<h4>Разделы инфоблоков, таблица <code>b_iblock_section</code></h4>\r\n[code]\r\nID  TIMESTAMP_X          MODIFIED_BY  DATE_CREATE          CREATED_BY  IBLOCK_ID  IBLOCK_SECTION_ID  ACTIVE  GLOBAL_ACTIVE  SORT  NAME                 PICTURE  LEFT_MARGIN  RIGHT_MARGIN  DEPTH_LEVEL  DESCRIPTION             DESCRIPTION_TYPE  SEARCHABLE_CONTENT                          CODE                 XML_ID  TMP_ID  DETAIL_PICTURE  SOCNET_GROUP_ID\r\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n33  2018-11-09 13:25:55  1            2018-11-09 13:25:55  1           5          29                 Y       Y              500   Короткошерстные      1041     4            5             2                                    text              КОРОТКОШЕРСТНЫЕ                             korotkosherstnye     NULL    NULL    1042            NULL\r\n32  2018-11-09 13:25:15  1            2018-11-09 13:25:15  1           5          29                 Y       Y              500   Длинношерстные       1039     2            3             2                                    text              ДЛИННОШЕРСТНЫЕ                              dlinnosherstnye      NULL    NULL    1040            NULL\r\n31  2018-10-17 13:27:15  1            2018-09-14 10:10:44  1           5          28                 Y       Y              500   Декоративные породы  1032     8            9             2            Декоративные собаки...  text              ДЕКОРАТИВНЫЕ ПОРОДЫ ДЕКОРАТИВНЫЕ СОБАКИ...  dekorativnye-porody  31      NULL    1033            NULL\r\n30  2018-10-17 13:27:15  1            2018-09-14 10:09:55  1           5          28                 Y       Y              500   Служебные породы     1030     10           11            2            К ним относится ряд...  text              СЛУЖЕБНЫЕ ПОРОДЫ  К НИМ ОТНОСИТСЯ РЯД...    sluzhebnye-porody    30      NULL    1031            NULL\r\n29  2018-11-09 13:06:20  1            2018-08-30 14:44:44  1           5          NULL               Y       Y              500   Породы кошек         1016     1            6             1            Быть может, кошка и...  text              ПОРОДЫ КОШЕК БЫТЬ МОЖЕТ, КОШКА И НЕ...      porody-koshek        29      NULL    1017            NULL\r\n28  2018-10-18 15:33:18  1            2018-08-30 10:53:13  1           5          NULL               Y       Y              500   Породы собак         1018     7            12            1            Более 20 тысяч лет...   text              ПОРОДЫ СОБАК БОЛЕЕ 20 ТЫСЯЧ ЛЕТ НАЗАД...    porody-sobak         28      NULL    1019            NULL\r\n[/code]\r\n\r\n<h4>Свойства разделов инфоблока, таблица <code>b_iblock_section_property</code></h4>\r\n[code]\r\nIBLOCK_ID  SECTION_ID  PROPERTY_ID  SMART_FILTER  DISPLAY_TYPE  DISPLAY_EXPANDED  FILTER_HINT\r\n---------------------------------------------------------------------------------------------\r\n[/code]\r\n\r\n<h4>Расширенные права доступа к разделам, автоматическая таблица <code>b_iblock_section_right</code></h4>\r\n[code]\r\nIBLOCK_ID  SECTION_ID  RIGHT_ID  IS_INHERITED\r\n---------------------------------------------\r\n[/code]\r\n\r\n<h2>Элементы инфоблоков</h2>\r\n\r\n<h4>Элементы инфоблоков, таблица <code>b_iblock_element</code></h4>\r\n[code]\r\nID   TIMESTAMP_X          MODIFIED_BY  DATE_CREATE          CREATED_BY  IBLOCK_ID  IBLOCK_SECTION_ID  ACTIVE  ACTIVE_FROM  ACTIVE_TO  SORT  NAME                PREVIEW_PICTURE  PREVIEW_TEXT    PREVIEW_TEXT_TYPE  DETAIL_PICTURE  DETAIL_TEXT        DETAIL_TEXT_TYPE  SEARCHABLE_CONTENT                 WF_STATUS_ID  WF_PARENT_ELEMENT_ID  WF_NEW  WF_LOCKED_BY  WF_DATE_LOCK  WF_COMMENTS  IN_SECTIONS  XML_ID  CODE               TAGS  TMP_ID  WF_LAST_HISTORY_ID  SHOW_COUNTER  SHOW_COUNTER_START\r\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n347  2018-09-03 13:29:38  1            2018-08-30 10:54:39  1           5          28                 Y       NULL         NULL       500   Английский бульдог  1006             По названию...  text               1007            <p>По названию...  html              АНГЛИЙСКИЙ БУЛЬДОГ ПО НАЗВАНИЮ...  1             NULL                  NULL    NULL          NULL          NULL         Y            347     angliyskiy-buldog        0       NULL                17            2018-09-12 11:58:21\r\n348  2018-09-19 12:37:47  1            2018-08-30 10:58:58  1           5          28                 Y       NULL         NULL       500   Далматин            1008             О точном пр...  text               1009            <p>О точном пр...  html ДАЛМАТИН     О ТОЧНОМ ПРОИСХОЖДЕНИИ ДАЛМАТИ...  1             NULL                  NULL    NULL          NULL          NULL         Y            348     dalmatin                 0       NULL                12            2018-09-17 12:42:10\r\n[/code]\r\n\r\n<h4>Поля элементов инфоблока, таблица <code>b_iblock_fields</code></h4>\r\n[code]\r\nIBLOCK_ID  FIELD_ID                               IS_REQUIRED  DEFAULT_VALUE[/grn]\r\n--------------------------------------------------------------------------------------------------------------------\r\n5          ACTIVE                                 Y            Y\r\n5          ACTIVE_FROM                            N\r\n5          ACTIVE_TO                              N\r\n5          CODE                                   Y            a:8:{s:6:\"UNIQUE\";s:1:\"Y\";s:15:\"TRANSLITERATION\";s...\r\n5          DETAIL_PICTURE                         Y            a:17:{s:5:\"SCALE\";s:1:\"Y\";s:5:\"WIDTH\";i:500;s:6:\"H...\r\n5          DETAIL_TEXT                            N\r\n5          DETAIL_TEXT_TYPE                       Y            html\r\n5          DETAIL_TEXT_TYPE_ALLOW_CHANGE          N            N\r\n5          IBLOCK_SECTION                         Y            a:1:{s:22:\"KEEP_IBLOCK_SECTION_ID\";s:1:\"Y\";}\r\n5          LOG_ELEMENT_ADD                        N            NULL\r\n5          LOG_ELEMENT_DELETE                     N            NULL\r\n5          LOG_ELEMENT_EDIT                       N            NULL\r\n5          LOG_SECTION_ADD                        N            NULL\r\n5          LOG_SECTION_DELETE                     N            NULL\r\n5          LOG_SECTION_EDIT                       N            NULL\r\n5          NAME                                   Y\r\n5          PREVIEW_PICTURE                        Y            a:20:{s:11:\"FROM_DETAIL\";s:1:\"Y\";s:5:\"SCALE\";s:1:\"...\r\n5          PREVIEW_TEXT                           N\r\n5          PREVIEW_TEXT_TYPE                      Y            text\r\n5          PREVIEW_TEXT_TYPE_ALLOW_CHANGE         N            N\r\n5          SECTION_CODE                           Y            a:8:{s:6:\"UNIQUE\";s:1:\"Y\";s:15:\"TRANSLITERATION\";s...\r\n5          SECTION_DESCRIPTION                    N\r\n5          SECTION_DESCRIPTION_TYPE               Y            text\r\n5          SECTION_DESCRIPTION_TYPE_ALLOW_CHANGE  N            Y\r\n5          SECTION_DETAIL_PICTURE                 Y            a:17:{s:5:\"SCALE\";s:1:\"Y\";s:5:\"WIDTH\";i:500;s:6:\"H...\r\n5          SECTION_NAME                           Y\r\n5          SECTION_PICTURE                        Y            a:20:{s:11:\"FROM_DETAIL\";s:1:\"Y\";s:5:\"SCALE\";s:1:\"...\r\n5          SECTION_XML_ID                         N\r\n5          SORT                                   N            0\r\n5          TAGS                                   N\r\n5          XML_ID                                 Y\r\n5          XML_IMPORT_START_TIME                  N            NULL\r\n[/code]\r\n\r\n<h4>Свойства элементов инфоблока, таблица <code>b_iblock_property</code></h4>\r\n[code]\r\nID  TIMESTAMP_X          IBLOCK_ID  NAME             ACTIVE  SORT  CODE     DEFAULT_VALUE           PROPERTY_TYPE  ROW_COUNT  COL_COUNT  LIST_TYPE  MULTIPLE  XML_ID  FILE_TYPE    MULTIPLE_CNT  TMP_ID  LINK_IBLOCK_ID  WITH_DESCRIPTION  SEARCHABLE  FILTRABLE  IS_REQUIRED  VERSION  USER_TYPE  USER_TYPE_SETTINGS         HINT\r\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n47  2018-10-18 15:23:46  5          Автор            Y       500   AUTHOR                           S              1          30         L          N         NULL                 5             NULL    0               N                 N           N          N            1        NULL       NULL\r\n48  2018-10-18 15:23:46  5          Оценка           Y       500   RATING                           L              1          30         L          N         NULL                 5             NULL    0               N                 N           N          N            1        NULL       NULL\r\n49  2018-10-18 14:57:58  5          Галерея          Y       500   GALLERY                          F              1          30         L          Y         NULL    jpg,gif,png  5             NULL    0               N                 N           N          N            1        NULL       NULL\r\n50  2018-10-18 15:34:11  5          Дата обновления  Y       500   UPDATE   NULL                    S              1          30         L          N         NULL                 5             NULL    0               N                 N           N          N            1        Date       NULL\r\n51  2018-10-18 15:23:46  5          Примечание       Y       500   NOTE     a:2:{s:4:\"TYPE\";s:4...  S              1          30         L          N         NULL                 5             NULL    0               N                 N           N          N            1        HTML       a:1:{s:6:\"height\";i:200;}\r\n[/code]\r\n\r\n<h4>Варианты значений свойств типа «Список», таблица <code>b_iblock_property_enum</code></h4>\r\n[code]\r\nID  PROPERTY_ID  VALUE          DEF  SORT  XML_ID                            TMP_ID\r\n-----------------------------------------------------------------------------------\r\n24  46           Красный        N    500   c697ecffa792452a4371ec79a5b62c32  NULL\r\n25  46           Синий          N    500   dd1012b71a6d34a0aa4977303b4a93e0  NULL\r\n26  46           Зеленый        N    500   695e3b74f13ae6560def251e302792a5  NULL\r\n27  48           Интересно      N    500   7013214c28cf4c43481cb9a42c307481  NULL\r\n28  48           Посредственно  N    500   9b507f8248289054225b943ce51ae3a7  NULL\r\n29  48           Не интересно   N    500   aea56c5d759590ee32272834815a0d79  NULL\r\n[/code]\r\n\r\n<h4>Значения cвойств элементов, таблица <code>b_iblock_element_property</code></h4>\r\n[code]\r\nID  IBLOCK_PROPERTY_ID  IBLOCK_ELEMENT_ID  VALUE                                 VALUE_TYPE  VALUE_ENUM  VALUE_NUM  DESCRIPTION\r\n-------------------------------------------------------------------------------------------------------------------------------\r\n1   47                  349                Сергей Иванов                         text        NULL        0.0000\r\n3   49                  349                1034                                  text        NULL        1034.0000  NULL\r\n4   49                  349                1035                                  text        NULL        1035.0000  NULL\r\n5   49                  349                1036                                  text        NULL        1036.0000  NULL\r\n6   50                  349                2018-10-19                            text        NULL        2018.0000\r\n7   51                  349                a:2:{s:4:\"TEXT\";s:643:\"Примечание...  text        NULL        0.0000\r\n9   48                  349                27                                    text        27          NULL       NULL\r\n[/code]\r\n\r\n<h4>Расширенные права доступа к элементам, автоматическая таблица, <code>b_iblock_element_right</code></h4>\r\n[code]\r\nIBLOCK_ID  SECTION_ID  ELEMENT_ID  RIGHT_ID  IS_INHERITED\r\n---------------------------------------------------------\r\n[/code]\r\n\r\n<h2>Разное</h2>\r\n\r\n<h4>Привязка элементов к разделам, автоматическая таблица <code>b_iblock_section_element</code></h4>\r\n[code]\r\nIBLOCK_SECTION_ID  IBLOCK_ELEMENT_ID  ADDITIONAL_PROPERTY_ID\r\n------------------------------------------------------------\r\n28                 347                NULL\r\n28                 348                NULL\r\n28                 349                NULL\r\n29                 352                NULL\r\n29                 353                NULL\r\n29                 354                NULL\r\n29                 355                NULL\r\n29                 356                NULL\r\n30                 350                NULL\r\n30                 351                NULL\r\n[/code]\r\n\r\n<h4>SEO свойства, таблица <code>b_iblock_iproperty</code></h4>\r\n[code]\r\nID  IBLOCK_ID  CODE                                ENTITY_TYPE  ENTITY_ID  TEMPLATE\r\n--------------------------------------------------------------------------------------------------------------------------------\r\n33  5          ELEMENT_PREVIEW_PICTURE_FILE_ALT    E            348        Далматин. Породы собак\r\n34  5          ELEMENT_PREVIEW_PICTURE_FILE_TITLE  E            348        Далматин. Породы собак\r\n35  5          ELEMENT_DETAIL_PICTURE_FILE_ALT     E            348        Далматин. Породы собак\r\n36  5          ELEMENT_DETAIL_PICTURE_FILE_TITLE   E            348        Далматин. Породы собак\r\n37  5          SECTION_META_KEYWORDS               B            5          {=lower this.Name} {=lower iblock.PreviewText}\r\n38  5          SECTION_META_DESCRIPTION            B            5          {=this.Name}. {=iblock.PreviewText}\r\n41  5          SECTION_META_TITLE                  B            5          {=this.Name}. {=iblock.Name}\r\n42  5          ELEMENT_META_TITLE                  B            5          {=this.Name}. {=parent.Name}. {=iblock.Name}\r\n43  5          ELEMENT_META_DESCRIPTION            B            5          {=this.Name}. {=parent.Name}. {=iblock.PreviewText...\r\n45  5          ELEMENT_META_KEYWORDS               B            5          {=lower this.Name} {=lower parent.Name} {=lower ib...\r\n49  5          SECTION_PAGE_TITLE                  B            5          {=this.Name}\r\n50  5          ELEMENT_PAGE_TITLE                  B            5          {=this.Name}\r\n51  5          SECTION_PICTURE_FILE_ALT            B            5          {=this.Name}. {=iblock.Name}\r\n52  5          SECTION_PICTURE_FILE_TITLE          B            5          {=this.Name}. {=iblock.Name}\r\n53  5          SECTION_DETAIL_PICTURE_FILE_ALT     B            5          {=this.Name}. {=iblock.Name}\r\n54  5          SECTION_DETAIL_PICTURE_FILE_TITLE   B            5          {=this.Name}. {=iblock.Name}\r\n55  5          ELEMENT_PREVIEW_PICTURE_FILE_ALT    B            5          {=this.Name}. {=parent.Name}. {=iblock.Name}\r\n56  5          ELEMENT_PREVIEW_PICTURE_FILE_TITLE  B            5          {=this.Name}. {=parent.Name}. {=iblock.Name}\r\n57  5          ELEMENT_DETAIL_PICTURE_FILE_ALT     B            5          {=this.Name}. {=parent.Name}. {=iblock.Name}\r\n58  5          ELEMENT_DETAIL_PICTURE_FILE_TITLE   B            5          {=this.Name}. {=parent.Name}. {=iblock.Name}\r\n[/code]','2018-11-10 13:04:45',1),(219,17,'Битрикс. Кеширование в компонентах','','','CMS, Web-разработка, Битрикс, Кеширование, Компонент, component_epilog.php, result_modifier.php, StartResultCache, AbortResultCache, SetResultCacheKeys, EndResultCache, ClearResultCache, $arResult','В компонентах есть встроенная поддержка типичного алгоритма кеширования. Если есть валидный кеш, то метод StartResultCache() отправляет в браузер его содержимое, заполняет $arResult и возвращает false. Если нет валидного кеша, то он возвращает true — это значит, настало время актуализировать кеш.','<p>\r\nВ компонентах есть встроенная поддержка типичного алгоритма кеширования. Если есть валидный кеш, то метод <code>StartResultCache()</code> отправляет в браузер его содержимое, заполняет <code>$arResult</code> и возвращает <code>false</code>. Если нет валидного кеша, то метод возвращает <code>true</code> — это значит, настало время актуализировать кеш.\r\n</p>\r\n\r\n<h2>Кеширование $arResult и html-кода</h2>\r\n<p>\r\nВ большинстве стандартных компонентов битрикс используется одновременно кеширование массива <code>$arResult</code> и html-кода:\r\n</p>\r\n[php]\r\n/*\r\n * Подготовка входных параметров компонента\r\n */\r\n// время кеширования\r\nif (!isset($arParams[\'CACHE_TIME\'])) {\r\n    $arParams[\'CACHE_TIME\'] = 3600;\r\n} else {\r\n    $arParams[\'CACHE_TIME\'] = intval($arParams[\'CACHE_TIME\']);\r\n}\r\n// идентификатор элемента инфоблока\r\n$arParams[\'ELEMENT_ID\'] = empty($arParams[\'ELEMENT_ID\']) ? 0 : intval($arParams[\'ELEMENT_ID\']);\r\n\r\nif ($this->StartResultCache()) {\r\n    /*\r\n     * Если нет валидного кеша — получаем данные из БД\r\n     */\r\n    if ( ! \\Bitrix\\Main\\Loader::includeModule(\'iblock\')) {\r\n        $this->AbortResultCache();\r\n        ShowError(\'Модуль «Информационные блоки» не установлен\');\r\n        return;\r\n    }\r\n    if ($arParams[\'ELEMENT_ID\']) {\r\n        // выполняем запрос к базе данных\r\n        $rsElement = CIBlockElement::GetList(\r\n            array(),   // сортировка\r\n            $arFilter, // фильтр\r\n            false,     // группировка\r\n            false,     // постраничная навигация\r\n            $arSelect  // поля\r\n        );\r\n        if ($arResult = $rsElement->GetNext()) {\r\n            /*\r\n             * Добавляем в массив arResult дополнительные элементы,\r\n             * которые могут потребоваться в шаблоне\r\n             */\r\n        }\r\n    }\r\n\r\n    if (isset($arResult[\'ID\'])) {\r\n        /*\r\n         * Ключи $arResult, перечисленные при вызове этого метода,\r\n         * будут доступны в component_epilog.php и ниже по коду;\r\n         * обратите внимание, там уже будет другой $arResult\r\n         */\r\n        $this->SetResultCacheKeys(\r\n            array(\r\n                \'ID\',\r\n                \'NAME\'\r\n            )\r\n        );\r\n        // подключаем шаблон и сохраняем кеш\r\n        $this->IncludeComponentTemplate();\r\n    } else {\r\n        $this->AbortResultCache();\r\n        \\Bitrix\\Iblock\\Component\\Tools::process404(\r\n            \'Страница не найдена\',\r\n            true,\r\n            true\r\n        );\r\n    }\r\n}\r\n\r\n/*\r\n * Кэш не затронет весь код ниже, он будут выполняться на каждом хите, но\r\n * здесь работаем уже с другим $arResult — будут доступны только те ключи\r\n * массива, которые перечислены в вызове SetResultCacheKeys()\r\n */\r\nif (isset($arResult[\'ID\'])) {\r\n    // счетчик просмотров элемента\r\n    CIBlockElement::CounterInc($arResult[\'ID\']);\r\n    // устанавливаем заголовок страницы\r\n    $APPLICATION->SetTitle($arResult[\'NAME\']);\r\n}\r\n[/php]\r\n\r\n<div class=\"note\">\r\n[php]\r\nbool CBitrixComponent::StartResultCache(\r\n   int cacheTime,\r\n   string additionalCacheID,\r\n   string cachePath\r\n)\r\n[/php]\r\n<p>\r\nМетод поддержки внутреннего кеширования компонента. Возвращает <code>true</code> в случае, если кеш недействителен, или <code>false</code> в противном случае.\r\n</p>\r\n<p>\r\nЕсли кеш действителен, метод отправляет на экран его содержимое, заполняет <code>$arResult</code> и возвращает <code>false</code>. Если кеш недействителен, метод возвращает <code>true</code>, кеширование завершается и кеш сохраняется при вызове методов\r\n</p>\r\n<ul>\r\n  <li><code>CBitrixComponent::IncludeComponentTemplate()</code></li>\r\n  <li>или</li>\r\n  <li><code>CBitrixComponent::ShowComponentTemplate()</code></li>\r\n</ul>\r\n<p>\r\nсразу после подключения шаблона компонента.\r\n</p>\r\n<p>\r\nПараметры\r\n</p>\r\n<ul>\r\n  <li><code>cacheTime</code> — Время кеширования в секундах. Если этот параметр равен <code>false</code>, то время кеширования берется из входного параметра <code>$arParams[\'CACHE_TIME\']</code>. Необязательный.</li>\r\n  <li><code>additionalCacheID</code> — Кеш зависит от текущего сайта (<code>SITE_ID</code>), имени компонента, имени шаблона, входных параметров <code>$arParams</code>. Если кеш должен зависеть от каких-либо дополнительных параметров, то их необходимо передать сюда в виде строки. По умолчанию параметр равен <code>false</code>, т.е. кеш зависит только от текущего сайта <code>SITE_ID</code>, имени компонента, имени шаблона и входных параметров <code>$arParams</code>. Необязательный.</li>\r\n  <li><code>cachePath</code> — Путь к файлу кеша относительно папки кешей. Необязательный.</li>\r\n<ul>\r\n</div>\r\n\r\n<h2>Кеширование только $arResult</h2>\r\n<p>\r\nПри написании собственных компонентов кеширование html-кода не всегда удобно — иногда бывает нужно в шаблоне выполнять какой-то код на каждом хите. В этом случае можно кешировать только <code>$arResult</code>:\r\n[php]\r\nif ($this->StartResultCache()) {\r\n    if ( ! \\Bitrix\\Main\\Loader::includeModule(\'iblock\')) {\r\n        $this->AbortResultCache();\r\n        ShowError(\'Модуль «Информационные блоки» не установлен\');\r\n        return;\r\n    }\r\n    /*\r\n     * Здесь получаем данные из БД\r\n     */\r\n    // сохраняем полученные данные в кеш\r\n    $this->EndResultCache();\r\n}\r\n\r\n$this->IncludeComponentTemplate();\r\n[/php]\r\n<p>\r\nОбратите внимание — подключение шаблона производится <strong>вне блока кеширования</strong>, а его место занимает <code>EndResultCache()</code>.\r\n</p>\r\n\r\n<h2>Файл component_epilog.php</h2>\r\n<p>\r\nФайл <code>component_epilog.php</code> подключается после файла шаблона <code>template.php</code> и <strong>никогда не кешируется</strong>, т.е. он отработает независимо от того, был показан только что созданный html-код или вывод из кеша. Соответственно, можно использовать этот файл для выполнения каких-то действий на каждом хите — например, выводить html-код выше на странице, используя отложенные функции.\r\n</p>\r\n<p>\r\nНо в нативных компонентах данные, доступные в <code>component_epilog.php</code>, как правило, весьма ограничены — доступны лишь ключи <code>$arResult</code>, перечисленные при вызове <code>SetResultCacheKeys()</code>. Вносить свой код в компонент не имеет смысла — он может быть перезаписан при обновлении Битрикс. Можно еще скопировать компонент в свое пространиство имен и вносить изменения в копию, но тогда будут недоступны обновления.\r\n</p>\r\n<p>\r\nОднако, можно расширить перечень этих ключей, не затрагивая код компонента. Для этого копируем шаблон компонента, создаем файл <code>result_modifier.php</code> и добавляем в него код:\r\n</p>\r\n[php]\r\n<?php\r\nif (!defined(\'B_PROLOG_INCLUDED\') || B_PROLOG_INCLUDED!==true) die();\r\n\r\n// добавляем ключ SECTION в массив $arResult\r\n$this->__component->SetResultCacheKeys(array(\'SECTION\'));\r\n[/php]\r\n\r\n<h2>Очистить кеш компонента</h2>\r\n<p>\r\nЕсли при выполнении некоторых условий нужно очистить кеш компонента (например, компонент знает, что данные изменились), то можно воспользоваться методом\r\n</p>\r\n[php]\r\n$this->ClearResultCache($additionalCacheID = false, $cachePath = false)\r\n[/php]\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"http://g-rain-design.ru/blog/posts/bitrix-components-templates-tricks/\">Хитрости при работе с компонентами</a></li>\r\n  <li><a href=\"https://dev.1c-bitrix.ru/learning/course/?COURSE_ID=43&LESSON_ID=3053\">Кеширование в собственных компонентах</a></li>\r\n</ul>','2018-11-12 10:09:28',1),(220,6,'Миграции базы данных','','','MySQL, PHP, Web-разработка, БазаДанных, Миграции','Версия базы данных — определенное состояние структуры базы данных. Миграция — это обновление структуры базы данных от одной версии до другой, обычно более новой. Есть много готовых разнообразных инструментов, которые занимаются миграциями. Но, очень часто все, что нужно — это просто залить в базу изменения…','<p>\r\nВерсия базы данных — определенное состояние структуры базы данных. Миграция — это обновление структуры базы данных от одной версии до другой, обычно более новой. Есть много готовых разнообразных инструментов, которые занимаются миграциями. Но, очень часто все, что нужно — это просто залить в базу изменения, которые сделаны другим разработчиком.\r\n</p>\r\n\r\n<h2>Как это работает</h2>\r\n<p>\r\nИдея довольно проста: создадим директорию <code>sql</code>, куда будем складывать файлы миграций, то есть — файлы с SQL-запросами, которые меняют состояние базы, а также напишем php-скрипт, который эти миграции и накатывает.\r\n</p>\r\n<p>\r\nКаждая миграция должна выполняться строго один раз и изменять состояние базы надо в строго определенном порядке. Проблему повторного выполнения миграций мы решим, записывая в отдельную таблицу БД уже отработавшие SQL-файлы, а порядок выполнения установим четкими правилами именования этих файлов.\r\n</p>\r\n\r\n<h2>Файлы миграций</h2>\r\n<p>\r\nФайл <code>sql/0001_create_database.sql</code>:\r\n</p>\r\n[mysql]\r\n-- Структура таблицы `current_state_database`\r\nCREATE TABLE IF NOT EXISTS `current_state_database` (\r\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n    `name` varchar(255) NOT NULL DEFAULT \'\',\r\n    `added` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n    PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;\r\n\r\n-- Структура таблицы `products`\r\nCREATE TABLE IF NOT EXISTS `products` (\r\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n    `name` varchar(255) NOT NULL DEFAULT \'\',\r\n    `price` decimal(10,2) NOT NULL DEFAULT \'0.00\',\r\n    PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3;\r\n\r\n-- Дамп данных таблицы `products`\r\nINSERT INTO `products`\r\n    (`id`, `name`, `price`)\r\nVALUES\r\n    (1, \'Первый товар\', \'1000.00\'),\r\n    (2, \'Второй товар\', \'2000.00\');\r\n[/mysql]\r\n\r\n<p>\r\nФайл <code>sql/0002_add_table_users.sql</code>:\r\n</p>\r\n[mysql]\r\n-- Структура таблицы `users`\r\nCREATE TABLE IF NOT EXISTS `users` (\r\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n    `name` varchar(255) NOT NULL DEFAULT \'\',\r\n    `email` varchar(255) NOT NULL DEFAULT \'\',\r\n    `password` varchar(255) NOT NULL DEFAULT \'\',\r\n    PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;\r\n[/mysql]\r\n\r\n<p>\r\nФайл <code>sql/0003_insert_data_into_users.sql</code>:\r\n</p>\r\n[mysql]\r\n-- Новые записи таблицы `users`\r\nINSERT INTO `users`\r\n    (`id`, `name`, `email`, `password`)\r\nVALUES\r\n    (1, \'Иванов Иван Иванович\', \'ivanov.i@mail.ru\', \'qwerty\'),\r\n    (2, \'Петров Петр Петрович\', \'petrov.p@mail.ru\', \'123456\');\r\n[/mysql]\r\n\r\n<p>\r\nФайл <code>sql/0004_add_column_active_to_users.sql</code>:\r\n</p>\r\n[mysql]\r\n-- Новая колонка `active` таблицы `users`\r\nALTER TABLE\r\n    `users`\r\nADD\r\n    `active` tinyint unsigned NOT NULL DEFAULT \'0\'\r\nAFTER\r\n    `password`;\r\n[/mysql]\r\n\r\n<h2>Скрипт, который накатывает миграции</h2>\r\n<p>\r\nСкрипт запускается из командной строки и поддерживает 4 опции:\r\n</p>\r\n[cli]\r\n> php migration.php -h\r\nUsage: php migration.php [-h|-s|-b|-r]\r\nOptions:\r\n    -h --help       Show this message\r\n    -s --state      Show current state\r\n    -b --backup     Create database backup\r\n    -r --restore    Restore database from backup\r\n[/cli]\r\n<p>\r\nИсходный код скрипта:\r\n</p>\r\n[php]\r\n<?php\r\ndefine(\'DB_HOST\', \'localhost\');\r\ndefine(\'DB_NAME\', \'test\');\r\ndefine(\'DB_USER\', \'root\');\r\ndefine(\'DB_PASS\', \'\');\r\ndefine(\'TABLE_CURRENT_STATE\', \'current_state_database\');\r\n\r\nrequire \'lib/Database.php\';\r\nrequire \'lib/Migration.php\';\r\n\r\n// поддерживаются четыре опции: help, state, backup и restore\r\n$help  = \'Usage: php \' . $argv[0] . \' [-h|-s|-b|-r]\' . PHP_EOL;\r\n$help .= \'Options:\' . PHP_EOL;\r\n$help .= \'    -h --help       Show this message\' . PHP_EOL;\r\n$help .= \'    -s --state      Show current state\' . PHP_EOL;\r\n$help .= \'    -b --backup     Create database backup\' . PHP_EOL;\r\n$help .= \'    -r --restore    Restore database from backup\';\r\n\r\nif ($argc > 2) { // допускается только одна опция за раз\r\n    die($help);\r\n}\r\nif ($argc == 2) {\r\n    $params = array(\r\n        \'h::\' => \'help::\',\r\n        \'s::\' => \'state::\',\r\n        \'b::\' => \'backup::\',\r\n        \'r::\' => \'restore::\'\r\n    );\r\n    $options = getopt(implode(\'\', array_keys($params)), $params);\r\n    // опция help (справка по использованию)\r\n    if (isset($options[\'help\']) || isset($options[\'h\'])) {\r\n        die($help);\r\n    }\r\n    // опция state (текущее состояние базы данных)\r\n    if (isset($options[\'state\']) || isset($options[\'s\'])) {\r\n        $migration = new Migration(\r\n            DB_HOST,\r\n            DB_NAME,\r\n            DB_USER,\r\n            DB_PASS,\r\n            TABLE_CURRENT_STATE\r\n        );\r\n        $migration->state();\r\n        die();\r\n    }\r\n    // опция backup (создание резервной копии)\r\n    if (isset($options[\'backup\']) || isset($options[\'b\'])) {\r\n        $migration = new Migration(\r\n            DB_HOST,\r\n            DB_NAME,\r\n            DB_USER,\r\n            DB_PASS,\r\n            TABLE_CURRENT_STATE\r\n        );\r\n        $migration->backup();\r\n        die();\r\n    }\r\n    // опция restore (восстановление из резервной копии)\r\n    if (isset($options[\'restore\']) || isset($options[\'r\'])) {\r\n        $migration = new Migration(\r\n            DB_HOST,\r\n            DB_NAME,\r\n            DB_USER,\r\n            DB_PASS,\r\n            TABLE_CURRENT_STATE\r\n        );\r\n        $migration->restore();\r\n        die();\r\n    }\r\n}\r\n\r\n// собственно, сама миграция\r\n$migration = new Migration(\r\n    DB_HOST,\r\n    DB_NAME,\r\n    DB_USER,\r\n    DB_PASS,\r\n    TABLE_CURRENT_STATE\r\n);\r\n$migration->migrate();\r\n[/php]\r\n<p>\r\nСкипт в своей работе использует два класса:\r\n</p>\r\n[php]\r\n<?php\r\n/**\r\n * Класс для изменения состояния базы данных и учета этих изменений\r\n */\r\nclass Migration {\r\n\r\n    /**\r\n     * Хост базы данных\r\n     */\r\n    private $host;\r\n    /**\r\n     * Имя базы данных\r\n     */\r\n    private $name;\r\n    /**\r\n     * Пользователь базы данных\r\n     */\r\n    private $user;\r\n    /**\r\n     * Пароль базы данных\r\n     */\r\n    private $pass;\r\n\r\n    /**\r\n     * Имя таблицы БД для учета миграций\r\n     */\r\n    private $stateTable;\r\n\r\n    /**\r\n     * Директория с SQL-файлами\r\n     */\r\n    private $sqlDir;\r\n\r\n    /**\r\n     * Для хранения экземпляра класса для работы с базой данных\r\n     */\r\n    private $database;\r\n\r\n\r\n    public function __construct($host, $name, $user, $pass, $stateTable, $sqlDir = \'sql\', $backupDir = \'backup\') {\r\n        $this->host = $host;\r\n        $this->name = $name;\r\n        $this->user = $user;\r\n        $this->pass = $pass;\r\n\r\n        $this->stateTable = $stateTable;\r\n        $this->sqlDir = str_replace(\'\\\\\', \'/\', realpath($sqlDir)) . \'/\';\r\n        $this->backupDir = str_replace(\'\\\\\', \'/\', realpath($backupDir)) . \'/\';\r\n \r\n        Database::init($host, $name, $user, $pass);\r\n        $this->database = Database::getInstance();\r\n    }\r\n\r\n    /**\r\n     * Функция несколько раз изменяет состояние базы данных, выполняет запросы\r\n     * из тех SQL-файлов, которые еще не выполнялись ранее\r\n     */\r\n    public function migrate() {\r\n\r\n        // получаем список файлов для миграции\r\n        $files = $this->getNewFiles();\r\n\r\n        // нечего делать, база данных в актуальном состоянии\r\n        if (empty($files)) {\r\n            echo \'Your database in latest state\';\r\n            return;\r\n        }\r\n\r\n        // создаем резервную копию базы данных\r\n        $this->backup();\r\n\r\n        echo \'Start database migration\', PHP_EOL;\r\n        // выполняем SQL-запросы из каждого файла\r\n        foreach ($files as $file) {\r\n            $this->execute($file);\r\n            echo \'Execute file \', basename($file), PHP_EOL;\r\n        }\r\n\r\n        echo \'Database migration complete\';\r\n    }\r\n\r\n    /**\r\n     * Функция показывает список SQL-файлов для миграций\r\n     */\r\n    public function state() {\r\n        $oldFiles = $this->getOldFiles();\r\n        echo \'Old migrate files:\', PHP_EOL;\r\n        if (!empty($oldFiles)) {\r\n            $i = 1;\r\n            foreach ($oldFiles as $file) {\r\n                echo \'    \', $i, \'. \', basename($file), PHP_EOL;\r\n                $i++;\r\n            }\r\n        } else {\r\n            echo \'    There are no old files\', PHP_EOL;\r\n        }\r\n        $newFiles = $this->getNewFiles();\r\n        echo \'New migrate files:\', PHP_EOL;\r\n        if (!empty($newFiles)) {\r\n            $i = 1;\r\n            foreach ($newFiles as $file) {\r\n                echo \'    \', $i, \'. \', basename($file), PHP_EOL;\r\n                $i++;\r\n            }\r\n        } else {\r\n            echo \'    There are no new files\';\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Функция создает резервную копию базы данных\r\n     */\r\n    public function backup() {\r\n        // резервную копию создаем, если в БД есть таблицы\r\n        if ($this->isEmpty()) {\r\n            return;\r\n        }\r\n        // предупреждаем, если резервных копий накопилось много\r\n        $items = scandir($this->backupDir);\r\n        if (count($items) > 12) {\r\n            echo \'Warning! Too many backup files\', PHP_EOL;\r\n        }\r\n        // выполняем команду mysqldump\r\n        echo \'Create backup of current state\', PHP_EOL;\r\n        $backupName = $this->backupDir . $this->name . \'-\' . date(\'d.m.Y-H.i.s\') . \'.sql\';\r\n        if ($this->pass != \'\') {\r\n            $command = \'mysqldump -u\' . $this->user . \' -p\' . $this->pass .\r\n                       \' -h \' . $this->host . \' -B \' . $this->name . \' > \' . $backupName;\r\n        } else {\r\n            $command = \'mysqldump -u\' . $this->user . \' -h \' . $this->host .\r\n                       \' -B \' . $this->name . \' > \' . $backupName;\r\n        }\r\n        shell_exec($command);\r\n    }\r\n\r\n    /**\r\n     * Функция восстанавливает базу данных из резервной копии\r\n     */\r\n    public function restore() {\r\n        // получаем имя файла резервной копии\r\n        $backupName = $this->choose();\r\n        if (false === $backupName) {\r\n            return;\r\n        }\r\n        // создаем резервную копию текущего состояния\r\n        $this->backup();\r\n        // удаляем все таблицы из базы данных\r\n        $query = \'SHOW TABLES\';\r\n        $rows = $this->database->fetchAll($query);\r\n        foreach ($rows as $row) {\r\n            $query = \'DROP TABLE `\' . $row[\'Tables_in_\'.$this->name] . \'`\';\r\n            $this->database->execute($query);\r\n        }\r\n        // восстанавливаем базу данных\r\n        echo \'Restore database from backup\';\r\n        if ($this->pass != \'\') {\r\n            $command = \'mysql -u\' . $this->user . \' -p\' . $this->pass .\r\n                       \' -h \' . $this->host . \' -D \' . $this->name . \' < \' . $backupName;\r\n        } else {\r\n            $command = \'mysql -u\' . $this->user . \' -h \' . $this->host.\r\n                       \' -D \' . $this->name . \' < \' . $backupName;\r\n        }\r\n        shell_exec($command);\r\n    }\r\n\r\n    /**\r\n     * Функция возвращает массив старых файлов миграций, т.е.\r\n     * тех, которые уже были применены к БД\r\n     */\r\n    private function getOldFiles() {\r\n        $oldFiles = array();\r\n        if ($this->isEmpty()) {\r\n            return $oldFiles;\r\n        }\r\n        $query = \'SELECT `name` FROM `\'.$this->stateTable.\'` WHERE 1\';\r\n        $rows = $this->database->fetchAll($query);\r\n        foreach ($rows as $row) {\r\n            $oldFiles[] = $this->sqlDir . $row[\'name\'];\r\n        }\r\n        return $oldFiles;\r\n    }\r\n\r\n    /**\r\n     * Функция возвращает массив новых файлов миграций, т.е.\r\n     * тех, которые еще не были применены к БД\r\n     */\r\n    private function getNewFiles() {\r\n        // получаем список всех sql-файлов\r\n        $items = scandir($this->sqlDir);\r\n        $allFiles = array();\r\n        foreach ($items as $item) {\r\n            if ($item == \'.\' || $item == \'..\') {\r\n                continue;\r\n            }\r\n            $allFiles[] = $this->sqlDir . $item;\r\n        }\r\n        // получаем список старых файлов\r\n        $oldFiles = $this->getOldFiles();\r\n\r\n        return array_diff($allFiles, $oldFiles);\r\n    }\r\n\r\n    /**\r\n     * Функция выполняет запросы из sql-файла\r\n     */\r\n    private function execute($file) {\r\n        if ($this->pass != \'\') {\r\n            $command = \'mysql -u\' . $this->user . \' -p\' . $this->pass .\r\n                       \' -h \' . $this->host . \' -D \' . $this->name . \' < \' . $file;\r\n        } else {\r\n            $command = \'mysql -u\' . $this->user . \' -h \' . $this->host .\r\n                       \' -D \' . $this->name.\' < \'.$file;\r\n        }\r\n        shell_exec($command);\r\n\r\n        // добавляем запись в таблицу учета миграций, отмечая тот факт,\r\n        // что состояние базы данных изменилось\r\n        $query = \'INSERT INTO `\' . $this->stateTable . \'` (`name`) VALUES (\"\' . basename($file) . \'\")\';\r\n        $this->database->execute($query);\r\n    }\r\n\r\n    /**\r\n     * Функция проверяет, есть ли в базе данных таблицы\r\n     */\r\n    private function isEmpty() {\r\n        $query = \'SHOW TABLES\';\r\n        $rows = $this->database->fetchAll($query);\r\n        return empty($rows);\r\n    }\r\n\r\n    /**\r\n     * Вспомогательная функция для выбора файла резервной копии\r\n     */\r\n    private function choose() {\r\n        $items = scandir($this->backupDir);\r\n        if (count($items) == 2) {\r\n            echo \'Backup files not found\', PHP_EOL;\r\n            return false;\r\n        }\r\n        echo \'Choose backup file to restore:\', PHP_EOL;\r\n        $i = 0;\r\n        $numbers = array();\r\n        foreach ($items as $item) {\r\n            if ($item == \'.\' || $item == \'..\') {\r\n                continue;\r\n            }\r\n            $i++;\r\n            $numbers[] = $i;\r\n            echo $i , \'. \', $item, PHP_EOL;\r\n        }\r\n        while (true) {\r\n            echo \'Enter backup file number: \';\r\n            $number = fgets(STDIN);\r\n            if (in_array($number, $numbers)) {\r\n                break;\r\n            }\r\n        }\r\n        $i = 0;\r\n        foreach ($items as $item) {\r\n            if ($item == \'.\' || $item == \'..\') {\r\n                continue;\r\n            }\r\n            $i++;\r\n            if ($i == $number) {\r\n                $file = $this->backupDir . $item;\r\n                break;\r\n            }\r\n        }\r\n        return $file;\r\n    }\r\n\r\n}\r\n[/php]\r\n\r\n[php]\r\n<?php\r\n/**\r\n * Класс Database, предоставляет доступ к базе данных,\r\n * реализует шаблон проектирования «Одиночка»\r\n */\r\nclass Database {\r\n\r\n    /**\r\n     * для хранения единственного экземпляра данного класса\r\n     */\r\n    private static $instance;\r\n\r\n    /**\r\n     * для хранения экземпляра класса PDO\r\n     */\r\n    private $pdo;\r\n\r\n\r\n    /**\r\n     * Метод инициализации, необходимо запускать перед началом работы\r\n     */\r\n    public static function init($host, $database, $user, $password){\r\n        self::$instance = new self($host, $database, $user, $password);\r\n    }\r\n\r\n    /**\r\n     * Функция возвращает ссылку на экземпляр данного класса,\r\n     * реализация шаблона проектирования «Одиночка»\r\n     */\r\n    public static function getInstance() {\r\n        return self::$instance;\r\n    }\r\n\r\n    /**\r\n     * Закрытый конструктор, необходим для реализации шаблона\r\n     * проектирования «Одиночка»\r\n     */\r\n    private function __construct($host, $database, $user, $password) {\r\n        // создаем новый экземпляр класса PDO\r\n        $this->pdo = new PDO(\r\n            \'mysql:host=\' . $host . \';dbname=\' . $database,\r\n            $user,\r\n            $password,\r\n            array(\r\n                PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,\r\n                PDO::ATTR_EMULATE_PREPARES   => false,\r\n                PDO::MYSQL_ATTR_INIT_COMMAND => \'SET NAMES utf8\'\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  Метод-обертка для PDOStatement::execute()\r\n     */\r\n    public function execute($query, $params = array()) {\r\n        // подготавливаем запрос к выполнению\r\n        $statementHandler = $this->pdo->prepare($query);\r\n        // выполняем запрос\r\n        return $statementHandler->execute($params);\r\n    }\r\n\r\n    /**\r\n     * Метод-обертка для PDOStatement::fetchAll()\r\n     */\r\n    public function fetchAll($query, $params = array()) {\r\n        // подготавливаем запрос к выполнению\r\n        $statementHandler = $this->pdo->prepare($query);\r\n        // выполняем запрос\r\n        $statementHandler->execute($params);\r\n        // получаем результат\r\n        $result = $statementHandler->fetchAll(PDO::FETCH_ASSOC);\r\n        // возвращаем результаты запроса\r\n        return $result;\r\n    }\r\n\r\n    /**\r\n     * Метод-обертка для PDOStatement::fetch()\r\n     */\r\n    public function fetch($query, $params = array()) {\r\n        // подготавливаем запрос к выполнению\r\n        $statementHandler = $this->pdo->prepare($query);\r\n        // выполняем запрос\r\n        $statementHandler->execute($params);\r\n        // получаем результат\r\n        $result = $statementHandler->fetch(PDO::FETCH_ASSOC);\r\n        // возвращаем результат запроса\r\n        return $result;\r\n    }\r\n\r\n    public function fetchOne($query, $params = array()) {\r\n        // подготавливаем запрос к выполнению\r\n        $statementHandler = $this->pdo->prepare($query);\r\n        // выполняем запрос\r\n        $statementHandler->execute($params);\r\n        // получаем результат\r\n        $result = $statementHandler->fetch(PDO::FETCH_NUM);\r\n        // возвращаем результат запроса\r\n        if (false === $result) {\r\n            return false;\r\n        }\r\n        return $result[0];\r\n    }\r\n\r\n    public function lastInsertId() {\r\n        return (int)$this->pdo->lastInsertId();\r\n    }\r\n\r\n    public function beginTransaction() {\r\n        return $this->pdo->beginTransaction();\r\n    }\r\n\r\n    public function commit() {\r\n        return $this->pdo->commit();\r\n    }\r\n\r\n    public function rollBack() {\r\n        return $this->pdo->rollBack();\r\n    }\r\n}\r\n[/php]\r\n\r\n<h4>Дополнительно</h4>\r\n<ul>\r\n  <li><a href=\"https://github.com/tokmakov/Migrate\">Скачать исходные коды на GITHUB.COM</a></li>\r\n</ul>','2018-11-14 14:46:23',1);
/*!40000 ALTER TABLE `blog_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_tags`
--

DROP TABLE IF EXISTS `blog_tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_tags` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор',
  `name` varchar(100) NOT NULL COMMENT 'Название тега',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=263 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_tags`
--

LOCK TABLES `blog_tags` WRITE;
/*!40000 ALTER TABLE `blog_tags` DISABLE KEYS */;
INSERT INTO `blog_tags` VALUES (1,'Linux'),(2,'Команда'),(3,'HTML'),(4,'CSS'),(5,'JavaScript'),(6,'jQuery'),(7,'PHP'),(8,'MySQL'),(9,'Web-разработка'),(10,'1С:Предприятие'),(11,'Конфигурация'),(12,'ЯзыкЗапросов'),(29,'Bash'),(14,'Windows'),(15,'CLI'),(16,'stdin'),(17,'stdout'),(18,'stderr'),(19,'Плагин'),(20,'Python'),(70,'Подсистема'),(25,'СКД'),(26,'CentOS'),(27,'Ubuntu'),(28,'Редактор'),(31,'RegExp'),(32,'Регистр'),(33,'Измерение'),(34,'УправляемаяФорма'),(35,'Файл'),(36,'Модуль'),(37,'Директория'),(38,'Строка'),(39,'Словарь'),(40,'Список'),(41,'zip'),(42,'GitHub'),(43,'SSH'),(44,'Git'),(46,'Параметр'),(47,'HTTP'),(48,'Шаблон'),(49,'Оператор'),(50,'Документ'),(52,'Кортеж'),(53,'Движения'),(54,'Константа'),(55,'MS Excel'),(56,'CURL'),(57,'Сокет'),(58,'POST'),(59,'GET'),(60,'Владелец'),(61,'Справочник'),(62,'Печать'),(63,'Макет'),(64,'MS Word'),(65,'Переменная'),(66,'МоментВремени'),(67,'Реквизит'),(68,'CSV'),(69,'Исключение'),(71,'Интерфейс'),(72,'JSON'),(73,'Отбор'),(74,'locale'),(75,'Дата и время'),(76,'set'),(77,'wait'),(78,'shift'),(79,'Окружение'),(80,'export'),(81,'exec'),(82,'read'),(83,'env'),(84,'source'),(85,'Поиск'),(86,'PDF'),(87,'БазаДанных'),(88,'XML'),(89,'DOM'),(90,'FPM'),(91,'CGI'),(92,'Apache'),(93,'Nginx'),(94,'FastCGI'),(95,'CMS'),(96,'Joomla'),(97,'awk'),(98,'Поток'),(99,'Парсинг'),(100,'ТекущиеДанные'),(101,'ТекущаяСтрока'),(102,'Сигнал'),(103,'trap'),(104,'ОткрытьФорму'),(105,'ОбработкаВыбора'),(106,'Процесс'),(107,'find'),(108,'ОбработкаПроведения'),(109,'ПроверяемыеРеквизиты'),(110,'ОбработкаПроверкиЗаполнения'),(111,'heredoc'),(112,'ОбработкаЗаполнения'),(114,'ВводНаОсновании'),(132,'ЗначениеЗаполнения'),(116,'ТаблицаЗначений'),(117,'Квалификаторы'),(118,'ОписаниеТипов'),(119,'ПриСозданииНаСервере'),(120,'ПолучитьФорму'),(121,'ОткрытьЗначение'),(122,'Ключ'),(123,'ПВХ'),(124,'ЗначениеВДанныеФормы'),(125,'ДанныеФормыВЗначение'),(126,'ЗначениеВРеквизитФормы'),(127,'РеквизитФормыВЗначение'),(128,'return'),(129,'Функция'),(130,'tee'),(131,'test'),(133,'ЗаполнятьИзДанныхЗаполнения'),(134,'Заполнить'),(135,'Массив'),(136,'ИзменитьРеквизиты'),(138,'Форма'),(139,'Коллекция'),(140,'ПраваДоступа'),(141,'Битрикс'),(142,'ПараметрОснование'),(143,'ПараметрОбъектКопирования'),(144,'Копировать'),(145,'ОповеститьОВыборе'),(146,'ЭлементФормы'),(147,'РежимВыбора'),(148,'ШаблонКомпонента'),(149,'Класс'),(151,'init.php'),(152,'unset'),(153,'declare'),(154,'ПередЗаписью'),(155,'ПередЗаписьюНаСервере'),(156,'ПриЗаписи'),(157,'ПриЗаписиНаСервере'),(158,'ПослеЗаписиНаСервере'),(159,'ПослеЗаписи'),(160,'IFS'),(161,'Инфоблок'),(162,'ShowTitle'),(163,'Цикл'),(164,'ОбычнаяФорма'),(165,'ОтборСтрок'),(166,'ТабличнаяЧасть'),(167,'ТаблицаФормы'),(168,'php.ini'),(169,'.settings.php'),(170,'Установка'),(171,'Memcached'),(172,'ВключаемаяОбласть'),(173,'Компонент'),(174,'chmod'),(176,'StickyBit'),(177,'SUID'),(178,'SGID'),(179,'SAPI'),(180,'Меню'),(181,'ДеревоЗначений'),(182,'Иерархия'),(183,'ТипыДанных'),(184,'Новости'),(185,'ПостраничнаяНавигация'),(186,'ЧПУ'),(187,'Запрос'),(188,'SEO'),(189,'СтраницаСайта'),(190,'РазделСайта'),(191,'ЭлементИнфоблока'),(192,'РазделИнфоблока'),(193,'component_epilog.php'),(194,'$arParams'),(195,'$arResult'),(196,'Удалить'),(197,'rm'),(198,'cp'),(199,'mv'),(200,'AJAX'),(201,'umask'),(202,'chown'),(203,'GetList'),(204,'Шаблонизатор'),(205,'ОблакоТегов'),(206,'route'),(207,'Галерея'),(208,'Изображение'),(209,'Авторизация'),(210,'Регистрация'),(211,'Комментарии'),(212,'Форум'),(214,'ШаблонСайта'),(215,'IncludeComponent'),(216,'.description.php'),(217,'.parameters.php'),(218,'import.xml'),(219,'offers.xml'),(220,'Структура'),(221,'.access.php'),(222,'.type.menu_ext.php'),(223,'.type.menu.php'),(224,'Кеширование'),(225,'Навигация'),(226,'ssh-agent'),(227,'КаталогТоваров'),(228,'ОтложенныеФункции'),(229,'Буферизация'),(230,'УмныйФильтр'),(240,'Отладка'),(232,'XmlHttpRequest'),(233,'FormData'),(234,'ТипыЦен'),(235,'Наценки'),(236,'Корзина'),(237,'ИнтернетМагазин'),(238,'.htaccess'),(239,'URL'),(241,'НовоеЯдро'),(242,'Cookie'),(243,'FTP'),(244,'localStorage'),(245,'sessionStorage'),(246,'BX_UTF'),(247,'Кодировка'),(249,'SSL'),(250,'HTTPS'),(251,'wget'),(252,'WebSocket'),(253,'ХлебныеКрошки'),(254,'ПользовательскиеСвойства'),(255,'Событие'),(256,'Вкладка'),(257,'ORM'),(259,'Пользователь'),(260,'СтароеЯдро'),(261,'result_modifier.php'),(262,'Миграции');
/*!40000 ALTER TABLE `blog_tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `menu`
--

DROP TABLE IF EXISTS `menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `menu` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор пункта меню',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT 'Наименование пункта меню',
  `url` varchar(100) NOT NULL DEFAULT '' COMMENT 'Виртуальный адрес для роутера',
  `parent` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Идентификатор родителя',
  `sortorder` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Порядок сортировки',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT='Главное меню сайта';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `menu`
--

LOCK TABLES `menu` WRITE;
/*!40000 ALTER TABLE `menu` DISABLE KEYS */;
INSERT INTO `menu` VALUES (1,'Блог','frontend/blog/index',0,1),(2,'Статьи','frontend/article/index',0,2);
/*!40000 ALTER TABLE `menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `pages`
--

DROP TABLE IF EXISTS `pages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pages` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор страницы',
  `parent` int(11) unsigned NOT NULL DEFAULT '0' COMMENT 'Идентификатор родителя',
  `sefurl` varchar(100) NOT NULL COMMENT 'ЧПУ страницы',
  `name` varchar(255) NOT NULL DEFAULT '' COMMENT 'Заголовок страницы',
  `title` varchar(255) NOT NULL DEFAULT '' COMMENT 'Заголовок документа',
  `keywords` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега keywords',
  `description` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега description',
  `body` text NOT NULL COMMENT 'Текст страницы в формате html',
  `sortorder` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Порядок сортировки',
  PRIMARY KEY (`id`),
  UNIQUE KEY `sefurl` (`sefurl`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Страницы сайта';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `pages`
--

LOCK TABLES `pages` WRITE;
/*!40000 ALTER TABLE `pages` DISABLE KEYS */;
/*!40000 ALTER TABLE `pages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sitemap`
--

DROP TABLE IF EXISTS `sitemap`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sitemap` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT 'Наименование элемента карты сайта',
  `capurl` varchar(100) NOT NULL DEFAULT '' COMMENT 'Виртуальный адрес для роутера',
  `parent` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Идентификатор родителя',
  `sortorder` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Порядок сортировки',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COMMENT='Карта сайта';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sitemap`
--

LOCK TABLES `sitemap` WRITE;
/*!40000 ALTER TABLE `sitemap` DISABLE KEYS */;
INSERT INTO `sitemap` VALUES (1,'Блог','frontend/blog/index',0,1),(2,'Статьи','frontend/article/index',0,2),(3,'Web-разработка','frontend/blog/category/id/1',1,1),(4,'1С:Предприятие','frontend/blog/category/id/2',1,2),(5,'ОС Linux','frontend/blog/category/id/3',1,3),(6,'Web-разработка','frontend/article/category/id/1',2,1),(7,'1С:Предприятие','frontend/article/category/id/2',2,2),(8,'ОС Linux','frontend/article/category/id/3',2,3);
/*!40000 ALTER TABLE `sitemap` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-11-14 17:52:36
