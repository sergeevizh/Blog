-- MySQL dump 10.13  Distrib 5.7.20, for Win64 (x86_64)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	5.7.20

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article_categories`
--

DROP TABLE IF EXISTS `article_categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article_categories` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор категории',
  `parent` int(11) unsigned NOT NULL DEFAULT '0' COMMENT 'Идентификатор родительской категории',
  `name` varchar(255) NOT NULL COMMENT 'Наименование категории',
  `keywords` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега keywords',
  `description` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега description',
  `sortorder` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Порядок сортировки',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=15 DEFAULT CHARSET=utf8 COMMENT='Категории статей';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article_categories`
--

LOCK TABLES `article_categories` WRITE;
/*!40000 ALTER TABLE `article_categories` DISABLE KEYS */;
INSERT INTO `article_categories` VALUES (1,0,'Web-разработка','','',1),(2,0,'1С:Предприятие','','',2),(3,0,'ОС Linux','','',3),(14,0,'Разное','','',4);
/*!40000 ALTER TABLE `article_categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `article_items`
--

DROP TABLE IF EXISTS `article_items`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article_items` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор статьи',
  `category` int(11) unsigned NOT NULL COMMENT 'Идентификатор родительской категории',
  `name` varchar(255) NOT NULL COMMENT 'Заголовок статьи',
  `source` varchar(255) NOT NULL DEFAULT '' COMMENT 'Источник статьи',
  `keywords` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега keywords',
  `description` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега description',
  `excerpt` varchar(1000) NOT NULL COMMENT 'Анонс статьи',
  `body` mediumtext NOT NULL COMMENT 'Текст статьи в формате html',
  `added` datetime NOT NULL COMMENT 'Дата публикации',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COMMENT='Периодические публикации';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article_items`
--

LOCK TABLES `article_items` WRITE;
/*!40000 ALTER TABLE `article_items` DISABLE KEYS */;
INSERT INTO `article_items` VALUES (1,1,'Предопределенные переменные PHP','http://www.php.su/learnphp/vars/?pre','','','Любому запускаемому скрипту PHP предоставляет большое количество предопределенных переменных. Однако, многие из этих переменных не могут быть полностью задокументированы, поскольку они зависят от запущенного сервера, его версии и настроек, а также других факторов. Некоторые из этих переменных недоступны, когда PHP запущен из командной строки.','<p>\r\nЛюбому запускаемому скрипту PHP предоставляет большое количество предопределенных переменных. Однако, многие из этих переменных не могут быть полностью задокументированы, поскольку они зависят от запущенного сервера, его версии и настроек, а также других факторов. Некоторые из этих переменных не доступны, когда PHP запущен из командной строки.\r\n</p>\r\n<p>\r\nНачиная с PHP 4.2.0, значение директивы <span style=\"color: blue;\">register_globals</span> по умолчанию установлено в <span style=\"color: blue;\">off</span> (отключено). Это большое изменение в PHP. Переключение <span style=\"color: blue;\">register_globals</span> в <span style=\"color: blue;\">off</span> делает предопределенные переменные недоступными по имени. Например, чтобы получить <span style=\"color: blue;\">DOCUMENT_ROOT</span>, вам необходимо будет использовать <span style=\"color: blue;\">$_SERVER[\'DOCUMENT_ROOT\']</span> вместо <span style=\"color: blue;\">$DOCUMENT_ROOT</span>, или <span style=\"color: blue;\">$_GET[\'id\']</span> из URL <span style=\"color: blue;\">http://www.somehost.ru/test.php?id=3</span> вместо <span style=\"color: blue;\">$id</span>, или <span style=\"color: blue;\">$_ENV[\'HOME\']</span> вместо <span style=\"color: blue;\">$HOME</span>.\r\n</p>\r\n<p>\r\nИспользование предопределенных переменных PHP через суперглобальные массивы является предпочтительным.\r\n</p>\r\n<p>\r\nНачиная с версии 4.1.0, PHP предоставляет дополнительный набор предопределенных массивов, содержащих переменные web-сервера (если они доступны), окружения и пользовательского ввода. Эти новые массивы являются особыми, поскольку они автоматически глобальны &mdash; то есть, автоматически доступны в любой области видимости. По этой причине они также известны как «суперглобальные» массивы. Заметим, что предопределенные переменные все еще доступны через старые массивы (<span style=\"color: blue;\">$HTTP_*_VARS</span>) . Начиная с PHP 5.0.0, старые глобальные массивы могут быть отключены директивой <span style=\"color: blue;\">register_long_arrays</span>.\r\n</p>\r\n<p>\r\nЧтобы получить полный список переменных web-сервера, окружения и РНР, определенных для вашей конфигурации системы, достаточно выполнить следующий скрипт:\r\n</p>\r\n[php]<?php \r\necho \'<h2>Переменные окружения сервера $_SERVER[]</h2>\'; \r\necho \'<table border=\"1\">\'; \r\nforeach($_SERVER as $key => $value) { \r\n    echo \'<tr><td>\'.$key.\'</td><td>\'.$value.\'</td></tr>\'; \r\n} \r\necho \'</table>\'; \r\necho \'<h2>Глобальные переменные $GLOBALS[]</h2>\'; \r\necho \'<table border=\"1\">\'; \r\nforeach($GLOBALS as $key => $value) { \r\n    echo \'<tr><td>\'.$key.\'</td><td>\'.$value.\'</td></tr>\';\r\n} \r\necho \'</table>\'; \r\n// и так далее ... \r\n?>[/php]\r\n\r\n<h2>Суперглобальные массивы</h2>\r\n\r\n<dl>\r\n<dt>$GLOBALS</dt>\r\n	<dd>\r\n	Содержит ссылку на каждую переменную, доступную в данный момент в глобальной области видимости скрипта. Ключами этого массива являются имена глобальны переменных.\r\n	</dd>\r\n	<dt>$_SERVER</dt>\r\n	<dd>\r\n	Переменные, установленные web-сервером либо напрямую связанные с окружением выполнения текущего скрипта. Аналог старого массива <span style=\"color: blue;\">$HTTP_SERVER_VARS</span> (который по-прежнему доступен, но не рекомендуется).\r\n	</dd>\r\n	<dt>$_GET</dt>\r\n	<dd>\r\n	Переменные, передаваемые скрипту через HTTP-метод <span style=\"color: blue;\">GET</span>. Аналог старого массива <span style=\"color: blue;\">$HTTP_GET_VARS</span> (который по-прежнему доступен, но не рекомендуется).\r\n	</dd>\r\n	<dt>$_POST</dt>\r\n	<dd>\r\n	Переменные, передаваемые скрипту через HTTP-метод <span style=\"color: blue;\">POST</span>. Аналог старого массива <span style=\"color: blue;\">$HTTP_POST_VARS</span> (который по-прежнему доступен, но не рекомендуется).\r\n	</dd>\r\n	<dt>$_COOKIE</dt>\r\n	<dd>\r\n	Переменные, передаваемые скрипту через HTTP <span style=\"color: blue;\">cookies</span>. Аналог старого массива <span style=\"color: blue;\">$HTTP_COOKIE_VARS</span> (который по-прежнему доступен, но не рекомендуется).\r\n	</dd>\r\n	<dt>$_FILES</dt>\r\n	<dd>\r\n	Переменные, передаваемые скрипту через HTTP post-загрузку файлов. Аналог старого массива <span style=\"color: blue;\">$HTTP_POST_FILES</span> (который по-прежнему доступен, но не рекомендуется).\r\n	</dd>\r\n	<dt>$_ENV</dt>\r\n	<dd>\r\n	Переменные, передаваемые скрипту через окружение. Аналог старого массива <span style=\"color: blue;\">$HTTP_ENV_VARS</span> (который по-прежнему доступен, но не рекомендуется).\r\n	</dd>\r\n	<dt>$_REQUEST</dt>\r\n	<dd>\r\n	Переменные, передаваемые скрипту через механизмы ввода <span style=\"color: blue;\">GET</span>, <span style=\"color: blue;\">POST</span> и <span style=\"color: blue;\">COOKIE</span>, и которым, следовательно, нельзя доверять. Наличие и порядок включения переменных в этот массив определяется в соответствии с директивой конфигурации PHP <span style=\"color: blue;\">variables_order</span>. Этот массив не имеет прямых аналогов в версиях PHP до 4.1.0.\r\n	</dd>\r\n	<dt>$_SESSION</dt>\r\n	<dd>\r\n	Переменные, зарегистрированные на данный момент в сессии скрипта. Аналог старого массива <span style=\"color: blue;\">$HTTP_SESSION_VARS</span> (который по-прежнему доступен, но не рекомендуется).\r\n	</dd>\r\n</dl>','2006-04-06 10:58:56'),(2,1,'Загрузка файлов на сервер','http://www.php.su/phphttp/?uploads','','','Загрузка файла на сервер осуществляется с помощью multipart-формы, в которой есть поле загрузки файла. В качестве параметра enctype указывается значение multipart/form-data. Скрытое поле MAX_FILE_SIZE должно предшествовать полю выбора файла, и содержать максимально допустимый размер файла в байтах.','<h2>Multipart-формы</h2>\r\n\r\n<p>Загрузка файлов на сервер осуществляется пользователями сети интернет довольно часто, а именно:</p>\r\n<ul>\r\n  <li>Веб-итерфейсы почтовых сервисов, которые позволяют добавалять к письму приложение (attach), а для этого нужно сначала загрузить файл на сервер, и только после этого его можно добавлять к письму;</li>\r\n  <li>Интерактивные фотогалереи и фотоальбомы, которые не могут существовать без механизма загрузки файлов на сервер;</li>\r\n  <li>Порталы бесплатного програмного обеспечения, которые используют для обмена файлами различных программ, и.т.д.</li>\r\n</ul>\r\n<p>\r\nЗагрузка файла на сервер осуществляется с помощью <code>multipart</code>-формы, в которой есть поле загрузки файла. В качестве параметра <code>enctype</code> указывается значение <code>multipart/form-data</code>:\r\n</p>\r\n\r\n[html]<form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\">\r\n<input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"30000\" />\r\n<input type=\"file\" name=\"uploadfile\" />\r\n<input type=\"submit\" value=\"Загрузить\" />\r\n</form>[/html]\r\n\r\n<p>\r\nСкрытое поле MAX_FILE_SIZE должно предшествовать полю выбора файла, и содержать максимально допустимый размер файла в байтах. Его назначение &mdash; проверка размера файла еще до момента отправки файла на сервер. Это должно избавить пользователя от длительной и безрезультатной загрузки файла на сервер и образования лишнего трафика, но не стоит особо полагаться на это ограничение, так как его легко обойти.\r\n</p>\r\n\r\n<h2>Обработка multipart-форм</h2>\r\n\r\n<p>\r\nПрежде, чем приступить к написанию скрипта обработки multipart-формы, нужно отредактировать файл конфигурации <code>php.ini</code>, чтобы разрешить загрузку файлов на сервер.\r\n</p>\r\n<p>Конфигурационный файл PHP php.ini имеет три параметра, связанные с загрузкой файлов на сервер:</p>\r\n<ul>\r\n  <li><code>file_uploads=On</code> &mdash; разрешает загрузку файлов на сервер по протоколу HTTP;</li>\r\n  <li><code>upoad_tmp_dir=/tmp</code> &mdash; устанавливает каталог для временного хранения загруженных файлов;</li>\r\n  <li><code>upload_max_filesize=2M</code> &mdash; устанавливает максимальный объем загружаемых файлов.</li>\r\n</ul>\r\n\r\n<p>После внесения изменений в файл <code>php.ini</code> надо перезапустить Apache.</p>\r\n<p>\r\nКак же PHP обрабатывает <code>multipart</code>-формы? Получив файл, он сохраняет его во временном каталоге <code>upload_tmp_dir</code>, имя файла выбирается случайным образом. Затем он создает четыре  переменных суперглобального массива <code>$_FILES</code>. Этот массив содержит информацию о загруженном файле.\r\n</p>\r\n<p>\r\nПеременные, определенные для загруженных файлов, зависят от версии PHP и текущей конфигурации. Суперглобальный массив <code>$_FILES</code> доступен начиная с PHP 4.1.0. В случае, если конфигурационная директива <code>register_globals</code> установлена значением <code>On</code>, дополнительно будут объявлены переменные с соответствующими именами. Начиная с версии 4.2.0 значением по умолчанию для опции <code>register_globals</code> является <code>Off</code>.\r\n</p>\r\n<p>\r\nСодержимое массива <code>$_FILES</code> для нашего примера приведено ниже. Обратите внимание, что здесь предполагается использование имени <code>uploadfile</code> для поля выбора файла, в соответствии с приведенной выше <code>multipart</code>-форме. Разумеется, имя поля может быть любым.\r\n</p>\r\n<ul>\r\n  <li><code>$_FILES[\'uploadfile\'][\'name\']</code> &mdash; имя файла до его отправки на сервер, например, <code>pict.gif;</code></li>\r\n  <li><code>$_FILES[\'uploadfile\'][\'size\']</code> &mdash; размер принятого файла в байтах;</li>\r\n  <li><code>$_FILES[\'uploadfile\'][\'type\']</code> &mdash; MIME-тип принятого файла (если браузер смог его определить), например: <code>image/gif</code>, <code>image/png</code>, <code>image/jpeg</code>, <code>text/html</code>;\r\n  </li>\r\n  <li><code>$_FILES[\'uploadfile\'][\'tmp_name\']</code> &mdash; содержит имя файла во временном каталоге, например: <code>/tmp/phpV3b3qY</code>;</li>\r\n  <li><code>$_FILES[\'uploadfile\'][\'error\']</code> &mdash; код ошибки, которая может возникнуть при загрузке файла. Ключ <code>[\'error\']</code> был добавлен в PHP 4.2.0.</li>\r\n</ul>\r\n<p>\r\nПосле завершения работы скрипта, временный файл будет удален. Это означает, что мы должны его скопировать в другое место до завершения работы скрипта. То есть алгоритм работы сценария загрузки файла на сервер такой:\r\n</p>\r\n<p>Если кнопка <code>&quot;Submit&quot;</code> нажата, то файл уже будет загружен на сервер и его имя будут в переменной <code>$_FILES[\'uploadfile\'][\'name\']</code>. В этом случае скрипт должен сразу скопировать файл с именем <code>$_FILES[\'uploadfile\'][\'tmp_name\']</code> в какой-нибудь каталог (необходимы права на запись в этот каталог).\r\n</p>\r\n<p>\r\nКопирование файла производится функцией <code>copy()</code>. Используйте только функцию копирования <code>copy()</code>, а не перемещения, поскольку:\r\n</p>\r\n<ul>\r\n  <li>Временный файл будет удален автоматически;</li>\r\n  <li>Если временный каталог находится на другом носителе, будет выведено сообщение об ошибке. </li>\r\n</ul>\r\n<p>\r\nПредположим, нам нужно загрузить файл в каталог <code>uploads</code>, который находится в корневом каталоге веб-сервера (в каталоге <code>DocumentRoot</code>).\r\n</p>\r\n\r\n[php]// На всякий случай создадим каталог. Если он уже создан,\r\n// сообщение об ошибки мы не увидим, поскольку воспользуемся оператором @:\r\n@mkdir(\"uploads\", 0777);\r\n// Копируем файл из /tmp в uploads\r\n// Имя файла будет таким же, как и до отправки на сервер:\r\ncopy($_FILES[\'uploadfile\'][\'tmp_name\'],\"uploads/\".basename($_FILES[\'uploadfile\'][\'name\']));[/php]\r\n\r\n<p>\r\nВ Linux все немного сложнее &mdash; нам нужно учитывать права доступа к каталогу <code>uploads</code>. Скорее всего в таком случае, функция <code>mkdir()</code> не сработает, так как у нас нет прав на запись в каталог <code>DocumentRoot</code>. Зарегистрируйтесь в системе как пользователь <code>root</code>, создайте каталог <code>uploads</code> и измените его владельца и права доступа следующим образом:\r\n</p>\r\n\r\n[code]// Создаем каталог uploads\r\nmkdir uploads\r\n// Устанавливаем имя владельца apache и его группу\r\nchown apache:apache uploads\r\n// Разрешение записи всем (777) + установка закрепляющего бита (1):\r\nchmod 1777 uploads[/code]\r\n\r\n<p>\r\nРазмер файла можно ограничить, при желании можно отредактировать файл <code>.htaccess</code> и ограничить доступ к каталогу <code>uploads</code> &mdash; указать или конкретных пользователей, которым можно обращаться к каталогу, или IP-адреса.\r\n</p>\r\n<p>Вот теперь можно загружать файлы на сервер.</p>\r\n\r\n[php]<?php \r\n// Каталог, в который мы будем принимать файлы: \r\n$uploaddir = \'./files/\'; \r\n$uploadfile = $uploaddir.basename($_FILES[\'uploadfile\'][\'name\']); \r\n\r\n// Копируем файл из каталога для временного хранения файлов: \r\nif (copy($_FILES[\'uploadfile\'][\'tmp_name\'], $uploadfile)) \r\n  echo \"<p>Файл успешно загружен на сервер</p>\"; \r\nelse  \r\n  die(\"<p>Ошибка! Не удалось загрузить файл на сервер!</p>\");  \r\n\r\n// Выводим информацию о загруженном файле: \r\necho \"<h3>Информация о загруженном на сервер файле: </h3>\"; \r\necho \"<p><b>Оригинальное имя загруженного файла: \".$_FILES[\'uploadfile\'][\'name\'].\"</b></p>\"; \r\necho \"<p><b>Mime-тип загруженного файла: \".$_FILES[\'uploadfile\'][\'type\'].\"</b></p>\"; \r\necho \"<p><b>Размер загруженного файла в байтах: \".$_FILES[\'uploadfile\'][\'size\'].\"</b></p>\"; \r\necho \"<p><b>Временное имя файла: \".$_FILES[\'uploadfile\'][\'tmp_name\'].\"</b></p>\"; \r\n?>[/php]\r\n\r\n<h2>Загрузка на сервер нескольких файлов</h2>\r\n\r\n<p>\r\nЗагрузку нескольких файлов можно реализовать используя, например, различные значения <code>name</code> для тега <code>input</code>.\r\n</p>\r\n<p>\r\nТакже предусмотрена возможность автоматического получения организованной в массив информации о нескольких одновременно загружаемых файлах. Для реализации такой возможности используйте тот же синтаксис отправки массива из HTML-формы, что и для множественных полей <code>select</code> и <code>checkbox</code>:\r\n</p>\r\n\r\n[html]<form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\">\r\nSend these files:<br/>\r\n<input name=\"userfile[]\" type=\"file\" /><br/>\r\n<input name=\"userfile[]\" type=\"file\" /><br/>\r\n<input type=\"submit\" value=\"Отправить файлы \">\r\n</form>[/html]\r\n\r\n<p>\r\nВ случае, если такая форма была отправлена, массивы <code>$_FILES[\'userfile\']</code>, <code>$_FILES[\'userfile\'][\'name\']</code>, и <code>$_FILES[\'userfile\'][\'size\']</code> будут инициализированы (точно так же, как и <code>$HTTP_POST_FILES</code> для PHP 4.1.0 и более ранних версий). Если конфигурационная директива <code>register_globals</code> установлена значением <code>On</code>, также будут инициализированы сопутствующие глобальные переменные. Каждая из таких переменных будет представлять собой численно индексированный массив соответствующих значений для принятых файлов.\r\n</p>\r\n<p>\r\nПредположим, что были загружены файлы <code>/home/test/some.html</code> и <code>/home/test/file.bin</code>. В таком случае переменная <code>$_FILES[\'userfile\'][\'name\'][0]</code> будет иметь значение <code>some.html</code>, а переменная <code>$_FILES[\'userfile\'][\'name\'][1]</code> &mdash; значение <code>file.bin</code>. Аналогично, переменная <code>$_FILES[\'userfile\'][\'size\'][0]</code> будет содержать размер файла <code>some.html</code> и так далее.\r\n</p>\r\n<p>\r\nПеременные <code>$_FILES[\'userfile\'][\'name\'][0]</code>, <code>$_FILES[\'userfile\'][\'tmp_name\'][0]</code>, <code>$_FILES[\'userfile\'][\'size\'][0]</code> и <code>$_FILES[\'userfile\'][\'type\'][0]</code> также будут инициализированы. \r\n</p>','2006-04-06 11:26:09'),(3,1,'Обработка ошибок в PHP','http://webscript.ru/stories/04/04/12/4367449','','','PHP предоставляет прекрасную возможность контролировать возникающие ошибки. Здесь мы поговорим о том, как обработать ошибку — сообщить (или не сообщить) о происшествии пользователю, в случае необходимости — сообщить администратору с помощью электронной почты, записать информацию о происшествии в log-файл.','<p>\r\nPHP предоставляет прекрасную возможность контролировать возникающие ошибки. Здесь мы поговорим о том, как обработать ошибку — сообщить (или не сообщить) о происшествии пользователю, в случае необходимости — сообщить администратору с помощью электронной почты, записать информацию о происшествии в log-файл.\r\n</p>\r\n<p>\r\nИтак, для начала давайте определимся, что такое ошибки в PHP.\r\n</p>\r\n<p>\r\nPHP поддерживает следующие уровни ошибок:\r\n</p>\r\n<ul>\r\n  <li>E_ERROR</li>\r\n  <li>E_WARNING</li>\r\n  <li>E_PARSE</li>\r\n  <li>E_NOTICE</li>\r\n  <li>E_CORE_ERROR</li>\r\n  <li>E_CORE_WARNING</li>\r\n  <li>E_COMPILE_ERROR</li>\r\n  <li>E_COMPILE_WARNING</li>\r\n  <li>E_USER_ERROR</li>\r\n  <li>E_USER_WARNING</li>\r\n  <li>E_USER_NOTICE</li>\r\n  <li>E_ALL</li>\r\n  <li>E_STRICT</li>\r\n</ul>\r\n<p>\r\nНа самом деле — это просто константы, которые используются для определения уровня обработки ошибок, построения бит-маски. Константы имеют «говорящие» имена. Глядя на константу — мы можем сказать, что ошибка уровня E_PARSE возникает в случае синтаксической ошибки, E_NOTICE — это напоминание программисту о нарушении «хорошего стиля» программирования на PHP.\r\n</p>\r\n<p>\r\nНесколько примеров:\r\n</p>\r\n<p>\r\nКогда соединение с базой данных MySQL (или другой) завершается неудачей — интерпретатор PHP сообщает об ошибке уровня E_WARNING\r\n</p>\r\n\r\n[code]Warning: mysql_connect(): Access denied for user: \'VVingless@localhost\'\r\n(Using password: YES) In /home/mysite/index.php (line 83)[/code]\r\n\r\n<div class=\"note\">\r\n<div>Замечание: Для того чтобы интерпретатор PHP сообщал об ошибках — PHP должен быть настроен соответствующим образом: флаг display_errors должен быть включен — 1, директива error_reporting должна указывать на то, что необходимо отображать ошибки уровня E_WARNING (желательно конечно и другие). Если значения этих директив не удовлетворяют вашим требованиям — вы можете попробовать установить их самостоятельно, положив в папку со скриптом файл .htaccess (точка в начале имени обязательна) примерно такого содержания:</div>\r\n[code]php_flag display_errors on\r\nphp_value error_reporting \"E_ALL & ~E_NOTICE\"[/code]\r\n</div>\r\n<p>\r\nЭто означает, что сообщения об ошибках будут показываться, причем всех уровней, кроме E_NOTICE.\r\n</p>\r\n<p>\r\nКогда программист допускает синтаксическую ошибку — интерпретатор PHP сообщает об ошибке уровня E_PARSE:\r\n</p>\r\n\r\n[code]Parse error: parse error, unexpected \'(\', expecting \r\nT_STRING in /home/mysite/index.php on line 150[/code]\r\n\r\n<p>\r\nНо самые интересные для нас уровни ошибок — E_USER_ERROR и E_USER_WARNING. Как становится понятно из названия — это уровни ошибок, которые может устанавливать пользователь. Для этого существует функция trigger_error() — с её помощью, Вы можете сообщать пользователю о происшествии так, как это делает PHP.\r\n</p>\r\n<p>\r\nКак известно из руководства по PHP - функция trigger_error() принимает два параметра:\r\n</p>\r\n\r\n[code]void trigger_error ( string error_msg [, int error_type])[/code]\r\n\r\n<p>\r\nПервый параметр — текстовое сообщение об ошибке, например «файл не найден». Второй параметр — определяет уровень ошибки. Функция trigger_error() работает только с семейством ошибок E_USER — это значит, что вы можете установить ошибку уровня E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE и не можете установить ошибку уровня E_WARNING. Второй параметр является не обязательным, и по умолчанию принимает значение E_USER_NOTICE.\r\n</p>\r\n<p>\r\nДавайте попробуем:\r\n</p>\r\n<p>\r\nДопустим, наши данные для ленты новостей хранятся в файле news.txt, и если файл не найден — необходимо сообщить об ошибке. Текст программы будет выглядеть примерно так:\r\n</p>\r\n\r\n[php]if (!file_exists(\'/home/mysite/news.txt\')) {\r\n    trigger_error(\'News file not found\');\r\n}[/php]\r\n\r\n<p>\r\nВ результате интерпретатор PHP сообщит об ошибке уровня E_USER_NOTICE:\r\n</p>\r\n\r\n[code]Notice: News file not found in /home/mysite/index.php on line 47[/code]\r\n\r\n<p>\r\nНо что нам это даёт? Для начала то, что если в php.ini или файле .htaccess были установлены директивы\r\n</p>\r\n\r\n[code]php_value log_errors \"1\"\r\nphp_value log_errors_max_len \"1024\"\r\nphp_value error_log \"/home/mysite/my.log\"[/code]\r\n\r\n<p>\r\nТо в файл /home/mysite/my.log автоматически будет добавлена запись о происшествии:\r\n</p>\r\n\r\n[code][23-Mar-2004 13:52:03] PHP Notice: News file not found in /home/mysite/index.php on line 47[/code]\r\n\r\n<p>\r\nДалее, с помощью функции set_error_handler() мы можем установить свой собственный обработчик ошибок возникающих во время выполнения PHP скрипта.\r\n</p>\r\n<p>\r\nКак известно из мануала — в PHP 4 функция принимает один единственный строковый параметр — имя функции, которая будет выполняться каждый раз, когда происходит ошибка. PHP 5 даёт возможность установить ещё один параметр — тип ошибок которые будут обрабатываться с помощью нашего обработчика. Функция возвращает строку — имя функции обработчика, который был установлен до этого момента.\r\n</p>\r\n\r\n[code]string set_error_handler ( callback error_handler [, int error_types])[/code]\r\n\r\n<p>\r\nУстанавливаем так:\r\n</p>\r\n\r\n[php]set_error_handler (\"my_error_handler\");[/php]\r\n\r\n<p>\r\nПользовательская функция, которая будет обрабатывать ошибки, может принимать следующие входные параметры:\r\n</p>\r\n<ul>\r\n  <li>код уровня ошибки</li>\r\n  <li>строковая интерпретация ошибки</li>\r\n  <li>имя файла, в котором произошла ошибка</li>\r\n  <li>строка, в которой произошла ошибка</li>\r\n</ul>\r\n<p>\r\nСледует так же заметить, что эта функция не может обрабатывать ошибки уровней E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING. Это связанно с тем, что ошибки перечисленных уровней происходят до того, как интерпретатор получает информацию о пользовательском обработчике ошибок.\r\n</p>\r\n<p>\r\nИтак, объявляем нашу функцию\r\n</p>\r\n\r\n[php]function my_error_handler($code, $msg, $file, $line) { }[/php]\r\n\r\n<p class=\"note\">\r\nЗамечание: каждый более-менее объемный скрипт обычно разделяется на несколько файлов для удобства работы с ним. Как организовывать модульность программы — тема отдельно разговора. Сейчас же, я хочу лишь посоветовать выделять общие настройки в отдельный файл, который будет подключаться в начале программы с помощью инструкции include, либо с помощью директивы auto_prepend_file. В этот файл можно поместит и наш обработчик. Установка обработчика ошибок должна осуществится как можно ближе к началу программы, желательно в самом начале.\r\n</p>\r\n<p>\r\nДля того чтобы убедится что это действительно работает — создадим новый PHP файл <strong>myerrortest.php</strong>, и попробуем запустить его:\r\n</p>\r\n\r\n[php]<?php\r\nfunction my_error_handler($code, $msg, $file, $line) {\r\n    echo \"Произошла ошибка $msg ($code)<br/>\\n\";\r\n    echo \"$file ($line)\";\r\n}\r\nset_error_handler(\'my_error_handler\');\r\nif (!file_exists(\'/home/mysite/news.txt\')) {\r\n    trigger_error(\'News file not found\');\r\n}\r\n?>[/php]\r\n\r\n<p>\r\nРезультат обработки данного файла будет таким:\r\n</p>\r\n\r\n[code]Произошла ошибка News file not found (1024) /home/mysite/myerrortest.php (12)[/code]\r\n\r\n<p>\r\nТеперь у нас есть функция, которая получает данные обо всех происходящих ошибках. Подумаем, как мы можем это использовать.\r\n</p>\r\n<p>\r\nБудем обрабатывать ошибки уровней:\r\n</p>\r\n<ul>\r\n  <li>E_ERROR</li>\r\n  <li>E_WARNING</li>\r\n  <li>E_NOTICE</li>\r\n  <li>E_USER_ERROR</li>\r\n  <li>E_USER_NOTICE</li>\r\n</ul>\r\n<p>\r\nПервые три ошибки в хорошей законченной программе не должны происходить вообще, поэтому о них мы будем только сообщать пользователю выводом текста ошибки на экран. Так можно работать, пока скрипт в состоянии разработки, затем сообщения о них можно либо отключить, либо записывать в log-файл.\r\n</p>\r\n<p>\r\nЧто касается остальных двух — как Вы уже догадались — они могу там пригодиться. Мы сами будем вызывать ошибки этих уровней в случае необходимости. Допустим — ошибки уровня E_USER_ERROR — будем вызывать в случае, когда сообщение об ошибке должно попасть в log-файл и быть отправлено на e-mail администратору (например — ошибка при выполнении SQL запроса, или отсутствии парв доступа к необходимому файлу). Ошибки уровня E_USER_NOTICE будут вызываться при возникновении «лёгких» ошибок (например — пользователь некорректно заполнил форму, или запросил из базы несуществующую запись).\r\n</p>\r\n<p>\r\nТеперь наша функция обработки ошибок будет выглядеть примерно так:\r\n\r\n[php]// Немного предварительных настроек\r\n\r\n// устанавливаем режим отображения ошибок\r\n// отображать все ошибки, кроме E_NOTICE\r\nerror_reporting  (E_ALL & ~E_NOTICE);\r\n\r\n// эта константа отвечает за\r\n// включение/выключение режима отладки\r\n// во время отладки - сообщения не отсылаются\r\n// по почте, а просто печатаются на экран\r\ndefine(\'DEBUG\', 0);\r\n\r\n// это глобальная переменная, в которой\r\n// будет храниться сообщение, которое\r\n// должен видеть пользователь\r\n$MSG = \'\';\r\n\r\n// e-mail разработчика, куда отправлять ошибки\r\ndefine(\'ADM_EMAIL\',\'admin@example.com\');\r\n\r\n// log-файл\r\ndefine(\'LOGFILE\',\'/home/mysite/mylog.log\');\r\n\r\n// разница во времени с сервером (в секундах)\r\ndefine(\'TIMEOFFSET\', 0);\r\n\r\n// сама функция\r\nfunction my_error_handler($code, $msg, $file, $line)\r\n{\r\n    // глобальная переменная, в которую будет\r\n    // записываться сообщение об ошибке.\r\n    global $MSG;\r\n\r\n    // пропускаем ошибки уровня E_NOTICE\r\n    // и игнорируем ошибки, если режим сообщения об ошибках отключен\r\n    if ( ($code == E_NOTICE) or (error_reporting() == 0) ) {\r\n        return;\r\n    }\r\n\r\n    // если мы вызвали ошибку уровня E_USER_NOTICE - просто\r\n    // записать текст ошибки в глобальную переменную $MSG\r\n    // и прекратить выполнение функции\r\n    if ($code == E_USER_NOTICE) {\r\n        $MSG = $msg;\r\n        return;\r\n    }\r\n\r\n    // если ошибка уровня E_ERROR - печатаем текст ошибки\r\n    // и завершаем выполнение скрипта\r\n    if ($code == E_ERROR) {\r\n        die (\'<br/><b>ERROR:</b> \'.$msg.\'<br/>In \'.$file.\' (line \'.$line.\')<br/>\');\r\n    }\r\n\r\n    // если ошибка уровня E_WARNING - печатаем текст ошибки\r\n    // и прекращаем выполнение функции\r\n    if ($code == E_WARNING) {\r\n        echo \'<br/><b>WARNING:</b> \'.$msg.\'<br/>In \'.$file.\' (line \'.$line.\')<br/>\';\r\n        return;\r\n    }\r\n\r\n    // если ошибка уровня E_USER_ERROR\r\n    if ($code == E_USER_ERROR) {\r\n        // записываем в переменную $MSG текст, о том что произошла ошибка,\r\n        // причины сообщать не будем, только сообщим что подробности\r\n        // отправлены на e-mail кому следует.\r\n        $MSG = \'Критическая Ошибка: действие выполнено небыло. <br/>\r\n        Сообщение об ошибке было отправлено разработчику.\';\r\n\r\n        // подробности записываем в переменную $text\r\n        $text = $msg.\'<br>\'.\'Файл: \'.$file.\' (\'.$line.\')\';\r\n\r\n        // Если константа DEBUG установлена в 1 - печатаем информацию об\r\n        // ошибке на экран, если нет - отправляем текст ошибки почтой\r\n        // функция error_mail() и пишем в log - функция error_writelog()\r\n        if (DEBUG == 1) {\r\n            error_print($text);\r\n        } else {\r\n            error_mail($text);\r\n            error_writelog($text);\r\n        }\r\n\r\n        return;\r\n    }\r\n}\r\n\r\n// устанавливаем обработчик\r\nset_error_handler(\'my_error_handler\');[/php]\r\n\r\n<p>Теперь описываем служебные функции:</p>\r\n\r\n[php]// функция печатает ошибку на экран\r\nfunction error_print($text) {\r\n    echo $text.\'<br/>\';\r\n}\r\n\r\n// функция отправляет ошибку почтой\r\nfunction error_mail($text) {\r\n    $text = str_replace(\"<br/>\", \"\\n\", $text);\r\n    $info = \'Время: \'.get_datetime().\"\\nRemote IP:\".get_ip().\"\\n\";\r\n    mail(ADM_EMAIL, \"Error reporting\", $info.$text);\r\n}\r\n\r\n// функция пишет ошибку в лог\r\nfunction error_writelog($text) {\r\n    $text = str_replace(\"<br/>\", \"\\t\", $text);\r\n    if (@$fh = fopen(LOGFILE, \"a+\")) {\r\n        fputs($fh, get_datetime().\"t\".get_ip().\"t\".$text.\"n\");\r\n        fclose($fh);\r\n    }\r\n}\r\n\r\n// получаем время, с учётом разницы во времени\r\nfunction get_time() {\r\n    return date(\"H:i\", time () + TIMEOFFSET);\r\n}\r\n\r\n// получаем дату, с учётом разницы во времени\r\nfunction get_date()\r\n{\r\n    return date(\"Y-m-d\", time () + TIMEOFFSET);\r\n}\r\n\r\n// получаем  дату и время, с учётом разницы во времени\r\nfunction get_datetime() {\r\n    return get_date().\' \'.get_time();\r\n}\r\n\r\n// получаем IP\r\nfunction get_ip() {\r\n    return $_SERVER[\'REMOTE_ADDR\'];\r\n}[/php]\r\n\r\n<p>\r\nИ наконец пример использования:\r\n</p> \r\n\r\n[php]// функция записывает новость в файл\r\nfunction write_news($title, $text) {\r\n    $news_file = \'/home/mysite/news.txt\';\r\n\r\n    // проверяем наличие заголовка - ошибка не критическая\r\n    if (!trim($title)) {\r\n        // для того чтобы определить что функция завершилась\r\n        // неудачей - необходимо вернуть false. Функция\r\n        // trigger_error() - возвращает true, мы будем\r\n        // возвращать её инвертированный результат\r\n        return !trigger_error(\'Необходимо указать заголовок новости\');\r\n    }\r\n\r\n    // проверяем наличие текста новости - ошибка не критическая\r\n    if (!trim($text)) {\r\n        return !trigger_error(\'Необходимо указать текст новости\');\r\n    }\r\n\r\n    // проверяем наличие файла в который будем писать\r\n    // если файл не найден - возникает критическая ошибка\r\n\r\n    if (!file_exists($news_file)) {\r\n        return !trigger_error(\'Файл базы новостей не найден!\', E_USER_ERROR);\r\n    }\r\n\r\n    // ...тут предварительная обработка данных...\r\n\r\n    // записываем новость\r\n    $fh = fopen($news_file, \"a+\");\r\n    fputs($fh, $title.\"t\".$text.\"n\");\r\n    fclose($fh);\r\n\r\n    // если всё нормально - функция возвращает true\r\n    return true;\r\n}\r\n\r\n// пытаемся записать новость\r\n// эти данные могут приходить из web-формы\r\n$res = write_news(\"Моя новость\", \"Текст моей новости\");\r\nif ($res === false) {\r\n    // если вернулся false - печатаем ошибку\r\n    echo $MSG;\r\n} else {\r\n    // если всё в порядке - можно сообщить об этом\r\n    // а лучше отфорвардить пользователя куда-нибудь.\r\n    echo \'Новость была добавлена\';\r\n}[/php]\r\n\r\n<p>\r\nДля того чтобы пример заработал — просто скопируйте в PHP-файл три предыдущих блока кода. Не забудьте установить права доступа на log-файл 777 для того чтобы скрипт мог с ним работать, прописать правильные пути и указать свой e-mail. Вы можете включить режим отладки установкой переменной DEBUG в 1.\r\n</p>\r\n<p>\r\nЭто довольно простой пример, тему можно развивать.\r\n</p>','2004-04-15 12:58:45'),(4,1,'Работа с PDO','http://webonrails.ru/post/1438/','PHP Data Objects (PDO) — расширение для PHP, предоставляющее разработчику универсальный интерфейс для доступа к различным базам данных','PHP класс PDO базы данных интерфейс MySQL PostgreSQL SQLite подготовленные выражения prepared statements исключение Data Objects','В этой статье разговор пойдет о PHP Data Objects (PDO) — расширение для PHP, предоставляющее разработчику универсальный интерфейс для доступа к различным базам данных.','<p>\r\nВ этой статье разговор пойдет о PHP Data Objects (PDO) — расширение для PHP, предоставляющее разработчику универсальный интерфейс для доступа к различным базам данных.\r\n</p>\r\n<p>\r\nВ чем преимущество PDO? Этот вопрос можно раскрыть тремя пунктами:\r\n</p>\r\n<ul>\r\n  <li>Универсальный интерфейс для работы с различными базами данных. Разработчик может легко перевести свое веб-приложение на другую СУБД, поменяв при этом всего пару строк кода.\r\n  <li>Высокая скорость работы.\r\n  <li>Подготовленные выражения, о которых мы поговорим чуть позже.\r\n</ul>\r\n</p>\r\n<p>\r\nНа данный момент расширение PDO может поддерживать СУБД для которой существует PDO-драйвер:\r\n</p>\r\n<ul>\r\n  <li>PDO_CUBRID (CUBRID)</li>\r\n  <li>PDO_DBLIB (FreeTDS, Microsoft SQL Server, Sybase)</li>\r\n  <li>PDO_FIREBIRD (Firebird, Interbase 6)</li>\r\n  <li>PDO_IBM (IBM DB2)</li>\r\n  <li>PDO_INFORMIX (IBM Informix Dynamic Server)</li>\r\n  <li>PDO_MYSQL (MySQL 3.x/4.x/5.x)</li>\r\n  <li>PDO_OCI (Oracle Call Interface)</li>\r\n  <li>PDO_ODBC (ODBC v3 (IBM DB2, unixODBC and win32 ODBC))</li>\r\n  <li>PDO_PGSQL (PostgreSQL)</li>\r\n  <li>PDO_SQLITE (SQLite 3 and SQLite 2)</li>\r\n  <li>PDO_SQLSRV (Microsoft SQL Serve )</li>\r\n  <li>PDO_4D (4D)</li>\r\n</ul>\r\n\r\n<h2>Подключение к базе данных</h2>\r\n\r\n<p>\r\nВ зависимости от выбранной СУБД, способ подключения может незначительно отличаться. Подключение к популярным СУБД:\r\n</p>\r\n\r\n[php]// MуSQL\r\n$DBH = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass); \r\n\r\n// PostgreSQL\r\n$DBH = new PDO(\"pgsql:host=$host;dbname=$dbname\", $user, $pass);\r\n\r\n//MS SQL\r\n$DBH = new PDO(\"mssql:host=$host;dbname=$dbname\", $user, $pass); \r\n\r\n// SQLite\r\n$DBH = new PDO(\"sqlite:my/database/path/database.db\");[/php]\r\n\r\n<h2>Обработка ошибок и исключения</h2>\r\n\r\n<p>\r\nОбязательно заключайте подключение к базе данных в блок try/catch:\r\n</p>\r\n\r\n[php]try {\r\n    $DBH = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass); \r\n} \r\ncatch(PDOException $e) { \r\n    echo \"Нет соединения с базой данных\"; \r\n}[/php]\r\n\r\n<p>\r\nИначе, в случае ошибки, в браузер будет выкинут Fatal error, в котором будут раскрыты все подробности вашего соединения, с логином и паролем.\r\n</p>\r\n<p>\r\nPDO умеет выбрасывать исключения при ошибках, поэтому все операции с базой, по хорошему, должны находиться в блоке try/catch.\r\n</p>\r\n<p>\r\nPDO имеет три режима обработки исключения:\r\n</p>\r\n<ul>\r\n  <li><strong>PDO::ERRMODE_SILENT</strong> — режим по умолчанию, ошибки генерируются по такому же принципу, как в расширениях mysql или mysqli. После возникновения ошибки скрипт продолжит работу.\r\n  <li><strong>PDO::ERRMODE_WARNING</strong> — режим вызовет стандартное сообщение E_WARNING и позволит скрипту продолжить работу.\r\n  <li><strong>PDO::ERRMODE_EXCEPTION</strong> — режим выбрасывает исключение, что позволяет обрабатывать ошибки и скрывать важную информацию от посторонних глаз.\r\n</ul>\r\n<p>\r\nЧтобы установить необходимый уровень контроля ошибок необходимо вызвать метод $this->setAttribute после подключения к базе данных.\r\n</p>\r\n\r\n[php]try {\r\n    $DBH = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass); \r\n    $DBH->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n} \r\ncatch(PDOException $e) { \r\n    echo \"Нет соединения с базой данных\"; \r\n}[/php]\r\n\r\n<h2>Подготовленные выражения или Prepared Statements</h2>\r\n\r\n<p>\r\nПодготовленные выражения — это заранее скомпилированное SQL-выражение, которое может быть многократно выполнено путем отправки серверу лишь различных наборов данных. Дополнительным преимуществом является невозможность провести SQL-инъекцию.\r\n</p>\r\n<p>\r\nЗа подготовленные выражения отвечает метод $DBH->prepare. Им и рекомендуется всегда пользоваться.\r\n</p>\r\n<p>\r\nСразу хочу отметить, что выполнить запрос в PDO можно тремя методами:\r\n</p>\r\n<ul>\r\n  <li><strong>$DBH->exec</strong> — используется для запросов, которые не возвращают никаких данных. Метод возвращает количество затронутых им записей, или FALSE в случае ошибки.</li>\r\n</ul>\r\n\r\n[php]$count_row = $DBH->exec(\"DELETE FROM users\");[/php]\r\n\r\n<ul>\r\n  <li><strong>$DBH->query</strong> – используется выполнения не защищенных запросов, и возвращает результат или FALSE в случаи ошибки. Например, им можно выполнять простые запросы.</li>\r\n</ul>\r\n\r\n[php]$DBH->query(\"SET NAMES \'cp1251\'\");\r\n$DBH->query(\"SELECT * FROM users\");\r\n$DBH->query(\"DELETE FROM users\");[/php]\r\n\r\n<ul>\r\n  <li><strong>$DBH->prepare + $STH->execute</strong> — используется для подготовки выражений и выполнения запроса.</li>\r\n</ul>\r\n\r\n[php]// безымянные placeholders\r\n$STH = $DBH->prepare(\"INSERT INTO users (name, phone, city) values (?, ?, ?)\");[/php] \r\n\r\n[php]// именные placeholders\r\n$STH = $DBH->prepare(\"INSERT INTO users (name, phone, city) values (:name, :phone, :city)\");[/php]\r\n\r\n<p>\r\nПосле подготовки, запрос выполняется методом $STH->execute($data).\r\n</p>\r\n\r\n[php]// безымянные placeholders\r\n\r\n$data = array();\r\n$data[] = \'Alersander\';\r\n$data[] = \'+7 000 123 45 67\';\r\n$data[] = \'St. Petersburg\';\r\n\r\n$STH = $DBH->prepare(\"INSERT INTO users (name, phone, city) values (?, ?, ?)\");\r\n$STH->execute($data);[/php]\r\n\r\n[php]// именные placeholders\r\n\r\n$data = array();\r\n$data[\'name\'] = \'Alersander\';\r\n$data[\'phone\'] = \'+7 000 123 45 67\';\r\n$data[\'city\'] = \'St. Petersburg\';\r\n\r\n$STH = $DBH->prepare(\"INSERT INTO users (name, phone, city) values (:name, :phone, :city)\");\r\n$STH->execute($data);[/php]\r\n\r\n<h2>Выборка данных</h2>\r\n\r\n<p>\r\nДля выборки с произвольными параметрами тоже будем использовать метод $DBH->prepare. Данные выборки можно получить с помощью методов:\r\n</p>\r\n<ul>\r\n  <li><strong>$STH->fetch</strong> — выбирает следующую строку и возвращает в необходимом виде.</li>\r\n  <li><strong>$STH->fetchAll</strong> — возвращает массив всех выбранных строк.</li>\r\n  <li><strong>$STH->fetchObject</strong> — выбирает следующую строку и возвращает ее как объект.</li>\r\n</ul>\r\n<p>\r\nЯ буду рассматривать только первый метод, т.к. он универсальный и предоставляет разработчику, всё, что ему необходимо.\r\n</p>\r\n<p>\r\nМетоду $STH->fetch можно указать, в каком виде нам нужно предоставить результат:\r\n</p>\r\n<ul>\r\n  <li><strong>PDO::FETCH_BOTH</strong> (по умолчанию) — возвращает числовой и ассоциативный массив;</li>\r\n  <li><strong>PDO::FETCH_ASSOC</strong> — возвращает массив ассоциативный с названиями столбцов;</li>\r\n  <li><strong>PDO::FETCH_NUM</strong> — возвращает массив числовыми ключами в виде порядковых номеров столбцов;</li>\r\n  <li><strong>PDO::FETCH_OBJ</strong> — возвращает анонимный объект со свойствами, соответствующими именам столбцов;</li>\r\n  <li><strong>PDO::FETCH_BOUND</strong> — присваивает значения столбцов соответствующим переменным, заданным с помощью метода $STH->bindColumn();</li>\r\n  <li><strong>PDO::FETCH_CLASS</strong> — присваивает значения столбцов соответствующим свойствам указанного класса. Если для какого-то столбца свойства нет, оно будет создано;</li>\r\n  <li><strong>PDO::FETCH_INTO</strong> — обновляет существующий экземпляр указанного класса;</li>\r\n  <li><strong>PDO::FETCH_LAZY</strong> — объединяет в себе PDO::FETCH_BOTH и PDO::FETCH_OBJ.</li>\r\n</ul>\r\n\r\n[php]$STH = $DBH->prepare(\"SELECT name, phone, city FROM users\");\r\n$STH->execute();\r\n\r\nwhile($res = $STH->fetch(PDO::FETCH_ASSOC)) {\r\n    echo $res[\'name\'];\r\n}\r\n\r\n$STH = $DBH->prepare(\"SELECT name, phone, city FROM users\");\r\n$STH->execute();\r\n\r\nwhile($res = $STH->fetch(PDO::FETCH_OBJ)) {\r\n    echo $res->name;\r\n}[/php]\r\n\r\n<h2>Закрытие соединения и освобождение буфера запроса</h2>\r\n\r\n<p>\r\nВ PDO нет специальных методов для этих целей. Закрыть соединение с базой данных можно путем переопределения переменных:\r\n</p>\r\n\r\n[php]$DBH = null;\r\n$STH = null;[/php]\r\n\r\n<h2>Полезные методы</h2>\r\n\r\n<ul>\r\n  <li><strong>$DBH->lastInsertId()</strong> — возвращает id последней вставленной записи.</li>\r\n  <li><strong>$DBH->query(string)</strong> — экранирует специальные символы в строковых данных таким образом, что их становится безопасно использовать в запросах.</li>\r\n  <li><strong>$STH->rowCount()</strong> — возвращает количество затронутых записей последним запросом.</li>\r\n</ul>\r\n\r\n<h2>Обработка ошибок PDO</h2>\r\n\r\n<p>\r\nЛично мне не нравится, что если я не заключаю все запросы в блок try/catch, то PDO выкидывает Fatal error со всеми интимными подробностями моего запроса. В промышленном приложении заключать каждый запрос в блок try/catch, это идиотизм! \r\n</p>\r\n<p>\r\nПоэтому мы поступим следующим образом — немного расширим классы PDO и PDOStatement:\r\n</p>\r\n\r\n[php]class DB extends PDO\r\n{\r\n    public $error = false; // выводить сообщения об ошибках на экран? (true/false)\r\n    \r\n    public function __construct($dsn, $username=\'\', $password=\'\', $driver_options=array()) {\r\n        try {\r\n            parent::__construct($dsn, $username, $password, $driver_options);\r\n                \r\n            $this->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n            $this->setAttribute(PDO::ATTR_STATEMENT_CLASS, array(\'DBStatement\', array($this)));\r\n            \r\n            $this->query(\"SET NAMES \'cp1251\'\");\r\n        } catch(PDOException $e) { \r\n            echo \"Произошла ошибка в работе с базой данных...\";\r\n            exit();\r\n        }\r\n    }\r\n    \r\n    public function prepare($sql, $driver_options=array()) {\r\n        try {\r\n            return parent::prepare($sql, $driver_options);\r\n        } catch(PDOException $e) { \r\n            $this->error($e->getMessage());\r\n        }\r\n    }\r\n    \r\n    public function query($sql) {\r\n        try {\r\n            return parent::query($sql);\r\n        } catch(PDOException $e) { \r\n            $this->error($e->getMessage());\r\n        }\r\n    }\r\n    \r\n    public function exec($sql) {\r\n        try {\r\n            return parent::exec($sql);\r\n        } catch(PDOException $e) { \r\n            $this->error($e->getMessage());\r\n        }\r\n    }\r\n    \r\n    public function error($msg) {\r\n        if($this->error) {\r\n            echo $msg;\r\n        } else {\r\n            echo \"Произошла ошибка в работе с базой данных...\";\r\n        }\r\n        exit();\r\n    }\r\n}[/php]\r\n\r\n[php]class DBStatement extends PDOStatement \r\n{\r\n    protected $DBH;\r\n    \r\n    protected function __construct($DBH) {\r\n        $this->DBH = $DBH;\r\n    }\r\n    \r\n    public function execute($data=array()) {\r\n        try {\r\n            return parent::execute($data);\r\n        } catch(PDOException $e) {\r\n            $this->DBH->error($e->getMessage());\r\n        }\r\n    }\r\n}[/php]\r\n\r\n<p>\r\nКак видите, я реализую свои два класса DB и DBStatement, наследуя классы PDO и PDOStatement. Классы реализуют все необходимые мне для работы над ошибками методы, которые обрабатываются блоком try/catch.\r\n</p>\r\n\r\n[php]$DBH = new DB(\"mysql:host=$host;dbname=$dbname\", $user, $pass);\r\n$DBH->error = true; // Для отладки выводим сообщения об ошибках на экран.\r\n\r\n$STH = $DBH->prepare(\"SELEC * FROM users\");\r\n$STH->execute($data);[/php]\r\n\r\n<p>\r\nКак видите, я совершил опечатку в операторе и могу получить всю необходимую информацию об этой ошибке.\r\n</p>\r\n\r\n[code]SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error in your SQL syntax; \r\ncheck the manual that corresponds to your MySQL server version for the right syntax to use near \r\n\'SELEC * FROM users\' at line 1[/code]\r\n\r\n<h2>Расширение функционала</h2>\r\n\r\n<p>\r\nТакже бывает полезно расширить функционал PDO. Например, часто требуется получить количество записей в таблице.\r\n</p>\r\n<p>\r\nСтандартными методами это можно делать следующим образом:\r\n</p>\r\n\r\n[php]$data = array();\r\n$data[\'user_id\'] = 1;\r\n\r\n$STH = $DBH->prepare(\"SELECT COUNT(*) as count FROM users WHERE user_id=:user_id\");\r\n$STH->execute($data);\r\n        \r\necho $STH->fetch(PDO::FETCH_OBJ)->count;[/php]\r\n\r\n<p>\r\nНе слишком удобно. Поэтому реализуем в нашем классе методом count:\r\n</p>\r\n\r\n[php]class DB extends PDO\r\n{\r\n    // ..................\r\n\r\n    public function count($sql, $data)\r\n    {\r\n        $res = $this->prepare($sql);\r\n        $res->execute($data);\r\n        \r\n        return $res->fetch(PDO::FETCH_OBJ);\r\n    }\r\n\r\n    // ..................\r\n}[/php]\r\n\r\n<p>\r\nПолучаем количество записей:\r\n</p>\r\n\r\n[php]$DBH = new DB(\"mysql:host=$host;dbname=$dbname\", $user, $pass);\r\necho $DBH->count(\"SELECT COUNT(*) as count FROM users WHERE user_id=:user_id\", array(\'user_id\'=>\'1\'))->count;[/php]\r\n\r\n<p>\r\nСвои методы это конечно хорошо, но мне бы ещё хотелось писать все одной строкой. К сожалению, стандартными возможностями я не могу этого сделать:\r\n</p>\r\n\r\n[php]$res = $DBH->prepare(\"SELECT * FROM users WHERE id_user=:id_user\")\r\n           ->execute(array(\'id_user\'=>\'1\'))\r\n           ->fetch(PDO::FETCH_ASSOC);\r\necho $res[\'name\'];\r\n\r\n// или так\r\necho $DBH->prepare(\"SELECT *FROM users WHERE id_user=:id_user\")\r\n         ->execute(array(\'id_user\'=>\'1\'))\r\n         ->fetch(PDO::FETCH_OB)\r\n         ->name;[/php]\r\n\r\n<p>\r\nМетод execute возвращает бесполезное логическое значение об успехе операции, а не объект DBStatement.\r\n</p>\r\n<p>\r\nДопиливаем свой метод execute:\r\n</p>\r\n\r\n[php]public function execute($data=array())\r\n{\r\n    try {\r\n        parent::execute($data);\r\n        return $this; \r\n    } \r\n    catch(PDOException $e) {\r\n        $this->DBH->error($e->getMessage());\r\n    }\r\n}[/php]\r\n\r\n<p>\r\nПроверяем результат:\r\n</p>\r\n\r\n[php]echo $DBH->prepare(\"SELECT COUNT(*) as count FROM users WHERE city=:city\")\r\n         ->execute(array(\'city\'=>\'St. Petersburg\'))\r\n         ->fetch(PDO::FETCH_OBJ)\r\n         ->count;[/php]','2013-04-10 08:59:23'),(5,1,'Введение в LESS','','','','CSS — простой и доступный инструмент. Однако, он имеет свои ограничения, особенно когда встает вопрос о сопровождении готового кода. Когда нужно модифицировать тысячи строк со стилями, разделенных по нескольким файлам, задача становится проблемой. Для преодоления проблемы созданы препроцессоры CSS, которые позволяют комбинировать стили динамически. Существует несколько вариантов (например, LESS и SASS), сегодня мы рассмотрим LESS.','<p>\r\nCSS — простой и доступный инструмент. Однако, он имеет свои ограничения, особенно когда встает вопрос о сопровождении готового кода. Когда нужно модифицировать тысячи строк со стилями, разделенных по нескольким файлам, задача становится проблемой. Для преодоления проблемы созданы препроцессоры CSS, которые позволяют комбинировать стили динамически. Существует несколько вариантов (например, LESS и SASS), сегодня мы рассмотрим LESS.\r\n</p>\r\n\r\n<h2>Использование LESS</h2>\r\n\r\n<p>\r\nИспользовать LESS очень просто. Нужно просто добавить две строки в тег head вашего документа HTML. Первая строка содержит название вашего файла LESS, а вторая строка — подключение библиотеки less.js, которую можно скачать с <a href=\"http://www.lesscss.org/\">официального сайта</a>.\r\n</p>\r\n[html]<link rel=\"stylesheet/less\" type=\"text/css\" href=\"style.less\">\r\n<script src=\"less.js\" type=\"text/javascript\"></script>[/html]\r\n<p>\r\nТеперь LESS файл будет работать также как и обычный CSS.\r\n</p>\r\n<p>\r\nЭтот метод работает только в современных браузерах и подходит для использования на локальном сервере. Для рабочего сайта необходима предварительная компиляция на веб-сервере или различные инструменты от сторонних производителей.\r\n</p>\r\n \r\n<h2>Синтаксис LESS</h2>\r\n\r\n<p>\r\nВ отличие от обычного CSS, LESS больше похож на язык программирования. Он динамический, поэтому логичного ожидать использования в нем переменных, операций и области видимости.\r\n</p>\r\n\r\n<h3>Переменные</h3>\r\n\r\n<p>\r\nПри работе с CSS вы вероятно часто сталкивались с ситуацией, когда повторяющееся значение устанавливалось в нескольких блоках по всей таблице стилей.\r\n</p>\r\n\r\n[css].class1 {\r\n    background-color: #2d5e8b;\r\n}\r\n.class2 {\r\n    background-color: #fff;\r\n    color: #2d5e8b;\r\n}\r\n.class3 {\r\n    border: 1px solid #2d5e8b;\r\n}[/css]\r\n\r\n<p>\r\nВсе прекрасно, пока не придется просеивать 1000 одинаковых участков кода по всей таблице стилей, чтобы поменять значение. При использовании препроцессора LESS такая проблема легко решается с помощью переменных. Переменные позволяют хранить значения, которые можно многократно использовать в таблице стилей.\r\n</p>\r\n\r\n[css]@color-base: #2d5e8b;\r\n\r\n.class1 {\r\n    background-color: @color-base;\r\n}\r\n.class2 {\r\n    background-color: #fff;\r\n    color: @color-base;\r\n}\r\n.class3 {\r\n    border: 1px solid @color-base;\r\n}[/css]\r\n\r\n<p>\r\nВ выше приведенном примере в переменной <span style=\"color: blue;\">@color-base</span> сохраняется значение <span style=\"color: blue;\">#2d5e8b</span>. И когда потребуется изменить цвет, то нужно будет поменять значение только в переменной.\r\n</p>\r\n<p>\r\nВ переменной можно использовать и другие значения:\r\n</p>\r\n\r\n[css]@font-family: Georgia\r\n@dot-border: dotted\r\n@transition: linear\r\n@opacity: 0.5[/css]\r\n\r\n<h3>Вложенные правила (nesting)</h3>\r\n\r\n<p>\r\nПри работе с обычным CSS кодом, достаточно часто встречается следующая структура кода:\r\n</p>\r\n\r\n[css]nav {\r\n    height: 40px;\r\n    width: 100%;\r\n    background: #455868;\r\n    border-bottom: 2px solid #283744;\r\n}\r\nnav li {\r\n    width: 600px;\r\n    height: 40px;\r\n}\r\nnav li a {\r\n    color: #fff;\r\n    line-height: 40px;\r\n    text-shadow: 1px 1px 0px #283744;\r\n}[/css]\r\n\r\n<p>\r\nВ обычном CSS коде мы выбираем наследников, указывая родителя в каждом наборе правил. В LESS можно улучшить выше приведенный набор правил с помощью вложения наследников в родительский элемент:\r\n</p>\r\n\r\n[css]nav {\r\n    height: 40px;\r\n    width: 100%;\r\n    background: #455868;\r\n    border-bottom: 2px solid #283744;\r\n    li {\r\n        width: 600px;\r\n        height: 40px;\r\n        a {\r\n            color: #fff;\r\n            line-height: 40px;\r\n            text-shadow: 1px 1px 0px #283744;\r\n        }\r\n    }\r\n}[/css]\r\n\r\n<p>\r\nТакже можно использовать псевдо-классы, например <span style=\"color: blue;\">:hover</span>, с помощью символа амперсенда <span style=\"color: blue;\">&amp;</span>. Допустим, мы хотим добавить <span style=\"color: blue;\">:hover</span> к тегу ссылки:\r\n</p>\r\n\r\n[css]a {\r\n    color: #fff;\r\n    line-height: 40px;\r\n    text-shadow: 1px 1px 0px #283744;\r\n    &:hover {\r\n        background-color: #000;\r\n        color: #fff;\r\n    }\r\n}[/css]\r\n\r\n<h3>Примеси (mixins)</h3>\r\n\r\n<p>\r\nВ LESS можно использовать примеси для хранения набора правил и применения их в других наборах. Например:\r\n</p>\r\n\r\n[css].gradient {\r\n    background: #eaeaea;\r\n    background: linear-gradient(top, #eaeaea, #cccccc);\r\n}[/css]\r\n\r\n<p>\r\nВ выше приведенном примере мы устанавливаем цвет градиента в классе <span style=\"color: blue;\">.gradient</span>. Затем, когда нужно добавить градиент, нужно просто вставить <span style=\"color: blue;\">.gradient</span> следующим образом:\r\n</p>\r\n\r\n[css].box {\r\n    .gradient;\r\n    border: 1px solid #555;\r\n    border-radius: 3px;\r\n}[/css]\r\n\r\n<p>\r\nКласс <span style=\"color: blue;\">.box</span> наследует все объявления из <span style=\"color: blue;\">.gradient</span>. Поэтому выше приведенное выражение LESS эквивалентно следующему обычному коду CSS:\r\n</p>\r\n\r\n[css].box {\r\n    background: #eaeaea;\r\n    background: linear-gradient(top, #eaeaea, #cccccc);\r\n    border: 1px solid #555;\r\n    border-radius: 3px;\r\n}[/css]\r\n\r\n<h3>Примеси с параметрами</h3>\r\n\r\n<p>\r\nПримеси с параметрами почти такие же, как и обычные, но сродни функциям они могут принимать параметры для использования внутри примеси:\r\n</p>\r\n\r\n[css].border-radius(@radius) {\r\n    -webkit-border-radius: @radius;\r\n    -moz-border-radius: @radius;\r\n    border-radius: @radius;\r\n}\r\n\r\n.sidebar {\r\n    .border-radius(4px);\r\n}[/css]\r\n\r\n<p>\r\nРезультат выглядит следующим образом:\r\n</p>\r\n\r\n[css].sidebar {\r\n    -webkit-border-radius: 4px;\r\n    -moz-border-radius: 4px;\r\n    border-radius: 4px;\r\n}[/css]\r\n\r\n<p>\r\nМы также можем выставить значения по умолчанию для параметров:\r\n</p>\r\n\r\n[css].border-radius(@radius: 6px) {\r\n    -webkit-border-radius: @radius;\r\n    -moz-border-radius: @radius;\r\n    border-radius: @radius;\r\n}\r\n.sidebar1 {\r\n    .border-radius;\r\n}\r\n.sidebar2 {\r\n    .border-radius(12px);\r\n}[/css]\r\n\r\n<p>\r\nЧто в результате дает:\r\n</p>\r\n\r\n\r\n[css].sidebar1 {\r\n  -webkit-border-radius: 6px;\r\n  -moz-border-radius: 6px;\r\n  border-radius: 6px;\r\n}\r\n.sidebar2 {\r\n  -webkit-border-radius: 12px;\r\n  -moz-border-radius: 12px;\r\n  border-radius: 12px;\r\n}[/css]\r\n\r\n<p>\r\nПри работе с CSS3 можно использовать библиотеку <a href=\"http://lesselements.com/\">LESS ELements</a>, чтобы облегчить свою работу. LESS Elements является коллекцией общих примешиваний CSS3, которые часто используются в стилях, например, <span style=\"color: blue;\">border-radius</span>, <span style=\"color: blue;\">gradients</span>, <span style=\"color: blue;\">drop-shadow</span> и так далее.\r\n</p>\r\n<p>\r\nЧтобы использовать LESS нужно просто добавить правило <span style=\"color: blue;\">@import</span> файл LESS. Нужно только загрузить библиотеку и поместить ее в рабочую директорию.\r\n</p>\r\n\r\n[css]@import \"elements.less\";[/css]\r\n\r\n<p>\r\nТеперь можно использовать все классы из <span style=\"color: blue;\">elements.less</span>. Например, чтобы добавить скругление углов рамки с радиусом <span style=\"color: blue;\">3px</span> к элементу <span style=\"color: blue;\">div</span>, нужно написать:\r\n</p>\r\n\r\n[css]div {\r\n    .rounded(3px);\r\n}[/css]\r\n\r\n<h3>Операции</h3>\r\n\r\n<p>\r\nТакже можно использовать операции в LESS. Доступны сложение, вычитание, умножение и деление.\r\n</p>\r\n<p>\r\nДопустим, что <span style=\"color: blue;\">элемент B</span> в два раза выше <span style=\"color: blue;\">элемента A</span>:\r\n</p>\r\n\r\n[css]@height: 100px\r\n\r\n.element-A {\r\n    height: @height;   \r\n}\r\n.element-B {\r\n    height: @height * 2;\r\n}[/css]\r\n\r\n<p>\r\nСначала мы определяем переменную <span style=\"color: blue;\">@height</span> и назначаем ее для указания высоты <span style=\"color: blue;\">элемента А</span>. В <span style=\"color: blue;\">элементе В</span> мы просто умножаем значение переменной на <span style=\"color: blue;\">2</span>. Теперь, когда мы изменяем значение переменной <span style=\"color: blue;\">@height</span>, <span style=\"color: blue;\">элемент В</span> всегда будет в два раза выше.\r\n</p>\r\n\r\n<h3>Операции с цветом</h3>\r\n\r\n<p>\r\nОперации, которые мы продемонстрировали выше, могут быть использованы для управления цветом. Цвета можно создавать и управлять ими посредством математики:\r\n</p>\r\n\r\n[css]@color: #888888 - #333333;\r\n\r\nh2 {\r\n  color: @color;\r\n}[/css]\r\n\r\n<p>\r\nИ скомпилированный код выглядит следующим образом:\r\n</p>\r\n\r\n[css]h2 {\r\n  color: #555555;\r\n}[/css]\r\n\r\n<p>\r\nЭто еще не все, что LESS может делать с цветами. Все становится намного интереснее, когда речь заходит о встроенных функциях для работы с цветом:\r\n</p>\r\n\r\n[css]lighten(@color, 10%);     // возвращает цвет, который на 10% светлее, чем @color\r\ndarken(@color, 10%);      // возвращает цвет, который на 10% темнее, чем @color\r\n\r\nsaturate(@color, 10%);    // возвращает цвет, который на 10% более насыщенный, чем @color\r\ndesaturate(@color, 10%);  // возвращает цвет, который на 10% менее насыщенный, чем @color\r\n\r\nfadein(@color, 10%);      // возвращает цвет, который на 10% менее прозрачен, чем @color\r\nfadeout(@color, 10%);     // возвращает цвет, который на 10% более прозрачен, чем @color\r\nfade(@color, 50%);        // возвращает @color с 50%-ной прозрачностью\r\n\r\nspin(@color, 10);         // возвращает цвет с оттенком в 10 раз большим, чем @color\r\nspin(@color, -10);        // возвращает цвет с оттенком в 10 раз меньшим, чем @color\r\n\r\nmix(@color1, @color2);    // возвращает микс цветов @color1 и @color2[/css]\r\n\r\n\r\n<h3>Математические функции</h3>\r\n\r\n<p>\r\nС помощью этих функций вы можете использовать числа в своем коде. Среди этих функций можно выделить <span style=\"color: blue;\">round()</span>, <span style=\"color: blue;\">ceil()</span>, <span style=\"color: blue;\">floor()</span> и <span style=\"color: blue;\">percentage()</span>. Передавая числа в эти функции, вы сможете получить округленные числа, числа, округленные по большему и по меньшему значению, а также числа в процентном выражении.\r\n</p>\r\n \r\n<h3>Область видимости (scope)</h3>\r\n\r\n<p>\r\nLESS использует концепцию области видимости. Сначала используются переменные из локального контекста, а если их нет, то происходит поиск в более широкой области видимости.\r\n</p>\r\n\r\n[css]header {\r\n    @color: black;\r\n    background-color: @color;\r\n    nav {\r\n        @color: blue;\r\n        background-color: @color;\r\n        a {\r\n            color: @color;\r\n        }\r\n    }  \r\n}[/css]\r\n\r\n<p>\r\nВ приведенном примере <span style=\"color: blue;\">header</span> имеет переменную для цвета со значением  <span style=\"color: blue;\">black</span>, но фон элемента <span style=\"color: blue;\">nav</span> будет иметь цвет <span style=\"color: blue;\">blue</span>, так как переменная <span style=\"color: blue;\">@color</span> находится в локальном контексте.\r\n</p>','2016-04-24 11:09:20'),(6,14,'Стандартные потоки вывода (stdout) Windows','https://www.itroad.ru/standartnye-potoki-vyvoda-stdout-windows-ili-kak-perenapravit-vyvod-konsoli-cmd-v-fajl','','','С помощью переназначения устройств ввода/вывода одна программа может направить свой вывод на вход другой или перехватить вывод другой программы, используя его в качестве своих входных данных. Таким образом, имеется возможность передавать информацию от процесса к процессу при минимальных программных издержках.','<p>\r\nС помощью переназначения устройств ввода/вывода одна программа может направить свой вывод на вход другой или перехватить вывод другой программы, используя его в качестве своих входных данных. Таким образом, имеется возможность передавать информацию от процесса к процессу при минимальных программных издержках.\r\n</p>\r\n<p>\r\nЕсть 3 файловых дескриптора: <code>stdin</code> — стандартный ввод, <code>stdout</code> — стандартный вывод и <code>stderr</code> — стандартный поток ошибок.  В скриптах 1 означает <code>stdout</code>, а 2 — <code>stderr</code>.\r\n</p>\r\n<p>\r\nПрактически это означает, что для программ, которые используют стандартные входные и выходные устройства, операционная система позволяет:\r\n</p>\r\n<ul>\r\n  <li>перенаправлять <code>stdout</code> в файл\r\n  <li>перенаправлять <code>stderr</code> в файл\r\n  <li>перенаправлять <code>stdout</code> в <code>stderr</code>\r\n  <li>перенаправлять <code>stderr</code> в <code>stdout</code>\r\n  <li>перенаправлять <code>stderr</code> и <code>stdout</code> в файл\r\n  <li>перенаправлять <code>stderr</code> и <code>stdout</code> в <code>stdout</code>\r\n  <li>перенаправлять <code>stderr</code> и <code>stdout</code> в <code>stderr</code>\r\n  <li>перенаправление <code>stderr</code> и <code>stdout</code> по конвейеру\r\n</ul>\r\n<p>\r\nВсе вышесказанное является привычной обыденностью для любого пользователя любой nix системы, но в среде Windows, данные возможности применяются крайне редко, хотя на самом деле они там есть и всё практически идентично.\r\n</p>\r\n</p>\r\nА теперь примеры:\r\n</p>\r\n<p>\r\n1. Перенаправление стандартного потока программы в файл с заменой содержимого файла\r\n</p>\r\n[code]ping ya.ru -t > log.txt[/code]\r\n[code]ping ya.ru -t 1> log.txt[/code]\r\n<p>\r\nпри этом на экран ничего кроме ошибок не выводится, а все записывается в лог. Если остановить пинг, и запустить заново, предыдущий лог полностью затирается новым.\r\n</p>\r\n<p>\r\n2. Перенаправление стандартного потока программы в файл с до записью содержимого лога\r\n</p>\r\n[code]ping ya.ru -t >> log.txt[/code]\r\n<p>\r\nТоже самое, но при прерывание пинга и начале нового, старое содержимое лога не затрется, а новое дописывается в конец\r\n</p>\r\n[code]ping ya.ru -t 1>> log.txt[/code]\r\n<p>\r\n3. Перенаправление потока ошибок программы в фаил с заменой содержимого\r\n</p>\r\n[code]ping ya.ru -t 2> log.txt[/code]\r\n<p>\r\nпри этом, стандартный поток программы пойдет на экран, а ошибки будут записаны в лог, с заменой содержимого.\r\n</p>\r\n<p>\r\n4. То же самое, но с до записью содержимого лога.\r\n</p>\r\n[code]ping ya.ru -t 2>> log.txt[/code]\r\n<p>\r\n5. Следующая конструкция позволяет перенаправить информацию между потоками (между стандартным потоком и потоком ошибок, или наоборот).\r\n</p>\r\n[code]ping ya.ru > log.txt 2>&1[/code]\r\n<p>\r\nили с до записью лога\r\n</p>\r\n[code]ping ya.ru >> log.txt 2>&1[/code]\r\n<p>\r\nВ данном примере стандартный поток ошибок пересылается в стандартный поток (конструкция <code>2&gt;&amp;1</code>) а потом стандартный поток (уже с завернутым в него потоком ошибок) посылается в лог.\r\n</p>\r\n<p>\r\n6. В этом примере все наоборот, стандартный поток, пересылается в поток ошибок и уже поток ошибок перенаправляется в лог:\r\n</p>\r\n[code]ping ya.ru > log.txt 1>&2[/code]\r\n<p>\r\nили с до записью лога\r\n</p>\r\n[code]ping ya.ru >> log.txt 1>&2[/code]\r\n<p>\r\n7. По аналогии с Linux системами в Windows можно перенаправить весь или часть вывода программы в виртуальное устройство, а проще говоря слить в мусор.\r\n</p>\r\n<p>\r\nТаким устройством является nul, и делать перенаправление в него можно используя все выше представленные комбинации. Например\r\n</p>\r\n[code]ping ya.ru > nul[/code]\r\n<p>\r\nВ Linux есть еще одна конструкция перенаправления, а именно <code>&amp;&gt;/var/log/log.txt</code>, она перенаправляет ВСЕ без исключения потоки программы в указанное место, по сути являясь более коротким и более грамотным аналогом конструкции <code>&gt;log.txt 1&gt;&amp;2</code>. Но к сожалению <strong>в Windows это не работает</strong>.\r\n</p>\r\n<p>\r\nА теперь давайте немного разберемся в прикладных различиях между работой данных методов. В нормальных приложениях все разбито на потоки, но у большинства виндовых утилит это не так, пинг например, пишет все в стандартный поток (на экран), поэтому для него конструкция вида <code>2&gt;</code> не имеет смысла. Но есть еще не виндовые утилиты, для примера возьмем <code>curl</code> (мой любимый).\r\n</p>\r\n<p>\r\nОн разделяет 3 вида вывода, вывод полезной информации, вывод служебной информации и вывод ошибок. Если перенаправить вывод так: <code>&gt;</code> или <code>&gt;&gt;</code> или <code>1&gt;</code> или <code>1&gt;&gt;</code> то по завершению запроса отобразится служебная информация о запросе, а вся полезная информация уйдет в лог (это именно то, что уходит по конвейеру <code>|</code>).\r\n</p>\r\n<p>\r\n<img src=\"/files/article/6/1.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nА теперь сделаем заведомо ошибочный запрос, изменив протокол <code>http</code> на <code>http3</code> не меняя вывода в лог. В итоге мы получим ошибку на экране.\r\n</p>\r\n<p>\r\n<img src=\"/files/article/6/2.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nИзменим вывод в лог на один из этих: <code>2&gt;</code> или <code>2&gt;&gt;</code> ошибка ранее выводившаяся на экран, попала в лог, и на экране ничего не будет (служебной информации нет, так как запрос произведен не был).\r\n</p>\r\n<p>\r\nВернемся к первому скриншоту на котором мы видим вывод служебной информации, по сути, не будь у курла ключа <code>-s</code> который подавляет вывод служебной информации, нам пришлось бы пользоваться конструкциями из пятого и шестого примеров.\r\n</p>\r\n<p>\r\nИ вывод был бы таким:\r\n</p>\r\n<p>\r\n<img src=\"/files/article/6/3.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nТо есть, полная тишина, вся информация, как то полезный вывод, ошибки программы, служебная информация, все ушло в лог.\r\n</p>\r\n<p>\r\nНа данном скриншоте, конструкцией <code>2&gt;&amp;1</code> мы завернули поток ошибок в стандартный поток, а конструкцией <code>&gt; 5555.txt</code> стандартный поток перенаправили в лог. Если вместо <code>&gt; 5555.txt</code> использовать <code>2&gt; 5555.txt</code>, то есть перенаправить в лог стандартный поток ошибок, мы увидим весь вывод программы (и ошибки, и служебную информацию и полезный вывод) на экране. Конструкция <code>2&gt;&amp;1</code> имеет больший приоритет, а по ней уже все завернуто в стандартный поток.\r\n</p>\r\n<p>\r\nДелать пример с заворотом стандартного потока в поток ошибок (<code>1&gt;&amp;2</code>) я не буду, ибо там все точно так же.\r\n</p>\r\n<p>\r\nНадеюсь логика понятна…\r\n</p>\r\nТак же с помощью символа <code>&lt;</code> можно прочитать входные данные для заданной команды не с клавиатуры, а из определенного (заранее подготовленного) файла. Для примера возьмем реальный и вполне полезный случай. Например, у нас есть файл log.txt и нам надо посчитать сколько в нем строк. Сделать это можно с помощью такой конструкции\r\n</p>\r\n[code]find /c /v \"\" log.txt[/code]\r\n<p>\r\nно вывод будет не совсем приемлемым.\r\n</p>\r\n<p>\r\n<p>\r\n<img src=\"/files/article/6/4.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nА вот если сделать так:\r\n</p>\r\n[code]find /c /v \"\" < log.txt[/code]\r\n<p>\r\nто все будет именно так как надо.\r\n</p>\r\n<p>\r\n<img src=\"/files/article/6/5.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nЭто происходит потому что в первом случае, файл обрабатывается как файл, а во втором, как поток (аналог линуксового конвейера <code>cat log.txt |</code>) в общем, <code>&lt;</code> это виндовый аналог <code>cat</code> со всеми вытекающими.\r\n</p>','2018-02-07 09:22:45'),(7,1,'Введение в Git','','','','Git имеет три основных состояния, в которых могут находиться ваши файлы: зафиксированном (committed), изменённом (modified) и подготовленном (staged). «Зафиксированный» значит, что файл уже сохранён в вашей локальной базе. К изменённым относятся файлы, которые поменялись, но ещё не были зафиксированы. Подготовленные файлы — это изменённые файлы, отмеченные для включения в следующий коммит.','<h2>Три состояния</h2>\r\n<p>\r\nGit имеет три основных состояния, в которых могут находиться ваши файлы: зафиксированном (committed), изменённом (modified) и подготовленном (staged). «Зафиксированный» значит, что файл уже сохранён в вашей локальной базе. К изменённым относятся файлы, которые поменялись, но ещё не были зафиксированы. Подготовленные файлы — это изменённые файлы, отмеченные для включения в следующий коммит.\r\n</p>\r\n<p>\r\nМы подошли к трём основным секциям проекта Git: Git-директория (Git directory), рабочая директория (working directory) и область подготовленных файлов (staging area).\r\n</p>\r\n<p>\r\nGit-директория — это то место, где Git хранит метаданные и базу объектов вашего проекта. Это самая важная часть Git, и это та часть, которая копируется при клонировании репозитория с другого компьютера.\r\n</p>\r\n<p>\r\nРабочая директория является снимком версии проекта. Файлы распаковываются из сжатой базы данных в Git-директории и располагаются на диске, для того чтобы их можно было изменять и использовать.\r\n</p>\r\n<p>\r\nОбласть подготовленных файлов — это файл, располагающийся в вашей Git-директории, в нём содержится информация о том, какие изменения попадут в следующий коммит. Эту область ещё называют «индекс».\r\n</p>\r\n<p>\r\nБазовый подход в работе с Git выглядит так:\r\n</p>\r\n<ul>\r\n  <li>Вы изменяете файлы в вашей рабочей директории.</li>\r\n  <li>Вы добавляете файлы в индекс, добавляя тем самым их снимки в область подготовленных файлов.</li>\r\n  <li>Когда вы делаете коммит, используются файлы из индекса как есть, и этот снимок сохраняется в вашу Git директорию.</li>\r\n</ul>\r\n<p>\r\nЕсли определённая версия файла есть в Git-директории, эта версия закоммичена. Если файл изменён и добавлен в индекс, значит, он будет добавлен в следующий коммит. И если файл был изменён с момента последнего распаковывания из репозитория, но не был добавлен в индекс, он считается изменённым.\r\n</p>\r\n\r\n<h2>Первоначальная настройка Git</h2>\r\n<p>\r\nТеперь, когда Git установлен в вашей системе, самое время настроить среду для работы с Git’ом под себя. Это нужно сделать только один раз — при обновлении версии Git’а настройки сохранятся. Но, при необходимости, вы можете поменять их в любой момент, выполнив те же команды снова.\r\n</p>\r\n<p>\r\nВ состав Git’а входит утилита <code>git config</code>, которая позволяет просматривать и настраивать параметры, контролирующие все аспекты работы Git’а, а также его внешний вид. Эти параметры могут быть сохранены в трёх местах:\r\n</p>\r\n<ul>\r\n  <li>Файл <code>/etc/gitconfig</code> содержит значения, общие для всех пользователей системы и для всех их репозиториев. Если при запуске <code>git config</code> указать параметр <code>--system</code>, то параметры будут читаться и сохраняться именно в этот файл.</li>\r\n  <li>Файл <code>~/.gitconfig</code> или <code>~/.config/git/config</code> хранит настройки конкретного пользователя. Этот файл используется при указании параметра <code>--global</code>.</li>\r\n  <li>Файл config в каталоге Git’а (т.е. <code>.git/config</code>) в том репозитории, который вы используете в данный момент, хранит настройки конкретного репозитория.</li>\r\n</ul>\r\n<p>\r\nНастройки на каждом следующем уровне подменяют настройки из предыдущих уровней, то есть значения в <code>.git/config</code> перекрывают соответствующие значения в <code>/etc/gitconfig</code>.\r\n</p>\r\n<p>\r\nВ системах семейства Windows Git ищет файл <code>.gitconfig</code> в каталоге <code>$HOME</code> (<code>C:\\Users\\$USER</code> для большинства пользователей).\r\n</p>\r\n\r\n<h3>Имя пользователя</h3>\r\n<p>\r\nПервое, что вам следует сделать после установки Git’а, — указать ваше имя и адрес электронной почты. Это важно, потому что каждый коммит в Git’е содержит эту информацию, и она включена в коммиты, передаваемые вами, и не может быть далее изменена:\r\n</p>\r\n[cli]\r\n$ git config --global user.name \"John Doe\"\r\n$ git config --global user.email johndoe@example.com\r\n[/cli]\r\n<p>\r\nОпять же, если указана опция <code>--global</code>, то эти настройки достаточно сделать только один раз, поскольку в этом случае Git будет использовать эти данные для всего, что вы делаете в этой системе. Если для каких-то отдельных проектов вы хотите указать другое имя или электронную почту, можно выполнить эту же команду без параметра <code>--global</code> в каталоге с нужным проектом.\r\n</p>\r\n\r\n<h3>Проверка настроек</h3>\r\n<p>\r\nЕсли вы хотите проверить используемую конфигурацию, можете использовать команду <code>git config --list</code>, чтобы показать все настройки, которые Git найдёт:\r\n</p>\r\n[cli]\r\n$ git config --list\r\nuser.name=John Doe\r\nuser.email=johndoe@example.com\r\ncolor.status=auto\r\ncolor.branch=auto\r\ncolor.interactive=auto\r\ncolor.diff=auto\r\n...\r\n[/cli]\r\n<p>\r\nНекоторые ключи (названия) настроек могут появиться несколько раз, потому что Git читает один и тот же ключ из разных файлов (например, из <code>/etc/gitconfig</code> и <code>~/.gitconfig</code>). В этом случае Git использует последнее значение для каждого ключа.\r\n</p>\r\n<p>\r\nТакже вы можете проверить значение конкретного ключа, выполнив <code>git config &lt;key&gt;</code>:\r\n</p>\r\n[cli]\r\n$ git config user.name\r\nJohn Doe\r\n[/cli]\r\n\r\n<h3>Как получить помощь?</h3>\r\n<p>\r\nЕсли вам нужна помощь при использовании Git, есть три способа открыть страницу руководства по любой команде Git:\r\n</p>\r\n[cli]\r\n$ git help <глагол>\r\n$ git <глагол> --help\r\n$ man git-<глагол>\r\n[/cli]\r\n<p>\r\nНапример, так можно открыть руководство по команде <code>config</code>\r\n</p>\r\n[cli]\r\n$ git help config\r\n[/cli]\r\n\r\n<h2>Создание Git-репозитория</h2>\r\n<p>\r\nДля создания Git-репозитория вы можете использовать два основных подхода. Во-первых, cоздание репозитория в существующей директории. Во-вторых, клонирование существующего репозитория с другого сервера.\r\n</p>\r\n\r\n<h3>Создание репозитория в существующей директории</h3>\r\n<p>\r\nЕсли вы собираетесь начать использовать Git для существующего проекта, то вам необходимо перейти в директорию проекта и в командной строке ввести\r\n</p>\r\n[cli]\r\n$ git init\r\n[/cli]\r\n<p>\r\nЭта команда создаёт в текущей директории новую поддиректорию с именем .git, содержащую все необходимые файлы репозитория — основу Git-репозитория. На этом этапе ваш проект ещё не находится под версионным контролем.\r\n</p>\r\n<p>\r\nЕсли вы хотите добавить под версионный контроль существующие файлы (в отличие от пустого каталога), вам стоит добавить их в индекс и осуществить первый коммит изменений. Добиться этого вы сможете запустив команду <code>git add</code>, а затем выполнив <code>git commit</code>:\r\n</p>\r\n[cli]\r\n$ git add --all\r\n$ git commit -m \'initial project version\'\r\n[/cli]\r\n\r\n<h3>Клонирование существующего репозитория</h3>\r\n<p>\r\nДля получения копии существующего Git-репозитория, например, проекта, в который вы хотите внести свой вклад, необходимо использовать команду <code>git clone</code>.\r\n<p>\r\n[cli]\r\n$ git clone https://github.com/libgit2/libgit2\r\n[/cli]\r\n<p>\r\nЭта команда создаёт директорию <code>libgit2</code>, инициализирует в ней поддиректорию <code>.git</code>, скачивает все данные для этого репозитория и создаёт рабочую копию последней версии.\r\n</p>\r\n<p>\r\nДля того, чтобы клонировать репозиторий в директорию с именем, отличающимся от <code>libgit2</code>, необходимо указать желаемое имя, как параметр командной строки:\r\n</p>\r\n[cli]\r\n$ git clone https://github.com/libgit2/libgit2 mylibgit\r\n[/cli]\r\n<p>\r\nЭта команда делает всё то же самое, что и предыдущая, только результирующий каталог будет назван <code>mylibgit</code>.\r\n</p>\r\n\r\n<h2>Запись изменений в репозиторий</h2>\r\n<p>\r\nКаждый файл в вашем рабочем каталоге может находиться в одном из двух состояний: под версионным контролем (отслеживаемые) и нет (неотслеживаемые).\r\n</p>\r\n<p>\r\nОтслеживаемые файлы — это те файлы, которые были в последнем слепке состояния проекта; они могут быть неизменёнными, изменёнными или подготовленными к коммиту (staged).\r\n</p>\r\n<p>\r\nНеотслеживаемые файлы — это всё остальное, любые файлы в вашем рабочем каталоге, которые не входили в ваш последний слепок состояния и не подготовлены к коммиту.\r\n</p>\r\n<p>\r\nКак только вы отредактируете файлы, Git будет рассматривать их как изменённые, т.к. вы изменили их с момента последнего коммита. Вы индексируете (stage) эти изменения и затем фиксируете все индексированные изменения (commit).\r\n</p>\r\n\r\n<h3>Определение состояния файлов</h3>\r\n<p>\r\nОсновной инструмент, используемый для определения, какие файлы в каком состоянии находятся — это команда <code>git status</code>. Если вы выполните эту команду сразу после клонирования, вы увидите что-то вроде этого:\r\n</p>\r\n[cli]\r\n$ git status\r\nOn branch master\r\nnothing to commit, working directory clean\r\n[/cli]\r\n<p>\r\nЭто означает, что у вас чистый рабочий каталог, другими словами – в нем нет отслеживаемых измененных файлов. Git также не обнаружил неотслеживаемых файлов, в противном случае они бы были перечислены здесь. Наконец, команда сообщает вам на какой ветке вы находитесь и сообщает вам, что она не расходится с веткой на сервере.\r\n</p>\r\n<p>\r\nПредположим, вы добавили в свой проект новый файл, простой файл <code>README</code>. Eсли этого файла раньше не было, и вы выполните <code>git status</code>, вы увидите свой неотслеживаемый файл вот так:\r\n</p>\r\n[cli]\r\n$ echo \'My Project\' > README\r\n$ git status\r\nOn branch master\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n\r\n    README\r\n\r\nnothing added to commit but untracked files present (use \"git add\" to track)\r\n[/cli]\r\n<p>\r\nПонять, что новый файл README неотслеживаемый можно по тому, что он находится в секции «Untracked files» в выводе команды <code>status</code>. Статус «Untracked files», по сути, означает, что Git видит файл, отсутствующий в предыдущем снимке состояния (commit); Git не станет добавлять его в ваши коммиты, пока вы его явно об этом не попросите.\r\n</p>\r\n\r\n<h3>Отслеживание новых файлов</h3>\r\n<p>\r\nДля того чтобы начать отслеживать (добавить под версионный контроль) новый файл, используется команда <code>git add</code>. Чтобы начать отслеживание файла <code>README</code>, вы можете выполнить следующее:\r\n</p>\r\n[cli]\r\n$ git add README\r\n[/cli]\r\n<p>\r\nЕсли вы снова выполните команду <code>status</code>, то увидите, что файл README теперь отслеживаемый и индексированный:\r\n</p>\r\n[cli]\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    new file:   README\r\n[/cli]\r\n<p>\r\nВы можете видеть, что файл проиндексирован по тому, что он находится в секции «Changes to be committed». Если вы выполните коммит в этот момент, то версия файла, существовавшая на момент выполнения вами команды <code>git add</code>, будет добавлена в историю снимков состояния.\r\n</p>\r\n<p>\r\nКоманда <code>git add</code> принимает параметром путь к файлу или каталогу; если это каталог, команда рекурсивно добавляет (индексирует) все файлы в данном каталоге.\r\n</p>\r\n\r\n<h3>Индексация изменённых файлов</h3>\r\n<p>\r\nДавайте модифицируем файл, уже находящийся под версионным контролем. Если вы измените отслеживаемый файл <code>CONTRIBUTING.md</code> и после этого снова выполните команду <code>git status</code>, то результат будет примерно следующим:\r\n</p>\r\n[cli]\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    new file:   README\r\n\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n<p>\r\nФайл <code>CONTRIBUTING.md</code> находится в секции «Changes not staged for commit» — это означает, что отслеживаемый файл был изменён в рабочем каталоге, но пока не проиндексирован. Выполним <code>git add</code>, чтобы проиндексировать <code>CONTRIBUTING.md</code>, а затем снова выполним <code>git status</code>:\r\n</p>\r\n[cli]\r\n$ git add CONTRIBUTING.md\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    new file:   README\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n<p>\r\nТеперь оба файла проиндексированы и войдут в следующий коммит. В этот момент вы, предположим, вспомнили одно небольшое изменение, которое вы хотите сделать в <code>CONTRIBUTING.md</code> до коммита. Вы открываете файл, вносите и сохраняете необходимые изменения и вроде бы готовы к коммиту. Но давайте-ка ещё раз выполним <code>git status</code>:\r\n</p>\r\n[cli]\r\n$ vim CONTRIBUTING.md\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    new file:   README\r\n    modified:   CONTRIBUTING.md\r\n\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n<p>\r\nЧто за чёрт? Теперь <code>CONTRIBUTING.md</code> отображается как проиндексированный и непроиндексированный одновременно. Как такое возможно? Такая ситуация наглядно демонстрирует, что Git индексирует файл в точности в том состоянии, в котором он находился, когда вы выполнили команду <code>git add</code>.\r\n</p>\r\n<p>\r\nЕсли вы выполните коммит сейчас, то файл <code>CONTRIBUTING.md</code> попадёт в коммит в том состоянии, в котором он находился, когда вы последний раз выполняли команду <code>git add</code>, а не в том, в котором он находится в вашем рабочем каталоге в момент выполнения <code>git commit</code>. Если вы изменили файл после выполнения <code>git add</code>, вам придётся снова выполнить <code>git add</code>, чтобы проиндексировать последнюю версию файла:\r\n</p>\r\n[cli]\r\n$ git add CONTRIBUTING.md\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    new file:   README\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n\r\n<h3>Сокращенный вывод статуса</h3>\r\n<p>\r\nВывод команды <code>git status</code> довольно всеобъемлющий и многолословный. Git также имеет флаг вывода сокращенного статуса, так что вы можете увидеть изменения в более компактном виде. Если вы выполните <code>git status -s</code> или <code>git status --short</code> вы получите гораздо более упрощенный вывод.\r\n</p>\r\n[cli]\r\n$ git status -s\r\n_M README\r\nMM Rakefile\r\nA_ lib/git.rb\r\nM_ lib/simplegit.rb\r\n?? LICENSE.txt\r\n[/cli]\r\n<p>\r\nНовые, неотслеживаемые файлы помечены <code>??</code> слева от них, файлы добавленные в отслеживаемые помечены <code>A</code>, отредактированные файлы помечены <code>M</code> и так далее. В выводе содержится два столбца (с именем файла — три). В первом указывается статус файла, а во втором модифицирован ли он после этого.\r\n</p>\r\n<ul>\r\n  <li><code><span style=\"background: #eeeeee;\">&nbsp;</span>M README</code> – файл модифицирован, но не проиндексирован</li>\r\n  <li><code>MM Rakefile</code> – файл модифицирован, проиндексирован и еще раз модифицирован</li>\r\n  <li><code>A<span style=\"background: #eeeeee;\">&nbsp;</span> lib/git.rb</code> – новый файл в проекте</li>\r\n  <li><code>M<span style=\"background: #eeeeee;\">&nbsp;</span> lib/simplegit.rb</code> – модифицирован, проиндексирован</li>\r\n  <li><code>?? LICENSE.txt</code> – новый неотслеживаемый файл</li>\r\n</ul>\r\n\r\n<h3>Игнорирование файлов</h3>\r\n<p>\r\nЗачастую, у вас имеется группа файлов, которые вы не только не хотите автоматически добавлять в репозиторий, но и видеть в списках неотслеживаемых. К таким файлам обычно относятся автоматически генерируемые файлы (различные логи, результаты сборки программ и т.п.). В таком случае, вы можете создать файл <code>.gitignore</code>. с перечислением шаблонов соответствующих таким файлам. Вот пример файла <code>.gitignore</code>:\r\n</p>\r\n[cli]\r\n$ cat .gitignore\r\n*.[oa]\r\n*~\r\n[/cli]\r\n<p>\r\nПервая строка предписывает Git игнорировать любые файлы заканчивающиеся на «.o» или «.a» — объектные и архивные файлы, которые могут появиться во время сборки кода. Вторая строка предписывает игнорировать все файлы заканчивающиеся на тильду (~), которая используется во многих текстовых редакторах, например Emacs, для обозначения временных файлов.\r\n</p>\r\n<p>\r\nК шаблонам в файле <code>.gitignore</code> применяются следующие правила:\r\n</p>\r\n<ul>\r\n   <li>Пустые строки, а также строки, начинающиеся с #, игнорируются.</li>\r\n   <li>Можно использовать стандартные glob шаблоны.</li>\r\n   <li>Можно начать шаблон символом слэша (/) чтобы избежать рекурсии.</li>\r\n   <li>Можно заканчивать шаблон символом слэша (/) для указания каталога.</li>\r\n   <li>Можно инвертировать шаблон, использовав восклицательный знак (!) в качестве первого символа.</li>\r\n</ul>\r\n<p>\r\nGlob-шаблоны представляют собой упрощённые регулярные выражения, используемые командными интерпретаторами. Символ (*) соответствует 0 или более символам; последовательность [abc] — любому символу из указанных в скобках (в данном примере a, b или c); знак вопроса (?) соответствует одному символу; и квадратные скобки, в которые заключены символы, разделённые дефисом ([0-9]), соответствуют любому символу из интервала (в данном случае от 0 до 9). Вы также можете использовать две звёздочки, чтобы указать на вложенные директории: a/**/z соответствует a/z, a/b/z, a/b/c/z, и так далее.\r\n</p>\r\n<p>\r\nВот ещё один пример файла .gitignore:\r\n</p>\r\n[cli]\r\n# игнорировать файлы, которые заканчиваются на «.a»\r\n*.a\r\n# но не игнорировать файл lib.a\r\n!lib.a\r\n# игнорировать файл TODO в корневой категории, но не игнорировать subdir/TODO\r\n/TODO\r\n# игнорировать все файлы в директории build/\r\nbuild/\r\n# игнорировать doc/notes.txt, но не игнорировать doc/server/arch.txt\r\ndoc/*.txt\r\n# игнорировать все файлы .txt в директории doc/ и глубже\r\ndoc/**/*.txt\r\n[/cli]\r\n\r\n<h3>Коммит изменений</h3>\r\n<p>\r\nТеперь, когда ваш индекс находится в таком состоянии, как вам и хотелось, вы можете зафиксировать свои изменения. Запомните, всё, что до сих пор не проиндексировано — любые файлы, созданные или изменённые вами, и для которых вы не выполнили <code>git add</code> после момента редактирования — не войдут в этот коммит. Простейший способ зафиксировать изменения — это набрать <code>git commit</code>:\r\n</p>\r\n[cli]\r\n$ git commit\r\n[/cli]\r\n<p>\r\nЭта команда откроет выбранный вами текстовый редактор (устанавливается системной переменной <code>$EDITOR</code> — обычно это vim или emacs, хотя вы можете установить ваш любимый с помощью команды <code>git config --global core.editor</code>).\r\n</p>\r\n<p>\r\nВ редакторе будет отображён следующий текст (это пример окна Vim’а):\r\n</p>\r\n[code]\r\n# Please enter the commit message for your changes. Lines starting\r\n# with \'#\' will be ignored, and an empty message aborts the commit.\r\n# On branch master\r\n# Changes to be committed:\r\n#   new file:   README\r\n#   modified:   CONTRIBUTING.md\r\n#\r\n~\r\n~\r\n~\r\n\".git/COMMIT_EDITMSG\" 9L, 283C\r\n[/code]\r\n<p>\r\nВы можете видеть, что комментарий по умолчанию для коммита содержит закомментированный результат работы команды <code>git status</code> и ещё одну пустую строку сверху. Вы можете удалить эти комментарии и набрать своё сообщение или же оставить их для напоминания о том, что вы фиксируете.\r\n</p>\r\n<p>\r\nЕсть и другой способ — вы можете набрать свой комментарий к коммиту в командной строке вместе с командой <code>commit</code> указав его после параметра -m, как в следующем примере:\r\n</p>\r\n[cli]\r\n$ git commit -m \"Story 182: Fix benchmarks for speed\"\r\n[master 463dc4f] Story 182: Fix benchmarks for speed\r\n 2 files changed, 2 insertions(+)\r\n create mode 100644 README\r\n[/cli]\r\n<p>\r\nКоммит вывел вам немного информации о себе: на какую ветку вы выполнили коммит (master), какая контрольная сумма SHA-1 у этого коммита (463dc4f), сколько файлов было изменено, а также статистику по добавленным/удалённым строкам в этом коммите.\r\n</p>\r\n\r\n<h3>Индексация в момент коммита</h3>\r\n<p>\r\nЕсли у вас есть желание пропустить этап индексирования, Git предоставляет простой способ. Добавление параметра -a в команду <code>git commit</code> заставляет Git автоматически индексировать каждый уже отслеживаемый на момент коммита файл, позволяя вам обойтись без <code>git add</code>:\r\n</p>\r\n[cli]\r\n$ git status\r\nOn branch master\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n    modified:   CONTRIBUTING.md\r\n\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\r\n[/cli]\r\n[cli]\r\n$ git commit -a -m \'added new benchmarks\'\r\n[master 83e38c7] added new benchmarks\r\n 1 file changed, 5 insertions(+), 0 deletions(-)\r\n[/cli]\r\n<p>\r\nОбратите внимание на то, что в данном случае перед коммитом вам не нужно выполнять <code>git add</code> для файла <code>CONTRIBUTING.md</code>.\r\n</p>\r\n\r\n<h3>Удаление файлов</h3>\r\n<p>\r\nДля того чтобы удалить файл из Git, вам необходимо удалить его из отслеживаемых файлов (точнее, удалить его из вашего индекса) а затем выполнить коммит. Это позволяет сделать команда <code>git rm</code>, которая также удаляет файл из вашего рабочего каталога, так что вы в следующий раз не увидите его как «неотслеживаемый».\r\n</p>\r\n<p>\r\nЕсли вы просто удалите файл из своего рабочего каталога, он будет показан в секции «Changes not staged for commit» (измененные, но не проиндексированные) вывода команды <code>git status</code>:\r\n</p>\r\n[cli]\r\n$ rm PROJECTS.md\r\n$ git status\r\nOn branch master\r\nYour branch is up-to-date with \'origin/master\'.\r\nChanges not staged for commit:\r\n  (use \"git add/rm <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n        deleted:    PROJECTS.md\r\n\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\r\n[/cli]\r\n<p>\r\nЗатем, если вы выполните команду git rm, удаление файла попадёт в индекс:\r\n</p>\r\n[cli]\r\n$ git rm PROJECTS.md\r\nrm \'PROJECTS.md\'\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    deleted:    PROJECTS.md\r\n[/cli]\r\n<p>\r\nПосле следующего коммита файл исчезнет и больше не будет отслеживаться.\r\n</p>\r\n<p>\r\nДругая полезная штука, которую вы можете захотеть сделать — это удалить файл из индекса, оставив его при этом в рабочем каталоге. Другими словами, вы можете захотеть оставить файл на жёстком диске, и убрать его из-под бдительного ока Git. Это особенно полезно, если вы забыли добавить что-то в файл <code>.gitignore</code> и по ошибке проиндексировали, например, большой файл с логами. Чтобы сделать это, используйте опцию <code>--staged</code> (или <code>--cached</code>):\r\n</p>\r\n[cli]\r\n$ git rm --staged README\r\n[/cli]\r\n<p>\r\nВ команду git rm можно передавать файлы, каталоги или glob-шаблоны. Это означает, что вы можете вытворять что-то вроде:\r\n</p>\r\n[cli]\r\n$ git rm log/\\*.log\r\n[/cli]\r\n<p>\r\nОбратите внимание на обратный слэш (\\) перед *. Он необходим из-за того, что Git использует свой собственный обработчик имён файлов вдобавок к обработчику вашего командного интерпретатора. Эта команда удаляет все файлы имеющие расширение .log находящиеся в директории log/. Или же вы можете сделать вот так:\r\n</p>\r\n[cli]\r\n$ git rm \\*~\r\n[/cli]\r\n<p>\r\nЭта команда удаляет все файлы, чьи имена заканчиваются на <code>~</code>.\r\n</p>\r\n\r\n<h3>Переименование файлов</h3>\r\n<p>\r\nЕсли вам хочется переименовать файл в Git, вы можете сделать что-то вроде:\r\n</p>\r\n[cli]\r\n$ git mv README.md README\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    renamed:    README.md -> README\r\n[/cli]\r\n<p>\r\nЭто эквивалентно выполнению следующих команд:\r\n</p>\r\n[cli]\r\n$ mv README.md README\r\n$ git rm README.md\r\n$ git add README\r\n[/cli]\r\n\r\n<h2>Операции отмены</h2>\r\n<p>\r\nОтмена может потребоваться, если вы сделали коммит слишком рано, например, забыв добавить какие-то файлы или комментарий к коммиту. Если вы хотите переделать коммит, можно запустить <code>commit</code> с параметром <code>--amend</code> (дополнить):\r\n</p>\r\n[cli]\r\n$ git commit --amend\r\n[/cli]\r\n<p>\r\nЭта команда использует для дополнения коммита ваш индекс (staged). Если вы ничего не меняли с момента последнего коммита (например, команда запущена сразу после предыдущего коммита), то снимок состояния останется в точности таким же, а изменится лишь комментарий к коммиту.\r\n</p>\r\n<p>\r\nЗапустится тот же редактор комментария к коммиту, но уже с комментарием к предыдущему коммиту. Комментарий можно отредактировать точно так же, как обычно, просто он заменит собой предыдущий.\r\n</p>\r\n<p>\r\nНапример, если вы фиксируете изменения, и понимаете, что забыли проиндексировать изменения в файле, который хотели включить в коммит, можно сделать примерно так:\r\n</p>\r\n[cli]\r\n$ git commit -m \'initial commit\'\r\n$ git add forgotten_file\r\n$ git commit --amend\r\n[/cli]\r\n<p>\r\nВ итоге получится единый коммит — второй коммит заменит результаты первого.\r\n</p>\r\n\r\n<h3>Удаление файла из индекса</h3>\r\n<p>\r\nCкажем, вы изменили два файла, и хотите закоммитить их двумя раздельными изменениями, но случайно набрали <code>git add .</code>, и добавили оба в индекс (staging area). Как отменить добавление одного из них? Команда <code>git status</code> напомнит вам:\r\n</p>\r\n[cli]\r\n$ git add .\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    renamed:    README.md -> README\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n<p>\r\nПрямо под текстом «Changes to be committed» говорится: <code>git reset HEAD <file>...</code> для отмены добавления в индекс. Давайте последуем этому совету, и отменим индексирование файла <code>CONTRIBUTING.md</code>:\r\n</p>\r\n[cli]\r\n$ git reset HEAD CONTRIBUTING.md\r\nUnstaged changes after reset:\r\nM    CONTRIBUTING.md\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    renamed:    README.md -> README\r\n\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n<p>\r\nФайл <code>CONTRIBUTING.md</code> изменен, но снова не добавлен в индекс.\r\n</p>\r\n\r\n<h3>Отмена изменения измененного файла</h3>\r\n<p>\r\nЧто делать, если вы поняли, что не хотите сохранять свои изменения файла <code>CONTRIBUTING.md</code>? Как можно просто «разызменить» его — вернуть к тому виду, который был в последнем коммите? Нам повезло, что <code>git status</code> рассказывает и это тоже. В последнем примере вывод <code>git status</code> был таким:\r\n</p>\r\n[cli]\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n    modified:   CONTRIBUTING.md\r\n[/cli]\r\n<p>\r\nЗдесь довольно ясно указано, как отбросить сделанные изменения. Давайте так и сделаем:\r\n</p>\r\n[cli]\r\n$ git checkout -- CONTRIBUTING.md\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n    renamed:    README.md -> README\r\n[/cli]\r\n<p>\r\nКак видите, откат изменений выполнен.\r\n</p>','2018-02-16 18:05:20');
/*!40000 ALTER TABLE `article_items` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_categories`
--

DROP TABLE IF EXISTS `blog_categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_categories` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор категории',
  `parent` int(11) unsigned NOT NULL DEFAULT '0' COMMENT 'Идентификатор родительской категории',
  `name` varchar(255) NOT NULL COMMENT 'Наименование категории',
  `keywords` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега keywords',
  `description` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега description',
  `sortorder` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Порядок сортировки',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COMMENT='Категории блога';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_categories`
--

LOCK TABLES `blog_categories` WRITE;
/*!40000 ALTER TABLE `blog_categories` DISABLE KEYS */;
INSERT INTO `blog_categories` VALUES (1,0,'Web-разработка','','',1),(2,0,'1С:Предприятие','','',2),(3,0,'ОС Linux','','',3),(4,1,'HTML и CSS','','',1),(5,1,'JavaScript и jQuery','','',2),(6,1,'PHP и MySQL','','',3),(7,2,'Программирование','','',1),(8,2,'Язык запросов','','',2),(9,3,'Команды','','',1),(10,3,'Сценарии','','',2),(11,1,'Разное','','',4),(12,2,'Разное','','',3),(13,3,'Разное','','',3);
/*!40000 ALTER TABLE `blog_categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_post_tag`
--

DROP TABLE IF EXISTS `blog_post_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_post_tag` (
  `post_id` int(11) unsigned NOT NULL COMMENT 'Идентификатор поста',
  `tag_id` int(11) unsigned NOT NULL COMMENT 'Идентификатор тега',
  PRIMARY KEY (`post_id`,`tag_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Связь пост-тег';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_post_tag`
--

LOCK TABLES `blog_post_tag` WRITE;
/*!40000 ALTER TABLE `blog_post_tag` DISABLE KEYS */;
INSERT INTO `blog_post_tag` VALUES (31,1),(31,2),(31,29),(32,9),(32,20),(33,9),(33,20),(34,1),(34,2),(34,28),(34,29),(35,1),(35,2),(35,29),(36,1),(36,2),(36,28),(36,29),(37,9),(37,20),(38,1),(38,2),(38,29),(39,1),(39,2),(39,29),(40,10),(41,9),(41,20),(41,31),(42,10),(42,32),(42,33),(42,34),(43,1),(43,2),(43,29),(43,31),(44,9),(44,20);
/*!40000 ALTER TABLE `blog_post_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_posts`
--

DROP TABLE IF EXISTS `blog_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_posts` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор поста',
  `category` int(11) unsigned NOT NULL COMMENT 'Идентификатор категории, внешний ключ',
  `name` varchar(255) NOT NULL COMMENT 'Заголовок поста блога',
  `keywords` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега keywords',
  `description` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега description',
  `excerpt` varchar(1000) NOT NULL COMMENT 'Анонс поста блога',
  `body` text NOT NULL COMMENT 'Текст поста блога в формате html',
  `added` datetime NOT NULL COMMENT 'Дата публикации',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=45 DEFAULT CHARSET=utf8 COMMENT='Посты (записи) блога';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_posts`
--

LOCK TABLES `blog_posts` WRITE;
/*!40000 ALTER TABLE `blog_posts` DISABLE KEYS */;
INSERT INTO `blog_posts` VALUES (25,6,'Как узнать сколько раз скачали файл?','PHP MySQL скачивание файлов счетчик количество скачиваний','PHP-скрипт для подсчета количества скачиваний файла','Допустим, у вас на сайте есть раздел Downloads, где посетитель может скачать скрипты, музыку, фотографии и т.п. Но как узнать, какие файлы пользуются успехом, а какие лежат мертвым грузом (и их можно безболезненно удалить, чтобы не занимали место)? Выход — счетчик скачиваний. Вы наверняка уже их видели. Обычно этот счетчик устанавливается рядом со ссылкой на скачиваемый документ.','<p>\r\nДопустим, у вас на сайте есть раздел Downloads, где посетитель может скачать скрипты, музыку, фотографии и т.п. Но как узнать, какие файлы пользуются успехом, а какие лежат мертвым грузом (и их можно безболезненно удалить, чтобы не занимали место)? Выход — счетчик скачиваний. Вы наверняка уже их видели. Обычно этот счетчик устанавливается рядом со ссылкой на скачиваемый документ:\r\n<p>\r\n[html]<a href=\"/downloads/download.php?id=178\">NotePadPP.zip</a>, скачали 57 раз(а)[/html]\r\n<p>\r\nПусть информация о файлах для скачивания у нас хранится в таблице базы данных, которая имеет следующую структуру:\r\n</p>\r\n[mysql]CREATE TABLE `files` (\r\n  `id` INT(10) PRIMARY KEY,\r\n  `title` VARCHAR(255) NOT NULL DEFAULT \'\',\r\n  `description` TEXT NOT NULL DEFAULT \'\',\r\n  `filename` VARCHAR(64) NOT NULL DEFAULT \'\',\r\n  `mimetype` VARCHAR(8) NOT NULL DEFAULT \'\'\r\n) ENGINE=INNODB DEFAULT CHARSET=cp1251;[/mysql]\r\n<p>\r\nЗдесь\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">id</span> — уникальный ID файла</li>\r\n  <li><span style=\"color: blue;\">title</span> — название файла, например, «Текстовой редактор NotePad++»</li>\r\n  <li><span style=\"color: blue;\">description</span> — описание файла, например, «Бесплатный редактор текстовых файлов с поддержкой синтаксиса большого количества языков программирования, ориентирован для работы в операционной системе MS Windows»</li>\r\n  <li><span style=\"color: blue;\">filename</span> — имя файла для скачивания, например, NotePadPP.zip</li>\r\n  <li><span style=\"color: blue;\">mimetype</span> — MIME-тип файла</li>\r\n</ul>\r\n<p>\r\nФайлы для скачивания расположены в директории <span style=\"color: blue;\">DOCUMENT_ROOT/downloads/files/</span>. Эта директория защищена с помощью <span style=\"color: blue;\">.htaccess</span>, чтобы посетитель не мог скачать файл напрямую, минуя наш счетчик:\r\n</p>\r\n[code]Order Allow,Deny\r\nDeny from All[/code]\r\n<p>\r\nФайл <span style=\"color: blue;\">DOCUMENT_ROOT/downloads/index.php</span> выводит список всех файлов, доступных для скачивания, а файл <span style=\"color: blue;\">DOCUMENT_ROOT/downloads/download.php</span> отдает файлы на скачивание и подсчитывает количество скачиваний.\r\n</p>\r\n<p>\r\nФайл <span style=\"color: blue;\">DOCUMENT_ROOT/downloads/index.php</span>\r\n</p>\r\n[php]<?php\r\n$query = \"SELECT `id`, `title`, `description`, `mimetype` FROM `files` WHERE 1 ORDER BY `title`\";\r\n$res = mysql_query( $query );\r\necho \'<table border=\"1\">\'.\"\\n\";\r\necho \'<tr><th>№</th><th>Наименование</th><th>Описание</th><th>Тип</th><th>Скачать</th></tr>\'.\"\\n\";\r\n$i = 1;\r\nwhile( $file = mysql_fetch_array( $res ) ) {\r\n  echo \'<tr>\';\r\n  echo \'<td>\'.$i.\'</td>\';\r\n  echo \'<td>\'.$file[\'title\'].\'</td>\';\r\n  echo \'<td>\'.$file[\'description\'].\'</td>\';\r\n  echo \'<td>\'.$file[\'mimetype\'].\'</td>\';\r\n  echo \'<td><a href=\"/downloads/download.php?id=\'.$row[\'id\'].\'\" target=\"_blank\">Скачать</a></td>\';\r\n  echo \'</tr>\'.\"\\n\";\r\n  $i++;\r\n}\r\necho \'</table>\'.\"\\n\";\r\n?>[/php]\r\n<p>\r\nФайл <span style=\"color: blue;\">DOCUMENT_ROOT/downloads/download.php</span>\r\n</p>\r\n[php]<?php\r\nif ( !isset( $_GET[\'id\'] ) ) {\r\n  // если не передан ID файла\r\n  header (\"HTTP/1.0 404 Not Found\");\r\n  die();\r\n}\r\n$id = (int)$_GET[\'id\'];\r\nif ( $id < 1 ) {\r\n  header (\"HTTP/1.0 404 Not Found\");\r\n  die();\r\n}\r\n// имя файла для скачивания\r\n$query = \"SELECT `filename`, `mimetype` FROM `files` WHERE `id`=\".$id;\r\n$res = mysql_query( $query );\r\nif( mysql_num_rows( $res ) == 0 ) {\r\n  header ( \'HTTP/1.1 404 Not Found\' );\r\n  die();\r\n}\r\nlist( $filename, $mimetype ) = mysql_fetch_row( $res );\r\n// если файла нет\r\nif( !file_exists( \'./files/\'.$filename ) ) {\r\n  header ( \'HTTP/1.1 404 Not Found\' );\r\n  die();\r\n}\r\n// сообщаем размер файла\r\nheader( \'Content-Length: \'.filesize(\'./files/\'.$filename) );\r\n// дата модификации файла для кеширования\r\nheader( \'Last-Modified: \'.date(\"D, d M Y H:i:s T\", filemtime(\'./files/\'.$filename)) );\r\n// сообщаем тип данных\r\nswitch( $mimetype ) {\r\n  case \'pdf\' : $ctype = \'application/pdf\'; break;\r\n  case \'zip\' : $ctype = \'application/zip\'; break;\r\n  case \'doc\' : $ctype = \'application/msword\'; break;\r\n  case \'xls\' : $ctype = \'application/vnd.ms-excel\'; break;\r\n  case \'gif\' : $ctype = \'image/gif\'; break;\r\n  case \'png\' : $ctype = \'image/png\'; break;\r\n  case \'jpeg\':\r\n  case \'jpg\' : $ctype = \'image/jpg\'; break;\r\n  case \'mp3\' : $ctype = \'audio/mpeg\'; break;\r\n  case \'wav\' : $ctype = \'audio/x-wav\'; break;\r\n  case \'mpeg\':\r\n  case \'mpg\' :\r\n  case \'mpe\' : $ctype = \'video/mpeg\'; break;\r\n  case \'mov\' : $ctype = \'video/quicktime\'; break;\r\n  case \'avi\' : $ctype = \'video/x-msvideo\'; break;\r\n  default    : $ctype = \'application/octet-stream\';\r\n}\r\nheader( \'Content-Type: \'.$ctype );\r\n// файл будет получен с именем $filename\r\nheader(\'Content-Disposition: attachment; filename=\"\'.$filename.\'\"\');\r\n// начинаем передачу содержимого файла\r\nreadfile( \'./files/\'.$filename );\r\n\r\n// увеличиваем счетчик количества закачек\r\nmysql_query( \"UPDATE `files` SET `count`=`count`+1 WHERE `id`=\".$id );\r\n?>[/php]','2008-06-26 07:40:37'),(1,4,'Закладки: CSS и фоновое изображение','Закладки: CSS и фоновое изображение','Закладки: CSS и фоновое изображение','Сегодня рассмотрим, как сделать закладки используя CSS и одно фоновое изображение для всех состояний закладки. Каждый элемент имеет закругленные уголки, а его ширина зависит от содержимого.','<p>\r\nСегодня рассмотрим, как сделать <a href=\"/files/blog/1/example/index.html\" target=\"_blank\">закладки</a> используя CSS и одно фоновое изображение для всех состояний закладки. Каждый элемент имеет закругленные уголки, а его ширина зависит от содержимого.\r\n</p>\r\n<p>\r\nКаждая закладка может иметь три состояния:\r\n</p>\r\n<ul>\r\n  <li>Обычная закладка</li>\r\n  <li>Активная закладка</li>\r\n  <li>Закладка при наведении указателя мыши</li>\r\n</ul>\r\n<p>\r\nКак уже было сказано ранее, нам понадобится всего лишь одно фоновое изображение:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/1/tab.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nЧтобы фон изменялся мы будем использовать позиционирование фона для каждого состояния:\r\n</p>\r\n<ul>\r\n  <li>Активное (background-position: xxx top)</li>\r\n  <li>Обычное (background-position: xxx 30px)</li>\r\n  <li>При наведении указателя (background-position: xxx 60px)</li>\r\n</ul>\r\n<p>\r\nТеперь перейдем к HTML и CSS.\r\n</p>\r\n<p style=\"font-weight: bold;\">HTML:</p>\r\n[html]<ul class=\"tab\">\r\n    <li><a href=\"index.html\"><span>Главная</span></a></li>\r\n    <li class=\"active\"><a href=\"news.html\"><span>Новости</span></a></li>\r\n    <li><a href=\"articles.html\"><span>Статьи</span></a></li>\r\n    <li><a href=\"blog.html\"><span>Блог</span></a></li>\r\n    <li><a href=\"forum.html\"><span>Форум</span></a></li>\r\n    <li><a href=\"contact.html\"><span>Контакты</span></a></li>\r\n</ul>[/html]\r\n<p>\r\nДля того чтобы сделать закладку активной нужно добавить класс active этому элементу списка.\r\n</p>\r\n<p style=\"font-weight: bold;\">CSS:</p>\r\n[css]ul, li {\r\n    border: 0;\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\nul {\r\n    border-bottom:solid 1px #DEDEDE;\r\n    height:29px;\r\n    padding-left:20px;\r\n}\r\nli {\r\n    float: left;\r\n    margin-right: 2px;\r\n    height: 30px;\r\n    overflow: hidden;\r\n}\r\n.tab a:link, .tab a:visited {\r\n    background:url(tab.png) right 60px;\r\n    color:#666;\r\n    display:block;\r\n    font-weight:bold;\r\n    line-height:30px;\r\n    text-decoration:none;\r\n}\r\n.tab a span {\r\n    background:url(tab.png) left 60px;\r\n    display:block;\r\n    margin-right:14px;\r\n    padding-left:14px;\r\n}\r\n.tab a:hover {\r\n    background:url(tab.png) right 30px;\r\n    display:block;\r\n}\r\n.tab a:hover span {\r\n    background:url(tab.png) left 30px;\r\n    display:block;\r\n}\r\n.active a:link, .active a:visited, .active a:visited, .active a:hover {\r\n    background:url(tab.png) right 0 no-repeat;\r\n}\r\n.active a span, .active a:hover span {\r\n    background:url(tab.png) left 0 no-repeat;\r\n}[/css]','2011-01-22 13:56:07'),(31,9,'Команда ls','','','Выводит список файлов в указанном каталоге. Опции команды указывают как именно и в каком виде нужно выводить информацию на экран. Если запустить команду без указания директории, то она выдаст содержимое текущего каталога.','<p>\r\nВыводит список файлов в указанном каталоге. Синтаксис\r\n</p>\r\n[code]ls [grn][опции][/grn] [red][директория][/red][/code]\r\n<p>\r\nОпции команды указывают как именно и в каком виде нужно выводить информацию на экран. Если запустить команду без указания директории, то она выдаст содержимое текущего каталога. Основные опции:\r\n<ul>\r\n  <li><code>-a</code> — показывает все файлы в каталоге, включая скрытые файлы (<code>.filename</code>). Каталоги <code>..</code> и <code>.</code> вверху этого списка обозначают родительский и текущий каталог соответственно.</li>\r\n  <li><code>-l</code> — выводит информацию о содержимом, включая разрешения (режимы), владельца, группу, размер, дату создания, является ли этот файл ссылкой на что-то другое в системе, и если да, то куда указывает эта ссылка.</li>\r\n  <li><code>-R</code> — этот параметр также показывает содержимое всех каталогов, вложенных в текущий.</li>\r\n</ul>\r\n<p>\r\nОстальные ключи можно посмотреть в справке\r\n</p>\r\n[cli]\r\n$ ls --help\r\nИспользование: ls [КЛЮЧ]… [ФАЙЛ]…\r\nВыдаёт информацию о ФАЙЛАХ (по умолчанию о текущем каталоге).\r\nСортирует в алфавитном порядке, если не задан ни --sort, ни один из\r\nключей -cftuvSUX.\r\n\r\nАргументы, обязательные для длинных ключей, обязательны и для коротких.\r\n  -a, --all                  не скрывать файлы начинающиеся с .\r\n  -A, --almost-all           не выдавать подразумеваемые . и ..\r\n      --author               вместе с -l, печатать автора каждого файла\r\n  -b, --escape               печатать экранирующие последовательности\r\n                             в стиле С для не графических символов\r\n      --block-size=РАЗМЕР    использовать блоки указанного РАЗМЕРА; например,\r\n                             «---block-size=M» выводит размеры в единицах,\r\n                             равных 1048576 байтам; см. формат РАЗМЕРА далее.\r\n  -B, --ignore-backups       не выдавать файлы, оканчивающиеся на ~\r\n  -c                         с -lt: сортировать и показывать по ctime (времени\r\n                             последнего изменения файла);\r\n                             с -l: показывать ctime и сортировать по имени;\r\n                             иначе: сортировать по ctime, сначала самые новые\r\n  -C                         выдавать список в несколько колонок\r\n      --color[=КОГДА]        расцвечивать вывод;\r\n                             КОГДА может быть «always» (по умолчанию, если не\r\n                             указано), «auto» или «never». Подробней см. ниже\r\n  -d, --directory            выдавать имена каталогов, а не их содержимое\r\n  -D, --dired                генерировать вывод для режима Emacs dired\r\n  -f                         не сортировать, включает -aU, выключает -ls --color\r\n  -F, --classify             добавлять к имени файла индикатор (один из */=>@|)\r\n      --file-type            аналогично, но не добавлять «*»\r\n      --format=СЛОВО         across -x, commas -m, horizontal -x, long -l,\r\n                             single-column -1, verbose -l, vertical -C\r\n      --full-time            синоним -l --time-style=full-iso\r\n  -g                         как -l, но не выводить владельца\r\n      --group-directories-first\r\n                             группировать каталоги раньше файлов;\r\n                             может дополняться ключом --sort,\r\n                             но любое использование\r\n                             --sort=none (-U) выключает группировку\r\n  -G, --no-group             в длинном формате не печатать имена групп\r\n  -h, --human-readable       c -l и/или -s печатать размеры в удобном для\r\n                             человека виде (например, 1K 234M 2G)\r\n      --si                   то же, но использовать степень 1000, а не 1024\r\n  -H, --dereference-command-line\r\n                             следовать по символьным ссылкам в командной\r\n                             строке\r\n      --dereference-command-line-symlink-to-dir\r\n                             следовать по всем символьным ссылкам в командной\r\n                             строке, которые указывают на каталог\r\n      --hide=ШАБЛОН          не показывать записи, соответствующие ШАБЛОНУ\r\n                             оболочки (отменяется ключами -a или -A)\r\n      --indicator-style=СТИЛЬ добавлять к именам элементов индикатор с\r\n                             указанным СТИЛЕМ: none (по умолчанию),\r\n                             slash (-p), file-type (--file-type), classify (-F)\r\n  -i, --inode                показывать индекс каждого файла\r\n  -I, --ignore=ШАБЛОН        не показывать записи, соответствующие ШАБЛОНУ\r\n                             оболочки\r\n  -k, --kibibytes            по умолчанию использовать блоки по 1024 байта\r\n                             при показе использования диска\r\n  -l                         использовать широкий формат\r\n  -L, --dereference          показывая информацию для символьной ссылки,\r\n                             показывать информацию о файле, на который ссылка\r\n                             ссылается\r\n  -m                         выдавать список на всю ширину через запятую\r\n  -n, --numeric-uid-gid      как -l, но выдавать числовые UID и GID\r\n  -N, --literal              печатать имена как есть (не обрабатывать, \r\n                             например, управляющие символы)\r\n  -o                         как -l, но не выводить информацию о группе\r\n  -p,  --indicator-style=slash  добавлять индикатор / к каталогам\r\n  -q, --hide-control-chars   выводить ? вместо непечатных символов\r\n      --show-control-chars   показывать непечатные символы (по умолчанию,\r\n                             если программа не «ls» и вывод не на терминал).\r\n  -Q, --quote-name           заключать имя записей в кавычки\r\n      --quoting-style=ТИП    использовать ТИП заключения в кавычки:\r\n                             literal, locale, shell, shell-always,\r\n                             shell-escape, shell-escape-always, c, escape\r\n  -r, --reverse              обратный порядок сортировки\r\n  -R, --recursive            рекурсивно показывать каталоги\r\n  -s, --size                 печатать размер каждого файла в блоках\r\n  -S                         сортировать по размеру файла, большие сначала\r\n      --sort=СЛОВО           сортировать по СЛОВУ, а не по имени: \r\n                             none (без сортировки) -U, size (размер) -S,\r\n                             time (время) -t, version (версия) -v,\r\n                             extension (расширение) -X\r\n                             \r\n      --time=СЛОВО           с ключом -l, показывать вместо времени\r\n                             изменения время, заданное СЛОВОМ: \r\n                             atime, access, use (-u),\r\n                             ctime, status (-c);\r\n                             если --sort=time, использовать указанное\r\n                             время в качестве ключа сортировки\r\n      --time-style=СТИЛЬ     с -l, показывать время используя СТИЛЬ:\r\n                             full-iso, long-iso, iso, locale, +ФОРМАТ;\r\n                             ФОРМАТ интерпретируется как в «date»;\r\n                             если ФОРМАТ — это\r\n                             ФОРМАТ1<перевод-строки>ФОРМАТ2, то\r\n                             ФОРМАТ1 применяется к старым файлам,\r\n                             а ФОРМАТ2 к новым; если к СТИЛЮ добавлен\r\n                             префикс «posix-», то он действует только\r\n                             в локали, отличной от POSIX\r\n  -t                         сортировать по времени изменения,\r\n                             сначала самые новые\r\n  -T, --tabsize=РАЗМЕР       использовать табуляцию указанного РАЗМЕРА, а не 8\r\n  -u                         с -lt: сортировать и показывать время доступа;\r\n                             c -l: показывать время доступа и сортировать\r\n                             по имени; иначе сортировать по времени доступа,\r\n                             сначала самые новые\r\n  -U                         не сортировать; выводить в соответствии с\r\n                             физическим расположением в каталоге\r\n  -v                         сортировать по номерам (версии) в текстовом\r\n                             представлении\r\n  -w, --width=ЧИСЛО          устанавливает ширину вывода равной ЧИСЛО.\r\n                             0 означает отсутствие ограничения.\r\n  -x                         перечислять по строкам, а не по столбцам\r\n  -X                         сортировать по расширению в алфавитном порядке\r\n  -Z, --context              печатать любой контекст безопасности каждого\r\n                             файла\r\n  -1                         перечислять по одному файлу на строке.\r\n                             Символ «\\n» не учитывается, если указан -q или -b\r\n      --help     показать эту справку и выйти\r\n      --version  показать информацию о версии и выйти\r\n\r\nРАЗМЕР задаётся целым числом и необязательной единицей изменения\r\n(пример: 10K это 10*1024). Единицы изменения:\r\nK, M, G, T, P, E, Z, Y (степень 1024) или KB, MB, … (степень 1000).\r\n\r\nИспользование цветов для различения типов файла по умолчанию выключено и\r\nс помощью --color=never. С --color=auto, ls выдаёт цветовые коды только когда\r\nстандартный вывод подключён к терминалу. Переменная окружения LS_COLORS\r\nслужит для изменения значений. Для её установки используйте команду dircolors.\r\n\r\nКоды выхода:\r\n 0  всё отлично,\r\n 1  небольшие проблемы (например, недоступен подкаталог),\r\n 2  серьёзная проблема (например, недоступен аргумент командной строки).\r\n[/cli]','2018-02-05 17:40:14'),(22,11,'Категории и статьи в Joomla','Joomla категория статья материал','Категории и статьи в Joomla. Добавление новых материалов.','Единицей контента считается материал (статья). Для организации иерархии сайта используются категории. По сути, иерархию материалов Joomla можно сравнить с файловой системой: каталог — это категория, файл — материал. В категориях, как и в каталогах, могут быть подкатегории. При этом вложенность категорий не ограничена.','<p>\r\nЕдиницей контента считается материал (статья). Для организации иерархии сайта используются категории. По сути, иерархию материалов Joomla можно сравнить с файловой системой: каталог — это категория, файл — материал. В категориях, как и в каталогах, могут быть подкатегории. При этом вложенность категорий не ограничена.\r\n</p>\r\n<p>\r\nКонтент, содержащийся в определенной категории, называется категоризованным. Кроме категоризованного контента, Joomla позволяет хранить некатегоризованный (или статический) контент, не принадлежащий какой-нибудь категории. Статический контент можно использовать для общих доументов сайта.\r\n</p>\r\n\r\n<h2>Добавление категории</h2>\r\n<p>\r\nНа главной странице панели управления щелкните по кнопке «Менеджер категорий», а потом — по кнопке «Создать».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/22/make-ctg.jpg\" class=\"zoom\" title=\"Добавление категории\"><img src=\"/files/blog/22/make-ctg-small.jpg\" alt=\"Добавление категории\" /></a>\r\n</p>\r\n<p>\r\nНазначение полей:\r\n</p>\r\n<ul>\r\n  <li><strong>Заголовок</strong>. Название категории (его увидят пользователи при просмотре содержимого категории).</li>\r\n  <li><strong>Алиас</strong>. Псевдоним категории для Joomla; должен содержать только латинские символы и не содержать пробелы. Псевдоним можно не указывать — Joomla создаст его автоматически.</li>\r\n  <li><strong>Родитель</strong>. Позволяет выбрать родительскую категорию. Однако родителя выбирать необязательно — в этом случае категория станет категорией первого уровня.</li>\r\n  <li><strong>Состояние</strong>. Определяет, будет ли категория опубликована на сайте после создания.</li>\r\n  <li><strong>Доступ</strong>. Позволяет установить права доступа к данной категории:\r\n    <ul>\r\n      <li><strong>Public</strong> (Все). Все пользователи смогут обратиться к этой категории.</li>\r\n      <li><strong>Registered</strong> (Зарегистрированные). Доступ разрешен только для зарегистрированных пользователей.</li>\r\n      <li><strong>Special</strong> (Специальный). Для доступа к этой категории потребуются специальные права доступа.</li>\r\n    </ul>\r\n  </li>\r\n  <li><strong>Права</strong>. Кнопка «Установить разрешения» перемещает нас вниз страницы, где можно гибко определить права доступа к материалам данной категории.</li>\r\n  <li><strong>Язык</strong>. Язык, к которому привязана категория.</li>\r\n  <li><strong>Описание категории</strong>. Позволяет ввести текст описания для категории и отформатировать его.</li>\r\n  <li><strong>Параметры публикации</strong>. В этой группе параметров можно выбрать автора категории.</li>\r\n  <li><strong>Основные параметры</strong>. Позволяет задать для категории изображение, выбрать стиль отображения ее материалов (Альтернативный макет) и ввести альтернативный текст для изображения. Альтернативный макета — можно выбрать вариант «Блог» или «Список». В первом случае мы получим список статей и подкатегорий с их описанием, а во втором — просто список заголовков статей/категорий.</li>\r\n  <li><strong>Метаданные</strong>. Данные для поисковых систем, позволяет добавить описание и ключевые слова для данной категории.</li>\r\n</ul>\r\n\r\n<h2>Добавление материала</h2>\r\n<p>\r\nПосле того, как необходимые категории и подкатегории созданы, можно приступать к созданию материалов. Если материал будет содержать картинки, которые еще не загружены на сайт, их нужно предварительно загрузить с помощью медиа-менеджера:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/22/media-mng.jpg\" class=\"zoom\" title=\"Медиа-менеджер\"><img src=\"/files/blog/22/media-mng-small.jpg\" alt=\"Медиа-менеджер\" /></a>\r\n</p>\r\n<p>\r\nДля создания нового материала используется кнопка «Создать материал» на главной странице панели управления.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/22/make-art.jpg\" class=\"zoom\" title=\"Добавление материала\"><img src=\"/files/blog/22/make-art-small.jpg\" alt=\"Добавление материала\" /></a>\r\n</p>\r\n<p>\r\nПри добавлении статьи требуется указать следующую информацию:\r\n</p>\r\n<ul>\r\n  <li><strong>Заголовок</strong>. Название материала (статьи).</li>\r\n  <li><strong>Алиас</strong>. Псевдоним материала (можно не указывать).</li>\r\n  <li><strong>Категория</strong>. Категория, в которую помещается данная статья.</li>\r\n  <li><strong>Состояние</strong>. Указание, должен ли материал быть опубликован.</li>\r\n  <li><strong>Доступ</strong>. Определение уровня доступа к материалу.</li>\r\n  <li><strong>Права</strong>. Права доступа к материалу.</li>\r\n  <li><strong>Избранное</strong>. Определение, будет ли материал опубликован на главной странице сайта.</li>\r\n  <li><strong>Язык</strong>. Язык, к которому привязана статья.</li>\r\n</ul>\r\n<p>\r\nПосле установки обязательных параметров можно приступить к добавлению текста статьи. Для добавления картинки используется кнопка «Изображение» в нижней части окна редактора. Кроме кнопки «Изображение», имеются еще кнопки «Материал» (вставляет ссылку на ранее добавленный материал), «Разрыв страницы» (вставляет переход на следующую страницу), «Подробнее» (вставляет разделитель «Подробнее», после щелчка на котором отображается остальная часть статьи), «Выключить редактор» (выключает визуальный редактор, позволяя редактировать HTML-код вручную).\r\n</p>\r\n<p>\r\nВ правой части окна добавления статьи можно установить дополнительные параметры:\r\n</p>\r\n<ul>\r\n  <li><strong>Автор</strong>. Выбрать автора статьи (если нужно).</li>\r\n  <li><strong>Псевдоним автора</strong>. Ввести псевдоним автора.</li>\r\n  <li><strong>Дата создания</strong>. Можно установить дату, отличную от текущей.</li>\r\n  <li><strong>Начало публикации</strong>. Если нужно опубликовать материал к определенной дате.</li>\r\n  <li><strong>Завершение публикации</strong>. После наступления этой даты статья будет скрыта (но не удалена).</li>\r\n</ul>\r\n<p>\r\nТакже можно отредактировать параметры отображения материала:\r\n</p>\r\n<ul>\r\n  <li><strong>Заголовок</strong>. Определяет, будет ли отображен заголовок статьи при ее просмотре.</li>\r\n  <li><strong>Заголовок как ссылка</strong>. Определяет, будет ли заголовок статьи отображен как ссылка.</li>\r\n  <li><strong>Вводный текст</strong>. Определяет, будет ли отображен вступительный текст статьи.</li>\r\n  <li><strong>Категория</strong>. Определяет, нужно ли отображать название категории при просмотре статьи.</li>\r\n  <li><strong>Категория как ссылка</strong>. Определяет, будет ли название категории отображено как ссылка.</li>\r\n  <li><strong>Заголовок родительской категории</strong>. Позволяет вывести название родительской категории.</li>\r\n  <li><strong>Заголовок родительской категории как ссылка</strong>. Определяет, будет ли название родительской категории отображено как ссылка.</li>\r\n  <li><strong>Автор</strong>. Определяет, будет ли отображаться имя автора.</li>\r\n  <li><strong>Автор как ссылка</strong>. Имя автора оформляется как ссылка, ведущая к контактной информации автора.</li>\r\n  <li><strong>Дата создания</strong>. Определяет, показывать или нет дату и время создания статьи.</li>\r\n  <li><strong>Дата изменения</strong>. Определяет, показывать или нет дату последнего изменения статьи.</li>\r\n  <li><strong>Дата публикации</strong>. Указывает, отображать или нет дату публикации статьи.</li>\r\n  <li><strong>Навигация</strong>. Определяет, показывать или нет полоску навигации (переход к соседним материалам).</li>\r\n  <li><strong>Показывать иконки</strong>. Задает, будут ли доступны иконки для печати, PDF-версии статьи, отправки по e-mail.</li>\r\n  <li><strong>Иконка печати</strong>. Определяет, будет ли предоставлена иконка для распечатки статьи.</li>\r\n  <li><strong>Иконка электронной почты</strong>. Определяет, будет ли предоставлена кнопка для отправки статьи по электронной почте.</li>\r\n  <li><strong>Рейтинг</strong>. Определяет, бутел ли отображен рейтинг статьи (смогут ли пользователи оценивать эту статью).</li>\r\n  <li><strong>Кол-во просмотров</strong>. Следует ли отображать счетчик количества просмотров статьи.</li>\r\n  <li><strong>Показывать ссылки неавторизованным</strong>. Если для этого параметра выбрать значение «Да», то просмотреть полный текст статьи смогут и неавторизованные пользователи, если же выбрать значение «Нет», пользователю придется зарегистрироваться на сайте, чтобы просмотреть полный текст статьи.</li>\r\n  <li><strong>Текст вместо Подробнее</strong>. введите текст, который будет отображаться вместо «Подробнее», например «Читать дальше».</li>\r\n  <li><strong>Альтернативный макет</strong>. Этот параметр позволяет выбрать альтернативный способ отображения статьи.</li>\r\n</ul>\r\n<p>\r\nВ большинстве случаев используется глобальная настройка параметров статей — проще один раз задать требуемые значения глобальных параметров, чем устанавливать параметры для каждой публикуемой статьи в отдельности.\r\n</p>\r\n<p>\r\nТакже можно изменить метаданные статьи, т.е. те данные, которые будут заключены в ее meta-теги.\r\n</p>','2013-06-17 11:51:07'),(3,11,'Установка memcached под Windows 7','','','Memcached разработан для кэширования данных, генерация которых требует большого количества ресурсов. Такого рода данные могут содержать что угодно, начиная с результатов запроса к базе данных и заканчивая тяжеловесным куском шаблона.','<p>\r\nMemcached разработан для кэширования данных, генерация которых требует большого количества ресурсов. Такого рода данные могут содержать что угодно, начиная с результатов запроса к базе данных и заканчивая тяжеловесным куском шаблона.\r\n</p>\r\n<p>\r\nДля начала <a href=\"http://code.jellycan.com/memcached/\">скачиваем</a> сам сервер memecached. Распаковываем архив memcached-1.2.6-win32-bin.zip, кладем файл memcached.exe в директорию C:/Program Files/memcached/. Устанавливаем как сервис (cmd запускаем от имени администратора):\r\n</p>\r\n\r\n[code]cd C:/Program Files/memcached\r\nmemcached.exe -d install[/code]\r\n\r\n<p>\r\nКраткую справку по memcached можно получить с помощью ключа -help:\r\n</p>\r\n\r\n[code]memcached -help[/code]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[code]C:\\Program Files\\memcached>memcached.exe -help\r\nmemcached 1.2.6\r\n-p <num>      TCP port number to listen on (default: 11211)\r\n-U <num>      UDP port number to listen on (default: 0, off)\r\n-s <file>     unix socket path to listen on (disables network support)\r\n-a <mask>     access mask for unix socket, in octal (default 0700)\r\n-l <ip_addr>  interface to listen on, default is INDRR_ANY\r\n-d start          tell memcached to start\r\n-d restart        tell running memcached to do a graceful restart\r\n-d stop|shutdown  tell running memcached to shutdown\r\n-d install        install memcached service\r\n-d uninstall      uninstall memcached service\r\n-r            maximize core file limit\r\n-u <username> assume identity of <username> (only when run as root)\r\n-m <num>      max memory to use for items in megabytes, default is 64\r\n-M            return error on memory exhausted (rather than removing i\r\n-c <num>      max simultaneous connections, default is 1024\r\n-k            lock down all paged memory.  Note that there is a\r\n              limit on how much memory you may lock.  Trying to\r\n              allocate more than that would fail, so be sure you\r\n              set the limit correctly for the user you started\r\n              the daemon with (not for -u <username> user;\r\n              under sh this is done with \'ulimit -S -l NUM_KB\').\r\n-v            verbose (print errors/warnings while in event loop)\r\n-vv           very verbose (also print client commands/reponses)\r\n-h            print this help and exit\r\n-i            print memcached and libevent license\r\n-b            run a managed instanced (mnemonic: buckets)\r\n-P <file>     save PID in <file>, only used with -d option\r\n-f <factor>   chunk size growth factor, default 1.25\r\n-n <bytes>    minimum space allocated for key+value+flags, default 48[/code]\r\n\r\n<p>\r\nЕсли при установке появляется ошибка «отсутствует MSVCR71.dll», то можно прочесть <a href=\"http://www.addictivetips.com/windows-tips/fix-msvcp71-dll-and-msvcr71-dll-missing-error-in-windows-7/\">статью</a>, где описывается способ борьбы с ней. Если коротко — надо <a href=\"/files/blog/3/msvcp71-dll-and-msvcr71-dll.zip\">скачать</a> две dll бибилиотеки и скопировать их в папку C:/Windows/System32.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/3/memcached-1.jpg\" class=\"zoom\" title=\"Установка сервера memcached\"><img src=\"/files/blog/3/memcached-1-small.jpg\" alt=\"Установка сервера memcached\" /></a>\r\n</p>\r\n<p>\r\nЗапускаем сервер: Панель управления->Администрирование->Службы. Выбираем memcached Server, кликаем «Запустить службу». Также можно поставить тип запуска «Авто», чтобы сервер автоматически стартовал при загрузке системы.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/3/memcached-2.jpg\" class=\"zoom\" title=\"Запуск сервера memcached\"><img src=\"/files/blog/3/memcached-2-small.jpg\" alt=\"Запуск сервера memcached\" /></a>\r\n</p>\r\n<p>\r\nТеперь нам нужен клиент для работы с сервером. Здесь есть выбор: <a href=\"http://pecl.php.net/package/memcache\">memcache</a> и <a href=\"http://pecl.php.net/package/memcached\">memcached</a>. Под Windows мне удалось найти только расширение php_memcache.dll (для версии PHP 5.3), которое можно скачать <a href=\"http://downloads.php.net/pierre/\">здесь</a>. Распаковываем php_memcache-2.2.6-5.3-vc9-x86.zip, кладем файл php_memcache.dll в директорию с расширениями PHP. У меня это C:/Program Files/php/ext. В php.ini прописываем:\r\n</p>\r\n\r\n[code]extension = php_memcache.dll[/code]\r\n\r\n<p>\r\nТеперь остается создать скрипт с функцией phpinfo(). Запускаем этот скрипт и ищем на странице секцию Memcache. Если секция найдена, то memcache установлен и готов к работе:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/3/memcached-3.jpg\" class=\"zoom\" title=\"Memcache установлен и готов к работе\"><img src=\"/files/blog/3/memcached-3-small.jpg\" alt=\"Memcache установлен и готов к работе\" /></a>\r\n</p>\r\n<p>\r\nПроверяем:\r\n</p>\r\n\r\n[php]<?php\r\nheader( \'Content-Type: text/html; charset=windows-1251\' );\r\n\r\n// Создаём новый объект\r\n$memcache = new Memcache();\r\n// Соединяемся с нашим сервером Memcached\r\n$memcache->connect(\'localhost\', 11211) or die (\'Не могу подключиться\');\r\n\r\n$version = $memcache->getVersion();\r\necho \'Версия сервера: \'.$version;\r\n\r\n// Закрываем соединение с сервером Memcached\r\n$memcache->close();\r\n?>[/php]\r\n\r\n<p>\r\nПример использования:\r\n</p>\r\n\r\n[php]<?php\r\nheader( \'Content-Type: text/html; charset=windows-1251\' );\r\n\r\n// Создаём новый объект\r\n$memcache = new Memcache();\r\n// Соединяемся с нашим сервером\r\n$memcache->connect(\'localhost\', 11211) or die (\'Не могу подключиться\');\r\n\r\n// Пытаемся получить объект с ключом current_time\r\n$time = @$memcache->get(\'current_time\');\r\nif ( empty($time) ) {\r\n    // Если в кэше нет объекта с ключом current_time, создадим его\r\n    // Объект current_time будет храниться 5 секунд и не будет сжат\r\n    $time = date(\'H:i:s\');\r\n    $memcache->set(\'current_time\', $time, false, 5);\r\n}\r\necho \'Текущее время: \'.$time;\r\n\r\n// Закрываем соединение с сервером\r\n$memcache->close();\r\n?>[/php]\r\n\r\n<p>\r\nСкачать сервер memcached и расширение php_memcache.dll можно <a href=\"/files/blog/3/memcached.zip\">здесь</a>.\r\n</p>\r\n<h4>Дополнительная информация:</h4>\r\n<ul>\r\n  <li><a href=\"http://ru.wikipedia.org/wiki/Memcached\">Материал из Википедии: Memcached</a></li>\r\n  <li><a href=\"http://memcached.org/\">Официальный сайт Memcached</a></li>\r\n  <li><a href=\"http://highload.com.ua/index.php/2010/05/07/memcache-vs-memached-%D1%81%D1%80%D0%B0%D0%B2%D0%BD%D0%B8%D0%B2%D0%B0%D0%B5%D0%BC-%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D1%8B-%D0%B4%D0%BB%D1%8F-php/\">memcache vs memcached — сравниваем клиенты</a></li>\r\n  <li><a href=\"http://www.php.net/manual/ru/book.memcache.php\">Документация memcache</a></li>\r\n  <li><a href=\"http://www.php.net/manual/ru/book.memcached.php\">Документация memcached</a></li>\r\n</ul>','2013-04-08 08:23:15'),(4,6,'Создание резервной копии БД','','','Утилита командной строки mysqldump, предназначена для создания резервных копий, одной, нескольких выбранных, или всех имеющихся баз данных, на случай аварийной ситуации или для переноса баз на другой сервер. Резервная копия представляет из себя текстовый файл, содержащий SQL инструкции для создания необходимых таблиц и заполнения их информацией.','<p>\r\nУтилита командной строки mysqldump, предназначена для создания резервных копий, одной, нескольких выбранных, или всех имеющихся баз данных, на случай аварийной ситуации или для переноса баз на другой сервер. Резервная копия представляет из себя текстовый файл, содержащий SQL инструкции для создания необходимых таблиц и заполнения их информацией.\r\n</p>\r\n\r\n<h2>Создание резервной копии БД</h2>\r\n\r\n<p>\r\nКоманда для создания резервной копии базы данных с помощью программы mysqldump выглядит следующим образом:\r\n</p>\r\n\r\n[code]mysqldump -u[user] -p[password] --databases [dbname] > [file][/code]\r\n\r\n<ul>\r\n  <li><strong>-u</strong>[user] — имя пользователя.</li>\r\n  <li><strong>-p</strong>[password] — пароль пользователя, указывается без пробела перед ним.</li>\r\n  <li><strong>--databases</strong> [dbname] (короткий вариант <strong>-B</strong>) — название одной или нескольких баз данных для дампа. При создании резервной копии одной базы данных, опцию <strong>--databases</strong> писать не обязательно, здесь она для большей наглядности. То есть название базы данных можно прописать сразу за паролем пользователя.</li>\r\n  <li><strong>&gt;</strong> — перенаправление вывода команды mysqldump в файл дампа.</li>\r\n</ul>\r\n\r\n<p>\r\nСоздадим резервную копию одной базы данных:\r\n</p>\r\n\r\n[code]mysqldump -uroot -pqwerty -B mydb > mydb.sql[/code]\r\n\r\n<p>\r\nОбратите внимание на отсутствие пробела после опции <strong>-p</strong>, сразу указываем пароль. В данном случае будет создан файл резервной копии <strong>mydb.sql</strong>, содержащий структуру и данные. Если вам не нужны данные из этой базы, а достаточно просто сохранить структуру таблиц, можно воспользоваться следующим вариантом:\r\n</p>\r\n\r\n[code]mysqldump -uroot -pqwerty --no-data -B mydb > mydb-no-data.sql[/code]\r\n\r\n<p>\r\nКлюч <strong>--no-data</strong> (сокращенный вариант <strong>-d</strong>) указывает mysqldump не сохранять данные в дамп.\r\n</p>\r\n<p>\r\nТакже есть возможность создавать резервные копии только необходимых таблиц выбранной базы данных:\r\n</p>\r\n\r\n[code]mysqldump -uroot -pqwerty -B drupal --tables access users > drupal-access-users.sql[/code]\r\n\r\n<p>\r\nЭта команда создает резервную копию таблиц <strong>access</strong> и <strong>users</strong>, указанных вслед за опцией <strong>--tables</strong>, из базы данных <strong>drupal</strong> и сохраняет в файл <strong>drupal-access-users.sql</strong>.\r\n</p>\r\n<p>\r\nДля создания дампа только структуры таблиц <strong>access</strong> и <strong>users</strong>, без данных:\r\n</p>\r\n\r\n[code]mysqldump -uroot -pqwerty --no-data -B drupal --tables access users > drupal-access-users-no-data.sql[/code]\r\n\r\n<p>\r\nДля создания резервной копии нескольких баз данных, достаточно перечислить их названия после опции <strong>--databases</strong> (<strong>-B</strong>):\r\n</p>\r\n\r\n[code]mysqldump -uroot -pqwerty --no-data -B drupal joomla > drupal-joomla.sql[/code]\r\n\r\n<p>\r\nЧтобы создать резервную копию всех имеющихся баз данных, нужно использовать опцию <strong>--all-databases</strong> (сокращенный вариант <strong>-A</strong>):\r\n</p>\r\n\r\n[code]mysqldump -uroot -pqwerty -A > all-databases.sql[/code]\r\n\r\n<h2>Восстановление данных из резервной копии</h2>\r\n\r\n<p>\r\nДля восстановления базы данных или таблиц из сохраненного ранее дампа достаточно воспользоваться стандартной программой-клиентом mysql, перенаправив в нее файл резервной копии:\r\n</p>\r\n\r\n[code]mysql -uroot -pqwerty < all-databases.sql[/code]\r\n\r\n<p>\r\nПосле выполнения команды, будут восстановлены все базы данных из резервной копии, которую мы создали несколькими строками выше. Таким же способом происходит и восстановление отдельных баз данных или таблиц.\r\n</p>\r\n\r\n\r\n[code]mysql -uroot -pqwerty mydb < mydb.sql[/code]\r\n\r\n<p>\r\nВ приведенном примере мы восстанавливаем из резервной копии базу данных <strong>mydb</strong>. Обратите внимание — при восстановлении таблиц нужно указывать, в какую именно базу данных вы ее хотите поместить:\r\n</p>\r\n\r\n[code]mysql -uroot -pqwerty mydb < mytable.sql[/code]\r\n\r\n<p>\r\nЗдесь мы восстанавливаем из резервной копии отдельную таблицу <strong>mytable</strong>, помещая ее в базу <strong>mydb</strong>.\r\n</p>\r\n\r\n<h2>Параметры программы mysqldump</h2>\r\n<dl>\r\n  <dt><strong>--help, -?</strong></dt>\r\n  <dd>Вывод справки по опциям и используемым переменным.</dd>\r\n  <dt><strong>--add-drop-database</strong></dt>\r\n  <dd>Добавляет команду DROP DATABASE перед каждой командой CREATE DATABASE.</dd>\r\n  <dt><strong>--add-drop-table</strong></dt>\r\n  <dd>Добавляет команду DROP TABLE перед каждой командой CREATE TABLE.</dd>\r\n  <dt><strong>--add-locks</strong></dt>\r\n  <dd>Обрамляет дамп командами LOCK TABLES и UNLOCK TABLES для ускорения операций вставки.</dd>\r\n  <dt><strong>--all-databases, -A</strong></dt>\r\n  <dd>Создает полную резервную копию всех баз данных текущего сервера.</dd>\r\n  <dt><strong>--allow-keywords</strong></dt>\r\n  <dd>Разрешить имена столбцов, совпадающие с зарезервированными ключевыми словами. К имени такого столбца добавляется префикс таблицы.</dd>\r\n  <dt><strong>--character-sets-dir=<em>путь</em></strong></dt>\r\n  <dd>Директории с установленными наборами символов кодировок.</dd>\r\n  <dt><strong>--comments, -i</strong></dt>\r\n  <dd>Добавить в файл дампа, дополнительную информацию (например, версию программы, версию MySQL, имя хоста), отменяется опцией --skip-comments.</dd>\r\n  <dt><strong>--compact</strong></dt>\r\n  <dd>Создает более компактный дамп. Использование данного параметра автоматически включает опции --skip-add-drop-table, --skip-add-locks, --skip-comments, --skip-disable-keys и --skip-set-charset.</dd> \r\n  <dt><strong>--compatible=<em>имя</em></strong></dt>\r\n  <dd>Данная опция пытается повысить совместимость создаваемого дампа с базой данных другого типа или с более старой версией MySQL. Возможные значения: ansi, mysql323, mysql40, postgresql, oracle, mssql, db2, maxdb, no_key_options, no_table_options или no_field_options. Можно использовать несколько значений, разделенных запятыми.</dd>\r\n  <dt><strong>--complete-insert, -c</strong></dt>\r\n  <dd>Использовать полную форму оператора INSERT, включая имена столбцов.</dd>\r\n  <dt><strong>--compress, -C</strong></dt>\r\n  <dd>Использовать компрессию, при пересылке данных между клиентом и сервером, при условии, что они оба поддерживают компрессию.</dd>\r\n  <dt><strong>--create-options</strong></dt>\r\n  <dd>Включать все MySQL опции при использовании оператора CREATE TABLE.</dd>\r\n  <dt><strong>--databases, -B</strong></dt>\r\n  <dd>Делать дамп нескольких баз данных, перечисленных после данной опции. Без этого параметра mysqldump воспринимает в качестве имени базы данных первое значение, остальные интерпретируются как имена таблиц.</dd> \r\n  <dt><strong>--default-character-set=<em>кодировка</em></strong></dt>\r\n  <dd>Данная опция устанавливает кодировку по умолчанию. Если не определена, используется utf8, в ранних версиях latin1.</dd>\r\n  <dt><strong>--delayed-insert</strong></dt>\r\n  <dd>Вместо оператора INSERT использовать INSERT DELAYED.</dd>\r\n  <dt><strong>--delete-master-logs</strong></dt>\r\n  <dd>Удалять бинарный лог на основном сервере репликаций после создания дампа. При использовании этой опции, автоматически включается опция --master-data.</dd>\r\n  <dt><strong>--disable-keys, -K</strong></dt>\r\n  <dd>Оператор INSERT для каждой таблицы, обрамляется выражением /*!40000 ALTER TABLE tbl_name DISABLE KEYS */ и /*!40000 ALTER TABLE tbl_name ENABLE KEYS */. Данная опция ускоряет загрузку при восстановлении из дампа для таблиц типа MyISAM за счет того, что индексы создаются после вставки всех данных.</dd> \r\n  <dt><strong>--dump-date</strong></dt>\r\n  <dd>Если включена опция --comments, добавлять дату создания дампа.</dd>\r\n  <dt><strong>--extended-insert, -e</strong></dt>\r\n  <dd>Использовать многострочный синтаксис оператора INSERT. Уменьшает размер дампа и ускоряет последующую вставку данных.</dd>\r\n  <dt><strong>--flush-logs, -F</strong></dt>\r\n  <dd>Переоткрыть лог-файлы перед созданием резервной копии. Старый файл будет сохранен с суффиксом -old. При использовании с опцией --all-databases (сокращенный вариант -A), будут переоткрыты лог-файлы каждой базы данных, для которой делается дамп.</dd>\r\n  <dt><strong>--flush-privileges</strong></dt>\r\n  <dd>Выполнять команду FLUSH PRIVILEGES после создания дампа базы данных.</dd>\r\n  <dt><strong>--force, -f</strong></dt>\r\n  <dd>Продолжать создание резервной копии даже в случае возникновения ошибки.</dd>\r\n  <dt><strong>--host=<em>имя_хоста</em>, -h <em>имя_хоста</em></strong></dt>\r\n  <dd>Указывает хост MySQL сервера. По умолчанию резервная копия делается для хоста localhost.</dd>\r\n  <dt><strong>--hex-blob</strong></dt>\r\n  <dd>Представлять бинарные данные полей BINARY, VARBINARY, BLOB и BIT в шестнадцатиричном формате (hex).</dd>\r\n  <dt><strong>--ignore-table=<em>имя_базы</em>.<em>имя_таблицы</em></strong></dt>\r\n  <dd>Не скидывать в дамп таблицу «<em>имя_таблицы</em>» из базы «<em>имя_базы</em>». Опцию нужно использовать повторно, для каждой игнорируемой таблицы.</dd>\r\n  <dt><strong>--insert-ignore</strong></dt>\r\n  <dd>Дописывать в оператор INSERT опцию IGNORE.</dd>\r\n  <dt><strong>--lock-all-tables, -x</strong></dt>\r\n  <dd>Блокировка всех таблиц, во всех базах, на время создания резервной копии. Данная опция автоматически отключает --single-transaction и --lock-tables.</dd>\r\n  <dt><strong>--lock-tables, -l</strong></dt>\r\n  <dd>Блокировка таблиц базы данных, на время создания резервной копии. При дампе всех баз данных с этой опцией, таблицы каждой базы блокируются отдельно. Для транзакционных таблиц, типа InnoDB и BDB, предпочтительней использовать опцию --single-transaction.</dd>\r\n  <dt><strong>--log-error=<em>имя_файла</em></strong></dt>\r\n  <dd>Писать ошибки и предупреждения в файл «<em>имя_файла</em>».</dd>\r\n  <dt><strong>--no-autocommit</strong></dt>\r\n  <dd>Включает операторы INSERT для каждой таблицы, в операторы SET AUTOCOMMIT и COMMIT, для увеличения скорости выполнения большого количества запросов INSERT.</dd>\r\n  <dt><strong>--no-create-db, -n</strong></dt>\r\n  <dd>Данная опция подавляет вывод в дамп оператора CREATE DATABASE, при использовании опций --databases и --all-databases.</dd>\r\n  <dt><strong>--no-create-info, -t</strong></dt>\r\n  <dd>Не писать оператор CREATE TABLE, для пересоздания каждой таблицы из резервной копии.\r\n  <dt><strong>--no-data, -d</strong></dt>\r\n  <dd>Не скидывать в дамп содержимое таблиц. Оставляет только операторы CREATE TABLE для создания структуры.\r\n  <dt><strong>--opt</strong></dt>\r\n  <dd>Групповая опция. Синоним включения опций --add-drop-table, --add-locks, --create-options, --disable-keys, --extended-insert, --lock-tables, --quick, --set-charset. Ускоряет общий процесс создания резервной копии, включена по умолчанию. Отключается опцией --skip-opt.\r\n  <dt><strong>--order-by-primary</strong></dt>\r\n  <dd>Сортировать ряды таблиц по первичному ключу или по первому уникальному индексу, если индекс существует. Полезна в случае создания дампа таблиц MyISAM с последующей вставкой в таблицы типа InnoDB. \r\n  <dt><strong>--password[=password], -p[password]</strong></dt>\r\n  <dd>Пароль пользователя, для подключения к серверу. Не забывайте, что имя должно идти сразу за опцией, без разделяющего пробела. Если указана только сама опция, без пароля, пароль будет запрошен из командной строки.\r\n  <dt><strong>--port=<em>номер_порта</em>, -P <em>номер_порта</em></strong></dt>\r\n  <dd>Номер порта для подключения к серверу по протоколу TCP/IP.\r\n  <dt><strong>--protocol=[TCP|SOCKET|PIPE|MEMORY]</strong></dt>\r\n  <dd>Использовать для подключения к серверу MySQL указанный протокол.\r\n  <dt><strong>--quick, -q</strong></dt>\r\n  <dd>Данная опция вынуждает Mysqldump, восстанавливать строки, по одной за раз, вместо того чтобы скидывать весь объем строк в буфер памяти и выписывать их оттуда. Очень полезна при создании резервных копий больших таблиц.\r\n  <dt><strong>--quote-names, -Q</strong></dt>\r\n  <dd>Обрамлять имена баз данных, таблиц и колонок, кавычками. Включена по умолчанию.\r\n  <dt><strong>--replace</strong></dt>\r\n  <dd>Использовать оператор REPLACE вместо INSERT. Начиная с версии MySQL 5.1.3.\r\n  <dt><strong>--result-file=<em>имя_файла</em>, -r <em>имя_файла</em></strong></dt>\r\n  <dd>Вывод результатов в указанный файл. Имейте в виду, если файл с таким именем уже существует, он будет перезаписан и в случае возникновения ошибки, данные могут быть потеряны.\r\n  <dt><strong>--routines, -R</strong></dt>\r\n  <dd>Записывать в дамп хранимые процедуры и функции. Для использования данной опции, необходимы права SELECT на таблицу proc, системной базы данных mysql. Дамп будет содержать операторы CREATE PROCEDURE и CREATE FUNCTION. При использовании этой опции, эти операторы не будут содержать атрибутов времени создания и модификации хранимых процедур и функций и после восстановления дампа они будут равны времени восстановления. Если вам необходимо сохранить исходные атрибуты времени, вместо использования данной опции, сделайте отдельный дамп таблицы mysql.proc, под именем пользователя, который имеет на это достаточные права. Опция появилась с версии MySQL 5.1.2.\r\n  <dt><strong>--set-charset</strong></dt>\r\n  <dd>Добавляет в дамп оператор SET NAMES со значением кодировки по умолчанию. По умолчанию данная опция включена, чтобы подавить, используйте --skip-set-charset.\r\n  <dt><strong>--single-transaction</strong></dt>\r\n  <dd>Выполняет оператор BEGIN SQL, перед началом создания резервной копии. Опция используется только для транзакционных таблиц, типа InnoDB. Только этот тип таблиц может быть сохранен в дамп в актуальном состоянии, после выполнения BEGIN SQL, и без блокирования приложения. Например таблицы типа MyISAM или MEMORY, могут измениться в процессе создания резервной копии с использованием данной опции, в итоге, информация в дампе будет противоречивой, неактуальной. Опции --single-transaction и --lock-tables являются взаимоисключающими.\r\n  <dt><strong>--socket=<em>путь_к_файлу_сокета</em>, -S <em>путь_к_файлу_сокета</em></strong></dt>\r\n  <dd>Использовать файл unix-сокета для подключения к localhost.\r\n  <dt><strong>--tables</strong></dt>\r\n  <dd>Имена, идущие за этой опцией, считаются именами таблиц.\r\n  <dt><strong>--triggers</strong></dt>\r\n  <dd>Включать в резервную копию триггеры, для каждой таблицы. Отменить действие опции можно с помощью --skip-triggers.\r\n  <dt><strong>--user=<em>имя_пользователя</em>, -u <em>имя_пользователя</em></strong></dt>\r\n  <dd>Имя пользователя для подключения к MySQL серверу.\r\n  <dt><strong>--verbose, -v</strong></dt>\r\n  <dd>Вывод служебной информации о ходе выполнения программы.\r\n  <dt><strong>--where=\'<em>where_условие</em>\', -w \'<em>where_условие</em>\'</strong></dt>\r\n  <dd>Скидывать в дамп информацию, выбранную по условию WHERE.\r\n  <dt><strong>--xml, -X</strong></dt>\r\n  <dd>Создать дамп в формате XML.\r\n</dl>','2013-04-10 04:42:29'),(5,6,'Создание PDF средствами PHP','','','Класс FPDF является чистым PHP кодом и легко подключается к скриптам командой include() или require(). Скачать класс и ознакомиться с документацией (в том числе на русском языке) можно на сайте www.fpdf.org.','<p>\r\nКласс FPDF является чистым PHP кодом и легко подключается к скриптам командой include() или require(). Скачать класс и ознакомиться с документацией (в том числе на русском языке) можно на сайте <a href=\"http://www.fpdf.org/\">www.fpdf.org</a>.\r\n</p>\r\n<p>\r\nОсновная проблема при использовании класса — файлы кириллических шрифтов. Возьмем в папке C:/Windows/Fonts файлы шрифтов Arial, Times New Roman и Courier New: \r\n<p>\r\n<ul>\r\n  <li>arial.ttf, arialbd.ttf, ariali.ttf, arialbi.ttf</li>\r\n  <li>times.ttf, timesbd.ttf, timesi.ttf, timesbi.ttf</li>\r\n  <li>cour.ttf, courbd.ttf, couri.ttf, courbi.ttf</li>\r\n</ul>\r\n<p>\r\nВместе с классом FPDF поставляется скрипт makefont/makefont.php для генерация файла описания шрифта. Использовать его просто. Для этого создаем РНР файл (скажем, <strong>mf.php</strong>):\r\n</p>\r\n\r\n[php]<?php\r\nrequire(\'makefont/makefont.php\');\r\n\r\nMakeFont(\'arial.ttf\', \'cp1251\');\r\nMakeFont(\'arialbd.ttf\', \'cp1251\');\r\nMakeFont(\'ariali.ttf\', \'cp1251\');\r\nMakeFont(\'arialbi.ttf\', \'cp1251\');\r\n\r\nMakeFont(\'times.ttf\', \'cp1251\');\r\nMakeFont(\'timesbd.ttf\', \'cp1251\');\r\nMakeFont(\'timesi.ttf\', \'cp1251\');\r\nMakeFont(\'timesbi.ttf\', \'cp1251\');\r\n\r\nMakeFont(\'cour.ttf\', \'cp1251\');\r\nMakeFont(\'courbd.ttf\', \'cp1251\');\r\nMakeFont(\'couri.ttf\', \'cp1251\');\r\nMakeFont(\'courbi.ttf\', \'cp1251\');\r\n?>[/php]\r\n\r\n<p>\r\nЗапустив скрипт <strong>mf.php</strong> в браузере, получим файлы:\r\n</p>\r\n<ul>\r\n  <li>arial.php, arialbd.php, ariali.php, arialbi.php и arial.z, arialbd.z, ariali.z, arialbi.z</li>\r\n  <li>times.php, timesbd.php, timesi.php, timesbi.php и times.z, timesbd.z, timesi.z, timesbi.z</li>\r\n  <li>cour.php, courbd.php, couri.php, courbi.php и cour.z, courbd.z, couri.z, courbi.z</li>  \r\n</ul>\r\n<p>\r\nВсе эти файлы вместе с файлами шрифтов\r\n</p>\r\n<ul>\r\n  <li>arial.ttf, arialbd.ttf, ariali.ttf, arialbi.ttf</li>\r\n  <li>times.ttf, timesbd.ttf, timesi.ttf, timesbi.ttf</li>\r\n  <li>cour.ttf, courbd.ttf, couri.ttf, courbi.ttf</li>\r\n</ul>\r\n</p>\r\nнадо поместить в директорию font класса. Впрочем, можно самому указать директорию, которая будет хранить шрифты. Для этого нужно определить константу FPDF_FONTPATH:\r\n</p>\r\n\r\n[php]define(\'FPDF_FONTPATH\',\'font/\');[/php]\r\n\r\n<p>\r\nА теперь попробуем сформировать PDF-документ, используя класс FPDF. Для начала создадим файл <strong>makepdf.php</strong>, который будет осуществлять вывод PDF-документа прямо в браузер. В одной папке с этим файлом поместим файл класса fpdf.php и папку font с вложенными в нее файлами кириллических шрифтов.\r\n</p>\r\n\r\n[php]<?php\r\ndefine(\'FPDF_FONTPATH\', \'font/\');\r\nrequire \'fpdf.php\';\r\n// Создадаем экземпляр класса\r\n$pdf = new FPDF();\r\n$pdf->Open();\r\n\r\n//Подключаем кириллические шрифты\r\n$pdf->AddFont(\'ArialMT\', \'\', \'arial.php\');\r\n$pdf->AddFont(\'Arial-BoldMT\', \'\', \'arialbd.php\');\r\n$pdf->AddFont(\'Arial-ItalicMT\', \'\', \'ariali.php\');\r\n$pdf->AddFont(\'Arial-BoldItalicMT\', \'\', \'arialbi.php\');\r\n/*\r\n$pdf->AddFont(\'TimesNewRomanPSMT\', \'\', \'times.php\');\r\n$pdf->AddFont(\'TimesNewRomanPS-BoldMT\', \'\', \'timesbd.php\');\r\n$pdf->AddFont(\'TimesNewRomanPS-ItalicMT\', \'\', \'timesi.php\');\r\n$pdf->AddFont(\'TimesNewRomanPS-BoldItalicMT\', \'\', \'timesbi.php\');\r\n\r\n$pdf->AddFont(\'CourierNewPSMT\', \'\', \'cour.php\');\r\n$pdf->AddFont(\'CourierNewPS-BoldMT\', \'\', \'courbd.php\');\r\n$pdf->AddFont(\'CourierNewPS-ItalicMT\', \'\', \'couri.php\');\r\n$pdf->AddFont(\'CourierNewPS-BoldItalicMT\', \'\', \'courbi.php\');\r\n*/\r\n// Добавляем страницу в документ\r\n$pdf->AddPage();\r\n// Задаем режим отображения\r\n$pdf->SetDisplayMode(\'real\', \'default\');\r\n// Устанавливаем шрифт и его размер\r\n$pdf-> SetFont(\'ArialMT\', \'U\', 22);\r\n// Устанавливаем цвет текста заголовка (красный)\r\n$pdf->SetTextColor(255, 0, 0);\r\n// Устанавливаем цвет заливки (желтый)\r\n$pdf->SetFillColor(255, 255, 0);\r\n// Задаем абсциссу и ординату текущей позиции\r\n$pdf->SetXY(20, 20);\r\n// Устанавливаем цвет для рисования контура вокруг заголовка (красный)\r\n$pdf->SetDrawColor(255, 0, 0);\r\n// Выводим ячейку (прямоугольную область), которая будет заголовком:\r\n// 100 - ширина ячейки; 10 - высота ячейки;\r\n// $text - текст внутри ячейки; 1 - толщина рамки;\r\n// 1 - текущая позиция после вывода ячейки будет в начале следующей строки;\r\n// \'C\' - выравнивание по центру; 1 - заливка фона ячейки\r\n$text = \'Золотой теленок\';\r\n$pdf->Cell(150, 10, $text, 1, 1, \'C\', 1);\r\n// Вставляем изображение, которое будет ссылкой\r\n$pdf->Image(\'image.jpg\', 10, 40, 0, 0, \'JPG\', \'http://www.fpdf.org/\');\r\n// Устанавливаем шрифт для текста\r\n$pdf->SetFont(\'ArialMT\', \'\', 12);\r\n// Устанавливаем позицию начала текста\r\n$pdf->SetXY (10, 140);\r\n// Устанавливаем цвет текста\r\n$pdf->SetTextColor(10, 10, 10);\r\n$pdf->Write(5, \'Пешеходов  надо  любить.  Пешеходы  составляют  большую  часть  человечества.  Мало  того  —  лучшую  его  часть.  Пешеходы  создали  мир.  Это  они  построили  города,  возвели  многоэтажные  здания,  провели канализацию  и  водопровод, замостили улицы и осветили их электрическими лампами.\');\r\n// Устанавливаем шрифт для текста\r\n$pdf-> SetFont(\'Arial-ItalicMT\', \'\', 12);\r\n$pdf->Write(5, \' Это они распространили культуру по всему свету, изобрели книгопечатание, выдумали порох, перебросили мосты через реки, расшифровали египетские иероглифы, ввели в употребление безопасную бритву, уничтожили торговлю рабами и установили, что из бобов сои можно изготовить сто четырнадцать вкусных питательных блюд.\');\r\n// Разрыв строки\r\n$pdf->Ln();\r\n$pdf->Ln();\r\n// Устанавливаем шрифт для текста\r\n$pdf-> SetFont(\'Arial-BoldMT\', \'\', 12);\r\n// Устанавливаем цвет текста (синий)\r\n$pdf->SetTextColor(0, 0, 255);\r\n$pdf->MultiCell(0, 5, \'И когда все было готово, когда родная планета приняла сравнительно благоустроенный вид, появились автомобилисты.\', 1, \'R\', 1);\r\n// Разрыв строки\r\n$pdf->Ln();\r\n$pdf->Ln();\r\n// Устанавливаем шрифт для текста\r\n$pdf->SetFont(\'Arial-BoldItalicMT\', \'\', 12);\r\n// Устанавливаем цвет текста (зеленый)\r\n$pdf->SetTextColor(0, 200, 0);\r\n$pdf->MultiCell(0, 5, \'Надо заметить, что автомобиль тоже был изобретен пешеходами. Но автомобилисты об этом как-то сразу забыли. Кротких и умных пешеходов стали давить. Улицы, созданные пешеходами, перешли во власть автомобилистов. Мостовые стали вдвое шире, тротуары сузились до размера табачной бандероли. И пешеходы стали испуганно жаться к стенам домов.\', 0, \'J\', 0);\r\n// Выводим созданный документ в браузер\r\n$pdf->Output(\'example.pdf\', \'I\');\r\n?>[/php]\r\n\r\n<p>\r\nКонструктор FPDF принимает следующие параметры:\r\n</p>\r\n<ul>\r\n  <li>Ориентация страницы: P — книжная, L — альбомная; по умолчанию P</li>\r\n  <li>Единица измерения: pt — точка, mm — миллиметр, cm — санатиметр, in — дюйм; по умолчанию mm</li>\r\n  <li>Размер документа: A3, A4, A5, Letter, Legal или специальный формат, выраженный в виде массива из двух элементов: ширина и высота</li>\r\n</ul>\r\n<p>\r\nПосле создания экземпляра класса необходимо указать используемые шрифты. Так как кириллический Arial не является в классе FPDF шрифтом, установленным по умолчанию, сначала надо подключить его при помощи метода <strong>AddFont()</strong>.\r\n</p>\r\n\r\n[php]AddFont(string family [, string style [, string file]])[/php]\r\n\r\n<p>\r\nПервым аргументом мы указываем наименование шрифта. Его можно посмотреть в сгенерированном РНР файле (значение переменной $name). Второй аргумент — форматирование текста (B — Bold, I — Italic и смешанный BI или IB). Если аргумент пустой, то шрифт обычный. Третий аргумент — РНР файл описания. Теперь эти шрифты можно применять в данном документе.\r\n</p>\r\n<p>\r\nРазмер шрифта установим методом <strong>SetFont()</strong>. Этот метод можно вызывать несколько раз в одном скрипте, в то время как добавление AddFont() делается один раз для каждого шрифта. Формат записи SetFont() следующий:\r\n</p>\r\n\r\n[php]SetFont(string family [, string style [, float size]])[/php]\r\n\r\n<p>\r\nКак видите, у функции SetFont() три параметра: название шрифта, стиль (пустая строка — обычный шрифт, B — жирный, I — курсив, U — подчеркнутый ) и размер. Этот метод может быть вызван до создания первой страницы и заданный шрифт будет сохраняться от страницы к странице. Если нужно изменить только размер шрифта, проще будет вызвать метод <strong>SetFontSize()</strong>.\r\n</p>\r\n<p>\r\nИспользуя функцию <strong>SetTextColor()</strong>, устанавливаем цвет шрифта документа. Цвет может быть представлен в RGB или grey scale. В нашем примере мы используем RGB-значения.\r\n</p>\r\n<p>\r\nНеобходимо заметить, что документ сначала создается в буфере и лишь потом, при вызове метода Output(), выводится в браузер. Поэтому общая схема работы с документом следующая: создаем в буфере документ методом Open(), затем добавляем в этот документ страничку методом AddPage(), формируем содержимое документа различными методами типа Cell(), Write(), Image() и, наконец, выводим его из буфера в браузер.\r\n</p>\r\n<p>\r\nМетод <strong>Cell()</strong> выводит ячейку (прямоугольная область) с заданными границами, цветом фона и строкой. Верхний левый угол ячейки соответствует текущей позиции. Текст может быть выровнен. После вызова этого метода текущая позиция перемещается вправо или на следующую строку. Возможно задать ссылку на текст.\r\n</p>\r\n\r\n[php]Cell(float w [, float h [, string txt [, mixed border [, int ln [, string align [, int fill [, mixed link]]]]]]])[/php]\r\n\r\n<p>\r\nМетод <strong>Write()</strong> выводит текст от текущей позиции. При достижении правой границы (или встрече символа <strong>\\n</strong>) строка обрывается и текст продолжает выводиться с левого края. После выполнения текущая позиция остается в конце текста. В текст можно добавлять ссылки.\r\n</p>\r\n\r\n[php]Write(float h, string txt [, mixed link])[/php]\r\n\r\n<p>\r\nМетод <strong>Image()</strong> выводит изображение на страницу. Поддерживаемые форматы: JPEG и PNG. Должен быть задан верхний левый угол. Размеры могут быть заданы разными вариантами:\r\n</p>\r\n<ul>\r\n  <li>прямое задание ширины и высоты изображения (выраженные в единицах, заданных пользователем);</li>\r\n  <li>один размер задается, а другой будет вычислен автоматически с сохранением пропорций оригинала;</li>\r\n  <li>ни один размер не задается, в этом случае изображение будет выведено с разрешением 72 dpi.\r\n</ul>\r\n\r\n[php]Image(string file, float x, float y [, float w [, float h [, string type [, mixed link]]]])[/php]\r\n\r\n<p>\r\nМетод <strong>Ln()</strong> выполняет разрыв строки. Текущая абсцисса возвращается к левому краю страницы, а ордината увеличивается на величину, указанную в параметре.\r\n</p>\r\n\r\n[php]Ln([float h])[/php]\r\n\r\n<p>\r\nMeтод <strong>Output()</strong> выводит документ в строку, локальный файл или в браузер. Если нужно, то сначала будет вызван метод Close() для закрытия документа.\r\n</p>\r\n\r\n[php]string Output([string name [, string dest]])[/php]\r\n\r\n<p>\r\nРезультат работы скрипта можно посмотреть <a href=\"/files/blog/5/example.pdf\">здесь</a>, а скачать исходные коды <a href=\"/files/blog/5/fpdf.zip\">здесь</a>.\r\n</p>','2011-12-18 16:14:34'),(6,5,'jQuery. Начало работы','','','Для начала работы с библиотекой jQuery достаточно загрузить один файл — саму библиотеку — и связать его с html-документом, используя тег &lt;script&gt;. Впрочем, можно поступить еще проще — подключить последнюю версию библиотеки с официального сайта.','<p>\r\nДля начала работы с библиотекой jQuery достаточно загрузить один файл — саму библиотеку — и связать его с html-документом, используя тег &lt;script&gt;. Впрочем, можно поступить еще проще — подключить последнюю версию библиотеки с официального сайта:\r\n</p>\r\n\r\n[js]<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.js\"></script>[/js]\r\n\r\n<h2>Выбор элементов страницы по id</h2>\r\n\r\n<p>\r\nПри использовании библиотеки jQuery для доступа к ее возможностям применяется функция <span style=\"color: blue;\">jquery()</span>. Впрочем, существует и сокращенная форма записи — <span style=\"color: blue;\">$()</span>.\r\n</p>\r\n<p>\r\nЧтобы обратиться к элементу по его id, мы вызываем функцию <span style=\"color: blue;\">$(\'#someid\'):\r\n</p>\r\n\r\n[html]<html>\r\n<head>\r\n<title>Выбор элемента по ID</title>\r\n<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n<script type=\"text/javascript\">[/html]\r\n[js]function setBackgroundColor() {\r\n    $(\'#third\').toggleClass(\'cyan\');\r\n}[/js]\r\n[html]</script>\r\n<style type=\"text/css\">\r\np.cyan {\r\n    background-color: cyan;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<h1>Выбор элемента по id</h1>\r\n<div>\r\n  <p>Первый параграф</p>\r\n  <p>Второй параграф</p>\r\n  <p id=\"third\">Третий параграф</p>\r\n  <p>Четвертый параграф</p>\r\n</div>\r\n<input type=\"button\" onclick=\"setBackgroundColor()\" value=\"Поменять фон\" />\r\n</body>\r\n</html>[/html]\r\n\r\n<p>\r\nВместо функции <span style=\"color: blue;\">toggleClass()</span> можно использовать функции <span style=\"color: blue;\">addClass()</span> и <span style=\"color: blue;\">removeClass()</span>:\r\n</p>\r\n\r\n[js]function setBackgroundColor() {\r\n    var third = $(\'#third\');\r\n    if ( ! third.hasClass(\'cyan\') )\r\n        third.addClass(\'cyan\');\r\n    else\r\n        third.removeClass(\'cyan\');\r\n}[/js]\r\n\r\n<h2>Выбор набора элементов</h2>\r\n\r\n<p>\r\nПередавая <em>селектор</em> функции <span style=\"color: blue;\">jquery()</span> — или в функцию <span style=\"color: blue;\">$()</span>, что, фактически, одно и то же, — мы выбираем набор элементов страницы.\r\n</p>\r\n<p>\r\nСелекторы позволяют указывать, с какими элементами страницы мы хотим работать. Давайте выберем все элементы <span style=\"color: blue;\">&lt;p&gt;</span> на странице, используя селектор <span style=\"color: blue;\">$(\'p\')</span>:\r\n</p>\r\n\r\n[html]<html>\r\n<head>\r\n<title>Выбор набора элементов</title>\r\n<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n<script type=\"text/javascript\">[/html]\r\n[js]function count() {\r\n    alert(\'На странице \' + $(\'p\').size() + \' параграфов\');\r\n}[/js]\r\n[html]</script>\r\n</head>\r\n<body>\r\n<h1>Выбор набора элементов</h1>\r\n<div>\r\n  <p>Первый параграф</p>\r\n  <p>Второй параграф</p>\r\n  <p>Третий параграф</p>\r\n  <p>Четвертый параграф</p>\r\n  <p>Пятый параграф</p>\r\n</div>\r\n<input type=\"button\" onclick=\"count()\" value=\"Количество параграфов\" />\r\n</body>\r\n</html>[/html]\r\n\r\n<p>\r\nС помощью функции <span style=\"color: blue;\">size()</span> мы определяем количество элементов <span style=\"color: blue;\">&lt;p&gt;</span> в возвращенном наборе и отображаем результат в диалоговом окне. Вместо функции <span style=\"color: blue;\">size()</span> можно использовать свойство <span style=\"color: blue;\">length</span>.\r\n</p>\r\n\r\n<h2>Выбор элементов по классу CSS</h2>\r\n\r\n<p>\r\nВыбирать элементы страницы можно по классу CSS. Например, если на странице существует несколько абзацев с классом <span style=\"color: blue;\">cyan</span>, мы можем их выбрать с помощью <span style=\"color: blue;\">$(\'p.cyan\')</span>:\r\n</p>\r\n\r\n[html]<html>\r\n<head>\r\n<title>Выбор элементов по классу CSS</title>\r\n<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n<script type=\"text/javascript\">[/html]\r\n[js]function setBold() {\r\n    $(\'p.cyan\').toggleClass(\'bold\');\r\n}[/js]\r\n[html]</script>\r\n<style type=\"text/css\">\r\np.cyan {\r\n    background-color: cyan;\r\n}\r\n.bold {\r\n    font-weight: bold;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<h1>Выбор элементов по классу CSS</h1>\r\n<div>\r\n  <p>Первый параграф</p>\r\n  <p class=\"cyan\">Второй параграф</p>\r\n  <p>Третий параграф</p>\r\n  <p class=\"cyan\">Четвертый параграф</p>\r\n  <p>Пятый параграф</p>\r\n</div>\r\n<input type=\"button\" onclick=\"setBold()\" value=\"Поменять шрифт\" />\r\n</body>\r\n</html>[/html]','2013-04-15 06:53:33'),(7,6,'Работа с Excel средствами PHP','','','PHPExcel — библиотека для создания и чтения данных из файлов формата OpenXML (который используется в MS Excel 2007). С ее помощью можно считывать из файлов, записывать в файлы, форматировать содержимое, работать с формулами и т.д.','<p>\r\nPHPExcel — библиотека для создания и чтения данных из файлов формата OpenXML (который используется в MS Excel 2007). С ее помощью можно считывать из файлов, записывать в файлы, форматировать содержимое, работать с формулами и т.д. Для работы PHPExcel требуется версия PHP 5.2 или выше, с установленными библиотеками Zip, XML и GD2.\r\n</p>\r\n\r\n<h2>Установка PHPExcel</h2>\r\n\r\n<p>\r\nПервым делом библиотеку необходимо скачать. Для этого переходим на <a href=\"http://phpexcel.codeplex.com/\">официальный сайт</a> библиотеки и скачиваем архив PHPExcel-1.7.8.zip. После распаковки мы получим несколько файлов и папок:\r\n</p>\r\n<ul>\r\n  <li>Classes</li>\r\n  <li>Documentation</li>\r\n  <li>Tests</li>\r\n  <li>changelog.txt</li>\r\n  <li>install.txt</li>\r\n  <li>license.txt</li>\r\n</ul>\r\n<p>\r\nФайлы — это различные описания по предыдущим версиям, лицензионное соглашение и очень краткая инструкция по установке. Далее, в папке Classes, содержится непосредственно сама библиотека PHPExcel — эту папку необходимо скопировать в корень нашего скрипта.\r\n</p>\r\n<p>\r\nВ папке Documentation содержится документация по библиотеке на английском языке. В папке Tests — примеры по использованию библиотеки.\r\n</p>\r\n\r\n<h2>Создание Excel-файла</h2>\r\n\r\n<p>\r\nИтак, давайте создадим файл <strong>makeexcel.php</strong> и начинаем работать с ним. Для начала нам необходимо подключить главный файл библиотеки PHPExcel.php (который находится в папке Classes) и создать объект класса PHPExcel:\r\n</p>\r\n\r\n[php]require_once \'Classes/PHPExcel.php\';\r\n$pExcel = new PHPExcel();[/php]\r\n\r\n<h3>Настройки листа книги Excel</h3>\r\n\r\n<p>\r\nДокумент Excel состоит из книг, а каждая книга в свою очередь, состоит из листов. Далее лист состоит из набора ячеек, доступ к которым осуществляется по координатам. То есть у нас есть столбцы, которые имеют буквенные имена (А, В, С и т.д) и есть строки, которые пронумерованы. Значит, что бы получить доступ к первой ячейке нужно указать код А1. Точно также мы с помощью библиотеки будем получать доступ к каждой ячейке.\r\n</p>\r\n<p>\r\nИтак, первым делом необходимо выбрать активный лист, на который мы будем выводить данные и получить объект этого листа:\r\n</p>\r\n\r\n[php]$pExcel->setActiveSheetIndex(0);\r\n$aSheet = $pExcel->getActiveSheet();[/php]\r\n\r\n<p>\r\nС помощью метода <span style=\"color: blue;\">setActiveSheetIndex(0)</span> указываем индекс (номер) активного листа. Нумерация листов начинается с нуля. Далее с помощью метода <span style=\"color: blue;\">getActiveSheet()</span> получаем объект этого активного листа, то есть другими словами получаем доступ к нему для работы. И сохраняем этот объект в переменную <span style=\"color: blue;\">$aSheet</span>.\r\n</p>\r\n<p>\r\nЕсли Вы захотите указать активным какой то другой лист, то вначале его необходимо создать, при помощи метода:\r\n</p>\r\n\r\n[php]$pExcel->createSheet();[/php]\r\n\r\n<p>\r\nЗатем, по аналогии, указываем индекс и получаем объект активного листа.\r\n</p>\r\n\r\n[php]// Ориентация страницы и  размер листа\r\n$aSheet->getPageSetup()\r\n       ->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_PORTRAIT);\r\n$aSheet->getPageSetup()\r\n       ->SetPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);\r\n// Поля документа\r\n$aSheet->getPageMargins()->setTop(1);\r\n$aSheet->getPageMargins()->setRight(0.75);\r\n$aSheet->getPageMargins()->setLeft(0.75);\r\n$aSheet->getPageMargins()->setBottom(1);\r\n// Название листа\r\n$aSheet->setTitle(\'Прайс-лист\');\r\n// Шапка и футер (при печати)\r\n$aSheet->getHeaderFooter()\r\n       ->setOddHeader(\'&CТД ТИНКО: прайс-лист\');\r\n$aSheet->getHeaderFooter()\r\n       ->setOddFooter(\'&L&B\'.$aSheet->getTitle().\'&RСтраница &P из &N\');\r\n// Настройки шрифта\r\n$pExcel->getDefaultStyle()->getFont()->setName(\'Arial\');\r\n$pExcel->getDefaultStyle()->getFont()->setSize(8);[/php]\r\n\r\n<p>\r\nВначале задаем ориентацию листа при помощи метода <span style=\"color: blue;\">setOrientation()</span>, которому передаем константу класса <span style=\"color: blue;\">PHPExcel_Worksheet_PageSetup</span>:\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">ORIENTATION_PORTRAIT</span> — книжная</li>\r\n  <li><span style=\"color: blue;\">ORIENTATION_LANDSCAPE</span> — альбомная</li>\r\n</ul>\r\n<p>\r\nОбратите внимание, что перед методом <span style=\"color: blue;\">setOrientation()</span> необходимо вызвать метод <span style=\"color: blue;\">getPageSetup()</span>, который предоставляет доступ к настройкам страницы.\r\n</p>\r\n<p>\r\nДалее вызываем метод <span style=\"color: blue;\">SetPaperSize()</span>, который позволяет задать размер страницы для печати. Ему передаем параметром константу <span style=\"color: blue;\">PAPERSIZE_A4</span> класса <span style=\"color: blue;\">PHPExcel_Worksheet_PageSetup</span>. Что означает, что размер листа страницы будет установлен А4.\r\n</p>\r\n<p>\r\nДалее устанавливаем поля документа, то есть отступы от краев документа. Отступы задаются в специальных символьных единицах. Вначале, обратите внимание, вызываем у объекта <span style=\"color: blue;\">$aSheet</span> метод <span style=\"color: blue;\">getPageMargins()</span>, который вернет объект класса, отвечающего за настройки полей страницы. Затем вызываем методы <span style=\"color: blue;\">setTop()</span>, <span style=\"color: blue;\">setRight()</span>, <span style=\"color: blue;\">setLeft()</span> и <span style=\"color: blue;\">setBottom()</span>.\r\n<p>\r\n<p>\r\nДалее при помощи метода <span style=\"color: blue;\">setTitle(\'Прайс лист\')</span> задаем название нашего листа.\r\n</p>\r\n<p>\r\nЕсли нужно, можно при печати выводить шапку и подвал листа:\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">setOddHeader()</span>;</li>\r\n  <li><span style=\"color: blue;\">setOddFooter()</span>;</li>\r\n</ul>\r\n<p>\r\nОбратите внимание на передаваемые параметры:\r\n</p>\r\n<ul>\r\n  <li>для шапки передаем строку <span style=\"color: blue;\">\'&CТД ТИНКО: прайс-лист\'</span>; метка <span style=\"color: red;\">&C</span> означает, что текст нужно расположить по центру.</li>\r\n  <li>для подвала передаем строку <span style=\"color: blue;\">\'&amp;L&amp;B\'.$aSheet->getTitle().\'&amp;RСтраница &amp;P из &amp;N\'</span>; это означает, что нужно вывести слева и жирным шрифтом (<span style=\"color: red;\">&amp;L&amp;B</span>) название листа (метод <span style=\"color: blue;\">$aSheet->getTitle()</span>), затем справа (<span style=\"color: red;\">&amp;R</span>) вывести номер страницы (<span style=\"color: red;\">&amp;P</span>) из общего количества страниц (<span style=\"color: red;\">&amp;N</span>).</li>\r\n</ul>\r\n<p>\r\nЗатем указываем настройки шрифта по умолчанию:\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">setName(\'Arial\')</span> — задаем имя шрифта;</li>\r\n  <li><span style=\"color: blue;\">setSize(8)</span> — задаем размер шрифта.</li>\r\n</ul>\r\n\r\n<h3>Наполнение документа данными</h3>\r\n\r\n<p>\r\nДля начала давайте зададим ширину столбцов (в символьных единицах), которые нам понадобятся:\r\n</p>\r\n\r\n[php]$aSheet->getColumnDimension(\'A\')->setWidth(3);\r\n$aSheet->getColumnDimension(\'B\')->setWidth(7);\r\n$aSheet->getColumnDimension(\'C\')->setWidth(20);\r\n$aSheet->getColumnDimension(\'D\')->setWidth(40);\r\n$aSheet->getColumnDimension(\'E\')->setWidth(10);[/php]\r\n\r\n<p>\r\nТеперь заполним несколько ячеек текстом:\r\n<p>\r\n\r\n[php]$aSheet->mergeCells(\'A1:E1\');\r\n$aSheet->getRowDimension(\'1\')->setRowHeight(20);\r\n$aSheet->setCellValue(\'A1\',\'ТД ТИНКО\');\r\n$aSheet->mergeCells(\'A2:E2\');\r\n$aSheet->setCellValue(\'A2\',\'Поставка технических средств безопасности\');\r\n$aSheet->mergeCells(\'A4:C4\');\r\n$aSheet->setCellValue(\'A4\',\'Дата создания прайс-листа\');[/php]\r\n\r\n<p>\r\nЗдесь мы сначала объеденяем ячейки с А1 до E1 при помощи метода <span style=\"color: blue;\">mergeCells()</span>, далее задаем высоту строки: вначале получаем доступ к строке 1 при помощи метода <span style=\"color: blue;\">getRowDimension(\'1\')</span>, затем задаем высоту — <span style=\"color: blue;\">setRowHeight(20)</span>. Далее при помощи метода <span style=\"color: blue;\">setCellValue(\'A1\',\'ТД ТИНКО\')</span>, устанавливаем значение ячейки А1.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/7/phpexcel.jpg\" class=\"zoom\"><img src=\"/files/blog/7/phpexcel-small.jpg\" alt=\"Создание Excel средствами PHP\" /></a>\r\n</p>\r\n<p>\r\nДалее давайте в ячейку D4 запишем текущую дату:\r\n</p>\r\n\r\n[php]// Записываем данные в ячейку\r\n$date = date(\'d-m-Y\');\r\n$aSheet->setCellValue(\'D4\',$date);\r\n// Устанавливает формат данных в ячейке (дата вида дд-мм-гггг)\r\n$aSheet->getStyle(\'D4\')->getNumberFormat()\r\n->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_DATE_XLSX14);[/php]\r\n\r\n<div class=\"note\">\r\nС помощью констант, определенных в классе PHPExcel_Style_NumberFormat, можно задать формат ячейки: FORMAT_GENERAL (общий), FORMAT_TEXT (текст), FORMAT_NUMBER (число), FORMAT_NUMBER_00 (число с дробной частью), FORMAT_PERCENTAGE (процент), FORMAT_PERCENTAGE_00 (процент с дробной частью) и т.п.\r\n</div>\r\n\r\n<p>\r\nТеперь, используя метод <span style=\"color: blue;\">setCellValue()</span>, а также цикл while() наполним данными наш прайс-лист:\r\n</p>\r\n\r\n[php]mysql_connect(DB_HOST, DB_USER, DB_PASS);\r\nmysql_query(\'SET NAMES utf8\');\r\nmysql_select_db(DB_NAME);\r\n\r\n// Создаем шапку таблички данных\r\n$aSheet->setCellValue(\'A6\',\'№\');\r\n$aSheet->setCellValue(\'B6\',\'Код\');\r\n$aSheet->setCellValue(\'C6\',\'Наименование\');\r\n$aSheet->setCellValue(\'D6\',\'Описание\');\r\n$aSheet->setCellValue(\'E6\',\'Цена\');\r\n\r\n$query = \"SELECT `code`, `name`, `description`, `price` FROM `products` WHERE 1 LIMIT 10\";\r\n$res = mysql_query( $query );\r\n\r\n$i = 1;\r\nwhile( $prd = mysql_fetch_assoc($res) ) {\r\n    $aSheet->setCellValue(\'A\'.($i+6), $i);\r\n    $aSheet->setCellValue(\'B\'.($i+6), $prd[\'code\']);\r\n    $aSheet->setCellValue(\'C\'.($i+6), $prd[\'name\']);\r\n    $aSheet->setCellValue(\'D\'.($i+6), $prd[\'description\']);\r\n    $aSheet->setCellValue(\'E\'.($i+6), $prd[\'price\']);\r\n    $i++;\r\n}[/php]\r\n\r\n<h3>Стилизация данных</h3>\r\n\r\n<p>\r\nДавайте немного украсим наш прайс-лист, то есть каждой ячейке добавим стилей. Для этого необходимо создать массив со стилями и при помощи метода <span style=\"color: blue;\">applyFromArray()</span>, применить этот массив к ячейке (или ячейкам):\r\n</p>\r\n\r\n[php]// массив стилей\r\n$style_wrap = array(\r\n    // рамки\r\n    \'borders\'=>array(\r\n        // внешняя рамка\r\n        \'outline\' => array(\r\n            \'style\'=>PHPExcel_Style_Border::BORDER_THICK,\r\n            \'color\' => array(\r\n                \'rgb\'=>\'006464\'\r\n            )\r\n        ),\r\n        // внутренняя\r\n        \'allborders\'=>array(\r\n            \'style\'=>PHPExcel_Style_Border::BORDER_THIN,\r\n            \'color\' => array(\r\n                \'rgb\'=>\'CCCCCC\'\r\n            )\r\n        )\r\n    )\r\n);\r\n\r\n$aSheet->getStyle(\'A1:F\'.($i+5))->applyFromArray($style_wrap);[/php]\r\n\r\n<p>\r\nТеперь, по аналогии, применим стили к остальным ячейкам:\r\n</p>\r\n\r\n[php]// Стили для верхней надписи (первая строка)\r\n$style_header = array(\r\n    // Шрифт\r\n    \'font\'=>array(\r\n        \'bold\' => true,\r\n        \'name\' => \'Times New Roman\',\r\n        \'size\' => 15,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'006464\'\r\n        )\r\n    ),\r\n    // Выравнивание\r\n    \'alignment\' => array(\r\n        \'horizontal\' => PHPExcel_STYLE_ALIGNMENT::HORIZONTAL_CENTER,\r\n        \'vertical\' => PHPExcel_STYLE_ALIGNMENT::VERTICAL_CENTER,\r\n    ),\r\n    // Заполнение цветом\r\n    \'fill\' => array(\r\n        \'type\' => PHPExcel_STYLE_FILL::FILL_SOLID,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'99CCCC\'\r\n        )\r\n    ),\r\n    \'borders\'=>array(\r\n        \'bottom\'=>array(\r\n            \'style\'=>PHPExcel_Style_Border::BORDER_THIN,\r\n            \'color\' => array(\r\n                \'rgb\'=>\'006464\'\r\n            )\r\n        )\r\n    )\r\n);\r\n$aSheet->getStyle(\'A1:E1\')->applyFromArray($style_header);\r\n\r\n// Стили для слогана компании (вторая строка)\r\n$style_slogan = array(\r\n    // шрифт\r\n    \'font\'=>array(\r\n        \'bold\' => true,\r\n        \'italic\' => true,\r\n        \'name\' => \'Times New Roman\',\r\n        \'size\' => 12,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'006464\'\r\n        )\r\n    ),\r\n    // выравнивание\r\n    \'alignment\' => array(\r\n        \'horizontal\' => PHPExcel_STYLE_ALIGNMENT::HORIZONTAL_CENTER,\r\n        \'vertical\' => PHPExcel_STYLE_ALIGNMENT::VERTICAL_CENTER,\r\n    ),\r\n    // заполнение цветом\r\n    \'fill\' => array(\r\n        \'type\' => PHPExcel_STYLE_FILL::FILL_SOLID,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'99CCCC\'\r\n        )\r\n    ),\r\n    //рамки\r\n    \'borders\' => array(\r\n        \'bottom\' => array(\r\n            \'style\'=>PHPExcel_Style_Border::BORDER_THIN,\r\n            \'color\' => array(\r\n                \'rgb\'=>\'006464\'\r\n            )\r\n        )\r\n    )\r\n);\r\n$aSheet->getStyle(\'A2:E2\')->applyFromArray($style_slogan);\r\n\r\n// Стили для текта возле даты\r\n$style_tdate = array(\r\n    // выравнивание\r\n    \'alignment\' => array(\r\n        \'horizontal\' => PHPExcel_STYLE_ALIGNMENT::HORIZONTAL_RIGHT,\r\n    ),\r\n    // заполнение цветом\r\n    \'fill\' => array(\r\n        \'type\' => PHPExcel_STYLE_FILL::FILL_SOLID,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'EEEEEE\'\r\n        )\r\n    ),\r\n    // рамки\r\n    \'borders\' => array(\r\n        \'right\' => array(\r\n            \'style\'=>PHPExcel_Style_Border::BORDER_NONE\r\n        )\r\n    )\r\n);\r\n$aSheet->getStyle(\'A4:D4\')->applyFromArray($style_tdate);\r\n \r\n// Стили для даты\r\n$style_date = array(\r\n    // заполнение цветом\r\n    \'fill\' => array(\r\n        \'type\' => PHPExcel_STYLE_FILL::FILL_SOLID,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'EEEEEE\'\r\n        )\r\n    ),\r\n    // рамки\r\n    \'borders\' => array(\r\n        \'left\' => array(\r\n            \'style\'=>PHPExcel_Style_Border::BORDER_NONE\r\n        )\r\n    ),\r\n);\r\n$aSheet->getStyle(\'E4\')->applyFromArray($style_date);\r\n \r\n// Стили для шапки таблицы (шестая строка)\r\n$style_hprice = array(\r\n    // выравнивание\r\n    \'alignment\' => array(\r\n    \'horizontal\' => PHPExcel_STYLE_ALIGNMENT::HORIZONTAL_CENTER,\r\n    ),\r\n    // заполнение цветом\r\n    \'fill\' => array(\r\n        \'type\' => PHPExcel_STYLE_FILL::FILL_SOLID,\r\n        \'color\'=>array(\r\n            \'rgb\' => \'CFCFCF\'\r\n        )\r\n    ),\r\n    // шрифт\r\n    \'font\'=>array(\r\n        \'bold\' => true,\r\n        /* \'italic\' => true, */\r\n        \'name\' => \'Times New Roman\',\r\n        \'size\' => 10\r\n    ),\r\n);\r\n$aSheet->getStyle(\'A6:E6\')->applyFromArray($style_hprice);\r\n\r\n// Cтили для данных в таблице прайс-листа\r\n$style_price = array(\r\n    \'alignment\' => array(\r\n    \'horizontal\' => PHPExcel_STYLE_ALIGNMENT::HORIZONTAL_LEFT,\r\n    )\r\n);\r\n$aSheet->getStyle(\'A7:E\'.($i+5))->applyFromArray($style_price);[/php]\r\n\r\n<h3>Сохранение документа</h3>\r\n\r\n<p>\r\nОсталось только сохранить наш документ:\r\n</p>\r\n\r\n[php]/*\r\n$objWriter = PHPExcel_IOFactory::createWriter($pExcel, \'Excel5\');\r\n$objWriter->save(\'simple.xls\');\r\n*/\r\n$objWriter = PHPExcel_IOFactory::createWriter($pExcel, \'Excel2007\');\r\n$objWriter->save(\'simple.xlsx\');[/php]\r\n\r\n<p>\r\nили так\r\n</p>\r\n\r\n[php]/*\r\n$objWriter = new PHPExcel_Writer_Excel5($pExcel);\r\n$objWriter->save(\'simple.xls\');\r\n*/\r\n$objWriter = new PHPExcel_Writer_Excel2007($pExcel);\r\n$objWriter->save(\'simple.xlsx\');[/php]\r\n\r\n<p>\r\nЕсли нужно вывести документ в браузер\r\n</p>\r\n\r\n[php]/*\r\nheader(\'Content-Type:application/vnd.ms-excel\');\r\nheader(\'Content-Disposition:attachment;filename=\"simple.xls\"\');\r\n$objWriter = new PHPExcel_Writer_Excel5($pExcel);\r\n*/\r\nheader(\'Content-Type:xlsx:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\');\r\nheader(\'Content-Disposition:attachment;filename=\"simple.xlsx\"\');\r\n$objWriter = new PHPExcel_Writer_Excel2007($pExcel);\r\n$objWriter->save(\'php://output\');[/php]\r\n\r\n<p>\r\nПервый заголовок указывает браузеру тип открываемого контента — это документ формата Excel. Второй — говорит браузеру, что документ необходимо отдать пользователю на скачивание под именем simple.xlsx.\r\n</p>\r\n\r\n<h3>Добавление формул</h3>\r\n\r\n<div class=\"note\">\r\n<p>\r\nФормула Excel — это математическое выражение, которое создается для вычисления результата и которое может зависеть от содержимого других ячеек. Формула в ячейке Excel может содержать данные, ссылки на другие ячейки, а также обозначение действий, которые необходимо выполнить.\r\n</p>\r\n<p>\r\nИспользование ссылок на ячейки позволяет пересчитывать результат по формулам, когда происходят изменения содержимого ячеек, включенных в формулы. Формулы Excel начинаются со знака =. Скобки (&nbsp;) могут использоваться для определения порядка математических операции.\r\n</p>\r\n<p>\r\nПримеры формул Excel: <span style=\"color: blue; border: 1px solid #ddd;\">=27+36</span>, <span style=\"color: blue; border: 1px solid #ddd;\">=А1+А2-АЗ</span>, <span style=\"color: blue; border: 1px solid #ddd;\">=SUM(А1:А5)</span>, <span style=\"color: blue; border: 1px solid #ddd;\">=MAX(АЗ:А5)</span>, <span style=\"color: blue; border: 1px solid #ddd;\">=(А1+А2)/АЗ</span>.\r\n</p>\r\n</div>\r\n\r\n<p>\r\nPHPExcel тоже поддерживает добавление формул в ячейки. Установить формулу можно так:\r\n</p>\r\n\r\n[php]// формула для вычисления суммы\r\n$formula = \'=SUM(D2:D4)\';\r\n$aSheet->setCellValue(\'D5\', $formula);[/php]\r\n\r\n<p>\r\n<img src=\"/files/blog/7/phpexcel-2.jpg\" alt=\"Добавление формул\" />\r\n</p>\r\n\r\n<h2>Чтение Excel-файла</h2>\r\n\r\n<p>\r\nСамый простой вариант — считать все таблицы (на всех листах) и записать данные в трехмерный массив:\r\n</p>\r\n\r\n[php]// Подключаем библиотеку\r\nrequire_once \'Classes/PHPExcel.php\';\r\n$pExcel = PHPExcel_IOFactory::load(\'simple.xlsx\');\r\n\r\n// Цикл по листам Excel-файла\r\nforeach ($pExcel->getWorksheetIterator() as $worksheet) {\r\n    // выгружаем данные из объекта в массив\r\n    $tables[] = $worksheet->toArray();\r\n}[/php]\r\n\r\n<p>\r\nТеперь можно вывести массив:\r\n</p>\r\n\r\n[php]// Цикл по листам Excel-файла\r\nforeach( $tables as $table ) {\r\n    echo \'<table border=\"1\">\';\r\n    // Цикл по строкам\r\n    foreach($table as $row) {\r\n        echo \'<tr>\';\r\n        // Цикл по колонкам\r\n        foreach( $row as $col ) {\r\n            echo \'<td>\'.$col.\'</td>\';\r\n        }\r\n        echo \'</tr>\';\r\n    }\r\n    echo \'</table>\';\r\n}[/php]\r\n\r\n<p>\r\nДля получения значения отдельной ячейки:\r\n</p>\r\n[php]// выбираем лист, с которым будем работать\r\n$pExcel->setActiveSheetIndex(0);\r\n$aSheet = $pExcel->getActiveSheet();\r\n// получаем доступ к ячейке по номеру строки \r\n// (нумерация с единицы) и столбца (нумерация с нуля) \r\n$cell = $aSheet->getCellByColumnAndRow($col, $row);\r\n// читаем значение ячейки\r\n$value = $cell->getValue()[/php]\r\n\r\n<p>\r\nили так:\r\n</p>\r\n\r\n[php]$value = $pExcel->getActiveSheet()->getCellValue(\'B2\')[/php]\r\n\r\n<p>\r\nЕще два примера:\r\n</p>\r\n\r\n[php]// Цикл по листам Excel-файла\r\nforeach( $pExcel->getWorksheetIterator() as $worksheet ) {\r\n    echo \'<h2>Лист «\'.$worksheet->getTitle().\'»</h2>\';\r\n    echo \'<table border=\"1\">\';\r\n    // Цикл по строкам\r\n    foreach( $worksheet->getRowIterator() as $row ) {\r\n        echo \'<tr>\';\r\n        // Цикл по колонкам\r\n        foreach( $row->getCellIterator() as $cell ) {\r\n            $value = $cell->getValue();\r\n            // $calcValue = $cell->getCalculatedValue()\r\n            // $dataType = PHPExcel_Cell_DataType::dataTypeForValue($value);\r\n            echo \'<td>\'.$value.\'</td>\';\r\n        }\r\n        echo \'</tr>\';\r\n    }\r\n    echo \'</table>\';\r\n}[/php]\r\n\r\n\r\n[php]// Цикл по листам Excel-файла\r\nforeach ($pExcel->getWorksheetIterator() as $worksheet) {\r\n    $worksheetTitle     = $worksheet->getTitle();\r\n    $highestRow         = $worksheet->getHighestRow(); // например, 10\r\n    $highestColumn      = $worksheet->getHighestColumn(); // например, \'E\'\r\n    $highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn);\r\n    $nrColumns = ord($highestColumn) - 64;\r\n    echo \'<h2>Лист «\'.$worksheetTitle.\'» \';\r\n    echo $nrColumns . \' колонок (A-\' . $highestColumn . \') \';\r\n    echo \' и \' . $highestRow . \' строк.</h2>\';\r\n    echo \'<table border=\"1\">\';\r\n    // Цикл по строкам\r\n    for ($row = 1; $row <= $highestRow; $row++) {\r\n        echo \'<tr>\';\r\n        // Цикл по колонкам\r\n        for ($col = 0; $col < $highestColumnIndex; $col++) {\r\n            $cell = $worksheet->getCellByColumnAndRow($col, $row);\r\n            echo \'<td>\'.$cell->getValue().\'</td>\';\r\n        }\r\n        echo \'</tr>\';\r\n    }\r\n    echo \'</table>\';\r\n}[/php]','2013-04-17 05:27:33'),(8,5,'Доступ к элементам формы','','','Как правило, доступ к элементу HTML осуществляется по его идентификатору с помощью метода document.getElementById(). Но для доступа к HTML-формам чаще всего используется свойство document.forms. Свойство document.forms представляет собой массив всех форм на текущей странице.','<p>\r\nКак правило, доступ к элементу HTML осуществляется по его идентификатору с помощью метода <span style=\"color: blue;\">document.getElementById()</span>. Но для доступа к HTML-формам чаще всего используется свойство <span style=\"color: blue;\">document.forms</span>. Свойство <span style=\"color: blue;\">document.forms</span> представляет собой массив всех форм на текущей странице. Поэтому если на странице находится лишь одна форма, то она доступна с помощью первого элемента массива <span style=\"color: blue;\">document.forms[0]</span>. С другой стороны, форме можно присвоить имя:\r\n</p>\r\n\r\n[html]<form name=\"myForm\">\r\n...\r\n</form>[/html]\r\n\r\n<p>\r\nТогда она доступна с помощью элемента массива <span style=\"color: blue;\">document.forms[\'myForm\']</span>.\r\n</p>\r\n<p>\r\nОбращение ко всем элементам формы также осуществляется по имени, которое служит в качестве индекса массива в свойстве <span style=\"color: blue;\">elements</span> формы. Допустим, например, что у первой формы на странице имеется элемент с атрибутом <span style=\"color: blue;\">name=\"element1\"</span>. Тогда доступ к этому элементу осуществляется с помощью следующего кода JavaScript:\r\n</p>\r\n\r\n[js]document.forms[0].elements[\'element1\'][/js]\r\n\r\n<p>\r\nИмеется и более краткая форма доступа к информации формы. Например, сокращенная форма доступа к элементу <span style=\"color: blue;\">element1</span> формы <span style=\"color: blue;\">myForm</span> выглядит так:\r\n</p>\r\n\r\n[js]document.myForm.element1[/js]\r\n\r\n<p>\r\nКаждый элемент формы поддерживает свойство <span style=\"color: blue;\">form</span>, указывающее на ту форму, в которой находится данный элемент. Поэтому выражение <span style=\"color: blue;\">this.form</span> часто используется в коде для упрощения доступа к форме на уровне элементов полей данной формы, не прибегая к массиву <span style=\"color: blue;\">document.forms</span>.\r\n</p>\r\n\r\n<h2>Доступ к текстовым полям</h2>\r\n\r\n<p>\r\nВ HTML поддерживаются три вида текстовых полей:\r\n</p>\r\n<ul>\r\n  <li>Однострочные текстовые поля: <span style=\"color: blue;\">&lt;input type=\"text\" /&gt;</span></li>\r\n  <li>Многострочные текстовые поля: <span style=\"color: blue;\">&lt;textarea&gt;...&lt;/textarea&gt;</span></li>\r\n  <li>Поля ввода паролей: <span style=\"color: blue;\">&lt;input type=\"password\" /&gt;</span></li>\r\n</ul>\r\n<p>\r\nНесмотря на то что эти поля действуют по-разному в браузере, доступ к ним в JavaScript осуществляется практически одинаково. Атрибут <span style=\"color: blue;\">value</span> каждого из этих полей содержит текст внутри поля. Его можно использовать как для чтения, так и для записи текста в поле.\r\n</p>\r\n<p>\r\nВ приведенном ниже фрагменте кода демонстрируется два следующих приема: доступ к свойству поля и применение выражения <span style=\"color: blue;\">this.form</span> для упрощенного доступа к форме данного поля.\r\n</p>\r\n\r\n[js]function showText(f) {\r\n  window.alert(f.elements[\'textfield\'].value);\r\n}[/js]\r\n\r\n[html]<form>\r\n  <input type=\"text\" name=\"textfield\" />\r\n  <input type=\"button\" value=\"Show text\" onclick=\"showText(this.form);\" />\r\n</form>[/html]\r\n\r\n<h2>Доступ к флажкам</h2>\r\n\r\n<p>\r\nФлажок в HTML-форме может находиться в двух состояниях: установленном и сброшенном. Поэтому обращение к флажку их кода JavaScript чаще всего осуществляется для определения его состояния.\r\n</p>\r\n<p>\r\nСвойство checked флажка возвращает логическое значение <span style=\"color: blue;\">true</span>, если флажок установлен, а в противном случае — логическое значение <span style=\"color: blue;\">false</span>.\r\n</p>\r\n\r\n[js]function showStatus(f) {\r\n  window.alert(\'The checkbox is \' +\r\n  (f.elements[\'chkbox\'].checked ? \'checked.\' : \'not checked.\'));\r\n}[/js]\r\n\r\n[html]<form>\r\n  <input type=\"checkbox\" name=\"chkbox\" />\r\n  <input type=\"button\" value=\"Show status\" onclick=\"showStatus(this.form);\" />\r\n</form>[/html]\r\n\r\n<h2>Доступ к радио-кнопкам</h2>\r\n\r\n<p>\r\nВ отличие от флажков, кнопки-переключатели в HTML-форме всегда организуются в группы. Это означает, что у нескольких кнопок-переключателей может быть один и тот же атрибут <span style=\"color: blue;\">name</span>, но разные его значения. Следовательно, доступ ко всей группе кнопок-переключателей как к массиву осуществляется следующим образом:\r\n</p>\r\n\r\n[js]document.forms[номер].elements[группа_кнопок][/js]\r\n\r\n<p>\r\nКаждый элемент данного массива представляет собой отдельную кнопку-переключатель и поддерживает свойство <span style=\"color: blue;\">checked</span>. Это свойство действует таким же образом, как и аналогичное свойство флажка, возвращая логическое значение <span style=\"color: blue;\">true</span>, если кнопка-переключатель выбрана, а в противном случае — логическое значение <span style=\"color: blue;\">false</span>.\r\n</p>\r\n<p>\r\nС помощью свойства value доступно также значение каждой кнопки-переключателя. В приведенном ниже фрагменте кода осуществляется циклическое обращение к каждой кнопке-переключателю и вывод ее состояния.\r\n</p>\r\n\r\n[js]function showStatus(f) {\r\n  var s= \'\';\r\n  for (var i=0; f.elements[\'radiobutton\'].length; i++) {\r\n    var bth = f.elements[\'radiobutton\'][i];\r\n    s += btn.value + \':\' + btn.checked + \"\\n\";\r\n  }\r\n  window.alert(s);\r\n}[/js]\r\n\r\n[html]<form>\r\n  <input type=\"radio\" name=\"radiobutton\" value=\"R\" />red\r\n  <input type=\"radio\" name=\"radiobutton\" value=\"G\" />green\r\n  <input type=\"radio\" name=\"radiobutton\" value=\"B\" />blue\r\n  <input type=\"button\" value=\"Show status\" onclick=\"showStatus(this.form);\" />\r\n</form>[/html]\r\n\r\n<h2>Доступ к спискам выбора</h2>\r\n\r\n<p>\r\nСписок выбора в HTML-форме состоит из двух элементов. Так, элемент <span style=\"color: blue;\">&lt;select&gt;</span> закладывает основание для такого списка и предоставляет его имя, хранящееся в атрибуте <span style=\"color: blue;\">name</span>. А отдельные элементы списка представлены элементами <span style=\"color: blue;\">&lt;option&gt;</span>, предоставляющими следующие данные: надпись элемента списка, отображаемую в окне браузера, а также значение, посылаемое серверу при предъявлении формы.\r\n</p>\r\n<p>\r\nВ JavaScript имеются два средства для доступа к данным из списка выбора:\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">selectedIndex</span>. Предоставляет начинающийся с нуля индекс элемента. выбранного в настоящий момент из списка. Значение <span style=\"color: blue;\">-1</span> этого свойства означает, что ни один из элементов не был выбран, что справедливо только для списков, состоящих из более чем одного элемента.</li>\r\n  <li><span style=\"color: blue;\">options</span>. Массив со всеми элементами выбора из списка. Каждый такой элемент поддерживает свойство <span style=\"color: blue;\">selected</span>. Если это свойство принимает логическое значение <span style=\"color: blue;\">true</span>, значит, данный элемент выбран из списка.</li>\r\n</ul>\r\n<p>\r\nКак правило, свойства <span style=\"color: blue;\">selectedIndex</span> оказывается достаточно для проверки. А свойство <span style=\"color: blue;\">options</span> очень удобно для доступа к выбранному из списка элементу. В этом случае атрибут <span style=\"color: blue;\">value</span> выбранного элемента списка предоставляет данные, отправляемые серверу, а свойство <span style=\"color: blue;\">text</span> возвращает надпись данного элемента, отображаемую в окне браузера.\r\n</p>\r\n<p>\r\nВ приведенном ниже листинге осуществляется доступ ко всем важным данным, связанным с выбранным элементом списка:\r\n</P>\r\n\r\n[js]function showStatus(f) {\r\n  var index = f.elements[\'selectionlist\'].selectedIndex;\r\n  if (index == -1) {\r\n    window.alert(\'No element selected\');\r\n  } else {\r\n    var element = f.elements[\'selectionlist\'].options[index];\r\n    window.alert(\'Element #\' + index + \r\n      \' (caption: \' + element.text + \r\n      \', value: \' + element.value + \r\n      \') selected\');\r\n  }\r\n}[/js]\r\n\r\n[html]<form>\r\n  <select name=\"selectionlist\" size=\"3\">\r\n    <option value=\"R\">red</option>\r\n    <option value=\"G\">green</option>\r\n    <option value=\"B\">blue</option>\r\n  </select>\r\n  <input type=\"button\" value=\"Show status\" onclick=\"showStatus(this.form);\" />\r\n</form>[/html]','2008-07-01 06:50:10'),(9,6,'Построение диаграмм средствами GD','','','Сегодня практически каждый интернет-ресурс строится на динамическом отображении представленной информации. Сегодня мы рассмотрим лишь одну из таких возможностей, а именно реализацию динамических диаграмм с использованием библиотеки GD.','<p>\r\nСегодня практически каждый интернет-ресурс строится на динамическом отображении представленной информации. Сегодня мы рассмотрим лишь одну из таких возможностей, а именно реализацию динамических диаграмм с использованием библиотеки GD.\r\n</p>\r\n\r\n<h2>Построение гистограммы</h2>\r\n\r\n<p>\r\nПусть значения столбцов задаются в процентах от 0 до 100 в массиве <span style=\"color: blue;\">$rows</span>:\r\n</p>\r\n\r\n[php]<?php\r\n// Значение столбцов от 0 до 100\r\n$rows = array(80, 75, 53, 32, 20);\r\n\r\n// Ширина изображения\r\n$width = 200;\r\n// Высота изображения\r\n$height = 200;\r\n// Ширина одного столбца\r\n$rowWidth = 30;\r\n// Ширина интервала между столбцами\r\n$rowInterval = 5;\r\n\r\n// Создаем пустое изображение\r\n$img = imagecreatetruecolor($width, $height);\r\n\r\n// Заливаем изображение белым цветом\r\n$white = imagecolorallocate($img, 255, 255, 255); \r\nimagefill($img, 0, 0, $white);\r\n\r\nfor($i = 0, $y1 = $height, $x1 = 0; $i < count($rows); $i++) {\r\n  // Формируем случайный цвет для каждого из столбца\r\n  $color = imagecolorallocate($img, rand(0, 255), rand(0, 255), rand(0, 255)); \r\n  // Нормирование высоты столбца\r\n  $y2 = $y1 - $rows[$i]*$height/100;\r\n  // Определение второй координаты столбца\r\n  $x2 = $x1 + $rowWidth;\r\n  // Отрисовываем столбец\r\n  imagefilledrectangle($img, $x1, $y1, $x2, $y2, $color);\r\n  // Между столбцами создаем интервал в $row_interval пикселей\r\n  $x1 = $x2 + $rowInterval;\r\n}\r\n\r\n// Выводим изображение в браузер, в формате GIF\r\nheader (\"Content-type: image/gif\"); \r\nimagegif($img);\r\n?>[/php]\r\n\r\n<p>\r\nРезультат работы скрипта:\r\n</p>\r\n\r\n<p>\r\n<img src=\"/files/blog/9/diag1.gif\" alt=\"Построение гистограммы\" />\r\n</p>\r\n\r\n<p>\r\nКак видите, скрипт использует значения элементов массива <span style=\"color: blue;\">$rows</span> как процентные величины для формирования в цикле <span style=\"color: blue;\">for</span> гистограммы. На каждой итерации цикла формируется случайный цвет, который используется для отрисовки очередного столбца гистограммы. Столбец формируется при помощи функции <span style=\"color: blue;\">imagefilledrectangle()</span>, которая рисует заполненный прямоугольник.\r\n</p>\r\n\r\n<h2>Построение круговой диаграммы</h2>\r\n\r\n<p>\r\nПусть доли секторов заданы массивом <span style=\"color: blue;\">$row</span> из предыдущего скрипта. При построении круговой диаграммы следут помнить, что в круге 360 градусов, и значения массива <span style=\"color: blue;\">$rows</span> следут нормировать таким образом, чтобы их сумма равнялась 360 градусам.\r\n</p>\r\n\r\n[php]<?php\r\n// Значения столбцов от 0 до 100\r\n$rows = array(80, 75, 53, 32, 20);\r\n// Нормируем значения массива $rows таким образом, \r\n// чтобы их сумма составляла 360 градусов\r\n$sum = array_sum($rows);\r\nfor($i = 0; $i < count($rows); $i++) {\r\n  $rows[$i] = intval( round($rows[$i]*360/$sum) );\r\n}\r\n\r\n// Создаем пустое изображение размером 201x201 пикселей\r\n$img =  imagecreatetruecolor(201, 201);\r\n// Определение белого цвет на изображении\r\n$white = imagecolorallocate($img, 255, 255, 255); \r\nimagefill($img, 0, 0, $white);\r\n\r\n// Переменные $cx и $cy определяют центр круговой диаграммы\r\n$cx = $cy = 100;\r\n// Переменные $w и $h определяют ширину и высоту диаграммы\r\n$w = $h = 200;\r\n\r\n$start = 0;\r\nforeach ($rows as $value) {\r\n  // Формируем случайный цвет для каждого сектора\r\n  $color = imagecolorallocate($img, rand(0, 255), rand(0, 255), rand(0, 255)); \r\n  // Определяем конечный угол сектора\r\n  $angle_sector = $start + $value;\r\n  // Отрисовываем сектор\r\n  imagefilledarc($img, $cx, $cy, $w, $h, $start, $angle_sector, $color, \"IMG_ARC_PIE || IMG_ARC_EDGED\");\r\n  // Увеличиваем значение начального угла сектора\r\n  $start += $value;\r\n}\r\n// Вывод изображения в окно браузера\r\nheader (\"Content-type: image/gif\"); \r\nimagegif($img);                      \r\n?>[/php]\r\n\r\n<p>\r\nРезультат работы скрипта:\r\n</p>\r\n\r\n<p>\r\n<img src=\"/files/blog/9/diag2.gif\" alt=\"Построение круговой диаграммы\" />\r\n</p>','2008-06-28 07:34:13'),(10,5,'Динамическое формирование списка и таблицы','','','При использовании AJAX часто возникает задача динамического формирования элементов HTML-страницы с использованием DOM — на основе данных, полученных от сервера. Сегодня мы рассмотрим примеры составления списка и таблицы.','<p>\r\nПри использовании AJAX часто возникает задача динамического формирования элементов HTML-страницы с использованием DOM — на основе данных, полученных от сервера. Сегодня мы рассмотрим примеры составления списка и таблицы.\r\n</p>\r\n\r\n<h2>Формирование списка из данных JavaScript</h2>\r\n\r\n<p>\r\nВ приведенном ниже коде функция createList() принимает в качестве аргумента массив и преобразует его в список:\r\n</p>\r\n\r\n[js]function createList(data) {\r\n  var list = document.createElement(\"ul\");\r\n  for (var i = 0; i < data.length; i++) {\r\n    var newItem = document.createElement(\"li\");\r\n    var newText = document.createTextNode(data[i]);\r\n    newItem.appendChild(newText);\r\n    list.appendChild(newItem);\r\n  }\r\n  return list;\r\n}\r\n\r\nwindow.onload = function() {\r\n  var list = createList([\"one\", \"two\", \"three\", \"four\", \"five\"]);\r\n  document.body.appendChild(list);\r\n}[/js]\r\n\r\n<h2>Формирование таблицы из данных JavaScript</h2>\r\n\r\n<p>\r\nСоставить целую таблицу немного сложнее. Для этого прежде всего придется воспользоваться элементом &lt;tbody&gt;, а возможно, &lt;tfoot&gt; либо обоими элементами вместе. В противном случае в окне браузера Internet Explorer ничего не появится.\r\n</p>\r\n<p>\r\nВспомогательная функция createTable() воспринимает многомерный массив, каждый элемент которого представляет собой отдельный список значений, отображаемых в таблице. Первый элемент массива содержит текст заголовка каждого столбца таблицы.\r\n</p>\r\n<p>\r\nКак видите, приведенный ниже код для составления таблицы получился длиннее, но, с другой стороны, сохраняется тот же подход: сначала создаются узлы, включая и текстовые, а затем они присоединяются друг к другу в нужном порядке:\r\n</p>\r\n\r\n[js]function createTable(data) {\r\n  var table = document.createElement(\"table\");\r\n  var thead = document.createElement(\"thead\");\r\n  var tr = document.createElement(\"tr\");\r\n  for (var i = 0; i < data[0].length; i++) {\r\n    var th = document.createElement(\"th\");\r\n    var newText = document.createTextNode(data[0][i]);\r\n    th.appendChild(newText);\r\n    tr.appendChild(th);\r\n  }\r\n  thead.appendChild(tr);\r\n  table.appendChild(thead);\r\n  \r\n  var tbody = document.createElement(\"tbody\");\r\n  for (var i = 1; i < data.length; i++) {\r\n    var tr = document.createElement(\"tr\");\r\n    for (var j=0; j < data[i].length; j++) {\r\n      var td = document.createElement(\"td\");\r\n      var newText = document.createTextNode(data[i][j]);\r\n      td.appendChild(newText);\r\n      tr.appendChild(td);\r\n    }\r\n    tbody.appendChild(tr);\r\n  }\r\n\r\n  table.appendChild(tbody);\r\n  return table;\r\n}\r\n\r\nwindow.onload = function() {\r\n  var table = createTable([\r\n    [\"1\", \"2\", \"3\", \"4\", \"5\"],\r\n    [\"one\", \"two\", \"three\", \"four\", \"five\"],\r\n    [\"un\", \"deux\", \"trois\", \"quatre\", \"cinq\"],\r\n    [\"один\", \"два\", \"три\", \"четыре\", \"пять\"]]);\r\n  document.body.appendChild(table);\r\n}[/js]','2008-06-10 09:13:41'),(13,6,'Отправка данных из скрипта методом POST','','','HTML форма позволяет пользователю сформировать POST-запрос, который затем отсылается браузером. Мы сформируем такой запрос скриптом. Пусть у нас есть простая форма, состоящая из двух полей и кнопки для отправки данных.','<p>\r\nHTML форма позволяет пользователю сформировать POST-запрос, который затем отсылается браузером. Мы сформируем такой запрос скриптом. Пусть у нас есть простая форма, состоящая из двух полей и кнопки для отправки данных:\r\n</p>\r\n\r\n[html]<form action=\"/handler/action.php\" method=\"post\"> \r\nИмя: <input name=\"name\" type=\"text\" /><br/>\r\nПароль: <input name=\"password\" type=\"password\" /><br/>\r\n<input name=\"submit\" type=\"submit\" value=\"Отправить\" />\r\n</form>[/html]\r\n\r\n<p>\r\nОбработчик формы <span style=\"color: blue;\">action.php</span> выводит в браузер текст, введенный в поля формы:\r\n</p>\r\n\r\n[php]<?php\r\necho \'Имя: \'.$_POST[\'name\'].\'<br/>\';\r\necho \'Пароль: \'.$_POST[\'password\'].\'<br/>\';\r\n?>[/php]\r\n\r\n<p>\r\nМетод POST, в отличие от метода GET, посылает данные не в строке запроса, а в области данных, после заголовков. Передача данных аналогична методу GET: группы <span style=\"color: blue;\">name=value</span> объединяются при помощи амперсанда (&amp;):\r\n</p>\r\n\r\n[code]name=Евгений&password=qwerty[/code]\r\n\r\n<p>\r\nКроме того, необходимо учитывать, что данные передаются в текстовом виде, поэтому все национальные символы следует подвергать кодированию при помощи функции <span style=\"color: blue;\">urlencode()</span>.\r\n</p>\r\n\r\n<h2>Отправка данных методом POST через сокеты</h2>\r\n\r\n[php]<?php\r\n$hostname = \'localhost\';\r\n$path = \'/handler/action.php\';\r\n$content = \'\';\r\n// Устанавливаем соединение с сервером $hostname\r\n$fp = fsockopen($hostname, 80, $errno, $errstr, 30); \r\n// Проверяем успешность установки соединения\r\nif (!$fp) die(\'<p>\'.$errstr.\' (\'.$errno.\')</p>\'); \r\n\r\n// Данные HTTP-запроса\r\n$data = \'name=\'.urlencode(\'Евгений\').\'&password=\'.urlencode(\'qwerty\');\r\n// Заголовок HTTP-запроса\r\n$headers = \'POST \'.$path.\" HTTP/1.1\\r\\n\"; \r\n$headers .= \'Host: \'.$hostname.\"\\r\\n\"; \r\n$headers .= \"Content-type: application/x-www-form-urlencoded\\r\\n\";\r\n$headers .= \'Content-Length: \'.strlen($data).\"\\r\\n\\r\\n\";\r\n// Отправляем HTTP-запрос серверу\r\nfwrite($fp, $headers.$data); \r\n// Получаем ответ\r\nwhile ( !feof($fp) ) $content .= fgets($fp, 1024);\r\n// Закрываем соединение\r\nfclose($fp);\r\n// Выводим ответ в браузер  \r\necho $content;\r\n?>[/php]\r\n\r\n<p>\r\nРезультат работы скрипта выглядит примерно так\r\n</p>\r\n\r\n[code]HTTP/1.1 200 OK\r\nDate: Sat, 28 Jun 2008 07:53:19 GMT\r\nServer: Apache/2.0.55 (Win32) PHP/5.2.1\r\nX-Powered-By: PHP/5.2.1\r\nContent-Length: 42\r\nContent-Type: text/html\r\n\r\nИмя - Евгений<br/>\r\nПароль - qwerty<br/>[/code]\r\n\r\n<h2>Отправка данных методом POST с использованием CURL</h2>\r\n\r\n<p>\r\nПомимо сокетов, обеспечивающих низкоуровневое обращение к серверу, PHP располагает специальным расширением CURL (Client URL Library).\r\n</p>\r\n\r\n[php]<?php\r\n// Задаем адрес удаленного сервера\r\n$curl = curl_init(\"http://localhost/handler/action.php\");\r\n// Передача данных осуществляется методом POST\r\ncurl_setopt($curl, CURLOPT_POST, 1);\r\n// Задаем POST-данные\r\n$data = \'name=Евгений&password=qwerty\';\r\ncurl_setopt($curl, CURLOPT_POSTFIELDS, $data);\r\n// Выполняем запрос и выводим ответ в браузер\r\ncurl_exec($curl);\r\n// Закрываем CURL соединение\r\ncurl_close($curl);\r\n?>[/php]\r\n\r\n<p>\r\nС помощью функции <span style=\"color: blue;\">curl_init()</span> задается адрес удаленного сервера и путь к файлу на нем. В отличие от функции <span style=\"color: blue;\">fsockopen()</span>, необходимо задавать адрес полностью, включая префикс <span style=\"color: blue;\">http://</span>, т.е. расширение CURL позволяет работать с несколькими видами протоколов (HTTP, HTTPS, FTP). Если соединение с указанным сервером происходит успешно, функция <span style=\"color: blue;\">curl_init()</span> возвращает дескриптор соединения, который используется во всех остальных функциях библиотеки.\r\n</p>\r\n<p>\r\nДля того, чтобы сообщить CURL о том, что данные будут передаваться методом POST, необходимо задать параметр <span style=\"color: blue;\">CURLOPT_POST</span>. POST-данные устанавливаются при помощи параметра <span style=\"color: blue;\">CURLOPT_POSTFIELDS</span>.\r\n</p>\r\n<p>\r\nПо умолчанию библиотека удаляет HTTP-заголовки, возвращаемые сервером. Однако CURL можно настроить на выдачу заголовков, если установить при помощи функции <span style=\"color: blue;\">curl_setopt()</span> ненулевое значение параметра <span style=\"color: blue;\">CURLOPT_HEADER</span>.\r\n</p>\r\n<p>\r\n<strong>P.S.</strong> Из-за ошибки библиотеки сокетов протокол HTTP 1.1 под Windows работает медленно. При работе скрипта использующего сокеты под управлением этой ОС, лучше использовать версию HTTP 1.0.\r\n</p>','2008-06-28 09:38:25'),(14,6,'Работа с XML средствами PHP','PHP XML-документ DOM DOMDocument загрузка выгрузка узел node nodeName nodeValue getAttribute setAttribute childNodes appendChild createElement','','Давайте начнем с самого простого: загрузки и выгрузки XML-документа с использованием DOM. Основной класс, который мы будем использовать, это DOMDocument. Через него можно создавать новые документы, сохранять их, а также загружать существующие.','<p>\r\nДавайте начнем с самого простого: загрузки и выгрузки XML-документа с использованием DOM. Основной класс, который мы будем использовать, это <a href=\"http://www.php.net/manual/ru/class.domdocument.php\">DOMDocument</a>. Через него можно создавать новые документы, сохранять их, а также загружать существующие.\r\n</p>\r\n\r\n[php]<?php\r\n// Создаём XML-документ версии 1.0 с кодировкой utf-8\r\n$dom = new DOMDocument(\'1.0\', \'utf-8\'); \r\n// Текст XML-документа\r\n$strXML = \'<?xml version=\"1.0\" encoding=\"utf-8\"?><root><item>Первый</item><item>Второй</item></root>\';\r\n// Загружаем XML-документ из строки\r\n$dom->loadXML($strXML);\r\n/*\r\n// Загружаем XML-документ из файла \r\n$dom->load(\'doc.xml\');\r\n// Убираем лишние пробелы и отступы\r\n$dom->preserveWhiteSpace = false;\r\n*/\r\n// Сохраняем XML-документ как строку и выводим в браузер\r\n$xml = $dom->saveXML();\r\necho htmlspecialchars($xml);\r\n// Сохраняем XML-документ в файл\r\n$dom->save(\'doc.xml\');\r\n?>[/php]\r\n\r\n<h2>Как получить список дочерних узлов</h2>\r\n\r\n[php]<?php\r\n// Создаём XML-документ\r\n$dom = new DOMDocument(\'1.0\', \'utf-8\'); \r\n// Текст XML-документа\r\n$strXML = \'<?xml version=\"1.0\" encoding=\"utf-8\"?><root><item>Первый</item><item>Второй</item></root>\';\r\n// Загружаем XML-документ из строки\r\n$dom->loadXML($strXML);\r\n// Получаем корневой элемент <root>\r\n$root = $dom->documentElement;\r\n// Получаем список дочерних узлов <root>\r\n$childs = $root->childNodes;\r\nfor ($i = 0; $i < $childs->length; $i++) {\r\n    $child = $childs->item($i);\r\n    // Выводим информацию об узле\r\n    echo $child->nodeName . \' : \' . $child->nodeValue . \'<br/>\'; \r\n  }\r\n?>[/php]\r\n\r\n<p>\r\nСвойство <span style=\"color: blue;\">nodeName</span> содержит название элемента (в данном случае, <span style=\"color: blue;\">item</span>), а <span style=\"color: blue;\">nodeValue</span> содержимое элемента (в данном случае, «<span style=\"color: blue;\">Первый</span>» и «<span style=\"color: blue;\">Второй</span>»).\r\n</p>\r\n\r\n<h2>Работа с атрибутами узлов</h2>\r\n\r\n<p>\r\nДавайте посмотрим, как получить значение атрибута узла, устанавить новое значение, создать и удалить атрибут:\r\n</p>\r\n\r\n[php]<?php\r\n// Создаём XML-документ\r\n$dom = new DOMDocument(\'1.0\', \'utf-8\'); \r\n// Текст XML-документа\r\n$strXML = \'<?xml version=\"1.0\" encoding=\"utf-8\"?><root><item id=\"1\">Первый</item><item>Второй</item><item>Третий</item></root>\';\r\n// Загружаем XML-документ из строки\r\n$dom->loadXML($strXML);\r\n// Получаем корневой элемент <root>\r\n$root = $dom->documentElement;\r\n// Первый дочерний элемент <root>\r\n$first = $root->firstChild;\r\n// Следующий сестринский элемент\r\n$second = $first->nextSibling;\r\n// Последний дочерний элемент <root>\r\n$third = $root->lastChild;\r\n// Выводим информацию о первом дочернем элементе <root>\r\necho \'Элемент \' . $first->nodeName . \', значение «\' . $first->nodeValue . \'», атрибут id=\' . $first->getAttribute(\'id\');\r\n// Устанавливаем атрибут id для второго дочернего элемента <root>\r\n$second->setAttribute(\'id\', 2);\r\n// Устанавливаем атрибут id для третьего дочернего элемента <root>\r\n$attr = $dom->createAttribute(\'id\');\r\n$attr->value = 3;\r\n$third->appendChild($attr);\r\n// Удаляем атрибут id для третего дочернего элемента <root>\r\nif ( $third->hasAttribute(\'id\') ) $third->removeAttribute(\'id\');\r\n?>[/php]\r\n\r\n<h2>Создание XML-документа</h2>\r\n\r\n[php]<?php\r\n// Создаём XML-документ\r\n$dom = new DOMDocument(\'1.0\', \'utf-8\');\r\n// Создаём корневой элемент <users>\r\n$root = $dom->createElement(\'users\');\r\n$dom->appendChild($root);\r\n$users = array( \r\n    array(\'id\' => 1, \'name\' => \'Николай Петров\', \'email\' => \'petrov.n@mail.ru\'),\r\n    array(\'id\' => 2, \'name\' => \'Петр Иванов\', \'email\' => \'ivanov.p@mail.ru\'),\r\n    array(\'id\' => 3, \'name\' => \'Сергей Смирнов\', \'email\' => \'smirnov.s@mail.ru\') \r\n);\r\n\r\nforeach ( $users as $value ) {\r\n    // Создаём узел <user>\r\n    $user = $dom->createElement(\'user\');\r\n    // Добавляем дочерний элемент для <users>\r\n    $root->appendChild($user);\r\n    // Устанавливаем атрибут id для узла <user>\r\n    $user->setAttribute(\'id\', $value[\'id\']);\r\n    // Создаём узел <name> с текстом внутри\r\n    $name = $dom->createElement(\'name\', $value[\'name\']);\r\n    // Добавляем дочерний элемент для <user>\r\n    $user->appendChild($name);\r\n    // Создаём узел <email>\r\n    $email = $dom->createElement(\'email\');\r\n    // Создаем текстовой узел\r\n    $text = $dom->createTextNode($value[\'email\']);\r\n    // Создаем текстовой узел внутри конструкции <![CDATA[ ... ]]>\r\n    // $text = $dom->createCDATASection($value[\'email\']);\r\n    // Добавляем текстовой узел для <email>\r\n    $email->appendChild($text);\r\n    // Добавляем дочерний элемент для <user>\r\n    $user->appendChild($email);\r\n}\r\n// Сохраняем полученный XML-документ в файл\r\n$dom->save(\'users.xml\');\r\n?>[/php]\r\n\r\n<p>\r\nСодержимое файла users.xml:\r\n</p>\r\n\r\n[xml]<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<users>\r\n  <user id=\"1\">\r\n    <name>Николай Петров</name>\r\n    <email>petrov.n@mail.ru</email>\r\n  </user>\r\n  <user id=\"2\">\r\n    <name>Петр Иванов</name>\r\n    <email>ivanov.p@mail.ru</email>\r\n  </user>\r\n  <user id=\"3\">\r\n    <name>Сергей Смирнов</name>\r\n    <email>smirnov.s@mail.ru</email>\r\n  </user>\r\n</users>[/xml]\r\n\r\n<h2>Извлечение данных из xml-документа</h2>\r\n\r\n<p>\r\nДавайте теперь извлечем данные из документа users.xml обратно в массив:\r\n</p>\r\n\r\n[php]<?php\r\n// Создаём XML-документ\r\n$dom = new DOMDocument(\'1.0\', \'utf-8\');\r\n// Загружаем XML-документ из файла\r\n$dom->load(\'users.xml\');\r\n// Получаем корневой элемент\r\n$root = $dom->documentElement;\r\n// Получаем дочерние элементы корневого элемента\r\n$users = $root->childNodes;\r\n// Перебираем полученные элементы\r\nforeach ($users as $user) {\r\n    // Получаем значение атрибута id узла <user>	\r\n    $id = $user->getAttribute(\'id\');\r\n    // Получаем дочерние элементы узла <user>\r\n    $info = $user->childNodes;\r\n    // Получаем значение узла <name>\r\n    $name = $info->item(0)->nodeValue;\r\n    // Получаем значение узла <email>\r\n    $email = $info->item(1)->nodeValue;\r\n    // Записываем данные в массив\r\n    $array[] = array(\'id\' => $id, \'name\' => $name, \'email\' => $email);\r\n}\r\nprint_r($array);\r\n?>[/php]\r\n\r\n<p>\r\nРезультат работы скрипта:\r\n</p>\r\n\r\n[code]Array\r\n(\r\n    [0] => Array\r\n        (\r\n            [id] => 1\r\n            [name] => Николай Петров\r\n            [email] => petrov.n@mail.ru\r\n        )\r\n    [1] => Array\r\n        (\r\n            [id] => 2\r\n            [name] => Петр Иванов\r\n            [email] => ivanov.p@mail.ru\r\n        )\r\n    [2] => Array\r\n        (\r\n            [id] => 3\r\n            [name] => Сергей Смирнов\r\n            [email] => smirnov.s@mail.ru\r\n        )\r\n)[/code]','2013-04-24 04:35:33'),(15,6,'SimpleXML. Начало работы','','','Расширение SimpleXML предоставляет очень простой и легкий в использовании набор инструментов для преобразования XML в объект, с которым можно затем работать через его свойства и с помощью итераторов. SimpleXML присутствует в PHP начиная с версии 5.','<p>\r\nРасширение SimpleXML предоставляет очень простой и легкий в использовании набор инструментов для преобразования XML в объект, с которым можно затем работать через его свойства и с помощью итераторов. SimpleXML присутствует в PHP начиная с версии 5.\r\n</p>\r\n<p>\r\nДля наглядности,  в качестве примера будем использовать XML, описывающий простой кулинарный рецепт, взятый с <a href=\"http://ru.wikipedia.org/wiki/XML\">википедии</a>.\r\n</p>\r\n\r\n[xml]<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<recipe name=\"хлеб\" preptime=\"5\" cooktime=\"180\">\r\n  <title>Простой хлеб</title>\r\n  <ingredient amount=\"3\" unit=\"стакан\">Мука</ingredient>\r\n  <ingredient amount=\"0.25\" unit=\"грамм\">Дрожжи</ingredient>\r\n  <ingredient amount=\"1.5\" unit=\"стакан\">Тёплая вода</ingredient>\r\n  <ingredient amount=\"1\" unit=\"чайная ложка\">Соль</ingredient>\r\n  <instructions>\r\n   <step>Смешать все ингредиенты и тщательно замесить.</step>\r\n   <step>Закрыть тканью и оставить на один час в тёплом помещении.</step>\r\n   <step>Замесить ещё раз, положить на противень и поставить в духовку.</step>\r\n  </instructions>\r\n</recipe>[/xml]\r\n\r\n<h2>Загрузка XML</h2>\r\n\r\n<p>\r\nПрежде чем начать обрабатывать данные, их нужно сначала загрузить. Для этого достаточно использовать функцию simplexml_load_file(). Она принимает имя файла, и возвращает объект типа SimpleXMLElement. И с этим объектом уже можно будет работать.\r\n</p>\r\n\r\n[php]$xml = simplexml_load_file(\'recipe.xml\');\r\nprint_r($xml);[/php]\r\n\r\n[code]SimpleXMLElement Object\r\n(\r\n  [@attributes] => Array\r\n      (\r\n          [name] => хлеб\r\n          [preptime] => 5\r\n          [cooktime] => 180\r\n      )\r\n  [title] => Простой хлеб\r\n  [ingredient] => Array\r\n      (\r\n          [0] => Мука\r\n          [1] => Дрожжи\r\n          [2] => Тёплая вода\r\n          [3] => Соль\r\n      )\r\n  [instructions] => SimpleXMLElement Object\r\n      (\r\n          [step] => Array\r\n              (\r\n                  [0] => Смешать все ингредиенты и тщательно замесить.\r\n                  [1] => Закрыть тканью и оставить на один час в тёплом помещении.\r\n                  [2] => Замесить ещё раз, положить на противень и поставить в духовку.\r\n              )\r\n      )\r\n)[/code]\r\n\r\n<p>\r\nКроме того, существует еще и функция simplexml_load_string(), которая берет XML не из файла, а из строки.\r\n</p>\r\n\r\n[php]$str = file_get_contents(\'recipe.xml\');\r\n$xml = simplexml_load_string($str);[/php]\r\n\r\n<h2>Получение данных</h2>\r\n\r\n<p>\r\nSimpleXML предоставляет очень удобный способ получения данных из XML. К примеру, для того чтобы получить какой-либо узел документа достаточно просто обратится к этому узлу по имени:\r\n</p>\r\n\r\n[php]// Выводит содержимое элемента <title>\r\necho $xml->title;[/php]\r\n\r\n<p>\r\nПоскольку ингредиентов у нас несколько, то $xml->ingredient будет массивом из четырех элементов. Перебрать все ингредиенты можно так:\r\n</p>\r\n\r\n[php]foreach ( $xml->ingredient as $ingredient ) {\r\n    echo $ingredient . \'<br/>\';\r\n}[/php]\r\n\r\n<p>\r\nДля того что бы получить, к примеру, третий ингредиент (теплая вода), достаточно обратиться к нему по индексу:  \r\n</p>\r\n\r\n[php]$xml->ingredient[2]; // элементы массивы нумеруются с нуля[/php]\r\n\r\n<p>\r\nШаги приготовления (step) являются дочерними для элемента instructions, чтобы получить их, нужно сначала получить instructions:\r\n</p>\r\n\r\n[php]echo $xml->instructions->step; // выводит текст первого шага[/php]\r\n\r\n<h2>Атрибуты</h2>\r\n\r\n<p>\r\nРаботать с атрибутами тоже очень легко. Они доступны как ассоциативный массив своего элемента. То есть, для того что бы получить название рецепта (атрибут name корневого узла recipe), достаточно написать:\r\n</p>\r\n\r\n[php]echo $xml[\'name\'];[/php]\r\n\r\n<p>\r\nИли, для получения количества первого ингредиента можно написать так:\r\n</p>\r\n\r\n[php]echo $xml->ingredient[\'amount\'];[/php]\r\n\r\n<p>\r\nСейчас мы рассмотрели только один способ получения данных: когда нам уже известны названия узлов и атрибутов. Но случается и так, когда структура XML файла заранее не известна, но нам нужно его обработать. SimpleXML предоставляет и такую возможность.\r\n</p>\r\n\r\n<h2>Получение дочерних узлов</h2>\r\n\r\n<p>\r\nМетод children() возвращает список дочерних элементов. В нашем случае $xml — корневая ветвь, и если написать:\r\n</p>\r\n\r\n[php]$nodes = $xml->children();\r\necho $nodes[0];[/php]\r\n\r\n<p>\r\nто получим содержимое элемента &lt;title&gt;, а если:\r\n</p>\r\n\r\n[php]$nodes = $xml->children();\r\necho $nodes[2];[/php]\r\n\r\n<p>\r\nто второй ингредиент.\r\n</p>\r\n<p>\r\nОбойти все дочерние ветви первого уровня легко можно при помощи цикла foreach:\r\n</p>\r\n\r\n[php]echo \'<ul>\';\r\nforeach ( $xml->children() as $node ) {\r\n    if ( count($node) == 0 ) echo \'<li>\' . $node . \'</li>\';\r\n}\r\necho \'</ul>\';[/php]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[html]<ul>\r\n  <li>Простой хлеб</li>\r\n  <li>Мука</li>\r\n  <li>Дрожжи</li>\r\n  <li>Тёплая вода</li>\r\n  <li>Соль</li>\r\n</ul>[/html]\r\n\r\n<p>\r\nФукция count() позволяет определить количество дочерних узлов.\r\n</p>\r\n<p>\r\nДля того, чтобы получить имя текущий ветви, используется метод getName():\r\n</p>\r\n\r\n[php]$nodes = $xml->children();\r\necho $nodes[0]->getName(); // выведет title[/php]\r\n\r\n<h2>Получение атрибутов</h2>\r\n\r\n<p>\r\nПолучить список атрибутов для текущего элемента поможет метод attributes(). По функционалу и механизму работы он аналогичен методу children(), за тем исключением, что здесь идет работа с атрибутами.\r\n</p>\r\n\r\n[php]$nodes = $xml->children();\r\n// все атрибуты узла <ingredient>Мука</ingredient>\r\nforeach ( $nodes[1]->attributes() as $name => $value ) {\r\n    echo \'атрибут \' . $name . \', значение \' . $value . \'<br/>\';\r\n}[/php]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[html]атрибут amount, значение 3<br/>\r\nатрибут unit, значение стакан<br/>[/html]\r\n\r\n<h2>Изменение значений узлов и атрибутов</h2>\r\n\r\n<p>\r\nОбъект SimpleXMLElement позволяет манипулировать всеми элементами:\r\n</p>\r\n\r\n[php]$xml = simplexml_load_file(\'recipe.xml\');\r\n$xml->title = \'Ржаной хлеб\';\r\n$xml->ingredient[0] = \'Ржаная мука\';\r\nprint_r($xml);\r\n$xml->ingredient[2][\'amount\'] = \'300\';\r\n$xml->ingredient[2][\'unit\'] = \'грамм\';\r\nprint_r($xml->ingredient[2]);[/php]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[code]SimpleXMLElement Object\r\n(\r\n  [@attributes] => Array\r\n      (\r\n          [name] => хлеб\r\n          [preptime] => 5\r\n          [cooktime] => 180\r\n      )\r\n  [title] => Ржаной хлеб\r\n  [ingredient] => Array\r\n      (\r\n          [0] => Ржаная мука\r\n          [1] => Дрожжи\r\n          [2] => Тёплая вода\r\n          [3] => Соль\r\n      )\r\n  [instructions] => SimpleXMLElement Object\r\n      (\r\n          [step] => Array\r\n              (\r\n                  [0] => Смешать все ингредиенты и тщательно замесить.\r\n                  [1] => Закрыть тканью и оставить на один час в тёплом помещении.\r\n                  [2] => Замесить ещё раз, положить на противень и поставить в духовку.\r\n              )\r\n      )\r\n)[/code]\r\n[code]SimpleXMLElement Object\r\n(\r\n    [@attributes] => Array\r\n        (\r\n            [amount] => 300\r\n            [unit] => грамм\r\n        )\r\n\r\n    [0] => Тёплая вода\r\n)[/code]\r\n\r\n<h2>Добавление элементов и атрибутов</h2>\r\n\r\n<p>\r\nЧтобы добавить дочерний элемент к текущему, достаточно использовать метод addChild(). Первым параметром идет имя нового элемента, вторым значение, которое задавать необязательно.\r\n</p>\r\n<p>\r\nДобавим еще один шаг к инструкциям:\r\n</p>\r\n\r\n[php]$node = $xml->instructions; // получаем ветвь инструкций\r\n$node->addChild(\'step\', \'Почитать газету\'); // добавляем элемент\r\nprint_r($node);[/php]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[code]SimpleXMLElement Object\r\n(\r\n    [step] => Array\r\n        (\r\n            [0] => Смешать все ингредиенты и тщательно замесить.\r\n            [1] => Закрыть тканью и оставить на один час в тёплом помещении.\r\n            [2] => Замесить ещё раз, положить на противень и поставить в духовку.\r\n            [3] => Почитать газету\r\n        )\r\n\r\n)[/code]\r\n\r\n<p>\r\nМетод addAttribute() позволяет добавить атрибут к текущему узлу. Первый параметр это имя атрибута, второй значение.\r\n</p>\r\n\r\n[php]$node = $xml->instructions; // получаем ветвь инструкций\r\n$step = $node->addChild(\'step\', \'Почитать газету\'); // добавляем элемент\r\n$step->addAttribute(\'newspaper\', \'Аргументы и факты\'); // добавляем артибут\r\nprint_r($step);[/php]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[code]SimpleXMLElement Object\r\n(\r\n    [@attributes] => Array\r\n        (\r\n            [newspaper] => Аргументы и факты\r\n        )\r\n\r\n    [0] => Почитать газету\r\n)[/code]\r\n\r\n<h2>Использование XPath</h2>\r\n\r\n<p>\r\nSimpleXML включает в себя встроенную поддержку XPath. Поиск всех элементов &lt;step&gt;:\r\n</p>\r\n\r\n[php]foreach ($xml->xpath(\'//step\') as $step) {\r\n    echo $step . \'<br/>\';\r\n}[/php]\r\n\r\n<p>\r\nРезультат:\r\n</p>\r\n\r\n[html]Смешать все ингредиенты и тщательно замесить.<br/>\r\nЗакрыть тканью и оставить на один час в тёплом помещении.<br/>\r\nЗамесить ещё раз, положить на противень и поставить в духовку.<br/>[/html]\r\n\r\n<h2>Взаимодействие с DOM</h2>\r\n\r\n<p>\r\nPHP может преобразовывать XML узлы из SimpleXML в формат DOM и наоборот. Этот пример показывает, как можно изменить DOM элемент в SimpleXML:\r\n</p>\r\n\r\n[php]$dom = new DOMDocument(\'1.0\', \'utf-8\');\r\n$dom->load(\'recipe.xml\');\r\n$xml = simplexml_import_dom($dom);[/php]\r\n\r\n<p style=\"font-weight: bold;\">\r\nДополнительная информация\r\n</p>\r\n<ul>\r\n  <li><a href=\"http://www.sitepoint.com/simplexml-and-namespaces/\">SimpleXML и пространство имен</a></li>\r\n  <li><a href=\"http://www.php.net/manual/ru/simplexml.examples-basic.php\">Базовое использование SimpleXML</a></li>\r\n</ul>','2013-04-24 13:41:14'),(16,5,'Изучаем API Яндекс.Карт 2.0','','','JavaScript API Яндекс.Карт представляет собой набор JavaScript-компонентов, предназначенных для создания интерактивных карт. Компоненты размещены на серверах Яндекса и доступны для использования сразу после их загрузки на страницу.','<p>\r\nJavaScript API Яндекс.Карт представляет собой набор JavaScript-компонентов, предназначенных для создания интерактивных карт. Компоненты размещены на серверах Яндекса и доступны для использования сразу после их загрузки на страницу.\r\n</p>\r\n\r\n<h2>Подключение API</h2>\r\n<a href=\"http://api.yandex.ru/maps/doc/jsapi/2.x/overview/concepts/about.xml\">Подключение API</a> производится с помощью загрузки внешнего JavaScript-файла:\r\n</p>\r\n\r\n[html]<script src=\"http://api-maps.yandex.ru/2.0-stable/?load=package.full&lang=ru-RU\" type=\"text/javascript\"></script>[/html]\r\n\r\n<p>\r\nМогут быть загружены как все компоненты API, так и отдельные пакеты, содержащие только необходимые компоненты. Это позволяет регулировать объем трафика, передаваемого клиентскому приложению.\r\n</p>\r\n\r\n<h2>Контейнер для карты</h2>\r\n\r\n<p>\r\nВ качестве контейнера может использоваться любой HTML-элемент блочного типа (например, элемент div с заданной шириной и высотой). Карта заполнит этот элемент полностью. Уникальный идентификатор (id) контейнера будет использоваться для получения указателя на контейнер карты.\r\n</p>\r\n\r\n[html]<div id=\"myMap\" style=\"width: 700px; height: 700px;\"></div>[/html]\r\n\r\n<h2>Создание карты</h2>\r\n\r\n<p>\r\n<a href=\"http://api.yandex.ru/maps/doc/jsapi/2.x/dg/concepts/map.xml\">Создавать карту</a> следует после того, как веб-страница загрузится целиком. Это значит, что контейнер для карты создан и к нему можно обращаться по id. Чтобы инициализировать карту после загрузки страницы, можно воспользоваться функцией ready().\r\n</p>\r\n\r\n[js]ymaps.ready(init);\r\n\r\nfunction init(){     \r\n    var myMap = new ymaps.Map (\'myMap\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 10\r\n    });\r\n}[/js]\r\n\r\n<script src=\"http://api-maps.yandex.ru/2.0-stable/?load=package.full&lang=ru-RU\" type=\"text/javascript\"></script>\r\n<script type=\"text/javascript\">\r\nymaps.ready(initMap1);\r\n\r\nfunction initMap1(){     \r\n    var myMap1 = new ymaps.Map (\'myMap1\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 10\r\n    });\r\n}\r\n</script>\r\n<div id=\"myMap1\" style=\"width: 700px; height: 700px;\"></div>\r\n\r\n<p>\r\nПри инициализации карты, указав дополнительный параметр type, мы можем задать тип нашей карты:\r\n</p>\r\n<ul>\r\n  <li>yandex#map — тип карты «схема» (по умолчанию);</li>\r\n  <li>yandex#satellite — тип карты «спутник»;</li>\r\n  <li>yandex#hybrid — тип карты «гибрид»;</li>\r\n  <li>yandex#publicMap — тип карты «народная карта»;</li>\r\n  <li>yandex#publicMapHybrid — тип карты «народный гибрид».</li>\r\n</ul>\r\n\r\n[js]ymaps.ready(init);\r\n\r\nfunction init(){     \r\n    var myMap = new ymaps.Map (\'myMap\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 10,\r\n        type: \'yandex#hybrid\'\r\n    });\r\n}[/js]\r\n\r\n<script type=\"text/javascript\">\r\nymaps.ready(initMap2);\r\n\r\nfunction initMap2(){     \r\n    var myMap2 = new ymaps.Map (\'myMap2\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 10,\r\n        type: \'yandex#hybrid\'\r\n    });\r\n}\r\n</script>\r\n<div id=\"myMap2\" style=\"width: 700px; height: 700px;\"></div>\r\n\r\n<h2>Добавление метки на карту</h2>\r\n\r\n<p>\r\nВ API метки реализуются с помощью класса Placemark. Перед тем как добавить метку на карту, создайте экземпляр этого класса. При создании метки вы можете задать текст её иконки, а также текст балуна, который откроется при щелчке кнопкой мыши на этой метке. \r\n</p>\r\n\r\n[js]ymaps.ready(init);\r\n\r\nfunction init(){     \r\n    var myMap = new ymaps.Map (\'myMap\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 3\r\n    });\r\n    var myPlacemark = new ymaps.Placemark([55.76, 37.64], { \r\n        iconContent: \'Москва\', \r\n        balloonContent: \'Столица России\' \r\n    }, {\r\n        preset: \'twirl#blueStretchyIcon\'\r\n    });\r\n}[/js]\r\n\r\n<p>\r\nПосле того как метка была создана, её можно добавить на карту. Добавление объектов на карту осуществляется через их добавление в глобальную коллекцию объектов карты myMap.geoObjects:\r\n</p>\r\n\r\n[js]myMap.geoObjects.add(myPlacemark);[/js]\r\n\r\n<script type=\"text/javascript\">\r\nymaps.ready(initMap3);\r\n\r\nfunction initMap3(){     \r\n    var myMap3 = new ymaps.Map (\'myMap3\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 3\r\n    });\r\n    var myPlacemark3 = new ymaps.Placemark([55.75, 37.61], { \r\n        iconContent: \'Москва\', \r\n        balloonContent: \'Столица России\' \r\n    }, {\r\n        preset: \'twirl#blueStretchyIcon\'\r\n    });\r\n    myMap3.geoObjects.add(myPlacemark3);\r\n}\r\n</script>\r\n<div id=\"myMap3\" style=\"width: 700px; height: 700px;\"></div>\r\n\r\n<p>\r\nЕще один пример добавления метки:\r\n</p>\r\n\r\n[js]var myPlacemark = new ymaps.Placemark([55.7, 37.6], {\r\n    // Свойства\r\n    iconContent: \'Щелкни по мне\',\r\n    balloonContentHeader: \'Заголовок\',\r\n    balloonContentBody: \'Содержимое <em>балуна</em>\',\r\n    balloonContentFooter: \'Подвал\'\r\n}, {\r\n    // Опции\r\n    preset: \'twirl#blueStretchyIcon\' // иконка растягивается под контент\r\n});[/js]\r\n\r\n\r\n<h2>Стандартные элементы управления</h2>\r\n\r\n<p>\r\nТеперь изменим код, чтобы на карте отображались <a href=\"http://api.yandex.ru/maps/doc/jsapi/2.x/dg/concepts/controls.xml#standard\">стандартные элементы управления</a>:\r\n</p>\r\n<ul>\r\n  <li>Панель инструментов со стандартным набором кнопок: перетягивание карты (drag), увеличение выделенной области, измерение расстояний.</li>\r\n  <li>Переключатель отображаемого типа карты.</li>\r\n  <li>Изменение коэффициента масштабирования.</li>\r\n</ul>\r\n\r\n[js]ymaps.ready(init);\r\n\r\nfunction init(){     \r\n    var myMap = new ymaps.Map (\'myMap\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 3,\r\n        type: \'yandex#satellite\'\r\n    });\r\n    myMap.controls\r\n        .add(\'mapTools\')       // стандартные кнопки\r\n        .add(\'typeSelector\')   // переключатель типа карты\r\n        .add(\'zoomControl\');   // изменение масштаба\r\n    var myPlacemark = new ymaps.Placemark([55.75, 37.61], { \r\n        iconContent: \'Москва\', \r\n        balloonContent: \'Столица России\' \r\n    }, {\r\n        preset: \'twirl#blueStretchyIcon\'\r\n    });\r\n    myMap.geoObjects.add(myPlacemark);\r\n}[/js]\r\n\r\n<script type=\"text/javascript\">\r\nymaps.ready(initMap4);\r\n\r\nfunction initMap4(){     \r\n    var myMap4 = new ymaps.Map (\'myMap4\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 3,\r\n        type: \'yandex#satellite\'\r\n    });\r\n    myMap4.controls\r\n        .add(\'mapTools\')       // стандартные кнопки\r\n        .add(\'typeSelector\')   // переключатель типа карты\r\n        .add(\'zoomControl\');   // изменение масштаба\r\n    var myPlacemark4 = new ymaps.Placemark([55.75, 37.61], { \r\n        iconContent: \'Москва\', \r\n        balloonContent: \'Столица России\' \r\n    }, {\r\n        preset: \'twirl#blueStretchyIcon\'\r\n    });\r\n    myMap4.geoObjects.add(myPlacemark4);\r\n}\r\n</script>\r\n<div id=\"myMap4\" style=\"width: 700px; height: 700px;\"></div>\r\n\r\n<p>\r\nМожно изменить стандартное расположение элементов управления:\r\n</p>\r\n\r\n[js]myMap.controls\r\n    .add(\'mapTools\', {left:5, bottom:35})    // стандартные кнопки\r\n    .add(\'typeSelector\', {left:5, top:5})    // переключатель типа карты\r\n    .add(\'zoomControl\', {right:5, top:15});  // изменение масштаба[/js]\r\n\r\n<p>\r\nДобавить линейку масштаба и обзорную карту:\r\n</p>\r\n\r\n[js]myMap.controls\r\n    .add(new ymaps.control.ScaleLine())  // линейка масштаба\r\n    .add(new ymaps.control.MiniMap({     // обзорная карта заданного типа\r\n        type: \'yandex#publicMap\'\r\n    }));[/js]\r\n\r\n<h2>Задание собственного шаблона оформления содержимого балуна</h2>\r\n\r\n<p>\r\nБалун — это всплывающее окно, в котором может быть показано любое HTML-содержимое. Одновременно на карте может быть показан только один балун.\r\n</p>\r\n\r\n[js]// Как только будет загружен API и готов DOM, выполняем инициализацию\r\nymaps.ready(initTinkoMap);\r\nfunction initTinkoMap() {\r\n    var tinkoMap = new ymaps.Map(\'tinkoMap\', { center: [55.750, 37.607], zoom: 11 });\r\n    // Масштабирование с помощью колесика мышки\r\n    tinkoMap.behaviors.enable(\'scrollZoom\');\r\n    // Добавляем стандартные элементы управления\r\n    tinkoMap.controls.add(\'zoomControl\').add(\'typeSelector\').add(\'mapTools\');\r\n\r\n    // Создаем метку центрального офиса\r\n    var centralOfficePlacemark = new ymaps.Placemark([55.752422, 37.77163], {\r\n        // Свойства\r\n        iconContent: \'Центральный\',\r\n        name: \'Центральный офис\',\r\n        address: \'3-й проезд Перова поля, дом 8\',\r\n        phone: \'тел: (495) 708-42-13, факc: (495) 708-42-14\',\r\n        photo: \'<img src=\"/images/office.jpg\" alt=\"Центральный офис\" />\',\r\n        print: \'<a href=\"/images/print.jpg\" alt=\"Центральный офис\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n    // Создаем метку офиса продаж Сокол\r\n    var sokolOfficePlacemark = new ymaps.Placemark([55.810463, 37.524699], {\r\n        // Свойства\r\n        iconContent: \'Сокол\',\r\n        name: \'Офис продаж Сокол\',\r\n        address: \'ул. Часовая, д. 24, стр. 2\',\r\n        phone: \'тел: (495) 708-42-13 доб. 401\',\r\n        photo: \'<img src=\"/images/office1.jpg\" alt=\"Офис продаж Сокол\" />\',\r\n        print: \'<a href=\"/images/print1.jpg\" alt=\"Офис продаж Сокол\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n    // Создаем метку офиса продаж Мещанский\r\n    var olimpOfficePlacemark = new ymaps.Placemark([55.781294, 37.629261], {\r\n        // Свойства\r\n        iconContent: \'Мещанский\',\r\n        name: \'Офис продаж Мещанский\',\r\n        address: \'ул. Щепкина, д. 47\',\r\n        phone: \'тел: (495) 708-42-13 доб. 402\',\r\n        photo: \'<img src=\"/images/office2.jpg\" alt=\"Офис продаж Мещанский\" />\',\r\n        print: \'<a href=\"/images/print2.jpg\" alt=\"Офис продаж Мещанский\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n    // Создаем метку офиса продаж Нагорный\r\n    var nagorOfficePlacemark = new ymaps.Placemark([55.678815, 37.603392], {\r\n        // Свойства\r\n        iconContent: \'Нагорный\',\r\n        name: \'Офис продаж Нагорный\',\r\n        address: \'ул. Нагорная, д. 20, корп. 1\',\r\n        phone: \'тел: (495) 708-42-13 доб. 403\',\r\n        photo: \'<img src=\"/images/office3.gif\" alt=\"Офис продаж Нагорный\" />\',\r\n        print: \'<a href=\"/images/print3.jpg\" alt=\"Офис продаж Нагорный\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n\r\n    // Создаем коллекцию, в которую будем добавлять метки\r\n    var tinkoCollection = new ymaps.GeoObjectCollection();\r\n\r\n    // Добавляем метки в коллекцию геообъектов\r\n    tinkoCollection\r\n        .add(centralOfficePlacemark)\r\n        .add(sokolOfficePlacemark)\r\n        .add(olimpOfficePlacemark)\r\n        .add(nagorOfficePlacemark);\r\n\r\n    // Создаем шаблон для отображения контента балуна\r\n    var tinkoBalloonLayout = ymaps.templateLayoutFactory.createClass(\r\n        \'<p><strong>$[properties.name]</strong></p>\' +\r\n        \'<p>$[properties.address]</p>\' +\r\n        \'<p>$[properties.phone]</p>\' +\r\n        \'<p>$[properties.photo]</p>\' +\r\n        \'<p>$[properties.print]</p>\'\r\n    );\r\n\r\n    // Помещаем созданный шаблон в хранилище шаблонов.\r\n    // Теперь наш шаблон доступен по ключу \'tinko#officeslayout\'\r\n    ymaps.layout.storage.add(\'tinko#officeslayout\', tinkoBalloonLayout);\r\n\r\n    // Задаем наш шаблон для балунов геобъектов коллекции\r\n    tinkoCollection.options.set({\r\n        balloonContentBodyLayout:\'tinko#officeslayout\',\r\n        // Максимальная ширина балуна в пикселах\r\n        balloonMaxWidth: 350\r\n    });\r\n\r\n    // Добавляем коллекцию геообъектов на карту\r\n    tinkoMap.geoObjects.add(tinkoCollection);\r\n}[/js]\r\n\r\n\r\n<script type=\"text/javascript\">\r\n// Как только будет загружен API и готов DOM, выполняем инициализацию\r\nymaps.ready(initTinkoMap);\r\nfunction initTinkoMap() {\r\n    var tinkoMap = new ymaps.Map(\'tinkoMap\', { center: [55.750, 37.607], zoom: 11 });\r\n    // Масштабирование с помощью колесика мышки\r\n    tinkoMap.behaviors.enable(\'scrollZoom\');\r\n    // Добавляем стандартные элементы управления\r\n    tinkoMap.controls.add(\'zoomControl\').add(\'typeSelector\').add(\'mapTools\');\r\n\r\n    // Создаем метку центрального офиса\r\n    var centralOfficePlacemark = new ymaps.Placemark([55.752422, 37.77163], {\r\n        // Свойства\r\n        iconContent: \'Центральный\',\r\n        name: \'Центральный офис\',\r\n        address: \'3-й проезд Перова поля, дом 8\',\r\n        phone: \'тел: (495) 708-42-13, факc: (495) 708-42-14\',\r\n        photo: \'<img src=\"/files/blog/16/office.jpg\" alt=\"Центральный офис\" />\',\r\n        print: \'<a href=\"/files/blog/16/print.jpg\" alt=\"Центральный офис\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n    // Создаем метку офиса продаж Сокол\r\n    var sokolOfficePlacemark = new ymaps.Placemark([55.810463, 37.524699], {\r\n        // Свойства\r\n        iconContent: \'Сокол\',\r\n        name: \'Офис продаж Сокол\',\r\n        address: \'ул. Часовая, д. 24, стр. 2\',\r\n        phone: \'тел: (495) 708-42-13 доб. 401\',\r\n        photo: \'<img src=\"/files/blog/16/office1.jpg\" alt=\"Офис продаж Сокол\" />\',\r\n        print: \'<a href=\"/files/blog/16/print1.jpg\" alt=\"Офис продаж Сокол\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n    // Создаем метку офиса продаж Мещанский\r\n    var olimpOfficePlacemark = new ymaps.Placemark([55.781294, 37.629261], {\r\n        // Свойства\r\n        iconContent: \'Мещанский\',\r\n        name: \'Офис продаж Мещанский\',\r\n        address: \'ул. Щепкина, д. 47\',\r\n        phone: \'тел: (495) 708-42-13 доб. 402\',\r\n        photo: \'<img src=\"/files/blog/16/office2.jpg\" alt=\"Офис продаж Мещанский\" />\',\r\n        print: \'<a href=\"/files/blog/16/print2.jpg\" alt=\"Офис продаж Мещанский\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n    // Создаем метку офиса продаж Нагорный\r\n    var nagorOfficePlacemark = new ymaps.Placemark([55.678815, 37.603392], {\r\n        // Свойства\r\n        iconContent: \'Нагорный\',\r\n        name: \'Офис продаж Нагорный\',\r\n        address: \'ул. Нагорная, д. 20, корп. 1\',\r\n        phone: \'тел: (495) 708-42-13 доб. 403\',\r\n        photo: \'<img src=\"/files/blog/16/office3.gif\" alt=\"Офис продаж Нагорный\" />\',\r\n        print: \'<a href=\"/files/blog/16/print3.jpg\" alt=\"Офис продаж Нагорный\" target=\"_blank\" />Версия для печати</a>\'\r\n    }, {\r\n        // Опции\r\n        preset: \'twirl#redStretchyIcon\' // иконка растягивается под контент\r\n    });\r\n\r\n    // Создаем коллекцию, в которую будем добавлять метки\r\n    var tinkoCollection = new ymaps.GeoObjectCollection();\r\n\r\n    // Добавляем метки в коллекцию геообъектов\r\n    tinkoCollection\r\n        .add(centralOfficePlacemark)\r\n        .add(sokolOfficePlacemark)\r\n        .add(olimpOfficePlacemark)\r\n        .add(nagorOfficePlacemark);\r\n\r\n    // Создаем шаблон для отображения контента балуна\r\n    var tinkoBalloonLayout = ymaps.templateLayoutFactory.createClass(\r\n        \'<p><strong>$[properties.name]</strong></p>\' +\r\n        \'<p>$[properties.address]</p>\' +\r\n        \'<p>$[properties.phone]</p>\' +\r\n        \'<p>$[properties.photo]</p>\' +\r\n        \'<p>$[properties.print]</p>\'\r\n    );\r\n\r\n    // Помещаем созданный шаблон в хранилище шаблонов.\r\n    // Теперь наш шаблон доступен по ключу \'tinko#officeslayout\'\r\n    ymaps.layout.storage.add(\'tinko#officeslayout\', tinkoBalloonLayout);\r\n\r\n    // Задаем наш шаблон для балунов геобъектов коллекции\r\n    tinkoCollection.options.set({\r\n        balloonContentBodyLayout:\'tinko#officeslayout\',\r\n        // Максимальная ширина балуна в пикселах\r\n        balloonMaxWidth: 350\r\n    });\r\n\r\n    // Добавляем коллекцию геообъектов на карту\r\n    tinkoMap.geoObjects.add(tinkoCollection);\r\n}\r\n</script>\r\n<div id=\"tinkoMap\" style=\"width: 700px; height: 700px;\"></div>\r\n\r\n<h2>Рисуем многоугольник</h2>\r\n\r\n[js]ymaps.ready(init);\r\nfunction init () {\r\n    var myMap = new ymaps.Map (\'myMap\', {\r\n        center: [55.75, 37.61],\r\n        zoom: 10\r\n    });\r\n    // создаем многоугольник\r\n    var myPolygon = new ymaps.Polygon([[\r\n        // координаты вершин внешней границы многоугольника\r\n        [55.778607,37.553126],\r\n        [55.792923,37.647883],\r\n        [55.724391,37.709681],\r\n        [55.708887,37.583339]\r\n    ]]);\r\n    myMap.geoObjects.add(myPolygon);\r\n}[/js]\r\n\r\n<script type=\"text/javascript\">\r\nymaps.load([\'geometry\']);\r\nymaps.ready(initMap5);\r\n \r\nfunction initMap5() {\r\n    var myMap5 = new ymaps.Map (\'myMap5\', {\r\n        center: [55.76, 37.61],\r\n        zoom: 10\r\n    });\r\n    // создаем многоугольник\r\n    var myPolygon5 = new ymaps.Polygon([[\r\n        // координаты вершин внешней границы многоугольника\r\n        [55.778607,37.553126],\r\n        [55.792923,37.647883],\r\n        [55.724391,37.709681],\r\n        [55.708887,37.583339]\r\n    ]]);\r\n    myMap5.geoObjects.add(myPolygon5);\r\n}\r\n</script>\r\n<div id=\"myMap5\" style=\"width: 700px; height: 700px;\"></div>\r\n      \r\n<h3>Дополнительная информация:</h3>\r\n<ul>\r\n  <li><a href=\"http://api.yandex.ru/maps/doc/jsapi/2.x/examples/\">Примеры использования JavaScript API</a></li>\r\n  <li><a href=\"http://webmap-blog.ru/category/yandex-maps\">Занимательная Веб-картография</a></li>\r\n</ul>\r\n  ','2013-04-30 08:58:08'),(17,11,'Права доступа на файлы (CHMOD)','','','Права доступа — это атрибуты файла или каталога, которые указывают серверу, кто и что может делать с соответствующим файлом или каталогом. Обычно, права доступа регламентируют такие действия как чтение, запись в файл (или каталог), исполнение.','<p>\r\nПрава доступа — это атрибуты файла или каталога, которые указывают серверу, кто и что может делать с соответствующим файлом или каталогом. Обычно, права доступа регламентируют такие действия как чтение, запись в файл (или каталог), исполнение.\r\n</p>\r\n<p>\r\nВ системах UNIX все пользователи разделяются на три группы: «user» (непосредственно владелец файла), «group» (член той же группы, к которой принадлежит владелец файла) и «other» (все остальные). Когда вы соединяетесь с сервером, он определяет к какой группе вы относитесь. Например, подключаясь к серверу по FTP, вы входите под своим именем пользователя, соответственно сервер относит вас к группе «user». Другие пользователи, подключаясь по FTP, будет отнесены к группе «group», а когда человек попадает к вам на сайт через свой браузер, то попадает в группу «other».\r\n</p>\r\n<p>\r\nПосле определения группы, пользователь получает права на действия с объектами. Т.е он может прочитать, записать или выполнить файл. Чтобы просмотреть каталог, он должен быть исполняемым; чтобы просмотреть его содержимое, он должен иметь атрибут чтения, а чтобы создать новый файл или каталог в существующем каталоге, необходимо иметь право на запись. Таким образом, чтобы выполнялось приложение или CGI скрипт, необходимо установить атрибут чтения и выполнения.\r\n</p>\r\n<p>\r\nЧтобы распределить права для соответствующих групп, используются цифровые обозначения:\r\n</p>\r\n<ul>\r\n  <li>4 = read (право на чтение)</li>\r\n  <li>2 = write (право на запись)</li>\r\n  <li>1 = execute (право на выполнение)</li>\r\n</ul>\r\n<p>\r\nПростым сложение цифр можно добиться установления прав на совокупность действий. Например, 3(2+1) разрешает запись и выполнение файла (каталога); 5(4+1) разрешает чтение и выполнение; 6(4+2) разрешает чтение и запись; 7(4+2+1) устанавливает право чтения, записи и выполнения. Т.е всего семь вариантов:\r\n</p>\r\n<ul>\r\n  <li>7 = read, write &amp; execute</li>\r\n  <li>6 = read &amp; write</li>\r\n  <li>5 = read &amp; execute</li>\r\n  <li>4 = read</li>\r\n  <li>3 = write &amp; execute</li>\r\n  <li>2 = write</li>\r\n  <li>1 = execute</li>\r\n</ul>\r\n<p>\r\nПервая цифра в обозначении устанавливает права для группы «user» (т.е фактически для вас), вторая для группы «group» и третья для «other». Например, 755\r\n</p>\r\n<ul>\r\n  <li>для user — read, write &amp; execute</li>\r\n  <li>для group — read &amp; execute</li>\r\n  <li>для other — read &amp; execute</li>\r\n</ul>\r\n<p>\r\nДля установления прав доступа используется команда <span style=\"color: blue;\">chmod</span>. Во всех современных FTP клиентах присутствует возможность назначения прав доступа путем простановки «галочек» в чекбоксах, либо просто введением цифрового кода в соответствующее поле.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/17/chmod.gif\" alt=\"Назначение прав доступа\" />\r\n</p>\r\n<p>\r\nКоманда <span style=\"color: blue;\">chmod</span> имеет два режима: Абсолютный (цифровой) и Символьный режим.\r\n</p>\r\n<p>\r\nПри абсолютном (цифровом) режиме используется описанный выше 3-х цифровой код прав доступа. Символьный режим использует буквенный формат для установки прав доступа. Здесь используются буквы «r», «w» и «x» для «read», «write» и «execute» соответственно. А также «u», «g», «o» и «a» для «user», «group», «other», и «all»(все) соответственно.\r\n</p>\r\n<p>\r\nНапример:\r\n</p>\r\n<ul>\r\n  <li>755 : <span style=\"color: blue;\">chmod u=rwx,go=rx filename</span></li>\r\n  <li>644 : <span style=\"color: blue;\">chmod u=rw,go=r filename</span></li>\r\n  <li>600 : <span style=\"color: blue;\">chmod u=rw,go= filename</span></li>\r\n  <li>444 : <span style=\"color: blue;\">chmod a=r filename</span></li>\r\n</ul>','2008-07-29 11:50:06'),(18,6,'Загрузка файла на сервер без использования формы','PHP загрузка файла сокеты CURL POST PUT','Загрузка файла на сервер без использования формы. Библиотека CURL и сокеты','Для HTTP запроса типа POST существует два варианта передачи полей из HTML форм, а именно, используя алгоритм application/x-www-form-urlencoded и multipart/form-data. Алгоритм первого типа создавался давным-давно, когда в языке HTML еще не предусматривали возможность передачи файлов через HTML формы.','<p>\r\nДля HTTP запроса типа POST существует два варианта передачи полей из HTML форм, а именно, используя алгоритм <span style=\"color: blue;\">application/x-www-form-urlencoded</span> и <span style=\"color: blue;\">multipart/form-data</span>. Алгоритм первого типа создавался давным-давно, когда в языке HTML еще не предусматривали возможность передачи файлов через HTML формы.\r\n</p>\r\n<p>\r\nСо временем возникла необходимость через формы отсылать еще и файлы. Тогда консорциум W3C взялся за доработку формата POST запроса. К тому времени уже достаточно широко применялся формат <span style=\"color: blue;\">MIME</span> (Multipurpose Internet Mail Extensions — многоцелевые расширения протокола для формирования Mail сообщений), поэтому, чтобы не изобретать велосипед заново, решили использовать часть данного формата формирования сообщений для создания POST запросов в протоколе HTTP.\r\n</p>\r\n<p>\r\nГлавное отличие <span style=\"color: blue;\">multipart/form-data</span> от <span style=\"color: blue;\">application/x-www-form-urlencoded</span> в том, что тело запроса теперь можно поделить на разделы, которые разделяются границами. Каждый раздел может иметь свой собственный заголовок для описания данных, которые в нем хранятся, т.е. в одном запросе можно передавать данные различных типов (как в теле письма можно одновременно с текстом передавать файлы). Пример запроса:\r\n</p>\r\n[code]Content-Type: multipart/form-data; boundary=ff4ed67396bc8e1d6dbf19d65b6c6348\r\nContent-Length: 417339\r\n \r\n--ff4ed67396bc8e1d6dbf19d65b6c6348\r\nContent-Disposition: form-data; name=\"name\"\r\n \r\nЕвгений\r\n--ff4ed67396bc8e1d6dbf19d65b6c6348\r\nContent-Disposition: form-data; name=\"message\"\r\n \r\nКакое-то сообщение от пользователя\r\n--ff4ed67396bc8e1d6dbf19d65b6c6348\r\nContent-Disposition: form-data; name=\"upload\"; filename=\"image.jpg\"\r\nContent-Type: image/jpeg\r\nContent-Transfer-Encoding: binary\r\n\r\n...содержимое файла image.jpg...\r\n--ff4ed67396bc8e1d6dbf19d65b6c6348--[/code]\r\n<p>\r\nBoundary (граница) — это последовательность байтов, которая не должна встречаться внутри передаваемых данных. Content-Length — суммарный объём, включая дочерние заголовки. Само содержимое полей при этом оставляется «как есть».\r\n</p>\r\n\r\n<h2>CURL, multipart/form-data</h2>\r\n\r\n[php]<?php\r\n$file = \'image.jpg\';\r\n$postdata = array( \'name\' => \'Евгений\',\r\n                   \'message\' => \'Какое-то сообщение от пользователя\',\r\n                   \'upload\' => \'@\'.$file );\r\n\r\n$ch = curl_init();\r\ncurl_setopt($ch, CURLOPT_URL, \'http://server.com/get.php\');\r\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\r\ncurl_setopt($ch, CURLOPT_POST, 1);\r\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $postdata);\r\ncurl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);\r\ncurl_exec($ch);\r\ncurl_close($ch);\r\n?>[/php]\r\n\r\n<p>\r\nФайл get.php на сервере http://server.com:\r\n</p>\r\n\r\n[php]<?php\r\nprint_r( $_POST );\r\nprint_r( $_FILES );\r\nmove_uploaded_file ( $_FILES[\'upload\'][\'tmp_name\'], \'image.jpg\' );\r\n?>[/php]\r\n\r\n<p>\r\nРезультат работы:\r\n</p>\r\n\r\n[code]Array\r\n(\r\n    [name] => Евгений\r\n    [message] => Какое-то сообщение от пользователя\r\n)\r\nArray\r\n(\r\n    [upload] => Array\r\n        (\r\n            [name] => image.jpg\r\n            [type] => application/octet-stream\r\n            [tmp_name] => C:\\Windows\\Temp\\php504D.tmp\r\n            [error] => 0\r\n            [size] => 416919\r\n        )\r\n\r\n)[/code]\r\n\r\n<div class=\"note\">\r\n<p>\r\nВажный момент: на форуме PHPCLUB.RU встретил упоминание, что может потребоваться указание полного пути файла — иначе <span style=\"color: blue;\">CURL</span> выдает ошибку.\r\n</p>\r\n[php]$file = \'C:/work/localhost/www/image.jpg\';[/php]\r\n</div>\r\n\r\n<h2>CURL, application/x-www-form-urlencoded</h2>\r\n\r\n[php]<?php\r\n$file = \'image.jpg\';\r\n// данные POST-запроса\r\n$postdata = array( \'name\' => \'Евгений\',\r\n                   \'message\' => \'Какое-то сообщение от пользователя\',\r\n                   \'upload\' => file_get_contents($file) );\r\n\r\n$ch = curl_init();\r\ncurl_setopt($ch, CURLOPT_URL, \'http://server.com/get.php\');\r\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\r\ncurl_setopt($ch, CURLOPT_POST, 1);\r\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $postdata);\r\ncurl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);\r\ncurl_exec($ch);\r\ncurl_close($ch);\r\n?>[/php]\r\n\r\n<p>\r\nФайл get.php на сервере http://server.com:\r\n</p>\r\n\r\n[php]<?php\r\nprint_r( $_POST );\r\nfile_put_contents ( \'image.jpg\', $_POST[\'upload\'] );\r\n?>[/php]\r\n\r\n<p>\r\nРезультат работы:\r\n</p>\r\n\r\n[code]Array\r\n(\r\n    [name] => Евгений\r\n    [message] => Какое-то сообщение от пользователя\r\n    [upload] => ...содержимое файла image.jpg...\r\n)[/code]\r\n\r\n<h2>Сокеты, multipart/form-data</h2>\r\n\r\n[php]<?php\r\n// устанавливаем соединение с сервером\r\n$fp = fsockopen(\'server.com\', 80, $errno, $errstr, 30);\r\nif (!$fp) die($errstr.\' (\'.$errno.\')\');\r\n\r\n$name = \'Евгений\';\r\n$message = \'Какое-то сообщение от пользователя\';\r\n$file = \'image.jpg\';\r\n// содержимое файла\r\n$content = file_get_contents($file);\r\n\r\n// разделитель\r\n$boundary = md5(uniqid(time()));\r\n\r\n$body = \'--\'.$boundary.\"\\r\\n\";\r\n$body = $body.\'Content-Disposition: form-data; name=\"name\"\'.\"\\r\\n\\r\\n\";\r\n$body = $body.$name.\"\\r\\n\";\r\n\r\n$body = $body.\'--\'.$boundary.\"\\r\\n\";\r\n$body = $body.\'Content-Disposition: form-data; name=\"message\"\'.\"\\r\\n\\r\\n\";\r\n$body = $body.$message.\"\\r\\n\";\r\n\r\n$body = $body.\'--\'.$boundary.\"\\r\\n\";\r\n$body = $body.\'Content-Disposition: form-data; name=\"upload\"; filename=\"image.jpg\"\'.\"\\r\\n\";\r\n$body = $body.\'Content-Type: image/jpeg\'.\"\\r\\n\";\r\n$body = $body.\'Content-Transfer-Encoding: binary\'.\"\\r\\n\\r\\n\";\r\n$body = $body.$content.\"\\r\\n\";\r\n\r\n$body = $body.\'--\'.$boundary.\'--\';\r\n\r\n// пишем в сокет метод, URI и протокол\r\nfwrite($fp, \'POST /get.php HTTP/1.1\'.\"\\r\\n\");\r\n// а также имя хоста\r\nfwrite($fp, \'Host: server.com\'.\"\\r\\n\");\r\n// отправляем заголовки\r\nfwrite($fp, \'Content-Type: multipart/form-data; boundary=\'.$boundary.\"\\r\\n\");\r\nfwrite($fp, \'Content-Length: \'.strlen($body).\"\\r\\n\\r\\n\");\r\n// теперь передаем данные\r\nfwrite($fp, $body);\r\n\r\n// получаем ответ\r\n$result = \'\';\r\nwhile ( !feof($fp) ) $result .= fgets($fp, 1024);\r\n// закрываем соединение\r\nfclose($fp);\r\n// выводим ответ в браузер\r\necho $result;\r\n?>[/php]\r\n\r\n<p>\r\nФайл get.php на сервере http://server.com:\r\n</p>\r\n\r\n[php]<?php\r\nprint_r( $_POST );\r\nprint_r( $_FILES );\r\nmove_uploaded_file($_FILES[\'upload\'][\'tmp_name\'], \'image.jpg\')\r\n?>[/php]\r\n\r\n<p>Результат:</p>\r\n\r\n[code]HTTP/1.1 200 OK\r\nServer: Apache/2.0 (Win32) PHP/5.1\r\nX-Powered-By: PHP/5.1\r\nContent-Length: 310\r\n\r\nArray\r\n(\r\n    [name] => Евгений\r\n    [message] => Какое-то сообщение от пользователя\r\n)\r\nArray\r\n(\r\n    [upload] => Array\r\n        (\r\n            [name] => image.jpg\r\n            [type] => image/jpeg\r\n            [tmp_name] => C:\\Windows\\Temp\\phpA457.tmp\r\n            [error] => 0\r\n            [size] => 416919\r\n        )\r\n\r\n)[/code]\r\n\r\n<h2>Сокеты, application/x-www-form-urlencoded</h2>\r\n\r\n[php]<?php\r\n// устанавливаем соединение с сервером\r\n$fp = fsockopen(\'server.com\', 80, $errno, $errstr, 30);\r\nif (!$fp) die($errstr.\' (\'.$errno.\')\');\r\n\r\n$file = \'image.jpg\';\r\n// содержимое файла\r\n$content = file_get_contents($file);\r\n// данные POST-запроса\r\n$data = \'name=\' . urlencode(\'Евгений\') . \'&message=\' . urlencode(\'Какое-то сообщение от пользователя\') . \'&upload=\'.urlencode($content);\r\n// заголовоки запроса\r\n$headers = \'POST /get.php HTTP/1.1\'.\"\\r\\n\";\r\n$headers .= \'Host: server.com\'.\"\\r\\n\";\r\n$headers .= \'Content-type: application/x-www-form-urlencoded\'.\"\\r\\n\";\r\n$headers .= \'Content-Length: \'.strlen($data).\"\\r\\n\\r\\n\";\r\n// отправляем запрос серверу\r\nfwrite($fp, $headers.$data);\r\n// получаем ответ\r\n$result = \'\';\r\nwhile ( !feof($fp) ) $result .= fgets($fp, 1024);\r\n// закрываем соединение\r\nfclose($fp);\r\n// выводим ответ в браузер\r\necho $result;\r\n?>[/php]\r\n\r\n<p>\r\nФайл get.php на сервере http://server.com:\r\n</p>\r\n\r\n[php]<?php\r\nprint_r( $_POST );\r\nfile_put_contents ( \'image.jpg\', $_POST[\'upload\'] );\r\n?>[/php]\r\n\r\n<p>\r\nРезультат работы:\r\n</p>\r\n\r\n[code]HTTP/1.1 200 OK\r\nServer: Apache/2.0 (Win32) PHP/5.1\r\nX-Powered-By: PHP/5.1\r\nTransfer-Encoding: chunked\r\n\r\nArray\r\n(\r\n    [name] => Евгений\r\n    [message] => Какое-то сообщение от пользователя\r\n    [upload] => ...содержимое файла image.jpg...\r\n)[/code]\r\n\r\n<h2>Метод PUT</h2>\r\n\r\n<p>\r\nОписанные выше способы работают для относительно небольших файлов (примерно до 2-х мегабайт, для получения более точного значения необходимо смотреть в настройках PHP максимальный объем принимаемых данных методом POST). Чтобы обойти это ограничение, будем передавать файл методом PUT:\r\n</p>\r\n\r\n[php]<?php\r\n$url = \'http://server.com/get.php\';\r\n$file = \'image.jpg\';\r\n// Открываем передаваемый файл на чтение для дальнейшей его передачи\r\n$fp = fopen($file, \'r\');\r\n// Инициализируем сеанс CURL\r\n$ch = curl_init();\r\n// Указываем URL скрипта, который примет наш запрос. К имени скрипта\r\n// добавляем еще две переменные, передаваемые методом GET\r\ncurl_setopt($ch, CURLOPT_URL, $url . \'?name=\' . urlencode(\'Евгений\') . \'&message=\' . urlencode(\'Какое-то сообщение от пользователя\'));\r\n// Дескриптор файла, который собираемся передать\r\ncurl_setopt($ch, CURLOPT_INFILE, $fp);\r\n// Указываем размер отправляемого файла\r\ncurl_setopt($ch, CURLOPT_INFILESIZE, filesize($file));\r\n// Указываем, что файл передается методом PUT\r\ncurl_setopt($ch, CURLOPT_PUT, 1);\r\n// Указываем, что будет производиться закачка на удаленный сервер\r\ncurl_setopt($ch, CURLOPT_UPLOAD, 1);\r\n// Выполняем запрос CURL\r\ncurl_exec($ch);\r\n// Завершаем сеанс CURL\r\ncurl_close($ch);\r\n?>[/php]\r\n\r\n<p>\r\nФайл get.php на сервере http://server.com:\r\n</p>\r\n\r\n[php]<?php\r\nprint_r( $_GET );\r\nfile_put_contents ( \'image.jpg\', file_get_contents(\'php://input\') );\r\n?>[/php]\r\n\r\n<p>\r\nРезультат работы:\r\n</p>\r\n\r\n[code]Array\r\n(\r\n    [name] => Евгений\r\n    [message] => Какое-то сообщение от пользователя\r\n)[/code]','2008-09-22 12:19:10'),(19,11,'Расширения Joomla','Joomla расширения модули компоненты плагины','Расширения Joomla: модули, компоненты и плагины','Расширения позволяют существенно расширить функциональность вашего сайта, например, добавить форум, чат, средства для чтения RSS-лент и даже интернет-магазин. Огромное количество расширений вы сможете найти на сайте http://extensions.joomla.org. Практически все расширения на этом сайте бесплатные.','<p>\r\nРасширения позволяют существенно расширить функциональность вашего сайта, например, добавить форум, чат, средства для чтения RSS-лент и даже интернет-магазин. Огромное количество расширений вы сможете найти на сайте <a href=\"http://extensions.joomla.org/\">http://extensions.joomla.org</a>. Практически все расширения на этом сайте бесплатные. На других сайтах вы можете найти коммерческие Joomla-расширения. Устанавливать их или нет — решать вам, но практически всегда можно найти бесплатный аналог расширения.\r\n</p>\r\n<p>\r\nРасширения в Joomla бывают трех типов: модули, компоненты и плагины. Да, все это — расширения для Joomla. Такое разнообразие расширений иногда сбивает с толку начинающих пользователей, но зато благодаря этому четко разделяются функции каждого расширения. Например, модуль не может выполнять функции плагинов и наоборот. Если вы устанавливаете комплексный пакет расширений, например, чат, то он может состоять из расширений разных типов. Чаше всего пакеты расширений состоят из компонентов и модулей.\r\n</p>\r\n<h2>Модули</h2>\r\n<p>\r\nМодуль, можно сказать, самое минимальное расширение. Модуль, как правило, используется для отображения информации (например модуль «Кто на сайте») или минимального взаимодействия с пользователем (например модуль голосований). В Интернете вы можете найти модули, отображающие курсы валют, информацию о погоде и другие полезные модули.\r\n</p>\r\n<p>\r\nМодуль загружается в одну из определенных разработчиком шаблона позиций, например справа вверху. На одной странице может быть загружено несколько модулей.\r\n</p>\r\n<p>\r\nИнтерфейс администратора содержит немного параметров для модулей, если вообще разработчик предусмотрел изменение параметров модуля.\r\n</p>\r\n<h2>Компоненты</h2>\r\n<p>\r\nВ отличие от модулей, компонент загружается всегда в центральную часть страницы. Компонент может быть всего один на странице. Компоненты используются, как правило, для взаимодействия с пользователем. Например, компонент может отображать содержимое раздела, категории, статьи, вызывать редактор для редактирования статьи и т.д. В некоторых случаях (чат, форум) компоненты предоставляют полноценный интерфейс пользователя.\r\n</p>\r\n<p>\r\nНа панели управления обычно можно установить множество различных параметров для компонента. В большинстве случаев интерфейс настройки компонентов содержит несколько вкладок параметров, позволяющих настроить компонент.\r\n</p>\r\n<p>\r\nИногда модули и компоненты используются в паре. Например, для отображения голосований используется модуль, а для управления голосованиями — компонент.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/19/joomla-extensions.jpg\" class=\"zoom\" title=\"Joomla: модули и компоненты\"><img src=\"/files/blog/19/joomla-extensions-small.jpg\" alt=\"Joomla: модули и компоненты\" /></a>\r\n</p>\r\n<h2>Плагины</h2>\r\n<p>\r\nПлагины — это низкоуровневые расширения. Обычно плагины активируются определенным событием сервера (или пользовательским событием, событием редактора и т.д.). Плагин может перехватывать выходные данные Joomla и вносить в них изменения до отправки в браузер пользователя. Плагины обычно используются для организации различных визуальных редакторов для Joomla. В базе данных все статьи хранятся в формате HTML. Joomla выводит их из базы данных, плагин редактора перехватывает этот результат вывода и конвертирует в собственное визуальное представление. Вы редактируете текст статьи, используя это визуальное представление. Когда вы щелкаете на кнопке «Сохранить», визуальное представление статьи конвертируется в HTML-код и сохраняется в базе данных Joomla.\r\n</p>\r\n<h2>Менеджер расширений</h2>\r\n<p>\r\nМенеджер расширений используется для установки и удаления компонентов, модулей, плагинов, языков и шаблонов. Существует три способа установки расширения:\r\n</p>\r\n<ul>\r\n  <li><strong>Загрузить файл пакета</strong>. Необходимо загрузаить на свой компьютер архив, содержащий файлы расширения, зайти на страницу «Менеджер расширений», выбрать этот архив и щелкнуть по кнопке «Загрузить файл и установить».</li>\r\n  <li><strong>Установить из каталога</strong>. Самостоятельно распаковать загруженный архив, загрузить по FTP в какой-нибудь каталог на сервере, указать путь к этому каталогу и щелкнуть по кнопке «Установить».</li>\r\n  <li><strong>Установить из URL</strong>. Нужно только указать URL пакета расширения. Joomla сама скачает архив, распакует его и установит расширение.</li>\r\n</ul>\r\n<p>\r\n<a href=\"/files/blog/19/extensions-install.jpg\" class=\"zoom\" title=\"Joomla: менеджер расширений\"><img src=\"/files/blog/19/extensions-install-small.jpg\" alt=\"Joomla: менеджер расширений\" /></a>\r\n</p>','2013-05-07 13:36:10'),(20,11,'Создание системного плагина Joomla','Joomla plugin плагин расширение системный','Создание системного плагина','Напишем простой плагин Joomla для обработки события onBeforeCompileHead. Это событие позволяет видеоизменить любой элемент внутри тега &lt;head&gt; HTML-документа перед его выводом в браузер. С помощью этого плагина можно добавить, изменить или удалить мета-теги, js-скрипты, css-стили и т.п.','<p>\r\nНапишем простой <a href=\"/blog/psts/19/\">плагин Joomla</a> для обработки события <span style=\"color: blue;\">onBeforeCompileHead</span>. Это событие позволяет видеоизменить любой элемент внутри тега <span style=\"color: blue;\">&lt;head&gt;</span> HTML-документа перед его выводом в браузер. С помощью этого плагина можно добавить, изменить или удалить мета-теги, js-скрипты, css-стили и т.п.\r\n</p>\r\n<p>\r\nСобытие <span style=\"color: blue;\">onBeforeCompileHead</span> инициируется в методе <span style=\"color: blue;\">fetchHead()</span> класса <span style=\"color: blue;\">JDocumentRendererHtml</span> (из файла <span style=\"color: blue;\">libraries/joomla/document/html/renderer/head.php</span>). Метод считывает данные для элемента <span style=\"color: blue;\">&lt;head&gt;</span> HTML-документа и выводит их в буфер в формате HTML для дальнейшей отправки браузеру. Код, инициирующий данное событие:\r\n</p>\r\n[php]public function fetchHead(&$document)\r\n{\r\n    // Trigger the onBeforeCompileHead event\r\n    // (skip for installation, since it causes an error)\r\n    $app = JFactory::getApplication();\r\n    $app->triggerEvent(\'onBeforeCompileHead\');\r\n    // ..........\r\n}[/php]\r\n<p>\r\nНаш системный плагин будет очень простым. Он добавит мета-тег <span style=\"color: blue;\">revised</span> (исправлено), исходя из значения параметра, введенного администратором сайта\r\n</p>\r\n[html]<meta name=\"revised\" content=\"Vasya Pupkin, 9 June 2013\" />[/html]\r\n<p>\r\nгде атрибут <span style=\"color: blue;\">content</span> как раз и содержит текст, введенный администратором.\r\n</p>\r\n<p>\r\nДля начала разберемся, каким образом в объекте типа <span style=\"color: blue;\">JDocumentHtml</span> хранятся данные HTML-заголовка. Класс <span style=\"color: blue;\">JDocumentHtml</span> имеет метод <span style=\"color: blue;\">getHeadData()</span>, позволяющий получить всю необходимую нам информацию. Добавим <span style=\"color: blue;\">print_r()</span> внутрь метода <span style=\"color: blue;\">fetchHead()</span>:\r\n</p>\r\n[php]public function fetchHead(&$document)\r\n{\r\n    print_r($document->getHeadData());\r\n    // Trigger the onBeforeCompileHead event\r\n    // (skip for installation, since it causes an error)\r\n    $app = JFactory::getApplication();\r\n    // ..........\r\n}[/php]\r\nРезультат:\r\n[code]Array\r\n(\r\n  [title] => Home\r\n  [description] => My description\r\n  [link] => \r\n  [metaTags] => Array\r\n    (\r\n      [http-equiv] => Array\r\n        (\r\n          [content-type] => text/html\r\n        )\r\n\r\n      [standard] => Array\r\n        (\r\n          [keywords] => My keywords\r\n          [rights] => My rights\r\n        )\r\n    )\r\n  [links] => Array\r\n    (\r\n      ..........\r\n    )\r\n  [styleSheets] => Array\r\n    (\r\n      ..........\r\n    )\r\n  [style] => Array\r\n    (\r\n      ..........\r\n    )\r\n\r\n  [scripts] => Array\r\n    (\r\n      ..........\r\n    )\r\n  [script] => Array\r\n    (\r\n      ..........\r\n    )\r\n  [custom] => Array\r\n    (\r\n      ..........\r\n    )\r\n)[/code]\r\n<p>\r\nСоздадим папку <span style=\"color: blue;\">plugins/system/mymeta</span> для нашего плагина и поместим в нее три файла:\r\n</p>\r\n<p><strong>index.html</strong></p>\r\n[html]<!DOCTYPE html><title></title>[/html]\r\n\r\n<p><strong>mymeta.php</strong></p>\r\n[php]<?php\r\n/**\r\n * @copyright    Copyright (C) 2013 Vasya Pupkin. All rights reserved.\r\n * @license      GNU General Public License version 2 or later; see LICENSE.txt\r\n */\r\n\r\n// no direct access\r\ndefined(\'_JEXEC\') or die;\r\n\r\n/**\r\n * Пример системного плагина\r\n */\r\nclass plgSystemMyMeta extends JPlugin\r\n{\r\n  function onBeforeCompileHead()\r\n  {\r\n    if ( $this->params->get(\'revised\') ) {\r\n      $document = JFactory::getDocument();\r\n      $headData = $document->getHeadData();\r\n      $headData[\'metaTags\'][\'standard\'][\'revised\'] = $this->params->get(\'revised\');\r\n      $document->setHeadData($headData);\r\n    }\r\n  }\r\n}[/php]\r\n\r\n<p><strong>mymeta.xml</strong></p>\r\n[xml]<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<install version=\"2.5\" type=\"plugin\" group=\"system\">\r\n  <name>My Meta Plugin</name>\r\n  <author>Vasya Pupkin</author>\r\n  <creationDate>June 2013</creationDate>\r\n  <copyright>Copyright (C) 2013 Vasya Pupkin. All rights reserved.</copyright>\r\n  <license>GNU General Public License version 2 or later; see LICENSE.txt</license>\r\n  <authorEmail>pupkin.v@mail.ru</authorEmail>\r\n  <authorUrl>www.pupkin.ru</authorUrl>\r\n  <version>2.5.0</version>\r\n  <description>My meta plugin</description>\r\n  <files>\r\n    <filename plugin=\"mymeta\">mymeta.php</filename>\r\n    <filename>index.html</filename>\r\n  </files>\r\n  <config>\r\n    <fields name=\"params\">\r\n      <fieldset name=\"basic\">\r\n        <field name=\"revised\" type=\"text\"\r\n          description=\"Meta revised text for content attribute\"\r\n          label=\"Revised content\"\r\n          default=\"\"\r\n          size=\"50\"\r\n        />\r\n      </fieldset>\r\n    </fields>\r\n  </config>\r\n</install>[/xml]\r\n<p>\r\nТеперь наш плагин готов к применению. Но он пока неизвестен в установке Joomla. Хотя все файлы находятся в нужных папках, для нового плагина отсутствует запись в таблице БД <span style=\"color: blue;\">#__extensions</span>.\r\n</p>\r\n<p>\r\nВоспользуемся средством «Discover (Обнаружение)». В административной части переходим Extensions=>Extensions Manager=>Discover (Расширения=>Менеджер расширений=>Поиск). Щелкаем по иконке «Найти».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/20/my-meta-discover.jpg\" class=\"zoom\" title=\"Обнаружение плагина средством Discover\"><img src=\"/files/blog/20/my-meta-discover-small.jpg\" alt=\"Обнаружение плагина средством Discover\" /></a>\r\n</p>\r\n<p>\r\nОтмечаем найденный плагин (флажок слева) и щелкаем по иконке «Install (Установить)». В итоге получим сообщение об успешной установке плагина.\r\n</p>\r\n<p>\r\nТеперь проверим наш плагин в действии. Идем Extensions=>Plugin Manager (Расширения=>Менеджер плагинов), фильтруем список всех плагинов по слову «meta», активирум наш плагин, щелкнув по иконке «Enabled (Включить)».\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/20/my-meta-enabled.jpg\" class=\"zoom\" title=\"Активация плагина My Meta\"><img src=\"/files/blog/20/my-meta-enabled-small.jpg\" alt=\"Активация плагина My Meta\" /></a>\r\n</p>\r\n<p>\r\nДалее переходим к редактированию плагина, вводим любые данные в поле «Revised content»\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/20/my-meta-settings.jpg\" class=\"zoom\" title=\"Настройки плагина My Meta\"><img src=\"/files/blog/20/my-meta-settings-small.jpg\" alt=\"Настройки плагина My Meta\" /></a>\r\n</p>\r\n<p>\r\nТеперь переходим в общедоступную часть сайта, обновляем страницу, смотрим исходный код:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/20/my-meta-html.jpg\" class=\"zoom\" title=\"Результат работы плагина My Meta\"><img src=\"/files/blog/20/my-meta-html-small.jpg\" alt=\"Результат работы плагина My Meta\" /></a>\r\n</p>','2013-06-09 10:48:38'),(21,11,'Создание плагина Joomla','Joomla плагин plugin JForm форма регистрация','Создание плагина Joomla','Давайте посмотрим, как создать плагин Joomla, изменяющий форму для регистрации нового пользователя. Плагин будет добавлять два дополнительных флажка: «Я согласен с условиями пользования» и «Мне уже исполнилось 18 лет». Оба флажка должны быть отмечены, чтобы пользователь смог зарегистрироваться.','<p>\r\nДавайте посмотрим, как создать плагин Joomla, изменяющий форму для регистрации нового пользователя. Плагин будет добавлять два дополнительных флажка:\r\n</p>\r\n<ul>\r\n  <li>Я согласен с условиями пользования</li>\r\n  <li>Мне уже исполнилось 18 лет</li>\r\n</ul>\r\n<p>\r\nОба флажка должны быть отмечены, чтобы пользователь смог зарегистрироваться. Кроме того, плагином можно будет управлять из административной части сайта: флажок «Мне уже исполнилось 18 лет» можно будет скрыть или показать.\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/21/my-reg-form.jpg\" class=\"zoom\" title=\"Форма регистрации с флажками\"><img src=\"/files/blog/21/my-reg-form-small.jpg\" alt=\"Форма регистрации с флажками\" /></a>\r\n</p>\r\n<p>\r\nИспользуя класс <span style=\"color: blue;\">JForm</span> и событие <span style=\"color: blue;\">onContentPrepareForm</span> мы замещаем форму регистрации в плагине. Кроме того, используем класс <span style=\"color: blue;\">JForm</span> для проверки данных формы.\r\n</p>\r\n<p>\r\nСоздадим три файла и две папки:\r\n</p>\r\n<ul>\r\n  <li>файл index.html</li>\r\n  <li>файл myregistration.xml</li>\r\n  <li>файл myregistration.php</li>\r\n  <li>папка forms</li>\r\n  <li>папка language</li>\r\n</ul>\r\n<p style=\"font-weight: bold;\">\r\nindex.html\r\n</p>\r\n[html]<!DOCTYPE html><title></title>[/html]\r\n<p style=\"font-weight: bold;\">\r\nmyregistration.xml\r\n</p>\r\n[xml]<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<extension version=\"2.5\" type=\"plugin\" group=\"user\" method=\"upgrade\" >\r\n  <name>plg_user_myregistration</name>\r\n  <author>Vasya Pupkin</author>\r\n  <creationDate>June 2013</creationDate>\r\n  <copyright>(C) 2013 Vasya Pupkin. All rights reserved.</copyright>\r\n  <license>GNU General Public License version 2 or later; see LICENSE.txt</license>\r\n  <authorEmail>pupkin.v@mail.ru</authorEmail>\r\n  <authorUrl>www.pupkin.ru</authorUrl>\r\n  <version>2.5.0</version>\r\n  <description>PLG_USER_MYREGISTRATION_XML_DESCRIPTION</description>\r\n\r\n  <files>\r\n    <filename plugin=\"myregistration\">myregistration.php</filename>\r\n    <filename>index.html</filename>\r\n    <folder>forms</folder>\r\n    <folder>language</folder>\r\n  </files>\r\n\r\n  <config>\r\n    <fields name=\"params\">\r\n      <fieldset name=\"basic\" >\r\n        <field name=\"show_age_checkbox\" type=\"radio\" label=\"PLG_USER_MYREGISTRATION_SHOW_AGE\"\r\n          description=\"PLG_USER_MYREGISTRATION_SHOW_AGE_DESC\" default=\"0\">\r\n          <option value=\"0\">JHide</option>\r\n          <option value=\"1\">JShow</option>\r\n        </field>\r\n      </fieldset>\r\n    </fields>\r\n  </config>\r\n</extension>[/xml]\r\n<p style=\"font-weight: bold;\">\r\nmyregistration.php\r\n</p>\r\n[php]<?php\r\n/**\r\n * @copyright    Copyright (C) 2013 Vasya Pupkin. All rights reserved.\r\n * @license      GNU General Public License version 2 or later; see LICENSE.txt\r\n */\r\n\r\ndefined(\'JPATH_BASE\') or die;\r\n\r\nclass plgUserMyRegistration extends JPlugin\r\n{\r\n  public function onContentPrepareForm($form, $data)\r\n  {\r\n    // если это не регистрационная форма, проигнорировать ее\r\n    if ($form->getName() != \'com_users.registration\') {\r\n      return;\r\n    }\r\n\r\n    // загрузить файл языковой поддержки\r\n    $this->loadLanguage();\r\n    \r\n    // загрузить специальный xml-файл в форму регистрации пользователя\r\n    $form->loadFile(dirname(__FILE__).\'/forms/form.xml\');\r\n    if (!$this->params->def(\'show_age_checkbox\', \'1\')) {\r\n      $form->removeField(\'old_enough\');\r\n    }\r\n    // $form->setFieldAttribute(\'old_enough\', \'required\', \'false\');\r\n  }\r\n}[/php]\r\n<p>\r\nУ класса <span style=\"color: blue;\">plgUserMyRegistration</span> имеется единственный метод <span style=\"color: blue;\">onContentPrepareForm()</span>. Событие <span style=\"color: blue;\">onContentPrepareForm</span> инициируется в тот момент, когда объект типа <span style=\"color: blue;\">JForm</span> уже подготовлен. Методу передаются два аргумента: переменная <span style=\"color: blue;\">$form</span>, в которой хранится объект типа <span style=\"color: blue;\">JForm</span> и переменная <span style=\"color: blue;\">$data</span>, в которой хранится объект с данными для заполнения формы.\r\n</p>\r\n<p>\r\nЗатем проверяется, является ли обрабатываемая форма регистрационной. Если она таковой не является, происходит возврат из метода. Далее загружается файл языковой поддержки для перевода текста надписей в форме на избранный язык.\r\n</p>\r\n<p>\r\nВся работа по созданию двух новых полей выполняется в последней строке кода. С этой целью вызывается метод <span style=\"color: blue;\">loadFile()</span> из класса <span style=\"color: blue;\">JForm</span> с файлом <span style=\"color: blue;\">form.xml</span> в качестве аргумента. В итоге поля из файла <span style=\"color: blue;\">form.xml</span> добавляются в форму, которая уже содержит поля из стандартного XML-файла (<span style=\"color: blue;\">components/com_users/models/forms/registration.xml</span>).\r\n</p>\r\n<p>\r\nФайл <span style=\"color: blue;\">form.xml</span> расположен внутри папки <span style=\"color: blue;\">forms</span>.\r\n</p>\r\n<p style=\"font-weight: bold;\">\r\nforms/form.xml\r\n</p>\r\n[xml]<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<form>\r\n  <fieldset name=\"tos\"\r\n    label=\"PLG_USER_MYREGISTRATION_TERMS_OF_SERVICE\"\r\n  >\r\n    <field name=\"tos_agree\" type=\"checkbox\"\r\n      default=\"0\"\r\n      filter=\"bool\"\r\n      label=\"PLG_USER_MYREGISTRATION_AGREE\"\r\n      required=\"true\"\r\n      value=\"1\"\r\n    />\r\n    <field name=\"old_enough\" type=\"checkbox\"\r\n      default=\"0\"\r\n      filter=\"bool\"\r\n      label=\"PLG_USER_MYREGISTRATION_AGE\"\r\n      required=\"true\"\r\n      value=\"1\"\r\n    />\r\n  </fieldset>\r\n</form>[/xml]\r\n<p>\r\nУ элементов <span style=\"color: blue;\">&lt;field&gt;</span> есть атрибуты:\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">default</span>: устанавливаемое по умолчанию значение, если флажок сброшен;</li>\r\n  <li><span style=\"color: blue;\">filter</span>: фильтр, используемы для проверки данных, введенных в это поле;</li>\r\n  <li><span style=\"color: blue;\">label</span>: метка поля</li>\r\n  <li><span style=\"color: blue;\">required</span>: признак, указывающий классу <span style=\"color: blue;\">JForm</span> сделать это поле обязательным для заполнения;</li>\r\n  <li><span style=\"color: blue;\">value</span>: значение, задаваемое в форме при установке флажка.</li>\r\n</ul>\r\n<p>\r\nАтрибуты <span style=\"color: blue;\">label</span> и <span style=\"color: blue;\">value</span> являются стандартными для элементов формы. Атрибут <span style=\"color: blue;\">filter</span> вынуждает класс <span style=\"color: blue;\">JForm</span> отфильтровать поле ввода данных, используя одно из стандартных значений класса <span style=\"color: blue;\">JForm</span>. В нашем случае должны отфильтровываться толко логические значения <span style=\"color: blue;\">true</span> и <span style=\"color: blue;\">false</span>.\r\n</p>\r\n<p>\r\nАтрибут <span style=\"color: blue;\">default</span> определяет значение, передаваемое при условии, что данные не введены (в нашем случае не установлен флажок). В качестве значения по умолчанию указан ноль, который преобразуется в логическое значение <span style=\"color: blue;\">false</span>.\r\n</p>\r\n<p>\r\nАтрибут <span style=\"color: blue;\">required</span> указывает классу <span style=\"color: blue;\">JForm</span> на то, что поле должно быть заполнено обязательно (в нашем случае установлен флажок). Класс <span style=\"color: blue;\">JForm</span> не даст пользователю возможность зарегистрироваться, если он не установол флажок.\r\n</p>\r\n<p>\r\nПапка <span style=\"color: blue;\">language</span> будет содержать две подпапки: <span style=\"color: blue;\">en-GB</span> и <span style=\"color: blue;\">ru-RU</span>. Внутри папки <span style=\"color: blue;\">en-GB</span> два файла:\r\n</p>\r\n<ul>\r\n  <li>en-GB.plg_user_myregistration.ini</li>\r\n  <li>en-GB.plg_user_myregistration.sys.ini</li>\r\n</ul>\r\n<p>\r\nВнутри папки <span style=\"color: blue;\">ru-RU</span> два файла:\r\n</p>\r\n<ul>\r\n  <li>ru-RU.plg_user_myregistration.ini</li>\r\n  <li>ru-RU.plg_user_myregistration.sys.ini</li>\r\n</ul>\r\n<p style=\"font-weight: bold;\">\r\nlanguage/en-GB/en-GB.plg_user_myregistration.ini\r\n</p>\r\n[code]PLG_USER_MYREGISTRATION_TERMS_OF_SERVICE=\"Terms of Service Agreement\"\r\nPLG_USER_MYREGISTRATION_AGREE=\"I agree to the terms\"\r\nPLG_USER_MYREGISTRATION_AGE=\"I am at least 18 years old\"\r\nPLG_USER_MYREGISTRATION_SHOW_AGE=\"Show Age Checkbox\"\r\nPLG_USER_MYREGISTRATION_SHOW_AGE_DESC=\"Show or Hide the Show Age checkbox. If it is shown, it will be required.\"[/code]\r\n<p style=\"font-weight: bold;\">\r\nlanguage/en-GB/en-GB.plg_user_myregistration.sys.ini\r\n</p>\r\n[code]PLG_USER_MYREGISTRATION=\"User - My Registration\"\r\nPLG_USER_MYREGISTRATION_XML_DESCRIPTION=\"Checks that terms and age boxes have been checked\"[/code]\r\n\r\n<p style=\"font-weight: bold;\">\r\nlanguage/ru-RU/ru-RU.plg_user_myregistration.ini\r\n</p>\r\n[code]PLG_USER_MYREGISTRATION_TERMS_OF_SERVICE=\"Условия пользования сайтом\"\r\nPLG_USER_MYREGISTRATION_AGREE=\"Я согласен с условиями пользования\"\r\nPLG_USER_MYREGISTRATION_AGE=\"Мне уже исполнилось 18 лет\"\r\nPLG_USER_MYREGISTRATION_SHOW_AGE=\"Показывать флажок «Мне уже исполнилось 18 лет»\"\r\nPLG_USER_MYREGISTRATION_SHOW_AGE_DESC=\"Позволяет показывать или скрывать флажок «Мне уже исполнилось 18 лет». Если флажок виден, он обязателен для заполнения.\"[/code]\r\n<p style=\"font-weight: bold;\">\r\nlanguage/ru-RU/ru-RU.plg_user_myregistration.sys.ini\r\n</p>\r\n[code]PLG_USER_MYREGISTRATION=\"Пользователи - Моя регистрация\"\r\nPLG_USER_MYREGISTRATION_XML_DESCRIPTION=\"Проверяет, чтобы флажки «Я согласен с условиями пользования» и «Мне уже исполнилось 18 лет» были отмечены\"][/code]\r\n<p>\r\nТеперь нам оставлось только заархивировать все файлы и папки, <a href=\"/blog/psts/19/\">установить наш плагин</a> штатными средствами Joomla, активировать его и проверить результат. \r\n</p>\r\n<p>\r\n<a href=\"/files/blog/21/my-reg-admin.jpg\" class=\"zoom\" title=\"Настройка формы регистрации\"><img src=\"/files/blog/21/my-reg-admin-small.jpg\" alt=\"Настройка формы регистрации\" /></a>\r\n</p>','2013-06-10 13:17:25'),(24,6,'Скачивание файлов по временным ссылкам','PHP MySQL скачивание файлов временный сылки','PHP-скрипт генерации временных ссылок для скачивания файлов','Наверное каждому приходилось сталкиваться с временными ссылками при скачивании фильмов, музыки, программ и т.п. Зачем это делается? Да чтобы другие сайты не размещали ссылки на файлы, которые расположены на нашем сайте. Давайте посмотрим, как написать скрипт, который будет генерить временные ссылки.','<p>\r\nНаверное каждому приходилось сталкиваться с временными ссылками при скачивании фильмов, музыки, программ и т.п. Зачем это делается? Да чтобы другие сайты не размещали ссылки на файлы, которые расположены на нашем сайте. Давайте посмотрим, как написать скрипт, который будет генерить временные ссылки.\r\n</p>\r\n<p>\r\nДля хранения информации о файлах и временных ссылках будем использовать БД. Таблица <span style=\"color: blue;\">files</span> хранит информацию о файлах:\r\n</p>\r\n[mysql]CREATE TABLE `files` (\r\n  `id` INT(10) PRIMARY KEY,\r\n  `title` VARCHAR(255) NOT NULL DEFAULT \'\',\r\n  `description` TEXT NOT NULL DEFAULT \'\',\r\n  `filename` VARCHAR(64) NOT NULL DEFAULT \'\',\r\n  `mimetype` VARCHAR(8) NOT NULL DEFAULT \'\'\r\n) ENGINE=INNODB DEFAULT CHARSET=cp1251;[/mysql]\r\n<p>\r\nЗдесь\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">id</span> — уникальный ID файла</li>\r\n  <li><span style=\"color: blue;\">title</span> — название файла, например, «Текстовой редактор NotePad++»</li>\r\n  <li><span style=\"color: blue;\">description</span> — описание файла, например, «Бесплатный редактор текстовых файлов (замена стандартного Блокнота) с поддержкой синтаксиса большого количества языков программирования, ориентирован для работы в операционной системе MS Windows»</li>\r\n  <li><span style=\"color: blue;\">filename</span> — имя файла для скачивания, например, NotePadPP.zip</li>\r\n  <li><span style=\"color: blue;\">mimetype</span> — MIME-тип файла</li>\r\n</ul>\r\n<p>\r\nТаблица <span style=\"color: blue;\">downloads</span> хранит информацию о временных ссылках:\r\n</p>\r\n[mysql]CREATE TABLE `downloads` (\r\n  `file_id` INT(10) NOT NULL DEFAULT 0,\r\n  `uniq_id` VARCHAR(32) NOT NULL DEFAULT \'\',\r\n  `puttime` DATETIME NOT NULL DEFAULT \'0000-00-00 00:00:00\'\r\n) ENGINE=INNODB DEFAULT CHARSET=cp1251;[/mysql]\r\n<p>\r\nЗдесь\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">file_id</span> — уникальный ID файла</li>\r\n  <li><span style=\"color: blue;\">uniq_id</span> — временная ссылка</li>\r\n  <li><span style=\"color: blue;\">puttime</span> — время создания ссылки</li>\r\n</ul>\r\n<p>\r\nФайлы для скачивания расположены в директории <span style=\"color: blue;\">DOCUMENT_ROOT/download/files/</span>. Эта директория должна быть защищена с помощью <span style=\"color: blue;\">.htaccess</span>:\r\n</p>\r\n[code]Order Allow,Deny\r\nDeny from All[/code]\r\n<p>\r\nСкрипт, который будет выполнять всю работу — выводить список файлов, генерить временные ссылки, и отдавать файлы на скачивание — <span style=\"color: blue;\">DOCUMENT_ROOT/download/index.php</span>\r\n</p>\r\n[php]<?php\r\n// Соединяемся с сервером БД\r\nmysql_connect ( \'localhost\', \'root\', \'\' );\r\nmysql_query( \'SET NAMES cp1251\' );\r\nmysql_select_db ( \'downloads\' );\r\n\r\n// удаляем устаревшие записи в таблице БД downloads\r\n$query = \"DELETE FROM `downloads` WHERE `puttime` < (NOW() - INTERVAL 12 HOUR)\";\r\nmysql_query( $query );\r\n\r\n$actions = array( \'fileslist\', \'getlink\', \'download\' );\r\n\r\n$action = \'fileslist\';\r\nif( isset( $_GET[\'action\'] ) and in_array( $_GET[\'action\'], $actions ) ) $action = $_GET[\'action\'];\r\n\r\nswitch( $action ) {\r\n  case \'fileslist\':      // список файлов для скачивания\r\n    fileslist(); break;\r\n  case \'getlink\':        // создаем временную ссылку\r\n    getlink(); break;\r\n  case \'download\':       // отдаем файл на скачивание\r\n    download();  break;\r\n}\r\n\r\nfunction fileslist() {\r\n  echo \'<h3>Файлы для скачивания</h3>\'.\"\\n\";\r\n  $query = \"SELECT `id`, `title`, `description`, `mimetype` FROM `files` WHERE 1 ORDER BY `title`\";\r\n  $res = mysql_query( $query );\r\n\r\n  echo \'<table border=\"1\">\'.\"\\n\";\r\n  echo \'<tr><th>№</th><th>Наименование</th><th>Описание</th><th>Тип</th><th>Скачать</th></tr>\'.\"\\n\";\r\n  $i = 1;\r\n  while( $file = mysql_fetch_array( $res ) ) {\r\n    echo \'<tr>\';\r\n    echo \'<td>\'.$i.\'</td>\';\r\n    echo \'<td>\'.$file[\'title\'].\'</td>\';\r\n    echo \'<td>\'.$file[\'description\'].\'</td>\';\r\n    echo \'<td>\'.$file[\'mimetype\'].\'</td>\';\r\n    echo \'<td><a href=\"\'.$_SERVER[\'PHP_SELF\'].\'?action=getlink&id=\'.$file[\'id\'].\'\">Скачать</a></td>\';\r\n    echo \'</tr>\'.\"\\n\";\r\n    $i++;\r\n  }\r\n  echo \'</table>\'.\"\\n\";\r\n}\r\n\r\nfunction getlink() {\r\n  // если не передан уникальный ID файла - значит пользователь попал сюда по ошибке\r\n  if( !isset( $_GET[\'id\'] ) ) {\r\n    header( \'Location: \'.$_SERVER[\'PHP_SELF\'].\'?action=fileslist\' );\r\n    die();\r\n  }\r\n  $id = (int)$_GET[\'id\'];\r\n\r\n  // прежде чем генерить временную ссылку, проверяем, что есть такая запись в таблице БД\r\n  $query = \"SELECT 1 FROM `files` WHERE `id`=\".$id;\r\n  $res = mysql_query( $query );\r\n  if( mysql_num_rows( $res ) == 0 ) {\r\n    header ( \'HTTP/1.1 404 Not Found\' );\r\n    die(); \r\n  }\r\n \r\n  $uniq_id = md5( uniqid(rand(), 1) );\r\n  $query = \"INSERT INTO `downloads` (`file_id`, `uniq_id`, `puttime`)\r\n            VALUES (\".$id.\", \'\".$uniq_id.\"\', NOW())\";\r\n  mysql_query( $query );\r\n \r\n  $link = $_SERVER[\'PHP_SELF\'].\'?action=download&id=\'.$id.\'&code=\'.$uniq_id;\r\n  echo \'<p>Для загрузки файла перейдите по <a href=\"\'.$link.\'\">этой ссылке</a>. \';\r\n  echo \'Ссылка действительна в течение 12 часов.</p>\'.\"\\n\";\r\n}\r\n\r\nfunction download() {\r\n  // если не передан уникальный ID файла - значит пользователь попал сюда по ошибке\r\n  if( !isset( $_GET[\'id\'] ) ) {\r\n    header( \'Location: \'.$_SERVER[\'PHP_SELF\'].\'?action=fileslist\' );\r\n    die();\r\n  }\r\n  $id = (int)$_GET[\'id\'];\r\n \r\n  if( !isset( $_GET[\'code\'] ) )  {\r\n    header( \'Location: \'.$_SERVER[\'PHP_SELF\'].\'?action=fileslist\' );\r\n    die();\r\n  }\r\n \r\n  if( !preg_match( \'#[a-f0-9]{32}#\', $_GET[\'code\'] ) )  {\r\n    header ( \'HTTP/1.1 404 Not Found\' );\r\n    die();\r\n  }\r\n \r\n  $query = \"SELECT 1 FROM `downloads` WHERE `file_id`=\".$id.\"\r\n            AND `uniq_id`=\'\".$_GET[\'code\'].\"\' AND `puttime` > (NOW() - INTERVAL 12 HOUR)\";\r\n  $res = mysql_query( $query );\r\n  if( mysql_num_rows( $res ) == 0 ) {\r\n    header ( \'HTTP/1.1 404 Not Found\' );\r\n    die(); \r\n  }\r\n \r\n  $query = \"SELECT `filename`, `mimetype` FROM `files` WHERE `id`=\".$id;\r\n  $res = mysql_query( $query );\r\n  if( mysql_num_rows( $res ) == 0 ) {\r\n    header ( \'HTTP/1.1 404 Not Found\' );\r\n    die(); \r\n  }\r\n  list( $filename, $mimetype ) = mysql_fetch_row( $res );\r\n \r\n  // если файла нет\r\n  if( !file_exists( \'./files/\'.$filename ) ) {\r\n    header ( \'HTTP/1.1 404 Not Found\' );\r\n    die();\r\n  }\r\n \r\n  // получаем размер файла\r\n  $fsize = filesize( \'./files/\'.$filename );\r\n  // дата модификации файла для кеширования\r\n  $ftime = date( \'D, d M Y H:i:s T\', filemtime( \'./files/\'.$filename ) );\r\n  // смещение от начала файла\r\n  $range = 0;\r\n \r\n  // пробуем открыть\r\n  $handle = @fopen( \'./files/\'.$filename, \'rb\' );\r\n\r\n  // если не удалось\r\n  if( !$handle ){\r\n    header ( \'HTTP/1.1 404 Not Found\' );\r\n    die();\r\n  }\r\n \r\n  // если запрашивающий агент поддерживает докачку\r\n  if( $_SERVER[\'HTTP_RANGE\'] ) {\r\n    $range = $_SERVER[\'HTTP_RANGE\'];\r\n    $range = str_replace( \'bytes=\', \'\', $range );\r\n    $range = str_replace( \'-\', \'\', $range );\r\n    // смещаемся по файлу на нужное смещение\r\n    if ( $range ) fseek( $handle, $range );\r\n  }\r\n \r\n  // если есть смещение\r\n  if( $range ) {\r\n    header( \'HTTP/1.1 206 Partial Content\' );\r\n  } else {\r\n    header( \'HTTP/1.1 200 OK\' );\r\n  }\r\n \r\n  header( \'Content-Disposition: attachment; filename=\"\'.$filename.\'\"\' );\r\n  header( \'Last-Modified: \'.$ftime );\r\n  header( \'Content-Length: \'.($fsize-$range) );\r\n  header( \'Accept-Ranges: bytes\' );\r\n  header( \'Content-Range: bytes \'.$range.\'-\'.($fsize - 1).\'/\'.$fsize );\r\n\r\n  switch( $mimetype ) {\r\n    case \'pdf\' : $ctype = \'application/pdf\'; break;\r\n    case \'zip\' : $ctype = \'application/zip\'; break;\r\n    case \'doc\' : $ctype = \'application/msword\'; break;\r\n    case \'xls\' : $ctype = \'application/vnd.ms-excel\'; break;\r\n    case \'gif\' : $ctype = \'image/gif\'; break;\r\n    case \'png\' : $ctype = \'image/png\'; break;\r\n    case \'jpeg\':\r\n    case \'jpg\' : $ctype = \'image/jpg\'; break;\r\n    case \'mp3\' : $ctype = \'audio/mpeg\'; break;\r\n    case \'wav\' : $ctype = \'audio/x-wav\'; break;\r\n    case \'mpeg\':\r\n    case \'mpg\' :\r\n    case \'mpe\' : $ctype = \'video/mpeg\'; break;\r\n    case \'mov\' : $ctype = \'video/quicktime\'; break;\r\n    case \'avi\' : $ctype = \'video/x-msvideo\'; break;\r\n    default    : $ctype = \'application/octet-stream\';\r\n  }\r\n \r\n  header( \'Content-Type: \'.$ctype );\r\n  readfile( \'./files/\'.$filename );\r\n  fclose( $handle );\r\n}\r\n?>[/php]','2009-06-02 06:33:28'),(26,6,'Как отдать пользователю файл скриптом','PHP скачивание файлов докачка','Как отдать пользователю файл скриптом','Зачастую бывает необходимость в том, чтобы сайт умел отдавать файлы не просто на скачивание, а поддерживать возможность скачивания в несколько потоков и докачки файла в случае обрыва соединения. Для начала попробуем просто отдать файл браузеру.','<p>\r\nЗачастую бывает необходимость в том, чтобы сайт умел отдавать файлы не просто на скачивание, а поддерживать возможность скачивания в несколько потоков и докачки файла в случае обрыва соединения.\r\n</p>\r\n<p>\r\nДля начала попробуем просто отдать файл браузеру:\r\n</p>\r\n\r\n[php]<?php\r\nheader(\'Content-Type: application/octet-stream\');\r\nheader(\'Content-Disposition: attachment; filename=\"\'.basename($filename).\'\"\');\r\nreadfile($filename);\r\n?>[/php]\r\n\r\n<p>\r\nВ этом примере мы сформировали два заголовка для браузера, первый из которых сообщает ему о типе содержимого (в данном случае — поток каких-то байтов), а второй заставляет его выдать нам окно с именем файла для его сохранения на локальном диске.\r\n</p>\r\n<h2>С поддержкой докачки</h2>\r\n<p>\r\nЗаголовок <span style=\"color: blue;\">Accept-Ranges: bytes</span>, отправленный сервером, сообщает клиенту о том, что он может запрашивать данные с сервера фрагментами, указывая их смещение в байтах.\r\n</p>\r\n<p>\r\nЗная эту возможность, браузер может передать серверу смещение в байтах, с которого необходимо начать передачу файла. Для этого браузер посылает заголовок <span style=\"color: blue;\">Range</span>:\r\n</p>\r\n[code]Range: bytes=500-[/code]\r\n<p>\r\nгде <span style=\"color: blue;\">500</span> — смещение в байтах от начала файла.\r\n</p>\r\n<p>\r\nСервер в свою очередь устанавливает переменную окружения <span style=\"color: blue;\">HTTP_RANGE</span> и должен отправить заголовок\r\n</p>\r\n[code]HTTP/1.1 206 Partial Content[/code]\r\n<p>\r\nкоторый дает клиенту понять, что отдается часть контента. Далее сервер должен отдать клиенту ту часть контента, которую тот запрашивал с соответствующими заголовками:\r\n</p>\r\n[code]Content-Type: application/octet-stream\r\nContent-Disposition: attachment; filename=\"имя_файла\"\r\nLast-Modified: время_модификации_файла\r\nAccept-Ranges: bytes\r\nContent-Length: длина_отдаваемой_части\r\nContent-Range: bytes от-до/размер[/code]\r\n<p>\r\nПоясню последний заголовок на примере: имеем файл размером 10000 байт, отдаем все, кроме первых 500 байт. Тогда заголовок будет выглядеть так:\r\n</p>\r\n\r\n[code]Content-Range: bytes 500-9999/10000[/code]\r\n\r\n[php]<?php\r\n// если файла нет\r\nif (!file_exists($filename)) {\r\n  header (\'HTTP/1.0 404 Not Found\');\r\n  exit;\r\n}\r\n \r\n// получим размер файла\r\n$fsize = filesize($filename);\r\n// дата модификации файла для кеширования\r\n$ftime = date(\"D, d M Y H:i:s T\", filemtime($filename));\r\n// смещение от начала файла\r\n$range = 0;\r\n \r\n// пробуем открыть\r\n$handle = @fopen($filename, \"rb\");\r\n\r\n// если не удалось\r\nif (!$handle){\r\n  header (\'HTTP/1.0 403 Forbidden\');\r\n  exit;\r\n}\r\n \r\n// если запрашивающий агент поддерживает докачку\r\nif ( isset($_SERVER[\'HTTP_RANGE\']) ) {\r\n  $range = $_SERVER[\'HTTP_RANGE\'];\r\n  $range = str_replace(\'bytes=\', \'\', $range);\r\n  $range = str_replace(\'-\', \'\', $range);\r\n  // смещаемся по файлу на нужное смещение\r\n  if ($range) fseek($handle, $range);\r\n}\r\n \r\n// если есть смещение\r\nif ($range) {\r\n  header(\'HTTP/1.1 206 Partial Content\');\r\n} else {\r\n  header(\'HTTP/1.1 200 OK\');\r\n}\r\n \r\nheader(\'Content-Disposition: attachment; filename=\"\'.basename($filename).\'\"\');\r\nheader(\'Content-Type: application/octet-stream\');\r\nheader(\'Last-Modified: \'.$ftime);\r\nheader(\'Accept-Ranges: bytes\');\r\nheader(\'Content-Length: \'.($fsize - $range));\r\nheader(\'Content-Range: bytes \'.$range.\'-\'.($fsize - 1).\'/\'.$fsize);\r\n \r\nfpassthru($handle);\r\n \r\nfclose($handle);\r\n?>[/php]\r\n\r\n<h2>В несколько потоков</h2>\r\n<p>\r\nЕсли клиент скачивает в несколько потоков, он будет отправлять нам заголовки вида (для файла длиной 10000 байт):\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">Range: bytes=0-499</span> — первые 500 байт</li>\r\n  <li><span style=\"color: blue;\">Range: bytes=500-999</span> — вторые 500 байт</li>\r\n  <li><span style=\"color: blue;\">Range: bytes=-500</span> или <span style=\"color: blue;\">Range: bytes=9500-</span> — последние 500 байт</li>\r\n  <li><span style=\"color: blue;\">Range: bytes=500-</span> или <span style=\"color: blue;\">Range: bytes=-9500</span> — все, кроме первых 500 байт</li>\r\n  <li><span style=\"color: blue;\">Range: bytes=0-0</span> — только первый байт</li>\r\n</ul>\r\n<p>\r\nа мы должны отвечать так\r\n</p>\r\n<ul>\r\n  <li><span style=\"color: blue;\">Content-Range: bytes 0-499/10000</span> — отдаем первые 500 байт</li>\r\n  <li><span style=\"color: blue;\">Content-Range: bytes 500-999/10000</span> — отдаем вторые 500 байт</li>\r\n  <li><span style=\"color: blue;\">Content-Range: bytes 9500-9999/10000</span> — отдаем последние 500 байт</li>\r\n  <li><span style=\"color: blue;\">Content-Range: bytes 500-9999/10000</span> — отдаем все, кроме первых 500 байт</li>\r\n  <li><span style=\"color: blue;\">Content-Range: bytes 0-0/10000</span> — отдаем только первый байт</li>\r\n</ul>\r\n\r\n[php]<?php\r\n// если файла нет\r\nif (!file_exists($filename)) {\r\n  header (\'HTTP/1.0 404 Not Found\');\r\n  exit;\r\n}\r\n \r\n// получим размер файла\r\n$fsize = filesize($filename);\r\n// дата модификации файла для кеширования\r\n$ftime = date(\"D, d M Y H:i:s T\", filemtime($filename));\r\n \r\n// пробуем открыть\r\n$handle = @fopen($filename, \"rb\");\r\n\r\n// если не удалось\r\nif (!$handle){\r\n  header (\'HTTP/1.0 403 Forbidden\');\r\n  exit;\r\n}\r\n\r\n// если запрашивающий агент поддерживает докачку\r\nif ( isset($_SERVER[\'HTTP_RANGE\']) ) {\r\n  $range = $_SERVER[\'HTTP_RANGE\']; \r\n  $range = str_replace( \'bytes=\', \'\', $range );   \r\n  $range = explode( \'-\', $range );\r\n  if ( $range[0]==\'0\' && $range[1]==\'0\' ) { // если bytes=0-0\r\n    $start = $stop = 0;\r\n  } elseif ( !strlen( $range[0] ) ) { // если bytes=-500\r\n    $start = $fsize - (int)$range[1]; \r\n    $stop = $fsize - 1; \r\n  } else { // если bytes=500-999 или bytes=500-\r\n    $stop = (int)$range[1]; \r\n    if ( !$stop ) $stop = $fsize - 1; // bytes=500-\r\n    $start = (int)$range[0]; \r\n    if ( $start ) fseek( $fd, $start ); \r\n  } \r\n  $length = $stop - $start + 1; \r\n  header(\'HTTP/1.1 206 Partial Content\');\r\n  header(\'Content-Disposition: attachment; filename=\"\'.basename($filename).\'\"\');\r\n  header(\'Content-Type: application/octet-stream\');\r\n  header(\'Last-Modified: \'.$ftime);\r\n  header(\'Accept-Ranges: bytes\');\r\n  header(\'Content-Length: \' . $length); \r\n  header(\'Content-Range: bytes \'.$start.\'-\'.$stop.\'/\'.$fsize);\r\n  echo fread($handle, $length);\r\n} else { // запрашивающий агент не поддерживает докачку\r\n  header(\'HTTP/1.1 200 OK\' );\r\n  header(\'Content-Disposition: attachment; filename=\"\'.basename($filename).\'\"\');\r\n  header(\'Content-Type: application/octet-stream\');\r\n  header(\'Last-Modified: \'.$ftime);\r\n  header(\'Accept-Ranges: bytes\');\r\n  header(\'Content-Length: \'.$fsize); \r\n  fpassthru($handle);\r\n}\r\n\r\nfclose($handle);\r\n?>[/php]\r\n<p>\r\n<strong>P.S.</strong> Этот код неполон, поскольку не обрабатывает мультидиапазонные запросы, когда клиент требует от сервера сразу несколько фрагментов:\r\n</p>\r\n[code]Range: bytes=0-499,500-999,1000-1499[/code]','2008-07-01 08:28:23'),(27,6,'Добавление и удаление строк таблицы БД','PHP MySQL добавление редактирование удаление  записи таблица БД','Добавление, редактирование и удаление строк таблицы базы данных','Большинство современных сайтов работают на какой-нибудь CMS. Вся информация, как правило, хранится в базе данных. Когда мы через админку добавляем, удаляем, редактируем новости или статьи — фактически, мы добавляем, удаляем, редактируем записи в таблице БД. Посмотрим, как мог бы выглядеть такой скрипт.','<p>\r\nБольшинство современных сайтов работают на какой-нибудь CMS. Вся информация, как правило, хранится в базе данных. Когда мы через админку добавляем, удаляем, редактируем новости или статьи — фактически, мы добавляем, удаляем, редактируем записи в таблице БД. Посмотрим, как мог бы выглядеть такой скрипт.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/27/edit-items.jpg\" alt=\"Форма для редактирования записей\" />\r\n</p>\r\n[php]<?php\r\n$actions = array(\'showlist\', \'addform\', \'add\', \'editform\', \'update\', \'delete\');\r\n$action = \'showlist\';\r\nif ( isset($_GET[\'action\']) and in_array($_GET[\'action\'], $actions) ) $action= $_GET[\'action\'];\r\n\r\nswitch ( $action ) \r\n{ \r\n  case \'showlist\':    // Список всех записей в таблице БД\r\n    show_list(); break; \r\n  case \'addform\':     // Форма для добавления новой записи \r\n    get_add_item_form(); break; \r\n  case \'add\':         // Добавить новую запись в таблицу БД\r\n    add_item(); break;\r\n  case \'editform\':    // Форма для редактирования записи \r\n    get_edit_item_form(); break; \r\n  case \'update\':      // Обновить запись в таблице БД\r\n    update_item(); break; \r\n  case \'delete\':      // Удалить запись в таблице БД\r\n    delete_item(); break;\r\n}\r\n\r\n// Функция выводит список всех записей в таблице БД\r\nfunction show_list() \r\n{ \r\n  $query = \"SELECT `id`, `title`, `description` FROM `items` WHERE 1\"; \r\n  $res = mysql_query( $query ); \r\n  echo \'<h2>Список</h2>\'; \r\n  echo \'<table border=\"1\" cellpadding=\"2\" cellspacing=\"0\">\'; \r\n  echo \'<tr><th>ID</th><th>Наименование</th><th>Описание</th><th>Ред.</th><th>Удл.</th></tr>\'; \r\n  while ( $item = mysql_fetch_array( $res ) ) \r\n  { \r\n    echo \'<tr>\'; \r\n    echo \'<td>\'.$item[\'id\'].\'</td>\'; \r\n    echo \'<td>\'.$item[\'title\'].\'</td>\'; \r\n    echo \'<td>\'.$item[\'description\'].\'</td>\'; \r\n    echo \'<td><a href=\"\'.$_SERVER[\'PHP_SELF\'].\'?action=editform&id=\'.$item[\'id\'].\'\">Ред.</a></td>\'; \r\n    echo \'<td><a href=\"\'.$_SERVER[\'PHP_SELF\'].\'?action=delete&id=\'.$item[\'id\'].\'\">Удл.</a></td>\'; \r\n    echo \'</tr>\'; \r\n  } \r\n  echo \'</table>\';\r\n  echo \'<p><a href=\"\'.$_SERVER[\'PHP_SELF\'].\'?action=addform\">Добавить</a></p>\';  \r\n} \r\n\r\n// Функция формирует форму для добавления записи в таблице БД \r\nfunction get_add_item_form() \r\n{ \r\n  echo \'<h2>Добавить</h2>\';  \r\n  echo \'<form name=\"addform\" action=\"\'.$_SERVER[\'PHP_SELF\'].\'?action=add\" method=\"post\">\'; \r\n  echo \'<table>\'; \r\n  echo \'<tr>\'; \r\n  echo \'<td>Наименование</td>\'; \r\n  echo \'<td><input type=\"text\" name=\"title\" value=\"\" /></td>\'; \r\n  echo \'</tr>\'; \r\n  echo \'<tr>\'; \r\n  echo \'<td>Описание</td>\'; \r\n  echo \'<td><textarea name=\"description\"></textarea></td>\'; \r\n  echo \'</tr>\'; \r\n  echo \'<tr>\'; \r\n  echo \'<td></td>\'; \r\n  echo \'<td><input type=\"submit\" value=\"Сохранить\"></td>\'; \r\n  echo \'</tr>\'; \r\n  echo \'</table>\'; \r\n  echo \'</form>\'; \r\n}\r\n\r\n// Функция добавляет новую запись в таблицу БД  \r\nfunction add_item() \r\n{ \r\n  $title = mysql_escape_string( $_POST[\'title\'] ); \r\n  $description = mysql_escape_string( $_POST[\'description\'] ); \r\n  $query = \"INSERT INTO items (title, description) VALUES (\'\".$title.\"\', \'\".$description.\"\');\"; \r\n  mysql_query ( $query ); \r\n  header( \'Location: \'.$_SERVER[\'PHP_SELF\'] );\r\n  die();\r\n}\r\n\r\n// Функция формирует форму для редактирования записи в таблице БД \r\nfunction get_edit_item_form() \r\n{ \r\n  echo \'<h2>Редактировать</h2>\'; \r\n  $query = \"SELECT `title`, `description` FROM items WHERE `id`=\".$_GET[\'id\']; \r\n  $res = mysql_query( $query ); \r\n  $item = mysql_fetch_array( $res ); \r\n  echo \'<form name=\"editform\" action=\"\'.$_SERVER[\'PHP_SELF\'].\'?action=update&id=\'.$_GET[\'id\'].\'\" method=\"POST\">\'; \r\n  echo \'<table>\'; \r\n  echo \'<tr>\'; \r\n  echo \'<td>Наименование</td>\'; \r\n  echo \'<td><input type=\"text\" name=\"title\" value=\"\'.htmlspecialchars($item[\'title\']).\'\"></td>\'; \r\n  echo \'</tr>\'; \r\n  echo \'<tr>\'; \r\n  echo \'<td>Описание</td>\'; \r\n  echo \'<td><textarea name=\"description\">\'.htmlspecialchars($item[\'description\']).\'</textarea></td>\'; \r\n  echo \'</tr>\'; \r\n  echo \'<tr>\'; \r\n  echo \'<td><input type=\"submit\" value=\"Сохранить\"></td>\'; \r\n  echo \'<td><button type=\"button\" onClick=\"history.back();\">Отменить</button></td>\'; \r\n  echo \'</tr>\'; \r\n  echo \'</table>\'; \r\n  echo \'</form>\'; \r\n} \r\n\r\n// Функция обновляет запись в таблице БД  \r\nfunction update_item() \r\n{ \r\n  $title = mysql_escape_string( $_POST[\'title\'] ); \r\n  $description = mysql_escape_string( $_POST[\'description\'] ); \r\n  $query = \"UPDATE `items` SET `title`=\'\".$title.\"\', `description`=\'\".$description.\"\' \r\n            WHERE `id`=\".$_GET[\'id\']; \r\n  mysql_query ( $query ); \r\n  header( \'Location: \'.$_SERVER[\'PHP_SELF\'] );\r\n  die();\r\n} \r\n\r\n// Функция удаляет запись в таблице БД \r\nfunction delete_item() \r\n{ \r\n  $query = \"DELETE FROM `items` WHERE `id`=\".$_GET[\'id\']; \r\n  mysql_query ( $query ); \r\n  header( \'Location: \'.$_SERVER[\'PHP_SELF\'] );\r\n  die();\r\n} \r\n?>[/php]\r\n<h2>Выбор и удаление нескольких записей</h2>\r\n<p>\r\nПри создании админки часто встает задача выбора или удаления сразу нескольких записей из базы данных. Для этого обычно создается HTML-форма с набором флажков:\r\n</p>\r\n[html]<input type=\"checkbox\" name=\"item[]\" value=\"15\" />\r\n<input type=\"checkbox\" name=\"item[]\" value=\"17\" />\r\n<input type=\"checkbox\" name=\"item[]\" value=\"22\" />\r\n<input type=\"checkbox\" name=\"item[]\" value=\"25\" />\r\n<input type=\"checkbox\" name=\"item[]\" value=\"32\" />[/html]\r\n<p>\r\nСкрипт, формирующий список элементов <span style=\"color: blue;\">checkbox</span> формы, и удаляющий выбранные записи может выглядеть так:\r\n</p>\r\n[php]<?php\r\necho \'<h2>Список</h2>\';\r\necho \'<form action=\"\'.$_SERVER[\'PHP_SELF\'].\'\" method=\"POST\">\';\r\n$query = \"SELECT `id`, `title` FROM `items` WHERE 1\"; \r\n$res = mysql_query( $query ); \r\necho \'<table border=\"1\">\';; \r\necho \'<tr><th>ID</th><th>Наименование</th><th>Удл.</th></tr>\'; \r\nwhile ( $item = mysql_fetch_array( $res ) ) \r\n{ \r\n  echo \'<tr>\'; \r\n  echo \'<td>\'.$item[\'id\'].\'</td>\'; \r\n  echo \'<td>\'.$item[\'title\'].\'</td>\'; \r\n  echo \'<td><input type=\"checkbox\" name=\"item[]\" value=\"\'.$item[\'id\'].\'\" /></td>\';  \r\n  echo \'</tr>\'; \r\n} \r\necho \'</table>\';\r\necho \'<input type=\"submit\" name=\"submitForm\" value=\"Удалить отмеченные\" />\';\r\necho \'</form>\';\r\n\r\nif ( isset ( $_POST[\'item\'] ) )\r\n{\r\n  $ids = implode( \',\', $_POST[\'item\'] );\r\n  $query = \'DELETE FROM `items` WHERE `id` IN (\'.$ids.\')\';\r\n  mysql_query( $query );\r\n  header( \'Location: \'.$_SERVER[\'PHP_SELF\'] );\r\n}\r\n?>[/php]\r\n<p>\r\n<img src=\"/files/blog/27/delete-items.jpg\" alt=\"Форма для удаления нескольких записей\" />\r\n</p>\r\n<p>\r\nМассив <span style=\"color: blue;\">$_POST[\'item\']</span> содержит <span style=\"color: blue;\">ID</span> всех отмеченных checkbox-ов (не отмеченные на сервер не передаются). Запрос к БД на удаление выглядит так:\r\n</p>\r\n[mysql]DELETE FROM `items` WHERE `id` IN (6,9,11,12);[/mysql]\r\n<p>\r\nЕсли стоит задача не удаления записей, а их выборки, то вместо оператора <span style=\"color: blue;\">DELETE</span> следует использовать оператор <span style=\"color: blue;\">SELECT</span>.\r\n</p>','2008-06-30 05:56:01'),(29,4,'Верстка страниц. Две и три колонки','верстка html css две три колонки плавающие элементы','Верстка страниц. Две и три колонки. HTML и CSS.','Свойство float принимает одно из трех значений: left, right или none. Это свойство, примененное к тегу div с содержимым, позволяет создать боковое меню. Здесь блок #left перемещен к левому краю. У него есть фиксированная ширина, однако у главного содержимого #content ее нет, что делает этот дизайн резиновым. Главный раздел страницы просто расширяется, заполняя окно браузера.','<h2>Две колонки</h2>\r\n<h3>Две колонки, резиновый</h3>\r\n<p>\r\nСвойство float принимает одно из трех значений: left, right или none. Это свойство, примененное к тегу &lt;div id=\"sidebar\"&gt; с содержимым, позволяет создать боковое меню:\r\n</p>\r\n[css]#sidebar {\r\n  float: left;\r\n  width: 200px;\r\n}\r\n#content {\r\n  margin-left: 200px;\r\n}[/css]\r\n<p>\r\nНа рисунке ниже показаны эти два css-свойства в действии:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/29/1.png\" alt=\"\" />\r\n</p>\r\n<p>\r\nЗдесь блок #left перемещен к левому краю. У него есть фиксированная ширина, однако у главного содержимого #content ее нет, что делает этот дизайн резиновым. Главный раздел страницы просто расширяется, заполняя окно браузера.\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Шаблон, две колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"header\"></div>\r\n<div id=\"left\">Левая колонка</div>\r\n<div id=\"content\">Основной контент</div>\r\n<div id=\"footer\"></div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  background: #ddd;\r\n}\r\n#content {\r\n  margin-left: 250px;\r\n  overflow: hidden;\r\n  background: #eee;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<p>\r\n<a href=\"/files/blog/29/2.png\" class=\"zoom\"><img src=\"/files/blog/29/2-small.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nДавайте немного улучшим шаблон и добавим отступы:\r\n</p>\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  padding: 10px;\r\n  background: #ddd;\r\n}\r\n#content {\r\n  margin-left: 270px;\r\n  padding: 10px;\r\n  background: #eee;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<p>\r\n<a href=\"/files/blog/29/3.png\" class=\"zoom\"><img src=\"/files/blog/29/3-small.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nЭлемент #left по высоте меньше элемента #content, но мы можем это исправить, добавив в разметку еще один элемент &lt;div id=\"bg-left\"&gt; и установив для него background-image шириной 270px, высотой 1px и цветом #ddd:\r\n</p>\r\n[html]<body>\r\n<div id=\"header\"></div>\r\n<div id=\"bg-left\">\r\n  <div id=\"left\">Левая колонка</div>\r\n  <div id=\"content\">Основной контент</div>\r\n</div>\r\n<div id=\"footer\"></div>\r\n</body>[/html]\r\n[css]#bg-left {\r\n  background: url(images/bg-left.png) left top repeat-y;\r\n}[/css]\r\n<p>\r\n<a href=\"/files/blog/29/4.png\" class=\"zoom\"><img src=\"/files/blog/29/4-small.png\" alt=\"\" /></a>\r\n</p>\r\n<h3>Две колонки, фиксированный</h3>\r\n<p>\r\nОграничим шаблон по ширине и зададим выравнивание по центру, для этого добавим еще один элемент &lt;div id=\"wrapper\"&gt;:\r\n</p>\r\n[html]<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"bg-left\">\r\n    <div id=\"left\">Левая колонка</div>\r\n    <div id=\"content\">Основной контент</div>\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n</div>\r\n</body>[/html]\r\n[css]#wrapper {\r\n  width: 1000px;\r\n  margin: 0 auto;\r\n}[/css]\r\n<p>\r\n<a href=\"/files/blog/29/5.png\" class=\"zoom\"><img src=\"/files/blog/29/5-small.png\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nСовместим достоинства фиксированной и резиновой верстки:\r\n</p>\r\n[css]#wrapper {\r\n  min-width: 1000px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}[/css]\r\n<p>\r\nАналогично создаем шаблон с двумя колонками, где блок #right перемещен к правому краю:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/29/6.png\" alt=\"\" />\r\n</p>\r\n<h2>Три колонки</h2>\r\n<h3>Три колонки, фиксированный</h3>\r\n<p>\r\nТеперь создадим шаблон с тремя колонками:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/29/7.png\" alt=\"\" />\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Шаблон, три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"bg-left\">\r\n  <div id=\"bg-right\">\r\n    <div id=\"left\">Левая колонка</div>\r\n    <div id=\"right\">Правая колонка</div>\r\n    <div id=\"content\">Основной контент</div>\r\n  </div>\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  width: 1000px;\r\n  margin: 0 auto;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  padding: 10px;\r\n  background: #ddd;\r\n}\r\n#bg-left {\r\n  background: url(images/bg-left.png) left top repeat-y;\r\n}\r\n#right {\r\n  float: right;\r\n  width: 200px;\r\n  padding: 10px;\r\n  background: #ccc;\r\n}\r\n#bg-right {\r\n  background: url(images/bg-right.png) right top repeat-y;\r\n}\r\n#content {\r\n  margin-left: 270px;\r\n  margin-right: 220px;\r\n  padding: 10px;\r\n  background: #eee;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<p>\r\n<a href=\"/files/blog/29/8.png\" class=\"zoom\"><img src=\"/files/blog/29/8-small.png\" alt=\"\" /></a>\r\n</p>\r\n<h3>Три колонки, фиксированный, контент сверху</h3>\r\n<p>\r\nС точки зрения SEO основной контент должен быть ближе к началу страницы, чем вспомогательный контент боковых колонок. Давайте посмотрим, как это можно сделать:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/29/9.png\" alt=\"\" />\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Шаблон, три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"bg-left\">\r\n  <div id=\"bg-right\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"wrap\">\r\n    <div id=\"content\">\r\n      <h1>Lorem ipsum</h1>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n    </div>\r\n    <div id=\"left\">\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </div>\r\n  </div>\r\n  <div id=\"right\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n  </div>\r\n  </div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  margin: 0 auto;\r\n  width: 1000px;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#wrap {\r\n  float: left;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  background: #ddd;\r\n}\r\n#content {\r\n  float: right;\r\n  width: 550px;\r\n  background: #eee;\r\n}\r\n#right {\r\n  float: right;\r\n  /*\r\n  вместо float: right;\r\n  можно использовать\r\n  margin-left: 800px;\r\n  */\r\n  width: 200px;\r\n  background: #ccc;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\nДобавим отступы и выравнивание колонок по высоте:\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Шаблон, три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"bg-left\">\r\n  <div id=\"bg-right\">\r\n  <div id=\"wrap\">\r\n    <div id=\"content\">\r\n      <h1>Lorem ipsum</h1>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n    </div>\r\n    <div id=\"left\">\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </div>\r\n  </div>\r\n  <div id=\"right\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n  </div>\r\n  </div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  margin: 0 auto;\r\n  width: 1000px;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#wrap {\r\n  float: left;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  padding: 10px;\r\n  background: #ddd;\r\n}\r\n#bg-left {\r\n  background: url(images/bg-left.png) left top repeat-y;\r\n}\r\n#content {\r\n  float: right;\r\n  width: 490px;\r\n  padding: 10px;\r\n  background: #eee;\r\n}\r\n#right {\r\n  float: right;\r\n  /*\r\n  вместо float: right;\r\n  можно использовать\r\n  margin-left: 780px;\r\n  */\r\n  width: 200px;\r\n  padding: 10px;\r\n  background: #ccc;\r\n}\r\n#bg-right {\r\n  background: url(images/bg-right.png) right top repeat-y;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<p>\r\n<h3>Три колонки, фиксированный, контент сверху</h3>\r\nЕще один способ разместить основной контент перед контентом боковых колонок — использовать отрицательный margin. В этом случае элементы #content, #left и #right можно разместить в любом порядке в html-коде и потом расположить их произвольно на экране. Использование отрицательного поля позволяет «втянуть» элемент, описываемый в коде позже, над элементом, предшествующим ему.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/29/10.png\" alt=\"\" />\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Шаблон, три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"content\">\r\n    <h1>Lorem ipsum</h1>\r\n    <p>\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </p>\r\n    <p>\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </p>\r\n  </div>\r\n  <div id=\"left\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n  </div>\r\n  <div id=\"right\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  margin: 0 auto;\r\n  width: 1000px;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#content {\r\n  width: 550px;\r\n  float: left;\r\n  margin-left: 250px;\r\n  background: #eee;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  margin-left: -800px;\r\n  background: #ddd;\r\n}\r\n#right {\r\n  float: right;\r\n  /*\r\n  вместо float: right;\r\n  можно использовать\r\n  margin-left: 800px;\r\n  */\r\n  width: 200px;\r\n  background: #ccc;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<p>\r\nКак видите, левое поле элемента &lt;div id=\"content\"&gt; должно быть равно ширине левого бокового меню. Если для левого бокового меню мы хотим добавить отступы 10px, то margin-left будет\r\n</p>\r\n[code]250px(значение width) + 10px(padding-left) + 10px(padding-right) = 270px[/code]\r\n<p>\r\nЕсли боковое меню имеет границы, их тоже надо учитывать.\r\n</p>\r\n<p>\r\nТеперь о том, как рассчитать величину отрицательного margin-left для элемента &lt;div id=\"left\"&gt;. Складываем ширину элемента #content, левые и правые поля и отступы, а также левую и правую границы. Если центральный столбец имеет ширину 550px, имеет границу 1px, отступ 10px, а также левое поле 270px для размещения левого бокового меню:\r\n</p>\r\n[code]550px + 1px + 1px + 10px + 10px + 270px = 842px[/code]\r\n<p>\r\nДавайте немного улучшим наш шаблон — добавим отступы и выравнивание колонок по высоте с помощью background-image:\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Шаблон, три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"bg-left-right\">\r\n    <div id=\"content\">\r\n      <h1>Lorem ipsum</h1>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n    </div>\r\n    <div id=\"left\">\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </div>\r\n    <div id=\"right\">\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </div>\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  margin: 0 auto;\r\n  width: 1000px;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#content {\r\n  width: 490px;\r\n  float: left;\r\n  margin-left: 270px;\r\n  padding: 10px;\r\n  background: #eee;\r\n}\r\n#left {\r\n  float: left;\r\n  width: 250px;\r\n  margin-left: -780px;\r\n  padding: 10px;\r\n  background: #ddd;\r\n}\r\n#right {\r\n  float: right;\r\n  width: 200px;\r\n  padding: 10px;\r\n  background: #ccc;\r\n}\r\n#bg-left-right {\r\n  background: url(bg-left.png) left top repeat-y, url(bg-right.png) right top repeat-y;\r\n  overflow: hidden;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<h3>Три колонки, резиновый, контент сверху</h3>\r\n<p>\r\n<img src=\"/files/blog/29/11.png\" alt=\"\" />\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"wrap\">\r\n    <div id=\"content\">\r\n      <h1>Lorem ipsum</h1>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n      <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n      </p>\r\n    </div>\r\n  </div>\r\n  <div id=\"left\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n  </div>\r\n  <div id=\"right\">\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  min-width: 1000px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#wrap {\r\n  width: 100%;\r\n  float: left;\r\n}\r\n#content {\r\n  margin: 0 200px 0 250px;\r\n}\r\n#left {\r\n  width: 250px;\r\n  float: left;\r\n  margin-left: -100%;\r\n  background: #ddd;\r\n}\r\n#right {\r\n  width: 200px;\r\n  float: left;\r\n  margin-left: -200px;\r\n  background: #ccc;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]\r\n<p>\r\nДобавим отступы и выравнивание колонок по высоте:\r\n</p>\r\n[html]<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Три колонки</title>\r\n</head>\r\n<body>\r\n<div id=\"wrapper\">\r\n  <div id=\"header\"></div>\r\n  <div id=\"bg-left-right\">\r\n    <div id=\"wrap\">\r\n      <div id=\"content\">\r\n        <h1>Lorem ipsum</h1>\r\n        <p>\r\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n        </p>\r\n        <p>\r\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n        </p>\r\n      </div>\r\n    </div>\r\n    <div id=\"left\">\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </div>\r\n    <div id=\"right\">\r\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit...\r\n    </div>\r\n  </div>\r\n  <div id=\"footer\"></div>\r\n</div>\r\n</body>\r\n</html>[/html]\r\n[css]body {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#wrapper {\r\n  min-width: 1000px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n#header {\r\n  height: 100px;\r\n  background: #2277aa;\r\n}\r\n#wrap {\r\n  width: 100%;\r\n  float: left;\r\n}\r\n#content {\r\n  margin: 0 220px 0 270px;\r\n  padding: 10px;\r\n}\r\n#left {\r\n  width: 250px;\r\n  float: left;\r\n  padding: 10px;\r\n  margin-left: -100%;\r\n  background: #ddd;\r\n}\r\n#right {\r\n  width: 200px;\r\n  float: left;\r\n  padding: 10px;\r\n  margin-left: -220px;\r\n  background: #ccc;\r\n}\r\n#bg-left-right {\r\n  background: url(bg-left.png) left top repeat-y, url(bg-right.png) right top repeat-y;\r\n  overflow: hidden;\r\n}\r\n#footer {\r\n  clear: both;\r\n  height: 50px;\r\n  background: #2277aa;\r\n}[/css]','2011-09-22 14:05:06'),(30,5,'Lazy Load — отложенная загрузка изображений','jQuery плагин Lazy Load отложенная загрузка изображений','jQuery-плагин Lazy Load. Отложенная загрузка изображений. Увеличение скорости загрузки страниц.','Lazy Load — это jQuery плагин, который позволяет осуществить отложенную загрузку изображений, что актуально для страниц с большим количеством изображений. Изображения загружаются по мере пролистывания страницы пользователем. Использование Lazy Load позволяет увеличить скорость загрузки страницы и уменьшить нагрузку на сервер.','<p>\r\n<a href=\"http://www.appelsiini.net/projects/lazyload\">Lazy Load</a> — это jQuery плагин, который позволяет осуществить отложенную загрузку изображений, что актуально для страниц с большим количеством изображений. Изображения загружаются по мере пролистывания страницы пользователем. Использование Lazy Load позволяет увеличить скорость загрузки страницы и уменьшить нагрузку на сервер.\r\n</p>\r\n<h2>Как использовать?</h2>\r\n<p>\r\nПоскольку Lazy Load — плагин jQuery, сперва подключаем библиотеку jQuery, а потом сам плагин:\r\n</p>\r\n[html]<script src=\"jquery.js\" type=\"text/javascript\"></script>\r\n<script src=\"jquery.lazyload.js\" type=\"text/javascript\"></script>[/html]\r\n<p>\r\nДалее необходимо изменить HTML код. В качестве значения атрибута src изображения указываем заглушку — gif серого цвета размером 1px на 1px. В качестве значения атрибута data-original указываем URL настоящего изображения.\r\n<p>\r\n<p>\r\nТакже необходимо указать размеры изображения width и height как атрибуты тега &lt;img&gt;, или в стилях CSS. Иначе плагин может работать не корректно.\r\n</p>\r\n[html]<img class=\"lazy\" src=\"img/grey.gif\" data-original=\"img/example.jpg\" width=\"640\" height=\"480\">[/html]\r\n<p>\r\nИ после этого:\r\n</p>\r\n[js]$(\"img.lazy\").lazyload();[/js]\r\n<p>\r\nТеперь все изображения с классом lazy будут загружаться по мере пролистывания страницы (смотрите <a href=\"\">пример</a>).\r\n</p>\r\n<p class=\"note\">\r\n</p>\r\n<h2>Для бразеров без поддержки JavaScript</h2>\r\n<p>\r\nВ случае если у пользователя не поддерживается или отключен JavaScript, имеется возможность отобразить изображение поместив его в тег &lt;noscript&gt;.\r\n</p>\r\n[html]<img class=\"lazy\" src=\"img/grey.gif\" data-original=\"img/example.jpg\" width=\"640\" height=\"480\">\r\n<noscript><img src=\"img/example.jpg\" width=\"640\" height=\"480\"></noscript>[/html]\r\n<p>\r\nДля предотвращения одновременного отображения заглушки и изображения рекомендуется спрятать заглушку с помощью CSS.\r\n</p>\r\n[css].lazy {\r\n  display: none;\r\n}[/css]\r\n<p>\r\nДля браузеров с поддержкой JavaScript необходимо отобразить заглушку во время загрузки страницы. Это можно сделать вместе с инициализацией плагина.\r\n</p>\r\n[js]$(\"img.lazy\").show().lazyload();[/js]\r\n<p>\r\nВсё это опционально и нужно лишь в случае если вы хотите поддерживать браузеры без JavaScript.\r\n</p>\r\n<h2>Порог срабатывания</h2>\r\n<p>\r\nПо умолчанию изображения загружаются в момент появления на экране. Если вы хотите чтобы они загружались раньше — установите параметр <span style=\"color: blue;\">threshold</span>. Для того, чтоб изображения загружались за 200 пикселей до того, как они отобразятся на экране, установите значение <span style=\"color: blue;\">threshold</span> равным 200.\r\n</p>\r\n[js]$(\"img.lazy\").lazyload({\r\n  threshold : 200\r\n});[/js]\r\n<h2>События</h2>\r\n<p>\r\nВы можете обработать любое jQuery-событие, например click или mouseover. По-умолчанию изображения загружаются во время отображения на экране. Ниже приведен пример позволяющий загружать изображение после клика по заглушке:\r\n</p>\r\n[js]$(\"img.lazy\").lazyload({ \r\n  event : \"click\"\r\n});[/js]\r\n<h2>Использование эффектов</h2>\r\n<p>\r\nПо-умолчанию плагин ждет полной загрузки изображения и тогда вызывает show() для его отображения. Вы можете использовать любой эффект (смотрите <a href=\"\">пример</a>). Пример использования <a href=\"\">fadeIn</a>-эффекта:\r\n</p>\r\n[js]$(\"img.lazy\").lazyload({ \r\n  effect : \"fadeIn\"\r\n});[/js]\r\n<h2>Изображения внутри контейнера</h2>\r\n<p>\r\nТак же вы можете использовать изображения внутри контейнера, например div с прокруткой. Смотрите <a href=\"\">пример</a> с горизонтальной и вертикальной прокруткой.\r\n</p>\r\n[css]#container {\r\n  height: 600px;\r\n  overflow: scroll;\r\n}[/css]\r\n[js]$(\"img.lazy\").lazyload({         \r\n  container: $(\"#container\")\r\n});[/js]\r\n<h2>Когда изображения не последовательны</h2>\r\n<p>\r\nПосле прокрутки старницы Lazy Load беспрерывно ищет незагруженные изображения. В этом цикле он проверяет, появилось ли изображение в видимой части окна браузера. По умолчанию цикл останавливается после того, как во время прокрутки в видимой части экрана появится первое изображение (которое ранее было за пределами видимости). Это базируется на предположении, что порядок изображений на странице такой же, как и в HTML коде. В некоторых случаях это может быть не так. Вы можете контролировать поведение загрузки задав параметр <span style=\"color: blue;\">failure_limit</span>.\r\n</p>\r\n[js]$(\"img.lazy\").lazyload({ \r\n  failure_limit: 10\r\n});[/js]\r\n<p>\r\nУстановка значения <span style=\"color: blue;\">failure_limit</span> в 10 означает, что плагин должен остановить поиск изображений для загрузки после того, как будет найдено 10 изображений в невидимой части окна.\r\n</p>\r\n<h2>Загрузка изображений через заданный промежуток времени</h2>\r\n<p>\r\nНижеприведенный код ожидает полной загрузки страницы (не только HTML, но и всех видимых изображений). Через 5 секунд после загрузки страницы, будут загружены изображения находящиеся в невидимой части окна браузера. Смотрите <a href=\"\">пример</a> отложенной загрузки.\r\n</p>\r\n[js]$(function() {          \r\n  $(\"img:below-the-fold\").lazyload({\r\n    event : \"sporty\"\r\n  });\r\n});\r\n$(window).bind(\"load\", function() { \r\n  var timeout = setTimeout(function() , 5000);\r\n});[/js]\r\n<h2>Загрузка скрытых изображений</h2>\r\n<p>\r\nБывают случаи, когда у вас на старнице есть скрытые изображения. Например во время динамического изменения видимости некоторых объектов. Для ускорения работы Lazy Load игнорирует скрытые изображения. Если вы хотите загружать скрытые изображения установите значение <span style=\"color: blue;\">skip_invisible</span> в <span style=\"color: blue;\">false</span>.\r\n</p>\r\n[js]$(\"img.lazy\").lazyload({ \r\n  skip_invisible: false\r\n});[/js]','2013-10-01 12:41:56'),(32,1,'Списки в Python','','','Для группировки множества элементов в питоне используется список, который может быть записан как индексированная последовательность значений, разделенных запятыми, заключенная в квадратные скобки.','<p>\r\nДля группировки множества элементов в питоне используется список, который может быть записан как индексированная последовательность значений, разделенных запятыми, заключенная в квадратные скобки. Списки имеют произвольную вложенность, т.е. могут включать в себя любые вложенные списки.\r\n</p> \r\n\r\n<h2>Примеры</h2>\r\n\r\n<p>Создание списка, доступ к отдельным элементам по индексу</p>\r\n[cli]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam\r\n[\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam[0]\r\n\'cat\'\r\n>>> spam[1]\r\n\'bat\'\r\n>>> spam[-1]\r\n\'dog\'\r\n[/cli]\r\n<p>Элементы списков сами могут быть списками. Доступ к значениям в таких списках осуществляется с помощью нескольких индексов</p>\r\n[cli]\r\n>>> spam = [[\'cat\', \'bat\'], [10, 20, 30, 40, 50]]\r\n>>> spam[0]\r\n[\'cat\', \'bat\']\r\n>>> spam[0][1]\r\n\'bat\'\r\n>>> spam[1][4]\r\n50\r\n[/cli]\r\n<p>Получение части списка с помощью среза</p>\r\n[cli]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam[0:4]\r\n[\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam[1:3]\r\n[\'bat\', \'rat\']\r\n>>> spam[0:-1]\r\n[\'cat\', \'bat\', \'rat\']\r\n[/cli]\r\n<p>Допускается сокращенная запись среза с пропуском одного или двух индексов. Отсутствующий первый индекс равносилен использованию нуля. Отсутствующий второй индекс означает расширение до конца списка.</p>\r\n[cli]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam[0:2]\r\n[\'cat\', \'bat\']\r\n>>> spam[1:]\r\n[\'bat\', \'rat\', \'dog\']\r\n>>> spam[:]\r\n[\'cat\', \'bat\', \'rat\', \'dog\']\r\n[/cli]\r\n<p>Получение длины списка</p>\r\n[cli]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> len(spam)\r\n4\r\n[/cli]\r\n<p>Изменение значений по индексу</p>\r\n[cli]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam[1] = \'elephant\'\r\n>>> spam\r\n[\'cat\', \'elephant\', \'rat\', \'dog\']\r\n[/cli]\r\n<p>Конкатенация и репликация списков</p>\r\n[cli]\r\n>>> [1, 2, 3] + [\'a\', \'b\', \'c\']\r\n[1, 2, 3, \'a\', \'b\', \'c\']\r\n>>> [\'x\', \'y\', \'z\'] * 3\r\n[\'x\', \'y\', \'z\', \'x\', \'y\', \'z\', \'x\', \'y\', \'z\']\r\n[/cli]\r\n<p>Удаление значений из списка с помощью инструкции <code>del</code></p>\r\n[cli]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> del spam[2]\r\n>>> spam\r\n[\'cat\', \'rat\', \'dog\']\r\n[/cli]\r\n<p>Использование цикла для перебора всех элементов списка</p>\r\n[code]\r\nspam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\nfor i in range(len(spam)):\r\n    print(\'index = \' + str(i) + \', value = \' + spam[i])\r\n[/code]\r\n[code]\r\nindex = 0, value = cat\r\nindex = 1, value = bat\r\nindex = 2, value = rat\r\nindex = 3, value = dog\r\n[/code]\r\n<p>Определить, содержит ли список определенное значение можно с помощью операторов <code>in</code> и <code>not in</code></p>\r\n[cli]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> \'cat\' in spam\r\nTrue\r\n>>> \'elephant\' in spam\r\nFalse\r\n>>> \'elephant\' not in spam\r\nTrue\r\n[/cli]\r\n<p>Трюк с групповым присваиванием</p>\r\n[cli]\r\n>>> cat = [\'fat\', \'black\', \'loud\']\r\n>>> size, color, disposition = cat\r\n>>> size\r\n\'fat\'\r\n>>> color\r\n\'black\'\r\n[/cli]\r\n<p>Поиск значения в списке с помощью метода <code>index()</code></p>\r\n[cli]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam.index(\'bat\')\r\n1\r\n[/cli]\r\n<p>Добавление значений в список с помощью методов <code>append()</code> и <code>insert()</code></p>\r\n[cli]\r\n>>> spam = [\'cat\', \'bat\', \'rat\']\r\n>>> spam.append(\'elephant\')\r\n>>> spam\r\n[\'cat\', \'bat\', \'rat\', \'elephant\']\r\n[/cli]\r\n[cli]\r\n>>> spam = [\'cat\', \'bat\', \'rat\']\r\n>>> spam.insert(1, \'chicken\')\r\n>>> spam\r\n[\'cat\', \'chicken\', \'bat\', \'rat\']\r\n[/cli]\r\n<p>Удаление значений из списка с помощью метода <code>remove()</code>. Если в списке несколько одинаковых значений, будет удалено только первое.</p>\r\n[cli]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam.remove(\'bat\')\r\n>>> spam\r\n[\'cat\', \'rat\', \'dog\']\r\n[/cli]\r\n<p>Сортировка значений в списке с помощью метода <code>sort()</code></p>\r\n[cli]\r\n>>> spam = [\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> spam.sort()\r\n>>> spam\r\n[\'bat\', \'cat\', \'dog\', \'rat\']\r\n[/cli]\r\n<p><strong>Кортеж</strong> — список, значения которого не могут изменяться, добавляться и удаляться.</p>\r\n[cli]\r\n>>> spam = (\'cat\', \'bat\', \'rat\', \'dog\')\r\n>>> spam[1] = \'elephant\'\r\nTraceback (most recent call last):\r\n  File \"<pyshell#12>\", line 1, in <module>\r\n    spam[1] = \'elephant\'\r\nTypeError: \'tuple\' object does not support item assignment\r\n[/cli]\r\n<p>Преобразование типов с помощью функций <code>list()</code> и <code>tuple()</code>\r\n[cli]\r\n>>> tuple([\'cat\', \'bat\', \'rat\', \'dog\'])\r\n(\'cat\', \'bat\', \'rat\', \'dog\')\r\n>>> list((\'cat\', \'bat\', \'rat\', \'dog\'))\r\n[\'cat\', \'bat\', \'rat\', \'dog\']\r\n>>> list(\'hello\')\r\n[\'h\', \'e\', \'l\', \'l\', \'o\']\r\n[/cli]\r\n<p>Списки нельзя скопировать просто присвоив одну переменную другой, т.к. в этом случае копируется ссылка на объект. В итоге при изменении объекта через одну переменную, изменения отражаются на другой. </p>\r\n[cli]\r\n>>> spam = [0, 1, 2, 3, 4, 5]\r\n>>> cheese = spam\r\n>>> cheese[1] = \'hello\'\r\n>>> spam\r\n[0, \'hello\', 2, 3, 4, 5]\r\n>>> cheese\r\n[0, \'hello\', 2, 3, 4, 5]\r\n[/cli]\r\n<p>При передаче списка в качестве параметра функции, передача происходит по ссылке, а не по значению.</p>\r\n[code]\r\ndef eggs(param)\r\n    param.append(\'hello\')\r\n\r\nspam = [1, 2, 3]\r\neggs(spam)\r\nprint(spam)\r\n[/code]\r\n[code]\r\n[1, 2, 3, \'hello\']\r\n[/code]\r\n<p>Методы <code>copy()</code> и <code>deepcopy()</code></p>\r\n[cli]\r\n>>> spam = [0, 1, 2, 3, 4, 5]\r\n>>> cheese = spam.copy()\r\n>>> cheese[1] = \'hello\'\r\n>>> cheese\r\n[0, \'hello\', 2, 3, 4, 5]\r\n>>> spam\r\n[0, 1, 2, 3, 4, 5]\r\n[/cli]\r\n<p>Если список, копию которого нужно создать, сам содержит списки, нужно использовать метод <code>deepcopy()</code></p>\r\n<p>Генератор цикла объединяет цикл <code>for</code>, условие <code>if</code> и создание новых элементов в одну строку и автоматически присоединяет к списку все новые элементы</p>\r\n[cli]\r\n>>> square = [value**2 for value in range(1,11)]\r\n>>> square\r\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\n[/cli]\r\n[cli]\r\n>>> square = [value**2 for value in range(1,11) if value % 2 == 0]\r\n>>> square\r\n[4, 16, 36, 64, 100]\r\n[/cli]','2018-02-09 14:41:25'),(33,1,'Словари в Python','','','Словарь — это ассоциативный массив или хеш. Это неупорядоченное множество пар ключ-значение с требованием уникальности ключей. Пара фигурных скобок {} создает пустой словарь.','<p>\r\nСловарь — это ассоциативный массив или хеш. Это неупорядоченное множество пар ключ-значение с требованием уникальности ключей. Пара фигурных скобок <code>{}</code> создает пустой словарь. В отличие от списка, доступ к элементам словаря производится по ключу, а не по индексу, ключ может быть любого типа.\r\n</p>\r\n<h2>Примеры</h2>\r\n<p>Создание словаря</p>\r\n[cli]\r\n>>> cat = {\'name\': \'Tom\', \'species\': \'cat\', \'age\': 3}\r\n[/cli]\r\n[cli]\r\n>>> spam = {}\r\n>>> spam[2] = \'second\'\r\n>>> spam[3] = \'third\'\r\n>>> spam[1] = \'first\'\r\n>>> spam\r\n{2: \'second\', 3: \'third\', 1: \'first\'}\r\n[/cli]\r\n<p>Доступ к значениям по ключу</p>\r\n[cli]\r\n>>> cat = {\'name\': \'Tom\', \'spesies\': \'cat\', \'age\': 3}\r\n>>> cat[\'name\']\r\n\'Tom\'\r\n[/cli]\r\n<p>Методы <code>keys()</code>, <code>values()</code> и <code>items()</code></p>\r\n[cli]\r\n>>> spam = {\'color\': \'red\', \'age\': 42}\r\n>>> spam.keys()\r\ndict_keys([\'color\', \'age\'])\r\n>>> spam.values()\r\ndict_values([\'red\', 42])\r\n>>> spam.items()\r\ndict_items([(\'color\', \'red\'), (\'age\', 42)])\r\n[/cli]\r\n<p>Возвращаемые этими методами коллекции не являются истинными списками, однако эти типы данных (<code>dict_keys</code>, <code>dict_values</code>, <code>dict_items</code>) можно использовать в цикле <code>for</code>.</p>\r\n[code]\r\nspam = {\'color\': \'red\', \'age\': 42}\r\n# ключи\r\nfor key in spam.keys():\r\n    print(key)\r\n# значения\r\nspam = {\'color\': \'red\', \'age\': 42}\r\nfor value in spam.value():\r\n    print(value)\r\n# ключи и значения\r\nfor key, value in spam.items():\r\n    print(\'key=\', key, \', value=\', value, sep = \'\')\r\n[/code]\r\n<p>Проверка существования ключа или значения в с помощью операторов <code>in</code> и <code>not in</code>.</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\' : \'Иванов\', \'petrov@mail.ru\' : \'Петров\'}\r\n>>> \'ivanov@mail.ru\' in users\r\nTrue\r\n>>> \'ivanov@mail.ru\' in users.keys()\r\nTrue\r\n>>> \'Иванов\' in users.values()\r\nTrue\r\n>>> \'Петров\' not in users.values()\r\nFalse\r\n[/idle]\r\n<p>\r\nМетод <code>get(key, [default])</code> возврвщает значение по ключу. Если ключ отсутствует в словаре, метод возвращает значение по умолчанию <code>default</code>.\r\n</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\' : \'Иванов\', \'petrov@mail.ru\' : \'Петров\'}\r\n>>> users.get(\'sidorov@mail.ru\', \'Нет такого пользователя\')\r\n\'Нет такого пользователя\'\r\n[/idle]\r\n<p>\r\nМетод <code>setdefault(key[, default])</code> возвращает значение ключа, но если его нет — создает ключ с значением <code>default</code>.\r\n</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\' : \'Иванов\', \'petrov@mail.ru\' : \'Петров\'}\r\n>>> user = users.setdefault(\'sidorov@mail.ru\', \'Сидоров\')\r\n>>> user\r\n\'Сидоров\'\r\n>>> users\r\n{\'ivanov@mail.ru\': \'Иванов\', \'petrov@mail.ru\': \'Петров\', \'sidorov@mail.ru\': \'Сидоров\'}\r\n[/idle]\r\n<p>Метод <code>pop(key[, default])</code> удаляет ключ и возвращает значение; если ключа нет, возвращает <code>default</code>.</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\' : \'Иванов\', \'petrov@mail.ru\' : \'Петров\'}\r\n>>> users.pop(\'ivanov@mail.ru\')\r\n\'Иванов\'\r\n>>> users\r\n{\'petrov@mail.ru\': \'Петров\'}\r\n>>> users.pop(\'sidorov@mail.ru\', \'Сидоров\')\r\n\'Сидоров\'\r\n[/idle]\r\n<p>\r\nМетод <code>popitem()</code> удаляет и возвращает кортеж (ключ, значение).\r\n</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\': \'Иванов\', \'petrov@mail.ru\': \'Петров\', \'sidorov@mail.ru\': \'Сидоров\'}\r\n>>> for i in range(len(users)):\r\n...     user = users.popitem()\r\n...     print(user)\r\n\r\n(\'sidorov@mail.ru\', \'Сидоров\')\r\n(\'petrov@mail.ru\', \'Петров\')\r\n(\'ivanov@mail.ru\', \'Иванов\')\r\n>>> users\r\n{}\r\n[/idle]\r\n<p>Оператор <code>del</code> удаляет пару по ключу.</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\': \'Иванов\', \'petrov@mail.ru\': \'Петров\'}\r\n>>> del users[\'ivanov@mail.ru\']\r\n>>> users\r\n{\'petrov@mail.ru\': \'Петров\'}\r\n[/idle]\r\n<p>\r\nМетод <code>copy()</code> возвращает поверхностную копию словаря.\r\n</p>\r\n[idle]\r\n>>> users = {\'ivanov@mail.ru\': \'Иванов\', \'petrov@mail.ru\': \'Петров\'}\r\n>>> spam = users.copy()\r\n>>> spam\r\n{\'ivanov@mail.ru\': \'Иванов\', \'petrov@mail.ru\': \'Петров\'}\r\n[/idle]\r\n[idle]\r\n>>> spam = {1:[1,1], 2:[2,2]}\r\n>>> copy = spam.copy()\r\n>>> spam[1][0] = 3\r\n>>> spam\r\n{1: [3, 1], 2: [2, 2]}\r\n>>> copy\r\n{1: [3, 1], 2: [2, 2]}\r\n[/idle]\r\n<p>\r\nЕсли словарь, копию которого нужно создать, содержит списки или словари, нужно использовать <code>deepcopy()</code>.\r\n</p>','2018-02-10 15:58:44'),(34,9,'Строковый редактор ed','','','При запуске редактора ed, выделяется специальная область внутренней памяти машины. Эта область называется буфером. При редактировании файла, его содержимое копируется в этот буфер и работа идет именно с ним.','<p>\r\nПри запуске редактора ed, выделяется специальная область внутренней памяти машины. Эта область называется буфером. При редактировании файла, его содержимое копируется в этот буфер и работа идет именно с ним. Замена оригинала производится только при сохранении изменений.\r\n</p>\r\n<p>Запуск редактора</p>\r\n[code]\r\ned\r\n[/code]\r\n<p>или</p>\r\n[code]\r\ned file\r\n[/code]\r\n<p>где <code>file</code> — это имя нового или уже существующего файла. Для завершения сеанса используется команда <code>q</code> (от quit)</p>\r\n[code]\r\nq\r\n[/code]\r\n<p>Если изменения не были записаны в файл, ed предупредит об этом</p>\r\n[code]\r\n?\r\n[/code]\r\n<p>Для подтверждения выхода без сохранения, введите команду <code>q</code> еще раз. Для сохранения результатов и выхода, нужно ввести две команды:</p>\r\n[code]\r\nw\r\nq\r\n[/code]\r\n<p>\r\nПри вызове ed без аргумента <code>file</code>, создается новый буфер. Для добавления текста в буфер используется команда <code>a</code> (от append или add). После ее\r\nвыполнения редактор переходит в режим ввода текста. Для выхода из режима ввода текста введите на пустой строке символ точки «.».\r\n</p>\r\n[code]\r\na\r\nПервая строка текста\r\nВторая строка текста\r\nТретья строка текста\r\nЧетвертая строка текста\r\nПятая строка текста\r\n.\r\n[/code]\r\n<p>Чтобы посмотреть содержимое буфера, введите команду</p>\r\n[code]\r\n1,$p\r\nПервая строка текста\r\nВторая строка текста\r\nТретья строка текста\r\nЧетвертая строка текста\r\nПятая строка текста\r\n[/code]\r\n<p>\r\n<code>1,$</code> задают диапазон строк, которые надо напечатать (<code>p</code> от print): <code>1</code> — первая строка, <code>$</code> — последняя строка. Чтобы вывести строки со <code>2</code> по <code>4</code>:\r\n</p>\r\n[code]\r\n2,4p\r\nВторая строка текста\r\nТретья строка текста\r\nЧетвертая строка текста\r\n[/code]\r\n<p>Для просмотра одной строки: первой, третьей и последней:</p>\r\n[code]\r\n1p\r\nПервая строка текста\r\n3p\r\nТретья строка текста\r\n$p\r\nПятая строка текста\r\n[/code]\r\n<p>Для просмотра текущей строки</p>\r\n[code]\r\n.p\r\nЧетвертая строка текста\r\n[/code]\r\n<p>Чтобы узнать, какая строка текущая</p>\r\n[code]\r\n.=\r\n4\r\n[/code]\r\n<p>\r\nДля записи содержимого буфера в файл используется команда <code>w</code> (от write). Выполнение этой команды приводит к копированию содержимого буфера в указанный файл, старое\r\nсодержимое файла при этом удаляется.\r\n</p>\r\n[code]\r\nw example.txt\r\n[/code]\r\n<p>В ответ ed сообщит количество записанных в файл символов (байт).</p>\r\n<p>\r\nДля считывания содержимого файла в буфер используется команда <code>e</code> (от edit):\r\n</p>\r\n[code]\r\ne some-file.txt\r\n[/code]\r\n<p>\r\nПри этом в буфер загружен весь файл <code>some-file.txt</code> и на экране появится количество его символов. Если в буфере до этого уже была какая-либо информация, она уничтожается.\r\n</p>\r\n<p>\r\nЕсли вы использовали команду <code>e</code> для считывания файла в буфер, то в команде <code>w</code> необязательно указывать имя файла. Редактор ed помнит имя файла, которое последним\r\nиспользовалось в команде <code>e</code> и команда <code>w</code> по умолчанию будет делать запись в этот файл. Таким образом, сеанс работы с редактором может быть таким:\r\n</p>\r\n[code]\r\ned\r\ne some-file.txt\r\n[процесс редактирования]\r\nw\r\nq\r\n[/code]\r\n<p>\r\nЧтобы узнать имя файла, в который будет записан буфер (при указании команды <code>w</code> без параметра), можно использовать команду <code>f</code> (от file):\r\n</p>\r\n[code]\r\nf\r\nsome-file.txt\r\n[/code]\r\n<p>\r\nС помощью команды <code>f</code> можно также менять имя файла для записи содержимого буфера. Например, в результате выполнения команд:\r\n</p>\r\n[code]\r\ned some-file.txt\r\nf other-file.txt\r\n[/code]\r\n<p>в буфер будет загружен файл <code>some-file.txt</code> и затем команда <code>f</code> изменяет имя файла для команды <code>w</code>.</p>\r\n<p>\r\nБывают ситуации, когда нужно считать в буфер файл, не стирая имеющейся до этого в нем информации. Для этой цели подходит команда <code>r</code> (от read). К примеру, по команде:\r\n</p>\r\n[code]\r\nr some-file.txt\r\n[/code]\r\n<p>\r\nфайл <code>some-file.txt</code> считывается и добавляется в конец имеющейся в буфере информации.\r\n</p>\r\n<p>\r\nДля удаления строк предназначена команда <code>d</code> (от delete). Ее действие подобно действию команды <code>p</code> за исключением того, что <code>d</code> удаляет строки вместо их вывода. Удалить вторую строку\r\n</p>\r\n[code]\r\n2d\r\n[/code]\r\n<p>\r\nУдалить строки, начиная с четвертой и по последнюю:\r\n</p>\r\n[code]\r\n4,$d\r\n[/code]\r\n<p>\r\nКоманда перемещения <code>m</code> (move) позволяет переместить группу строк из одного места в буфере в другое. Например, поместить первые три строки в конец буфера:\r\n</p>\r\n[code]\r\n1,3m$\r\n[/code]\r\n<p>\r\nДля поиска строки, содержащую какой-то текст, используйте команду\r\n</p>\r\n[code]\r\n/шаблон/\r\n[/code]\r\n<p>Можно использовать в шаблоне регулярные выражения.</p>\r\n<p>\r\nДля замены отдельных слов или букв в строке или группе строк используется команда <code>s</code>. Например, заменить во второй строке симмолы «вторая» на символы «третья»\r\n</p>\r\n[code]\r\n2s/вторая/третья/\r\n[/code]\r\n<p>Еще пример замены</p>\r\n[code]\r\n1,$s/ашипка/ошибка/\r\n[/code]\r\n<p>чтобы исправить первое вхождение последовательности «ашипка» на «ошибка» в каждой строке буфера. Чтобы выполнить замену всех имеющихся вхождений, добавьте символ <code>g</code> (от global):</p>\r\n[code]\r\n1,$s/ашипка/ошибка/g\r\n[/code]\r\n<hr/>\r\n<p><a href=\"/files/blog/34/ed.pdf\" target=\"_blank\">Полное описание редактора ed [pdf]</a></p>','2018-02-11 14:29:56'),(35,9,'Команда cut','','','Команда cut предназначена для извлечения (буквально «вырезания») различных полей данных из файла. Если не указано ни одного файла или задано имя «-», используется стандартный ввод. Результат всегда поступает на стандартный вывод.','<p>\r\nКоманда cut предназначена для извлечения (буквально «вырезания») различных полей данных из файла. Если не указано ни одного файла или задано имя «-», используется стандартный ввод. Результат всегда поступает на стандартный вывод. Самый простой вариант команды выглядит так:\r\n</p>\r\n[code]\r\ncut -c[red]символы[/red] файл\r\n[/code]\r\n<p>\r\nгде <code>символы</code> — количество символов (по месторасположению), которые требуется извлечь из каждой строки, которую содержит указанный <code>файл</code>.\r\n</p>\r\n<p>\r\nЭтот набор символов может состоять из одного числа, например <code>-c5</code> для извлечения пятого символа из каждой строки. Это может быть список чисел, разделенных запятыми, например <code>-c1,7,12</code> для извлечения символов 1, 7 и 12. Или, это может быть диапазон числел, указываемых через дефис, например <code>-c20-50</code> для извлечения символов от 20 до 50 включительно. Чтобы извлечь символы до конца строки, второе число в диапазоне можно не указывать.\r\n</p>\r\n<p>\r\nРассмотрим пример\r\n</p>\r\n[cli]\r\n$ cat example.txt\r\n123456789\r\nABCDEFGHI\r\nabcdefghi\r\n$ cut -c2-5 example.txt\r\n2345\r\nBCDE\r\nbcde\r\n$ cut -c3,5,8 example.txt\r\n358\r\nCEH\r\nceh\r\n$cut -c6- example.txt\r\n6789\r\nFGHI\r\nfghi\r\n[/cli]\r\n<h3>Параметры -d и -f</h3>\r\n<p>\r\nРассмотрим в качестве примера содержимое <code>/etc/passswd</code>\r\n</p>\r\n[cli]\r\n$ head /etc/passwd\r\nroot:x:0:0:root:/root:/bin/bash\r\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\r\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\r\nsync:x:4:65534:sync:/bin:/bin/sync\r\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\r\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\r\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\r\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\r\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\r\n[/cli]\r\n<p>\r\nЕсли данные разделяются конкретным символом, извлечь их можно, используя параметры <code>-d</code> и <code>-f</code>:\r\n</p>\r\n[code]cut -d[red]символ[/red] -f[red]поле[/red] файл[/code]\r\n<p>\r\nПолучаем имена пользователей из файла <code>/etc/passwd</code>:\r\n</p>\r\n[cli]\r\n$ cut -d: -f1 /etc/passwd\r\nroot\r\ndaemon\r\nbin\r\nsys\r\nsync\r\n..........\r\n[/cli]\r\n<p>\r\n<p>\r\nИмена пользователей и домашние директории\r\n</p>\r\n[cli]\r\n$ cut -d: -f1,6 /etc/passwd\r\nroot:/root\r\ndaemon:/usr/sbin\r\nbin:/bin\r\nsys:/dev\r\nsync:/bin\r\n..........\r\n[/cli]\r\n<p>\r\nЕсли ключ <code>-d</code> не указан, по умолчанию используется символ табуляции.\r\n</p>','2018-02-12 15:10:08'),(36,9,'Потоковый редактор sed','','','The Unix operating system was pioneered by Ken \r\nThompson and Dennis Ritchie at Bell Laboratories \r\nin the late 1960s. One of the primary goals in\r\nthe design of the Unix system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.','[cli]\r\n$ cat example.txt\r\nThe Unix operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe design of the Unix system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]\r\n<p>\r\nЗаменить все вхождения слова «Unix» словом «UNIX»\r\n</p>\r\n[cli]\r\n$ sed \'s/Unix/UNIX/\' example.txt\r\nThe UNIX operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe design of the UNIX system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]\r\n<p>\r\nЭта команда заменит только первое вхождение слова «Unix» в каждой строке. Если требуется заменить все вхождения\r\n</p>\r\n[cli]\r\n$ sed \'s/Unix/UNIX/g\' example.txt\r\nThe UNIX operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe design of the UNIX system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]\r\n<p>\r\nПоказать строки со 2 по 4\r\n</p>\r\n[cli]\r\n$ sed -n \'2,4p\' example.txt\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe design of the Unix system was to create an\r\n[/cli]\r\n<p>\r\nУдалить строки со 2 по 4\r\n</p>\r\n[cli]\r\n$ sed \'2,4d\' example.txt\r\nThe UNIX operating system was pioneered by Ken\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]\r\n<p>\r\nУдалить все строки, содержащие текст «Unix»\r\n</p>\r\n[cli]\r\n$ sed \'/Unix/d\' example.txt\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]\r\n<p>\r\nУдалить последние три символа из каждой строки\r\n</p>\r\n[cli]\r\n$ sed \'s/...$//\' example.txt\r\nThe Unix operating system was pioneered by \r\nThompson and Dennis Ritchie at Bell Laborator\r\nin the late 1960s. One of the primary goals\r\nthe design of the Unix system was to create\r\nenvironment that promoted efficient prog\r\ndevelopme\r\n[/cli]\r\n<p>\r\nДобавить три * в начало каждой строки\r\n</p>\r\n[cli]\r\n$ sed \'s/^/***/\' example.txt\r\n***The Unix operating system was pioneered by Ken\r\n***Thompson and Dennis Ritchie at Bell Laboratories\r\n***in the late 1960s. One of the primary goals in\r\n***the design of the Unix system was to create an\r\n***environment that promoted efficient program\r\n***development.\r\n[/cli]\r\n<p>\r\nУдалить строки, содержащие цифры\r\n</p>\r\n[cli]\r\n$ sed \'/[0-9]/d\' example.txt\r\nThe Unix operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nthe design of the Unix system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]\r\n<p>\r\nЗаменить первое вхождение «Unix» на «UNIX» во всех строках, содержащих «design»\r\n</p>\r\n[cli]\r\n$ sed \'/design/s/Unix/UNIX/\' example.txt\r\nThe [grn]Unix[/grn] operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe [red]design[/red] of the [grn]UNIX[/grn] system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]','2018-02-12 16:26:17'),(37,1,'Строки в Python','','','Строки — упорядоченные последовательности символов, используемые для хранения и представления текстовой информации, поэтому с помощью строк можно работать со всем, что может быть представлено в текстовой форме.','<p>\r\nСтроки — упорядоченные последовательности символов, используемые для хранения и представления текстовой информации, поэтому с помощью строк можно работать со всем, что может быть представлено в текстовой форме.\r\n</p>\r\n<p>\r\nСуществует несколько литералов строк:\r\n</p>\r\n[idle]\r\n>>> spam = \"That is Alice\'s cat.\"\r\n>>> spam\r\n\"That is Alice\'s cat.\"\r\n>>> spam = \'That is Alice\\\'s cat.\'\r\n>>> spam\r\n\"That is Alice\'s cat.\"\r\n[/idle]\r\n<p>\r\nСтроки в апострофах и в кавычках — одно и то же. Причина наличия двух вариантов в том, чтобы позволить вставлять в литералы строк символы кавычек или апострофов, не используя экранирование.\r\n</p>\r\n<p>\r\nЭкранированные последовательности позволяют вставить символы, которые сложно ввести с клавиатуры.\r\n</p>\r\n<ul>\r\n  <li><code>\\n</code> — Перевод строки</li>\r\n  <li><code>\\a</code> — Звонок</li>\r\n  <li><code>\\f</code> — Перевод страницы</li>\r\n  <li><code>\\r</code> — Возврат каретки</li>\r\n  <li><code>\\t</code> — Горизонтальная табуляция</li>\r\n  <li><code>\\v</code> — Вертикальная табуляция</li>\r\n</ul>\r\n<p>\r\nЭкранированные символы <code>\\\'</code> и <code>\\\"</code> позволяют вставлять в строку соответственно апострофы и кавычку. Если перед открывающей кавычкой стоит символ «r» (в любом регистре), то механизм экранирования отключается:\r\n</p>\r\n[idle]\r\n>>> file = r\'C:\\file.txt\'\r\n>>> file\r\n\'C:\\\\file.txt\'\r\n[/idle]\r\n<p>\r\nСтроки в тройных апострофах или кавычках можно использовать для записи многострочных блоков текста. Внутри такой строки возможно присутствие кавычек и апострофов, главное, чтобы не было трех кавычек подряд.\r\n</p>\r\n[idle]\r\n>>> spam = \"\"\"\r\n... Lorem ipsum dolor sit amet, consectetur\r\n... adipiscing elit, sed do eiusmod tempor\r\n... incididunt ut labore et dolore magna aliqua.\r\n... \"\"\"\r\n>>> spam\r\n\'[red]\\n[/red]Lorem ipsum dolor sit amet, consectetur[red]\\n[/red]adipiscing elit, sed do eiusmod tempor[red]\\n[/red]incididunt ut labore et dolore magna aliqua.[red]\\n[/red]\'\r\n[/idle]\r\n<h2>Функции и методы строк</h2>\r\n<p>Конкатенация и репликация</p>\r\n[idle]\r\n>>> spam = \'Hello\' + \' \' + \'world!\'\r\n>>> spam\r\n\'Hello world!\'\r\n[/idle]\r\n[idle]\r\n>>> \'hello\' * 3\r\n\'hellohellohello\'\r\n[/idle]\r\n<p>Доступ по индексу и срезы</p>\r\n[idle]\r\n>>> spam = \'Hello world!\'\r\n>>> spam[0]\r\n\'H\'\r\n>>> spam[4]\r\n\'o\'\r\n>>> spam[-1]\r\n\'!\'\r\n>>> spam[0:5]\r\n\'Hello\'\r\n>>> spam[6:]\r\n\'world!\'\r\n>>> spam[:]\r\n\'Hello world!\'\r\n[/idle]\r\n<p>Использование операторов <code>in</code> и <code>not in</code></p>\r\n[idle]\r\n>>> \'Hello\' in \'Hello world!\'\r\nTrue\r\n>>> \'cat\' not in \'cats and dogs\'\r\nFalse\r\n[/idle]\r\n<p>Методы <code>upper()</code>, <code>lower()</code>, <code>isupper()</code>, <code>islower()</code></p>\r\n[idle]\r\n>>> spam = \'Hello world\'\r\n>>> spam.upper()\r\n\'HELLO WORLD\'\r\n>>> spam.lower()\r\n\'hello world\'\r\n>>> upper = spam.upper()\r\n>>> upper\r\n\'HELLO WORLD\'\r\n>>> upper.isupper()\r\nTrue\r\n>>> \'12345\'.islower()\r\nFalse\r\n[/idle]\r\n<p>Методы <code>isalpha()</code>, <code>isalnum()</code>, <code>isdecimal()</code>, <code>isspace()</code>, <code>istitle()</code></p>\r\n[idle]\r\n>>> \'abcde\'.isalpha()\r\nTrue\r\n>>> \'abc123\'.isalnum()\r\nTrue\r\n>>> \'12345\'.isdecimal()\r\nTrue\r\n>>> \' \'.isspace()\r\nTrue\r\n>>> \'\\t\\n\'.isspace()\r\nTrue\r\n>>> \'This Is Title Case\'.istitle()\r\nTrue\r\n[/idle]\r\n<p>\r\nМетоды <code>startswith()</code> и <code>endswith()</code> возвращают <code>True</code>, если строки, для которых они вызываются, соответственно начинаются или заканчиваются строкой, переданной методу.\r\n</p>\r\n[idle]\r\n>>> spam = \'Hello world!\'\r\n>>> spam.startswith(\'Hello\')\r\nTrue\r\n>>> spam.endswith(\'!\')\r\nTrue\r\n[/idle]\r\n<p>Методы <code>join()</code> и <code>split()</code></p>\r\n[idle]\r\n>>> \',\'.join([\'cat\', \'rat\', \'dog\'])\r\n\'cat,rat,dog\'\r\n>>> \'My name is Simon\'.split()\r\n[\'My\', \'name\', \'is\', \'Simon\']\r\n>>> \'cat,rat,dog\'.split(\',\')\r\n[\'cat\', \'rat\', \'dog\']\r\n[/idle]\r\n<p>Удаление пробелов с помощью методов <code>strip()</code>, <code>lstrip()</code>, <code>rstrip()</code></p>\r\n[idle]\r\n>>> spam = \' Hello world! \'\r\n>>> spam.strip()\r\n\'Hello world!\'\r\n>>> spam.lstrip()\r\n\'Hello world! \'\r\n>>> spam.lstrip()\r\n\'Hello world! \'\r\n[/idle]\r\n[idle]\r\n>>> spam = \'Hello world!\'\r\n>>> spam.strip(\'H!\')\r\n\'ello world\'\r\n[/idle]\r\n<p>Копирование строки в буфер обмена и вставка из буфера обмена</p>\r\n[idle]\r\n>>> import pyperclip\r\n>>> pyperclip.copy(\'Hello world!\')\r\n>>> pyperclip.paste()\r\n\'Hello world!\'\r\n[/idle]','2018-02-14 11:48:46'),(38,9,'Команда wc','','','Команда wc (от word count — подсчёт слов) используется подсчета числа строк, слов и символов в указанном файле. Когда указано более одного файла, команда осуществляет подсчет в каждом файле и затем выдает общее число. Если файл не задан, данные читаются со стандартного ввода.','<p>\r\nКоманда wc (от word count — подсчёт слов) используется подсчета числа строк, слов и символов в указанном файле. Когда указано более одного файла, команда осуществляет подсчет в каждом файле и затем выдает общее число. Если входной файл не задан, или равен «-», то данные считываются со стандартного ввода.\r\n</p>\r\n[code]\r\nwc [опции] [файл(ы)]\r\n[/code]\r\n<p>\r\nОпции:\r\n</p>\r\n<ul>\r\n  <li><code>-l</code> — вывод количества новых строк;</li>\r\n  <li><code>-w</code> — вывод количества слов;</li>\r\n  <li><code>-m</code> — вывод общего количества символов;</li>\r\n  <li><code>-c</code> — вывод количества байт;</li>\r\n  <li><code>-L</code> — вывод длины самой длинной строки в заданном тексте.</li>\r\n</ul>\r\n<p>\r\nПо умолчанию используется набор <code>-lwc</code>.\r\n</p>\r\n[cli]\r\n$ cat unix.txt\r\nThe Unix operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe design of the Unix system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n$cat lorem.txt\r\nLorem ipsum dolor sit amet, consectetur adipiscing\r\nelit, sed do eiusmod tempor incididunt ut labore et\r\ndolore magna aliqua. Ut enim ad minim veniam, quis\r\nnostrud exercitation ullamco laboris nisi ut aliquip\r\nex ea commodo consequat.\r\n[/cli]\r\n[cli]\r\n$ wc unix.txt\r\n  6 41 247 unix.txt\r\n[/cli]\r\n[cli]\r\n$ wc -l unix.txt\r\n6 unix.txt\r\n[/cli]\r\n[cli]\r\n$ wc unix.txt lorem.txt\r\n  6 41 247 unix.txt\r\n  5 36 232 lorem.txt\r\n 11 77 479 Итого\r\n[/cli]','2018-02-15 22:05:12'),(39,9,'Команда tr','','','Команда служит для замены выбранных символов на другие символы или удаления их. В отличие от большинства других команд, не принимает имен файлов в качестве аргумента. Ввод команды осуществляется или со стандартного ввода, или с вывода других программ путем перенаправления.','<p>\r\nКоманда служит для замены выбранных символов на другие символы или удаления их. В отличие от большинства других команд, не принимает имен файлов в качестве аргумента. Ввод команды <code>tr</code> осуществляется или со стандартного ввода, или с вывода других программ путем перенаправления.\r\n</p>\r\n[code]\r\ntr [red][опция][/red] [grn]исходные_символы[/grn] [grn]целевые_символы[/grn]\r\n[/code]\r\n<p>\r\nЛюбой символ, который содержат <code>исходные символы</code> во входных данных, будет преобазован в соответствующий символ, включенный в <code>целевые символы</code>.\r\n</p>\r\n[cli]\r\n$ cat unix.txt\r\nThe Unix operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe design of the Unix system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]\r\n[cli]\r\n$ tr e x < unix.txt\r\nTh[red]x[/red] Unix op[red]x[/red]rating syst[red]x[/red]m was pion[red]x[/red][red]x[/red]r[red]x[/red]d by K[red]x[/red]n\r\nThompson and D[red]x[/red]nnis Ritchi[red]x[/red] at B[red]x[/red]ll Laboratori[red]x[/red]s\r\nin th[red]x[/red] lat[red]x[/red] 1960s. On[red]x[/red] of th[red]x[/red] primary goals in\r\nth[red]x[/red] d[red]x[/red]sign of th[red]x[/red] Unix syst[red]x[/red]m was to cr[red]x[/red]at[red]x[/red] an\r\n[red]x[/red]nvironm[red]x[/red]nt that promot[red]x[/red]d [red]x[/red]ffici[red]x[/red]nt program\r\nd[red]x[/red]v[red]x[/red]lopm[red]x[/red]nt.\r\n[/cli]\r\n[cli]\r\n$ tr [a-z] [A-Z] < unix.txt\r\nTHE UNIX OPERATING SYSTEM WAS PIONEERED BY KEN\r\nTHOMPSON AND DENNIS RITCHIE AT BELL LABORATORIES\r\nIN THE LATE 1960S. ONE OF THE PRIMARY GOALS IN\r\nTHE DESIGN OF THE UNIX SYSTEM WAS TO CREATE AN\r\nENVIRONMENT THAT PROMOTED EFFICIENT PROGRAM\r\nDEVELOPMENT.\r\n[/cli]\r\n<p>\r\nС помощью параметра <code>-d</code> можно удалить отдельные символы из потока ввода:\r\n</p>\r\n[cli]\r\n$ tr -d \' \' < unix.txt\r\nTheUnixoperatingsystemwaspioneeredbyKen\r\nThompsonandDennisRitchieatBellLaboratories\r\ninthelate1960s.Oneoftheprimarygoalsin\r\nthedesignoftheUnixsystemwastocreatean\r\nenvironmentthatpromotedefficientprogram\r\ndevelopment.\r\n[/cli]\r\n<p>Указав параметр <code>-s</code> можно заменить последовательность повторяющихся символов на единственный символ:\r\n</p>\r\n[cli]\r\n$cat spaces.txt\r\nThis   is   an   example   of   a\r\nfile   that   contains   a   lot\r\nof   blank   spaces.\r\n$ tr -s \' \' \' \' < spaces.txt\r\nThis is an example of a\r\nfile that contains a lot\r\nof blank spaces.\r\n[/cli]\r\n<p>\r\nКоманда <code>tr</code> также оперирует с управляющими символами и прочими элементами форматирования:\r\n</p>\r\n<ul>\r\n  <li><code>\\\\</code> — обратный слэш</li>\r\n  <li><code>\\f</code> — перевод страницы</li>\r\n  <li><code>\\n</code> — новая строка</li>\r\n  <li><code>\\r</code> — возврат каретки</li>\r\n  <li><code>\\t</code> — горизонтальная табуляция</li>\r\n  <li><code>\\v</code> — вертикальная табуляция</li>\r\n</ul>\r\n<p>\r\nНапример, заменить табуляцию на пробел:\r\n</p>\r\n[cli]\r\n$ tr \'\\t\' \' \' < example.txt\r\n[/cli]\r\n<p>\r\nМожно указать класс символов из набора предопределенных символов:\r\n</p>\r\n<ul>\r\n  <li><code>[:alnum:]</code> — Символы алфавита в любом регистре и цифры</li>\r\n  <li><code>[:alpha:]</code> — Символы алфавита в любом регистре</li>\r\n  <li><code>[:blank:]</code> — Пустое множество</li>\r\n  <li><code>[:cntrl:]</code> — Управляющие символы</li>\r\n  <li><code>[:digit:]</code> — Десятичные цифры</li>\r\n  <li><code>[:graph:]</code> — Все символы, которые могут быть напечатаны, кроме пробела</li>\r\n  <li><code>[:lower:]</code> — Алфавитные символы в нижнем регистре</li>\r\n  <li><code>[:print:]</code> — Все символы, которые могут быть напечатаны</li>\r\n  <li><code>[:punct:]</code> — Все символы пунктуации</li>\r\n  <li><code>[:space:]</code> — Пробел или табуляция</li>\r\n  <li><code>[:upper:]</code> — Алфавитные символы в верхнем регистре</li>\r\n  <li><code>[:xdigit:]</code> — Шестнадцатеричные цифры</li>\r\n</ul>\r\n<p>\r\nПеревести все символы нижнего регистра в верхний регистр:\r\n</p>\r\n[cli]\r\n$ tr \"[:lower:]\" \"[:upper:]\" < example.txt\r\n[/cli]','2018-02-16 09:43:47'),(40,2,'Макет печатной формы документа','','','Одно из предназначений макета, подчиненного объекту конфигурации и содержащего табличный документ, — создание печатной формы этого объекта. Создание печатной формы заключается в конструировании ее составных частей — именованных областей, из которых затем «собирается» готовая печатная форма.','<p>\r\nОткроем в конфигураторе окно редактирования объекта конфигурации Документ ПриходнаяНакладная. Перейдем на закладку Макеты, нажмем кнопку Конструкторы и запустим конструктор печати.\r\n</p>\r\n<p>\r\nВ открывшемся окне конструктора на первом шаге укажем, что будет создана новая команда Печать для формирования печатной формы документа:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/40/1.jpg\"\" alt=\"\" />\r\n</p>\r\n<p>\r\nНа втором шаге определим реквизиты документа, которые будет содержать шапка печатной формы:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/40/2.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nНа третьем шаге определим, что все реквизиты табличной части будут отображены в печатной форме:\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/40/3.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nНа четвертом шаге конструктор предложит сформировать подвал печатной формы. Ничего не указываем (подвал использовать не будем) и переходим к следующему шагу.\r\n</p>\r\n<p>\r\nЗдесь ничего не меняем, тем самым согласимся с тем, что команда для вызова процедуры формирования печатной формы будет помещена в командную панель формы, в раздел Важное.\r\n</p>\r\n<p>\r\n<img src=\"/files/blog/40/4.jpg\" alt=\"\" />\r\n</p>\r\n<p>\r\nНажмем OK. В конфигураторе откроется модуль команды Печать, модуль менеджера документа ПриходнаяНакладная и макет этого документа.\r\n</p>\r\n<p>Модуль команды Печать</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)\r\n	ТабДок = Новый ТабличныйДокумент;\r\n	Печать(ТабДок, ПараметрКоманды);\r\n\r\n	ТабДок.ОтображатьСетку = Ложь;\r\n	ТабДок.Защита = Ложь;\r\n	ТабДок.ТолькоПросмотр = Ложь;\r\n	ТабДок.ОтображатьЗаголовки = Ложь;\r\n\r\n	ТабДок.Показать();\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура Печать(ТабДок, ПараметрКоманды)\r\n	Документы.ПриходнаяНакладная.Печать(ТабДок, ПараметрКоманды);\r\nКонецПроцедуры\r\n[/язык]\r\n<p>Модуль менеджера документа</p>\r\n[язык]\r\n\r\nПроцедура Печать(ТабДок, Ссылка) Экспорт\r\n	Макет = Документы.ПриходнаяНакладная.ПолучитьМакет(\"Печать\");\r\n	Запрос = Новый Запрос();\r\n	Запрос.Текст =\r\n	\"ВЫБРАТЬ\r\n	|	ПриходнаяНакладная.Дата,\r\n	|	ПриходнаяНакладная.Номер,\r\n	|	ПриходнаяНакладная.Склад,\r\n	|	ПриходнаяНакладная.Материалы.(\r\n	|		НомерСтроки,\r\n	|		Материал,\r\n	|		Количество,\r\n	|		Цена,\r\n	|		Сумма\r\n	|	)\r\n	|ИЗ\r\n	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная\r\n	|ГДЕ\r\n	|	ПриходнаяНакладная.Ссылка В (&Ссылка)\";\r\n	Запрос.Параметры.Вставить(\"Ссылка\", Ссылка);\r\n	Выборка = Запрос.Выполнить().Выбрать();\r\n\r\n	ОбластьЗаголовок = Макет.ПолучитьОбласть(\"Заголовок\");\r\n	Шапка = Макет.ПолучитьОбласть(\"Шапка\");\r\n	ОбластьМатериалыШапка = Макет.ПолучитьОбласть(\"МатериалыШапка\");\r\n	ОбластьМатериалы = Макет.ПолучитьОбласть(\"Материалы\");\r\n	ТабДок.Очистить();\r\n\r\n	ВставлятьРазделительСтраниц = Ложь;\r\n	Пока Выборка.Следующий() Цикл\r\n		Если ВставлятьРазделительСтраниц Тогда\r\n			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();\r\n		КонецЕсли;\r\n\r\n		ТабДок.Вывести(ОбластьЗаголовок);\r\n\r\n		Шапка.Параметры.Заполнить(Выборка);\r\n		ТабДок.Вывести(Шапка, Выборка.Уровень());\r\n\r\n		ТабДок.Вывести(ОбластьМатериалыШапка);\r\n		ВыборкаМатериалы = Выборка.Материалы.Выбрать();\r\n		Пока ВыборкаМатериалы.Следующий() Цикл\r\n			ОбластьМатериалы.Параметры.Заполнить(ВыборкаМатериалы);\r\n			ТабДок.Вывести(ОбластьМатериалы, ВыборкаМатериалы.Уровень());\r\n		КонецЦикла;\r\n		\r\n		ВставлятьРазделительСтраниц = Истина;\r\n	КонецЦикла;\r\nКонецПроцедуры\r\n[/язык]\r\n<p>Макет документа</p>\r\n<p>\r\n<img src=\"/files/blog/40/5.jpg\" alt=\"\" />\r\n</p>\r\n<h2>Редактирование макета</h2>\r\n<p> \r\nДобавим новую область для вывода итоговой суммы документа. Выделим мышью две пустые строки под табличной частью документа и выполним пункт главного меню Таблица&nbsp;> Имена&nbsp;> Назначить имя. Назовем область <code>Всего</code>, нажмем ОК.\r\n</p>\r\n<p>\r\nВ созданной области, в колонке <code>Цена</code>, напишем <code>ВСЕГО</code>, а в колонке <code>Сумма</code> напишем <code>ВсегоПоДокументу</code>:\r\n</p>\r\n<p>\r\n<a href=\"/files/blog/40/6.jpg\" class=\"zoom\"><img src=\"/files/blog/40/6.jpg\" alt=\"\" /></a>\r\n</p>\r\n<p>\r\nВызвав палитру свойств для последней заполненной нами ячейки, в свойстве <code>Заполнение</code> укажем, что в этой ячейке будет находиться не текст, а параметр.\r\n</p>\r\n<p>\r\nОткроем модуль менеджера документа ПриходнаяНакладная, найдем в нем процедуру <code>Печать</code> и отредактируем ее следующим образом\r\n[язык]\r\nПроцедура Печать(ТабДок, Ссылка) Экспорт\r\n	Макет = Документы.ПриходнаяНакладная.ПолучитьМакет(\"Печать\");\r\n	Запрос = Новый Запрос();\r\n	Запрос.Текст =\r\n	\"ВЫБРАТЬ\r\n	|	ПриходнаяНакладная.Дата,\r\n	|	ПриходнаяНакладная.Номер,\r\n	|	ПриходнаяНакладная.Склад,\r\n	|	ПриходнаяНакладная.Материалы.(\r\n	|		НомерСтроки,\r\n	|		Материал,\r\n	|		Количество,\r\n	|		Цена,\r\n	|		Сумма\r\n	|	)\r\n	|ИЗ\r\n	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная\r\n	|ГДЕ\r\n	|	ПриходнаяНакладная.Ссылка В (&Ссылка)\";\r\n	Запрос.Параметры.Вставить(\"Ссылка\", Ссылка);\r\n	Выборка = Запрос.Выполнить().Выбрать();\r\n\r\n	ОбластьЗаголовок = Макет.ПолучитьОбласть(\"Заголовок\");\r\n	Шапка = Макет.ПолучитьОбласть(\"Шапка\");\r\n	ОбластьМатериалыШапка = Макет.ПолучитьОбласть(\"МатериалыШапка\");\r\n	ОбластьМатериалы = Макет.ПолучитьОбласть(\"Материалы\");\r\n	// получаем область макета «Всего»\r\n	ОбластьВсего = Макет.ПолучитьОбласть(\"Всего\");\r\n	ТабДок.Очистить();\r\n\r\n	ВставлятьРазделительСтраниц = Ложь;\r\n	// цикл по документам (на случай печати списка)\r\n	Пока Выборка.Следующий() Цикл\r\n		Если ВставлятьРазделительСтраниц Тогда\r\n			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();\r\n		КонецЕсли;\r\n\r\n		ТабДок.Вывести(ОбластьЗаголовок);\r\n\r\n		Шапка.Параметры.Заполнить(Выборка);\r\n		ТабДок.Вывести(Шапка, Выборка.Уровень());\r\n\r\n		ТабДок.Вывести(ОбластьМатериалыШапка);\r\n		ВыборкаМатериалы = Выборка.Материалы.Выбрать();\r\n		// сумма табличной части документа\r\n		СуммаИтог = 0;\r\n		Пока ВыборкаМатериалы.Следующий() Цикл\r\n			ОбластьМатериалы.Параметры.Заполнить(ВыборкаМатериалы);\r\n			ТабДок.Вывести(ОбластьМатериалы, ВыборкаМатериалы.Уровень());\r\n			// увеличиваем сумму на каждой итерации\r\n			СуммаИтог = СуммаИтог + ВыборкаМатериалы.Сумма;\r\n		КонецЦикла;\r\n		\r\n		// устанавливаем значение параметра области\r\n		ОбластьВсего.Параметры.ВсегоПоДокументу = СуммаИтог;\r\n		// выводим область макета «Всего»\r\n		ТабДок.Вывести(ОбластьВсего);\r\n		ВставлятьРазделительСтраниц = Истина;\r\n	КонецЦикла;\r\nКонецПроцедуры\r\n[/язык]','2018-02-16 14:47:12'),(41,1,'Регулярные выражения в Pyhton','','','Регулярные выражения — это специальные шаблоны для поиска и замены строк в тексте. Внутри этих шаблонов используются сокращенные обозначения групп символов. В Python для работы с регулярными выражениями есть модуль re.','<p>\r\nВ Python для работы с регулярными выражениями есть модуль <code>re</code>. Для использования его нужно импортировать. Рассмотрим простой пример поиска номера телефона:\r\n</p>\r\n[idle]\r\n>>> import re\r\n>>> match = re.search(\'\\d{3}-\\d{3}-\\d{4}\', \'Мой номер 495-456-9102\')\r\n>>> print(\'Найденный телефонный номер: \' + match.group())\r\nНайденный телефонный номер: 495-456-9102\r\n[/idle]\r\n<p>\r\nЕсли найдены совпадения, метод <code>re.search()</code> возвращает объект <code>Match</code>. Если совпадений нет — <code>None</code>.\r\n</p>\r\n<p>\r\nМетоды, которые предоставляет библиотека <code>re</code>:\r\n</p>\r\n<ul>\r\n  <li><code>re.match(pattern, string, [flags=0])</code></li>\r\n  <li><code>re.search(pattern, string, [flags=0])</code></li>\r\n  <li><code>re.findall(pattern, string, [flags=0])</code></li>\r\n  <li><code>re.split(pattern, string, [maxsplit=0], [flags=0])</code></li>\r\n  <li><code>re.sub(pattern, replace, string, [count=0], [flags=0])</code></li>\r\n  <li><code>re.compile(pattern, [flags=0])</code></li>\r\n</ul>\r\n<p>\r\nСписок метасимволов, которые поддерживает модуль <code>re</code>:\r\n</p>\r\n[code]\r\n. ^ $ * + ? { } [ ] | ( )\r\n[/code]\r\n<p>\r\nНазначение метасимволов\r\n</p>\r\n<ul>\r\n  <li><code>.</code> — Один любой символ, кроме новой строки \\n</li>\r\n  <li><code>?</code> — 0 или 1 вхождение шаблона слева</li>\r\n  <li><code>+</code> — 1 и более вхождений шаблона слева</li>\r\n  <li><code>*</code> — 0 и более вхождений шаблона слева</li>\r\n  <li><code>\\w</code> — Любая цифра или буква (<code>\\W</code> — все, кроме буквы или цифры)</li>\r\n  <li><code>\\d</code> — Любая цифра от 0 до 9 (<code>\\D</code> — все, кроме цифры)</li>\r\n  <li><code>\\s</code> — Любой пробельный символ (<code>\\S</code> — любой непробельнй символ)</li>\r\n  <li><code>\\b</code> — Граница слова</li>\r\n  <li><code>[..]</code> — Один из символов в скобках (<code>[^..]</code> — любой символ, кроме тех, что в скобках)</li>\r\n  <li><code>\\</code> — Экранирование специальных символов (<code>\\.</code> означает точку или <code>\\+</code> — знак «плюс»)</li>\r\n  <li><code>^</code> и <code>$</code> — Начало и конец строки соответственно</li>\r\n  <li><code>{n,m}</code> — От n до m вхождений (<code>{,m}</code> — от 0 до m)</li>\r\n  <li><code>a|b</code> — Соответствует a или b</li>\r\n  <li><code>()</code> — Группирует выражение и возвращает найденный текст</li>\r\n  <li><code>\\t,\\n</code> — Символ табуляции, новой строки и возврата каретки соответственно</li>\r\n</ul>\r\n<p>\r\nСоздание групп с помощью круглых скобок:\r\n</p>\r\n[idle]\r\n>>> match = re.search(\'(\\d{3})-(\\d{3}-\\d{4})\', \'Мой номер 495-456-9102\')\r\n>>> match.group()\r\n\'495-456-9102\'\r\n>>> match.group(0)\r\n\'495-456-9102\'\r\n>>> print(\'Код города: \' + match.group(1))\r\nКод города: 495\r\n>>> print(\'Номер телефона: \' + match.group(2))\r\nНомер телефона: 456-9102\r\n[/idle]\r\n<p>Если нужно извлечь сразу все группы:</p>\r\n[idle]\r\n>>> match = re.search(\'(\\d{3})-(\\d{3}-\\d{4})\', \'Мой номер 495-456-9102\')\r\n>>> match.groups()\r\n(\'495\', \'456-9102\')\r\n>>> code, number = match.groups()\r\n>>> code\r\n\'495\'\r\n>>> number\r\n\'456-9102\'\r\n[/idle]\r\n<p>Метод <code>re.search()</code> находит только первое вхождение шаблона. Если нужно найти все вхождения, используйте метод <code>re.findall()</code>:</p>\r\n[idle]\r\n>>> matches = re.findall(\'\\d{3}-\\d{3}-\\d{4}\', \'Домашний 495-456-9102 или мобильный 926-123-4567\')\r\n>>> matches\r\n[\'495-456-9102\', \'926-123-4567\']\r\n[/idle]\r\n<p>Поиск всех групп для всех совпадений шаблона:</p>\r\n[idle]\r\n>>> matches = re.findall(\'(\\d{3})-(\\d{3}-\\d{4})\', \'Домашний 495-456-9102 или мобильный 926-123-4567\')\r\n>>> matches\r\n[(\'495\', \'456-9102\'), (\'926\', \'123-4567\')]\r\n>>> matches[0][0]\r\n\'495\'\r\n>>> matches[1][1]\r\n\'123-4567\'\r\n[/idle]\r\n<p>Метод <code>re.split()</code> разделяет строку по заданному шаблону:</p>\r\n[idle]\r\n>>> re.split(\'\\n\', \'First line.\\nSecond line.\\nThird line.\')\r\n[\'First line.\', \'Second line.\', \'Third line.\']\r\n[/idle]\r\n<p>\r\nМетод <code>re.sub()</code> ищет шаблон в строке и заменяет его на указанную подстроку. Если шаблон не найден, строка остается неизменной.\r\n</p>\r\n[idle]\r\n>>> re.sub(\'RoboCop\', \'Робот-полицейский\', \'RoboCop is part man, part machine, all cop.\')\r\n\'Робот-полицейский is part man, part machine, all cop.\'\r\n[/idle]\r\n<p>\r\nВ строке замены можно использовать обратные ссылки <code>\\1</code>, <code>\\2</code>, <code>\\3</code> и т.д.\r\n<p>\r\n[idle]\r\n>>> re.sub(\'(\\d{3})-(\\d{3}-\\d{4})\', \'код города \\\\1, номер телефона \\\\2\', \'Мой номер: 495-456-9102\')\r\n\'Мой номер: код города 495, номер телефона 456-9102\'\r\n[/idle]\r\nМетод <code>re.match()</code> ищет по заданному шаблону в начале строки.\r\n</p>\r\n[idle]\r\n>>> None == re.match(\'\\d{3}-\\d{3}-\\d{4}\', \'495-456-9102 Мой номер\')\r\nFalse\r\n>>> None == re.match(\'\\d{3}-\\d{3}-\\d{4}\', \'Мой номер 495-456-9102\')\r\nTrue\r\n[/idle]\r\n<p>\r\nМетод <code>re.compite()</code> позволяет собрать регулярное выражение в отдельный объект, который может быть использован для поиска. Это также избавляет от переписывания одного и того же выражения.\r\n</p>\r\n[idle]\r\n>>> regexp = re.compile(\'\\d{3}-\\d{3}-\\d{4}\')\r\n>>> match = regexp.search(\'Мой номер 495-456-9102\')\r\n>>> print(\'Найденный телефонный номер: \' + match.group())\r\nНайденный телефонный номер: 495-456-9102\r\n[/idle]\r\n<p>Флаги компиляции регулярных выражений</p>\r\n<ul>\r\n  <li><code>re.A</code> или <code>re.ASCII</code></li>\r\n  <li><code>re.DEBUG</code></li>\r\n  <li><code>re.I</code> или <code>re.IGNORECASE</code></li>\r\n  <li><code>re.L</code> или <code>re.LOCALE</code></li>\r\n  <li><code>re.M</code> или <code>re.MULTILINE</code></li>\r\n  <li><code>re.S</code> или <code>re.DOTALL</code></li>\r\n  <li><code>re.X</code> или <code>re.VERBOSE</code></li>\r\n</ul>\r\n<p>Игнорирование регистра при поиске соответствий</p>\r\n[idle]\r\n>>> re.search(\'robocop\', \'RoboCop is part man, part machine, all cop.\', re.IGNORECASE).group()\r\n\'RoboCop\'\r\n[/idle]\r\n<p>\r\nКомбинации <code>.*</code> соответствует все, за исключением символа новой строки. С помощью <code>re.DOTALL</code> можно установить режим, при котором точке соответствует также символ новой строки.\r\n</p>\r\n[idle]\r\n>>> re.search(\'.*\', \'First line.\\nSecond line.\\nThird line.\').group()\r\n\'First line.\'\r\n>>> re.search(\'.*\', \'First line.\\nSecond line.\\nThird line.\', re.DOTALL).group()\r\n\'First line.\\nSecond line.\\nThird line.\'\r\n[/idle]\r\n<p>Если нужно использовать несколько флагов компиляции:</p>\r\n[idle]\r\n>>> regexp = re.compile(\'foo\', re.DOTALL | re.IGNORECASE)\r\n[/idle]\r\n<p>\r\nФлаг компиляции <code>re.VERBOSE</code> включает многословный режим, при котором пробелы и комментарии игнорируются.\r\n</p>\r\n[code]\r\n# регулярное выражение для номера телефона\r\nphoneRegex = re.compile(\'\'\'\r\n    (?:\\(?(\\d{3})\\)?)?             # код города\r\n    (?:\\s|-)?                      # разделитель\r\n    (\\d{3})                        # первые три цифры\r\n    (?:\\s|-)?                      # разделитель\r\n    (\\d{2})                        # еще две цифры\r\n    (?:\\s|-)?                      # разделитель\r\n    (\\d{2})                        # еще две цифры\r\n    (?:\\s*доб[.а-я]*\\s*(\\d{2,5}))? # добавочный\r\n    \'\'\', re.VERBOSE)\r\n\r\n# регулярное выражение для адреса эл.почты\r\nemailRegex = re.compile(\'\'\'\r\n    [a-z0-9._-]+     # имя пользователя\r\n    @                # @\r\n    [a-z0-9.-]+      # первая часть домена\r\n    \\.[a-z]{2,6}     # вторая часть домена\r\n    \'\'\', re.VERBOSE | re.IGNORECASE)\r\n[/code]','2018-02-17 10:07:09'),(42,2,'Узелки на память','','','Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.','<p>\r\nСвойство <code>Ведущее</code> для измерения регистра накопления имеет смысл лишь тогда, когда измерение — ссылка на объект конфигурации. В этом случае считается, что запись регистра сведений имеет смысл, только пока существует этот объект. При удалении объекта, записи по нему из регистра будут удалены автоматически.\r\n<p>\r\n<p>\r\nЕсли установлено свойство <code>Ведущее</code> для измерения регистра типа <code>СправочникСсылка.Номенклатура</code>, в форме элемента справочника <code>Номенклатура</code>,  в панели навигации появится ссылка. По ней возможен переход к записям регистра, которые содержат в измерении <code>Номенклатура</code> ссылку на этот элемент справочника.\r\n</p>\r\n<hr>\r\n<p>\r\nФункция в общем модуле <code>РаботаСоСправочниками</code> (Сервер, ВызовСервера) для получения данных из периодического регистра сведений <code>ЦеныНоменклатуры</code>.\r\n</p>\r\n[язык]\r\nФункция ПолучитьРозничнуюЦену(Дата, Номенклатура) Экспорт\r\n    // создать отбор по номенкатуре для получения данных из регистра\r\n    Отбор = Новый Структура(\"Номенклатура\", Номенклатура);\r\n    // получить значения периодического регистра сведений на указанную дату\r\n    ЗначенияРесурсов = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(\r\n        Дата,\r\n        Отбор\r\n    );\r\n    Возврат ЗначенияРесурсов.Цена;\r\nКонецФункции\r\n[/язык]\r\n<p>Вызов этой функции из модуля формы документа <code>РасходнаяНакладная</code>.</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ПереченьНоменклатурыНоменклатураПриИзменении(Элемент)\r\n    // получить текущую строку табличной части\r\n    СтрокаТабличнойЧасти = ЭтаФорма.Элементы.ПереченьНоменклатуры.ТекущиеДанные;\r\n    // установить цену на дату документа\r\n    СтрокаТабличнойЧасти.Цена = РаботаСоСправочниками.ПолучитьРозничнуюЦену(\r\n        Объект.Дата,\r\n        СтрокаТабличнойЧасти.Номенклатура\r\n    );\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура ДатаПриИзменении(Элемент)\r\n    // получить все строки табличной части\r\n    ПереченьНоменклатуры = Объект.ПереченьНоменклатуры;\r\n    Для Каждого СтрокаТабличнойЧасти Из ПереченьНоменклатуры Цикл\r\n        // установить цену на дату документа\r\n        СтрокаТабличнойЧасти.Цена = РаботаСоСправочниками.РозничнаяЦена(\r\n            Объект.Дата,\r\n            СтрокаТабличнойЧасти.Номенклатура\r\n        );\r\n    КонецЦикла;\r\nКонецПроцедуры\r\n[/язык]\r\n<hr>\r\n<p>\r\nСтандартное представление элемента справочника определяется свойством <code>ОсновноеПредставление</code>. По умолчанию это свойство установлено в значение <code>В виде наименования</code>.\r\n</p>\r\n<p>\r\nМеханизм формирования представления состоит из двух этапов: определения реквизитов, участвующих в формировании представления, и собственно формирование представления. Для этого используются обработчики событий <code>ОбработкаПолученияПолейПредставления</code> и <code>ОбработкаПолученияПредставления</code> менеджера объекта.\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)\r\n	СтандартнаяОбработка = Ложь;\r\n	Поля.Добавить(\"Наименование\");\r\n	Поля.Добавить(\"ВидНоменклатуры\");\r\nКонецПроцедуры\r\n\r\nПроцедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)\r\n	СтандартнаяОбработка = Ложь;\r\n	Если ЗначениеЗаполнено(Данные.ВидНоменклатуры) Тогда\r\n		Представление =\r\n			Данные.Наименование + \"(\" + Строка(Данные.ВидНоменклатуры) + \")\";\r\n	Иначе\r\n		Представление = Данные.Наименование;\r\n	КонецЕсли;\r\nКонецПроцедуры\r\n[/язык]\r\n<hr>\r\n<p>Представление списка справочника, модуль формы</p>\r\n[язык]\r\n&НаКлиенте\r\nПроцедура ПриОткрытии(Отказ)\r\n    ЭтаФорма.Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;\r\n    //ЭтаФорма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;\r\n    //ЭтаФорма.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;\r\n    ЭтаФорма.Элементы.Список.НачальноеОтображениеДерева =\r\n        НачальноеОтображениеДерева.РаскрыватьВсеУровни;\r\n    //ЭтаФорма.Элементы.Список.НачальноеОтображениеДерева =\r\n    //    НачальноеОтображениеДерева.НеРаскрывать;\r\n    //ЭтаФорма.Элементы.Список.НачальноеОтображениеДерева =\r\n    //    НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;\r\nКонецПроцедуры\r\n[/язык]\r\n<hr>\r\n<p>\r\nДвижения документа <code>ПриходнаяНакладная</code> по двум регистрам накопления <code>ОстаткиМатериалов</code> и <code>СтоимостьМатериалов</code>, модуль объекта.\r\n</p>\r\n[язык]\r\nПроцедура ОбработкаПроведения(Отказ, Режим)\r\n    Движения.ОстаткиМатериалов.Записывать = Истина;\r\n    Движения.СтоимостьМатериалов.Записывать = Истина;\r\n    Для Каждого ТекСтрокаМатериалы Из Материалы Цикл\r\n        // регистр ОстаткиМатериалов Приход\r\n        Движение = Движения.ОстаткиМатериалов.Добавить();\r\n        Движение.ВидДвижения = ВидДвиженияНакопления.Приход;\r\n        Движение.Период = Дата;\r\n        Движение.Материал = ТекСтрокаМатериалы.Материал;\r\n        Движение.Склад = Склад;\r\n        Движение.Количество = ТекСтрокаМатериалы.Количество;     \r\n        // регистр СтоимостьМатериалов Приход\r\n        Движение = Движения.СтоимостьМатериалов.Добавить();\r\n        Движение.ВидДвижения = ВидДвиженияНакопления.Приход;\r\n        Движение.Период = Дата;\r\n        Движение.Материал = ТекСтрокаМатериалы.Материал;\r\n        Движение.Стоимость = ТекСтрокаМатериалы.Сумма;\r\n    КонецЦикла;\r\nКонецПроцедуры\r\n[/язык]','2018-02-17 13:30:15'),(43,9,'Команда grep','','','Команда находит в одном или нескольких файлах строки, совпадающие с указанным шаблоном. Если в команде указано несколько файлов, каждая найденная строка предваряется именем файла.','<p>\r\nКоманда находит в одном или нескольких файлах строки, совпадающие с указанным шаблоном. Если в команде указано несколько файлов, каждая найденная строка предваряется именем файла.\r\n</p>\r\n[code]\r\ngrep [grn][опции][/grn] [red]шаблон[/red] [grn]файл(ы)[/grn]\r\n[/code]\r\n<p>\r\nПоиск строки «Unix» в файле <code>unix.txt</code>:\r\n</p>\r\n[cli]\r\n$ cat unix.txt\r\nThe Unix operating system was pioneered by Ken\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nthe design of the Unix system was to create an\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n$ grep \'Unix\' unix.txt\r\nThe [red]Unix[/red] operating system was pioneered by Ken\r\nthe design of the [red]Unix[/red] system was to create an\r\n[/cli]\r\n<p>Поиск строк, содержащих цифры:</p>\r\n[cli]\r\n$ grep \'[0-9]\' unix.txt\r\nin the late [red]1960[/red]s. One of the primary goals in\r\n[/cli]\r\n<p>Опция <code>-i</code> ведет поиск без учета регистра:</p>\r\n[cli]\r\n$ grep -i \'the\' unix.txt\r\n[red]The[/red] Unix operating system was pioneered by Ken\r\nin [red]the[/red] late 1960s. One of [red]the[/red] primary goals in\r\n[red]the[/red] design of [red]the[/red] Unix system was to create an\r\n[/cli]\r\n<p>Опция <code>-v</code> позволяет найти строки, которые не содержат указанный шаблон:</p>\r\n[cli]\r\n$ grep -v \'Unix\' unix.txt\r\nThompson and Dennis Ritchie at Bell Laboratories\r\nin the late 1960s. One of the primary goals in\r\nenvironment that promoted efficient program\r\ndevelopment.\r\n[/cli]\r\n<p>Опция <code>-n</code> выводит номера строк файла, в которых найдено совпадение с шаблоном:</p>\r\n[cli]\r\n$ grep -n \'Unix\' unix.txt\r\n[grn]1:[/grn]The [red]Unix[/red] operating system was pioneered by Ken\r\n[grn]4:[/grn]the design of the [red]Unix[/red] system was to create an\r\n[/cli]\r\n<p>Поиск совпадений во всех файлах директории:</p>\r\n[cli]\r\n$ grep \'шаблон\' example/*\r\n[/cli]\r\n<p>Опция <code>-l</code> позволяет получить только список файлов, в которых было найдено совпадение:</p>\r\n[cli]\r\n$ grep -l \'шаблон\' example/*\r\n[/cli]\r\n<p>Опция <code>-L</code> наоборот, позволяет получить список тех файлов, где совпадение не было найдено:</p>\r\n[cli]\r\n$ grep -L \'шаблон\' example/*\r\n[/cli]\r\n<p>\r\nОпция <code>-r</code> заставляет <code>grep</code> рекурсивно обследовать все дерево указанной директории, то есть все поддиректории вплоть до файлов:\r\n</p>\r\n[cli]\r\n$ grep -r \'шаблон\' /home\r\n[/cli]\r\n<p>\r\nКоманда <code>grep</code> поддерживает два типа регулярных выражений: базовый (BRE — basic regular expressions) и расширенный (ERE — extended regular expressions). По умолчанию <code>grep</code> использует базовый тип регулярных выражений.\r\n</p>\r\n<p>В BRE распознаются следующие метасимволы:</p>\r\n[code]\r\n^ $ . [ ] *\r\n[/code]\r\n<p>\r\nВсе другие символы расцениваются как литералы. В ERE добавлены следующие метасимволы (и связанные с ними функции):\r\n</p>\r\n[code]\r\n( ) { } ? + |\r\n[/code]\r\n<p>\r\nТем не менее, символы «(», «)», «{» и «}» в BRE обрабатываются как метасимволы, если они экранированы обратным слешом; в то время как в ERE постановка перед любыми метасимволами обратного слеша приводит к тому, что они трактуются как литералы.\r\n</p>\r\n<p>\r\nОпция <code>-E</code> команды <code>grep</code> позволяет использовать расширенные регулярные выражения.\r\n</p>','2018-02-17 15:56:57'),(44,1,'Модуль os в Python','','','Модуль позволяет работать с файлами и папками. Русские названия файлов и папок возвращаются и принимаются всеми функциями этого модуля в кодировке UTF-8, поэтому необходимо использовать функции для перекодирования строк — методы decode и encode.','<p>\r\nМодуль позволяет работать с файлами и папками. Русские названия файлов и папок возвращаются и принимаются всеми функциями этого модуля в кодировке UTF-8, поэтому необходимо использовать функции для перекодирования строк — методы decode и encode.\r\n</p>\r\n<p>\r\nСвойства и методы:\r\n</p>\r\n<ul>\r\n  <li><code>os.name</code></li>\r\n  <li><code>os.environ</code></li>\r\n  <li><code>os.chdir()</code></li>\r\n  <li><code>os.getcwd()</code></li>\r\n  <li><code>os.getenv()</code></li>\r\n  <li><code>os.putenv()</code></li>\r\n  <li><code>os.mkdir()</code></li>\r\n  <li><code>os.makedirs()</code></li>\r\n  <li><code>os.remove()</code></li>\r\n  <li><code>os.rename()</code></li>\r\n  <li><code>os.rmdir()</code></li>\r\n  <li><code>os.startfile()</code></li>\r\n  <li><code>os.walk()</code></li>\r\n  <li><code>os.path</code></li>\r\n</ul>\r\n<p>\r\nДля использования любого из методов, нужно импортировать модуль os:\r\n</p>\r\n[idle]import os[/idle]\r\n\r\n<p>\r\nМодуль os.path встроен в модуль os и позволяет работать с путями к файлам и папкам. Основные методы:\r\n</p>\r\n<ul>\r\n  <li><code>os.path.basename()</code></li>\r\n  <li><code>os.path.dirname()</code></li>\r\n  <li><code>os.path.exists()</code></li>\r\n  <li><code>os.path.isdir()</code></li>\r\n  <li><code>os.path.isfile()</code></li>\r\n  <li><code>os.path.join()</code></li>\r\n  <li><code>os.path.split()</code></li>\r\n</ul>','2018-02-19 18:08:25');
/*!40000 ALTER TABLE `blog_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_tags`
--

DROP TABLE IF EXISTS `blog_tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_tags` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор',
  `name` varchar(100) NOT NULL COMMENT 'Название тега',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=35 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_tags`
--

LOCK TABLES `blog_tags` WRITE;
/*!40000 ALTER TABLE `blog_tags` DISABLE KEYS */;
INSERT INTO `blog_tags` VALUES (1,'Linux'),(2,'Команда'),(3,'HTML'),(4,'CSS'),(5,'JavaScript'),(6,'jQuery'),(7,'PHP'),(8,'MySQL'),(9,'Web-разработка'),(10,'1С:Предприятие'),(11,'1С:Конфигурация'),(12,'1С:ЯзыкЗапросов'),(29,'Bash'),(14,'Windows'),(15,'CLI'),(16,'stdin'),(17,'stdout'),(18,'stderr'),(19,'Плагин'),(20,'Python'),(24,'1С:Разработка'),(25,'1С:СКД'),(26,'CentOS'),(27,'Ubuntu'),(28,'Редактор'),(31,'RegExp'),(32,'Регистр'),(33,'Измерение'),(34,'Форма');
/*!40000 ALTER TABLE `blog_tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `menu`
--

DROP TABLE IF EXISTS `menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `menu` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор пункта меню',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT 'Наименование пункта меню',
  `url` varchar(100) NOT NULL DEFAULT '' COMMENT 'Виртуальный адрес для роутера',
  `parent` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Идентификатор родителя',
  `sortorder` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Порядок сортировки',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT='Главное меню сайта';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `menu`
--

LOCK TABLES `menu` WRITE;
/*!40000 ALTER TABLE `menu` DISABLE KEYS */;
INSERT INTO `menu` VALUES (1,'Блог','frontend/blog/index',0,1),(2,'Статьи','frontend/article/index',0,2);
/*!40000 ALTER TABLE `menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `pages`
--

DROP TABLE IF EXISTS `pages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pages` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор страницы',
  `parent` int(11) unsigned NOT NULL DEFAULT '0' COMMENT 'Идентификатор родителя',
  `sefurl` varchar(100) NOT NULL COMMENT 'ЧПУ страницы',
  `name` varchar(255) NOT NULL DEFAULT '' COMMENT 'Заголовок страницы',
  `title` varchar(255) NOT NULL DEFAULT '' COMMENT 'Заголовок документа',
  `keywords` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега keywords',
  `description` varchar(255) NOT NULL DEFAULT '' COMMENT 'Содержимое мета-тега description',
  `body` text NOT NULL COMMENT 'Текст страницы в формате html',
  `sortorder` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Порядок сортировки',
  PRIMARY KEY (`id`),
  UNIQUE KEY `sefurl` (`sefurl`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Страницы сайта';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `pages`
--

LOCK TABLES `pages` WRITE;
/*!40000 ALTER TABLE `pages` DISABLE KEYS */;
/*!40000 ALTER TABLE `pages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sitemap`
--

DROP TABLE IF EXISTS `sitemap`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sitemap` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Уникальный идентификатор',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT 'Наименование элемента карты сайта',
  `capurl` varchar(100) NOT NULL DEFAULT '' COMMENT 'Виртуальный адрес для роутера',
  `parent` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Идентификатор родителя',
  `sortorder` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Порядок сортировки',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COMMENT='Карта сайта';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sitemap`
--

LOCK TABLES `sitemap` WRITE;
/*!40000 ALTER TABLE `sitemap` DISABLE KEYS */;
INSERT INTO `sitemap` VALUES (1,'Блог','frontend/blog/index',0,1),(2,'Статьи','frontend/article/index',0,2),(3,'Web-разработка','frontend/blog/category/id/1',1,1),(4,'1С:Предприятие','frontend/blog/category/id/2',1,2),(5,'ОС Linux','frontend/blog/category/id/3',1,3),(6,'Web-разработка','frontend/article/category/id/1',2,1),(7,'1С:Предприятие','frontend/article/category/id/2',2,2),(8,'ОС Linux','frontend/article/category/id/3',2,3);
/*!40000 ALTER TABLE `sitemap` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-02-19 19:52:50
